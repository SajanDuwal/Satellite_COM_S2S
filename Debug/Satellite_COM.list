
Satellite_COM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c3b8  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000afc  0800c4f8  0800c4f8  0001c4f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cff4  0800cff4  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  0800cff4  0800cff4  0001cff4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cffc  0800cffc  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cffc  0800cffc  0001cffc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d000  0800d000  0001d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  0800d004  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000bd0  20000068  0800d06c  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000c38  0800d06c  00020c38  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020092  2**0
                  CONTENTS, READONLY
 13 .debug_info   000221f3  00000000  00000000  000200d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004ec5  00000000  00000000  000422c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001f40  00000000  00000000  00047190  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000017dd  00000000  00000000  000490d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002251e  00000000  00000000  0004a8ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000233f2  00000000  00000000  0006cdcb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c46f9  00000000  00000000  000901bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000085a0  00000000  00000000  001548b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  0015ce58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000068 	.word	0x20000068
 800015c:	00000000 	.word	0x00000000
 8000160:	0800c4e0 	.word	0x0800c4e0

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000006c 	.word	0x2000006c
 800017c:	0800c4e0 	.word	0x0800c4e0

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000230:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000234:	f000 b970 	b.w	8000518 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9e08      	ldr	r6, [sp, #32]
 8000256:	460d      	mov	r5, r1
 8000258:	4604      	mov	r4, r0
 800025a:	460f      	mov	r7, r1
 800025c:	2b00      	cmp	r3, #0
 800025e:	d14a      	bne.n	80002f6 <__udivmoddi4+0xa6>
 8000260:	428a      	cmp	r2, r1
 8000262:	4694      	mov	ip, r2
 8000264:	d965      	bls.n	8000332 <__udivmoddi4+0xe2>
 8000266:	fab2 f382 	clz	r3, r2
 800026a:	b143      	cbz	r3, 800027e <__udivmoddi4+0x2e>
 800026c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000270:	f1c3 0220 	rsb	r2, r3, #32
 8000274:	409f      	lsls	r7, r3
 8000276:	fa20 f202 	lsr.w	r2, r0, r2
 800027a:	4317      	orrs	r7, r2
 800027c:	409c      	lsls	r4, r3
 800027e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000282:	fa1f f58c 	uxth.w	r5, ip
 8000286:	fbb7 f1fe 	udiv	r1, r7, lr
 800028a:	0c22      	lsrs	r2, r4, #16
 800028c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000290:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000294:	fb01 f005 	mul.w	r0, r1, r5
 8000298:	4290      	cmp	r0, r2
 800029a:	d90a      	bls.n	80002b2 <__udivmoddi4+0x62>
 800029c:	eb1c 0202 	adds.w	r2, ip, r2
 80002a0:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 80002a4:	f080 811b 	bcs.w	80004de <__udivmoddi4+0x28e>
 80002a8:	4290      	cmp	r0, r2
 80002aa:	f240 8118 	bls.w	80004de <__udivmoddi4+0x28e>
 80002ae:	3902      	subs	r1, #2
 80002b0:	4462      	add	r2, ip
 80002b2:	1a12      	subs	r2, r2, r0
 80002b4:	b2a4      	uxth	r4, r4
 80002b6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002ba:	fb0e 2210 	mls	r2, lr, r0, r2
 80002be:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002c2:	fb00 f505 	mul.w	r5, r0, r5
 80002c6:	42a5      	cmp	r5, r4
 80002c8:	d90a      	bls.n	80002e0 <__udivmoddi4+0x90>
 80002ca:	eb1c 0404 	adds.w	r4, ip, r4
 80002ce:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002d2:	f080 8106 	bcs.w	80004e2 <__udivmoddi4+0x292>
 80002d6:	42a5      	cmp	r5, r4
 80002d8:	f240 8103 	bls.w	80004e2 <__udivmoddi4+0x292>
 80002dc:	4464      	add	r4, ip
 80002de:	3802      	subs	r0, #2
 80002e0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002e4:	1b64      	subs	r4, r4, r5
 80002e6:	2100      	movs	r1, #0
 80002e8:	b11e      	cbz	r6, 80002f2 <__udivmoddi4+0xa2>
 80002ea:	40dc      	lsrs	r4, r3
 80002ec:	2300      	movs	r3, #0
 80002ee:	e9c6 4300 	strd	r4, r3, [r6]
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d908      	bls.n	800030c <__udivmoddi4+0xbc>
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	f000 80ec 	beq.w	80004d8 <__udivmoddi4+0x288>
 8000300:	2100      	movs	r1, #0
 8000302:	e9c6 0500 	strd	r0, r5, [r6]
 8000306:	4608      	mov	r0, r1
 8000308:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030c:	fab3 f183 	clz	r1, r3
 8000310:	2900      	cmp	r1, #0
 8000312:	d149      	bne.n	80003a8 <__udivmoddi4+0x158>
 8000314:	42ab      	cmp	r3, r5
 8000316:	d302      	bcc.n	800031e <__udivmoddi4+0xce>
 8000318:	4282      	cmp	r2, r0
 800031a:	f200 80f7 	bhi.w	800050c <__udivmoddi4+0x2bc>
 800031e:	1a84      	subs	r4, r0, r2
 8000320:	eb65 0203 	sbc.w	r2, r5, r3
 8000324:	2001      	movs	r0, #1
 8000326:	4617      	mov	r7, r2
 8000328:	2e00      	cmp	r6, #0
 800032a:	d0e2      	beq.n	80002f2 <__udivmoddi4+0xa2>
 800032c:	e9c6 4700 	strd	r4, r7, [r6]
 8000330:	e7df      	b.n	80002f2 <__udivmoddi4+0xa2>
 8000332:	b902      	cbnz	r2, 8000336 <__udivmoddi4+0xe6>
 8000334:	deff      	udf	#255	; 0xff
 8000336:	fab2 f382 	clz	r3, r2
 800033a:	2b00      	cmp	r3, #0
 800033c:	f040 808f 	bne.w	800045e <__udivmoddi4+0x20e>
 8000340:	1a8a      	subs	r2, r1, r2
 8000342:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000346:	fa1f fe8c 	uxth.w	lr, ip
 800034a:	2101      	movs	r1, #1
 800034c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000350:	fb07 2015 	mls	r0, r7, r5, r2
 8000354:	0c22      	lsrs	r2, r4, #16
 8000356:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800035a:	fb0e f005 	mul.w	r0, lr, r5
 800035e:	4290      	cmp	r0, r2
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x124>
 8000362:	eb1c 0202 	adds.w	r2, ip, r2
 8000366:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x122>
 800036c:	4290      	cmp	r0, r2
 800036e:	f200 80ca 	bhi.w	8000506 <__udivmoddi4+0x2b6>
 8000372:	4645      	mov	r5, r8
 8000374:	1a12      	subs	r2, r2, r0
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb2 f0f7 	udiv	r0, r2, r7
 800037c:	fb07 2210 	mls	r2, r7, r0, r2
 8000380:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000384:	fb0e fe00 	mul.w	lr, lr, r0
 8000388:	45a6      	cmp	lr, r4
 800038a:	d908      	bls.n	800039e <__udivmoddi4+0x14e>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000394:	d202      	bcs.n	800039c <__udivmoddi4+0x14c>
 8000396:	45a6      	cmp	lr, r4
 8000398:	f200 80ba 	bhi.w	8000510 <__udivmoddi4+0x2c0>
 800039c:	4610      	mov	r0, r2
 800039e:	eba4 040e 	sub.w	r4, r4, lr
 80003a2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003a6:	e79f      	b.n	80002e8 <__udivmoddi4+0x98>
 80003a8:	f1c1 0720 	rsb	r7, r1, #32
 80003ac:	408b      	lsls	r3, r1
 80003ae:	fa22 fc07 	lsr.w	ip, r2, r7
 80003b2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003b6:	fa05 f401 	lsl.w	r4, r5, r1
 80003ba:	fa20 f307 	lsr.w	r3, r0, r7
 80003be:	40fd      	lsrs	r5, r7
 80003c0:	4323      	orrs	r3, r4
 80003c2:	fa00 f901 	lsl.w	r9, r0, r1
 80003c6:	ea4f 401c 	mov.w	r0, ip, lsr #16
 80003ca:	fa1f fe8c 	uxth.w	lr, ip
 80003ce:	fbb5 f8f0 	udiv	r8, r5, r0
 80003d2:	0c1c      	lsrs	r4, r3, #16
 80003d4:	fb00 5518 	mls	r5, r0, r8, r5
 80003d8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003dc:	fb08 f50e 	mul.w	r5, r8, lr
 80003e0:	42a5      	cmp	r5, r4
 80003e2:	fa02 f201 	lsl.w	r2, r2, r1
 80003e6:	d90b      	bls.n	8000400 <__udivmoddi4+0x1b0>
 80003e8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ec:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003f0:	f080 8087 	bcs.w	8000502 <__udivmoddi4+0x2b2>
 80003f4:	42a5      	cmp	r5, r4
 80003f6:	f240 8084 	bls.w	8000502 <__udivmoddi4+0x2b2>
 80003fa:	f1a8 0802 	sub.w	r8, r8, #2
 80003fe:	4464      	add	r4, ip
 8000400:	1b64      	subs	r4, r4, r5
 8000402:	b29d      	uxth	r5, r3
 8000404:	fbb4 f3f0 	udiv	r3, r4, r0
 8000408:	fb00 4413 	mls	r4, r0, r3, r4
 800040c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000410:	fb03 fe0e 	mul.w	lr, r3, lr
 8000414:	45a6      	cmp	lr, r4
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x1da>
 8000418:	eb1c 0404 	adds.w	r4, ip, r4
 800041c:	f103 30ff 	add.w	r0, r3, #4294967295	; 0xffffffff
 8000420:	d26b      	bcs.n	80004fa <__udivmoddi4+0x2aa>
 8000422:	45a6      	cmp	lr, r4
 8000424:	d969      	bls.n	80004fa <__udivmoddi4+0x2aa>
 8000426:	3b02      	subs	r3, #2
 8000428:	4464      	add	r4, ip
 800042a:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 800042e:	fba0 8302 	umull	r8, r3, r0, r2
 8000432:	eba4 040e 	sub.w	r4, r4, lr
 8000436:	429c      	cmp	r4, r3
 8000438:	46c6      	mov	lr, r8
 800043a:	461d      	mov	r5, r3
 800043c:	d355      	bcc.n	80004ea <__udivmoddi4+0x29a>
 800043e:	d052      	beq.n	80004e6 <__udivmoddi4+0x296>
 8000440:	b156      	cbz	r6, 8000458 <__udivmoddi4+0x208>
 8000442:	ebb9 030e 	subs.w	r3, r9, lr
 8000446:	eb64 0405 	sbc.w	r4, r4, r5
 800044a:	fa04 f707 	lsl.w	r7, r4, r7
 800044e:	40cb      	lsrs	r3, r1
 8000450:	40cc      	lsrs	r4, r1
 8000452:	431f      	orrs	r7, r3
 8000454:	e9c6 7400 	strd	r7, r4, [r6]
 8000458:	2100      	movs	r1, #0
 800045a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045e:	f1c3 0120 	rsb	r1, r3, #32
 8000462:	fa02 fc03 	lsl.w	ip, r2, r3
 8000466:	fa20 f201 	lsr.w	r2, r0, r1
 800046a:	fa25 f101 	lsr.w	r1, r5, r1
 800046e:	409d      	lsls	r5, r3
 8000470:	432a      	orrs	r2, r5
 8000472:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000476:	fa1f fe8c 	uxth.w	lr, ip
 800047a:	fbb1 f0f7 	udiv	r0, r1, r7
 800047e:	fb07 1510 	mls	r5, r7, r0, r1
 8000482:	0c11      	lsrs	r1, r2, #16
 8000484:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000488:	fb00 f50e 	mul.w	r5, r0, lr
 800048c:	428d      	cmp	r5, r1
 800048e:	fa04 f403 	lsl.w	r4, r4, r3
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x256>
 8000494:	eb1c 0101 	adds.w	r1, ip, r1
 8000498:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800049c:	d22f      	bcs.n	80004fe <__udivmoddi4+0x2ae>
 800049e:	428d      	cmp	r5, r1
 80004a0:	d92d      	bls.n	80004fe <__udivmoddi4+0x2ae>
 80004a2:	3802      	subs	r0, #2
 80004a4:	4461      	add	r1, ip
 80004a6:	1b49      	subs	r1, r1, r5
 80004a8:	b292      	uxth	r2, r2
 80004aa:	fbb1 f5f7 	udiv	r5, r1, r7
 80004ae:	fb07 1115 	mls	r1, r7, r5, r1
 80004b2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b6:	fb05 f10e 	mul.w	r1, r5, lr
 80004ba:	4291      	cmp	r1, r2
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x280>
 80004be:	eb1c 0202 	adds.w	r2, ip, r2
 80004c2:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004c6:	d216      	bcs.n	80004f6 <__udivmoddi4+0x2a6>
 80004c8:	4291      	cmp	r1, r2
 80004ca:	d914      	bls.n	80004f6 <__udivmoddi4+0x2a6>
 80004cc:	3d02      	subs	r5, #2
 80004ce:	4462      	add	r2, ip
 80004d0:	1a52      	subs	r2, r2, r1
 80004d2:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d6:	e739      	b.n	800034c <__udivmoddi4+0xfc>
 80004d8:	4631      	mov	r1, r6
 80004da:	4630      	mov	r0, r6
 80004dc:	e709      	b.n	80002f2 <__udivmoddi4+0xa2>
 80004de:	4639      	mov	r1, r7
 80004e0:	e6e7      	b.n	80002b2 <__udivmoddi4+0x62>
 80004e2:	4610      	mov	r0, r2
 80004e4:	e6fc      	b.n	80002e0 <__udivmoddi4+0x90>
 80004e6:	45c1      	cmp	r9, r8
 80004e8:	d2aa      	bcs.n	8000440 <__udivmoddi4+0x1f0>
 80004ea:	ebb8 0e02 	subs.w	lr, r8, r2
 80004ee:	eb63 050c 	sbc.w	r5, r3, ip
 80004f2:	3801      	subs	r0, #1
 80004f4:	e7a4      	b.n	8000440 <__udivmoddi4+0x1f0>
 80004f6:	4645      	mov	r5, r8
 80004f8:	e7ea      	b.n	80004d0 <__udivmoddi4+0x280>
 80004fa:	4603      	mov	r3, r0
 80004fc:	e795      	b.n	800042a <__udivmoddi4+0x1da>
 80004fe:	4640      	mov	r0, r8
 8000500:	e7d1      	b.n	80004a6 <__udivmoddi4+0x256>
 8000502:	46d0      	mov	r8, sl
 8000504:	e77c      	b.n	8000400 <__udivmoddi4+0x1b0>
 8000506:	3d02      	subs	r5, #2
 8000508:	4462      	add	r2, ip
 800050a:	e733      	b.n	8000374 <__udivmoddi4+0x124>
 800050c:	4608      	mov	r0, r1
 800050e:	e70b      	b.n	8000328 <__udivmoddi4+0xd8>
 8000510:	4464      	add	r4, ip
 8000512:	3802      	subs	r0, #2
 8000514:	e743      	b.n	800039e <__udivmoddi4+0x14e>
 8000516:	bf00      	nop

08000518 <__aeabi_idiv0>:
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop

0800051c <updatePacket>:
uint8_t ax_buffer[150] = { 0 };
uint8_t ax_buff_stuffed[150] = { 0 };

uint8_t info_packet[INFO_LENGTH];

void updatePacket(uint8_t *OBC_Rx_buffer) {
 800051c:	b480      	push	{r7}
 800051e:	b087      	sub	sp, #28
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
	info_packet[0] = OBC_Rx_buffer[1];  	// Packet Type
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	785a      	ldrb	r2, [r3, #1]
 8000528:	4b14      	ldr	r3, [pc, #80]	; (800057c <updatePacket+0x60>)
 800052a:	701a      	strb	r2, [r3, #0]
	int j = 1;
 800052c:	2301      	movs	r3, #1
 800052e:	617b      	str	r3, [r7, #20]
	int k = 3;
 8000530:	2303      	movs	r3, #3
 8000532:	613b      	str	r3, [r7, #16]
	int len_of_payload = OBC_Rx_buffer[2];  // length of info_field
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	3302      	adds	r3, #2
 8000538:	781b      	ldrb	r3, [r3, #0]
 800053a:	60bb      	str	r3, [r7, #8]
//	myDebug("\nlen_of_payload: %d\r\n", len_of_payload);
	for (int i = 0; i < len_of_payload; i++) {
 800053c:	2300      	movs	r3, #0
 800053e:	60fb      	str	r3, [r7, #12]
 8000540:	e011      	b.n	8000566 <updatePacket+0x4a>
		info_packet[j] = OBC_Rx_buffer[k];
 8000542:	693b      	ldr	r3, [r7, #16]
 8000544:	687a      	ldr	r2, [r7, #4]
 8000546:	4413      	add	r3, r2
 8000548:	7819      	ldrb	r1, [r3, #0]
 800054a:	4a0c      	ldr	r2, [pc, #48]	; (800057c <updatePacket+0x60>)
 800054c:	697b      	ldr	r3, [r7, #20]
 800054e:	4413      	add	r3, r2
 8000550:	460a      	mov	r2, r1
 8000552:	701a      	strb	r2, [r3, #0]
		j++;
 8000554:	697b      	ldr	r3, [r7, #20]
 8000556:	3301      	adds	r3, #1
 8000558:	617b      	str	r3, [r7, #20]
		k++;
 800055a:	693b      	ldr	r3, [r7, #16]
 800055c:	3301      	adds	r3, #1
 800055e:	613b      	str	r3, [r7, #16]
	for (int i = 0; i < len_of_payload; i++) {
 8000560:	68fb      	ldr	r3, [r7, #12]
 8000562:	3301      	adds	r3, #1
 8000564:	60fb      	str	r3, [r7, #12]
 8000566:	68fa      	ldr	r2, [r7, #12]
 8000568:	68bb      	ldr	r3, [r7, #8]
 800056a:	429a      	cmp	r2, r3
 800056c:	dbe9      	blt.n	8000542 <updatePacket+0x26>
//	myDebug("info_packet: 0x%x\r\n", info_packet);
//	for (int i = 0; i < len_of_payload; i++) {
//		myDebug("%02x ", info_packet[i]);
//	}
//	myDebug("\r\n");
}
 800056e:	bf00      	nop
 8000570:	bf00      	nop
 8000572:	371c      	adds	r7, #28
 8000574:	46bd      	mov	sp, r7
 8000576:	bc80      	pop	{r7}
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop
 800057c:	200001b4 	.word	0x200001b4

08000580 <getHDLCPacket>:

void getHDLCPacket(uint8_t *data, uint8_t data_len) {
 8000580:	b580      	push	{r7, lr}
 8000582:	b086      	sub	sp, #24
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
 8000588:	460b      	mov	r3, r1
 800058a:	70fb      	strb	r3, [r7, #3]
//	for (int j = 0; j < data_len; j++) {
//		myDebug("%02x ", data[j]);
//	}
//	myDebug("\r\n");

	uint16_t crc = 0;
 800058c:	2300      	movs	r3, #0
 800058e:	81fb      	strh	r3, [r7, #14]
	crc = calculateCRC_CCITT_AX25(data, data_len);
 8000590:	78fb      	ldrb	r3, [r7, #3]
 8000592:	4619      	mov	r1, r3
 8000594:	6878      	ldr	r0, [r7, #4]
 8000596:	f000 f965 	bl	8000864 <calculateCRC_CCITT_AX25>
 800059a:	4603      	mov	r3, r0
 800059c:	81fb      	strh	r3, [r7, #14]

	temp_tx_buffer[0] = 0x7e;
 800059e:	4b22      	ldr	r3, [pc, #136]	; (8000628 <getHDLCPacket+0xa8>)
 80005a0:	227e      	movs	r2, #126	; 0x7e
 80005a2:	701a      	strb	r2, [r3, #0]

	int i = 1;
 80005a4:	2301      	movs	r3, #1
 80005a6:	617b      	str	r3, [r7, #20]
	for (int k = 0; k < data_len; k++) {
 80005a8:	2300      	movs	r3, #0
 80005aa:	613b      	str	r3, [r7, #16]
 80005ac:	e00e      	b.n	80005cc <getHDLCPacket+0x4c>
		temp_tx_buffer[i] = data[k];
 80005ae:	693b      	ldr	r3, [r7, #16]
 80005b0:	687a      	ldr	r2, [r7, #4]
 80005b2:	4413      	add	r3, r2
 80005b4:	7819      	ldrb	r1, [r3, #0]
 80005b6:	4a1c      	ldr	r2, [pc, #112]	; (8000628 <getHDLCPacket+0xa8>)
 80005b8:	697b      	ldr	r3, [r7, #20]
 80005ba:	4413      	add	r3, r2
 80005bc:	460a      	mov	r2, r1
 80005be:	701a      	strb	r2, [r3, #0]
		i++;
 80005c0:	697b      	ldr	r3, [r7, #20]
 80005c2:	3301      	adds	r3, #1
 80005c4:	617b      	str	r3, [r7, #20]
	for (int k = 0; k < data_len; k++) {
 80005c6:	693b      	ldr	r3, [r7, #16]
 80005c8:	3301      	adds	r3, #1
 80005ca:	613b      	str	r3, [r7, #16]
 80005cc:	78fb      	ldrb	r3, [r7, #3]
 80005ce:	693a      	ldr	r2, [r7, #16]
 80005d0:	429a      	cmp	r2, r3
 80005d2:	dbec      	blt.n	80005ae <getHDLCPacket+0x2e>
	}

	// Store CRC result in the packet array
	temp_tx_buffer[i] = (crc >> 8) & 0xFF; // Most significant byte
 80005d4:	89fb      	ldrh	r3, [r7, #14]
 80005d6:	0a1b      	lsrs	r3, r3, #8
 80005d8:	b29b      	uxth	r3, r3
 80005da:	b2d9      	uxtb	r1, r3
 80005dc:	4a12      	ldr	r2, [pc, #72]	; (8000628 <getHDLCPacket+0xa8>)
 80005de:	697b      	ldr	r3, [r7, #20]
 80005e0:	4413      	add	r3, r2
 80005e2:	460a      	mov	r2, r1
 80005e4:	701a      	strb	r2, [r3, #0]
	i++;
 80005e6:	697b      	ldr	r3, [r7, #20]
 80005e8:	3301      	adds	r3, #1
 80005ea:	617b      	str	r3, [r7, #20]
	temp_tx_buffer[i] = crc & 0xFF;        // Least significant byte
 80005ec:	89fb      	ldrh	r3, [r7, #14]
 80005ee:	b2d9      	uxtb	r1, r3
 80005f0:	4a0d      	ldr	r2, [pc, #52]	; (8000628 <getHDLCPacket+0xa8>)
 80005f2:	697b      	ldr	r3, [r7, #20]
 80005f4:	4413      	add	r3, r2
 80005f6:	460a      	mov	r2, r1
 80005f8:	701a      	strb	r2, [r3, #0]
	i++;
 80005fa:	697b      	ldr	r3, [r7, #20]
 80005fc:	3301      	adds	r3, #1
 80005fe:	617b      	str	r3, [r7, #20]

	temp_tx_buffer[i] = 0x7e;
 8000600:	4a09      	ldr	r2, [pc, #36]	; (8000628 <getHDLCPacket+0xa8>)
 8000602:	697b      	ldr	r3, [r7, #20]
 8000604:	4413      	add	r3, r2
 8000606:	227e      	movs	r2, #126	; 0x7e
 8000608:	701a      	strb	r2, [r3, #0]
//	for (int j = 0; j < destuffed_size - 1; j++) {
//		myDebug("%02x ", tem[j]);
//	}
//	myDebug("\r\n");

	memset(ax_buffer, '\0', sizeof(ax_buffer));
 800060a:	2296      	movs	r2, #150	; 0x96
 800060c:	2100      	movs	r1, #0
 800060e:	4807      	ldr	r0, [pc, #28]	; (800062c <getHDLCPacket+0xac>)
 8000610:	f00b fae4 	bl	800bbdc <memset>
	memset(ax_buff_stuffed, '\0', sizeof(ax_buff_stuffed));
 8000614:	2296      	movs	r2, #150	; 0x96
 8000616:	2100      	movs	r1, #0
 8000618:	4805      	ldr	r0, [pc, #20]	; (8000630 <getHDLCPacket+0xb0>)
 800061a:	f00b fadf 	bl	800bbdc <memset>

}
 800061e:	bf00      	nop
 8000620:	3718      	adds	r7, #24
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	20000374 	.word	0x20000374
 800062c:	20000084 	.word	0x20000084
 8000630:	2000011c 	.word	0x2000011c

08000634 <getAX25Packet>:

void getAX25Packet(uint8_t *OBC_data_Field, uint8_t size) {
 8000634:	b580      	push	{r7, lr}
 8000636:	b086      	sub	sp, #24
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
 800063c:	460b      	mov	r3, r1
 800063e:	70fb      	strb	r3, [r7, #3]

	updatePacket(OBC_data_Field);
 8000640:	6878      	ldr	r0, [r7, #4]
 8000642:	f7ff ff6b 	bl	800051c <updatePacket>

	//destination field   9N2SI -0
	ax_buffer[0] = 0x72; //	ASCII->9, HEX->0x39, 1 bit shifted->0b01110010, Shifted HEX->0x72
 8000646:	4b2f      	ldr	r3, [pc, #188]	; (8000704 <getAX25Packet+0xd0>)
 8000648:	2272      	movs	r2, #114	; 0x72
 800064a:	701a      	strb	r2, [r3, #0]
	ax_buffer[1] = 0x9C; //	ASCII->N, HEX->0x4E, 1 bit shifted->0b10011100, Shifted HEX->0x9C
 800064c:	4b2d      	ldr	r3, [pc, #180]	; (8000704 <getAX25Packet+0xd0>)
 800064e:	229c      	movs	r2, #156	; 0x9c
 8000650:	705a      	strb	r2, [r3, #1]
	ax_buffer[2] = 0x64; //	ASCII->2, HEX->0x32, 1 bit shifted->0b01100100, Shifted HEX->0x64
 8000652:	4b2c      	ldr	r3, [pc, #176]	; (8000704 <getAX25Packet+0xd0>)
 8000654:	2264      	movs	r2, #100	; 0x64
 8000656:	709a      	strb	r2, [r3, #2]
	ax_buffer[3] = 0xA6; //	ASCII->S, HEX->0x53, 1 bit shifted->0b10100110, Shifted HEX->0xA6
 8000658:	4b2a      	ldr	r3, [pc, #168]	; (8000704 <getAX25Packet+0xd0>)
 800065a:	22a6      	movs	r2, #166	; 0xa6
 800065c:	70da      	strb	r2, [r3, #3]
	ax_buffer[4] = 0x64; //	ASCII->I, HEX->0x49, 1 bit shifted->0b10010010, Shifted HEX->0x92
 800065e:	4b29      	ldr	r3, [pc, #164]	; (8000704 <getAX25Packet+0xd0>)
 8000660:	2264      	movs	r2, #100	; 0x64
 8000662:	711a      	strb	r2, [r3, #4]
	ax_buffer[5] = 0x40; //	ASCII-> , HEX->0x20, 1 bit shifted->0b01000000, Shifted HEX->0x40
 8000664:	4b27      	ldr	r3, [pc, #156]	; (8000704 <getAX25Packet+0xd0>)
 8000666:	2240      	movs	r2, #64	; 0x40
 8000668:	715a      	strb	r2, [r3, #5]
	ax_buffer[6] = 0xE0; //	0b111SSID0, SSID->0000 and LSB is set to 0; if more addresses follow, HEX->0xE0
 800066a:	4b26      	ldr	r3, [pc, #152]	; (8000704 <getAX25Packet+0xd0>)
 800066c:	22e0      	movs	r2, #224	; 0xe0
 800066e:	719a      	strb	r2, [r3, #6]

	//source field   9N2SI -0
	ax_buffer[7] = 0x72; //	ASCII->9, HEX->0x39, 1 bit shifted->0b01110010, Shifted HEX->0x72
 8000670:	4b24      	ldr	r3, [pc, #144]	; (8000704 <getAX25Packet+0xd0>)
 8000672:	2272      	movs	r2, #114	; 0x72
 8000674:	71da      	strb	r2, [r3, #7]
	ax_buffer[8] = 0x9C; //	ASCII->N, HEX->0x4E, 1 bit shifted->0b10011100, Shifted HEX->0x9C
 8000676:	4b23      	ldr	r3, [pc, #140]	; (8000704 <getAX25Packet+0xd0>)
 8000678:	229c      	movs	r2, #156	; 0x9c
 800067a:	721a      	strb	r2, [r3, #8]
	ax_buffer[9] = 0x64; //	ASCII->2, HEX->0x32, 1 bit shifted->0b01100100, Shifted HEX->0x64
 800067c:	4b21      	ldr	r3, [pc, #132]	; (8000704 <getAX25Packet+0xd0>)
 800067e:	2264      	movs	r2, #100	; 0x64
 8000680:	725a      	strb	r2, [r3, #9]
	ax_buffer[10] = 0xA6; //	ASCII->S, HEX->0x53, 1 bit shifted->0b10100110, Shifted HEX->0xA6
 8000682:	4b20      	ldr	r3, [pc, #128]	; (8000704 <getAX25Packet+0xd0>)
 8000684:	22a6      	movs	r2, #166	; 0xa6
 8000686:	729a      	strb	r2, [r3, #10]
	ax_buffer[11] = 0x64; //	ASCII->I, HEX->0x49, 1 bit shifted->0b10010010, Shifted HEX->0x92
 8000688:	4b1e      	ldr	r3, [pc, #120]	; (8000704 <getAX25Packet+0xd0>)
 800068a:	2264      	movs	r2, #100	; 0x64
 800068c:	72da      	strb	r2, [r3, #11]
	ax_buffer[12] = 0x40; //	ASCII-> , HEX->0x20, 1 bit shifted->0b01000000, Shifted HEX->0x40
 800068e:	4b1d      	ldr	r3, [pc, #116]	; (8000704 <getAX25Packet+0xd0>)
 8000690:	2240      	movs	r2, #64	; 0x40
 8000692:	731a      	strb	r2, [r3, #12]
	ax_buffer[13] = 0x61; //	0b011SSID1, SSID->0000 and LSB is set to 1 if this is the last address, HEX->0x61
 8000694:	4b1b      	ldr	r3, [pc, #108]	; (8000704 <getAX25Packet+0xd0>)
 8000696:	2261      	movs	r2, #97	; 0x61
 8000698:	735a      	strb	r2, [r3, #13]

	//control bit
	ax_buffer[14] = 0x03; //  Unnumbered Information Frame, AX.25 is always 0b00000011 i.e 0x03 in HEX
 800069a:	4b1a      	ldr	r3, [pc, #104]	; (8000704 <getAX25Packet+0xd0>)
 800069c:	2203      	movs	r2, #3
 800069e:	739a      	strb	r2, [r3, #14]

	//protocol identifier
	ax_buffer[15] = 0xF0; //	No Layer-3 Implemented so, 0b11110000 i.e 0xF0 in HEX
 80006a0:	4b18      	ldr	r3, [pc, #96]	; (8000704 <getAX25Packet+0xd0>)
 80006a2:	22f0      	movs	r2, #240	; 0xf0
 80006a4:	73da      	strb	r2, [r3, #15]

	int i = 16;
 80006a6:	2310      	movs	r3, #16
 80006a8:	617b      	str	r3, [r7, #20]

	for (int k = 0; k < size; k++) {
 80006aa:	2300      	movs	r3, #0
 80006ac:	613b      	str	r3, [r7, #16]
 80006ae:	e00e      	b.n	80006ce <getAX25Packet+0x9a>
		ax_buffer[i] = info_packet[k];
 80006b0:	4a15      	ldr	r2, [pc, #84]	; (8000708 <getAX25Packet+0xd4>)
 80006b2:	693b      	ldr	r3, [r7, #16]
 80006b4:	4413      	add	r3, r2
 80006b6:	7819      	ldrb	r1, [r3, #0]
 80006b8:	4a12      	ldr	r2, [pc, #72]	; (8000704 <getAX25Packet+0xd0>)
 80006ba:	697b      	ldr	r3, [r7, #20]
 80006bc:	4413      	add	r3, r2
 80006be:	460a      	mov	r2, r1
 80006c0:	701a      	strb	r2, [r3, #0]
		i++;
 80006c2:	697b      	ldr	r3, [r7, #20]
 80006c4:	3301      	adds	r3, #1
 80006c6:	617b      	str	r3, [r7, #20]
	for (int k = 0; k < size; k++) {
 80006c8:	693b      	ldr	r3, [r7, #16]
 80006ca:	3301      	adds	r3, #1
 80006cc:	613b      	str	r3, [r7, #16]
 80006ce:	78fb      	ldrb	r3, [r7, #3]
 80006d0:	693a      	ldr	r2, [r7, #16]
 80006d2:	429a      	cmp	r2, r3
 80006d4:	dbec      	blt.n	80006b0 <getAX25Packet+0x7c>
	}

//	myDebug("Before Bit stuffing:");
	myDebug("\nReal Data, Length: %d bytes", i);
 80006d6:	6979      	ldr	r1, [r7, #20]
 80006d8:	480c      	ldr	r0, [pc, #48]	; (800070c <getAX25Packet+0xd8>)
 80006da:	f000 f837 	bl	800074c <myDebug>
	myDebug("\r\n");
 80006de:	480c      	ldr	r0, [pc, #48]	; (8000710 <getAX25Packet+0xdc>)
 80006e0:	f000 f834 	bl	800074c <myDebug>
//		myDebug("%02x ", ax_buffer[j]);
//	}
//	myDebug("\r\n");

	// Bit Stuffing
	int stuffed_size = bit_stuffing(ax_buffer, ax_buff_stuffed, i);
 80006e4:	697a      	ldr	r2, [r7, #20]
 80006e6:	490b      	ldr	r1, [pc, #44]	; (8000714 <getAX25Packet+0xe0>)
 80006e8:	4806      	ldr	r0, [pc, #24]	; (8000704 <getAX25Packet+0xd0>)
 80006ea:	f000 f8fa 	bl	80008e2 <bit_stuffing>
 80006ee:	60f8      	str	r0, [r7, #12]

	getHDLCPacket(ax_buff_stuffed, stuffed_size);
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	b2db      	uxtb	r3, r3
 80006f4:	4619      	mov	r1, r3
 80006f6:	4807      	ldr	r0, [pc, #28]	; (8000714 <getAX25Packet+0xe0>)
 80006f8:	f7ff ff42 	bl	8000580 <getHDLCPacket>
}
 80006fc:	bf00      	nop
 80006fe:	3718      	adds	r7, #24
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	20000084 	.word	0x20000084
 8000708:	200001b4 	.word	0x200001b4
 800070c:	0800c4f8 	.word	0x0800c4f8
 8000710:	0800c518 	.word	0x0800c518
 8000714:	2000011c 	.word	0x2000011c

08000718 <delay_us>:
 *      Author: sajanduwal
 */

#include "com_debug.h"

void delay_us(uint32_t us) {
 8000718:	b480      	push	{r7}
 800071a:	b085      	sub	sp, #20
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
	uint32_t delay_counter_disp;
	__HAL_TIM_SET_COUNTER(&htim2, 0);  // set the counter value a 0
 8000720:	4b09      	ldr	r3, [pc, #36]	; (8000748 <delay_us+0x30>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	2200      	movs	r2, #0
 8000726:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim2) < us)
 8000728:	e002      	b.n	8000730 <delay_us+0x18>
		delay_counter_disp++;
 800072a:	68fb      	ldr	r3, [r7, #12]
 800072c:	3301      	adds	r3, #1
 800072e:	60fb      	str	r3, [r7, #12]
	while (__HAL_TIM_GET_COUNTER(&htim2) < us)
 8000730:	4b05      	ldr	r3, [pc, #20]	; (8000748 <delay_us+0x30>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000736:	687a      	ldr	r2, [r7, #4]
 8000738:	429a      	cmp	r2, r3
 800073a:	d8f6      	bhi.n	800072a <delay_us+0x12>
	// wait for the counter to reach the us input in the parameter
}
 800073c:	bf00      	nop
 800073e:	bf00      	nop
 8000740:	3714      	adds	r7, #20
 8000742:	46bd      	mov	sp, r7
 8000744:	bc80      	pop	{r7}
 8000746:	4770      	bx	lr
 8000748:	200004e0 	.word	0x200004e0

0800074c <myDebug>:

void myDebug(const char *fmt, ...) {
 800074c:	b40f      	push	{r0, r1, r2, r3}
 800074e:	b580      	push	{r7, lr}
 8000750:	b082      	sub	sp, #8
 8000752:	af00      	add	r7, sp, #0
	static char temp[100];
	va_list args;
	va_start(args, fmt);
 8000754:	f107 0314 	add.w	r3, r7, #20
 8000758:	603b      	str	r3, [r7, #0]
	vsnprintf(temp, sizeof(temp), fmt, args);
 800075a:	683b      	ldr	r3, [r7, #0]
 800075c:	693a      	ldr	r2, [r7, #16]
 800075e:	2164      	movs	r1, #100	; 0x64
 8000760:	480a      	ldr	r0, [pc, #40]	; (800078c <myDebug+0x40>)
 8000762:	f00b fa2d 	bl	800bbc0 <vsniprintf>
	va_end(args);
	int len = bufferSize(temp);
 8000766:	4809      	ldr	r0, [pc, #36]	; (800078c <myDebug+0x40>)
 8000768:	f000 f814 	bl	8000794 <bufferSize>
 800076c:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*) temp, len, 1000);
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	b29a      	uxth	r2, r3
 8000772:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000776:	4905      	ldr	r1, [pc, #20]	; (800078c <myDebug+0x40>)
 8000778:	4805      	ldr	r0, [pc, #20]	; (8000790 <myDebug+0x44>)
 800077a:	f005 ffe0 	bl	800673e <HAL_UART_Transmit>
}
 800077e:	bf00      	nop
 8000780:	3708      	adds	r7, #8
 8000782:	46bd      	mov	sp, r7
 8000784:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000788:	b004      	add	sp, #16
 800078a:	4770      	bx	lr
 800078c:	20000218 	.word	0x20000218
 8000790:	200005c4 	.word	0x200005c4

08000794 <bufferSize>:

int bufferSize(char *buffer) {
 8000794:	b480      	push	{r7}
 8000796:	b085      	sub	sp, #20
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
	int i = 0;
 800079c:	2300      	movs	r3, #0
 800079e:	60fb      	str	r3, [r7, #12]
	while (*buffer++ != '\0')
 80007a0:	e002      	b.n	80007a8 <bufferSize+0x14>
		i++;
 80007a2:	68fb      	ldr	r3, [r7, #12]
 80007a4:	3301      	adds	r3, #1
 80007a6:	60fb      	str	r3, [r7, #12]
	while (*buffer++ != '\0')
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	1c5a      	adds	r2, r3, #1
 80007ac:	607a      	str	r2, [r7, #4]
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d1f6      	bne.n	80007a2 <bufferSize+0xe>
	return i;
 80007b4:	68fb      	ldr	r3, [r7, #12]
}
 80007b6:	4618      	mov	r0, r3
 80007b8:	3714      	adds	r7, #20
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bc80      	pop	{r7}
 80007be:	4770      	bx	lr

080007c0 <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_DMAMUX1
  *         @arg @ref LL_AHB1_GRP1_PERIPH_CRC
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80007c0:	b480      	push	{r7}
 80007c2:	b085      	sub	sp, #20
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80007c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007cc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80007ce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	4313      	orrs	r3, r2
 80007d6:	648b      	str	r3, [r1, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80007d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007dc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	4013      	ands	r3, r2
 80007e2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80007e4:	68fb      	ldr	r3, [r7, #12]
}
 80007e6:	bf00      	nop
 80007e8:	3714      	adds	r7, #20
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bc80      	pop	{r7}
 80007ee:	4770      	bx	lr

080007f0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80007f4:	2004      	movs	r0, #4
 80007f6:	f7ff ffe3 	bl	80007c0 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007fa:	2001      	movs	r0, #1
 80007fc:	f7ff ffe0 	bl	80007c0 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000800:	2200      	movs	r2, #0
 8000802:	2100      	movs	r1, #0
 8000804:	200b      	movs	r0, #11
 8000806:	f002 ff54 	bl	80036b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800080a:	200b      	movs	r0, #11
 800080c:	f002 ff6b 	bl	80036e6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000810:	2200      	movs	r2, #0
 8000812:	2100      	movs	r1, #0
 8000814:	200c      	movs	r0, #12
 8000816:	f002 ff4c 	bl	80036b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800081a:	200c      	movs	r0, #12
 800081c:	f002 ff63 	bl	80036e6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000820:	2200      	movs	r2, #0
 8000822:	2100      	movs	r1, #0
 8000824:	200d      	movs	r0, #13
 8000826:	f002 ff44 	bl	80036b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 800082a:	200d      	movs	r0, #13
 800082c:	f002 ff5b 	bl	80036e6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000830:	2200      	movs	r2, #0
 8000832:	2100      	movs	r1, #0
 8000834:	200e      	movs	r0, #14
 8000836:	f002 ff3c 	bl	80036b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 800083a:	200e      	movs	r0, #14
 800083c:	f002 ff53 	bl	80036e6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000840:	2200      	movs	r2, #0
 8000842:	2100      	movs	r1, #0
 8000844:	200f      	movs	r0, #15
 8000846:	f002 ff34 	bl	80036b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800084a:	200f      	movs	r0, #15
 800084c:	f002 ff4b 	bl	80036e6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8000850:	2200      	movs	r2, #0
 8000852:	2100      	movs	r1, #0
 8000854:	2010      	movs	r0, #16
 8000856:	f002 ff2c 	bl	80036b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 800085a:	2010      	movs	r0, #16
 800085c:	f002 ff43 	bl	80036e6 <HAL_NVIC_EnableIRQ>

}
 8000860:	bf00      	nop
 8000862:	bd80      	pop	{r7, pc}

08000864 <calculateCRC_CCITT_AX25>:
 */

#include "error_handler.h"

// Function to calculate CRC-CCITT for AX.25 frames
uint16_t calculateCRC_CCITT_AX25(const uint8_t *data, size_t length) {
 8000864:	b480      	push	{r7}
 8000866:	b087      	sub	sp, #28
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
 800086c:	6039      	str	r1, [r7, #0]
	uint16_t crc = 0xFFFF; // Initialize CRC register with 0xFFFF
 800086e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000872:	82fb      	strh	r3, [r7, #22]
	uint16_t CRC_POLY = 0x1021; // CRC polynomial for CCITT (0x1021)
 8000874:	f241 0321 	movw	r3, #4129	; 0x1021
 8000878:	817b      	strh	r3, [r7, #10]

	// Iterate through each byte of the input data
	for (size_t i = 0; i < length; i++) {
 800087a:	2300      	movs	r3, #0
 800087c:	613b      	str	r3, [r7, #16]
 800087e:	e026      	b.n	80008ce <calculateCRC_CCITT_AX25+0x6a>
		crc ^= ((uint16_t) data[i] << 8); // XOR CRC with next byte of input data
 8000880:	687a      	ldr	r2, [r7, #4]
 8000882:	693b      	ldr	r3, [r7, #16]
 8000884:	4413      	add	r3, r2
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	021b      	lsls	r3, r3, #8
 800088a:	b21a      	sxth	r2, r3
 800088c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000890:	4053      	eors	r3, r2
 8000892:	b21b      	sxth	r3, r3
 8000894:	82fb      	strh	r3, [r7, #22]

		// Iterate through each bit of the current byte
		for (int j = 0; j < 8; j++) {
 8000896:	2300      	movs	r3, #0
 8000898:	60fb      	str	r3, [r7, #12]
 800089a:	e012      	b.n	80008c2 <calculateCRC_CCITT_AX25+0x5e>
			if (crc & 0x8000) { // If MSB of CRC is 1
 800089c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	da08      	bge.n	80008b6 <calculateCRC_CCITT_AX25+0x52>
				crc = (crc << 1) ^ CRC_POLY; // Left shift CRC and XOR with polynomial
 80008a4:	8afb      	ldrh	r3, [r7, #22]
 80008a6:	005b      	lsls	r3, r3, #1
 80008a8:	b21a      	sxth	r2, r3
 80008aa:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80008ae:	4053      	eors	r3, r2
 80008b0:	b21b      	sxth	r3, r3
 80008b2:	82fb      	strh	r3, [r7, #22]
 80008b4:	e002      	b.n	80008bc <calculateCRC_CCITT_AX25+0x58>
			} else {
				crc <<= 1; // Left shift CRC
 80008b6:	8afb      	ldrh	r3, [r7, #22]
 80008b8:	005b      	lsls	r3, r3, #1
 80008ba:	82fb      	strh	r3, [r7, #22]
		for (int j = 0; j < 8; j++) {
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	3301      	adds	r3, #1
 80008c0:	60fb      	str	r3, [r7, #12]
 80008c2:	68fb      	ldr	r3, [r7, #12]
 80008c4:	2b07      	cmp	r3, #7
 80008c6:	dde9      	ble.n	800089c <calculateCRC_CCITT_AX25+0x38>
	for (size_t i = 0; i < length; i++) {
 80008c8:	693b      	ldr	r3, [r7, #16]
 80008ca:	3301      	adds	r3, #1
 80008cc:	613b      	str	r3, [r7, #16]
 80008ce:	693a      	ldr	r2, [r7, #16]
 80008d0:	683b      	ldr	r3, [r7, #0]
 80008d2:	429a      	cmp	r2, r3
 80008d4:	d3d4      	bcc.n	8000880 <calculateCRC_CCITT_AX25+0x1c>
			}
		}
	}

	return crc; // Return calculated CRC
 80008d6:	8afb      	ldrh	r3, [r7, #22]
}
 80008d8:	4618      	mov	r0, r3
 80008da:	371c      	adds	r7, #28
 80008dc:	46bd      	mov	sp, r7
 80008de:	bc80      	pop	{r7}
 80008e0:	4770      	bx	lr

080008e2 <bit_stuffing>:
	}
	crcReg = crcReg ^ 0xFFFF;						// Final XOR with 0xFFFF
	return crcReg;
}

int bit_stuffing(uint8_t *data, uint8_t *output_data, int length) {
 80008e2:	b480      	push	{r7}
 80008e4:	b08f      	sub	sp, #60	; 0x3c
 80008e6:	af00      	add	r7, sp, #0
 80008e8:	60f8      	str	r0, [r7, #12]
 80008ea:	60b9      	str	r1, [r7, #8]
 80008ec:	607a      	str	r2, [r7, #4]
	int out_index = 0;
 80008ee:	2300      	movs	r3, #0
 80008f0:	637b      	str	r3, [r7, #52]	; 0x34
	int bit_count = 0; // Count of consecutive 1 bits
 80008f2:	2300      	movs	r3, #0
 80008f4:	633b      	str	r3, [r7, #48]	; 0x30
	uint8_t current_byte = 0;
 80008f6:	2300      	movs	r3, #0
 80008f8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	int bit_pos = 7;
 80008fc:	2307      	movs	r3, #7
 80008fe:	62bb      	str	r3, [r7, #40]	; 0x28
	int stuffed_size = 0; // Track size of output data after bit stuffing
 8000900:	2300      	movs	r3, #0
 8000902:	627b      	str	r3, [r7, #36]	; 0x24
	int bits_stuffed = 0; // Number of bits stuffed since last size increase
 8000904:	2300      	movs	r3, #0
 8000906:	623b      	str	r3, [r7, #32]

	//myDebug("Error handler: before Bit stuffing \n");

	for (int i = 0; i < length; i++) {
 8000908:	2300      	movs	r3, #0
 800090a:	61fb      	str	r3, [r7, #28]
 800090c:	e078      	b.n	8000a00 <bit_stuffing+0x11e>
		for (int bit = 7; bit >= 0; bit--) {
 800090e:	2307      	movs	r3, #7
 8000910:	61bb      	str	r3, [r7, #24]
 8000912:	e06f      	b.n	80009f4 <bit_stuffing+0x112>
			int bit_val = (data[i] >> bit) & 1;
 8000914:	69fb      	ldr	r3, [r7, #28]
 8000916:	68fa      	ldr	r2, [r7, #12]
 8000918:	4413      	add	r3, r2
 800091a:	781b      	ldrb	r3, [r3, #0]
 800091c:	461a      	mov	r2, r3
 800091e:	69bb      	ldr	r3, [r7, #24]
 8000920:	fa42 f303 	asr.w	r3, r2, r3
 8000924:	f003 0301 	and.w	r3, r3, #1
 8000928:	613b      	str	r3, [r7, #16]

			//	myDebug("%d ", bit_val);

			current_byte |= (bit_val << bit_pos);
 800092a:	693a      	ldr	r2, [r7, #16]
 800092c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800092e:	fa02 f303 	lsl.w	r3, r2, r3
 8000932:	b25a      	sxtb	r2, r3
 8000934:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8000938:	4313      	orrs	r3, r2
 800093a:	b25b      	sxtb	r3, r3
 800093c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			bit_pos--;
 8000940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000942:	3b01      	subs	r3, #1
 8000944:	62bb      	str	r3, [r7, #40]	; 0x28

			if (bit_val) {
 8000946:	693b      	ldr	r3, [r7, #16]
 8000948:	2b00      	cmp	r3, #0
 800094a:	d02f      	beq.n	80009ac <bit_stuffing+0xca>
				bit_count++;
 800094c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800094e:	3301      	adds	r3, #1
 8000950:	633b      	str	r3, [r7, #48]	; 0x30
				if (bit_count == 5) {
 8000952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000954:	2b05      	cmp	r3, #5
 8000956:	d12b      	bne.n	80009b0 <bit_stuffing+0xce>
					// Insert a 0 bit after five consecutive 1s
					if (bit_pos < 0) {
 8000958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800095a:	2b00      	cmp	r3, #0
 800095c:	da10      	bge.n	8000980 <bit_stuffing+0x9e>
						output_data[out_index++] = current_byte;
 800095e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000960:	1c5a      	adds	r2, r3, #1
 8000962:	637a      	str	r2, [r7, #52]	; 0x34
 8000964:	461a      	mov	r2, r3
 8000966:	68bb      	ldr	r3, [r7, #8]
 8000968:	4413      	add	r3, r2
 800096a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800096e:	701a      	strb	r2, [r3, #0]
						stuffed_size++;
 8000970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000972:	3301      	adds	r3, #1
 8000974:	627b      	str	r3, [r7, #36]	; 0x24
						current_byte = 0;
 8000976:	2300      	movs	r3, #0
 8000978:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						bit_pos = 7;
 800097c:	2307      	movs	r3, #7
 800097e:	62bb      	str	r3, [r7, #40]	; 0x28
					}
					current_byte &= ~(1 << bit_pos);
 8000980:	2201      	movs	r2, #1
 8000982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000984:	fa02 f303 	lsl.w	r3, r2, r3
 8000988:	b25b      	sxtb	r3, r3
 800098a:	43db      	mvns	r3, r3
 800098c:	b25a      	sxtb	r2, r3
 800098e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8000992:	4013      	ands	r3, r2
 8000994:	b25b      	sxtb	r3, r3
 8000996:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					bit_pos--;
 800099a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800099c:	3b01      	subs	r3, #1
 800099e:	62bb      	str	r3, [r7, #40]	; 0x28
					bits_stuffed++;
 80009a0:	6a3b      	ldr	r3, [r7, #32]
 80009a2:	3301      	adds	r3, #1
 80009a4:	623b      	str	r3, [r7, #32]
					bit_count = 0;
 80009a6:	2300      	movs	r3, #0
 80009a8:	633b      	str	r3, [r7, #48]	; 0x30
 80009aa:	e001      	b.n	80009b0 <bit_stuffing+0xce>
				}
			} else {
				bit_count = 0;
 80009ac:	2300      	movs	r3, #0
 80009ae:	633b      	str	r3, [r7, #48]	; 0x30
			}

			if (bit_pos < 0) {
 80009b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	da10      	bge.n	80009d8 <bit_stuffing+0xf6>
				output_data[out_index++] = current_byte;
 80009b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80009b8:	1c5a      	adds	r2, r3, #1
 80009ba:	637a      	str	r2, [r7, #52]	; 0x34
 80009bc:	461a      	mov	r2, r3
 80009be:	68bb      	ldr	r3, [r7, #8]
 80009c0:	4413      	add	r3, r2
 80009c2:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80009c6:	701a      	strb	r2, [r3, #0]
				stuffed_size++;
 80009c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009ca:	3301      	adds	r3, #1
 80009cc:	627b      	str	r3, [r7, #36]	; 0x24
				current_byte = 0;
 80009ce:	2300      	movs	r3, #0
 80009d0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				bit_pos = 7;
 80009d4:	2307      	movs	r3, #7
 80009d6:	62bb      	str	r3, [r7, #40]	; 0x28
			}

			// Check if we've stuffed enough bits to increase size
			if (bits_stuffed >= 9 && bit_pos >= 0) {
 80009d8:	6a3b      	ldr	r3, [r7, #32]
 80009da:	2b08      	cmp	r3, #8
 80009dc:	dd07      	ble.n	80009ee <bit_stuffing+0x10c>
 80009de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	db04      	blt.n	80009ee <bit_stuffing+0x10c>
				stuffed_size++;
 80009e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009e6:	3301      	adds	r3, #1
 80009e8:	627b      	str	r3, [r7, #36]	; 0x24
				bits_stuffed = 0; // Reset bits_stuffed after increasing size
 80009ea:	2300      	movs	r3, #0
 80009ec:	623b      	str	r3, [r7, #32]
		for (int bit = 7; bit >= 0; bit--) {
 80009ee:	69bb      	ldr	r3, [r7, #24]
 80009f0:	3b01      	subs	r3, #1
 80009f2:	61bb      	str	r3, [r7, #24]
 80009f4:	69bb      	ldr	r3, [r7, #24]
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	da8c      	bge.n	8000914 <bit_stuffing+0x32>
	for (int i = 0; i < length; i++) {
 80009fa:	69fb      	ldr	r3, [r7, #28]
 80009fc:	3301      	adds	r3, #1
 80009fe:	61fb      	str	r3, [r7, #28]
 8000a00:	69fa      	ldr	r2, [r7, #28]
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	429a      	cmp	r2, r3
 8000a06:	db82      	blt.n	800090e <bit_stuffing+0x2c>
			}
		}
	}
	//myDebug("\n");

	if (bit_pos < 7) {
 8000a08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a0a:	2b06      	cmp	r3, #6
 8000a0c:	dc0b      	bgt.n	8000a26 <bit_stuffing+0x144>
		output_data[out_index++] = current_byte;
 8000a0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a10:	1c5a      	adds	r2, r3, #1
 8000a12:	637a      	str	r2, [r7, #52]	; 0x34
 8000a14:	461a      	mov	r2, r3
 8000a16:	68bb      	ldr	r3, [r7, #8]
 8000a18:	4413      	add	r3, r2
 8000a1a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8000a1e:	701a      	strb	r2, [r3, #0]
		stuffed_size++;
 8000a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a22:	3301      	adds	r3, #1
 8000a24:	627b      	str	r3, [r7, #36]	; 0x24
//		}
//	}
//	myDebug("\n");


	for(int i = 0; i < length; i++){
 8000a26:	2300      	movs	r3, #0
 8000a28:	617b      	str	r3, [r7, #20]
 8000a2a:	e00a      	b.n	8000a42 <bit_stuffing+0x160>
		output_data[i] = data[i];
 8000a2c:	697b      	ldr	r3, [r7, #20]
 8000a2e:	68fa      	ldr	r2, [r7, #12]
 8000a30:	441a      	add	r2, r3
 8000a32:	697b      	ldr	r3, [r7, #20]
 8000a34:	68b9      	ldr	r1, [r7, #8]
 8000a36:	440b      	add	r3, r1
 8000a38:	7812      	ldrb	r2, [r2, #0]
 8000a3a:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < length; i++){
 8000a3c:	697b      	ldr	r3, [r7, #20]
 8000a3e:	3301      	adds	r3, #1
 8000a40:	617b      	str	r3, [r7, #20]
 8000a42:	697a      	ldr	r2, [r7, #20]
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	429a      	cmp	r2, r3
 8000a48:	dbf0      	blt.n	8000a2c <bit_stuffing+0x14a>
	}

	out_index = length;
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	637b      	str	r3, [r7, #52]	; 0x34

	return out_index; // Return the size of output data after bit stuffing
 8000a4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8000a50:	4618      	mov	r0, r3
 8000a52:	373c      	adds	r7, #60	; 0x3c
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bc80      	pop	{r7}
 8000a58:	4770      	bx	lr

08000a5a <bit_destuffing>:

int bit_destuffing(uint8_t *data, uint8_t *output_data, int length) {
 8000a5a:	b480      	push	{r7}
 8000a5c:	b08d      	sub	sp, #52	; 0x34
 8000a5e:	af00      	add	r7, sp, #0
 8000a60:	60f8      	str	r0, [r7, #12]
 8000a62:	60b9      	str	r1, [r7, #8]
 8000a64:	607a      	str	r2, [r7, #4]
	int out_index = 0;
 8000a66:	2300      	movs	r3, #0
 8000a68:	62fb      	str	r3, [r7, #44]	; 0x2c
	int bit_count = 0;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t current_byte = 0;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	int bit_pos = 7;
 8000a74:	2307      	movs	r3, #7
 8000a76:	623b      	str	r3, [r7, #32]

	for (int i = 0; i < length; i++) {
 8000a78:	2300      	movs	r3, #0
 8000a7a:	61fb      	str	r3, [r7, #28]
 8000a7c:	e052      	b.n	8000b24 <bit_destuffing+0xca>
		for (int bit = 7; bit >= 0; bit--) {
 8000a7e:	2307      	movs	r3, #7
 8000a80:	61bb      	str	r3, [r7, #24]
 8000a82:	e049      	b.n	8000b18 <bit_destuffing+0xbe>
			int bit_val = (data[i] >> bit) & 1;
 8000a84:	69fb      	ldr	r3, [r7, #28]
 8000a86:	68fa      	ldr	r2, [r7, #12]
 8000a88:	4413      	add	r3, r2
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	461a      	mov	r2, r3
 8000a8e:	69bb      	ldr	r3, [r7, #24]
 8000a90:	fa42 f303 	asr.w	r3, r2, r3
 8000a94:	f003 0301 	and.w	r3, r3, #1
 8000a98:	613b      	str	r3, [r7, #16]

			if (bit_val) {
 8000a9a:	693b      	ldr	r3, [r7, #16]
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d011      	beq.n	8000ac4 <bit_destuffing+0x6a>
				bit_count++;
 8000aa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000aa2:	3301      	adds	r3, #1
 8000aa4:	62bb      	str	r3, [r7, #40]	; 0x28
				current_byte |= (bit_val << bit_pos);
 8000aa6:	693a      	ldr	r2, [r7, #16]
 8000aa8:	6a3b      	ldr	r3, [r7, #32]
 8000aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8000aae:	b25a      	sxtb	r2, r3
 8000ab0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8000ab4:	4313      	orrs	r3, r2
 8000ab6:	b25b      	sxtb	r3, r3
 8000ab8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				bit_pos--;
 8000abc:	6a3b      	ldr	r3, [r7, #32]
 8000abe:	3b01      	subs	r3, #1
 8000ac0:	623b      	str	r3, [r7, #32]
 8000ac2:	e015      	b.n	8000af0 <bit_destuffing+0x96>
			} else {
				if (bit_count == 5) {
 8000ac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ac6:	2b05      	cmp	r3, #5
 8000ac8:	d102      	bne.n	8000ad0 <bit_destuffing+0x76>
					// Skip this bit as it is a stuffed bit
					bit_count = 0;
 8000aca:	2300      	movs	r3, #0
 8000acc:	62bb      	str	r3, [r7, #40]	; 0x28
					continue;
 8000ace:	e020      	b.n	8000b12 <bit_destuffing+0xb8>
				} else {
					bit_count = 0;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	62bb      	str	r3, [r7, #40]	; 0x28
					current_byte |= (bit_val << bit_pos);
 8000ad4:	693a      	ldr	r2, [r7, #16]
 8000ad6:	6a3b      	ldr	r3, [r7, #32]
 8000ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8000adc:	b25a      	sxtb	r2, r3
 8000ade:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8000ae2:	4313      	orrs	r3, r2
 8000ae4:	b25b      	sxtb	r3, r3
 8000ae6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					bit_pos--;
 8000aea:	6a3b      	ldr	r3, [r7, #32]
 8000aec:	3b01      	subs	r3, #1
 8000aee:	623b      	str	r3, [r7, #32]
				}
			}

			if (bit_pos < 0) {
 8000af0:	6a3b      	ldr	r3, [r7, #32]
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	da0d      	bge.n	8000b12 <bit_destuffing+0xb8>
				output_data[out_index++] = current_byte;
 8000af6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000af8:	1c5a      	adds	r2, r3, #1
 8000afa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8000afc:	461a      	mov	r2, r3
 8000afe:	68bb      	ldr	r3, [r7, #8]
 8000b00:	4413      	add	r3, r2
 8000b02:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8000b06:	701a      	strb	r2, [r3, #0]
				current_byte = 0;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				bit_pos = 7;
 8000b0e:	2307      	movs	r3, #7
 8000b10:	623b      	str	r3, [r7, #32]
		for (int bit = 7; bit >= 0; bit--) {
 8000b12:	69bb      	ldr	r3, [r7, #24]
 8000b14:	3b01      	subs	r3, #1
 8000b16:	61bb      	str	r3, [r7, #24]
 8000b18:	69bb      	ldr	r3, [r7, #24]
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	dab2      	bge.n	8000a84 <bit_destuffing+0x2a>
	for (int i = 0; i < length; i++) {
 8000b1e:	69fb      	ldr	r3, [r7, #28]
 8000b20:	3301      	adds	r3, #1
 8000b22:	61fb      	str	r3, [r7, #28]
 8000b24:	69fa      	ldr	r2, [r7, #28]
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	429a      	cmp	r2, r3
 8000b2a:	dba8      	blt.n	8000a7e <bit_destuffing+0x24>
			}
		}
	}

	// Ensure the last byte is written if it's partially filled
	if (bit_pos < 7) {
 8000b2c:	6a3b      	ldr	r3, [r7, #32]
 8000b2e:	2b06      	cmp	r3, #6
 8000b30:	dc08      	bgt.n	8000b44 <bit_destuffing+0xea>
		output_data[out_index++] = current_byte;
 8000b32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b34:	1c5a      	adds	r2, r3, #1
 8000b36:	62fa      	str	r2, [r7, #44]	; 0x2c
 8000b38:	461a      	mov	r2, r3
 8000b3a:	68bb      	ldr	r3, [r7, #8]
 8000b3c:	4413      	add	r3, r2
 8000b3e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8000b42:	701a      	strb	r2, [r3, #0]
//		}
//	}
//	myDebug("\n");


	for(int i = 0; i < length; i++){
 8000b44:	2300      	movs	r3, #0
 8000b46:	617b      	str	r3, [r7, #20]
 8000b48:	e00a      	b.n	8000b60 <bit_destuffing+0x106>
		output_data[i] = data[i];
 8000b4a:	697b      	ldr	r3, [r7, #20]
 8000b4c:	68fa      	ldr	r2, [r7, #12]
 8000b4e:	441a      	add	r2, r3
 8000b50:	697b      	ldr	r3, [r7, #20]
 8000b52:	68b9      	ldr	r1, [r7, #8]
 8000b54:	440b      	add	r3, r1
 8000b56:	7812      	ldrb	r2, [r2, #0]
 8000b58:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < length; i++){
 8000b5a:	697b      	ldr	r3, [r7, #20]
 8000b5c:	3301      	adds	r3, #1
 8000b5e:	617b      	str	r3, [r7, #20]
 8000b60:	697a      	ldr	r2, [r7, #20]
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	429a      	cmp	r2, r3
 8000b66:	dbf0      	blt.n	8000b4a <bit_destuffing+0xf0>
	}

	out_index = length;
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	62fb      	str	r3, [r7, #44]	; 0x2c


	return out_index;
 8000b6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8000b6e:	4618      	mov	r0, r3
 8000b70:	3734      	adds	r7, #52	; 0x34
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bc80      	pop	{r7}
 8000b76:	4770      	bx	lr

08000b78 <check_packet_type>:

int check_packet_type(uint8_t *OBC_UART) {
 8000b78:	b480      	push	{r7}
 8000b7a:	b085      	sub	sp, #20
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
	uint8_t packet_type_true = 0;
 8000b80:	2300      	movs	r3, #0
 8000b82:	73fb      	strb	r3, [r7, #15]
	switch (OBC_UART[1]) {
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	3301      	adds	r3, #1
 8000b88:	781b      	ldrb	r3, [r3, #0]
 8000b8a:	2bb2      	cmp	r3, #178	; 0xb2
 8000b8c:	d01e      	beq.n	8000bcc <check_packet_type+0x54>
 8000b8e:	2bb2      	cmp	r3, #178	; 0xb2
 8000b90:	dc2e      	bgt.n	8000bf0 <check_packet_type+0x78>
 8000b92:	2bb1      	cmp	r3, #177	; 0xb1
 8000b94:	d017      	beq.n	8000bc6 <check_packet_type+0x4e>
 8000b96:	2bb1      	cmp	r3, #177	; 0xb1
 8000b98:	dc2a      	bgt.n	8000bf0 <check_packet_type+0x78>
 8000b9a:	2b0d      	cmp	r3, #13
 8000b9c:	dc10      	bgt.n	8000bc0 <check_packet_type+0x48>
 8000b9e:	2b0a      	cmp	r3, #10
 8000ba0:	db26      	blt.n	8000bf0 <check_packet_type+0x78>
 8000ba2:	3b0a      	subs	r3, #10
 8000ba4:	2b03      	cmp	r3, #3
 8000ba6:	d823      	bhi.n	8000bf0 <check_packet_type+0x78>
 8000ba8:	a201      	add	r2, pc, #4	; (adr r2, 8000bb0 <check_packet_type+0x38>)
 8000baa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bae:	bf00      	nop
 8000bb0:	08000bd9 	.word	0x08000bd9
 8000bb4:	08000bdf 	.word	0x08000bdf
 8000bb8:	08000be5 	.word	0x08000be5
 8000bbc:	08000beb 	.word	0x08000beb
 8000bc0:	2bac      	cmp	r3, #172	; 0xac
 8000bc2:	d006      	beq.n	8000bd2 <check_packet_type+0x5a>
 8000bc4:	e014      	b.n	8000bf0 <check_packet_type+0x78>

	case 0xb1:						// beacon_type_1
		packet_type_true = 1;
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	73fb      	strb	r3, [r7, #15]
		break;
 8000bca:	e013      	b.n	8000bf4 <check_packet_type+0x7c>

	case 0xb2:						// beacon_type_2
		packet_type_true = 1;
 8000bcc:	2301      	movs	r3, #1
 8000bce:	73fb      	strb	r3, [r7, #15]
		break;
 8000bd0:	e010      	b.n	8000bf4 <check_packet_type+0x7c>

	case 0xac:						// ack
		packet_type_true = 1;
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	73fb      	strb	r3, [r7, #15]
		break;
 8000bd6:	e00d      	b.n	8000bf4 <check_packet_type+0x7c>

	case 0x0a:						// digipeater packet
		packet_type_true = 1;
 8000bd8:	2301      	movs	r3, #1
 8000bda:	73fb      	strb	r3, [r7, #15]
		break;
 8000bdc:	e00a      	b.n	8000bf4 <check_packet_type+0x7c>

	case 0x0b:						// epdm
		packet_type_true = 1;
 8000bde:	2301      	movs	r3, #1
 8000be0:	73fb      	strb	r3, [r7, #15]
		break;
 8000be2:	e007      	b.n	8000bf4 <check_packet_type+0x7c>

	case 0x0c:						// camera
		packet_type_true = 1;
 8000be4:	2301      	movs	r3, #1
 8000be6:	73fb      	strb	r3, [r7, #15]
		break;
 8000be8:	e004      	b.n	8000bf4 <check_packet_type+0x7c>

	case 0x0d:						// adcs
		packet_type_true = 1;
 8000bea:	2301      	movs	r3, #1
 8000bec:	73fb      	strb	r3, [r7, #15]
		break;
 8000bee:	e001      	b.n	8000bf4 <check_packet_type+0x7c>

	default:
		packet_type_true = 0;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	73fb      	strb	r3, [r7, #15]
	}

	return packet_type_true;
 8000bf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	3714      	adds	r7, #20
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bc80      	pop	{r7}
 8000bfe:	4770      	bx	lr

08000c00 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b085      	sub	sp, #20
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000c08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c0c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000c0e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	4313      	orrs	r3, r2
 8000c16:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000c18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c1c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	4013      	ands	r3, r2
 8000c22:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000c24:	68fb      	ldr	r3, [r7, #12]
}
 8000c26:	bf00      	nop
 8000c28:	3714      	adds	r7, #20
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bc80      	pop	{r7}
 8000c2e:	4770      	bx	lr

08000c30 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b086      	sub	sp, #24
 8000c34:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c36:	1d3b      	adds	r3, r7, #4
 8000c38:	2200      	movs	r2, #0
 8000c3a:	601a      	str	r2, [r3, #0]
 8000c3c:	605a      	str	r2, [r3, #4]
 8000c3e:	609a      	str	r2, [r3, #8]
 8000c40:	60da      	str	r2, [r3, #12]
 8000c42:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c44:	2001      	movs	r0, #1
 8000c46:	f7ff ffdb 	bl	8000c00 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c4a:	2002      	movs	r0, #2
 8000c4c:	f7ff ffd8 	bl	8000c00 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c50:	2004      	movs	r0, #4
 8000c52:	f7ff ffd5 	bl	8000c00 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8000c56:	2200      	movs	r2, #0
 8000c58:	f44f 410a 	mov.w	r1, #35328	; 0x8a00
 8000c5c:	481f      	ldr	r0, [pc, #124]	; (8000cdc <MX_GPIO_Init+0xac>)
 8000c5e:	f003 fa3f 	bl	80040e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FE_CTRL3_Pin|FE_CTRL2_Pin|FE_CTRL1_Pin, GPIO_PIN_RESET);
 8000c62:	2200      	movs	r2, #0
 8000c64:	2138      	movs	r1, #56	; 0x38
 8000c66:	481e      	ldr	r0, [pc, #120]	; (8000ce0 <MX_GPIO_Init+0xb0>)
 8000c68:	f003 fa3a 	bl	80040e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 8000c6c:	f44f 430a 	mov.w	r3, #35328	; 0x8a00
 8000c70:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c72:	2301      	movs	r3, #1
 8000c74:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c76:	2300      	movs	r3, #0
 8000c78:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c7a:	2302      	movs	r3, #2
 8000c7c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c7e:	1d3b      	adds	r3, r7, #4
 8000c80:	4619      	mov	r1, r3
 8000c82:	4816      	ldr	r0, [pc, #88]	; (8000cdc <MX_GPIO_Init+0xac>)
 8000c84:	f003 f8cc 	bl	8003e20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = FE_CTRL3_Pin|FE_CTRL2_Pin|FE_CTRL1_Pin;
 8000c88:	2338      	movs	r3, #56	; 0x38
 8000c8a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c90:	2300      	movs	r3, #0
 8000c92:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c94:	2303      	movs	r3, #3
 8000c96:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c98:	1d3b      	adds	r3, r7, #4
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	4810      	ldr	r0, [pc, #64]	; (8000ce0 <MX_GPIO_Init+0xb0>)
 8000c9e:	f003 f8bf 	bl	8003e20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = B1_Pin|B2_Pin;
 8000ca2:	2303      	movs	r3, #3
 8000ca4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ca6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000caa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cac:	2301      	movs	r3, #1
 8000cae:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cb0:	1d3b      	adds	r3, r7, #4
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cb8:	f003 f8b2 	bl	8003e20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B3_Pin;
 8000cbc:	2340      	movs	r3, #64	; 0x40
 8000cbe:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000cc0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000cc4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B3_GPIO_Port, &GPIO_InitStruct);
 8000cca:	1d3b      	adds	r3, r7, #4
 8000ccc:	4619      	mov	r1, r3
 8000cce:	4804      	ldr	r0, [pc, #16]	; (8000ce0 <MX_GPIO_Init+0xb0>)
 8000cd0:	f003 f8a6 	bl	8003e20 <HAL_GPIO_Init>

}
 8000cd4:	bf00      	nop
 8000cd6:	3718      	adds	r7, #24
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	48000400 	.word	0x48000400
 8000ce0:	48000800 	.word	0x48000800

08000ce4 <countsDataBetweenFlags>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int countsDataBetweenFlags(uint8_t *data, int data_length) {
 8000ce4:	b480      	push	{r7}
 8000ce6:	b087      	sub	sp, #28
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
 8000cec:	6039      	str	r1, [r7, #0]
	int found_first_7e = 0;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	617b      	str	r3, [r7, #20]
	int start_index = 0, end_index = 0;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	613b      	str	r3, [r7, #16]
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	60fb      	str	r3, [r7, #12]

	for (int i = 0; i < data_length; i++) {
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	60bb      	str	r3, [r7, #8]
 8000cfe:	e013      	b.n	8000d28 <countsDataBetweenFlags+0x44>
		if (data[i] == 0x7e) {
 8000d00:	68bb      	ldr	r3, [r7, #8]
 8000d02:	687a      	ldr	r2, [r7, #4]
 8000d04:	4413      	add	r3, r2
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	2b7e      	cmp	r3, #126	; 0x7e
 8000d0a:	d10a      	bne.n	8000d22 <countsDataBetweenFlags+0x3e>
			if (!found_first_7e) {
 8000d0c:	697b      	ldr	r3, [r7, #20]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d104      	bne.n	8000d1c <countsDataBetweenFlags+0x38>
				found_first_7e = 1;
 8000d12:	2301      	movs	r3, #1
 8000d14:	617b      	str	r3, [r7, #20]
				start_index = i;
 8000d16:	68bb      	ldr	r3, [r7, #8]
 8000d18:	613b      	str	r3, [r7, #16]
 8000d1a:	e002      	b.n	8000d22 <countsDataBetweenFlags+0x3e>
			} else {
				end_index = i;
 8000d1c:	68bb      	ldr	r3, [r7, #8]
 8000d1e:	60fb      	str	r3, [r7, #12]
				break;
 8000d20:	e006      	b.n	8000d30 <countsDataBetweenFlags+0x4c>
	for (int i = 0; i < data_length; i++) {
 8000d22:	68bb      	ldr	r3, [r7, #8]
 8000d24:	3301      	adds	r3, #1
 8000d26:	60bb      	str	r3, [r7, #8]
 8000d28:	68ba      	ldr	r2, [r7, #8]
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	429a      	cmp	r2, r3
 8000d2e:	dbe7      	blt.n	8000d00 <countsDataBetweenFlags+0x1c>
			}
		}
	}

	if (end_index > start_index) {
 8000d30:	68fa      	ldr	r2, [r7, #12]
 8000d32:	693b      	ldr	r3, [r7, #16]
 8000d34:	429a      	cmp	r2, r3
 8000d36:	dd04      	ble.n	8000d42 <countsDataBetweenFlags+0x5e>
		return end_index - start_index + 1;
 8000d38:	68fa      	ldr	r2, [r7, #12]
 8000d3a:	693b      	ldr	r3, [r7, #16]
 8000d3c:	1ad3      	subs	r3, r2, r3
 8000d3e:	3301      	adds	r3, #1
 8000d40:	e001      	b.n	8000d46 <countsDataBetweenFlags+0x62>
	} else {
		return -1; // Return -1 if two 0x7E flags are not found
 8000d42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	}
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	371c      	adds	r7, #28
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bc80      	pop	{r7}
 8000d4e:	4770      	bx	lr

08000d50 <setPacketParams>:

void setPacketParams(uint8_t buffer_length) {
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	4603      	mov	r3, r0
 8000d58:	71fb      	strb	r3, [r7, #7]
	pkt_params.PacketType = PACKET_TYPE_GFSK;
 8000d5a:	4b11      	ldr	r3, [pc, #68]	; (8000da0 <setPacketParams+0x50>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	701a      	strb	r2, [r3, #0]
	pkt_params.Params.Gfsk.PayloadLength = buffer_length;
 8000d60:	4a0f      	ldr	r2, [pc, #60]	; (8000da0 <setPacketParams+0x50>)
 8000d62:	79fb      	ldrb	r3, [r7, #7]
 8000d64:	7213      	strb	r3, [r2, #8]
	pkt_params.Params.Gfsk.PreambleLength = 8;
 8000d66:	4b0e      	ldr	r3, [pc, #56]	; (8000da0 <setPacketParams+0x50>)
 8000d68:	2208      	movs	r2, #8
 8000d6a:	805a      	strh	r2, [r3, #2]
	pkt_params.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8000d6c:	4b0c      	ldr	r3, [pc, #48]	; (8000da0 <setPacketParams+0x50>)
 8000d6e:	2204      	movs	r2, #4
 8000d70:	711a      	strb	r2, [r3, #4]
	pkt_params.Params.Gfsk.SyncWordLength = 3 << 3;
 8000d72:	4b0b      	ldr	r3, [pc, #44]	; (8000da0 <setPacketParams+0x50>)
 8000d74:	2218      	movs	r2, #24
 8000d76:	715a      	strb	r2, [r3, #5]
	pkt_params.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8000d78:	4b09      	ldr	r3, [pc, #36]	; (8000da0 <setPacketParams+0x50>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	719a      	strb	r2, [r3, #6]
	pkt_params.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 8000d7e:	4b08      	ldr	r3, [pc, #32]	; (8000da0 <setPacketParams+0x50>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	71da      	strb	r2, [r3, #7]
	pkt_params.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8000d84:	4b06      	ldr	r3, [pc, #24]	; (8000da0 <setPacketParams+0x50>)
 8000d86:	22f2      	movs	r2, #242	; 0xf2
 8000d88:	725a      	strb	r2, [r3, #9]
	pkt_params.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8000d8a:	4b05      	ldr	r3, [pc, #20]	; (8000da0 <setPacketParams+0x50>)
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	729a      	strb	r2, [r3, #10]
	SUBGRF_SetPacketParams(&pkt_params);
 8000d90:	4803      	ldr	r0, [pc, #12]	; (8000da0 <setPacketParams+0x50>)
 8000d92:	f009 fee9 	bl	800ab68 <SUBGRF_SetPacketParams>

}
 8000d96:	bf00      	nop
 8000d98:	3708      	adds	r7, #8
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	2000027c 	.word	0x2000027c

08000da4 <setModulationParams>:
void setModulationParams(unsigned long bitRate, unsigned long fDev) {
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b082      	sub	sp, #8
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
 8000dac:	6039      	str	r1, [r7, #0]
	mod_params.PacketType = PACKET_TYPE_GFSK;
 8000dae:	4b0b      	ldr	r3, [pc, #44]	; (8000ddc <setModulationParams+0x38>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	701a      	strb	r2, [r3, #0]
	mod_params.Params.Gfsk.Bandwidth = RX_BW_29300;
 8000db4:	4b09      	ldr	r3, [pc, #36]	; (8000ddc <setModulationParams+0x38>)
 8000db6:	220d      	movs	r2, #13
 8000db8:	735a      	strb	r2, [r3, #13]
	mod_params.Params.Gfsk.BitRate = bitRate;
 8000dba:	4a08      	ldr	r2, [pc, #32]	; (8000ddc <setModulationParams+0x38>)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	6053      	str	r3, [r2, #4]
	mod_params.Params.Gfsk.Fdev = fDev;
 8000dc0:	4a06      	ldr	r2, [pc, #24]	; (8000ddc <setModulationParams+0x38>)
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	6093      	str	r3, [r2, #8]
	mod_params.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8000dc6:	4b05      	ldr	r3, [pc, #20]	; (8000ddc <setModulationParams+0x38>)
 8000dc8:	220b      	movs	r2, #11
 8000dca:	731a      	strb	r2, [r3, #12]
	SUBGRF_SetModulationParams(&mod_params);
 8000dcc:	4803      	ldr	r0, [pc, #12]	; (8000ddc <setModulationParams+0x38>)
 8000dce:	f009 fdf9 	bl	800a9c4 <SUBGRF_SetModulationParams>

}
 8000dd2:	bf00      	nop
 8000dd4:	3708      	adds	r7, #8
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	20000290 	.word	0x20000290

08000de0 <radioConfig>:

void radioConfig(uint8_t *buffer, uint8_t buffer_len) {
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b084      	sub	sp, #16
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
 8000de8:	460b      	mov	r3, r1
 8000dea:	70fb      	strb	r3, [r7, #3]
	SUBGRF_SetBufferBaseAddress(0x00, 0x00);
 8000dec:	2100      	movs	r1, #0
 8000dee:	2000      	movs	r0, #0
 8000df0:	f009 ff58 	bl	800aca4 <SUBGRF_SetBufferBaseAddress>
	SUBGRF_SetPayload(buffer, buffer_len);
 8000df4:	78fb      	ldrb	r3, [r7, #3]
 8000df6:	4619      	mov	r1, r3
 8000df8:	6878      	ldr	r0, [r7, #4]
 8000dfa:	f009 f939 	bl	800a070 <SUBGRF_SetPayload>
	SUBGRF_SetSyncWord(( uint8_t[] ) { 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00,
 8000dfe:	4a0f      	ldr	r2, [pc, #60]	; (8000e3c <radioConfig+0x5c>)
 8000e00:	f107 0308 	add.w	r3, r7, #8
 8000e04:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e08:	e883 0003 	stmia.w	r3, {r0, r1}
 8000e0c:	f107 0308 	add.w	r3, r7, #8
 8000e10:	4618      	mov	r0, r3
 8000e12:	f009 f972 	bl	800a0fa <SUBGRF_SetSyncWord>
					0x00 });
	SUBGRF_SetWhiteningSeed(0x01FF);
 8000e16:	f240 10ff 	movw	r0, #511	; 0x1ff
 8000e1a:	f009 f9bd 	bl	800a198 <SUBGRF_SetWhiteningSeed>
	SUBGRF_SetPaConfig(PA_DUTY_CYCLE, HP_MAX, PA_SEL, 0x01);
 8000e1e:	2301      	movs	r3, #1
 8000e20:	2201      	movs	r2, #1
 8000e22:	2100      	movs	r1, #0
 8000e24:	2007      	movs	r0, #7
 8000e26:	f009 fc15 	bl	800a654 <SUBGRF_SetPaConfig>
	SUBGRF_SetTxParams(RFO_LP, POWER, RAMP_TIME);
 8000e2a:	2202      	movs	r2, #2
 8000e2c:	210e      	movs	r1, #14
 8000e2e:	2001      	movs	r0, #1
 8000e30:	f009 fcfa 	bl	800a828 <SUBGRF_SetTxParams>
}
 8000e34:	bf00      	nop
 8000e36:	3710      	adds	r7, #16
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	0800c51c 	.word	0x0800c51c

08000e40 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b088      	sub	sp, #32
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
	if (huart == &huart2 || huart == &hlpuart1 || huart == &huart1) {
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	4a98      	ldr	r2, [pc, #608]	; (80010ac <HAL_UART_RxCpltCallback+0x26c>)
 8000e4c:	4293      	cmp	r3, r2
 8000e4e:	d008      	beq.n	8000e62 <HAL_UART_RxCpltCallback+0x22>
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	4a97      	ldr	r2, [pc, #604]	; (80010b0 <HAL_UART_RxCpltCallback+0x270>)
 8000e54:	4293      	cmp	r3, r2
 8000e56:	d004      	beq.n	8000e62 <HAL_UART_RxCpltCallback+0x22>
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	4a96      	ldr	r2, [pc, #600]	; (80010b4 <HAL_UART_RxCpltCallback+0x274>)
 8000e5c:	4293      	cmp	r3, r2
 8000e5e:	f040 8217 	bne.w	8001290 <HAL_UART_RxCpltCallback+0x450>

		if (OBC_HANDSHAKE_FLAG) {
 8000e62:	4b95      	ldr	r3, [pc, #596]	; (80010b8 <HAL_UART_RxCpltCallback+0x278>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	f000 8212 	beq.w	8001290 <HAL_UART_RxCpltCallback+0x450>

			uint8_t header = 0x00;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	72fb      	strb	r3, [r7, #11]

			if (OBC_UART_RX[0] == header || OBC_UART_RX[0] != 0x53) {
 8000e70:	4b92      	ldr	r3, [pc, #584]	; (80010bc <HAL_UART_RxCpltCallback+0x27c>)
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	7afa      	ldrb	r2, [r7, #11]
 8000e76:	429a      	cmp	r2, r3
 8000e78:	d003      	beq.n	8000e82 <HAL_UART_RxCpltCallback+0x42>
 8000e7a:	4b90      	ldr	r3, [pc, #576]	; (80010bc <HAL_UART_RxCpltCallback+0x27c>)
 8000e7c:	781b      	ldrb	r3, [r3, #0]
 8000e7e:	2b53      	cmp	r3, #83	; 0x53
 8000e80:	d011      	beq.n	8000ea6 <HAL_UART_RxCpltCallback+0x66>

				for (int loop1 = 0; loop1 < sizeof(OBC_UART_RX); loop1++) {
 8000e82:	2300      	movs	r3, #0
 8000e84:	61fb      	str	r3, [r7, #28]
 8000e86:	e00b      	b.n	8000ea0 <HAL_UART_RxCpltCallback+0x60>
					OBC_UART_RX[loop1] = OBC_UART_RX[loop1 + 1];
 8000e88:	69fb      	ldr	r3, [r7, #28]
 8000e8a:	3301      	adds	r3, #1
 8000e8c:	4a8b      	ldr	r2, [pc, #556]	; (80010bc <HAL_UART_RxCpltCallback+0x27c>)
 8000e8e:	5cd1      	ldrb	r1, [r2, r3]
 8000e90:	4a8a      	ldr	r2, [pc, #552]	; (80010bc <HAL_UART_RxCpltCallback+0x27c>)
 8000e92:	69fb      	ldr	r3, [r7, #28]
 8000e94:	4413      	add	r3, r2
 8000e96:	460a      	mov	r2, r1
 8000e98:	701a      	strb	r2, [r3, #0]
				for (int loop1 = 0; loop1 < sizeof(OBC_UART_RX); loop1++) {
 8000e9a:	69fb      	ldr	r3, [r7, #28]
 8000e9c:	3301      	adds	r3, #1
 8000e9e:	61fb      	str	r3, [r7, #28]
 8000ea0:	69fb      	ldr	r3, [r7, #28]
 8000ea2:	2b54      	cmp	r3, #84	; 0x54
 8000ea4:	d9f0      	bls.n	8000e88 <HAL_UART_RxCpltCallback+0x48>
				}
			}

			packet_type_true = check_packet_type(OBC_UART_RX);
 8000ea6:	4885      	ldr	r0, [pc, #532]	; (80010bc <HAL_UART_RxCpltCallback+0x27c>)
 8000ea8:	f7ff fe66 	bl	8000b78 <check_packet_type>
 8000eac:	4603      	mov	r3, r0
 8000eae:	4a84      	ldr	r2, [pc, #528]	; (80010c0 <HAL_UART_RxCpltCallback+0x280>)
 8000eb0:	6013      	str	r3, [r2, #0]

			if (packet_type_true) {
 8000eb2:	4b83      	ldr	r3, [pc, #524]	; (80010c0 <HAL_UART_RxCpltCallback+0x280>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	f000 819d 	beq.w	80011f6 <HAL_UART_RxCpltCallback+0x3b6>

				if (DIGIPEATER_STATUS == 1 && BEACON_COUNT == 0
 8000ebc:	4b81      	ldr	r3, [pc, #516]	; (80010c4 <HAL_UART_RxCpltCallback+0x284>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	2b01      	cmp	r3, #1
 8000ec2:	f040 813d 	bne.w	8001140 <HAL_UART_RxCpltCallback+0x300>
 8000ec6:	4b80      	ldr	r3, [pc, #512]	; (80010c8 <HAL_UART_RxCpltCallback+0x288>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	f040 8138 	bne.w	8001140 <HAL_UART_RxCpltCallback+0x300>
						&& DIGIPEATER_RX_FLAG == 1) {
 8000ed0:	4b7e      	ldr	r3, [pc, #504]	; (80010cc <HAL_UART_RxCpltCallback+0x28c>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	2b01      	cmp	r3, #1
 8000ed6:	f040 8133 	bne.w	8001140 <HAL_UART_RxCpltCallback+0x300>

					OBC_SUCCESS_DATA_RX_FLAG = 0;
 8000eda:	4b7d      	ldr	r3, [pc, #500]	; (80010d0 <HAL_UART_RxCpltCallback+0x290>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	601a      	str	r2, [r3, #0]
//					for (int i = 0; i < sizeof(OBC_UART_RX); i++) {
//						myDebug("%02x ", OBC_UART_RX[i]);
//					}
//					myDebug("\r\n");

					if (OBC_UART_RX[0] == 0x53 && OBC_UART_RX[83] == 0x7E) {
 8000ee0:	4b76      	ldr	r3, [pc, #472]	; (80010bc <HAL_UART_RxCpltCallback+0x27c>)
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	2b53      	cmp	r3, #83	; 0x53
 8000ee6:	f040 80a1 	bne.w	800102c <HAL_UART_RxCpltCallback+0x1ec>
 8000eea:	4b74      	ldr	r3, [pc, #464]	; (80010bc <HAL_UART_RxCpltCallback+0x27c>)
 8000eec:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8000ef0:	2b7e      	cmp	r3, #126	; 0x7e
 8000ef2:	f040 809b 	bne.w	800102c <HAL_UART_RxCpltCallback+0x1ec>
						myDebug(
 8000ef6:	4877      	ldr	r0, [pc, #476]	; (80010d4 <HAL_UART_RxCpltCallback+0x294>)
 8000ef8:	f7ff fc28 	bl	800074c <myDebug>
								"--> Correct Digipeater Data received from OBC\n");
						obc_ilen = OBC_UART_RX[2];  //len of info
 8000efc:	4b6f      	ldr	r3, [pc, #444]	; (80010bc <HAL_UART_RxCpltCallback+0x27c>)
 8000efe:	789a      	ldrb	r2, [r3, #2]
 8000f00:	4b75      	ldr	r3, [pc, #468]	; (80010d8 <HAL_UART_RxCpltCallback+0x298>)
 8000f02:	701a      	strb	r2, [r3, #0]
						PACKET_TYPE = OBC_UART_RX[1]; //packet_type
 8000f04:	4b6d      	ldr	r3, [pc, #436]	; (80010bc <HAL_UART_RxCpltCallback+0x27c>)
 8000f06:	785a      	ldrb	r2, [r3, #1]
 8000f08:	4b74      	ldr	r3, [pc, #464]	; (80010dc <HAL_UART_RxCpltCallback+0x29c>)
 8000f0a:	701a      	strb	r2, [r3, #0]
						DIGIPEATER_FLAG = 1;
 8000f0c:	4b74      	ldr	r3, [pc, #464]	; (80010e0 <HAL_UART_RxCpltCallback+0x2a0>)
 8000f0e:	2201      	movs	r2, #1
 8000f10:	601a      	str	r2, [r3, #0]

						getAX25Packet(OBC_UART_RX, obc_ilen);
 8000f12:	4b71      	ldr	r3, [pc, #452]	; (80010d8 <HAL_UART_RxCpltCallback+0x298>)
 8000f14:	781b      	ldrb	r3, [r3, #0]
 8000f16:	4619      	mov	r1, r3
 8000f18:	4868      	ldr	r0, [pc, #416]	; (80010bc <HAL_UART_RxCpltCallback+0x27c>)
 8000f1a:	f7ff fb8b 	bl	8000634 <getAX25Packet>

						tx_buffer_len = countsDataBetweenFlags(temp_tx_buffer,
 8000f1e:	2196      	movs	r1, #150	; 0x96
 8000f20:	4870      	ldr	r0, [pc, #448]	; (80010e4 <HAL_UART_RxCpltCallback+0x2a4>)
 8000f22:	f7ff fedf 	bl	8000ce4 <countsDataBetweenFlags>
 8000f26:	4603      	mov	r3, r0
 8000f28:	4a6f      	ldr	r2, [pc, #444]	; (80010e8 <HAL_UART_RxCpltCallback+0x2a8>)
 8000f2a:	6013      	str	r3, [r2, #0]
								sizeof(temp_tx_buffer));

//						myDebug(		"Digipeater Packet complete, ready to TX: 0x%x\r\n", temp_tx_buffer);
						for (int j = 0; j < tx_buffer_len; j++) {
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	61bb      	str	r3, [r7, #24]
 8000f30:	e00b      	b.n	8000f4a <HAL_UART_RxCpltCallback+0x10a>
							tx_buffer[j] = temp_tx_buffer[j];
 8000f32:	4a6c      	ldr	r2, [pc, #432]	; (80010e4 <HAL_UART_RxCpltCallback+0x2a4>)
 8000f34:	69bb      	ldr	r3, [r7, #24]
 8000f36:	4413      	add	r3, r2
 8000f38:	7819      	ldrb	r1, [r3, #0]
 8000f3a:	4a6c      	ldr	r2, [pc, #432]	; (80010ec <HAL_UART_RxCpltCallback+0x2ac>)
 8000f3c:	69bb      	ldr	r3, [r7, #24]
 8000f3e:	4413      	add	r3, r2
 8000f40:	460a      	mov	r2, r1
 8000f42:	701a      	strb	r2, [r3, #0]
						for (int j = 0; j < tx_buffer_len; j++) {
 8000f44:	69bb      	ldr	r3, [r7, #24]
 8000f46:	3301      	adds	r3, #1
 8000f48:	61bb      	str	r3, [r7, #24]
 8000f4a:	4b67      	ldr	r3, [pc, #412]	; (80010e8 <HAL_UART_RxCpltCallback+0x2a8>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	69ba      	ldr	r2, [r7, #24]
 8000f50:	429a      	cmp	r2, r3
 8000f52:	dbee      	blt.n	8000f32 <HAL_UART_RxCpltCallback+0xf2>
//							myDebug("%02x ", tx_buffer[j]);
						}
//						myDebug("\r\n");
//						myDebug("size of tx_buffer = %d\r\n", tx_buffer_len);

						memset(OBC_UART_RX, '\0', obc_ilen);
 8000f54:	4b60      	ldr	r3, [pc, #384]	; (80010d8 <HAL_UART_RxCpltCallback+0x298>)
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	461a      	mov	r2, r3
 8000f5a:	2100      	movs	r1, #0
 8000f5c:	4857      	ldr	r0, [pc, #348]	; (80010bc <HAL_UART_RxCpltCallback+0x27c>)
 8000f5e:	f00a fe3d 	bl	800bbdc <memset>
						memset(temp_tx_buffer, '\0', sizeof(temp_tx_buffer));
 8000f62:	2296      	movs	r2, #150	; 0x96
 8000f64:	2100      	movs	r1, #0
 8000f66:	485f      	ldr	r0, [pc, #380]	; (80010e4 <HAL_UART_RxCpltCallback+0x2a4>)
 8000f68:	f00a fe38 	bl	800bbdc <memset>

						delay_us(500000);
 8000f6c:	4860      	ldr	r0, [pc, #384]	; (80010f0 <HAL_UART_RxCpltCallback+0x2b0>)
 8000f6e:	f7ff fbd3 	bl	8000718 <delay_us>

						setPacketParams(tx_buffer_len);
 8000f72:	4b5d      	ldr	r3, [pc, #372]	; (80010e8 <HAL_UART_RxCpltCallback+0x2a8>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	b2db      	uxtb	r3, r3
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f7ff fee9 	bl	8000d50 <setPacketParams>
						setModulationParams(GFSK_BR_1200, GFSK_FDEV_1200);
 8000f7e:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8000f82:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8000f86:	f7ff ff0d 	bl	8000da4 <setModulationParams>
						radioConfig(tx_buffer, tx_buffer_len);
 8000f8a:	4b57      	ldr	r3, [pc, #348]	; (80010e8 <HAL_UART_RxCpltCallback+0x2a8>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	b2db      	uxtb	r3, r3
 8000f90:	4619      	mov	r1, r3
 8000f92:	4856      	ldr	r0, [pc, #344]	; (80010ec <HAL_UART_RxCpltCallback+0x2ac>)
 8000f94:	f7ff ff24 	bl	8000de0 <radioConfig>

						myDebug("\n########## TX Configuration: ##########\n");
 8000f98:	4856      	ldr	r0, [pc, #344]	; (80010f4 <HAL_UART_RxCpltCallback+0x2b4>)
 8000f9a:	f7ff fbd7 	bl	800074c <myDebug>

						myDebug("FREQUENCY MODS: DOWNLINK FREQ: %lu Hz\r\n",
 8000f9e:	4956      	ldr	r1, [pc, #344]	; (80010f8 <HAL_UART_RxCpltCallback+0x2b8>)
 8000fa0:	4856      	ldr	r0, [pc, #344]	; (80010fc <HAL_UART_RxCpltCallback+0x2bc>)
 8000fa2:	f7ff fbd3 	bl	800074c <myDebug>
						FREQ_437_MHZ);
						myDebug("Bit Rate: 	%d\n\r",
 8000fa6:	4b56      	ldr	r3, [pc, #344]	; (8001100 <HAL_UART_RxCpltCallback+0x2c0>)
 8000fa8:	685b      	ldr	r3, [r3, #4]
 8000faa:	4619      	mov	r1, r3
 8000fac:	4855      	ldr	r0, [pc, #340]	; (8001104 <HAL_UART_RxCpltCallback+0x2c4>)
 8000fae:	f7ff fbcd 	bl	800074c <myDebug>
								mod_params.Params.Gfsk.BitRate);
						myDebug("Frequency Deviation: 	%d\n\r",
 8000fb2:	4b53      	ldr	r3, [pc, #332]	; (8001100 <HAL_UART_RxCpltCallback+0x2c0>)
 8000fb4:	689b      	ldr	r3, [r3, #8]
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	4853      	ldr	r0, [pc, #332]	; (8001108 <HAL_UART_RxCpltCallback+0x2c8>)
 8000fba:	f7ff fbc7 	bl	800074c <myDebug>
								mod_params.Params.Gfsk.Fdev);
						myDebug("RECEVING BANDWIDTH: 	%d\n\r",
								mod_params.Params.Gfsk.Bandwidth);
 8000fbe:	4b50      	ldr	r3, [pc, #320]	; (8001100 <HAL_UART_RxCpltCallback+0x2c0>)
 8000fc0:	7b5b      	ldrb	r3, [r3, #13]
						myDebug("RECEVING BANDWIDTH: 	%d\n\r",
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	4851      	ldr	r0, [pc, #324]	; (800110c <HAL_UART_RxCpltCallback+0x2cc>)
 8000fc6:	f7ff fbc1 	bl	800074c <myDebug>
						myDebug("Packet Type 			%d\n\r", pkt_params.PacketType);
 8000fca:	4b51      	ldr	r3, [pc, #324]	; (8001110 <HAL_UART_RxCpltCallback+0x2d0>)
 8000fcc:	781b      	ldrb	r3, [r3, #0]
 8000fce:	4619      	mov	r1, r3
 8000fd0:	4850      	ldr	r0, [pc, #320]	; (8001114 <HAL_UART_RxCpltCallback+0x2d4>)
 8000fd2:	f7ff fbbb 	bl	800074c <myDebug>
						myDebug("PayloadLength 			%d\n\r",
								pkt_params.Params.Gfsk.PayloadLength);
 8000fd6:	4b4e      	ldr	r3, [pc, #312]	; (8001110 <HAL_UART_RxCpltCallback+0x2d0>)
 8000fd8:	7a1b      	ldrb	r3, [r3, #8]
						myDebug("PayloadLength 			%d\n\r",
 8000fda:	4619      	mov	r1, r3
 8000fdc:	484e      	ldr	r0, [pc, #312]	; (8001118 <HAL_UART_RxCpltCallback+0x2d8>)
 8000fde:	f7ff fbb5 	bl	800074c <myDebug>
						myDebug("PreambleLength 		%d\n\r",
								pkt_params.Params.Gfsk.PreambleLength);
 8000fe2:	4b4b      	ldr	r3, [pc, #300]	; (8001110 <HAL_UART_RxCpltCallback+0x2d0>)
 8000fe4:	885b      	ldrh	r3, [r3, #2]
						myDebug("PreambleLength 		%d\n\r",
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	484c      	ldr	r0, [pc, #304]	; (800111c <HAL_UART_RxCpltCallback+0x2dc>)
 8000fea:	f7ff fbaf 	bl	800074c <myDebug>
						myDebug("PreambleMinDetect		%d\n\r",
								pkt_params.Params.Gfsk.PreambleMinDetect);
 8000fee:	4b48      	ldr	r3, [pc, #288]	; (8001110 <HAL_UART_RxCpltCallback+0x2d0>)
 8000ff0:	791b      	ldrb	r3, [r3, #4]
						myDebug("PreambleMinDetect		%d\n\r",
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	484a      	ldr	r0, [pc, #296]	; (8001120 <HAL_UART_RxCpltCallback+0x2e0>)
 8000ff6:	f7ff fba9 	bl	800074c <myDebug>
						myDebug("HeaderType 			%d\n\r",
								pkt_params.Params.Gfsk.HeaderType);
 8000ffa:	4b45      	ldr	r3, [pc, #276]	; (8001110 <HAL_UART_RxCpltCallback+0x2d0>)
 8000ffc:	79db      	ldrb	r3, [r3, #7]
						myDebug("HeaderType 			%d\n\r",
 8000ffe:	4619      	mov	r1, r3
 8001000:	4848      	ldr	r0, [pc, #288]	; (8001124 <HAL_UART_RxCpltCallback+0x2e4>)
 8001002:	f7ff fba3 	bl	800074c <myDebug>
						myDebug("__________*******************__________\r\n");
 8001006:	4848      	ldr	r0, [pc, #288]	; (8001128 <HAL_UART_RxCpltCallback+0x2e8>)
 8001008:	f7ff fba0 	bl	800074c <myDebug>

						SUBGRF_SetRfFrequency(FREQ_437_MHZ);
 800100c:	483a      	ldr	r0, [pc, #232]	; (80010f8 <HAL_UART_RxCpltCallback+0x2b8>)
 800100e:	f009 fb9f 	bl	800a750 <SUBGRF_SetRfFrequency>
						SUBGRF_SetSwitch(RFO_LP, RFSWITCH_TX);
 8001012:	2101      	movs	r1, #1
 8001014:	2001      	movs	r0, #1
 8001016:	f009 ffe3 	bl	800afe0 <SUBGRF_SetSwitch>
						SUBGRF_SendPayload(tx_buffer, tx_buffer_len, 0);
 800101a:	4b33      	ldr	r3, [pc, #204]	; (80010e8 <HAL_UART_RxCpltCallback+0x2a8>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	b2db      	uxtb	r3, r3
 8001020:	2200      	movs	r2, #0
 8001022:	4619      	mov	r1, r3
 8001024:	4831      	ldr	r0, [pc, #196]	; (80010ec <HAL_UART_RxCpltCallback+0x2ac>)
 8001026:	f009 f855 	bl	800a0d4 <SUBGRF_SendPayload>
					if (OBC_UART_RX[0] == 0x53 && OBC_UART_RX[83] == 0x7E) {
 800102a:	e120      	b.n	800126e <HAL_UART_RxCpltCallback+0x42e>

					} else {
						myDebug(
 800102c:	483f      	ldr	r0, [pc, #252]	; (800112c <HAL_UART_RxCpltCallback+0x2ec>)
 800102e:	f7ff fb8d 	bl	800074c <myDebug>
								"*** Incorrect Digipeater Data received from OBC\n");
						if (HAL_UART_Transmit(&huart2, OBC_UART_RX, obc_plen,
 8001032:	4b3f      	ldr	r3, [pc, #252]	; (8001130 <HAL_UART_RxCpltCallback+0x2f0>)
 8001034:	781b      	ldrb	r3, [r3, #0]
 8001036:	b29a      	uxth	r2, r3
 8001038:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800103c:	491f      	ldr	r1, [pc, #124]	; (80010bc <HAL_UART_RxCpltCallback+0x27c>)
 800103e:	481b      	ldr	r0, [pc, #108]	; (80010ac <HAL_UART_RxCpltCallback+0x26c>)
 8001040:	f005 fb7d 	bl	800673e <HAL_UART_Transmit>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d00c      	beq.n	8001064 <HAL_UART_RxCpltCallback+0x224>
								2000) == HAL_OK
								|| HAL_UART_Transmit(&hlpuart1, OBC_UART_RX,
 800104a:	4b39      	ldr	r3, [pc, #228]	; (8001130 <HAL_UART_RxCpltCallback+0x2f0>)
 800104c:	781b      	ldrb	r3, [r3, #0]
 800104e:	b29a      	uxth	r2, r3
 8001050:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001054:	4919      	ldr	r1, [pc, #100]	; (80010bc <HAL_UART_RxCpltCallback+0x27c>)
 8001056:	4816      	ldr	r0, [pc, #88]	; (80010b0 <HAL_UART_RxCpltCallback+0x270>)
 8001058:	f005 fb71 	bl	800673e <HAL_UART_Transmit>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	f040 8105 	bne.w	800126e <HAL_UART_RxCpltCallback+0x42e>
										obc_plen, 2000) == HAL_OK) {
							myDebug(
 8001064:	2155      	movs	r1, #85	; 0x55
 8001066:	4833      	ldr	r0, [pc, #204]	; (8001134 <HAL_UART_RxCpltCallback+0x2f4>)
 8001068:	f7ff fb70 	bl	800074c <myDebug>
									"*** Incorrect Digipeater Data re-transmit to OBC, Length: %d bytes\r\n",
									sizeof(OBC_UART_RX));

							for (int i = 0; i < sizeof(OBC_UART_RX); i++) {
 800106c:	2300      	movs	r3, #0
 800106e:	617b      	str	r3, [r7, #20]
 8001070:	e00a      	b.n	8001088 <HAL_UART_RxCpltCallback+0x248>
								myDebug("%02x ", OBC_UART_RX[i]);
 8001072:	4a12      	ldr	r2, [pc, #72]	; (80010bc <HAL_UART_RxCpltCallback+0x27c>)
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	4413      	add	r3, r2
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	4619      	mov	r1, r3
 800107c:	482e      	ldr	r0, [pc, #184]	; (8001138 <HAL_UART_RxCpltCallback+0x2f8>)
 800107e:	f7ff fb65 	bl	800074c <myDebug>
							for (int i = 0; i < sizeof(OBC_UART_RX); i++) {
 8001082:	697b      	ldr	r3, [r7, #20]
 8001084:	3301      	adds	r3, #1
 8001086:	617b      	str	r3, [r7, #20]
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	2b54      	cmp	r3, #84	; 0x54
 800108c:	d9f1      	bls.n	8001072 <HAL_UART_RxCpltCallback+0x232>
							}

							myDebug("\r\n");
 800108e:	482b      	ldr	r0, [pc, #172]	; (800113c <HAL_UART_RxCpltCallback+0x2fc>)
 8001090:	f7ff fb5c 	bl	800074c <myDebug>

							memset(OBC_UART_RX, '\0', sizeof(OBC_UART_RX));
 8001094:	2255      	movs	r2, #85	; 0x55
 8001096:	2100      	movs	r1, #0
 8001098:	4808      	ldr	r0, [pc, #32]	; (80010bc <HAL_UART_RxCpltCallback+0x27c>)
 800109a:	f00a fd9f 	bl	800bbdc <memset>

							OBC_SUCCESS_DATA_RX_FLAG = 0;
 800109e:	4b0c      	ldr	r3, [pc, #48]	; (80010d0 <HAL_UART_RxCpltCallback+0x290>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	601a      	str	r2, [r3, #0]
							DIGIPEATER_FLAG = 0;
 80010a4:	4b0e      	ldr	r3, [pc, #56]	; (80010e0 <HAL_UART_RxCpltCallback+0x2a0>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	601a      	str	r2, [r3, #0]
					if (OBC_UART_RX[0] == 0x53 && OBC_UART_RX[83] == 0x7E) {
 80010aa:	e0e0      	b.n	800126e <HAL_UART_RxCpltCallback+0x42e>
 80010ac:	20000658 	.word	0x20000658
 80010b0:	20000530 	.word	0x20000530
 80010b4:	200005c4 	.word	0x200005c4
 80010b8:	200004a8 	.word	0x200004a8
 80010bc:	20000318 	.word	0x20000318
 80010c0:	200004bc 	.word	0x200004bc
 80010c4:	200004ac 	.word	0x200004ac
 80010c8:	20000004 	.word	0x20000004
 80010cc:	200004b8 	.word	0x200004b8
 80010d0:	20000370 	.word	0x20000370
 80010d4:	0800c524 	.word	0x0800c524
 80010d8:	20000316 	.word	0x20000316
 80010dc:	200004b0 	.word	0x200004b0
 80010e0:	200004b4 	.word	0x200004b4
 80010e4:	20000374 	.word	0x20000374
 80010e8:	200004a4 	.word	0x200004a4
 80010ec:	2000040c 	.word	0x2000040c
 80010f0:	0007a120 	.word	0x0007a120
 80010f4:	0800c554 	.word	0x0800c554
 80010f8:	1a11d018 	.word	0x1a11d018
 80010fc:	0800c580 	.word	0x0800c580
 8001100:	20000290 	.word	0x20000290
 8001104:	0800c5a8 	.word	0x0800c5a8
 8001108:	0800c5b8 	.word	0x0800c5b8
 800110c:	0800c5d4 	.word	0x0800c5d4
 8001110:	2000027c 	.word	0x2000027c
 8001114:	0800c5f0 	.word	0x0800c5f0
 8001118:	0800c604 	.word	0x0800c604
 800111c:	0800c61c 	.word	0x0800c61c
 8001120:	0800c634 	.word	0x0800c634
 8001124:	0800c64c 	.word	0x0800c64c
 8001128:	0800c660 	.word	0x0800c660
 800112c:	0800c68c 	.word	0x0800c68c
 8001130:	20000001 	.word	0x20000001
 8001134:	0800c6c0 	.word	0x0800c6c0
 8001138:	0800c708 	.word	0x0800c708
 800113c:	0800c710 	.word	0x0800c710
//					for (int i = 0; i < sizeof(OBC_UART_RX); i++) {
//						myDebug("%02x ", OBC_UART_RX[i]);
//					}
//					myDebug("\r\n");

					if (OBC_UART_RX[0] == 0x53 && OBC_UART_RX[(83)] == 0x7E) {
 8001140:	4b55      	ldr	r3, [pc, #340]	; (8001298 <HAL_UART_RxCpltCallback+0x458>)
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	2b53      	cmp	r3, #83	; 0x53
 8001146:	d11a      	bne.n	800117e <HAL_UART_RxCpltCallback+0x33e>
 8001148:	4b53      	ldr	r3, [pc, #332]	; (8001298 <HAL_UART_RxCpltCallback+0x458>)
 800114a:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800114e:	2b7e      	cmp	r3, #126	; 0x7e
 8001150:	d115      	bne.n	800117e <HAL_UART_RxCpltCallback+0x33e>
//						myDebug("--> Correct command received from OBC\n");
						obc_ilen = OBC_UART_RX[2];  //len of info
 8001152:	4b51      	ldr	r3, [pc, #324]	; (8001298 <HAL_UART_RxCpltCallback+0x458>)
 8001154:	789a      	ldrb	r2, [r3, #2]
 8001156:	4b51      	ldr	r3, [pc, #324]	; (800129c <HAL_UART_RxCpltCallback+0x45c>)
 8001158:	701a      	strb	r2, [r3, #0]
						PACKET_TYPE = OBC_UART_RX[1]; //packet_type
 800115a:	4b4f      	ldr	r3, [pc, #316]	; (8001298 <HAL_UART_RxCpltCallback+0x458>)
 800115c:	785a      	ldrb	r2, [r3, #1]
 800115e:	4b50      	ldr	r3, [pc, #320]	; (80012a0 <HAL_UART_RxCpltCallback+0x460>)
 8001160:	701a      	strb	r2, [r3, #0]

						if (PACKET_TYPE == 0xB1) {
 8001162:	4b4f      	ldr	r3, [pc, #316]	; (80012a0 <HAL_UART_RxCpltCallback+0x460>)
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	2bb1      	cmp	r3, #177	; 0xb1
 8001168:	d105      	bne.n	8001176 <HAL_UART_RxCpltCallback+0x336>
							BEACON_COUNT = 2;
 800116a:	4b4e      	ldr	r3, [pc, #312]	; (80012a4 <HAL_UART_RxCpltCallback+0x464>)
 800116c:	2202      	movs	r2, #2
 800116e:	601a      	str	r2, [r3, #0]
							COUNT_BEACON = 2;
 8001170:	4b4d      	ldr	r3, [pc, #308]	; (80012a8 <HAL_UART_RxCpltCallback+0x468>)
 8001172:	2202      	movs	r2, #2
 8001174:	601a      	str	r2, [r3, #0]
						}

						OBC_SUCCESS_DATA_RX_FLAG = 1;
 8001176:	4b4d      	ldr	r3, [pc, #308]	; (80012ac <HAL_UART_RxCpltCallback+0x46c>)
 8001178:	2201      	movs	r2, #1
 800117a:	601a      	str	r2, [r3, #0]
 800117c:	e078      	b.n	8001270 <HAL_UART_RxCpltCallback+0x430>
					} else {
						myDebug("*** Incorrect command received from OBC\n");
 800117e:	484c      	ldr	r0, [pc, #304]	; (80012b0 <HAL_UART_RxCpltCallback+0x470>)
 8001180:	f7ff fae4 	bl	800074c <myDebug>
						if (HAL_UART_Transmit(&huart2, OBC_UART_RX, obc_plen,
 8001184:	4b4b      	ldr	r3, [pc, #300]	; (80012b4 <HAL_UART_RxCpltCallback+0x474>)
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	b29a      	uxth	r2, r3
 800118a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800118e:	4942      	ldr	r1, [pc, #264]	; (8001298 <HAL_UART_RxCpltCallback+0x458>)
 8001190:	4849      	ldr	r0, [pc, #292]	; (80012b8 <HAL_UART_RxCpltCallback+0x478>)
 8001192:	f005 fad4 	bl	800673e <HAL_UART_Transmit>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d00b      	beq.n	80011b4 <HAL_UART_RxCpltCallback+0x374>
								2000) == HAL_OK
								|| HAL_UART_Transmit(&hlpuart1, OBC_UART_RX,
 800119c:	4b45      	ldr	r3, [pc, #276]	; (80012b4 <HAL_UART_RxCpltCallback+0x474>)
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	b29a      	uxth	r2, r3
 80011a2:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80011a6:	493c      	ldr	r1, [pc, #240]	; (8001298 <HAL_UART_RxCpltCallback+0x458>)
 80011a8:	4844      	ldr	r0, [pc, #272]	; (80012bc <HAL_UART_RxCpltCallback+0x47c>)
 80011aa:	f005 fac8 	bl	800673e <HAL_UART_Transmit>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d15d      	bne.n	8001270 <HAL_UART_RxCpltCallback+0x430>
										obc_plen, 2000) == HAL_OK) {
							myDebug(
 80011b4:	2155      	movs	r1, #85	; 0x55
 80011b6:	4842      	ldr	r0, [pc, #264]	; (80012c0 <HAL_UART_RxCpltCallback+0x480>)
 80011b8:	f7ff fac8 	bl	800074c <myDebug>
									"*** Incorrect command re-transmit to OBC, Length: %d bytes\r\n",
									sizeof(OBC_UART_RX));

							for (int i = 0; i < sizeof(OBC_UART_RX); i++) {
 80011bc:	2300      	movs	r3, #0
 80011be:	613b      	str	r3, [r7, #16]
 80011c0:	e00a      	b.n	80011d8 <HAL_UART_RxCpltCallback+0x398>
								myDebug("%02x ", OBC_UART_RX[i]);
 80011c2:	4a35      	ldr	r2, [pc, #212]	; (8001298 <HAL_UART_RxCpltCallback+0x458>)
 80011c4:	693b      	ldr	r3, [r7, #16]
 80011c6:	4413      	add	r3, r2
 80011c8:	781b      	ldrb	r3, [r3, #0]
 80011ca:	4619      	mov	r1, r3
 80011cc:	483d      	ldr	r0, [pc, #244]	; (80012c4 <HAL_UART_RxCpltCallback+0x484>)
 80011ce:	f7ff fabd 	bl	800074c <myDebug>
							for (int i = 0; i < sizeof(OBC_UART_RX); i++) {
 80011d2:	693b      	ldr	r3, [r7, #16]
 80011d4:	3301      	adds	r3, #1
 80011d6:	613b      	str	r3, [r7, #16]
 80011d8:	693b      	ldr	r3, [r7, #16]
 80011da:	2b54      	cmp	r3, #84	; 0x54
 80011dc:	d9f1      	bls.n	80011c2 <HAL_UART_RxCpltCallback+0x382>
							}

							myDebug("\r\n");
 80011de:	483a      	ldr	r0, [pc, #232]	; (80012c8 <HAL_UART_RxCpltCallback+0x488>)
 80011e0:	f7ff fab4 	bl	800074c <myDebug>

							memset(OBC_UART_RX, '\0', sizeof(OBC_UART_RX));
 80011e4:	2255      	movs	r2, #85	; 0x55
 80011e6:	2100      	movs	r1, #0
 80011e8:	482b      	ldr	r0, [pc, #172]	; (8001298 <HAL_UART_RxCpltCallback+0x458>)
 80011ea:	f00a fcf7 	bl	800bbdc <memset>

							OBC_SUCCESS_DATA_RX_FLAG = 0;
 80011ee:	4b2f      	ldr	r3, [pc, #188]	; (80012ac <HAL_UART_RxCpltCallback+0x46c>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	601a      	str	r2, [r3, #0]
 80011f4:	e03c      	b.n	8001270 <HAL_UART_RxCpltCallback+0x430>
						}
					}
				}
			} else {
				myDebug("*** Incorrect packet type received from OBC\n");
 80011f6:	4835      	ldr	r0, [pc, #212]	; (80012cc <HAL_UART_RxCpltCallback+0x48c>)
 80011f8:	f7ff faa8 	bl	800074c <myDebug>

				if (HAL_UART_Transmit(&huart2, OBC_UART_RX, obc_plen, 1000)
 80011fc:	4b2d      	ldr	r3, [pc, #180]	; (80012b4 <HAL_UART_RxCpltCallback+0x474>)
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	b29a      	uxth	r2, r3
 8001202:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001206:	4924      	ldr	r1, [pc, #144]	; (8001298 <HAL_UART_RxCpltCallback+0x458>)
 8001208:	482b      	ldr	r0, [pc, #172]	; (80012b8 <HAL_UART_RxCpltCallback+0x478>)
 800120a:	f005 fa98 	bl	800673e <HAL_UART_Transmit>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d00b      	beq.n	800122c <HAL_UART_RxCpltCallback+0x3ec>
						== HAL_OK
						|| HAL_UART_Transmit(&hlpuart1, OBC_UART_RX, obc_plen,
 8001214:	4b27      	ldr	r3, [pc, #156]	; (80012b4 <HAL_UART_RxCpltCallback+0x474>)
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	b29a      	uxth	r2, r3
 800121a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800121e:	491e      	ldr	r1, [pc, #120]	; (8001298 <HAL_UART_RxCpltCallback+0x458>)
 8001220:	4826      	ldr	r0, [pc, #152]	; (80012bc <HAL_UART_RxCpltCallback+0x47c>)
 8001222:	f005 fa8c 	bl	800673e <HAL_UART_Transmit>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d121      	bne.n	8001270 <HAL_UART_RxCpltCallback+0x430>
								1000) == HAL_OK) {
					myDebug(
 800122c:	2155      	movs	r1, #85	; 0x55
 800122e:	4828      	ldr	r0, [pc, #160]	; (80012d0 <HAL_UART_RxCpltCallback+0x490>)
 8001230:	f7ff fa8c 	bl	800074c <myDebug>
							"*** Incorrect command re-transmit to OBC, Length: %d\r\n",
							sizeof(OBC_UART_RX));

					for (int i = 0; i < sizeof(OBC_UART_RX); i++) {
 8001234:	2300      	movs	r3, #0
 8001236:	60fb      	str	r3, [r7, #12]
 8001238:	e00a      	b.n	8001250 <HAL_UART_RxCpltCallback+0x410>
						myDebug("%02x ", OBC_UART_RX[i]);
 800123a:	4a17      	ldr	r2, [pc, #92]	; (8001298 <HAL_UART_RxCpltCallback+0x458>)
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	4413      	add	r3, r2
 8001240:	781b      	ldrb	r3, [r3, #0]
 8001242:	4619      	mov	r1, r3
 8001244:	481f      	ldr	r0, [pc, #124]	; (80012c4 <HAL_UART_RxCpltCallback+0x484>)
 8001246:	f7ff fa81 	bl	800074c <myDebug>
					for (int i = 0; i < sizeof(OBC_UART_RX); i++) {
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	3301      	adds	r3, #1
 800124e:	60fb      	str	r3, [r7, #12]
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	2b54      	cmp	r3, #84	; 0x54
 8001254:	d9f1      	bls.n	800123a <HAL_UART_RxCpltCallback+0x3fa>
					}

					myDebug("\r\n");
 8001256:	481c      	ldr	r0, [pc, #112]	; (80012c8 <HAL_UART_RxCpltCallback+0x488>)
 8001258:	f7ff fa78 	bl	800074c <myDebug>

					memset(OBC_UART_RX, '\0', sizeof(OBC_UART_RX));
 800125c:	2255      	movs	r2, #85	; 0x55
 800125e:	2100      	movs	r1, #0
 8001260:	480d      	ldr	r0, [pc, #52]	; (8001298 <HAL_UART_RxCpltCallback+0x458>)
 8001262:	f00a fcbb 	bl	800bbdc <memset>

					OBC_SUCCESS_DATA_RX_FLAG = 0;
 8001266:	4b11      	ldr	r3, [pc, #68]	; (80012ac <HAL_UART_RxCpltCallback+0x46c>)
 8001268:	2200      	movs	r2, #0
 800126a:	601a      	str	r2, [r3, #0]
 800126c:	e000      	b.n	8001270 <HAL_UART_RxCpltCallback+0x430>
					if (OBC_UART_RX[0] == 0x53 && OBC_UART_RX[83] == 0x7E) {
 800126e:	bf00      	nop
				}
			}

			HAL_UART_Receive_DMA(&huart2, OBC_UART_RX, obc_plen);
 8001270:	4b10      	ldr	r3, [pc, #64]	; (80012b4 <HAL_UART_RxCpltCallback+0x474>)
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	b29b      	uxth	r3, r3
 8001276:	461a      	mov	r2, r3
 8001278:	4907      	ldr	r1, [pc, #28]	; (8001298 <HAL_UART_RxCpltCallback+0x458>)
 800127a:	480f      	ldr	r0, [pc, #60]	; (80012b8 <HAL_UART_RxCpltCallback+0x478>)
 800127c:	f005 fbaa 	bl	80069d4 <HAL_UART_Receive_DMA>

			HAL_UART_Receive_DMA(&hlpuart1, OBC_UART_RX, obc_plen);
 8001280:	4b0c      	ldr	r3, [pc, #48]	; (80012b4 <HAL_UART_RxCpltCallback+0x474>)
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	b29b      	uxth	r3, r3
 8001286:	461a      	mov	r2, r3
 8001288:	4903      	ldr	r1, [pc, #12]	; (8001298 <HAL_UART_RxCpltCallback+0x458>)
 800128a:	480c      	ldr	r0, [pc, #48]	; (80012bc <HAL_UART_RxCpltCallback+0x47c>)
 800128c:	f005 fba2 	bl	80069d4 <HAL_UART_Receive_DMA>
		}
	}
}
 8001290:	bf00      	nop
 8001292:	3720      	adds	r7, #32
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	20000318 	.word	0x20000318
 800129c:	20000316 	.word	0x20000316
 80012a0:	200004b0 	.word	0x200004b0
 80012a4:	20000004 	.word	0x20000004
 80012a8:	20000008 	.word	0x20000008
 80012ac:	20000370 	.word	0x20000370
 80012b0:	0800c714 	.word	0x0800c714
 80012b4:	20000001 	.word	0x20000001
 80012b8:	20000658 	.word	0x20000658
 80012bc:	20000530 	.word	0x20000530
 80012c0:	0800c740 	.word	0x0800c740
 80012c4:	0800c708 	.word	0x0800c708
 80012c8:	0800c710 	.word	0x0800c710
 80012cc:	0800c780 	.word	0x0800c780
 80012d0:	0800c7b0 	.word	0x0800c7b0

080012d4 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80012d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80012d8:	b0b3      	sub	sp, #204	; 0xcc
 80012da:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80012dc:	f002 f8a6 	bl	800342c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80012e0:	f000 ff30 	bl	8002144 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80012e4:	f7ff fca4 	bl	8000c30 <MX_GPIO_Init>
	MX_DMA_Init();
 80012e8:	f7ff fa82 	bl	80007f0 <MX_DMA_Init>
	MX_USART2_UART_Init();
 80012ec:	f001 fe22 	bl	8002f34 <MX_USART2_UART_Init>
	MX_LPUART1_UART_Init();
 80012f0:	f001 fd88 	bl	8002e04 <MX_LPUART1_UART_Init>
	MX_USART1_UART_Init();
 80012f4:	f001 fdd2 	bl	8002e9c <MX_USART1_UART_Init>
	MX_SubGHz_Phy_Init();
 80012f8:	f00a f8b1 	bl	800b45e <MX_SubGHz_Phy_Init>
	MX_TIM2_Init();
 80012fc:	f001 fc4c 	bl	8002b98 <MX_TIM2_Init>
	/* USER CODE BEGIN 2 */

	HAL_TIM_Base_Start(&htim2);
 8001300:	489d      	ldr	r0, [pc, #628]	; (8001578 <main+0x2a4>)
 8001302:	f004 ff45 	bl	8006190 <HAL_TIM_Base_Start>

	myDebug("########## Slippers2Sat SATELLITE COM: BEGIN ##########\r\n");
 8001306:	489d      	ldr	r0, [pc, #628]	; (800157c <main+0x2a8>)
 8001308:	f7ff fa20 	bl	800074c <myDebug>
	myDebug("########## COMMUNICATION PARAMETERS ##########\r\n");
 800130c:	489c      	ldr	r0, [pc, #624]	; (8001580 <main+0x2ac>)
 800130e:	f7ff fa1d 	bl	800074c <myDebug>
	myDebug("Modulation: GFSK PACKET\r\n");
 8001312:	489c      	ldr	r0, [pc, #624]	; (8001584 <main+0x2b0>)
 8001314:	f7ff fa1a 	bl	800074c <myDebug>
	myDebug("FREQUENCY MODES: DOWNLINK FREQ: %luHz and UPLINK FREQ: %lu Hz\r\n",
 8001318:	4a9b      	ldr	r2, [pc, #620]	; (8001588 <main+0x2b4>)
 800131a:	499c      	ldr	r1, [pc, #624]	; (800158c <main+0x2b8>)
 800131c:	489c      	ldr	r0, [pc, #624]	; (8001590 <main+0x2bc>)
 800131e:	f7ff fa15 	bl	800074c <myDebug>
	FREQ_437_MHZ, FREQ_435_MHZ);
	myDebug("STM32 BSP_SubGHz-WL Radio: Low Power\n");
 8001322:	489c      	ldr	r0, [pc, #624]	; (8001594 <main+0x2c0>)
 8001324:	f7ff fa12 	bl	800074c <myDebug>
	myDebug(
 8001328:	230e      	movs	r3, #14
 800132a:	9300      	str	r3, [sp, #0]
 800132c:	2301      	movs	r3, #1
 800132e:	2200      	movs	r2, #0
 8001330:	2107      	movs	r1, #7
 8001332:	4899      	ldr	r0, [pc, #612]	; (8001598 <main+0x2c4>)
 8001334:	f7ff fa0a 	bl	800074c <myDebug>
			"POWER CONFIG:::- \n"
					"\t PA_DUTY_CYCLE: %x, HP_MAX: %x, PA_SEL: %x, POWER TX: %u dBm\r\n",
			PA_DUTY_CYCLE, HP_MAX, PA_SEL, POWER);

	myDebug("\n########## Wait for Handshake ##########\r\n");
 8001338:	4898      	ldr	r0, [pc, #608]	; (800159c <main+0x2c8>)
 800133a:	f7ff fa07 	bl	800074c <myDebug>

	while (OBC_HANDSHAKE_FLAG == 0) {
 800133e:	e001      	b.n	8001344 <main+0x70>
		WAIT_FOR_HANDSHAKE();
 8001340:	f001 f9ea 	bl	8002718 <WAIT_FOR_HANDSHAKE>
	while (OBC_HANDSHAKE_FLAG == 0) {
 8001344:	4b96      	ldr	r3, [pc, #600]	; (80015a0 <main+0x2cc>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d0f9      	beq.n	8001340 <main+0x6c>
	}

	SUBGRF_Init(DioIrqHndlr);
 800134c:	4895      	ldr	r0, [pc, #596]	; (80015a4 <main+0x2d0>)
 800134e:	f008 fe3d 	bl	8009fcc <SUBGRF_Init>

	SUBGRF_SetDioIrqParams(
 8001352:	2300      	movs	r3, #0
 8001354:	2200      	movs	r2, #0
 8001356:	f240 210f 	movw	r1, #527	; 0x20f
 800135a:	f240 200f 	movw	r0, #527	; 0x20f
 800135e:	f009 f99b 	bl	800a698 <SUBGRF_SetDioIrqParams>
					| IRQ_RX_TX_TIMEOUT | IRQ_SYNCWORD_VALID,
			IRQ_TX_DONE | IRQ_PREAMBLE_DETECTED | IRQ_RX_DONE
					| IRQ_RX_TX_TIMEOUT | IRQ_SYNCWORD_VALID, IRQ_RADIO_NONE,
			IRQ_RADIO_NONE);

	setPacketParams(rx_buffer_len);
 8001362:	4b91      	ldr	r3, [pc, #580]	; (80015a8 <main+0x2d4>)
 8001364:	781b      	ldrb	r3, [r3, #0]
 8001366:	4618      	mov	r0, r3
 8001368:	f7ff fcf2 	bl	8000d50 <setPacketParams>
	setModulationParams(GFSK_BR_1200, GFSK_FDEV_1200);
 800136c:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8001370:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8001374:	f7ff fd16 	bl	8000da4 <setModulationParams>
	radioConfig(rx_buffer, rx_buffer_len);
 8001378:	4b8b      	ldr	r3, [pc, #556]	; (80015a8 <main+0x2d4>)
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	4619      	mov	r1, r3
 800137e:	488b      	ldr	r0, [pc, #556]	; (80015ac <main+0x2d8>)
 8001380:	f7ff fd2e 	bl	8000de0 <radioConfig>

	myDebug(
 8001384:	488a      	ldr	r0, [pc, #552]	; (80015b0 <main+0x2dc>)
 8001386:	f7ff f9e1 	bl	800074c <myDebug>
			"\n########## Operation Starts, Perform any one operation: ##########\r\n");
	myDebug("1. Transmit from Satellite\r\n");
 800138a:	488a      	ldr	r0, [pc, #552]	; (80015b4 <main+0x2e0>)
 800138c:	f7ff f9de 	bl	800074c <myDebug>
	myDebug("2. Wait to receive GS Command\r\n");
 8001390:	4889      	ldr	r0, [pc, #548]	; (80015b8 <main+0x2e4>)
 8001392:	f7ff f9db 	bl	800074c <myDebug>

	myDebug("\n########## RX Configuration: ##########\n");
 8001396:	4889      	ldr	r0, [pc, #548]	; (80015bc <main+0x2e8>)
 8001398:	f7ff f9d8 	bl	800074c <myDebug>

	myDebug("FREQUENCY MODS: UPLINK FREQ: %lu Hz\r\n", FREQ_435_MHZ);
 800139c:	497a      	ldr	r1, [pc, #488]	; (8001588 <main+0x2b4>)
 800139e:	4888      	ldr	r0, [pc, #544]	; (80015c0 <main+0x2ec>)
 80013a0:	f7ff f9d4 	bl	800074c <myDebug>
	myDebug("Bit Rate: 	%d\n\r", mod_params.Params.Gfsk.BitRate);
 80013a4:	4b87      	ldr	r3, [pc, #540]	; (80015c4 <main+0x2f0>)
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	4619      	mov	r1, r3
 80013aa:	4887      	ldr	r0, [pc, #540]	; (80015c8 <main+0x2f4>)
 80013ac:	f7ff f9ce 	bl	800074c <myDebug>
	myDebug("Frequency Deviation: 	%d\n\r", mod_params.Params.Gfsk.Fdev);
 80013b0:	4b84      	ldr	r3, [pc, #528]	; (80015c4 <main+0x2f0>)
 80013b2:	689b      	ldr	r3, [r3, #8]
 80013b4:	4619      	mov	r1, r3
 80013b6:	4885      	ldr	r0, [pc, #532]	; (80015cc <main+0x2f8>)
 80013b8:	f7ff f9c8 	bl	800074c <myDebug>
	myDebug("RECEVING BANDWIDTH: 	%d\n\r", mod_params.Params.Gfsk.Bandwidth);
 80013bc:	4b81      	ldr	r3, [pc, #516]	; (80015c4 <main+0x2f0>)
 80013be:	7b5b      	ldrb	r3, [r3, #13]
 80013c0:	4619      	mov	r1, r3
 80013c2:	4883      	ldr	r0, [pc, #524]	; (80015d0 <main+0x2fc>)
 80013c4:	f7ff f9c2 	bl	800074c <myDebug>
	myDebug("Packet Type 			%d\n\r", pkt_params.PacketType);
 80013c8:	4b82      	ldr	r3, [pc, #520]	; (80015d4 <main+0x300>)
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	4619      	mov	r1, r3
 80013ce:	4882      	ldr	r0, [pc, #520]	; (80015d8 <main+0x304>)
 80013d0:	f7ff f9bc 	bl	800074c <myDebug>
	myDebug("PayloadLength 			%d\n\r", pkt_params.Params.Gfsk.PayloadLength);
 80013d4:	4b7f      	ldr	r3, [pc, #508]	; (80015d4 <main+0x300>)
 80013d6:	7a1b      	ldrb	r3, [r3, #8]
 80013d8:	4619      	mov	r1, r3
 80013da:	4880      	ldr	r0, [pc, #512]	; (80015dc <main+0x308>)
 80013dc:	f7ff f9b6 	bl	800074c <myDebug>
	myDebug("PreambleLength 		%d\n\r", pkt_params.Params.Gfsk.PreambleLength);
 80013e0:	4b7c      	ldr	r3, [pc, #496]	; (80015d4 <main+0x300>)
 80013e2:	885b      	ldrh	r3, [r3, #2]
 80013e4:	4619      	mov	r1, r3
 80013e6:	487e      	ldr	r0, [pc, #504]	; (80015e0 <main+0x30c>)
 80013e8:	f7ff f9b0 	bl	800074c <myDebug>
	myDebug("PreambleMinDetect		%d\n\r",
			pkt_params.Params.Gfsk.PreambleMinDetect);
 80013ec:	4b79      	ldr	r3, [pc, #484]	; (80015d4 <main+0x300>)
 80013ee:	791b      	ldrb	r3, [r3, #4]
	myDebug("PreambleMinDetect		%d\n\r",
 80013f0:	4619      	mov	r1, r3
 80013f2:	487c      	ldr	r0, [pc, #496]	; (80015e4 <main+0x310>)
 80013f4:	f7ff f9aa 	bl	800074c <myDebug>
	myDebug("HeaderType 			%d\n\r", pkt_params.Params.Gfsk.HeaderType);
 80013f8:	4b76      	ldr	r3, [pc, #472]	; (80015d4 <main+0x300>)
 80013fa:	79db      	ldrb	r3, [r3, #7]
 80013fc:	4619      	mov	r1, r3
 80013fe:	487a      	ldr	r0, [pc, #488]	; (80015e8 <main+0x314>)
 8001400:	f7ff f9a4 	bl	800074c <myDebug>
	myDebug("__________*******************__________\r\n");
 8001404:	4879      	ldr	r0, [pc, #484]	; (80015ec <main+0x318>)
 8001406:	f7ff f9a1 	bl	800074c <myDebug>

	SUBGRF_SetRfFrequency(FREQ_435_MHZ);
 800140a:	485f      	ldr	r0, [pc, #380]	; (8001588 <main+0x2b4>)
 800140c:	f009 f9a0 	bl	800a750 <SUBGRF_SetRfFrequency>
	SUBGRF_SetSwitch(RFO_LP, RFSWITCH_RX); /*Set RF switch*/
 8001410:	2100      	movs	r1, #0
 8001412:	2001      	movs	r0, #1
 8001414:	f009 fde4 	bl	800afe0 <SUBGRF_SetSwitch>
	SUBGRF_SetRxBoosted(0xFFFFFF);
 8001418:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800141c:	f008 ffc4 	bl	800a3a8 <SUBGRF_SetRxBoosted>

	HAL_UART_Receive_DMA(&huart2, OBC_UART_RX, obc_plen);
 8001420:	4b73      	ldr	r3, [pc, #460]	; (80015f0 <main+0x31c>)
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	b29b      	uxth	r3, r3
 8001426:	461a      	mov	r2, r3
 8001428:	4972      	ldr	r1, [pc, #456]	; (80015f4 <main+0x320>)
 800142a:	4873      	ldr	r0, [pc, #460]	; (80015f8 <main+0x324>)
 800142c:	f005 fad2 	bl	80069d4 <HAL_UART_Receive_DMA>

	HAL_UART_Receive_DMA(&hlpuart1, OBC_UART_RX, obc_plen);
 8001430:	4b6f      	ldr	r3, [pc, #444]	; (80015f0 <main+0x31c>)
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	b29b      	uxth	r3, r3
 8001436:	461a      	mov	r2, r3
 8001438:	496e      	ldr	r1, [pc, #440]	; (80015f4 <main+0x320>)
 800143a:	4870      	ldr	r0, [pc, #448]	; (80015fc <main+0x328>)
 800143c:	f005 faca 	bl	80069d4 <HAL_UART_Receive_DMA>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */
		MX_SubGHz_Phy_Process();
 8001440:	f00a f815 	bl	800b46e <MX_SubGHz_Phy_Process>

		/* USER CODE BEGIN 3 */

		delay_us(500000);
 8001444:	486e      	ldr	r0, [pc, #440]	; (8001600 <main+0x32c>)
 8001446:	f7ff f967 	bl	8000718 <delay_us>

		if (OBC_SUCCESS_DATA_RX_FLAG) {
 800144a:	4b6e      	ldr	r3, [pc, #440]	; (8001604 <main+0x330>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	2b00      	cmp	r3, #0
 8001450:	f000 80e6 	beq.w	8001620 <main+0x34c>

			getAX25Packet(OBC_UART_RX, obc_ilen);
 8001454:	4b6c      	ldr	r3, [pc, #432]	; (8001608 <main+0x334>)
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	4619      	mov	r1, r3
 800145a:	4866      	ldr	r0, [pc, #408]	; (80015f4 <main+0x320>)
 800145c:	f7ff f8ea 	bl	8000634 <getAX25Packet>

			tx_buffer_len = countsDataBetweenFlags(temp_tx_buffer,
 8001460:	2196      	movs	r1, #150	; 0x96
 8001462:	486a      	ldr	r0, [pc, #424]	; (800160c <main+0x338>)
 8001464:	f7ff fc3e 	bl	8000ce4 <countsDataBetweenFlags>
 8001468:	4603      	mov	r3, r0
 800146a:	4a69      	ldr	r2, [pc, #420]	; (8001610 <main+0x33c>)
 800146c:	6013      	str	r3, [r2, #0]
					sizeof(temp_tx_buffer));

//			myDebug("AX.25 complete GS packet ready to TX: 0x%x\r\n",ntemp_tx_buffer);
			for (int j = 0; j < tx_buffer_len; j++) {
 800146e:	2300      	movs	r3, #0
 8001470:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8001474:	e00f      	b.n	8001496 <main+0x1c2>
				tx_buffer[j] = temp_tx_buffer[j];
 8001476:	4a65      	ldr	r2, [pc, #404]	; (800160c <main+0x338>)
 8001478:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800147c:	4413      	add	r3, r2
 800147e:	7819      	ldrb	r1, [r3, #0]
 8001480:	4a64      	ldr	r2, [pc, #400]	; (8001614 <main+0x340>)
 8001482:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001486:	4413      	add	r3, r2
 8001488:	460a      	mov	r2, r1
 800148a:	701a      	strb	r2, [r3, #0]
			for (int j = 0; j < tx_buffer_len; j++) {
 800148c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001490:	3301      	adds	r3, #1
 8001492:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8001496:	4b5e      	ldr	r3, [pc, #376]	; (8001610 <main+0x33c>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800149e:	429a      	cmp	r2, r3
 80014a0:	dbe9      	blt.n	8001476 <main+0x1a2>
//				myDebug("%02x ", tx_buffer[j]);
			}
//			myDebug("\r\n");
//			myDebug("size of tx_buffer = %d\r\n", tx_buffer_len);

			memset(OBC_UART_RX, '\0', obc_ilen);
 80014a2:	4b59      	ldr	r3, [pc, #356]	; (8001608 <main+0x334>)
 80014a4:	781b      	ldrb	r3, [r3, #0]
 80014a6:	461a      	mov	r2, r3
 80014a8:	2100      	movs	r1, #0
 80014aa:	4852      	ldr	r0, [pc, #328]	; (80015f4 <main+0x320>)
 80014ac:	f00a fb96 	bl	800bbdc <memset>
			memset(temp_tx_buffer, '\0', sizeof(temp_tx_buffer));
 80014b0:	2296      	movs	r2, #150	; 0x96
 80014b2:	2100      	movs	r1, #0
 80014b4:	4855      	ldr	r0, [pc, #340]	; (800160c <main+0x338>)
 80014b6:	f00a fb91 	bl	800bbdc <memset>

			setPacketParams(tx_buffer_len);
 80014ba:	4b55      	ldr	r3, [pc, #340]	; (8001610 <main+0x33c>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	b2db      	uxtb	r3, r3
 80014c0:	4618      	mov	r0, r3
 80014c2:	f7ff fc45 	bl	8000d50 <setPacketParams>
			setModulationParams(GFSK_BR_4800, GFSK_FDEV_4800);
 80014c6:	f642 61e0 	movw	r1, #12000	; 0x2ee0
 80014ca:	f44f 5096 	mov.w	r0, #4800	; 0x12c0
 80014ce:	f7ff fc69 	bl	8000da4 <setModulationParams>
			radioConfig(tx_buffer, tx_buffer_len);
 80014d2:	4b4f      	ldr	r3, [pc, #316]	; (8001610 <main+0x33c>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	b2db      	uxtb	r3, r3
 80014d8:	4619      	mov	r1, r3
 80014da:	484e      	ldr	r0, [pc, #312]	; (8001614 <main+0x340>)
 80014dc:	f7ff fc80 	bl	8000de0 <radioConfig>

			myDebug("\n########## TX Configuration: ##########\n");
 80014e0:	484d      	ldr	r0, [pc, #308]	; (8001618 <main+0x344>)
 80014e2:	f7ff f933 	bl	800074c <myDebug>

			myDebug("FREQUENCY MODS: DOWNLINK FREQ: %lu Hz\r\n", FREQ_437_MHZ);
 80014e6:	4929      	ldr	r1, [pc, #164]	; (800158c <main+0x2b8>)
 80014e8:	484c      	ldr	r0, [pc, #304]	; (800161c <main+0x348>)
 80014ea:	f7ff f92f 	bl	800074c <myDebug>
			myDebug("Bit Rate: 	%d\n\r", mod_params.Params.Gfsk.BitRate);
 80014ee:	4b35      	ldr	r3, [pc, #212]	; (80015c4 <main+0x2f0>)
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	4619      	mov	r1, r3
 80014f4:	4834      	ldr	r0, [pc, #208]	; (80015c8 <main+0x2f4>)
 80014f6:	f7ff f929 	bl	800074c <myDebug>
			myDebug("Frequency Deviation: 	%d\n\r",
 80014fa:	4b32      	ldr	r3, [pc, #200]	; (80015c4 <main+0x2f0>)
 80014fc:	689b      	ldr	r3, [r3, #8]
 80014fe:	4619      	mov	r1, r3
 8001500:	4832      	ldr	r0, [pc, #200]	; (80015cc <main+0x2f8>)
 8001502:	f7ff f923 	bl	800074c <myDebug>
					mod_params.Params.Gfsk.Fdev);
			myDebug("RECEVING BANDWIDTH: 	%d\n\r",
					mod_params.Params.Gfsk.Bandwidth);
 8001506:	4b2f      	ldr	r3, [pc, #188]	; (80015c4 <main+0x2f0>)
 8001508:	7b5b      	ldrb	r3, [r3, #13]
			myDebug("RECEVING BANDWIDTH: 	%d\n\r",
 800150a:	4619      	mov	r1, r3
 800150c:	4830      	ldr	r0, [pc, #192]	; (80015d0 <main+0x2fc>)
 800150e:	f7ff f91d 	bl	800074c <myDebug>
			myDebug("Packet Type 			%d\n\r", pkt_params.PacketType);
 8001512:	4b30      	ldr	r3, [pc, #192]	; (80015d4 <main+0x300>)
 8001514:	781b      	ldrb	r3, [r3, #0]
 8001516:	4619      	mov	r1, r3
 8001518:	482f      	ldr	r0, [pc, #188]	; (80015d8 <main+0x304>)
 800151a:	f7ff f917 	bl	800074c <myDebug>
			myDebug("PayloadLength 			%d\n\r",
					pkt_params.Params.Gfsk.PayloadLength);
 800151e:	4b2d      	ldr	r3, [pc, #180]	; (80015d4 <main+0x300>)
 8001520:	7a1b      	ldrb	r3, [r3, #8]
			myDebug("PayloadLength 			%d\n\r",
 8001522:	4619      	mov	r1, r3
 8001524:	482d      	ldr	r0, [pc, #180]	; (80015dc <main+0x308>)
 8001526:	f7ff f911 	bl	800074c <myDebug>
			myDebug("PreambleLength 		%d\n\r",
					pkt_params.Params.Gfsk.PreambleLength);
 800152a:	4b2a      	ldr	r3, [pc, #168]	; (80015d4 <main+0x300>)
 800152c:	885b      	ldrh	r3, [r3, #2]
			myDebug("PreambleLength 		%d\n\r",
 800152e:	4619      	mov	r1, r3
 8001530:	482b      	ldr	r0, [pc, #172]	; (80015e0 <main+0x30c>)
 8001532:	f7ff f90b 	bl	800074c <myDebug>
			myDebug("PreambleMinDetect		%d\n\r",
					pkt_params.Params.Gfsk.PreambleMinDetect);
 8001536:	4b27      	ldr	r3, [pc, #156]	; (80015d4 <main+0x300>)
 8001538:	791b      	ldrb	r3, [r3, #4]
			myDebug("PreambleMinDetect		%d\n\r",
 800153a:	4619      	mov	r1, r3
 800153c:	4829      	ldr	r0, [pc, #164]	; (80015e4 <main+0x310>)
 800153e:	f7ff f905 	bl	800074c <myDebug>
			myDebug("HeaderType 			%d\n\r", pkt_params.Params.Gfsk.HeaderType);
 8001542:	4b24      	ldr	r3, [pc, #144]	; (80015d4 <main+0x300>)
 8001544:	79db      	ldrb	r3, [r3, #7]
 8001546:	4619      	mov	r1, r3
 8001548:	4827      	ldr	r0, [pc, #156]	; (80015e8 <main+0x314>)
 800154a:	f7ff f8ff 	bl	800074c <myDebug>
			myDebug("__________*******************__________\r\n");
 800154e:	4827      	ldr	r0, [pc, #156]	; (80015ec <main+0x318>)
 8001550:	f7ff f8fc 	bl	800074c <myDebug>

			SUBGRF_SetRfFrequency(FREQ_437_MHZ);
 8001554:	480d      	ldr	r0, [pc, #52]	; (800158c <main+0x2b8>)
 8001556:	f009 f8fb 	bl	800a750 <SUBGRF_SetRfFrequency>
			SUBGRF_SetSwitch(RFO_LP, RFSWITCH_TX);
 800155a:	2101      	movs	r1, #1
 800155c:	2001      	movs	r0, #1
 800155e:	f009 fd3f 	bl	800afe0 <SUBGRF_SetSwitch>
			SUBGRF_SendPayload(tx_buffer, tx_buffer_len, 0);
 8001562:	4b2b      	ldr	r3, [pc, #172]	; (8001610 <main+0x33c>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	b2db      	uxtb	r3, r3
 8001568:	2200      	movs	r2, #0
 800156a:	4619      	mov	r1, r3
 800156c:	4829      	ldr	r0, [pc, #164]	; (8001614 <main+0x340>)
 800156e:	f008 fdb1 	bl	800a0d4 <SUBGRF_SendPayload>
 8001572:	f000 bdb7 	b.w	80020e4 <main+0xe10>
 8001576:	bf00      	nop
 8001578:	200004e0 	.word	0x200004e0
 800157c:	0800c7e8 	.word	0x0800c7e8
 8001580:	0800c824 	.word	0x0800c824
 8001584:	0800c858 	.word	0x0800c858
 8001588:	19f25968 	.word	0x19f25968
 800158c:	1a11d018 	.word	0x1a11d018
 8001590:	0800c874 	.word	0x0800c874
 8001594:	0800c8b4 	.word	0x0800c8b4
 8001598:	0800c8dc 	.word	0x0800c8dc
 800159c:	0800c930 	.word	0x0800c930
 80015a0:	200004a8 	.word	0x200004a8
 80015a4:	08002205 	.word	0x08002205
 80015a8:	20000000 	.word	0x20000000
 80015ac:	200002ac 	.word	0x200002ac
 80015b0:	0800c95c 	.word	0x0800c95c
 80015b4:	0800c9a4 	.word	0x0800c9a4
 80015b8:	0800c9c4 	.word	0x0800c9c4
 80015bc:	0800c9e4 	.word	0x0800c9e4
 80015c0:	0800ca10 	.word	0x0800ca10
 80015c4:	20000290 	.word	0x20000290
 80015c8:	0800c5a8 	.word	0x0800c5a8
 80015cc:	0800c5b8 	.word	0x0800c5b8
 80015d0:	0800c5d4 	.word	0x0800c5d4
 80015d4:	2000027c 	.word	0x2000027c
 80015d8:	0800c5f0 	.word	0x0800c5f0
 80015dc:	0800c604 	.word	0x0800c604
 80015e0:	0800c61c 	.word	0x0800c61c
 80015e4:	0800c634 	.word	0x0800c634
 80015e8:	0800c64c 	.word	0x0800c64c
 80015ec:	0800c660 	.word	0x0800c660
 80015f0:	20000001 	.word	0x20000001
 80015f4:	20000318 	.word	0x20000318
 80015f8:	20000658 	.word	0x20000658
 80015fc:	20000530 	.word	0x20000530
 8001600:	0007a120 	.word	0x0007a120
 8001604:	20000370 	.word	0x20000370
 8001608:	20000316 	.word	0x20000316
 800160c:	20000374 	.word	0x20000374
 8001610:	200004a4 	.word	0x200004a4
 8001614:	2000040c 	.word	0x2000040c
 8001618:	0800c554 	.word	0x0800c554
 800161c:	0800c580 	.word	0x0800c580

		} else if (RX_FLAG == 1) {
 8001620:	4ba9      	ldr	r3, [pc, #676]	; (80018c8 <main+0x5f4>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	2b01      	cmp	r3, #1
 8001626:	f040 855d 	bne.w	80020e4 <main+0xe10>
 800162a:	466b      	mov	r3, sp
 800162c:	60bb      	str	r3, [r7, #8]
			RX_FLAG = 0;
 800162e:	4ba6      	ldr	r3, [pc, #664]	; (80018c8 <main+0x5f4>)
 8001630:	2200      	movs	r2, #0
 8001632:	601a      	str	r2, [r3, #0]

			uint8_t temp_rx_buffer_len = 0;
 8001634:	2300      	movs	r3, #0
 8001636:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			temp_rx_buffer_len = countsDataBetweenFlags(rx_buffer,
 800163a:	4ba4      	ldr	r3, [pc, #656]	; (80018cc <main+0x5f8>)
 800163c:	781b      	ldrb	r3, [r3, #0]
 800163e:	4619      	mov	r1, r3
 8001640:	48a3      	ldr	r0, [pc, #652]	; (80018d0 <main+0x5fc>)
 8001642:	f7ff fb4f 	bl	8000ce4 <countsDataBetweenFlags>
 8001646:	4603      	mov	r3, r0
 8001648:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
					rx_buffer_len); // 7e...7e, size

			uint8_t crc_buff_len = temp_rx_buffer_len - 4;
 800164c:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8001650:	3b04      	subs	r3, #4
 8001652:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
			uint8_t crc_buff[crc_buff_len];
 8001656:	f897 208e 	ldrb.w	r2, [r7, #142]	; 0x8e
 800165a:	4611      	mov	r1, r2
 800165c:	60f9      	str	r1, [r7, #12]
 800165e:	460b      	mov	r3, r1
 8001660:	3b01      	subs	r3, #1
 8001662:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001666:	b2cb      	uxtb	r3, r1
 8001668:	2200      	movs	r2, #0
 800166a:	4698      	mov	r8, r3
 800166c:	4691      	mov	r9, r2
 800166e:	f04f 0200 	mov.w	r2, #0
 8001672:	f04f 0300 	mov.w	r3, #0
 8001676:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800167a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800167e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001682:	b2cb      	uxtb	r3, r1
 8001684:	2200      	movs	r2, #0
 8001686:	469a      	mov	sl, r3
 8001688:	4693      	mov	fp, r2
 800168a:	f04f 0200 	mov.w	r2, #0
 800168e:	f04f 0300 	mov.w	r3, #0
 8001692:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001696:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800169a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800169e:	460b      	mov	r3, r1
 80016a0:	3307      	adds	r3, #7
 80016a2:	08db      	lsrs	r3, r3, #3
 80016a4:	00db      	lsls	r3, r3, #3
 80016a6:	ebad 0d03 	sub.w	sp, sp, r3
 80016aa:	ab02      	add	r3, sp, #8
 80016ac:	3300      	adds	r3, #0
 80016ae:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

			int j = 0;
 80016b2:	2300      	movs	r3, #0
 80016b4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			for (int i = 1; i <= crc_buff_len; i++) {
 80016b8:	2301      	movs	r3, #1
 80016ba:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80016be:	e015      	b.n	80016ec <main+0x418>
				crc_buff[j] = rx_buffer[i]; // index 1 to previous byte of crc
 80016c0:	4a83      	ldr	r2, [pc, #524]	; (80018d0 <main+0x5fc>)
 80016c2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80016c6:	4413      	add	r3, r2
 80016c8:	7819      	ldrb	r1, [r3, #0]
 80016ca:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80016ce:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80016d2:	4413      	add	r3, r2
 80016d4:	460a      	mov	r2, r1
 80016d6:	701a      	strb	r2, [r3, #0]
				//				myDebug("%02x ", crc_buff[j]);
				j++;
 80016d8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80016dc:	3301      	adds	r3, #1
 80016de:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			for (int i = 1; i <= crc_buff_len; i++) {
 80016e2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80016e6:	3301      	adds	r3, #1
 80016e8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80016ec:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 80016f0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80016f4:	429a      	cmp	r2, r3
 80016f6:	dde3      	ble.n	80016c0 <main+0x3ec>
			}

			memset(rx_buffer, '\0', sizeof(rx_buffer));
 80016f8:	2269      	movs	r2, #105	; 0x69
 80016fa:	2100      	movs	r1, #0
 80016fc:	4874      	ldr	r0, [pc, #464]	; (80018d0 <main+0x5fc>)
 80016fe:	f00a fa6d 	bl	800bbdc <memset>

			uint8_t gs_cmd_buff[100];
			int gs_cmd_len = bit_destuffing(crc_buff, gs_cmd_buff,
 8001702:	f897 208e 	ldrb.w	r2, [r7, #142]	; 0x8e
 8001706:	f107 0314 	add.w	r3, r7, #20
 800170a:	4619      	mov	r1, r3
 800170c:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8001710:	f7ff f9a3 	bl	8000a5a <bit_destuffing>
 8001714:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
					crc_buff_len);
			//gs_cmd_len--;

			uint8_t main_gs_cmd[gs_cmd_len];
 8001718:	f8d7 4080 	ldr.w	r4, [r7, #128]	; 0x80
 800171c:	1e63      	subs	r3, r4, #1
 800171e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001720:	4622      	mov	r2, r4
 8001722:	2300      	movs	r3, #0
 8001724:	4615      	mov	r5, r2
 8001726:	461e      	mov	r6, r3
 8001728:	f04f 0200 	mov.w	r2, #0
 800172c:	f04f 0300 	mov.w	r3, #0
 8001730:	00f3      	lsls	r3, r6, #3
 8001732:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8001736:	00ea      	lsls	r2, r5, #3
 8001738:	4622      	mov	r2, r4
 800173a:	2300      	movs	r3, #0
 800173c:	603a      	str	r2, [r7, #0]
 800173e:	607b      	str	r3, [r7, #4]
 8001740:	f04f 0200 	mov.w	r2, #0
 8001744:	f04f 0300 	mov.w	r3, #0
 8001748:	6879      	ldr	r1, [r7, #4]
 800174a:	00cb      	lsls	r3, r1, #3
 800174c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001750:	4684      	mov	ip, r0
 8001752:	ea43 735c 	orr.w	r3, r3, ip, lsr #29
 8001756:	4601      	mov	r1, r0
 8001758:	00ca      	lsls	r2, r1, #3
 800175a:	4623      	mov	r3, r4
 800175c:	3307      	adds	r3, #7
 800175e:	08db      	lsrs	r3, r3, #3
 8001760:	00db      	lsls	r3, r3, #3
 8001762:	ebad 0d03 	sub.w	sp, sp, r3
 8001766:	ab02      	add	r3, sp, #8
 8001768:	3300      	adds	r3, #0
 800176a:	67bb      	str	r3, [r7, #120]	; 0x78
			for (int i = 0; i < gs_cmd_len; i++) {
 800176c:	2300      	movs	r3, #0
 800176e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001772:	e010      	b.n	8001796 <main+0x4c2>
				main_gs_cmd[i] = gs_cmd_buff[i];
 8001774:	f107 0214 	add.w	r2, r7, #20
 8001778:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800177c:	4413      	add	r3, r2
 800177e:	7819      	ldrb	r1, [r3, #0]
 8001780:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001782:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001786:	4413      	add	r3, r2
 8001788:	460a      	mov	r2, r1
 800178a:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < gs_cmd_len; i++) {
 800178c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001790:	3301      	adds	r3, #1
 8001792:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001796:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800179a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800179e:	429a      	cmp	r2, r3
 80017a0:	dbe8      	blt.n	8001774 <main+0x4a0>
			}

			if (COUNT_BEACON == 1) { // first beacon tx
 80017a2:	4b4c      	ldr	r3, [pc, #304]	; (80018d4 <main+0x600>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	2b01      	cmp	r3, #1
 80017a8:	f040 813a 	bne.w	8001a20 <main+0x74c>

				if ((main_gs_cmd[18] == 0xDF && main_gs_cmd[19] == 0xAB
 80017ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80017ae:	7c9b      	ldrb	r3, [r3, #18]
 80017b0:	2bdf      	cmp	r3, #223	; 0xdf
 80017b2:	d107      	bne.n	80017c4 <main+0x4f0>
 80017b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80017b6:	7cdb      	ldrb	r3, [r3, #19]
 80017b8:	2bab      	cmp	r3, #171	; 0xab
 80017ba:	d103      	bne.n	80017c4 <main+0x4f0>
						&& main_gs_cmd[20] == 0xD1) // Enable Digipeater Mission
 80017bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80017be:	7d1b      	ldrb	r3, [r3, #20]
 80017c0:	2bd1      	cmp	r3, #209	; 0xd1
 80017c2:	d00b      	beq.n	80017dc <main+0x508>
						|| (main_gs_cmd[18] == 0x53 && main_gs_cmd[19] == 0x02
 80017c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80017c6:	7c9b      	ldrb	r3, [r3, #18]
 80017c8:	2b53      	cmp	r3, #83	; 0x53
 80017ca:	d12b      	bne.n	8001824 <main+0x550>
 80017cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80017ce:	7cdb      	ldrb	r3, [r3, #19]
 80017d0:	2b02      	cmp	r3, #2
 80017d2:	d127      	bne.n	8001824 <main+0x550>
								&& main_gs_cmd[20] == 0x53)) { // Digipeater Packet
 80017d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80017d6:	7d1b      	ldrb	r3, [r3, #20]
 80017d8:	2b53      	cmp	r3, #83	; 0x53
 80017da:	d123      	bne.n	8001824 <main+0x550>

					myDebug("\n********GS Command failed: 0x%x\r\n");
 80017dc:	483e      	ldr	r0, [pc, #248]	; (80018d8 <main+0x604>)
 80017de:	f7fe ffb5 	bl	800074c <myDebug>

					OBC_UART_RX[0] = 0x53;	//header
 80017e2:	4b3e      	ldr	r3, [pc, #248]	; (80018dc <main+0x608>)
 80017e4:	2253      	movs	r2, #83	; 0x53
 80017e6:	701a      	strb	r2, [r3, #0]
					OBC_UART_RX[1] = 0xac;	//packet_ type
 80017e8:	4b3c      	ldr	r3, [pc, #240]	; (80018dc <main+0x608>)
 80017ea:	22ac      	movs	r2, #172	; 0xac
 80017ec:	705a      	strb	r2, [r3, #1]
					OBC_UART_RX[2] = 0x04;	//length of info
 80017ee:	4b3b      	ldr	r3, [pc, #236]	; (80018dc <main+0x608>)
 80017f0:	2204      	movs	r2, #4
 80017f2:	709a      	strb	r2, [r3, #2]
					OBC_UART_RX[3] = 0x02;	//mcu_no
 80017f4:	4b39      	ldr	r3, [pc, #228]	; (80018dc <main+0x608>)
 80017f6:	2202      	movs	r2, #2
 80017f8:	70da      	strb	r2, [r3, #3]
					OBC_UART_RX[4] = 0xfc;	//false command
 80017fa:	4b38      	ldr	r3, [pc, #224]	; (80018dc <main+0x608>)
 80017fc:	22fc      	movs	r2, #252	; 0xfc
 80017fe:	711a      	strb	r2, [r3, #4]
					OBC_UART_RX[5] = 0xee;	//error prefix
 8001800:	4b36      	ldr	r3, [pc, #216]	; (80018dc <main+0x608>)
 8001802:	22ee      	movs	r2, #238	; 0xee
 8001804:	715a      	strb	r2, [r3, #5]
					obc_ilen = OBC_UART_RX[2];
 8001806:	4b35      	ldr	r3, [pc, #212]	; (80018dc <main+0x608>)
 8001808:	789a      	ldrb	r2, [r3, #2]
 800180a:	4b35      	ldr	r3, [pc, #212]	; (80018e0 <main+0x60c>)
 800180c:	701a      	strb	r2, [r3, #0]

					OBC_SUCCESS_DATA_RX_FLAG = 1;
 800180e:	4b35      	ldr	r3, [pc, #212]	; (80018e4 <main+0x610>)
 8001810:	2201      	movs	r2, #1
 8001812:	601a      	str	r2, [r3, #0]

					memset(main_gs_cmd, '\0', sizeof(main_gs_cmd));
 8001814:	4623      	mov	r3, r4
 8001816:	461a      	mov	r2, r3
 8001818:	2100      	movs	r1, #0
 800181a:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800181c:	f00a f9de 	bl	800bbdc <memset>
 8001820:	f000 bc5e 	b.w	80020e0 <main+0xe0c>

				} else if (main_gs_cmd[18] == 0xFD && main_gs_cmd[19] == 0xBA
 8001824:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001826:	7c9b      	ldrb	r3, [r3, #18]
 8001828:	2bfd      	cmp	r3, #253	; 0xfd
 800182a:	f040 809f 	bne.w	800196c <main+0x698>
 800182e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001830:	7cdb      	ldrb	r3, [r3, #19]
 8001832:	2bba      	cmp	r3, #186	; 0xba
 8001834:	f040 809a 	bne.w	800196c <main+0x698>
						&& main_gs_cmd[20] == 0xD0) {  // Digipeater Disable
 8001838:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800183a:	7d1b      	ldrb	r3, [r3, #20]
 800183c:	2bd0      	cmp	r3, #208	; 0xd0
 800183e:	f040 8095 	bne.w	800196c <main+0x698>

					BEACON_COUNT = 2;
 8001842:	4b29      	ldr	r3, [pc, #164]	; (80018e8 <main+0x614>)
 8001844:	2202      	movs	r2, #2
 8001846:	601a      	str	r2, [r3, #0]
					OBC_SUCCESS_DATA_RX_FLAG = 0;
 8001848:	4b26      	ldr	r3, [pc, #152]	; (80018e4 <main+0x610>)
 800184a:	2200      	movs	r2, #0
 800184c:	601a      	str	r2, [r3, #0]
					DIGIPEATER_STATUS = 0;
 800184e:	4b27      	ldr	r3, [pc, #156]	; (80018ec <main+0x618>)
 8001850:	2200      	movs	r2, #0
 8001852:	601a      	str	r2, [r3, #0]
					DIGIPEATER_FLAG = 0;
 8001854:	4b26      	ldr	r3, [pc, #152]	; (80018f0 <main+0x61c>)
 8001856:	2200      	movs	r2, #0
 8001858:	601a      	str	r2, [r3, #0]

					myDebug("\n-------> Digipeater MODE OFF\n\n");
 800185a:	4826      	ldr	r0, [pc, #152]	; (80018f4 <main+0x620>)
 800185c:	f7fe ff76 	bl	800074c <myDebug>

					OBC_UART_RX[0] = 0x53;	//header
 8001860:	4b1e      	ldr	r3, [pc, #120]	; (80018dc <main+0x608>)
 8001862:	2253      	movs	r2, #83	; 0x53
 8001864:	701a      	strb	r2, [r3, #0]
					OBC_UART_RX[1] = 0xac;	//packet_ type
 8001866:	4b1d      	ldr	r3, [pc, #116]	; (80018dc <main+0x608>)
 8001868:	22ac      	movs	r2, #172	; 0xac
 800186a:	705a      	strb	r2, [r3, #1]
					OBC_UART_RX[2] = 0x04;	//length of info
 800186c:	4b1b      	ldr	r3, [pc, #108]	; (80018dc <main+0x608>)
 800186e:	2204      	movs	r2, #4
 8001870:	709a      	strb	r2, [r3, #2]
					OBC_UART_RX[3] = 0x02;	//mcu_no
 8001872:	4b1a      	ldr	r3, [pc, #104]	; (80018dc <main+0x608>)
 8001874:	2202      	movs	r2, #2
 8001876:	70da      	strb	r2, [r3, #3]
					OBC_UART_RX[4] = 0x00;	//Digipeater OFF
 8001878:	4b18      	ldr	r3, [pc, #96]	; (80018dc <main+0x608>)
 800187a:	2200      	movs	r2, #0
 800187c:	711a      	strb	r2, [r3, #4]
					OBC_UART_RX[5] = 0xdd;	//Digipeater prefix
 800187e:	4b17      	ldr	r3, [pc, #92]	; (80018dc <main+0x608>)
 8001880:	22dd      	movs	r2, #221	; 0xdd
 8001882:	715a      	strb	r2, [r3, #5]
					obc_ilen = OBC_UART_RX[2];
 8001884:	4b15      	ldr	r3, [pc, #84]	; (80018dc <main+0x608>)
 8001886:	789a      	ldrb	r2, [r3, #2]
 8001888:	4b15      	ldr	r3, [pc, #84]	; (80018e0 <main+0x60c>)
 800188a:	701a      	strb	r2, [r3, #0]

					myDebug("\nCommand sent to OBC, Length: %d bytes\r\n",
 800188c:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8001890:	4819      	ldr	r0, [pc, #100]	; (80018f8 <main+0x624>)
 8001892:	f7fe ff5b 	bl	800074c <myDebug>
							gs_cmd_len);

					if (HAL_UART_Transmit(&huart2, main_gs_cmd,
 8001896:	b2a2      	uxth	r2, r4
 8001898:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800189c:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800189e:	4817      	ldr	r0, [pc, #92]	; (80018fc <main+0x628>)
 80018a0:	f004 ff4d 	bl	800673e <HAL_UART_Transmit>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d009      	beq.n	80018be <main+0x5ea>
							sizeof(main_gs_cmd), 2000) == HAL_OK
							|| HAL_UART_Transmit(&hlpuart1, main_gs_cmd,
 80018aa:	b2a2      	uxth	r2, r4
 80018ac:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80018b0:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80018b2:	4813      	ldr	r0, [pc, #76]	; (8001900 <main+0x62c>)
 80018b4:	f004 ff43 	bl	800673e <HAL_UART_Transmit>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d052      	beq.n	8001964 <main+0x690>
									sizeof(main_gs_cmd), 2000)) {

						for (int i = 0; i < gs_cmd_len; i++) {
 80018be:	2300      	movs	r3, #0
 80018c0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80018c4:	e02c      	b.n	8001920 <main+0x64c>
 80018c6:	bf00      	nop
 80018c8:	200004c0 	.word	0x200004c0
 80018cc:	20000000 	.word	0x20000000
 80018d0:	200002ac 	.word	0x200002ac
 80018d4:	20000008 	.word	0x20000008
 80018d8:	0800ca38 	.word	0x0800ca38
 80018dc:	20000318 	.word	0x20000318
 80018e0:	20000316 	.word	0x20000316
 80018e4:	20000370 	.word	0x20000370
 80018e8:	20000004 	.word	0x20000004
 80018ec:	200004ac 	.word	0x200004ac
 80018f0:	200004b4 	.word	0x200004b4
 80018f4:	0800ca5c 	.word	0x0800ca5c
 80018f8:	0800ca7c 	.word	0x0800ca7c
 80018fc:	20000658 	.word	0x20000658
 8001900:	20000530 	.word	0x20000530
							myDebug("%02x ", main_gs_cmd[i]);
 8001904:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001906:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800190a:	4413      	add	r3, r2
 800190c:	781b      	ldrb	r3, [r3, #0]
 800190e:	4619      	mov	r1, r3
 8001910:	48b0      	ldr	r0, [pc, #704]	; (8001bd4 <main+0x900>)
 8001912:	f7fe ff1b 	bl	800074c <myDebug>
						for (int i = 0; i < gs_cmd_len; i++) {
 8001916:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800191a:	3301      	adds	r3, #1
 800191c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8001920:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8001924:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001928:	429a      	cmp	r2, r3
 800192a:	dbeb      	blt.n	8001904 <main+0x630>
						}

						myDebug("\r\n");
 800192c:	48aa      	ldr	r0, [pc, #680]	; (8001bd8 <main+0x904>)
 800192e:	f7fe ff0d 	bl	800074c <myDebug>

						memset(main_gs_cmd, '\0', sizeof(main_gs_cmd));
 8001932:	4623      	mov	r3, r4
 8001934:	461a      	mov	r2, r3
 8001936:	2100      	movs	r1, #0
 8001938:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800193a:	f00a f94f 	bl	800bbdc <memset>
						memset(rx_buffer, '\0', sizeof(rx_buffer));
 800193e:	2269      	movs	r2, #105	; 0x69
 8001940:	2100      	movs	r1, #0
 8001942:	48a6      	ldr	r0, [pc, #664]	; (8001bdc <main+0x908>)
 8001944:	f00a f94a 	bl	800bbdc <memset>
						memset(crc_buff, '\0', sizeof(crc_buff));
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	461a      	mov	r2, r3
 800194c:	2100      	movs	r1, #0
 800194e:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8001952:	f00a f943 	bl	800bbdc <memset>
						memset(gs_cmd_buff, '\0', sizeof(gs_cmd_buff));
 8001956:	f107 0314 	add.w	r3, r7, #20
 800195a:	2264      	movs	r2, #100	; 0x64
 800195c:	2100      	movs	r1, #0
 800195e:	4618      	mov	r0, r3
 8001960:	f00a f93c 	bl	800bbdc <memset>
					}

					OBC_SUCCESS_DATA_RX_FLAG = 1;
 8001964:	4b9e      	ldr	r3, [pc, #632]	; (8001be0 <main+0x90c>)
 8001966:	2201      	movs	r2, #1
 8001968:	601a      	str	r2, [r3, #0]
 800196a:	e3b9      	b.n	80020e0 <main+0xe0c>

				} else {
					myDebug("\nCommand sent to OBC, Length: %d bytes\r\n",
 800196c:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8001970:	489c      	ldr	r0, [pc, #624]	; (8001be4 <main+0x910>)
 8001972:	f7fe feeb 	bl	800074c <myDebug>
							gs_cmd_len);
					if (HAL_UART_Transmit(&huart2, main_gs_cmd,
 8001976:	b2a2      	uxth	r2, r4
 8001978:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800197c:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800197e:	489a      	ldr	r0, [pc, #616]	; (8001be8 <main+0x914>)
 8001980:	f004 fedd 	bl	800673e <HAL_UART_Transmit>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d00a      	beq.n	80019a0 <main+0x6cc>
							sizeof(main_gs_cmd), 2000) == HAL_OK
							|| HAL_UART_Transmit(&hlpuart1, main_gs_cmd,
 800198a:	b2a2      	uxth	r2, r4
 800198c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001990:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8001992:	4896      	ldr	r0, [pc, #600]	; (8001bec <main+0x918>)
 8001994:	f004 fed3 	bl	800673e <HAL_UART_Transmit>
 8001998:	4603      	mov	r3, r0
 800199a:	2b00      	cmp	r3, #0
 800199c:	f000 83a0 	beq.w	80020e0 <main+0xe0c>
									sizeof(main_gs_cmd), 2000)) {

						for (int i = 0; i < gs_cmd_len; i++) {
 80019a0:	2300      	movs	r3, #0
 80019a2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80019a6:	e00d      	b.n	80019c4 <main+0x6f0>
							myDebug("%02x ", main_gs_cmd[i]);
 80019a8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80019aa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80019ae:	4413      	add	r3, r2
 80019b0:	781b      	ldrb	r3, [r3, #0]
 80019b2:	4619      	mov	r1, r3
 80019b4:	4887      	ldr	r0, [pc, #540]	; (8001bd4 <main+0x900>)
 80019b6:	f7fe fec9 	bl	800074c <myDebug>
						for (int i = 0; i < gs_cmd_len; i++) {
 80019ba:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80019be:	3301      	adds	r3, #1
 80019c0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80019c4:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80019c8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80019cc:	429a      	cmp	r2, r3
 80019ce:	dbeb      	blt.n	80019a8 <main+0x6d4>
						}

						SUBGRF_SetRfFrequency(FREQ_435_MHZ);
 80019d0:	4887      	ldr	r0, [pc, #540]	; (8001bf0 <main+0x91c>)
 80019d2:	f008 febd 	bl	800a750 <SUBGRF_SetRfFrequency>
						SUBGRF_SetSwitch(RFO_LP, RFSWITCH_RX); /*Set RF switch*/
 80019d6:	2100      	movs	r1, #0
 80019d8:	2001      	movs	r0, #1
 80019da:	f009 fb01 	bl	800afe0 <SUBGRF_SetSwitch>
						SUBGRF_SetRxBoosted(0xFFFFFF);
 80019de:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80019e2:	f008 fce1 	bl	800a3a8 <SUBGRF_SetRxBoosted>

						memset(main_gs_cmd, '\0', sizeof(main_gs_cmd));
 80019e6:	4623      	mov	r3, r4
 80019e8:	461a      	mov	r2, r3
 80019ea:	2100      	movs	r1, #0
 80019ec:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 80019ee:	f00a f8f5 	bl	800bbdc <memset>
						memset(rx_buffer, '\0', sizeof(rx_buffer));
 80019f2:	2269      	movs	r2, #105	; 0x69
 80019f4:	2100      	movs	r1, #0
 80019f6:	4879      	ldr	r0, [pc, #484]	; (8001bdc <main+0x908>)
 80019f8:	f00a f8f0 	bl	800bbdc <memset>
						memset(crc_buff, '\0', sizeof(crc_buff));
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	461a      	mov	r2, r3
 8001a00:	2100      	movs	r1, #0
 8001a02:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8001a06:	f00a f8e9 	bl	800bbdc <memset>
						memset(gs_cmd_buff, '\0', sizeof(gs_cmd_buff));
 8001a0a:	f107 0314 	add.w	r3, r7, #20
 8001a0e:	2264      	movs	r2, #100	; 0x64
 8001a10:	2100      	movs	r1, #0
 8001a12:	4618      	mov	r0, r3
 8001a14:	f00a f8e2 	bl	800bbdc <memset>

						myDebug("\n\n_____OBC__RECEIVER_____\r\n");
 8001a18:	4876      	ldr	r0, [pc, #472]	; (8001bf4 <main+0x920>)
 8001a1a:	f7fe fe97 	bl	800074c <myDebug>
 8001a1e:	e35f      	b.n	80020e0 <main+0xe0c>
					}

				}
			} else if (COUNT_BEACON == 0) {
 8001a20:	4b75      	ldr	r3, [pc, #468]	; (8001bf8 <main+0x924>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	f040 835b 	bne.w	80020e0 <main+0xe0c>
				if (DIGIPEATER_STATUS == 1) {
 8001a2a:	4b74      	ldr	r3, [pc, #464]	; (8001bfc <main+0x928>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	2b01      	cmp	r3, #1
 8001a30:	f040 81aa 	bne.w	8001d88 <main+0xab4>
					if (main_gs_cmd[18] == 0xFD && main_gs_cmd[19] == 0xBA
 8001a34:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001a36:	7c9b      	ldrb	r3, [r3, #18]
 8001a38:	2bfd      	cmp	r3, #253	; 0xfd
 8001a3a:	d17d      	bne.n	8001b38 <main+0x864>
 8001a3c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001a3e:	7cdb      	ldrb	r3, [r3, #19]
 8001a40:	2bba      	cmp	r3, #186	; 0xba
 8001a42:	d179      	bne.n	8001b38 <main+0x864>
							&& main_gs_cmd[20] == 0xD0) {
 8001a44:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001a46:	7d1b      	ldrb	r3, [r3, #20]
 8001a48:	2bd0      	cmp	r3, #208	; 0xd0
 8001a4a:	d175      	bne.n	8001b38 <main+0x864>

						BEACON_COUNT = 2;
 8001a4c:	4b6c      	ldr	r3, [pc, #432]	; (8001c00 <main+0x92c>)
 8001a4e:	2202      	movs	r2, #2
 8001a50:	601a      	str	r2, [r3, #0]
						OBC_SUCCESS_DATA_RX_FLAG = 0;
 8001a52:	4b63      	ldr	r3, [pc, #396]	; (8001be0 <main+0x90c>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	601a      	str	r2, [r3, #0]
						DIGIPEATER_STATUS = 0;
 8001a58:	4b68      	ldr	r3, [pc, #416]	; (8001bfc <main+0x928>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	601a      	str	r2, [r3, #0]
						DIGIPEATER_FLAG = 0;
 8001a5e:	4b69      	ldr	r3, [pc, #420]	; (8001c04 <main+0x930>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	601a      	str	r2, [r3, #0]

						myDebug("\n-------> Digipeater MODE OFF\n\n");
 8001a64:	4868      	ldr	r0, [pc, #416]	; (8001c08 <main+0x934>)
 8001a66:	f7fe fe71 	bl	800074c <myDebug>

						OBC_UART_RX[0] = 0x53;	//header
 8001a6a:	4b68      	ldr	r3, [pc, #416]	; (8001c0c <main+0x938>)
 8001a6c:	2253      	movs	r2, #83	; 0x53
 8001a6e:	701a      	strb	r2, [r3, #0]
						OBC_UART_RX[1] = 0xac;	//packet_ type
 8001a70:	4b66      	ldr	r3, [pc, #408]	; (8001c0c <main+0x938>)
 8001a72:	22ac      	movs	r2, #172	; 0xac
 8001a74:	705a      	strb	r2, [r3, #1]
						OBC_UART_RX[2] = 0x04;	//length of info
 8001a76:	4b65      	ldr	r3, [pc, #404]	; (8001c0c <main+0x938>)
 8001a78:	2204      	movs	r2, #4
 8001a7a:	709a      	strb	r2, [r3, #2]
						OBC_UART_RX[3] = 0x02;	//mcu_no
 8001a7c:	4b63      	ldr	r3, [pc, #396]	; (8001c0c <main+0x938>)
 8001a7e:	2202      	movs	r2, #2
 8001a80:	70da      	strb	r2, [r3, #3]
						OBC_UART_RX[4] = 0x00;	//Digipeater OFF
 8001a82:	4b62      	ldr	r3, [pc, #392]	; (8001c0c <main+0x938>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	711a      	strb	r2, [r3, #4]
						OBC_UART_RX[5] = 0xdd;	//Digipeater prefix
 8001a88:	4b60      	ldr	r3, [pc, #384]	; (8001c0c <main+0x938>)
 8001a8a:	22dd      	movs	r2, #221	; 0xdd
 8001a8c:	715a      	strb	r2, [r3, #5]
						obc_ilen = OBC_UART_RX[2];
 8001a8e:	4b5f      	ldr	r3, [pc, #380]	; (8001c0c <main+0x938>)
 8001a90:	789a      	ldrb	r2, [r3, #2]
 8001a92:	4b5f      	ldr	r3, [pc, #380]	; (8001c10 <main+0x93c>)
 8001a94:	701a      	strb	r2, [r3, #0]

						myDebug("\nCommand sent to OBC, Length: %d bytes\r\n",
 8001a96:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8001a9a:	4852      	ldr	r0, [pc, #328]	; (8001be4 <main+0x910>)
 8001a9c:	f7fe fe56 	bl	800074c <myDebug>
								gs_cmd_len);

						if (HAL_UART_Transmit(&huart2, main_gs_cmd,
 8001aa0:	b2a2      	uxth	r2, r4
 8001aa2:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001aa6:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8001aa8:	484f      	ldr	r0, [pc, #316]	; (8001be8 <main+0x914>)
 8001aaa:	f004 fe48 	bl	800673e <HAL_UART_Transmit>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d009      	beq.n	8001ac8 <main+0x7f4>
								sizeof(main_gs_cmd), 2000) == HAL_OK
								|| HAL_UART_Transmit(&hlpuart1, main_gs_cmd,
 8001ab4:	b2a2      	uxth	r2, r4
 8001ab6:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001aba:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8001abc:	484b      	ldr	r0, [pc, #300]	; (8001bec <main+0x918>)
 8001abe:	f004 fe3e 	bl	800673e <HAL_UART_Transmit>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d033      	beq.n	8001b30 <main+0x85c>
										sizeof(main_gs_cmd), 2000)) {

							for (int i = 0; i < gs_cmd_len; i++) {
 8001ac8:	2300      	movs	r3, #0
 8001aca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8001ace:	e00d      	b.n	8001aec <main+0x818>
								myDebug("%02x ", main_gs_cmd[i]);
 8001ad0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001ad2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001ad6:	4413      	add	r3, r2
 8001ad8:	781b      	ldrb	r3, [r3, #0]
 8001ada:	4619      	mov	r1, r3
 8001adc:	483d      	ldr	r0, [pc, #244]	; (8001bd4 <main+0x900>)
 8001ade:	f7fe fe35 	bl	800074c <myDebug>
							for (int i = 0; i < gs_cmd_len; i++) {
 8001ae2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001ae6:	3301      	adds	r3, #1
 8001ae8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8001aec:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8001af0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001af4:	429a      	cmp	r2, r3
 8001af6:	dbeb      	blt.n	8001ad0 <main+0x7fc>
							}

							myDebug("\r\n");
 8001af8:	4837      	ldr	r0, [pc, #220]	; (8001bd8 <main+0x904>)
 8001afa:	f7fe fe27 	bl	800074c <myDebug>

							memset(main_gs_cmd, '\0', sizeof(main_gs_cmd));
 8001afe:	4623      	mov	r3, r4
 8001b00:	461a      	mov	r2, r3
 8001b02:	2100      	movs	r1, #0
 8001b04:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8001b06:	f00a f869 	bl	800bbdc <memset>
							memset(rx_buffer, '\0', sizeof(rx_buffer));
 8001b0a:	2269      	movs	r2, #105	; 0x69
 8001b0c:	2100      	movs	r1, #0
 8001b0e:	4833      	ldr	r0, [pc, #204]	; (8001bdc <main+0x908>)
 8001b10:	f00a f864 	bl	800bbdc <memset>
							memset(crc_buff, '\0', sizeof(crc_buff));
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	461a      	mov	r2, r3
 8001b18:	2100      	movs	r1, #0
 8001b1a:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8001b1e:	f00a f85d 	bl	800bbdc <memset>
							memset(gs_cmd_buff, '\0', sizeof(gs_cmd_buff));
 8001b22:	f107 0314 	add.w	r3, r7, #20
 8001b26:	2264      	movs	r2, #100	; 0x64
 8001b28:	2100      	movs	r1, #0
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f00a f856 	bl	800bbdc <memset>
						}

						OBC_SUCCESS_DATA_RX_FLAG = 1;
 8001b30:	4b2b      	ldr	r3, [pc, #172]	; (8001be0 <main+0x90c>)
 8001b32:	2201      	movs	r2, #1
 8001b34:	601a      	str	r2, [r3, #0]
 8001b36:	e2d3      	b.n	80020e0 <main+0xe0c>

					} else if (main_gs_cmd[18] == 0xDF
 8001b38:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001b3a:	7c9b      	ldrb	r3, [r3, #18]
 8001b3c:	2bdf      	cmp	r3, #223	; 0xdf
 8001b3e:	f040 809f 	bne.w	8001c80 <main+0x9ac>
							&& main_gs_cmd[19] == 0xAB
 8001b42:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001b44:	7cdb      	ldrb	r3, [r3, #19]
 8001b46:	2bab      	cmp	r3, #171	; 0xab
 8001b48:	f040 809a 	bne.w	8001c80 <main+0x9ac>
							&& main_gs_cmd[20] == 0xD1) { //Digipeater on
 8001b4c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001b4e:	7d1b      	ldrb	r3, [r3, #20]
 8001b50:	2bd1      	cmp	r3, #209	; 0xd1
 8001b52:	f040 8095 	bne.w	8001c80 <main+0x9ac>

						BEACON_COUNT = 0;
 8001b56:	4b2a      	ldr	r3, [pc, #168]	; (8001c00 <main+0x92c>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	601a      	str	r2, [r3, #0]
						OBC_SUCCESS_DATA_RX_FLAG = 0;
 8001b5c:	4b20      	ldr	r3, [pc, #128]	; (8001be0 <main+0x90c>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	601a      	str	r2, [r3, #0]
						DIGIPEATER_STATUS = 1;
 8001b62:	4b26      	ldr	r3, [pc, #152]	; (8001bfc <main+0x928>)
 8001b64:	2201      	movs	r2, #1
 8001b66:	601a      	str	r2, [r3, #0]

						myDebug("\n-------> Digipeater MODE ON\n\n");
 8001b68:	482a      	ldr	r0, [pc, #168]	; (8001c14 <main+0x940>)
 8001b6a:	f7fe fdef 	bl	800074c <myDebug>

						OBC_UART_RX[0] = 0x53;	//header
 8001b6e:	4b27      	ldr	r3, [pc, #156]	; (8001c0c <main+0x938>)
 8001b70:	2253      	movs	r2, #83	; 0x53
 8001b72:	701a      	strb	r2, [r3, #0]
						OBC_UART_RX[1] = 0xac;	//packet_ type
 8001b74:	4b25      	ldr	r3, [pc, #148]	; (8001c0c <main+0x938>)
 8001b76:	22ac      	movs	r2, #172	; 0xac
 8001b78:	705a      	strb	r2, [r3, #1]
						OBC_UART_RX[2] = 0x04;	//length of info
 8001b7a:	4b24      	ldr	r3, [pc, #144]	; (8001c0c <main+0x938>)
 8001b7c:	2204      	movs	r2, #4
 8001b7e:	709a      	strb	r2, [r3, #2]
						OBC_UART_RX[3] = 0x02;	//mcu_no
 8001b80:	4b22      	ldr	r3, [pc, #136]	; (8001c0c <main+0x938>)
 8001b82:	2202      	movs	r2, #2
 8001b84:	70da      	strb	r2, [r3, #3]
						OBC_UART_RX[4] = 0x01;	//Digipeater ON
 8001b86:	4b21      	ldr	r3, [pc, #132]	; (8001c0c <main+0x938>)
 8001b88:	2201      	movs	r2, #1
 8001b8a:	711a      	strb	r2, [r3, #4]
						OBC_UART_RX[5] = 0xdd;	//Digipeater prefix
 8001b8c:	4b1f      	ldr	r3, [pc, #124]	; (8001c0c <main+0x938>)
 8001b8e:	22dd      	movs	r2, #221	; 0xdd
 8001b90:	715a      	strb	r2, [r3, #5]
						obc_ilen = OBC_UART_RX[2];
 8001b92:	4b1e      	ldr	r3, [pc, #120]	; (8001c0c <main+0x938>)
 8001b94:	789a      	ldrb	r2, [r3, #2]
 8001b96:	4b1e      	ldr	r3, [pc, #120]	; (8001c10 <main+0x93c>)
 8001b98:	701a      	strb	r2, [r3, #0]

						myDebug("\nCommand sent to OBC, Length: %d bytes\r\n",
 8001b9a:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8001b9e:	4811      	ldr	r0, [pc, #68]	; (8001be4 <main+0x910>)
 8001ba0:	f7fe fdd4 	bl	800074c <myDebug>
								gs_cmd_len);

						if (HAL_UART_Transmit(&huart2, main_gs_cmd,
 8001ba4:	b2a2      	uxth	r2, r4
 8001ba6:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001baa:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8001bac:	480e      	ldr	r0, [pc, #56]	; (8001be8 <main+0x914>)
 8001bae:	f004 fdc6 	bl	800673e <HAL_UART_Transmit>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d009      	beq.n	8001bcc <main+0x8f8>
								sizeof(main_gs_cmd), 2000) == HAL_OK
								|| HAL_UART_Transmit(&hlpuart1, main_gs_cmd,
 8001bb8:	b2a2      	uxth	r2, r4
 8001bba:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001bbe:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8001bc0:	480a      	ldr	r0, [pc, #40]	; (8001bec <main+0x918>)
 8001bc2:	f004 fdbc 	bl	800673e <HAL_UART_Transmit>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d055      	beq.n	8001c78 <main+0x9a4>
										sizeof(main_gs_cmd), 2000)) {

							for (int i = 0; i < gs_cmd_len; i++) {
 8001bcc:	2300      	movs	r3, #0
 8001bce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001bd2:	e02f      	b.n	8001c34 <main+0x960>
 8001bd4:	0800c708 	.word	0x0800c708
 8001bd8:	0800c710 	.word	0x0800c710
 8001bdc:	200002ac 	.word	0x200002ac
 8001be0:	20000370 	.word	0x20000370
 8001be4:	0800ca7c 	.word	0x0800ca7c
 8001be8:	20000658 	.word	0x20000658
 8001bec:	20000530 	.word	0x20000530
 8001bf0:	19f25968 	.word	0x19f25968
 8001bf4:	0800caa8 	.word	0x0800caa8
 8001bf8:	20000008 	.word	0x20000008
 8001bfc:	200004ac 	.word	0x200004ac
 8001c00:	20000004 	.word	0x20000004
 8001c04:	200004b4 	.word	0x200004b4
 8001c08:	0800ca5c 	.word	0x0800ca5c
 8001c0c:	20000318 	.word	0x20000318
 8001c10:	20000316 	.word	0x20000316
 8001c14:	0800cac4 	.word	0x0800cac4
								myDebug("%02x ", main_gs_cmd[i]);
 8001c18:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001c1a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001c1e:	4413      	add	r3, r2
 8001c20:	781b      	ldrb	r3, [r3, #0]
 8001c22:	4619      	mov	r1, r3
 8001c24:	489d      	ldr	r0, [pc, #628]	; (8001e9c <main+0xbc8>)
 8001c26:	f7fe fd91 	bl	800074c <myDebug>
							for (int i = 0; i < gs_cmd_len; i++) {
 8001c2a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001c2e:	3301      	adds	r3, #1
 8001c30:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001c34:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8001c38:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	dbeb      	blt.n	8001c18 <main+0x944>
							}

							myDebug("\r\n");
 8001c40:	4897      	ldr	r0, [pc, #604]	; (8001ea0 <main+0xbcc>)
 8001c42:	f7fe fd83 	bl	800074c <myDebug>

							memset(main_gs_cmd, '\0', sizeof(main_gs_cmd));
 8001c46:	4623      	mov	r3, r4
 8001c48:	461a      	mov	r2, r3
 8001c4a:	2100      	movs	r1, #0
 8001c4c:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8001c4e:	f009 ffc5 	bl	800bbdc <memset>
							memset(rx_buffer, '\0', sizeof(rx_buffer));
 8001c52:	2269      	movs	r2, #105	; 0x69
 8001c54:	2100      	movs	r1, #0
 8001c56:	4893      	ldr	r0, [pc, #588]	; (8001ea4 <main+0xbd0>)
 8001c58:	f009 ffc0 	bl	800bbdc <memset>
							memset(crc_buff, '\0', sizeof(crc_buff));
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	461a      	mov	r2, r3
 8001c60:	2100      	movs	r1, #0
 8001c62:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8001c66:	f009 ffb9 	bl	800bbdc <memset>
							memset(gs_cmd_buff, '\0', sizeof(gs_cmd_buff));
 8001c6a:	f107 0314 	add.w	r3, r7, #20
 8001c6e:	2264      	movs	r2, #100	; 0x64
 8001c70:	2100      	movs	r1, #0
 8001c72:	4618      	mov	r0, r3
 8001c74:	f009 ffb2 	bl	800bbdc <memset>
						}

						OBC_SUCCESS_DATA_RX_FLAG = 1;
 8001c78:	4b8b      	ldr	r3, [pc, #556]	; (8001ea8 <main+0xbd4>)
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	601a      	str	r2, [r3, #0]
 8001c7e:	e22f      	b.n	80020e0 <main+0xe0c>

					} else if (main_gs_cmd[18] == 0x53
 8001c80:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001c82:	7c9b      	ldrb	r3, [r3, #18]
 8001c84:	2b53      	cmp	r3, #83	; 0x53
 8001c86:	d15c      	bne.n	8001d42 <main+0xa6e>
							&& main_gs_cmd[19] == 0x02
 8001c88:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001c8a:	7cdb      	ldrb	r3, [r3, #19]
 8001c8c:	2b02      	cmp	r3, #2
 8001c8e:	d158      	bne.n	8001d42 <main+0xa6e>
							&& main_gs_cmd[20] == 0x53) { // if digipeater packet
 8001c90:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001c92:	7d1b      	ldrb	r3, [r3, #20]
 8001c94:	2b53      	cmp	r3, #83	; 0x53
 8001c96:	d154      	bne.n	8001d42 <main+0xa6e>
						myDebug(
 8001c98:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8001c9c:	4883      	ldr	r0, [pc, #524]	; (8001eac <main+0xbd8>)
 8001c9e:	f7fe fd55 	bl	800074c <myDebug>
								"\nDigipeater packet sent to OBC, Length: %d bytes\r\n",
								gs_cmd_len);
						if (HAL_UART_Transmit(&huart2, main_gs_cmd,
 8001ca2:	b2a2      	uxth	r2, r4
 8001ca4:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001ca8:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8001caa:	4881      	ldr	r0, [pc, #516]	; (8001eb0 <main+0xbdc>)
 8001cac:	f004 fd47 	bl	800673e <HAL_UART_Transmit>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d00a      	beq.n	8001ccc <main+0x9f8>
								sizeof(main_gs_cmd), 2000) == HAL_OK
								|| HAL_UART_Transmit(&hlpuart1, main_gs_cmd,
 8001cb6:	b2a2      	uxth	r2, r4
 8001cb8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001cbc:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8001cbe:	487d      	ldr	r0, [pc, #500]	; (8001eb4 <main+0xbe0>)
 8001cc0:	f004 fd3d 	bl	800673e <HAL_UART_Transmit>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	f000 8209 	beq.w	80020de <main+0xe0a>
										sizeof(main_gs_cmd), 2000)) {

							for (int i = 0; i < gs_cmd_len; i++) {
 8001ccc:	2300      	movs	r3, #0
 8001cce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001cd2:	e00d      	b.n	8001cf0 <main+0xa1c>
								myDebug("%02x ", main_gs_cmd[i]);
 8001cd4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001cd6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001cda:	4413      	add	r3, r2
 8001cdc:	781b      	ldrb	r3, [r3, #0]
 8001cde:	4619      	mov	r1, r3
 8001ce0:	486e      	ldr	r0, [pc, #440]	; (8001e9c <main+0xbc8>)
 8001ce2:	f7fe fd33 	bl	800074c <myDebug>
							for (int i = 0; i < gs_cmd_len; i++) {
 8001ce6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001cea:	3301      	adds	r3, #1
 8001cec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001cf0:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8001cf4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	dbeb      	blt.n	8001cd4 <main+0xa00>
							}

							myDebug("\r\n");
 8001cfc:	4868      	ldr	r0, [pc, #416]	; (8001ea0 <main+0xbcc>)
 8001cfe:	f7fe fd25 	bl	800074c <myDebug>

							memset(main_gs_cmd, '\0', sizeof(main_gs_cmd));
 8001d02:	4623      	mov	r3, r4
 8001d04:	461a      	mov	r2, r3
 8001d06:	2100      	movs	r1, #0
 8001d08:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8001d0a:	f009 ff67 	bl	800bbdc <memset>
							memset(rx_buffer, '\0', sizeof(rx_buffer));
 8001d0e:	2269      	movs	r2, #105	; 0x69
 8001d10:	2100      	movs	r1, #0
 8001d12:	4864      	ldr	r0, [pc, #400]	; (8001ea4 <main+0xbd0>)
 8001d14:	f009 ff62 	bl	800bbdc <memset>
							memset(crc_buff, '\0', sizeof(crc_buff));
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	461a      	mov	r2, r3
 8001d1c:	2100      	movs	r1, #0
 8001d1e:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8001d22:	f009 ff5b 	bl	800bbdc <memset>
							memset(gs_cmd_buff, '\0', sizeof(gs_cmd_buff));
 8001d26:	f107 0314 	add.w	r3, r7, #20
 8001d2a:	2264      	movs	r2, #100	; 0x64
 8001d2c:	2100      	movs	r1, #0
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f009 ff54 	bl	800bbdc <memset>

							myDebug(
 8001d34:	4860      	ldr	r0, [pc, #384]	; (8001eb8 <main+0xbe4>)
 8001d36:	f7fe fd09 	bl	800074c <myDebug>
									"\n\n_____DIGIPEATER_OBC__RECEIVER_____\r\n");
							DIGIPEATER_RX_FLAG = 1;
 8001d3a:	4b60      	ldr	r3, [pc, #384]	; (8001ebc <main+0xbe8>)
 8001d3c:	2201      	movs	r2, #1
 8001d3e:	601a      	str	r2, [r3, #0]
						if (HAL_UART_Transmit(&huart2, main_gs_cmd,
 8001d40:	e1cd      	b.n	80020de <main+0xe0a>
						}
					} else {
						myDebug("\n********GS Command failed: 0x%x\r\n");
 8001d42:	485f      	ldr	r0, [pc, #380]	; (8001ec0 <main+0xbec>)
 8001d44:	f7fe fd02 	bl	800074c <myDebug>

						OBC_UART_RX[0] = 0x53;	//header
 8001d48:	4b5e      	ldr	r3, [pc, #376]	; (8001ec4 <main+0xbf0>)
 8001d4a:	2253      	movs	r2, #83	; 0x53
 8001d4c:	701a      	strb	r2, [r3, #0]
						OBC_UART_RX[1] = 0xac;	//packet_ type
 8001d4e:	4b5d      	ldr	r3, [pc, #372]	; (8001ec4 <main+0xbf0>)
 8001d50:	22ac      	movs	r2, #172	; 0xac
 8001d52:	705a      	strb	r2, [r3, #1]
						OBC_UART_RX[2] = 0x04;	//length of info
 8001d54:	4b5b      	ldr	r3, [pc, #364]	; (8001ec4 <main+0xbf0>)
 8001d56:	2204      	movs	r2, #4
 8001d58:	709a      	strb	r2, [r3, #2]
						OBC_UART_RX[3] = 0x02;	//mcu_no
 8001d5a:	4b5a      	ldr	r3, [pc, #360]	; (8001ec4 <main+0xbf0>)
 8001d5c:	2202      	movs	r2, #2
 8001d5e:	70da      	strb	r2, [r3, #3]
						OBC_UART_RX[4] = 0xfc;	//false command
 8001d60:	4b58      	ldr	r3, [pc, #352]	; (8001ec4 <main+0xbf0>)
 8001d62:	22fc      	movs	r2, #252	; 0xfc
 8001d64:	711a      	strb	r2, [r3, #4]
						OBC_UART_RX[5] = 0xee;	//error prefix
 8001d66:	4b57      	ldr	r3, [pc, #348]	; (8001ec4 <main+0xbf0>)
 8001d68:	22ee      	movs	r2, #238	; 0xee
 8001d6a:	715a      	strb	r2, [r3, #5]
						obc_ilen = OBC_UART_RX[2];
 8001d6c:	4b55      	ldr	r3, [pc, #340]	; (8001ec4 <main+0xbf0>)
 8001d6e:	789a      	ldrb	r2, [r3, #2]
 8001d70:	4b55      	ldr	r3, [pc, #340]	; (8001ec8 <main+0xbf4>)
 8001d72:	701a      	strb	r2, [r3, #0]

						OBC_SUCCESS_DATA_RX_FLAG = 1;
 8001d74:	4b4c      	ldr	r3, [pc, #304]	; (8001ea8 <main+0xbd4>)
 8001d76:	2201      	movs	r2, #1
 8001d78:	601a      	str	r2, [r3, #0]

						memset(main_gs_cmd, '\0', sizeof(main_gs_cmd));
 8001d7a:	4623      	mov	r3, r4
 8001d7c:	461a      	mov	r2, r3
 8001d7e:	2100      	movs	r1, #0
 8001d80:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8001d82:	f009 ff2b 	bl	800bbdc <memset>
 8001d86:	e1ab      	b.n	80020e0 <main+0xe0c>

					}
				} else if (DIGIPEATER_STATUS == 0) {
 8001d88:	4b50      	ldr	r3, [pc, #320]	; (8001ecc <main+0xbf8>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	f040 81a7 	bne.w	80020e0 <main+0xe0c>
					if (main_gs_cmd[18] == 0xFD && main_gs_cmd[19] == 0xBA
 8001d92:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001d94:	7c9b      	ldrb	r3, [r3, #18]
 8001d96:	2bfd      	cmp	r3, #253	; 0xfd
 8001d98:	f040 80a2 	bne.w	8001ee0 <main+0xc0c>
 8001d9c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001d9e:	7cdb      	ldrb	r3, [r3, #19]
 8001da0:	2bba      	cmp	r3, #186	; 0xba
 8001da2:	f040 809d 	bne.w	8001ee0 <main+0xc0c>
							&& main_gs_cmd[20] == 0xD0) {
 8001da6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001da8:	7d1b      	ldrb	r3, [r3, #20]
 8001daa:	2bd0      	cmp	r3, #208	; 0xd0
 8001dac:	f040 8098 	bne.w	8001ee0 <main+0xc0c>

						BEACON_COUNT = 2;
 8001db0:	4b47      	ldr	r3, [pc, #284]	; (8001ed0 <main+0xbfc>)
 8001db2:	2202      	movs	r2, #2
 8001db4:	601a      	str	r2, [r3, #0]
						OBC_SUCCESS_DATA_RX_FLAG = 0;
 8001db6:	4b3c      	ldr	r3, [pc, #240]	; (8001ea8 <main+0xbd4>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	601a      	str	r2, [r3, #0]
						DIGIPEATER_STATUS = 0;
 8001dbc:	4b43      	ldr	r3, [pc, #268]	; (8001ecc <main+0xbf8>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	601a      	str	r2, [r3, #0]
						DIGIPEATER_FLAG = 0;
 8001dc2:	4b44      	ldr	r3, [pc, #272]	; (8001ed4 <main+0xc00>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	601a      	str	r2, [r3, #0]

						myDebug("\n-------> Digipeater MODE OFF\n\n");
 8001dc8:	4843      	ldr	r0, [pc, #268]	; (8001ed8 <main+0xc04>)
 8001dca:	f7fe fcbf 	bl	800074c <myDebug>

						OBC_UART_RX[0] = 0x53;	//header
 8001dce:	4b3d      	ldr	r3, [pc, #244]	; (8001ec4 <main+0xbf0>)
 8001dd0:	2253      	movs	r2, #83	; 0x53
 8001dd2:	701a      	strb	r2, [r3, #0]
						OBC_UART_RX[1] = 0xac;	//packet_ type
 8001dd4:	4b3b      	ldr	r3, [pc, #236]	; (8001ec4 <main+0xbf0>)
 8001dd6:	22ac      	movs	r2, #172	; 0xac
 8001dd8:	705a      	strb	r2, [r3, #1]
						OBC_UART_RX[2] = 0x04;	//length of info
 8001dda:	4b3a      	ldr	r3, [pc, #232]	; (8001ec4 <main+0xbf0>)
 8001ddc:	2204      	movs	r2, #4
 8001dde:	709a      	strb	r2, [r3, #2]
						OBC_UART_RX[3] = 0x02;	//mcu_no
 8001de0:	4b38      	ldr	r3, [pc, #224]	; (8001ec4 <main+0xbf0>)
 8001de2:	2202      	movs	r2, #2
 8001de4:	70da      	strb	r2, [r3, #3]
						OBC_UART_RX[4] = 0x00;	//Digipeater OFF
 8001de6:	4b37      	ldr	r3, [pc, #220]	; (8001ec4 <main+0xbf0>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	711a      	strb	r2, [r3, #4]
						OBC_UART_RX[5] = 0xdd;	//Digipeater prefix
 8001dec:	4b35      	ldr	r3, [pc, #212]	; (8001ec4 <main+0xbf0>)
 8001dee:	22dd      	movs	r2, #221	; 0xdd
 8001df0:	715a      	strb	r2, [r3, #5]
						obc_ilen = OBC_UART_RX[2];
 8001df2:	4b34      	ldr	r3, [pc, #208]	; (8001ec4 <main+0xbf0>)
 8001df4:	789a      	ldrb	r2, [r3, #2]
 8001df6:	4b34      	ldr	r3, [pc, #208]	; (8001ec8 <main+0xbf4>)
 8001df8:	701a      	strb	r2, [r3, #0]

						myDebug("\nCommand sent to OBC, Length: %d bytes\r\n",
 8001dfa:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8001dfe:	4837      	ldr	r0, [pc, #220]	; (8001edc <main+0xc08>)
 8001e00:	f7fe fca4 	bl	800074c <myDebug>
								gs_cmd_len);

						if (HAL_UART_Transmit(&huart2, main_gs_cmd,
 8001e04:	b2a2      	uxth	r2, r4
 8001e06:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001e0a:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8001e0c:	4828      	ldr	r0, [pc, #160]	; (8001eb0 <main+0xbdc>)
 8001e0e:	f004 fc96 	bl	800673e <HAL_UART_Transmit>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d009      	beq.n	8001e2c <main+0xb58>
								sizeof(main_gs_cmd), 2000) == HAL_OK
								|| HAL_UART_Transmit(&hlpuart1, main_gs_cmd,
 8001e18:	b2a2      	uxth	r2, r4
 8001e1a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001e1e:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8001e20:	4824      	ldr	r0, [pc, #144]	; (8001eb4 <main+0xbe0>)
 8001e22:	f004 fc8c 	bl	800673e <HAL_UART_Transmit>
 8001e26:	4603      	mov	r3, r0
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d033      	beq.n	8001e94 <main+0xbc0>
										sizeof(main_gs_cmd), 2000)) {

							for (int i = 0; i < gs_cmd_len; i++) {
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001e32:	e00d      	b.n	8001e50 <main+0xb7c>
								myDebug("%02x ", main_gs_cmd[i]);
 8001e34:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001e36:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001e3a:	4413      	add	r3, r2
 8001e3c:	781b      	ldrb	r3, [r3, #0]
 8001e3e:	4619      	mov	r1, r3
 8001e40:	4816      	ldr	r0, [pc, #88]	; (8001e9c <main+0xbc8>)
 8001e42:	f7fe fc83 	bl	800074c <myDebug>
							for (int i = 0; i < gs_cmd_len; i++) {
 8001e46:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001e4a:	3301      	adds	r3, #1
 8001e4c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001e50:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001e54:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001e58:	429a      	cmp	r2, r3
 8001e5a:	dbeb      	blt.n	8001e34 <main+0xb60>
							}
							myDebug("\r\n");
 8001e5c:	4810      	ldr	r0, [pc, #64]	; (8001ea0 <main+0xbcc>)
 8001e5e:	f7fe fc75 	bl	800074c <myDebug>

							memset(main_gs_cmd, '\0', sizeof(main_gs_cmd));
 8001e62:	4623      	mov	r3, r4
 8001e64:	461a      	mov	r2, r3
 8001e66:	2100      	movs	r1, #0
 8001e68:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8001e6a:	f009 feb7 	bl	800bbdc <memset>
							memset(rx_buffer, '\0', sizeof(rx_buffer));
 8001e6e:	2269      	movs	r2, #105	; 0x69
 8001e70:	2100      	movs	r1, #0
 8001e72:	480c      	ldr	r0, [pc, #48]	; (8001ea4 <main+0xbd0>)
 8001e74:	f009 feb2 	bl	800bbdc <memset>
							memset(crc_buff, '\0', sizeof(crc_buff));
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	461a      	mov	r2, r3
 8001e7c:	2100      	movs	r1, #0
 8001e7e:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8001e82:	f009 feab 	bl	800bbdc <memset>
							memset(gs_cmd_buff, '\0', sizeof(gs_cmd_buff));
 8001e86:	f107 0314 	add.w	r3, r7, #20
 8001e8a:	2264      	movs	r2, #100	; 0x64
 8001e8c:	2100      	movs	r1, #0
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f009 fea4 	bl	800bbdc <memset>
						}

						OBC_SUCCESS_DATA_RX_FLAG = 1;
 8001e94:	4b04      	ldr	r3, [pc, #16]	; (8001ea8 <main+0xbd4>)
 8001e96:	2201      	movs	r2, #1
 8001e98:	601a      	str	r2, [r3, #0]
 8001e9a:	e121      	b.n	80020e0 <main+0xe0c>
 8001e9c:	0800c708 	.word	0x0800c708
 8001ea0:	0800c710 	.word	0x0800c710
 8001ea4:	200002ac 	.word	0x200002ac
 8001ea8:	20000370 	.word	0x20000370
 8001eac:	0800cae4 	.word	0x0800cae4
 8001eb0:	20000658 	.word	0x20000658
 8001eb4:	20000530 	.word	0x20000530
 8001eb8:	0800cb18 	.word	0x0800cb18
 8001ebc:	200004b8 	.word	0x200004b8
 8001ec0:	0800ca38 	.word	0x0800ca38
 8001ec4:	20000318 	.word	0x20000318
 8001ec8:	20000316 	.word	0x20000316
 8001ecc:	200004ac 	.word	0x200004ac
 8001ed0:	20000004 	.word	0x20000004
 8001ed4:	200004b4 	.word	0x200004b4
 8001ed8:	0800ca5c 	.word	0x0800ca5c
 8001edc:	0800ca7c 	.word	0x0800ca7c

					} else if (main_gs_cmd[18] == 0xDF
 8001ee0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001ee2:	7c9b      	ldrb	r3, [r3, #18]
 8001ee4:	2bdf      	cmp	r3, #223	; 0xdf
 8001ee6:	d17a      	bne.n	8001fde <main+0xd0a>
							&& main_gs_cmd[19] == 0xAB
 8001ee8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001eea:	7cdb      	ldrb	r3, [r3, #19]
 8001eec:	2bab      	cmp	r3, #171	; 0xab
 8001eee:	d176      	bne.n	8001fde <main+0xd0a>
							&& main_gs_cmd[20] == 0xD1) {
 8001ef0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001ef2:	7d1b      	ldrb	r3, [r3, #20]
 8001ef4:	2bd1      	cmp	r3, #209	; 0xd1
 8001ef6:	d172      	bne.n	8001fde <main+0xd0a>

						BEACON_COUNT = 0;
 8001ef8:	4b83      	ldr	r3, [pc, #524]	; (8002108 <main+0xe34>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	601a      	str	r2, [r3, #0]
						OBC_SUCCESS_DATA_RX_FLAG = 0;
 8001efe:	4b83      	ldr	r3, [pc, #524]	; (800210c <main+0xe38>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	601a      	str	r2, [r3, #0]
						DIGIPEATER_STATUS = 1;
 8001f04:	4b82      	ldr	r3, [pc, #520]	; (8002110 <main+0xe3c>)
 8001f06:	2201      	movs	r2, #1
 8001f08:	601a      	str	r2, [r3, #0]

						myDebug("\n-------> Digipeater MODE ON\n\n");
 8001f0a:	4882      	ldr	r0, [pc, #520]	; (8002114 <main+0xe40>)
 8001f0c:	f7fe fc1e 	bl	800074c <myDebug>

						OBC_UART_RX[0] = 0x53;	//header
 8001f10:	4b81      	ldr	r3, [pc, #516]	; (8002118 <main+0xe44>)
 8001f12:	2253      	movs	r2, #83	; 0x53
 8001f14:	701a      	strb	r2, [r3, #0]
						OBC_UART_RX[1] = 0xac;	//packet_ type
 8001f16:	4b80      	ldr	r3, [pc, #512]	; (8002118 <main+0xe44>)
 8001f18:	22ac      	movs	r2, #172	; 0xac
 8001f1a:	705a      	strb	r2, [r3, #1]
						OBC_UART_RX[2] = 0x04;	//length of info
 8001f1c:	4b7e      	ldr	r3, [pc, #504]	; (8002118 <main+0xe44>)
 8001f1e:	2204      	movs	r2, #4
 8001f20:	709a      	strb	r2, [r3, #2]
						OBC_UART_RX[3] = 0x02;	//mcu_no
 8001f22:	4b7d      	ldr	r3, [pc, #500]	; (8002118 <main+0xe44>)
 8001f24:	2202      	movs	r2, #2
 8001f26:	70da      	strb	r2, [r3, #3]
						OBC_UART_RX[4] = 0x01;	//Digipeater ON
 8001f28:	4b7b      	ldr	r3, [pc, #492]	; (8002118 <main+0xe44>)
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	711a      	strb	r2, [r3, #4]
						OBC_UART_RX[5] = 0xdd;	//Digipeater prefix
 8001f2e:	4b7a      	ldr	r3, [pc, #488]	; (8002118 <main+0xe44>)
 8001f30:	22dd      	movs	r2, #221	; 0xdd
 8001f32:	715a      	strb	r2, [r3, #5]
						obc_ilen = OBC_UART_RX[2];
 8001f34:	4b78      	ldr	r3, [pc, #480]	; (8002118 <main+0xe44>)
 8001f36:	789a      	ldrb	r2, [r3, #2]
 8001f38:	4b78      	ldr	r3, [pc, #480]	; (800211c <main+0xe48>)
 8001f3a:	701a      	strb	r2, [r3, #0]

						myDebug("\nCommand sent to OBC, Length: %d bytes\r\n",
 8001f3c:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8001f40:	4877      	ldr	r0, [pc, #476]	; (8002120 <main+0xe4c>)
 8001f42:	f7fe fc03 	bl	800074c <myDebug>
								gs_cmd_len);

						if (HAL_UART_Transmit(&huart2, main_gs_cmd,
 8001f46:	b2a2      	uxth	r2, r4
 8001f48:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001f4c:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8001f4e:	4875      	ldr	r0, [pc, #468]	; (8002124 <main+0xe50>)
 8001f50:	f004 fbf5 	bl	800673e <HAL_UART_Transmit>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d009      	beq.n	8001f6e <main+0xc9a>
								sizeof(main_gs_cmd), 2000) == HAL_OK
								|| HAL_UART_Transmit(&hlpuart1, main_gs_cmd,
 8001f5a:	b2a2      	uxth	r2, r4
 8001f5c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001f60:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8001f62:	4871      	ldr	r0, [pc, #452]	; (8002128 <main+0xe54>)
 8001f64:	f004 fbeb 	bl	800673e <HAL_UART_Transmit>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d033      	beq.n	8001fd6 <main+0xd02>
										sizeof(main_gs_cmd), 2000)) {

							for (int i = 0; i < gs_cmd_len; i++) {
 8001f6e:	2300      	movs	r3, #0
 8001f70:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001f74:	e00d      	b.n	8001f92 <main+0xcbe>
								myDebug("%02x ", main_gs_cmd[i]);
 8001f76:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001f78:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001f7c:	4413      	add	r3, r2
 8001f7e:	781b      	ldrb	r3, [r3, #0]
 8001f80:	4619      	mov	r1, r3
 8001f82:	486a      	ldr	r0, [pc, #424]	; (800212c <main+0xe58>)
 8001f84:	f7fe fbe2 	bl	800074c <myDebug>
							for (int i = 0; i < gs_cmd_len; i++) {
 8001f88:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001f8c:	3301      	adds	r3, #1
 8001f8e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001f92:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001f96:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001f9a:	429a      	cmp	r2, r3
 8001f9c:	dbeb      	blt.n	8001f76 <main+0xca2>
							}

							myDebug("\r\n");
 8001f9e:	4864      	ldr	r0, [pc, #400]	; (8002130 <main+0xe5c>)
 8001fa0:	f7fe fbd4 	bl	800074c <myDebug>

							memset(main_gs_cmd, '\0', sizeof(main_gs_cmd));
 8001fa4:	4623      	mov	r3, r4
 8001fa6:	461a      	mov	r2, r3
 8001fa8:	2100      	movs	r1, #0
 8001faa:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8001fac:	f009 fe16 	bl	800bbdc <memset>
							memset(rx_buffer, '\0', sizeof(rx_buffer));
 8001fb0:	2269      	movs	r2, #105	; 0x69
 8001fb2:	2100      	movs	r1, #0
 8001fb4:	485f      	ldr	r0, [pc, #380]	; (8002134 <main+0xe60>)
 8001fb6:	f009 fe11 	bl	800bbdc <memset>
							memset(crc_buff, '\0', sizeof(crc_buff));
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	461a      	mov	r2, r3
 8001fbe:	2100      	movs	r1, #0
 8001fc0:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8001fc4:	f009 fe0a 	bl	800bbdc <memset>
							memset(gs_cmd_buff, '\0', sizeof(gs_cmd_buff));
 8001fc8:	f107 0314 	add.w	r3, r7, #20
 8001fcc:	2264      	movs	r2, #100	; 0x64
 8001fce:	2100      	movs	r1, #0
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f009 fe03 	bl	800bbdc <memset>
						}

						OBC_SUCCESS_DATA_RX_FLAG = 1;
 8001fd6:	4b4d      	ldr	r3, [pc, #308]	; (800210c <main+0xe38>)
 8001fd8:	2201      	movs	r2, #1
 8001fda:	601a      	str	r2, [r3, #0]
 8001fdc:	e080      	b.n	80020e0 <main+0xe0c>

					} else if (main_gs_cmd[18] == 0x53
 8001fde:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001fe0:	7c9b      	ldrb	r3, [r3, #18]
 8001fe2:	2b53      	cmp	r3, #83	; 0x53
 8001fe4:	d12a      	bne.n	800203c <main+0xd68>
							&& main_gs_cmd[19] == 0x02
 8001fe6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001fe8:	7cdb      	ldrb	r3, [r3, #19]
 8001fea:	2b02      	cmp	r3, #2
 8001fec:	d126      	bne.n	800203c <main+0xd68>
							&& main_gs_cmd[20] == 0x53) { // Digipeater Packet
 8001fee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001ff0:	7d1b      	ldrb	r3, [r3, #20]
 8001ff2:	2b53      	cmp	r3, #83	; 0x53
 8001ff4:	d122      	bne.n	800203c <main+0xd68>

						myDebug("\n********GS Command failed: 0x%x\r\n");
 8001ff6:	4850      	ldr	r0, [pc, #320]	; (8002138 <main+0xe64>)
 8001ff8:	f7fe fba8 	bl	800074c <myDebug>

						OBC_UART_RX[0] = 0x53;	//header
 8001ffc:	4b46      	ldr	r3, [pc, #280]	; (8002118 <main+0xe44>)
 8001ffe:	2253      	movs	r2, #83	; 0x53
 8002000:	701a      	strb	r2, [r3, #0]
						OBC_UART_RX[1] = 0xac;	//packet_ type
 8002002:	4b45      	ldr	r3, [pc, #276]	; (8002118 <main+0xe44>)
 8002004:	22ac      	movs	r2, #172	; 0xac
 8002006:	705a      	strb	r2, [r3, #1]
						OBC_UART_RX[2] = 0x04;	//length of info
 8002008:	4b43      	ldr	r3, [pc, #268]	; (8002118 <main+0xe44>)
 800200a:	2204      	movs	r2, #4
 800200c:	709a      	strb	r2, [r3, #2]
						OBC_UART_RX[3] = 0x02;	//mcu_no
 800200e:	4b42      	ldr	r3, [pc, #264]	; (8002118 <main+0xe44>)
 8002010:	2202      	movs	r2, #2
 8002012:	70da      	strb	r2, [r3, #3]
						OBC_UART_RX[4] = 0xfc;	//false command
 8002014:	4b40      	ldr	r3, [pc, #256]	; (8002118 <main+0xe44>)
 8002016:	22fc      	movs	r2, #252	; 0xfc
 8002018:	711a      	strb	r2, [r3, #4]
						OBC_UART_RX[5] = 0xee;	//error prefix
 800201a:	4b3f      	ldr	r3, [pc, #252]	; (8002118 <main+0xe44>)
 800201c:	22ee      	movs	r2, #238	; 0xee
 800201e:	715a      	strb	r2, [r3, #5]
						obc_ilen = OBC_UART_RX[2];
 8002020:	4b3d      	ldr	r3, [pc, #244]	; (8002118 <main+0xe44>)
 8002022:	789a      	ldrb	r2, [r3, #2]
 8002024:	4b3d      	ldr	r3, [pc, #244]	; (800211c <main+0xe48>)
 8002026:	701a      	strb	r2, [r3, #0]

						OBC_SUCCESS_DATA_RX_FLAG = 1;
 8002028:	4b38      	ldr	r3, [pc, #224]	; (800210c <main+0xe38>)
 800202a:	2201      	movs	r2, #1
 800202c:	601a      	str	r2, [r3, #0]

						memset(main_gs_cmd, '\0', sizeof(main_gs_cmd));
 800202e:	4623      	mov	r3, r4
 8002030:	461a      	mov	r2, r3
 8002032:	2100      	movs	r1, #0
 8002034:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8002036:	f009 fdd1 	bl	800bbdc <memset>
 800203a:	e051      	b.n	80020e0 <main+0xe0c>

					} else {
						myDebug("\nCommand sent to OBC, Length: %d bytes\r\n",
 800203c:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8002040:	4837      	ldr	r0, [pc, #220]	; (8002120 <main+0xe4c>)
 8002042:	f7fe fb83 	bl	800074c <myDebug>
								gs_cmd_len);

						if (HAL_UART_Transmit(&huart2, main_gs_cmd,
 8002046:	b2a2      	uxth	r2, r4
 8002048:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800204c:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800204e:	4835      	ldr	r0, [pc, #212]	; (8002124 <main+0xe50>)
 8002050:	f004 fb75 	bl	800673e <HAL_UART_Transmit>
 8002054:	4603      	mov	r3, r0
 8002056:	2b00      	cmp	r3, #0
 8002058:	d009      	beq.n	800206e <main+0xd9a>
								sizeof(main_gs_cmd), 2000) == HAL_OK
								|| HAL_UART_Transmit(&hlpuart1, main_gs_cmd,
 800205a:	b2a2      	uxth	r2, r4
 800205c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002060:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8002062:	4831      	ldr	r0, [pc, #196]	; (8002128 <main+0xe54>)
 8002064:	f004 fb6b 	bl	800673e <HAL_UART_Transmit>
 8002068:	4603      	mov	r3, r0
 800206a:	2b00      	cmp	r3, #0
 800206c:	d038      	beq.n	80020e0 <main+0xe0c>
										sizeof(main_gs_cmd), 2000)) {

							for (int i = 0; i < gs_cmd_len; i++) {
 800206e:	2300      	movs	r3, #0
 8002070:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002074:	e00d      	b.n	8002092 <main+0xdbe>
								myDebug("%02x ", main_gs_cmd[i]);
 8002076:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002078:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800207c:	4413      	add	r3, r2
 800207e:	781b      	ldrb	r3, [r3, #0]
 8002080:	4619      	mov	r1, r3
 8002082:	482a      	ldr	r0, [pc, #168]	; (800212c <main+0xe58>)
 8002084:	f7fe fb62 	bl	800074c <myDebug>
							for (int i = 0; i < gs_cmd_len; i++) {
 8002088:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800208c:	3301      	adds	r3, #1
 800208e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002092:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8002096:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800209a:	429a      	cmp	r2, r3
 800209c:	dbeb      	blt.n	8002076 <main+0xda2>
							}

							myDebug("\r\n");
 800209e:	4824      	ldr	r0, [pc, #144]	; (8002130 <main+0xe5c>)
 80020a0:	f7fe fb54 	bl	800074c <myDebug>

							memset(main_gs_cmd, '\0', sizeof(main_gs_cmd));
 80020a4:	4623      	mov	r3, r4
 80020a6:	461a      	mov	r2, r3
 80020a8:	2100      	movs	r1, #0
 80020aa:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 80020ac:	f009 fd96 	bl	800bbdc <memset>
							memset(rx_buffer, '\0', sizeof(rx_buffer));
 80020b0:	2269      	movs	r2, #105	; 0x69
 80020b2:	2100      	movs	r1, #0
 80020b4:	481f      	ldr	r0, [pc, #124]	; (8002134 <main+0xe60>)
 80020b6:	f009 fd91 	bl	800bbdc <memset>
							memset(crc_buff, '\0', sizeof(crc_buff));
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	461a      	mov	r2, r3
 80020be:	2100      	movs	r1, #0
 80020c0:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 80020c4:	f009 fd8a 	bl	800bbdc <memset>
							memset(gs_cmd_buff, '\0', sizeof(gs_cmd_buff));
 80020c8:	f107 0314 	add.w	r3, r7, #20
 80020cc:	2264      	movs	r2, #100	; 0x64
 80020ce:	2100      	movs	r1, #0
 80020d0:	4618      	mov	r0, r3
 80020d2:	f009 fd83 	bl	800bbdc <memset>

							myDebug("\n\n_____OBC__RECEIVER_____\r\n");
 80020d6:	4819      	ldr	r0, [pc, #100]	; (800213c <main+0xe68>)
 80020d8:	f7fe fb38 	bl	800074c <myDebug>
 80020dc:	e000      	b.n	80020e0 <main+0xe0c>
						if (HAL_UART_Transmit(&huart2, main_gs_cmd,
 80020de:	bf00      	nop
 80020e0:	f8d7 d008 	ldr.w	sp, [r7, #8]
					}
				}
			}
		}

		HAL_UART_Receive_DMA(&huart2, OBC_UART_RX, obc_plen);
 80020e4:	4b16      	ldr	r3, [pc, #88]	; (8002140 <main+0xe6c>)
 80020e6:	781b      	ldrb	r3, [r3, #0]
 80020e8:	b29b      	uxth	r3, r3
 80020ea:	461a      	mov	r2, r3
 80020ec:	490a      	ldr	r1, [pc, #40]	; (8002118 <main+0xe44>)
 80020ee:	480d      	ldr	r0, [pc, #52]	; (8002124 <main+0xe50>)
 80020f0:	f004 fc70 	bl	80069d4 <HAL_UART_Receive_DMA>

		HAL_UART_Receive_DMA(&hlpuart1, OBC_UART_RX, obc_plen);
 80020f4:	4b12      	ldr	r3, [pc, #72]	; (8002140 <main+0xe6c>)
 80020f6:	781b      	ldrb	r3, [r3, #0]
 80020f8:	b29b      	uxth	r3, r3
 80020fa:	461a      	mov	r2, r3
 80020fc:	4906      	ldr	r1, [pc, #24]	; (8002118 <main+0xe44>)
 80020fe:	480a      	ldr	r0, [pc, #40]	; (8002128 <main+0xe54>)
 8002100:	f004 fc68 	bl	80069d4 <HAL_UART_Receive_DMA>
		MX_SubGHz_Phy_Process();
 8002104:	f7ff b99c 	b.w	8001440 <main+0x16c>
 8002108:	20000004 	.word	0x20000004
 800210c:	20000370 	.word	0x20000370
 8002110:	200004ac 	.word	0x200004ac
 8002114:	0800cac4 	.word	0x0800cac4
 8002118:	20000318 	.word	0x20000318
 800211c:	20000316 	.word	0x20000316
 8002120:	0800ca7c 	.word	0x0800ca7c
 8002124:	20000658 	.word	0x20000658
 8002128:	20000530 	.word	0x20000530
 800212c:	0800c708 	.word	0x0800c708
 8002130:	0800c710 	.word	0x0800c710
 8002134:	200002ac 	.word	0x200002ac
 8002138:	0800ca38 	.word	0x0800ca38
 800213c:	0800caa8 	.word	0x0800caa8
 8002140:	20000001 	.word	0x20000001

08002144 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8002144:	b580      	push	{r7, lr}
 8002146:	b09a      	sub	sp, #104	; 0x68
 8002148:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800214a:	f107 0320 	add.w	r3, r7, #32
 800214e:	2248      	movs	r2, #72	; 0x48
 8002150:	2100      	movs	r1, #0
 8002152:	4618      	mov	r0, r3
 8002154:	f009 fd42 	bl	800bbdc <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8002158:	1d3b      	adds	r3, r7, #4
 800215a:	2200      	movs	r2, #0
 800215c:	601a      	str	r2, [r3, #0]
 800215e:	605a      	str	r2, [r3, #4]
 8002160:	609a      	str	r2, [r3, #8]
 8002162:	60da      	str	r2, [r3, #12]
 8002164:	611a      	str	r2, [r3, #16]
 8002166:	615a      	str	r2, [r3, #20]
 8002168:	619a      	str	r2, [r3, #24]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800216a:	4b25      	ldr	r3, [pc, #148]	; (8002200 <SystemClock_Config+0xbc>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002172:	4a23      	ldr	r2, [pc, #140]	; (8002200 <SystemClock_Config+0xbc>)
 8002174:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002178:	6013      	str	r3, [r2, #0]
 800217a:	4b21      	ldr	r3, [pc, #132]	; (8002200 <SystemClock_Config+0xbc>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002182:	603b      	str	r3, [r7, #0]
 8002184:	683b      	ldr	r3, [r7, #0]

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002186:	2301      	movs	r3, #1
 8002188:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS_PWR;
 800218a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800218e:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.HSEDiv = RCC_HSE_DIV1;
 8002190:	2300      	movs	r3, #0
 8002192:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002194:	2302      	movs	r3, #2
 8002196:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002198:	2303      	movs	r3, #3
 800219a:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 800219c:	2310      	movs	r3, #16
 800219e:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLN = 6;
 80021a0:	2306      	movs	r3, #6
 80021a2:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80021a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80021a8:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80021aa:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80021ae:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80021b0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80021b4:	663b      	str	r3, [r7, #96]	; 0x60
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80021b6:	f107 0320 	add.w	r3, r7, #32
 80021ba:	4618      	mov	r0, r3
 80021bc:	f002 fa7a 	bl	80046b4 <HAL_RCC_OscConfig>
 80021c0:	4603      	mov	r3, r0
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d001      	beq.n	80021ca <SystemClock_Config+0x86>
		Error_Handler();
 80021c6:	f000 faa1 	bl	800270c <Error_Handler>
	}

	/** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3 | RCC_CLOCKTYPE_HCLK
 80021ca:	234f      	movs	r3, #79	; 0x4f
 80021cc:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80021ce:	2303      	movs	r3, #3
 80021d0:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80021d2:	2300      	movs	r3, #0
 80021d4:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80021d6:	2300      	movs	r3, #0
 80021d8:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80021da:	2300      	movs	r3, #0
 80021dc:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 80021de:	2300      	movs	r3, #0
 80021e0:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80021e2:	1d3b      	adds	r3, r7, #4
 80021e4:	2102      	movs	r1, #2
 80021e6:	4618      	mov	r0, r3
 80021e8:	f002 fde6 	bl	8004db8 <HAL_RCC_ClockConfig>
 80021ec:	4603      	mov	r3, r0
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d001      	beq.n	80021f6 <SystemClock_Config+0xb2>
		Error_Handler();
 80021f2:	f000 fa8b 	bl	800270c <Error_Handler>
	}
}
 80021f6:	bf00      	nop
 80021f8:	3768      	adds	r7, #104	; 0x68
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	58000400 	.word	0x58000400

08002204 <DioIrqHndlr>:

/* USER CODE BEGIN 4 */
void DioIrqHndlr(RadioIrqMasks_t radioIrq) {
 8002204:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002208:	b091      	sub	sp, #68	; 0x44
 800220a:	af00      	add	r7, sp, #0
 800220c:	4603      	mov	r3, r0
 800220e:	81fb      	strh	r3, [r7, #14]
	if (radioIrq == IRQ_TX_DONE) {
 8002210:	89fb      	ldrh	r3, [r7, #14]
 8002212:	2b01      	cmp	r3, #1
 8002214:	f040 80c7 	bne.w	80023a6 <DioIrqHndlr+0x1a2>
		OBC_SUCCESS_DATA_RX_FLAG = 0;
 8002218:	4b8b      	ldr	r3, [pc, #556]	; (8002448 <DioIrqHndlr+0x244>)
 800221a:	2200      	movs	r2, #0
 800221c:	601a      	str	r2, [r3, #0]

		myDebug("\nSatellite Data Transmitted Successful, Length: %d bytes\r\n",
 800221e:	4b8b      	ldr	r3, [pc, #556]	; (800244c <DioIrqHndlr+0x248>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4619      	mov	r1, r3
 8002224:	488a      	ldr	r0, [pc, #552]	; (8002450 <DioIrqHndlr+0x24c>)
 8002226:	f7fe fa91 	bl	800074c <myDebug>
				tx_buffer_len);
		for (int i = 0; i < tx_buffer_len; i++) {
 800222a:	2300      	movs	r3, #0
 800222c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800222e:	e00a      	b.n	8002246 <DioIrqHndlr+0x42>
			myDebug("%02x ", tx_buffer[i]);
 8002230:	4a88      	ldr	r2, [pc, #544]	; (8002454 <DioIrqHndlr+0x250>)
 8002232:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002234:	4413      	add	r3, r2
 8002236:	781b      	ldrb	r3, [r3, #0]
 8002238:	4619      	mov	r1, r3
 800223a:	4887      	ldr	r0, [pc, #540]	; (8002458 <DioIrqHndlr+0x254>)
 800223c:	f7fe fa86 	bl	800074c <myDebug>
		for (int i = 0; i < tx_buffer_len; i++) {
 8002240:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002242:	3301      	adds	r3, #1
 8002244:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002246:	4b81      	ldr	r3, [pc, #516]	; (800244c <DioIrqHndlr+0x248>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800224c:	429a      	cmp	r2, r3
 800224e:	dbef      	blt.n	8002230 <DioIrqHndlr+0x2c>
		}
		myDebug("\r\n");
 8002250:	4882      	ldr	r0, [pc, #520]	; (800245c <DioIrqHndlr+0x258>)
 8002252:	f7fe fa7b 	bl	800074c <myDebug>

		memset(tx_buffer, '\0', sizeof(tx_buffer));
 8002256:	2296      	movs	r2, #150	; 0x96
 8002258:	2100      	movs	r1, #0
 800225a:	487e      	ldr	r0, [pc, #504]	; (8002454 <DioIrqHndlr+0x250>)
 800225c:	f009 fcbe 	bl	800bbdc <memset>

		if (PACKET_TYPE == 0xB1 || PACKET_TYPE == 0xB2) {
 8002260:	4b7f      	ldr	r3, [pc, #508]	; (8002460 <DioIrqHndlr+0x25c>)
 8002262:	781b      	ldrb	r3, [r3, #0]
 8002264:	2bb1      	cmp	r3, #177	; 0xb1
 8002266:	d003      	beq.n	8002270 <DioIrqHndlr+0x6c>
 8002268:	4b7d      	ldr	r3, [pc, #500]	; (8002460 <DioIrqHndlr+0x25c>)
 800226a:	781b      	ldrb	r3, [r3, #0]
 800226c:	2bb2      	cmp	r3, #178	; 0xb2
 800226e:	d10c      	bne.n	800228a <DioIrqHndlr+0x86>
			BEACON_COUNT--;
 8002270:	4b7c      	ldr	r3, [pc, #496]	; (8002464 <DioIrqHndlr+0x260>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	3b01      	subs	r3, #1
 8002276:	4a7b      	ldr	r2, [pc, #492]	; (8002464 <DioIrqHndlr+0x260>)
 8002278:	6013      	str	r3, [r2, #0]
			COUNT_BEACON--;
 800227a:	4b7b      	ldr	r3, [pc, #492]	; (8002468 <DioIrqHndlr+0x264>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	3b01      	subs	r3, #1
 8002280:	4a79      	ldr	r2, [pc, #484]	; (8002468 <DioIrqHndlr+0x264>)
 8002282:	6013      	str	r3, [r2, #0]
			PACKET_TYPE = 0;
 8002284:	4b76      	ldr	r3, [pc, #472]	; (8002460 <DioIrqHndlr+0x25c>)
 8002286:	2200      	movs	r2, #0
 8002288:	701a      	strb	r2, [r3, #0]
		}

		if (DIGIPEATER_FLAG) {
 800228a:	4b78      	ldr	r3, [pc, #480]	; (800246c <DioIrqHndlr+0x268>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d00e      	beq.n	80022b0 <DioIrqHndlr+0xac>
			BEACON_COUNT = 2;
 8002292:	4b74      	ldr	r3, [pc, #464]	; (8002464 <DioIrqHndlr+0x260>)
 8002294:	2202      	movs	r2, #2
 8002296:	601a      	str	r2, [r3, #0]
			OBC_SUCCESS_DATA_RX_FLAG = 0;
 8002298:	4b6b      	ldr	r3, [pc, #428]	; (8002448 <DioIrqHndlr+0x244>)
 800229a:	2200      	movs	r2, #0
 800229c:	601a      	str	r2, [r3, #0]
			DIGIPEATER_STATUS = 0;
 800229e:	4b74      	ldr	r3, [pc, #464]	; (8002470 <DioIrqHndlr+0x26c>)
 80022a0:	2200      	movs	r2, #0
 80022a2:	601a      	str	r2, [r3, #0]
			DIGIPEATER_FLAG = 0;
 80022a4:	4b71      	ldr	r3, [pc, #452]	; (800246c <DioIrqHndlr+0x268>)
 80022a6:	2200      	movs	r2, #0
 80022a8:	601a      	str	r2, [r3, #0]
			DIGIPEATER_RX_FLAG = 0;
 80022aa:	4b72      	ldr	r3, [pc, #456]	; (8002474 <DioIrqHndlr+0x270>)
 80022ac:	2200      	movs	r2, #0
 80022ae:	601a      	str	r2, [r3, #0]
		}

		if (BEACON_COUNT == 0) {
 80022b0:	4b6c      	ldr	r3, [pc, #432]	; (8002464 <DioIrqHndlr+0x260>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d109      	bne.n	80022cc <DioIrqHndlr+0xc8>
			OBC_SUCCESS_DATA_RX_FLAG = 0;
 80022b8:	4b63      	ldr	r3, [pc, #396]	; (8002448 <DioIrqHndlr+0x244>)
 80022ba:	2200      	movs	r2, #0
 80022bc:	601a      	str	r2, [r3, #0]
			DIGIPEATER_STATUS = 1;
 80022be:	4b6c      	ldr	r3, [pc, #432]	; (8002470 <DioIrqHndlr+0x26c>)
 80022c0:	2201      	movs	r2, #1
 80022c2:	601a      	str	r2, [r3, #0]
			myDebug("\n########## Digipeater Mode Configuration: ##########\n");
 80022c4:	486c      	ldr	r0, [pc, #432]	; (8002478 <DioIrqHndlr+0x274>)
 80022c6:	f7fe fa41 	bl	800074c <myDebug>
 80022ca:	e002      	b.n	80022d2 <DioIrqHndlr+0xce>
		} else {
			DIGIPEATER_STATUS = 0;
 80022cc:	4b68      	ldr	r3, [pc, #416]	; (8002470 <DioIrqHndlr+0x26c>)
 80022ce:	2200      	movs	r2, #0
 80022d0:	601a      	str	r2, [r3, #0]
		}

		delay_us(500000);
 80022d2:	486a      	ldr	r0, [pc, #424]	; (800247c <DioIrqHndlr+0x278>)
 80022d4:	f7fe fa20 	bl	8000718 <delay_us>

		setPacketParams(rx_buffer_len);
 80022d8:	4b69      	ldr	r3, [pc, #420]	; (8002480 <DioIrqHndlr+0x27c>)
 80022da:	781b      	ldrb	r3, [r3, #0]
 80022dc:	4618      	mov	r0, r3
 80022de:	f7fe fd37 	bl	8000d50 <setPacketParams>
		setModulationParams(GFSK_BR_1200, GFSK_FDEV_1200);
 80022e2:	f640 31b8 	movw	r1, #3000	; 0xbb8
 80022e6:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 80022ea:	f7fe fd5b 	bl	8000da4 <setModulationParams>
		radioConfig(rx_buffer, rx_buffer_len);
 80022ee:	4b64      	ldr	r3, [pc, #400]	; (8002480 <DioIrqHndlr+0x27c>)
 80022f0:	781b      	ldrb	r3, [r3, #0]
 80022f2:	4619      	mov	r1, r3
 80022f4:	4863      	ldr	r0, [pc, #396]	; (8002484 <DioIrqHndlr+0x280>)
 80022f6:	f7fe fd73 	bl	8000de0 <radioConfig>

		myDebug("\n########## RX Configuration: ##########\n");
 80022fa:	4863      	ldr	r0, [pc, #396]	; (8002488 <DioIrqHndlr+0x284>)
 80022fc:	f7fe fa26 	bl	800074c <myDebug>

		myDebug("FREQUENCY MODS: UPLINK FREQ: %lu Hz\r\n", FREQ_435_MHZ);
 8002300:	4962      	ldr	r1, [pc, #392]	; (800248c <DioIrqHndlr+0x288>)
 8002302:	4863      	ldr	r0, [pc, #396]	; (8002490 <DioIrqHndlr+0x28c>)
 8002304:	f7fe fa22 	bl	800074c <myDebug>
		myDebug("Bit Rate: 	%d\n\r", mod_params.Params.Gfsk.BitRate);
 8002308:	4b62      	ldr	r3, [pc, #392]	; (8002494 <DioIrqHndlr+0x290>)
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	4619      	mov	r1, r3
 800230e:	4862      	ldr	r0, [pc, #392]	; (8002498 <DioIrqHndlr+0x294>)
 8002310:	f7fe fa1c 	bl	800074c <myDebug>
		myDebug("Frequency Deviation: 	%d\n\r", mod_params.Params.Gfsk.Fdev);
 8002314:	4b5f      	ldr	r3, [pc, #380]	; (8002494 <DioIrqHndlr+0x290>)
 8002316:	689b      	ldr	r3, [r3, #8]
 8002318:	4619      	mov	r1, r3
 800231a:	4860      	ldr	r0, [pc, #384]	; (800249c <DioIrqHndlr+0x298>)
 800231c:	f7fe fa16 	bl	800074c <myDebug>
		myDebug("RECEVING BANDWIDTH: 	%d\n\r",
				mod_params.Params.Gfsk.Bandwidth);
 8002320:	4b5c      	ldr	r3, [pc, #368]	; (8002494 <DioIrqHndlr+0x290>)
 8002322:	7b5b      	ldrb	r3, [r3, #13]
		myDebug("RECEVING BANDWIDTH: 	%d\n\r",
 8002324:	4619      	mov	r1, r3
 8002326:	485e      	ldr	r0, [pc, #376]	; (80024a0 <DioIrqHndlr+0x29c>)
 8002328:	f7fe fa10 	bl	800074c <myDebug>
		myDebug("Packet Type 			%d\n\r", pkt_params.PacketType);
 800232c:	4b5d      	ldr	r3, [pc, #372]	; (80024a4 <DioIrqHndlr+0x2a0>)
 800232e:	781b      	ldrb	r3, [r3, #0]
 8002330:	4619      	mov	r1, r3
 8002332:	485d      	ldr	r0, [pc, #372]	; (80024a8 <DioIrqHndlr+0x2a4>)
 8002334:	f7fe fa0a 	bl	800074c <myDebug>
		myDebug("PayloadLength 			%d\n\r",
				pkt_params.Params.Gfsk.PayloadLength);
 8002338:	4b5a      	ldr	r3, [pc, #360]	; (80024a4 <DioIrqHndlr+0x2a0>)
 800233a:	7a1b      	ldrb	r3, [r3, #8]
		myDebug("PayloadLength 			%d\n\r",
 800233c:	4619      	mov	r1, r3
 800233e:	485b      	ldr	r0, [pc, #364]	; (80024ac <DioIrqHndlr+0x2a8>)
 8002340:	f7fe fa04 	bl	800074c <myDebug>
		myDebug("PreambleLength 		%d\n\r",
				pkt_params.Params.Gfsk.PreambleLength);
 8002344:	4b57      	ldr	r3, [pc, #348]	; (80024a4 <DioIrqHndlr+0x2a0>)
 8002346:	885b      	ldrh	r3, [r3, #2]
		myDebug("PreambleLength 		%d\n\r",
 8002348:	4619      	mov	r1, r3
 800234a:	4859      	ldr	r0, [pc, #356]	; (80024b0 <DioIrqHndlr+0x2ac>)
 800234c:	f7fe f9fe 	bl	800074c <myDebug>
		myDebug("PreambleMinDetect		%d\n\r",
				pkt_params.Params.Gfsk.PreambleMinDetect);
 8002350:	4b54      	ldr	r3, [pc, #336]	; (80024a4 <DioIrqHndlr+0x2a0>)
 8002352:	791b      	ldrb	r3, [r3, #4]
		myDebug("PreambleMinDetect		%d\n\r",
 8002354:	4619      	mov	r1, r3
 8002356:	4857      	ldr	r0, [pc, #348]	; (80024b4 <DioIrqHndlr+0x2b0>)
 8002358:	f7fe f9f8 	bl	800074c <myDebug>
		myDebug("HeaderType 			%d\n\r", pkt_params.Params.Gfsk.HeaderType);
 800235c:	4b51      	ldr	r3, [pc, #324]	; (80024a4 <DioIrqHndlr+0x2a0>)
 800235e:	79db      	ldrb	r3, [r3, #7]
 8002360:	4619      	mov	r1, r3
 8002362:	4855      	ldr	r0, [pc, #340]	; (80024b8 <DioIrqHndlr+0x2b4>)
 8002364:	f7fe f9f2 	bl	800074c <myDebug>
		myDebug("__________*******************__________\r\n");
 8002368:	4854      	ldr	r0, [pc, #336]	; (80024bc <DioIrqHndlr+0x2b8>)
 800236a:	f7fe f9ef 	bl	800074c <myDebug>

		SUBGRF_SetRfFrequency(FREQ_435_MHZ);
 800236e:	4847      	ldr	r0, [pc, #284]	; (800248c <DioIrqHndlr+0x288>)
 8002370:	f008 f9ee 	bl	800a750 <SUBGRF_SetRfFrequency>
		SUBGRF_SetSwitch(RFO_LP, RFSWITCH_RX); /*Set RF switch*/
 8002374:	2100      	movs	r1, #0
 8002376:	2001      	movs	r0, #1
 8002378:	f008 fe32 	bl	800afe0 <SUBGRF_SetSwitch>
		SUBGRF_SetRxBoosted(0xFFFFFF);
 800237c:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8002380:	f008 f812 	bl	800a3a8 <SUBGRF_SetRxBoosted>

		HAL_UART_Receive_DMA(&huart2, OBC_UART_RX, obc_plen);
 8002384:	4b4e      	ldr	r3, [pc, #312]	; (80024c0 <DioIrqHndlr+0x2bc>)
 8002386:	781b      	ldrb	r3, [r3, #0]
 8002388:	b29b      	uxth	r3, r3
 800238a:	461a      	mov	r2, r3
 800238c:	494d      	ldr	r1, [pc, #308]	; (80024c4 <DioIrqHndlr+0x2c0>)
 800238e:	484e      	ldr	r0, [pc, #312]	; (80024c8 <DioIrqHndlr+0x2c4>)
 8002390:	f004 fb20 	bl	80069d4 <HAL_UART_Receive_DMA>

		HAL_UART_Receive_DMA(&hlpuart1, OBC_UART_RX, obc_plen);
 8002394:	4b4a      	ldr	r3, [pc, #296]	; (80024c0 <DioIrqHndlr+0x2bc>)
 8002396:	781b      	ldrb	r3, [r3, #0]
 8002398:	b29b      	uxth	r3, r3
 800239a:	461a      	mov	r2, r3
 800239c:	4949      	ldr	r1, [pc, #292]	; (80024c4 <DioIrqHndlr+0x2c0>)
 800239e:	484b      	ldr	r0, [pc, #300]	; (80024cc <DioIrqHndlr+0x2c8>)
 80023a0:	f004 fb18 	bl	80069d4 <HAL_UART_Receive_DMA>

		return;
 80023a4:	e191      	b.n	80026ca <DioIrqHndlr+0x4c6>

	}

	if (radioIrq == IRQ_RX_DONE) {
 80023a6:	89fb      	ldrh	r3, [r7, #14]
 80023a8:	2b02      	cmp	r3, #2
 80023aa:	f040 815b 	bne.w	8002664 <DioIrqHndlr+0x460>
		SUBGRF_GetPayload(rx_buffer, &rx_buffer_len, RX_BUFF_LENGTH);
 80023ae:	2269      	movs	r2, #105	; 0x69
 80023b0:	4933      	ldr	r1, [pc, #204]	; (8002480 <DioIrqHndlr+0x27c>)
 80023b2:	4834      	ldr	r0, [pc, #208]	; (8002484 <DioIrqHndlr+0x280>)
 80023b4:	f007 fe6c 	bl	800a090 <SUBGRF_GetPayload>
		rssi_value = SUBGRF_GetRssiInst();
 80023b8:	f008 fc8b 	bl	800acd2 <SUBGRF_GetRssiInst>
 80023bc:	4603      	mov	r3, r0
 80023be:	b2da      	uxtb	r2, r3
 80023c0:	4b43      	ldr	r3, [pc, #268]	; (80024d0 <DioIrqHndlr+0x2cc>)
 80023c2:	701a      	strb	r2, [r3, #0]
		myDebug("\nGS Command Received: 0x%x\r\n");
 80023c4:	4843      	ldr	r0, [pc, #268]	; (80024d4 <DioIrqHndlr+0x2d0>)
 80023c6:	f7fe f9c1 	bl	800074c <myDebug>

		uint8_t temp_rx_buffer_len = 0;
 80023ca:	2300      	movs	r3, #0
 80023cc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		temp_rx_buffer_len = countsDataBetweenFlags(rx_buffer, rx_buffer_len); // 7e...7e, size
 80023d0:	4b2b      	ldr	r3, [pc, #172]	; (8002480 <DioIrqHndlr+0x27c>)
 80023d2:	781b      	ldrb	r3, [r3, #0]
 80023d4:	4619      	mov	r1, r3
 80023d6:	482b      	ldr	r0, [pc, #172]	; (8002484 <DioIrqHndlr+0x280>)
 80023d8:	f7fe fc84 	bl	8000ce4 <countsDataBetweenFlags>
 80023dc:	4603      	mov	r3, r0
 80023de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		if (temp_rx_buffer_len != -1) {
 80023e2:	466b      	mov	r3, sp
 80023e4:	60bb      	str	r3, [r7, #8]

			uint8_t temp_check_buff[temp_rx_buffer_len];
 80023e6:	f897 602f 	ldrb.w	r6, [r7, #47]	; 0x2f
 80023ea:	4633      	mov	r3, r6
 80023ec:	3b01      	subs	r3, #1
 80023ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80023f0:	b2f3      	uxtb	r3, r6
 80023f2:	2200      	movs	r2, #0
 80023f4:	603b      	str	r3, [r7, #0]
 80023f6:	607a      	str	r2, [r7, #4]
 80023f8:	f04f 0200 	mov.w	r2, #0
 80023fc:	f04f 0300 	mov.w	r3, #0
 8002400:	6879      	ldr	r1, [r7, #4]
 8002402:	00cb      	lsls	r3, r1, #3
 8002404:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002408:	4684      	mov	ip, r0
 800240a:	ea43 735c 	orr.w	r3, r3, ip, lsr #29
 800240e:	4601      	mov	r1, r0
 8002410:	00ca      	lsls	r2, r1, #3
 8002412:	b2f3      	uxtb	r3, r6
 8002414:	2200      	movs	r2, #0
 8002416:	469a      	mov	sl, r3
 8002418:	4693      	mov	fp, r2
 800241a:	f04f 0200 	mov.w	r2, #0
 800241e:	f04f 0300 	mov.w	r3, #0
 8002422:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002426:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800242a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800242e:	4633      	mov	r3, r6
 8002430:	3307      	adds	r3, #7
 8002432:	08db      	lsrs	r3, r3, #3
 8002434:	00db      	lsls	r3, r3, #3
 8002436:	ebad 0d03 	sub.w	sp, sp, r3
 800243a:	466b      	mov	r3, sp
 800243c:	3300      	adds	r3, #0
 800243e:	627b      	str	r3, [r7, #36]	; 0x24
			for (int i = 0; i < temp_rx_buffer_len; i++) {
 8002440:	2300      	movs	r3, #0
 8002442:	63bb      	str	r3, [r7, #56]	; 0x38
 8002444:	e05c      	b.n	8002500 <DioIrqHndlr+0x2fc>
 8002446:	bf00      	nop
 8002448:	20000370 	.word	0x20000370
 800244c:	200004a4 	.word	0x200004a4
 8002450:	0800cb40 	.word	0x0800cb40
 8002454:	2000040c 	.word	0x2000040c
 8002458:	0800c708 	.word	0x0800c708
 800245c:	0800c710 	.word	0x0800c710
 8002460:	200004b0 	.word	0x200004b0
 8002464:	20000004 	.word	0x20000004
 8002468:	20000008 	.word	0x20000008
 800246c:	200004b4 	.word	0x200004b4
 8002470:	200004ac 	.word	0x200004ac
 8002474:	200004b8 	.word	0x200004b8
 8002478:	0800cb7c 	.word	0x0800cb7c
 800247c:	0007a120 	.word	0x0007a120
 8002480:	20000000 	.word	0x20000000
 8002484:	200002ac 	.word	0x200002ac
 8002488:	0800c9e4 	.word	0x0800c9e4
 800248c:	19f25968 	.word	0x19f25968
 8002490:	0800ca10 	.word	0x0800ca10
 8002494:	20000290 	.word	0x20000290
 8002498:	0800c5a8 	.word	0x0800c5a8
 800249c:	0800c5b8 	.word	0x0800c5b8
 80024a0:	0800c5d4 	.word	0x0800c5d4
 80024a4:	2000027c 	.word	0x2000027c
 80024a8:	0800c5f0 	.word	0x0800c5f0
 80024ac:	0800c604 	.word	0x0800c604
 80024b0:	0800c61c 	.word	0x0800c61c
 80024b4:	0800c634 	.word	0x0800c634
 80024b8:	0800c64c 	.word	0x0800c64c
 80024bc:	0800c660 	.word	0x0800c660
 80024c0:	20000001 	.word	0x20000001
 80024c4:	20000318 	.word	0x20000318
 80024c8:	20000658 	.word	0x20000658
 80024cc:	20000530 	.word	0x20000530
 80024d0:	20000315 	.word	0x20000315
 80024d4:	0800cbb4 	.word	0x0800cbb4
				temp_check_buff[i] = rx_buffer[i];
 80024d8:	4a7e      	ldr	r2, [pc, #504]	; (80026d4 <DioIrqHndlr+0x4d0>)
 80024da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024dc:	4413      	add	r3, r2
 80024de:	7819      	ldrb	r1, [r3, #0]
 80024e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024e4:	4413      	add	r3, r2
 80024e6:	460a      	mov	r2, r1
 80024e8:	701a      	strb	r2, [r3, #0]
				myDebug("%02x ", temp_check_buff[i]);		//display 7e to 7e
 80024ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024ee:	4413      	add	r3, r2
 80024f0:	781b      	ldrb	r3, [r3, #0]
 80024f2:	4619      	mov	r1, r3
 80024f4:	4878      	ldr	r0, [pc, #480]	; (80026d8 <DioIrqHndlr+0x4d4>)
 80024f6:	f7fe f929 	bl	800074c <myDebug>
			for (int i = 0; i < temp_rx_buffer_len; i++) {
 80024fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024fc:	3301      	adds	r3, #1
 80024fe:	63bb      	str	r3, [r7, #56]	; 0x38
 8002500:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002504:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002506:	429a      	cmp	r2, r3
 8002508:	dbe6      	blt.n	80024d8 <DioIrqHndlr+0x2d4>
			}
			myDebug("\r\n");
 800250a:	4874      	ldr	r0, [pc, #464]	; (80026dc <DioIrqHndlr+0x4d8>)
 800250c:	f7fe f91e 	bl	800074c <myDebug>

			uint8_t crc_buff_len = temp_rx_buffer_len - 4;
 8002510:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002514:	3b04      	subs	r3, #4
 8002516:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			uint8_t crc_buff[crc_buff_len];
 800251a:	f897 1023 	ldrb.w	r1, [r7, #35]	; 0x23
 800251e:	460b      	mov	r3, r1
 8002520:	3b01      	subs	r3, #1
 8002522:	61fb      	str	r3, [r7, #28]
 8002524:	b2cb      	uxtb	r3, r1
 8002526:	2200      	movs	r2, #0
 8002528:	4698      	mov	r8, r3
 800252a:	4691      	mov	r9, r2
 800252c:	f04f 0200 	mov.w	r2, #0
 8002530:	f04f 0300 	mov.w	r3, #0
 8002534:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002538:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800253c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002540:	b2cb      	uxtb	r3, r1
 8002542:	2200      	movs	r2, #0
 8002544:	461c      	mov	r4, r3
 8002546:	4615      	mov	r5, r2
 8002548:	f04f 0200 	mov.w	r2, #0
 800254c:	f04f 0300 	mov.w	r3, #0
 8002550:	00eb      	lsls	r3, r5, #3
 8002552:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002556:	00e2      	lsls	r2, r4, #3
 8002558:	460b      	mov	r3, r1
 800255a:	3307      	adds	r3, #7
 800255c:	08db      	lsrs	r3, r3, #3
 800255e:	00db      	lsls	r3, r3, #3
 8002560:	ebad 0d03 	sub.w	sp, sp, r3
 8002564:	466b      	mov	r3, sp
 8002566:	3300      	adds	r3, #0
 8002568:	61bb      	str	r3, [r7, #24]

			//			myDebug("\nGS Command Testing: 0x%x\r\n");

			int j = 0;
 800256a:	2300      	movs	r3, #0
 800256c:	637b      	str	r3, [r7, #52]	; 0x34
			for (int i = 1; i <= crc_buff_len; i++) {
 800256e:	2301      	movs	r3, #1
 8002570:	633b      	str	r3, [r7, #48]	; 0x30
 8002572:	e00e      	b.n	8002592 <DioIrqHndlr+0x38e>
				crc_buff[j] = temp_check_buff[i];// index 1 to previous byte of crc
 8002574:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002578:	4413      	add	r3, r2
 800257a:	7819      	ldrb	r1, [r3, #0]
 800257c:	69ba      	ldr	r2, [r7, #24]
 800257e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002580:	4413      	add	r3, r2
 8002582:	460a      	mov	r2, r1
 8002584:	701a      	strb	r2, [r3, #0]
				//				myDebug("%02x ", crc_buff[j]);
				j++;
 8002586:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002588:	3301      	adds	r3, #1
 800258a:	637b      	str	r3, [r7, #52]	; 0x34
			for (int i = 1; i <= crc_buff_len; i++) {
 800258c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800258e:	3301      	adds	r3, #1
 8002590:	633b      	str	r3, [r7, #48]	; 0x30
 8002592:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002596:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002598:	429a      	cmp	r2, r3
 800259a:	ddeb      	ble.n	8002574 <DioIrqHndlr+0x370>
			}
			myDebug("\r\n");
 800259c:	484f      	ldr	r0, [pc, #316]	; (80026dc <DioIrqHndlr+0x4d8>)
 800259e:	f7fe f8d5 	bl	800074c <myDebug>

			uint16_t crc = 0;
 80025a2:	2300      	movs	r3, #0
 80025a4:	82fb      	strh	r3, [r7, #22]
			crc = calculateCRC_CCITT_AX25(crc_buff, crc_buff_len);
 80025a6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80025aa:	4619      	mov	r1, r3
 80025ac:	69b8      	ldr	r0, [r7, #24]
 80025ae:	f7fe f959 	bl	8000864 <calculateCRC_CCITT_AX25>
 80025b2:	4603      	mov	r3, r0
 80025b4:	82fb      	strh	r3, [r7, #22]

			uint8_t calc_crc[2];
			calc_crc[0] = (crc >> 8) & 0xFF;
 80025b6:	8afb      	ldrh	r3, [r7, #22]
 80025b8:	0a1b      	lsrs	r3, r3, #8
 80025ba:	b29b      	uxth	r3, r3
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	743b      	strb	r3, [r7, #16]
			calc_crc[1] = crc & 0xFF;
 80025c0:	8afb      	ldrh	r3, [r7, #22]
 80025c2:	b2db      	uxtb	r3, r3
 80025c4:	747b      	strb	r3, [r7, #17]

			uint8_t msb_crc = temp_check_buff[temp_rx_buffer_len - 3];
 80025c6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80025ca:	3b03      	subs	r3, #3
 80025cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025ce:	5cd3      	ldrb	r3, [r2, r3]
 80025d0:	757b      	strb	r3, [r7, #21]
			uint8_t lsb_crc = temp_check_buff[temp_rx_buffer_len - 2];
 80025d2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80025d6:	3b02      	subs	r3, #2
 80025d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025da:	5cd3      	ldrb	r3, [r2, r3]
 80025dc:	753b      	strb	r3, [r7, #20]

			if (calc_crc[0] == msb_crc && calc_crc[1] == lsb_crc) {
 80025de:	7c3b      	ldrb	r3, [r7, #16]
 80025e0:	7d7a      	ldrb	r2, [r7, #21]
 80025e2:	429a      	cmp	r2, r3
 80025e4:	d10d      	bne.n	8002602 <DioIrqHndlr+0x3fe>
 80025e6:	7c7b      	ldrb	r3, [r7, #17]
 80025e8:	7d3a      	ldrb	r2, [r7, #20]
 80025ea:	429a      	cmp	r2, r3
 80025ec:	d109      	bne.n	8002602 <DioIrqHndlr+0x3fe>
				//				myDebug("GS Command checksum correct: 0x%x\r\n");
				memset(temp_check_buff, '\0', sizeof(temp_check_buff));
 80025ee:	4633      	mov	r3, r6
 80025f0:	461a      	mov	r2, r3
 80025f2:	2100      	movs	r1, #0
 80025f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80025f6:	f009 faf1 	bl	800bbdc <memset>
				RX_FLAG = 1;
 80025fa:	4b39      	ldr	r3, [pc, #228]	; (80026e0 <DioIrqHndlr+0x4dc>)
 80025fc:	2201      	movs	r2, #1
 80025fe:	601a      	str	r2, [r3, #0]
 8002600:	e01e      	b.n	8002640 <DioIrqHndlr+0x43c>

			} else {

				myDebug("\n********GS Command checksum incorrect: 0x%x\r\n");
 8002602:	4838      	ldr	r0, [pc, #224]	; (80026e4 <DioIrqHndlr+0x4e0>)
 8002604:	f7fe f8a2 	bl	800074c <myDebug>

				OBC_UART_RX[0] = 0x53;	//header
 8002608:	4b37      	ldr	r3, [pc, #220]	; (80026e8 <DioIrqHndlr+0x4e4>)
 800260a:	2253      	movs	r2, #83	; 0x53
 800260c:	701a      	strb	r2, [r3, #0]
				OBC_UART_RX[1] = 0xac;	//packet_ type
 800260e:	4b36      	ldr	r3, [pc, #216]	; (80026e8 <DioIrqHndlr+0x4e4>)
 8002610:	22ac      	movs	r2, #172	; 0xac
 8002612:	705a      	strb	r2, [r3, #1]
				OBC_UART_RX[2] = 0x04;	//length of info
 8002614:	4b34      	ldr	r3, [pc, #208]	; (80026e8 <DioIrqHndlr+0x4e4>)
 8002616:	2204      	movs	r2, #4
 8002618:	709a      	strb	r2, [r3, #2]
				OBC_UART_RX[3] = 0x02;	//mcu_no
 800261a:	4b33      	ldr	r3, [pc, #204]	; (80026e8 <DioIrqHndlr+0x4e4>)
 800261c:	2202      	movs	r2, #2
 800261e:	70da      	strb	r2, [r3, #3]
				OBC_UART_RX[4] = 0xcc;	//checksum_error
 8002620:	4b31      	ldr	r3, [pc, #196]	; (80026e8 <DioIrqHndlr+0x4e4>)
 8002622:	22cc      	movs	r2, #204	; 0xcc
 8002624:	711a      	strb	r2, [r3, #4]
				OBC_UART_RX[5] = 0xee;	//error prefix
 8002626:	4b30      	ldr	r3, [pc, #192]	; (80026e8 <DioIrqHndlr+0x4e4>)
 8002628:	22ee      	movs	r2, #238	; 0xee
 800262a:	715a      	strb	r2, [r3, #5]
				obc_ilen = OBC_UART_RX[2];
 800262c:	4b2e      	ldr	r3, [pc, #184]	; (80026e8 <DioIrqHndlr+0x4e4>)
 800262e:	789a      	ldrb	r2, [r3, #2]
 8002630:	4b2e      	ldr	r3, [pc, #184]	; (80026ec <DioIrqHndlr+0x4e8>)
 8002632:	701a      	strb	r2, [r3, #0]

				OBC_SUCCESS_DATA_RX_FLAG = 1;
 8002634:	4b2e      	ldr	r3, [pc, #184]	; (80026f0 <DioIrqHndlr+0x4ec>)
 8002636:	2201      	movs	r2, #1
 8002638:	601a      	str	r2, [r3, #0]

				RX_FLAG = 0;
 800263a:	4b29      	ldr	r3, [pc, #164]	; (80026e0 <DioIrqHndlr+0x4dc>)
 800263c:	2200      	movs	r2, #0
 800263e:	601a      	str	r2, [r3, #0]
 8002640:	f8d7 d008 	ldr.w	sp, [r7, #8]

			RX_FLAG = 0;

		}

		HAL_UART_Receive_DMA(&huart2, OBC_UART_RX, obc_plen);
 8002644:	4b2b      	ldr	r3, [pc, #172]	; (80026f4 <DioIrqHndlr+0x4f0>)
 8002646:	781b      	ldrb	r3, [r3, #0]
 8002648:	b29b      	uxth	r3, r3
 800264a:	461a      	mov	r2, r3
 800264c:	4926      	ldr	r1, [pc, #152]	; (80026e8 <DioIrqHndlr+0x4e4>)
 800264e:	482a      	ldr	r0, [pc, #168]	; (80026f8 <DioIrqHndlr+0x4f4>)
 8002650:	f004 f9c0 	bl	80069d4 <HAL_UART_Receive_DMA>

		HAL_UART_Receive_DMA(&hlpuart1, OBC_UART_RX, obc_plen);
 8002654:	4b27      	ldr	r3, [pc, #156]	; (80026f4 <DioIrqHndlr+0x4f0>)
 8002656:	781b      	ldrb	r3, [r3, #0]
 8002658:	b29b      	uxth	r3, r3
 800265a:	461a      	mov	r2, r3
 800265c:	4922      	ldr	r1, [pc, #136]	; (80026e8 <DioIrqHndlr+0x4e4>)
 800265e:	4827      	ldr	r0, [pc, #156]	; (80026fc <DioIrqHndlr+0x4f8>)
 8002660:	f004 f9b8 	bl	80069d4 <HAL_UART_Receive_DMA>

	}

	if (radioIrq == IRQ_RX_TX_TIMEOUT) {
 8002664:	89fb      	ldrh	r3, [r7, #14]
 8002666:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800266a:	d12e      	bne.n	80026ca <DioIrqHndlr+0x4c6>

		setPacketParams(rx_buffer_len);
 800266c:	4b24      	ldr	r3, [pc, #144]	; (8002700 <DioIrqHndlr+0x4fc>)
 800266e:	781b      	ldrb	r3, [r3, #0]
 8002670:	4618      	mov	r0, r3
 8002672:	f7fe fb6d 	bl	8000d50 <setPacketParams>
		setModulationParams(GFSK_BR_1200, GFSK_FDEV_1200);
 8002676:	f640 31b8 	movw	r1, #3000	; 0xbb8
 800267a:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 800267e:	f7fe fb91 	bl	8000da4 <setModulationParams>
		radioConfig(rx_buffer, rx_buffer_len);
 8002682:	4b1f      	ldr	r3, [pc, #124]	; (8002700 <DioIrqHndlr+0x4fc>)
 8002684:	781b      	ldrb	r3, [r3, #0]
 8002686:	4619      	mov	r1, r3
 8002688:	4812      	ldr	r0, [pc, #72]	; (80026d4 <DioIrqHndlr+0x4d0>)
 800268a:	f7fe fba9 	bl	8000de0 <radioConfig>

		myDebug("\n########## RX TX TIMEOUT ##########\n");
 800268e:	481d      	ldr	r0, [pc, #116]	; (8002704 <DioIrqHndlr+0x500>)
 8002690:	f7fe f85c 	bl	800074c <myDebug>

		SUBGRF_SetRfFrequency(FREQ_435_MHZ);
 8002694:	481c      	ldr	r0, [pc, #112]	; (8002708 <DioIrqHndlr+0x504>)
 8002696:	f008 f85b 	bl	800a750 <SUBGRF_SetRfFrequency>
		SUBGRF_SetSwitch(RFO_LP, RFSWITCH_RX); /*Set RF switch*/
 800269a:	2100      	movs	r1, #0
 800269c:	2001      	movs	r0, #1
 800269e:	f008 fc9f 	bl	800afe0 <SUBGRF_SetSwitch>
		SUBGRF_SetRxBoosted(0xFFFFFF);
 80026a2:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80026a6:	f007 fe7f 	bl	800a3a8 <SUBGRF_SetRxBoosted>

		HAL_UART_Receive_DMA(&huart2, OBC_UART_RX, obc_plen);
 80026aa:	4b12      	ldr	r3, [pc, #72]	; (80026f4 <DioIrqHndlr+0x4f0>)
 80026ac:	781b      	ldrb	r3, [r3, #0]
 80026ae:	b29b      	uxth	r3, r3
 80026b0:	461a      	mov	r2, r3
 80026b2:	490d      	ldr	r1, [pc, #52]	; (80026e8 <DioIrqHndlr+0x4e4>)
 80026b4:	4810      	ldr	r0, [pc, #64]	; (80026f8 <DioIrqHndlr+0x4f4>)
 80026b6:	f004 f98d 	bl	80069d4 <HAL_UART_Receive_DMA>

		HAL_UART_Receive_DMA(&hlpuart1, OBC_UART_RX, obc_plen);
 80026ba:	4b0e      	ldr	r3, [pc, #56]	; (80026f4 <DioIrqHndlr+0x4f0>)
 80026bc:	781b      	ldrb	r3, [r3, #0]
 80026be:	b29b      	uxth	r3, r3
 80026c0:	461a      	mov	r2, r3
 80026c2:	4909      	ldr	r1, [pc, #36]	; (80026e8 <DioIrqHndlr+0x4e4>)
 80026c4:	480d      	ldr	r0, [pc, #52]	; (80026fc <DioIrqHndlr+0x4f8>)
 80026c6:	f004 f985 	bl	80069d4 <HAL_UART_Receive_DMA>
	}

}
 80026ca:	3744      	adds	r7, #68	; 0x44
 80026cc:	46bd      	mov	sp, r7
 80026ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80026d2:	bf00      	nop
 80026d4:	200002ac 	.word	0x200002ac
 80026d8:	0800c708 	.word	0x0800c708
 80026dc:	0800c710 	.word	0x0800c710
 80026e0:	200004c0 	.word	0x200004c0
 80026e4:	0800cbd4 	.word	0x0800cbd4
 80026e8:	20000318 	.word	0x20000318
 80026ec:	20000316 	.word	0x20000316
 80026f0:	20000370 	.word	0x20000370
 80026f4:	20000001 	.word	0x20000001
 80026f8:	20000658 	.word	0x20000658
 80026fc:	20000530 	.word	0x20000530
 8002700:	20000000 	.word	0x20000000
 8002704:	0800cc04 	.word	0x0800cc04
 8002708:	19f25968 	.word	0x19f25968

0800270c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800270c:	b480      	push	{r7}
 800270e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002710:	b672      	cpsid	i
}
 8002712:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002714:	e7fe      	b.n	8002714 <Error_Handler+0x8>
	...

08002718 <WAIT_FOR_HANDSHAKE>:
#define ACK_LENGTH	(7)

extern uint8_t OBC_HANDSHAKE_FLAG;
uint8_t MainCMDHs[ACK_LENGTH];

void WAIT_FOR_HANDSHAKE() {
 8002718:	b580      	push	{r7, lr}
 800271a:	b086      	sub	sp, #24
 800271c:	af00      	add	r7, sp, #0

	memset(MainCMDHs, '\0', ACK_LENGTH);
 800271e:	2207      	movs	r2, #7
 8002720:	2100      	movs	r1, #0
 8002722:	486c      	ldr	r0, [pc, #432]	; (80028d4 <WAIT_FOR_HANDSHAKE+0x1bc>)
 8002724:	f009 fa5a 	bl	800bbdc <memset>
	OBC_HANDSHAKE_FLAG = 0;
 8002728:	4b6b      	ldr	r3, [pc, #428]	; (80028d8 <WAIT_FOR_HANDSHAKE+0x1c0>)
 800272a:	2200      	movs	r2, #0
 800272c:	701a      	strb	r2, [r3, #0]
	if (HAL_UART_Receive(&huart2, MainCMDHs, ACK_LENGTH, 7000) == HAL_OK
 800272e:	f641 3358 	movw	r3, #7000	; 0x1b58
 8002732:	2207      	movs	r2, #7
 8002734:	4967      	ldr	r1, [pc, #412]	; (80028d4 <WAIT_FOR_HANDSHAKE+0x1bc>)
 8002736:	4869      	ldr	r0, [pc, #420]	; (80028dc <WAIT_FOR_HANDSHAKE+0x1c4>)
 8002738:	f004 f887 	bl	800684a <HAL_UART_Receive>
 800273c:	4603      	mov	r3, r0
 800273e:	2b00      	cmp	r3, #0
 8002740:	d00a      	beq.n	8002758 <WAIT_FOR_HANDSHAKE+0x40>
			|| HAL_UART_Receive(&hlpuart1, MainCMDHs, ACK_LENGTH, 7000)
 8002742:	f641 3358 	movw	r3, #7000	; 0x1b58
 8002746:	2207      	movs	r2, #7
 8002748:	4962      	ldr	r1, [pc, #392]	; (80028d4 <WAIT_FOR_HANDSHAKE+0x1bc>)
 800274a:	4865      	ldr	r0, [pc, #404]	; (80028e0 <WAIT_FOR_HANDSHAKE+0x1c8>)
 800274c:	f004 f87d 	bl	800684a <HAL_UART_Receive>
 8002750:	4603      	mov	r3, r0
 8002752:	2b00      	cmp	r3, #0
 8002754:	f040 80aa 	bne.w	80028ac <WAIT_FOR_HANDSHAKE+0x194>
					== HAL_OK) {
		myDebug("--> Handshake command received from OBC: 0x%x\r\n");
 8002758:	4862      	ldr	r0, [pc, #392]	; (80028e4 <WAIT_FOR_HANDSHAKE+0x1cc>)
 800275a:	f7fd fff7 	bl	800074c <myDebug>
		for (int i = 0; i < (ACK_LENGTH); i++) {
 800275e:	2300      	movs	r3, #0
 8002760:	617b      	str	r3, [r7, #20]
 8002762:	e00a      	b.n	800277a <WAIT_FOR_HANDSHAKE+0x62>
			myDebug("%02x ", MainCMDHs[i]);
 8002764:	4a5b      	ldr	r2, [pc, #364]	; (80028d4 <WAIT_FOR_HANDSHAKE+0x1bc>)
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	4413      	add	r3, r2
 800276a:	781b      	ldrb	r3, [r3, #0]
 800276c:	4619      	mov	r1, r3
 800276e:	485e      	ldr	r0, [pc, #376]	; (80028e8 <WAIT_FOR_HANDSHAKE+0x1d0>)
 8002770:	f7fd ffec 	bl	800074c <myDebug>
		for (int i = 0; i < (ACK_LENGTH); i++) {
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	3301      	adds	r3, #1
 8002778:	617b      	str	r3, [r7, #20]
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	2b06      	cmp	r3, #6
 800277e:	ddf1      	ble.n	8002764 <WAIT_FOR_HANDSHAKE+0x4c>
		}
		myDebug("\n");
 8002780:	485a      	ldr	r0, [pc, #360]	; (80028ec <WAIT_FOR_HANDSHAKE+0x1d4>)
 8002782:	f7fd ffe3 	bl	800074c <myDebug>

		uint8_t header = 0x00;
 8002786:	2300      	movs	r3, #0
 8002788:	71fb      	strb	r3, [r7, #7]

		if (MainCMDHs[0] == header) {
 800278a:	4b52      	ldr	r3, [pc, #328]	; (80028d4 <WAIT_FOR_HANDSHAKE+0x1bc>)
 800278c:	781b      	ldrb	r3, [r3, #0]
 800278e:	79fa      	ldrb	r2, [r7, #7]
 8002790:	429a      	cmp	r2, r3
 8002792:	d111      	bne.n	80027b8 <WAIT_FOR_HANDSHAKE+0xa0>

			for (int loop1 = 0; loop1 < sizeof(MainCMDHs); loop1++) {
 8002794:	2300      	movs	r3, #0
 8002796:	613b      	str	r3, [r7, #16]
 8002798:	e00b      	b.n	80027b2 <WAIT_FOR_HANDSHAKE+0x9a>
				MainCMDHs[loop1] = MainCMDHs[loop1 + 1];
 800279a:	693b      	ldr	r3, [r7, #16]
 800279c:	3301      	adds	r3, #1
 800279e:	4a4d      	ldr	r2, [pc, #308]	; (80028d4 <WAIT_FOR_HANDSHAKE+0x1bc>)
 80027a0:	5cd1      	ldrb	r1, [r2, r3]
 80027a2:	4a4c      	ldr	r2, [pc, #304]	; (80028d4 <WAIT_FOR_HANDSHAKE+0x1bc>)
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	4413      	add	r3, r2
 80027a8:	460a      	mov	r2, r1
 80027aa:	701a      	strb	r2, [r3, #0]
			for (int loop1 = 0; loop1 < sizeof(MainCMDHs); loop1++) {
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	3301      	adds	r3, #1
 80027b0:	613b      	str	r3, [r7, #16]
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	2b06      	cmp	r3, #6
 80027b6:	d9f0      	bls.n	800279a <WAIT_FOR_HANDSHAKE+0x82>
			}
		}

		if (MainCMDHs[0] == ACK_HEAD && MainCMDHs[5] == ACK_TAIL) {
 80027b8:	4b46      	ldr	r3, [pc, #280]	; (80028d4 <WAIT_FOR_HANDSHAKE+0x1bc>)
 80027ba:	781b      	ldrb	r3, [r3, #0]
 80027bc:	2b53      	cmp	r3, #83	; 0x53
 80027be:	d13a      	bne.n	8002836 <WAIT_FOR_HANDSHAKE+0x11e>
 80027c0:	4b44      	ldr	r3, [pc, #272]	; (80028d4 <WAIT_FOR_HANDSHAKE+0x1bc>)
 80027c2:	795b      	ldrb	r3, [r3, #5]
 80027c4:	2b7e      	cmp	r3, #126	; 0x7e
 80027c6:	d136      	bne.n	8002836 <WAIT_FOR_HANDSHAKE+0x11e>
			myDebug("--> Command Acknowledged successful!\n");
 80027c8:	4849      	ldr	r0, [pc, #292]	; (80028f0 <WAIT_FOR_HANDSHAKE+0x1d8>)
 80027ca:	f7fd ffbf 	bl	800074c <myDebug>
			if (HAL_UART_Transmit(&huart2, MainCMDHs, ACK_LENGTH, 2000)
 80027ce:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80027d2:	2207      	movs	r2, #7
 80027d4:	493f      	ldr	r1, [pc, #252]	; (80028d4 <WAIT_FOR_HANDSHAKE+0x1bc>)
 80027d6:	4841      	ldr	r0, [pc, #260]	; (80028dc <WAIT_FOR_HANDSHAKE+0x1c4>)
 80027d8:	f003 ffb1 	bl	800673e <HAL_UART_Transmit>
 80027dc:	4603      	mov	r3, r0
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d009      	beq.n	80027f6 <WAIT_FOR_HANDSHAKE+0xde>
					== HAL_OK
					|| HAL_UART_Transmit(&hlpuart1, MainCMDHs, ACK_LENGTH, 2000)
 80027e2:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80027e6:	2207      	movs	r2, #7
 80027e8:	493a      	ldr	r1, [pc, #232]	; (80028d4 <WAIT_FOR_HANDSHAKE+0x1bc>)
 80027ea:	483d      	ldr	r0, [pc, #244]	; (80028e0 <WAIT_FOR_HANDSHAKE+0x1c8>)
 80027ec:	f003 ffa7 	bl	800673e <HAL_UART_Transmit>
 80027f0:	4603      	mov	r3, r0
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d158      	bne.n	80028a8 <WAIT_FOR_HANDSHAKE+0x190>
							== HAL_OK) {
				myDebug("--> Handshake ACK, re-transmit to OBC: \n");
 80027f6:	483f      	ldr	r0, [pc, #252]	; (80028f4 <WAIT_FOR_HANDSHAKE+0x1dc>)
 80027f8:	f7fd ffa8 	bl	800074c <myDebug>
				for (int i = 0; i < (ACK_LENGTH); i++) {
 80027fc:	2300      	movs	r3, #0
 80027fe:	60fb      	str	r3, [r7, #12]
 8002800:	e00a      	b.n	8002818 <WAIT_FOR_HANDSHAKE+0x100>
					myDebug("%02x ", MainCMDHs[i]);
 8002802:	4a34      	ldr	r2, [pc, #208]	; (80028d4 <WAIT_FOR_HANDSHAKE+0x1bc>)
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	4413      	add	r3, r2
 8002808:	781b      	ldrb	r3, [r3, #0]
 800280a:	4619      	mov	r1, r3
 800280c:	4836      	ldr	r0, [pc, #216]	; (80028e8 <WAIT_FOR_HANDSHAKE+0x1d0>)
 800280e:	f7fd ff9d 	bl	800074c <myDebug>
				for (int i = 0; i < (ACK_LENGTH); i++) {
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	3301      	adds	r3, #1
 8002816:	60fb      	str	r3, [r7, #12]
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	2b06      	cmp	r3, #6
 800281c:	ddf1      	ble.n	8002802 <WAIT_FOR_HANDSHAKE+0xea>
				}
				myDebug("\n");
 800281e:	4833      	ldr	r0, [pc, #204]	; (80028ec <WAIT_FOR_HANDSHAKE+0x1d4>)
 8002820:	f7fd ff94 	bl	800074c <myDebug>
				OBC_HANDSHAKE_FLAG = 1;
 8002824:	4b2c      	ldr	r3, [pc, #176]	; (80028d8 <WAIT_FOR_HANDSHAKE+0x1c0>)
 8002826:	2201      	movs	r2, #1
 8002828:	701a      	strb	r2, [r3, #0]
				memset(MainCMDHs, '\0', ACK_LENGTH);
 800282a:	2207      	movs	r2, #7
 800282c:	2100      	movs	r1, #0
 800282e:	4829      	ldr	r0, [pc, #164]	; (80028d4 <WAIT_FOR_HANDSHAKE+0x1bc>)
 8002830:	f009 f9d4 	bl	800bbdc <memset>
			if (HAL_UART_Transmit(&huart2, MainCMDHs, ACK_LENGTH, 2000)
 8002834:	e038      	b.n	80028a8 <WAIT_FOR_HANDSHAKE+0x190>
			}
		} else {
			myDebug("*** Unknown Handshake command received!\n");
 8002836:	4830      	ldr	r0, [pc, #192]	; (80028f8 <WAIT_FOR_HANDSHAKE+0x1e0>)
 8002838:	f7fd ff88 	bl	800074c <myDebug>
			if (HAL_UART_Transmit(&huart2, MainCMDHs, ACK_LENGTH, 2000)
 800283c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002840:	2207      	movs	r2, #7
 8002842:	4924      	ldr	r1, [pc, #144]	; (80028d4 <WAIT_FOR_HANDSHAKE+0x1bc>)
 8002844:	4825      	ldr	r0, [pc, #148]	; (80028dc <WAIT_FOR_HANDSHAKE+0x1c4>)
 8002846:	f003 ff7a 	bl	800673e <HAL_UART_Transmit>
 800284a:	4603      	mov	r3, r0
 800284c:	2b00      	cmp	r3, #0
 800284e:	d009      	beq.n	8002864 <WAIT_FOR_HANDSHAKE+0x14c>
					== HAL_OK
					|| HAL_UART_Transmit(&hlpuart1, MainCMDHs, ACK_LENGTH, 7000)
 8002850:	f641 3358 	movw	r3, #7000	; 0x1b58
 8002854:	2207      	movs	r2, #7
 8002856:	491f      	ldr	r1, [pc, #124]	; (80028d4 <WAIT_FOR_HANDSHAKE+0x1bc>)
 8002858:	4821      	ldr	r0, [pc, #132]	; (80028e0 <WAIT_FOR_HANDSHAKE+0x1c8>)
 800285a:	f003 ff70 	bl	800673e <HAL_UART_Transmit>
 800285e:	4603      	mov	r3, r0
 8002860:	2b00      	cmp	r3, #0
 8002862:	d131      	bne.n	80028c8 <WAIT_FOR_HANDSHAKE+0x1b0>
							== HAL_OK) {
				myDebug("--> Unknown Handshake ACK, re-transmit to OBC.\n");
 8002864:	4825      	ldr	r0, [pc, #148]	; (80028fc <WAIT_FOR_HANDSHAKE+0x1e4>)
 8002866:	f7fd ff71 	bl	800074c <myDebug>
				for (int i = 0; i < (ACK_LENGTH); i++) {
 800286a:	2300      	movs	r3, #0
 800286c:	60bb      	str	r3, [r7, #8]
 800286e:	e00a      	b.n	8002886 <WAIT_FOR_HANDSHAKE+0x16e>
					myDebug("%02x ", MainCMDHs[i]);
 8002870:	4a18      	ldr	r2, [pc, #96]	; (80028d4 <WAIT_FOR_HANDSHAKE+0x1bc>)
 8002872:	68bb      	ldr	r3, [r7, #8]
 8002874:	4413      	add	r3, r2
 8002876:	781b      	ldrb	r3, [r3, #0]
 8002878:	4619      	mov	r1, r3
 800287a:	481b      	ldr	r0, [pc, #108]	; (80028e8 <WAIT_FOR_HANDSHAKE+0x1d0>)
 800287c:	f7fd ff66 	bl	800074c <myDebug>
				for (int i = 0; i < (ACK_LENGTH); i++) {
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	3301      	adds	r3, #1
 8002884:	60bb      	str	r3, [r7, #8]
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	2b06      	cmp	r3, #6
 800288a:	ddf1      	ble.n	8002870 <WAIT_FOR_HANDSHAKE+0x158>
				}
				myDebug("\n");
 800288c:	4817      	ldr	r0, [pc, #92]	; (80028ec <WAIT_FOR_HANDSHAKE+0x1d4>)
 800288e:	f7fd ff5d 	bl	800074c <myDebug>
				memset(MainCMDHs, '\0', ACK_LENGTH);
 8002892:	2207      	movs	r2, #7
 8002894:	2100      	movs	r1, #0
 8002896:	480f      	ldr	r0, [pc, #60]	; (80028d4 <WAIT_FOR_HANDSHAKE+0x1bc>)
 8002898:	f009 f9a0 	bl	800bbdc <memset>
				OBC_HANDSHAKE_FLAG = 0;
 800289c:	4b0e      	ldr	r3, [pc, #56]	; (80028d8 <WAIT_FOR_HANDSHAKE+0x1c0>)
 800289e:	2200      	movs	r2, #0
 80028a0:	701a      	strb	r2, [r3, #0]
				WAIT_FOR_HANDSHAKE();
 80028a2:	f7ff ff39 	bl	8002718 <WAIT_FOR_HANDSHAKE>
					== HAL_OK) {
 80028a6:	e00f      	b.n	80028c8 <WAIT_FOR_HANDSHAKE+0x1b0>
			if (HAL_UART_Transmit(&huart2, MainCMDHs, ACK_LENGTH, 2000)
 80028a8:	bf00      	nop
					== HAL_OK) {
 80028aa:	e00d      	b.n	80028c8 <WAIT_FOR_HANDSHAKE+0x1b0>
			}
		}
	} else {
		OBC_HANDSHAKE_FLAG = 0;
 80028ac:	4b0a      	ldr	r3, [pc, #40]	; (80028d8 <WAIT_FOR_HANDSHAKE+0x1c0>)
 80028ae:	2200      	movs	r2, #0
 80028b0:	701a      	strb	r2, [r3, #0]
		myDebug("*** Handshake Command receive failed, try again!\n");
 80028b2:	4813      	ldr	r0, [pc, #76]	; (8002900 <WAIT_FOR_HANDSHAKE+0x1e8>)
 80028b4:	f7fd ff4a 	bl	800074c <myDebug>
		memset(MainCMDHs, '\0', ACK_LENGTH);
 80028b8:	2207      	movs	r2, #7
 80028ba:	2100      	movs	r1, #0
 80028bc:	4805      	ldr	r0, [pc, #20]	; (80028d4 <WAIT_FOR_HANDSHAKE+0x1bc>)
 80028be:	f009 f98d 	bl	800bbdc <memset>
		WAIT_FOR_HANDSHAKE();
 80028c2:	f7ff ff29 	bl	8002718 <WAIT_FOR_HANDSHAKE>
	}
}
 80028c6:	e000      	b.n	80028ca <WAIT_FOR_HANDSHAKE+0x1b2>
					== HAL_OK) {
 80028c8:	bf00      	nop
}
 80028ca:	bf00      	nop
 80028cc:	3718      	adds	r7, #24
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	bf00      	nop
 80028d4:	200004c4 	.word	0x200004c4
 80028d8:	200004a8 	.word	0x200004a8
 80028dc:	20000658 	.word	0x20000658
 80028e0:	20000530 	.word	0x20000530
 80028e4:	0800cc2c 	.word	0x0800cc2c
 80028e8:	0800cc5c 	.word	0x0800cc5c
 80028ec:	0800cc64 	.word	0x0800cc64
 80028f0:	0800cc68 	.word	0x0800cc68
 80028f4:	0800cc90 	.word	0x0800cc90
 80028f8:	0800ccbc 	.word	0x0800ccbc
 80028fc:	0800cce8 	.word	0x0800cce8
 8002900:	0800cd18 	.word	0x0800cd18

08002904 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002904:	b480      	push	{r7}
 8002906:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002908:	bf00      	nop
 800290a:	46bd      	mov	sp, r7
 800290c:	bc80      	pop	{r7}
 800290e:	4770      	bx	lr

08002910 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002910:	b480      	push	{r7}
 8002912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002914:	e7fe      	b.n	8002914 <NMI_Handler+0x4>

08002916 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002916:	b480      	push	{r7}
 8002918:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800291a:	e7fe      	b.n	800291a <HardFault_Handler+0x4>

0800291c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800291c:	b480      	push	{r7}
 800291e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002920:	e7fe      	b.n	8002920 <MemManage_Handler+0x4>

08002922 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002922:	b480      	push	{r7}
 8002924:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002926:	e7fe      	b.n	8002926 <BusFault_Handler+0x4>

08002928 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002928:	b480      	push	{r7}
 800292a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800292c:	e7fe      	b.n	800292c <UsageFault_Handler+0x4>

0800292e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800292e:	b480      	push	{r7}
 8002930:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002932:	bf00      	nop
 8002934:	46bd      	mov	sp, r7
 8002936:	bc80      	pop	{r7}
 8002938:	4770      	bx	lr

0800293a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800293a:	b480      	push	{r7}
 800293c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800293e:	bf00      	nop
 8002940:	46bd      	mov	sp, r7
 8002942:	bc80      	pop	{r7}
 8002944:	4770      	bx	lr

08002946 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002946:	b480      	push	{r7}
 8002948:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800294a:	bf00      	nop
 800294c:	46bd      	mov	sp, r7
 800294e:	bc80      	pop	{r7}
 8002950:	4770      	bx	lr

08002952 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002952:	b580      	push	{r7, lr}
 8002954:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002956:	f000 fdc3 	bl	80034e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800295a:	bf00      	nop
 800295c:	bd80      	pop	{r7, pc}
	...

08002960 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 1 Interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8002964:	4802      	ldr	r0, [pc, #8]	; (8002970 <DMA1_Channel1_IRQHandler+0x10>)
 8002966:	f001 f8bd 	bl	8003ae4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800296a:	bf00      	nop
 800296c:	bd80      	pop	{r7, pc}
 800296e:	bf00      	nop
 8002970:	200006ec 	.word	0x200006ec

08002974 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 2 Interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8002978:	4802      	ldr	r0, [pc, #8]	; (8002984 <DMA1_Channel2_IRQHandler+0x10>)
 800297a:	f001 f8b3 	bl	8003ae4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800297e:	bf00      	nop
 8002980:	bd80      	pop	{r7, pc}
 8002982:	bf00      	nop
 8002984:	2000074c 	.word	0x2000074c

08002988 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 3 Interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800298c:	4802      	ldr	r0, [pc, #8]	; (8002998 <DMA1_Channel3_IRQHandler+0x10>)
 800298e:	f001 f8a9 	bl	8003ae4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8002992:	bf00      	nop
 8002994:	bd80      	pop	{r7, pc}
 8002996:	bf00      	nop
 8002998:	200007ac 	.word	0x200007ac

0800299c <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 4 Interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80029a0:	4802      	ldr	r0, [pc, #8]	; (80029ac <DMA1_Channel4_IRQHandler+0x10>)
 80029a2:	f001 f89f 	bl	8003ae4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80029a6:	bf00      	nop
 80029a8:	bd80      	pop	{r7, pc}
 80029aa:	bf00      	nop
 80029ac:	2000080c 	.word	0x2000080c

080029b0 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 5 Interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80029b4:	4802      	ldr	r0, [pc, #8]	; (80029c0 <DMA1_Channel5_IRQHandler+0x10>)
 80029b6:	f001 f895 	bl	8003ae4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80029ba:	bf00      	nop
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	bf00      	nop
 80029c0:	2000086c 	.word	0x2000086c

080029c4 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 6 Interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80029c8:	4802      	ldr	r0, [pc, #8]	; (80029d4 <DMA1_Channel6_IRQHandler+0x10>)
 80029ca:	f001 f88b 	bl	8003ae4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80029ce:	bf00      	nop
 80029d0:	bd80      	pop	{r7, pc}
 80029d2:	bf00      	nop
 80029d4:	200008cc 	.word	0x200008cc

080029d8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 Interrupt.
  */
void USART1_IRQHandler(void)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80029dc:	4802      	ldr	r0, [pc, #8]	; (80029e8 <USART1_IRQHandler+0x10>)
 80029de:	f004 f845 	bl	8006a6c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80029e2:	bf00      	nop
 80029e4:	bd80      	pop	{r7, pc}
 80029e6:	bf00      	nop
 80029e8:	200005c4 	.word	0x200005c4

080029ec <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80029f0:	4802      	ldr	r0, [pc, #8]	; (80029fc <USART2_IRQHandler+0x10>)
 80029f2:	f004 f83b 	bl	8006a6c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80029f6:	bf00      	nop
 80029f8:	bd80      	pop	{r7, pc}
 80029fa:	bf00      	nop
 80029fc:	20000658 	.word	0x20000658

08002a00 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 Interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8002a04:	4802      	ldr	r0, [pc, #8]	; (8002a10 <LPUART1_IRQHandler+0x10>)
 8002a06:	f004 f831 	bl	8006a6c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8002a0a:	bf00      	nop
 8002a0c:	bd80      	pop	{r7, pc}
 8002a0e:	bf00      	nop
 8002a10:	20000530 	.word	0x20000530

08002a14 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 8002a18:	4802      	ldr	r0, [pc, #8]	; (8002a24 <SUBGHZ_Radio_IRQHandler+0x10>)
 8002a1a:	f003 f9c3 	bl	8005da4 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 8002a1e:	bf00      	nop
 8002a20:	bd80      	pop	{r7, pc}
 8002a22:	bf00      	nop
 8002a24:	200004cc 	.word	0x200004cc

08002a28 <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b085      	sub	sp, #20
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 8002a30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a34:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002a36:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	664b      	str	r3, [r1, #100]	; 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 8002a40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a44:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	4013      	ands	r3, r2
 8002a4a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
}
 8002a4e:	bf00      	nop
 8002a50:	3714      	adds	r7, #20
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bc80      	pop	{r7}
 8002a56:	4770      	bx	lr

08002a58 <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 8002a5c:	4b06      	ldr	r3, [pc, #24]	; (8002a78 <MX_SUBGHZ_Init+0x20>)
 8002a5e:	2208      	movs	r2, #8
 8002a60:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 8002a62:	4805      	ldr	r0, [pc, #20]	; (8002a78 <MX_SUBGHZ_Init+0x20>)
 8002a64:	f002 ff1c 	bl	80058a0 <HAL_SUBGHZ_Init>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d001      	beq.n	8002a72 <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 8002a6e:	f7ff fe4d 	bl	800270c <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 8002a72:	bf00      	nop
 8002a74:	bd80      	pop	{r7, pc}
 8002a76:	bf00      	nop
 8002a78:	200004cc 	.word	0x200004cc

08002a7c <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b082      	sub	sp, #8
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 8002a84:	2001      	movs	r0, #1
 8002a86:	f7ff ffcf 	bl	8002a28 <LL_APB3_GRP1_EnableClock>

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	2100      	movs	r1, #0
 8002a8e:	2032      	movs	r0, #50	; 0x32
 8002a90:	f000 fe0f 	bl	80036b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 8002a94:	2032      	movs	r0, #50	; 0x32
 8002a96:	f000 fe26 	bl	80036e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 8002a9a:	bf00      	nop
 8002a9c:	3708      	adds	r7, #8
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}

08002aa2 <SystemApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SystemApp_Init(void)
{
 8002aa2:	b480      	push	{r7}
 8002aa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SystemApp_Init_1 */

  /* USER CODE END SystemApp_Init_1 */

}
 8002aa6:	bf00      	nop
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bc80      	pop	{r7}
 8002aac:	4770      	bx	lr
	...

08002ab0 <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b082      	sub	sp, #8
 8002ab4:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	607b      	str	r3, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  if (SYS_TimerInitialisedFlag == 0)
 8002aba:	4b06      	ldr	r3, [pc, #24]	; (8002ad4 <HAL_GetTick+0x24>)
 8002abc:	781b      	ldrb	r3, [r3, #0]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d002      	beq.n	8002ac8 <HAL_GetTick+0x18>

    /* USER CODE END HAL_GetTick_EarlyCall */
  }
  else
  {
    ret = TIMER_IF_GetTimerValue();
 8002ac2:	f000 f908 	bl	8002cd6 <TIMER_IF_GetTimerValue>
 8002ac6:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
  return ret;
 8002ac8:	687b      	ldr	r3, [r7, #4]
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3708      	adds	r7, #8
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	bf00      	nop
 8002ad4:	200004d8 	.word	0x200004d8

08002ad8 <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b082      	sub	sp, #8
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f000 f925 	bl	8002d32 <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 8002ae8:	bf00      	nop
 8002aea:	3708      	adds	r7, #8
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}

08002af0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b086      	sub	sp, #24
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002af8:	4a14      	ldr	r2, [pc, #80]	; (8002b4c <_sbrk+0x5c>)
 8002afa:	4b15      	ldr	r3, [pc, #84]	; (8002b50 <_sbrk+0x60>)
 8002afc:	1ad3      	subs	r3, r2, r3
 8002afe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b04:	4b13      	ldr	r3, [pc, #76]	; (8002b54 <_sbrk+0x64>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d102      	bne.n	8002b12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b0c:	4b11      	ldr	r3, [pc, #68]	; (8002b54 <_sbrk+0x64>)
 8002b0e:	4a12      	ldr	r2, [pc, #72]	; (8002b58 <_sbrk+0x68>)
 8002b10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b12:	4b10      	ldr	r3, [pc, #64]	; (8002b54 <_sbrk+0x64>)
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	4413      	add	r3, r2
 8002b1a:	693a      	ldr	r2, [r7, #16]
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	d207      	bcs.n	8002b30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002b20:	f009 f864 	bl	800bbec <__errno>
 8002b24:	4603      	mov	r3, r0
 8002b26:	220c      	movs	r2, #12
 8002b28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002b2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002b2e:	e009      	b.n	8002b44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002b30:	4b08      	ldr	r3, [pc, #32]	; (8002b54 <_sbrk+0x64>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002b36:	4b07      	ldr	r3, [pc, #28]	; (8002b54 <_sbrk+0x64>)
 8002b38:	681a      	ldr	r2, [r3, #0]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	4413      	add	r3, r2
 8002b3e:	4a05      	ldr	r2, [pc, #20]	; (8002b54 <_sbrk+0x64>)
 8002b40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002b42:	68fb      	ldr	r3, [r7, #12]
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	3718      	adds	r7, #24
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}
 8002b4c:	20010000 	.word	0x20010000
 8002b50:	00000400 	.word	0x00000400
 8002b54:	200004dc 	.word	0x200004dc
 8002b58:	20000c38 	.word	0x20000c38

08002b5c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8002b60:	bf00      	nop
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bc80      	pop	{r7}
 8002b66:	4770      	bx	lr

08002b68 <LL_APB1_GRP1_EnableClock>:
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b085      	sub	sp, #20
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002b70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b74:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002b76:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002b80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b84:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	4013      	ands	r3, r2
 8002b8a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
}
 8002b8e:	bf00      	nop
 8002b90:	3714      	adds	r7, #20
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bc80      	pop	{r7}
 8002b96:	4770      	bx	lr

08002b98 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b088      	sub	sp, #32
 8002b9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b9e:	f107 0310 	add.w	r3, r7, #16
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	601a      	str	r2, [r3, #0]
 8002ba6:	605a      	str	r2, [r3, #4]
 8002ba8:	609a      	str	r2, [r3, #8]
 8002baa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002bac:	1d3b      	adds	r3, r7, #4
 8002bae:	2200      	movs	r2, #0
 8002bb0:	601a      	str	r2, [r3, #0]
 8002bb2:	605a      	str	r2, [r3, #4]
 8002bb4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002bb6:	4b1d      	ldr	r3, [pc, #116]	; (8002c2c <MX_TIM2_Init+0x94>)
 8002bb8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002bbc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 48-1;
 8002bbe:	4b1b      	ldr	r3, [pc, #108]	; (8002c2c <MX_TIM2_Init+0x94>)
 8002bc0:	222f      	movs	r2, #47	; 0x2f
 8002bc2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bc4:	4b19      	ldr	r3, [pc, #100]	; (8002c2c <MX_TIM2_Init+0x94>)
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000001-1;
 8002bca:	4b18      	ldr	r3, [pc, #96]	; (8002c2c <MX_TIM2_Init+0x94>)
 8002bcc:	4a18      	ldr	r2, [pc, #96]	; (8002c30 <MX_TIM2_Init+0x98>)
 8002bce:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002bd0:	4b16      	ldr	r3, [pc, #88]	; (8002c2c <MX_TIM2_Init+0x94>)
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002bd6:	4b15      	ldr	r3, [pc, #84]	; (8002c2c <MX_TIM2_Init+0x94>)
 8002bd8:	2280      	movs	r2, #128	; 0x80
 8002bda:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002bdc:	4813      	ldr	r0, [pc, #76]	; (8002c2c <MX_TIM2_Init+0x94>)
 8002bde:	f003 fa7f 	bl	80060e0 <HAL_TIM_Base_Init>
 8002be2:	4603      	mov	r3, r0
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d001      	beq.n	8002bec <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002be8:	f7ff fd90 	bl	800270c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002bec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002bf0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002bf2:	f107 0310 	add.w	r3, r7, #16
 8002bf6:	4619      	mov	r1, r3
 8002bf8:	480c      	ldr	r0, [pc, #48]	; (8002c2c <MX_TIM2_Init+0x94>)
 8002bfa:	f003 fb0d 	bl	8006218 <HAL_TIM_ConfigClockSource>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d001      	beq.n	8002c08 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002c04:	f7ff fd82 	bl	800270c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002c10:	1d3b      	adds	r3, r7, #4
 8002c12:	4619      	mov	r1, r3
 8002c14:	4805      	ldr	r0, [pc, #20]	; (8002c2c <MX_TIM2_Init+0x94>)
 8002c16:	f003 fcc3 	bl	80065a0 <HAL_TIMEx_MasterConfigSynchronization>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d001      	beq.n	8002c24 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002c20:	f7ff fd74 	bl	800270c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002c24:	bf00      	nop
 8002c26:	3720      	adds	r7, #32
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}
 8002c2c:	200004e0 	.word	0x200004e0
 8002c30:	000f4240 	.word	0x000f4240

08002c34 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b082      	sub	sp, #8
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c44:	d102      	bne.n	8002c4c <HAL_TIM_Base_MspInit+0x18>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002c46:	2001      	movs	r0, #1
 8002c48:	f7ff ff8e 	bl	8002b68 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002c4c:	bf00      	nop
 8002c4e:	3708      	adds	r7, #8
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}

08002c54 <TIMER_IF_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
UTIL_TIMER_Status_t TIMER_IF_Init(void)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b083      	sub	sp, #12
 8002c58:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_Init */

  /* USER CODE END TIMER_IF_Init */
  return ret;
 8002c5e:	79fb      	ldrb	r3, [r7, #7]
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	370c      	adds	r7, #12
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bc80      	pop	{r7}
 8002c68:	4770      	bx	lr

08002c6a <TIMER_IF_StartTimer>:

UTIL_TIMER_Status_t TIMER_IF_StartTimer(uint32_t timeout)
{
 8002c6a:	b480      	push	{r7}
 8002c6c:	b085      	sub	sp, #20
 8002c6e:	af00      	add	r7, sp, #0
 8002c70:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8002c72:	2300      	movs	r3, #0
 8002c74:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN TIMER_IF_StartTimer */

  /* USER CODE END TIMER_IF_StartTimer */
  return ret;
 8002c76:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	3714      	adds	r7, #20
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bc80      	pop	{r7}
 8002c80:	4770      	bx	lr

08002c82 <TIMER_IF_StopTimer>:

UTIL_TIMER_Status_t TIMER_IF_StopTimer(void)
{
 8002c82:	b480      	push	{r7}
 8002c84:	b083      	sub	sp, #12
 8002c86:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_StopTimer */

  /* USER CODE END TIMER_IF_StopTimer */
  return ret;
 8002c8c:	79fb      	ldrb	r3, [r7, #7]
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	370c      	adds	r7, #12
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bc80      	pop	{r7}
 8002c96:	4770      	bx	lr

08002c98 <TIMER_IF_SetTimerContext>:

uint32_t TIMER_IF_SetTimerContext(void)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_SetTimerContext */

  /* USER CODE END TIMER_IF_SetTimerContext */

  /*return time context*/
  return RtcTimerContext;
 8002c9c:	4b02      	ldr	r3, [pc, #8]	; (8002ca8 <TIMER_IF_SetTimerContext+0x10>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bc80      	pop	{r7}
 8002ca6:	4770      	bx	lr
 8002ca8:	2000052c 	.word	0x2000052c

08002cac <TIMER_IF_GetTimerContext>:

uint32_t TIMER_IF_GetTimerContext(void)
{
 8002cac:	b480      	push	{r7}
 8002cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_GetTimerContext */

  /* USER CODE END TIMER_IF_GetTimerContext */

  /*return time context*/
  return RtcTimerContext;
 8002cb0:	4b02      	ldr	r3, [pc, #8]	; (8002cbc <TIMER_IF_GetTimerContext+0x10>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bc80      	pop	{r7}
 8002cba:	4770      	bx	lr
 8002cbc:	2000052c 	.word	0x2000052c

08002cc0 <TIMER_IF_GetTimerElapsedTime>:

uint32_t TIMER_IF_GetTimerElapsedTime(void)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b083      	sub	sp, #12
 8002cc4:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime */
  return ret;
 8002cca:	687b      	ldr	r3, [r7, #4]
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	370c      	adds	r7, #12
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bc80      	pop	{r7}
 8002cd4:	4770      	bx	lr

08002cd6 <TIMER_IF_GetTimerValue>:

uint32_t TIMER_IF_GetTimerValue(void)
{
 8002cd6:	b480      	push	{r7}
 8002cd8:	b083      	sub	sp, #12
 8002cda:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerValue */

  /* USER CODE END TIMER_IF_GetTimerValue */
  return ret;
 8002ce0:	687b      	ldr	r3, [r7, #4]
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	370c      	adds	r7, #12
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bc80      	pop	{r7}
 8002cea:	4770      	bx	lr

08002cec <TIMER_IF_GetMinimumTimeout>:

uint32_t TIMER_IF_GetMinimumTimeout(void)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b083      	sub	sp, #12
 8002cf0:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout */

  /* USER CODE END TIMER_IF_GetMinimumTimeout */
  return ret;
 8002cf6:	687b      	ldr	r3, [r7, #4]
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	370c      	adds	r7, #12
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bc80      	pop	{r7}
 8002d00:	4770      	bx	lr

08002d02 <TIMER_IF_Convert_ms2Tick>:

uint32_t TIMER_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 8002d02:	b480      	push	{r7}
 8002d04:	b085      	sub	sp, #20
 8002d06:	af00      	add	r7, sp, #0
 8002d08:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick */

  /* USER CODE END TIMER_IF_Convert_ms2Tick */
  return ret;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	3714      	adds	r7, #20
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bc80      	pop	{r7}
 8002d18:	4770      	bx	lr

08002d1a <TIMER_IF_Convert_Tick2ms>:

uint32_t TIMER_IF_Convert_Tick2ms(uint32_t tick)
{
 8002d1a:	b480      	push	{r7}
 8002d1c:	b085      	sub	sp, #20
 8002d1e:	af00      	add	r7, sp, #0
 8002d20:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8002d22:	2300      	movs	r3, #0
 8002d24:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms */

  /* USER CODE END TIMER_IF_Convert_Tick2ms */
  return ret;
 8002d26:	68fb      	ldr	r3, [r7, #12]
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	3714      	adds	r7, #20
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bc80      	pop	{r7}
 8002d30:	4770      	bx	lr

08002d32 <TIMER_IF_DelayMs>:

void TIMER_IF_DelayMs(uint32_t delay)
{
 8002d32:	b480      	push	{r7}
 8002d34:	b083      	sub	sp, #12
 8002d36:	af00      	add	r7, sp, #0
 8002d38:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_DelayMs */

  /* USER CODE END TIMER_IF_DelayMs */
}
 8002d3a:	bf00      	nop
 8002d3c:	370c      	adds	r7, #12
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bc80      	pop	{r7}
 8002d42:	4770      	bx	lr

08002d44 <LL_AHB2_GRP1_EnableClock>:
{
 8002d44:	b480      	push	{r7}
 8002d46:	b085      	sub	sp, #20
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002d4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d50:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002d52:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002d5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d60:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	4013      	ands	r3, r2
 8002d66:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002d68:	68fb      	ldr	r3, [r7, #12]
}
 8002d6a:	bf00      	nop
 8002d6c:	3714      	adds	r7, #20
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bc80      	pop	{r7}
 8002d72:	4770      	bx	lr

08002d74 <LL_APB1_GRP1_EnableClock>:
{
 8002d74:	b480      	push	{r7}
 8002d76:	b085      	sub	sp, #20
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002d7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d80:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002d82:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002d8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d90:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	4013      	ands	r3, r2
 8002d96:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002d98:	68fb      	ldr	r3, [r7, #12]
}
 8002d9a:	bf00      	nop
 8002d9c:	3714      	adds	r7, #20
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bc80      	pop	{r7}
 8002da2:	4770      	bx	lr

08002da4 <LL_APB1_GRP2_EnableClock>:
{
 8002da4:	b480      	push	{r7}
 8002da6:	b085      	sub	sp, #20
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR2, Periphs);
 8002dac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002db0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002db2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	4313      	orrs	r3, r2
 8002dba:	65cb      	str	r3, [r1, #92]	; 0x5c
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8002dbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dc0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
}
 8002dca:	bf00      	nop
 8002dcc:	3714      	adds	r7, #20
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bc80      	pop	{r7}
 8002dd2:	4770      	bx	lr

08002dd4 <LL_APB2_GRP1_EnableClock>:
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b085      	sub	sp, #20
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002ddc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002de0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002de2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	4313      	orrs	r3, r2
 8002dea:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002dec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002df0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	4013      	ands	r3, r2
 8002df6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002df8:	68fb      	ldr	r3, [r7, #12]
}
 8002dfa:	bf00      	nop
 8002dfc:	3714      	adds	r7, #20
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bc80      	pop	{r7}
 8002e02:	4770      	bx	lr

08002e04 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8002e08:	4b22      	ldr	r3, [pc, #136]	; (8002e94 <MX_LPUART1_UART_Init+0x90>)
 8002e0a:	4a23      	ldr	r2, [pc, #140]	; (8002e98 <MX_LPUART1_UART_Init+0x94>)
 8002e0c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8002e0e:	4b21      	ldr	r3, [pc, #132]	; (8002e94 <MX_LPUART1_UART_Init+0x90>)
 8002e10:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002e14:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002e16:	4b1f      	ldr	r3, [pc, #124]	; (8002e94 <MX_LPUART1_UART_Init+0x90>)
 8002e18:	2200      	movs	r2, #0
 8002e1a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8002e1c:	4b1d      	ldr	r3, [pc, #116]	; (8002e94 <MX_LPUART1_UART_Init+0x90>)
 8002e1e:	2200      	movs	r2, #0
 8002e20:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8002e22:	4b1c      	ldr	r3, [pc, #112]	; (8002e94 <MX_LPUART1_UART_Init+0x90>)
 8002e24:	2200      	movs	r2, #0
 8002e26:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8002e28:	4b1a      	ldr	r3, [pc, #104]	; (8002e94 <MX_LPUART1_UART_Init+0x90>)
 8002e2a:	220c      	movs	r2, #12
 8002e2c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e2e:	4b19      	ldr	r3, [pc, #100]	; (8002e94 <MX_LPUART1_UART_Init+0x90>)
 8002e30:	2200      	movs	r2, #0
 8002e32:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002e34:	4b17      	ldr	r3, [pc, #92]	; (8002e94 <MX_LPUART1_UART_Init+0x90>)
 8002e36:	2200      	movs	r2, #0
 8002e38:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002e3a:	4b16      	ldr	r3, [pc, #88]	; (8002e94 <MX_LPUART1_UART_Init+0x90>)
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002e40:	4b14      	ldr	r3, [pc, #80]	; (8002e94 <MX_LPUART1_UART_Init+0x90>)
 8002e42:	2200      	movs	r2, #0
 8002e44:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8002e46:	4b13      	ldr	r3, [pc, #76]	; (8002e94 <MX_LPUART1_UART_Init+0x90>)
 8002e48:	2200      	movs	r2, #0
 8002e4a:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8002e4c:	4811      	ldr	r0, [pc, #68]	; (8002e94 <MX_LPUART1_UART_Init+0x90>)
 8002e4e:	f003 fc26 	bl	800669e <HAL_UART_Init>
 8002e52:	4603      	mov	r3, r0
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d001      	beq.n	8002e5c <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8002e58:	f7ff fc58 	bl	800270c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002e5c:	2100      	movs	r1, #0
 8002e5e:	480d      	ldr	r0, [pc, #52]	; (8002e94 <MX_LPUART1_UART_Init+0x90>)
 8002e60:	f005 f84e 	bl	8007f00 <HAL_UARTEx_SetTxFifoThreshold>
 8002e64:	4603      	mov	r3, r0
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d001      	beq.n	8002e6e <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002e6a:	f7ff fc4f 	bl	800270c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002e6e:	2100      	movs	r1, #0
 8002e70:	4808      	ldr	r0, [pc, #32]	; (8002e94 <MX_LPUART1_UART_Init+0x90>)
 8002e72:	f005 f883 	bl	8007f7c <HAL_UARTEx_SetRxFifoThreshold>
 8002e76:	4603      	mov	r3, r0
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d001      	beq.n	8002e80 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002e7c:	f7ff fc46 	bl	800270c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8002e80:	4804      	ldr	r0, [pc, #16]	; (8002e94 <MX_LPUART1_UART_Init+0x90>)
 8002e82:	f005 f805 	bl	8007e90 <HAL_UARTEx_DisableFifoMode>
 8002e86:	4603      	mov	r3, r0
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d001      	beq.n	8002e90 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002e8c:	f7ff fc3e 	bl	800270c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8002e90:	bf00      	nop
 8002e92:	bd80      	pop	{r7, pc}
 8002e94:	20000530 	.word	0x20000530
 8002e98:	40008000 	.word	0x40008000

08002e9c <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002ea0:	4b22      	ldr	r3, [pc, #136]	; (8002f2c <MX_USART1_UART_Init+0x90>)
 8002ea2:	4a23      	ldr	r2, [pc, #140]	; (8002f30 <MX_USART1_UART_Init+0x94>)
 8002ea4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002ea6:	4b21      	ldr	r3, [pc, #132]	; (8002f2c <MX_USART1_UART_Init+0x90>)
 8002ea8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002eac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002eae:	4b1f      	ldr	r3, [pc, #124]	; (8002f2c <MX_USART1_UART_Init+0x90>)
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002eb4:	4b1d      	ldr	r3, [pc, #116]	; (8002f2c <MX_USART1_UART_Init+0x90>)
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002eba:	4b1c      	ldr	r3, [pc, #112]	; (8002f2c <MX_USART1_UART_Init+0x90>)
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002ec0:	4b1a      	ldr	r3, [pc, #104]	; (8002f2c <MX_USART1_UART_Init+0x90>)
 8002ec2:	220c      	movs	r2, #12
 8002ec4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ec6:	4b19      	ldr	r3, [pc, #100]	; (8002f2c <MX_USART1_UART_Init+0x90>)
 8002ec8:	2200      	movs	r2, #0
 8002eca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ecc:	4b17      	ldr	r3, [pc, #92]	; (8002f2c <MX_USART1_UART_Init+0x90>)
 8002ece:	2200      	movs	r2, #0
 8002ed0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002ed2:	4b16      	ldr	r3, [pc, #88]	; (8002f2c <MX_USART1_UART_Init+0x90>)
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002ed8:	4b14      	ldr	r3, [pc, #80]	; (8002f2c <MX_USART1_UART_Init+0x90>)
 8002eda:	2200      	movs	r2, #0
 8002edc:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002ede:	4b13      	ldr	r3, [pc, #76]	; (8002f2c <MX_USART1_UART_Init+0x90>)
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002ee4:	4811      	ldr	r0, [pc, #68]	; (8002f2c <MX_USART1_UART_Init+0x90>)
 8002ee6:	f003 fbda 	bl	800669e <HAL_UART_Init>
 8002eea:	4603      	mov	r3, r0
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d001      	beq.n	8002ef4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002ef0:	f7ff fc0c 	bl	800270c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002ef4:	2100      	movs	r1, #0
 8002ef6:	480d      	ldr	r0, [pc, #52]	; (8002f2c <MX_USART1_UART_Init+0x90>)
 8002ef8:	f005 f802 	bl	8007f00 <HAL_UARTEx_SetTxFifoThreshold>
 8002efc:	4603      	mov	r3, r0
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d001      	beq.n	8002f06 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002f02:	f7ff fc03 	bl	800270c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002f06:	2100      	movs	r1, #0
 8002f08:	4808      	ldr	r0, [pc, #32]	; (8002f2c <MX_USART1_UART_Init+0x90>)
 8002f0a:	f005 f837 	bl	8007f7c <HAL_UARTEx_SetRxFifoThreshold>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d001      	beq.n	8002f18 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002f14:	f7ff fbfa 	bl	800270c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002f18:	4804      	ldr	r0, [pc, #16]	; (8002f2c <MX_USART1_UART_Init+0x90>)
 8002f1a:	f004 ffb9 	bl	8007e90 <HAL_UARTEx_DisableFifoMode>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d001      	beq.n	8002f28 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002f24:	f7ff fbf2 	bl	800270c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002f28:	bf00      	nop
 8002f2a:	bd80      	pop	{r7, pc}
 8002f2c:	200005c4 	.word	0x200005c4
 8002f30:	40013800 	.word	0x40013800

08002f34 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002f38:	4b22      	ldr	r3, [pc, #136]	; (8002fc4 <MX_USART2_UART_Init+0x90>)
 8002f3a:	4a23      	ldr	r2, [pc, #140]	; (8002fc8 <MX_USART2_UART_Init+0x94>)
 8002f3c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002f3e:	4b21      	ldr	r3, [pc, #132]	; (8002fc4 <MX_USART2_UART_Init+0x90>)
 8002f40:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002f44:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002f46:	4b1f      	ldr	r3, [pc, #124]	; (8002fc4 <MX_USART2_UART_Init+0x90>)
 8002f48:	2200      	movs	r2, #0
 8002f4a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002f4c:	4b1d      	ldr	r3, [pc, #116]	; (8002fc4 <MX_USART2_UART_Init+0x90>)
 8002f4e:	2200      	movs	r2, #0
 8002f50:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002f52:	4b1c      	ldr	r3, [pc, #112]	; (8002fc4 <MX_USART2_UART_Init+0x90>)
 8002f54:	2200      	movs	r2, #0
 8002f56:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002f58:	4b1a      	ldr	r3, [pc, #104]	; (8002fc4 <MX_USART2_UART_Init+0x90>)
 8002f5a:	220c      	movs	r2, #12
 8002f5c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f5e:	4b19      	ldr	r3, [pc, #100]	; (8002fc4 <MX_USART2_UART_Init+0x90>)
 8002f60:	2200      	movs	r2, #0
 8002f62:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f64:	4b17      	ldr	r3, [pc, #92]	; (8002fc4 <MX_USART2_UART_Init+0x90>)
 8002f66:	2200      	movs	r2, #0
 8002f68:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002f6a:	4b16      	ldr	r3, [pc, #88]	; (8002fc4 <MX_USART2_UART_Init+0x90>)
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002f70:	4b14      	ldr	r3, [pc, #80]	; (8002fc4 <MX_USART2_UART_Init+0x90>)
 8002f72:	2200      	movs	r2, #0
 8002f74:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002f76:	4b13      	ldr	r3, [pc, #76]	; (8002fc4 <MX_USART2_UART_Init+0x90>)
 8002f78:	2200      	movs	r2, #0
 8002f7a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002f7c:	4811      	ldr	r0, [pc, #68]	; (8002fc4 <MX_USART2_UART_Init+0x90>)
 8002f7e:	f003 fb8e 	bl	800669e <HAL_UART_Init>
 8002f82:	4603      	mov	r3, r0
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d001      	beq.n	8002f8c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002f88:	f7ff fbc0 	bl	800270c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002f8c:	2100      	movs	r1, #0
 8002f8e:	480d      	ldr	r0, [pc, #52]	; (8002fc4 <MX_USART2_UART_Init+0x90>)
 8002f90:	f004 ffb6 	bl	8007f00 <HAL_UARTEx_SetTxFifoThreshold>
 8002f94:	4603      	mov	r3, r0
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d001      	beq.n	8002f9e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8002f9a:	f7ff fbb7 	bl	800270c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002f9e:	2100      	movs	r1, #0
 8002fa0:	4808      	ldr	r0, [pc, #32]	; (8002fc4 <MX_USART2_UART_Init+0x90>)
 8002fa2:	f004 ffeb 	bl	8007f7c <HAL_UARTEx_SetRxFifoThreshold>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d001      	beq.n	8002fb0 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8002fac:	f7ff fbae 	bl	800270c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002fb0:	4804      	ldr	r0, [pc, #16]	; (8002fc4 <MX_USART2_UART_Init+0x90>)
 8002fb2:	f004 ff6d 	bl	8007e90 <HAL_UARTEx_DisableFifoMode>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d001      	beq.n	8002fc0 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002fbc:	f7ff fba6 	bl	800270c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002fc0:	bf00      	nop
 8002fc2:	bd80      	pop	{r7, pc}
 8002fc4:	20000658 	.word	0x20000658
 8002fc8:	40004400 	.word	0x40004400

08002fcc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b096      	sub	sp, #88	; 0x58
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fd4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002fd8:	2200      	movs	r2, #0
 8002fda:	601a      	str	r2, [r3, #0]
 8002fdc:	605a      	str	r2, [r3, #4]
 8002fde:	609a      	str	r2, [r3, #8]
 8002fe0:	60da      	str	r2, [r3, #12]
 8002fe2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002fe4:	f107 030c 	add.w	r3, r7, #12
 8002fe8:	2238      	movs	r2, #56	; 0x38
 8002fea:	2100      	movs	r1, #0
 8002fec:	4618      	mov	r0, r3
 8002fee:	f008 fdf5 	bl	800bbdc <memset>
  if(uartHandle->Instance==LPUART1)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a99      	ldr	r2, [pc, #612]	; (800325c <HAL_UART_MspInit+0x290>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	f040 8092 	bne.w	8003122 <HAL_UART_MspInit+0x156>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8002ffe:	2320      	movs	r3, #32
 8003000:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8003002:	2300      	movs	r3, #0
 8003004:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003006:	f107 030c 	add.w	r3, r7, #12
 800300a:	4618      	mov	r0, r3
 800300c:	f002 fa94 	bl	8005538 <HAL_RCCEx_PeriphCLKConfig>
 8003010:	4603      	mov	r3, r0
 8003012:	2b00      	cmp	r3, #0
 8003014:	d001      	beq.n	800301a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8003016:	f7ff fb79 	bl	800270c <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800301a:	2001      	movs	r0, #1
 800301c:	f7ff fec2 	bl	8002da4 <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003020:	2004      	movs	r0, #4
 8003022:	f7ff fe8f 	bl	8002d44 <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PC1     ------> LPUART1_TX
    PC0     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 8003026:	2303      	movs	r3, #3
 8003028:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800302a:	2302      	movs	r3, #2
 800302c:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800302e:	2300      	movs	r3, #0
 8003030:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003032:	2300      	movs	r3, #0
 8003034:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8003036:	2308      	movs	r3, #8
 8003038:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800303a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800303e:	4619      	mov	r1, r3
 8003040:	4887      	ldr	r0, [pc, #540]	; (8003260 <HAL_UART_MspInit+0x294>)
 8003042:	f000 feed 	bl	8003e20 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel1;
 8003046:	4b87      	ldr	r3, [pc, #540]	; (8003264 <HAL_UART_MspInit+0x298>)
 8003048:	4a87      	ldr	r2, [pc, #540]	; (8003268 <HAL_UART_MspInit+0x29c>)
 800304a:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 800304c:	4b85      	ldr	r3, [pc, #532]	; (8003264 <HAL_UART_MspInit+0x298>)
 800304e:	2215      	movs	r2, #21
 8003050:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003052:	4b84      	ldr	r3, [pc, #528]	; (8003264 <HAL_UART_MspInit+0x298>)
 8003054:	2200      	movs	r2, #0
 8003056:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003058:	4b82      	ldr	r3, [pc, #520]	; (8003264 <HAL_UART_MspInit+0x298>)
 800305a:	2200      	movs	r2, #0
 800305c:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800305e:	4b81      	ldr	r3, [pc, #516]	; (8003264 <HAL_UART_MspInit+0x298>)
 8003060:	2280      	movs	r2, #128	; 0x80
 8003062:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003064:	4b7f      	ldr	r3, [pc, #508]	; (8003264 <HAL_UART_MspInit+0x298>)
 8003066:	2200      	movs	r2, #0
 8003068:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800306a:	4b7e      	ldr	r3, [pc, #504]	; (8003264 <HAL_UART_MspInit+0x298>)
 800306c:	2200      	movs	r2, #0
 800306e:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_NORMAL;
 8003070:	4b7c      	ldr	r3, [pc, #496]	; (8003264 <HAL_UART_MspInit+0x298>)
 8003072:	2200      	movs	r2, #0
 8003074:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003076:	4b7b      	ldr	r3, [pc, #492]	; (8003264 <HAL_UART_MspInit+0x298>)
 8003078:	2200      	movs	r2, #0
 800307a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 800307c:	4879      	ldr	r0, [pc, #484]	; (8003264 <HAL_UART_MspInit+0x298>)
 800307e:	f000 fb4d 	bl	800371c <HAL_DMA_Init>
 8003082:	4603      	mov	r3, r0
 8003084:	2b00      	cmp	r3, #0
 8003086:	d001      	beq.n	800308c <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 8003088:	f7ff fb40 	bl	800270c <Error_Handler>
    }

    if (HAL_DMA_ConfigChannelAttributes(&hdma_lpuart1_rx, DMA_CHANNEL_NPRIV) != HAL_OK)
 800308c:	2110      	movs	r1, #16
 800308e:	4875      	ldr	r0, [pc, #468]	; (8003264 <HAL_UART_MspInit+0x298>)
 8003090:	f000 fdee 	bl	8003c70 <HAL_DMA_ConfigChannelAttributes>
 8003094:	4603      	mov	r3, r0
 8003096:	2b00      	cmp	r3, #0
 8003098:	d001      	beq.n	800309e <HAL_UART_MspInit+0xd2>
    {
      Error_Handler();
 800309a:	f7ff fb37 	bl	800270c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	4a70      	ldr	r2, [pc, #448]	; (8003264 <HAL_UART_MspInit+0x298>)
 80030a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80030a6:	4a6f      	ldr	r2, [pc, #444]	; (8003264 <HAL_UART_MspInit+0x298>)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel2;
 80030ac:	4b6f      	ldr	r3, [pc, #444]	; (800326c <HAL_UART_MspInit+0x2a0>)
 80030ae:	4a70      	ldr	r2, [pc, #448]	; (8003270 <HAL_UART_MspInit+0x2a4>)
 80030b0:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 80030b2:	4b6e      	ldr	r3, [pc, #440]	; (800326c <HAL_UART_MspInit+0x2a0>)
 80030b4:	2216      	movs	r2, #22
 80030b6:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80030b8:	4b6c      	ldr	r3, [pc, #432]	; (800326c <HAL_UART_MspInit+0x2a0>)
 80030ba:	2210      	movs	r2, #16
 80030bc:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80030be:	4b6b      	ldr	r3, [pc, #428]	; (800326c <HAL_UART_MspInit+0x2a0>)
 80030c0:	2200      	movs	r2, #0
 80030c2:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80030c4:	4b69      	ldr	r3, [pc, #420]	; (800326c <HAL_UART_MspInit+0x2a0>)
 80030c6:	2280      	movs	r2, #128	; 0x80
 80030c8:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80030ca:	4b68      	ldr	r3, [pc, #416]	; (800326c <HAL_UART_MspInit+0x2a0>)
 80030cc:	2200      	movs	r2, #0
 80030ce:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80030d0:	4b66      	ldr	r3, [pc, #408]	; (800326c <HAL_UART_MspInit+0x2a0>)
 80030d2:	2200      	movs	r2, #0
 80030d4:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 80030d6:	4b65      	ldr	r3, [pc, #404]	; (800326c <HAL_UART_MspInit+0x2a0>)
 80030d8:	2200      	movs	r2, #0
 80030da:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80030dc:	4b63      	ldr	r3, [pc, #396]	; (800326c <HAL_UART_MspInit+0x2a0>)
 80030de:	2200      	movs	r2, #0
 80030e0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 80030e2:	4862      	ldr	r0, [pc, #392]	; (800326c <HAL_UART_MspInit+0x2a0>)
 80030e4:	f000 fb1a 	bl	800371c <HAL_DMA_Init>
 80030e8:	4603      	mov	r3, r0
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d001      	beq.n	80030f2 <HAL_UART_MspInit+0x126>
    {
      Error_Handler();
 80030ee:	f7ff fb0d 	bl	800270c <Error_Handler>
    }

    if (HAL_DMA_ConfigChannelAttributes(&hdma_lpuart1_tx, DMA_CHANNEL_NPRIV) != HAL_OK)
 80030f2:	2110      	movs	r1, #16
 80030f4:	485d      	ldr	r0, [pc, #372]	; (800326c <HAL_UART_MspInit+0x2a0>)
 80030f6:	f000 fdbb 	bl	8003c70 <HAL_DMA_ConfigChannelAttributes>
 80030fa:	4603      	mov	r3, r0
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d001      	beq.n	8003104 <HAL_UART_MspInit+0x138>
    {
      Error_Handler();
 8003100:	f7ff fb04 	bl	800270c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	4a59      	ldr	r2, [pc, #356]	; (800326c <HAL_UART_MspInit+0x2a0>)
 8003108:	67da      	str	r2, [r3, #124]	; 0x7c
 800310a:	4a58      	ldr	r2, [pc, #352]	; (800326c <HAL_UART_MspInit+0x2a0>)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8003110:	2200      	movs	r2, #0
 8003112:	2100      	movs	r1, #0
 8003114:	2026      	movs	r0, #38	; 0x26
 8003116:	f000 facc 	bl	80036b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 800311a:	2026      	movs	r0, #38	; 0x26
 800311c:	f000 fae3 	bl	80036e6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003120:	e14c      	b.n	80033bc <HAL_UART_MspInit+0x3f0>
  else if(uartHandle->Instance==USART1)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a53      	ldr	r2, [pc, #332]	; (8003274 <HAL_UART_MspInit+0x2a8>)
 8003128:	4293      	cmp	r3, r2
 800312a:	f040 80ad 	bne.w	8003288 <HAL_UART_MspInit+0x2bc>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800312e:	2301      	movs	r3, #1
 8003130:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003132:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8003136:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003138:	f107 030c 	add.w	r3, r7, #12
 800313c:	4618      	mov	r0, r3
 800313e:	f002 f9fb 	bl	8005538 <HAL_RCCEx_PeriphCLKConfig>
 8003142:	4603      	mov	r3, r0
 8003144:	2b00      	cmp	r3, #0
 8003146:	d001      	beq.n	800314c <HAL_UART_MspInit+0x180>
      Error_Handler();
 8003148:	f7ff fae0 	bl	800270c <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 800314c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003150:	f7ff fe40 	bl	8002dd4 <LL_APB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003154:	2001      	movs	r0, #1
 8003156:	f7ff fdf5 	bl	8002d44 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 800315a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800315e:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003160:	2302      	movs	r3, #2
 8003162:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003164:	2300      	movs	r3, #0
 8003166:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003168:	2300      	movs	r3, #0
 800316a:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800316c:	2307      	movs	r3, #7
 800316e:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003170:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003174:	4619      	mov	r1, r3
 8003176:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800317a:	f000 fe51 	bl	8003e20 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel3;
 800317e:	4b3e      	ldr	r3, [pc, #248]	; (8003278 <HAL_UART_MspInit+0x2ac>)
 8003180:	4a3e      	ldr	r2, [pc, #248]	; (800327c <HAL_UART_MspInit+0x2b0>)
 8003182:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8003184:	4b3c      	ldr	r3, [pc, #240]	; (8003278 <HAL_UART_MspInit+0x2ac>)
 8003186:	2211      	movs	r2, #17
 8003188:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800318a:	4b3b      	ldr	r3, [pc, #236]	; (8003278 <HAL_UART_MspInit+0x2ac>)
 800318c:	2200      	movs	r2, #0
 800318e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003190:	4b39      	ldr	r3, [pc, #228]	; (8003278 <HAL_UART_MspInit+0x2ac>)
 8003192:	2200      	movs	r2, #0
 8003194:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003196:	4b38      	ldr	r3, [pc, #224]	; (8003278 <HAL_UART_MspInit+0x2ac>)
 8003198:	2280      	movs	r2, #128	; 0x80
 800319a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800319c:	4b36      	ldr	r3, [pc, #216]	; (8003278 <HAL_UART_MspInit+0x2ac>)
 800319e:	2200      	movs	r2, #0
 80031a0:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80031a2:	4b35      	ldr	r3, [pc, #212]	; (8003278 <HAL_UART_MspInit+0x2ac>)
 80031a4:	2200      	movs	r2, #0
 80031a6:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80031a8:	4b33      	ldr	r3, [pc, #204]	; (8003278 <HAL_UART_MspInit+0x2ac>)
 80031aa:	2200      	movs	r2, #0
 80031ac:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80031ae:	4b32      	ldr	r3, [pc, #200]	; (8003278 <HAL_UART_MspInit+0x2ac>)
 80031b0:	2200      	movs	r2, #0
 80031b2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80031b4:	4830      	ldr	r0, [pc, #192]	; (8003278 <HAL_UART_MspInit+0x2ac>)
 80031b6:	f000 fab1 	bl	800371c <HAL_DMA_Init>
 80031ba:	4603      	mov	r3, r0
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d001      	beq.n	80031c4 <HAL_UART_MspInit+0x1f8>
      Error_Handler();
 80031c0:	f7ff faa4 	bl	800270c <Error_Handler>
    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart1_rx, DMA_CHANNEL_NPRIV) != HAL_OK)
 80031c4:	2110      	movs	r1, #16
 80031c6:	482c      	ldr	r0, [pc, #176]	; (8003278 <HAL_UART_MspInit+0x2ac>)
 80031c8:	f000 fd52 	bl	8003c70 <HAL_DMA_ConfigChannelAttributes>
 80031cc:	4603      	mov	r3, r0
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d001      	beq.n	80031d6 <HAL_UART_MspInit+0x20a>
      Error_Handler();
 80031d2:	f7ff fa9b 	bl	800270c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	4a27      	ldr	r2, [pc, #156]	; (8003278 <HAL_UART_MspInit+0x2ac>)
 80031da:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80031de:	4a26      	ldr	r2, [pc, #152]	; (8003278 <HAL_UART_MspInit+0x2ac>)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6293      	str	r3, [r2, #40]	; 0x28
    hdma_usart1_tx.Instance = DMA1_Channel4;
 80031e4:	4b26      	ldr	r3, [pc, #152]	; (8003280 <HAL_UART_MspInit+0x2b4>)
 80031e6:	4a27      	ldr	r2, [pc, #156]	; (8003284 <HAL_UART_MspInit+0x2b8>)
 80031e8:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 80031ea:	4b25      	ldr	r3, [pc, #148]	; (8003280 <HAL_UART_MspInit+0x2b4>)
 80031ec:	2212      	movs	r2, #18
 80031ee:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80031f0:	4b23      	ldr	r3, [pc, #140]	; (8003280 <HAL_UART_MspInit+0x2b4>)
 80031f2:	2210      	movs	r2, #16
 80031f4:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80031f6:	4b22      	ldr	r3, [pc, #136]	; (8003280 <HAL_UART_MspInit+0x2b4>)
 80031f8:	2200      	movs	r2, #0
 80031fa:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80031fc:	4b20      	ldr	r3, [pc, #128]	; (8003280 <HAL_UART_MspInit+0x2b4>)
 80031fe:	2280      	movs	r2, #128	; 0x80
 8003200:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003202:	4b1f      	ldr	r3, [pc, #124]	; (8003280 <HAL_UART_MspInit+0x2b4>)
 8003204:	2200      	movs	r2, #0
 8003206:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003208:	4b1d      	ldr	r3, [pc, #116]	; (8003280 <HAL_UART_MspInit+0x2b4>)
 800320a:	2200      	movs	r2, #0
 800320c:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800320e:	4b1c      	ldr	r3, [pc, #112]	; (8003280 <HAL_UART_MspInit+0x2b4>)
 8003210:	2200      	movs	r2, #0
 8003212:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003214:	4b1a      	ldr	r3, [pc, #104]	; (8003280 <HAL_UART_MspInit+0x2b4>)
 8003216:	2200      	movs	r2, #0
 8003218:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800321a:	4819      	ldr	r0, [pc, #100]	; (8003280 <HAL_UART_MspInit+0x2b4>)
 800321c:	f000 fa7e 	bl	800371c <HAL_DMA_Init>
 8003220:	4603      	mov	r3, r0
 8003222:	2b00      	cmp	r3, #0
 8003224:	d001      	beq.n	800322a <HAL_UART_MspInit+0x25e>
      Error_Handler();
 8003226:	f7ff fa71 	bl	800270c <Error_Handler>
    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart1_tx, DMA_CHANNEL_NPRIV) != HAL_OK)
 800322a:	2110      	movs	r1, #16
 800322c:	4814      	ldr	r0, [pc, #80]	; (8003280 <HAL_UART_MspInit+0x2b4>)
 800322e:	f000 fd1f 	bl	8003c70 <HAL_DMA_ConfigChannelAttributes>
 8003232:	4603      	mov	r3, r0
 8003234:	2b00      	cmp	r3, #0
 8003236:	d001      	beq.n	800323c <HAL_UART_MspInit+0x270>
      Error_Handler();
 8003238:	f7ff fa68 	bl	800270c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	4a10      	ldr	r2, [pc, #64]	; (8003280 <HAL_UART_MspInit+0x2b4>)
 8003240:	67da      	str	r2, [r3, #124]	; 0x7c
 8003242:	4a0f      	ldr	r2, [pc, #60]	; (8003280 <HAL_UART_MspInit+0x2b4>)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003248:	2200      	movs	r2, #0
 800324a:	2100      	movs	r1, #0
 800324c:	2024      	movs	r0, #36	; 0x24
 800324e:	f000 fa30 	bl	80036b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003252:	2024      	movs	r0, #36	; 0x24
 8003254:	f000 fa47 	bl	80036e6 <HAL_NVIC_EnableIRQ>
}
 8003258:	e0b0      	b.n	80033bc <HAL_UART_MspInit+0x3f0>
 800325a:	bf00      	nop
 800325c:	40008000 	.word	0x40008000
 8003260:	48000800 	.word	0x48000800
 8003264:	200006ec 	.word	0x200006ec
 8003268:	40020008 	.word	0x40020008
 800326c:	2000074c 	.word	0x2000074c
 8003270:	4002001c 	.word	0x4002001c
 8003274:	40013800 	.word	0x40013800
 8003278:	200007ac 	.word	0x200007ac
 800327c:	40020030 	.word	0x40020030
 8003280:	2000080c 	.word	0x2000080c
 8003284:	40020044 	.word	0x40020044
  else if(uartHandle->Instance==USART2)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a4d      	ldr	r2, [pc, #308]	; (80033c4 <HAL_UART_MspInit+0x3f8>)
 800328e:	4293      	cmp	r3, r2
 8003290:	f040 8094 	bne.w	80033bc <HAL_UART_MspInit+0x3f0>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003294:	2302      	movs	r3, #2
 8003296:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003298:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 800329c:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800329e:	f107 030c 	add.w	r3, r7, #12
 80032a2:	4618      	mov	r0, r3
 80032a4:	f002 f948 	bl	8005538 <HAL_RCCEx_PeriphCLKConfig>
 80032a8:	4603      	mov	r3, r0
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d001      	beq.n	80032b2 <HAL_UART_MspInit+0x2e6>
      Error_Handler();
 80032ae:	f7ff fa2d 	bl	800270c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80032b2:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80032b6:	f7ff fd5d 	bl	8002d74 <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032ba:	2001      	movs	r0, #1
 80032bc:	f7ff fd42 	bl	8002d44 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = T_VCP_RX_Pin|T_VCP_RXA2_Pin;
 80032c0:	230c      	movs	r3, #12
 80032c2:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032c4:	2302      	movs	r3, #2
 80032c6:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032c8:	2300      	movs	r3, #0
 80032ca:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032cc:	2300      	movs	r3, #0
 80032ce:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80032d0:	2307      	movs	r3, #7
 80032d2:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032d4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80032d8:	4619      	mov	r1, r3
 80032da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80032de:	f000 fd9f 	bl	8003e20 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel5;
 80032e2:	4b39      	ldr	r3, [pc, #228]	; (80033c8 <HAL_UART_MspInit+0x3fc>)
 80032e4:	4a39      	ldr	r2, [pc, #228]	; (80033cc <HAL_UART_MspInit+0x400>)
 80032e6:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 80032e8:	4b37      	ldr	r3, [pc, #220]	; (80033c8 <HAL_UART_MspInit+0x3fc>)
 80032ea:	2213      	movs	r2, #19
 80032ec:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80032ee:	4b36      	ldr	r3, [pc, #216]	; (80033c8 <HAL_UART_MspInit+0x3fc>)
 80032f0:	2200      	movs	r2, #0
 80032f2:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80032f4:	4b34      	ldr	r3, [pc, #208]	; (80033c8 <HAL_UART_MspInit+0x3fc>)
 80032f6:	2200      	movs	r2, #0
 80032f8:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80032fa:	4b33      	ldr	r3, [pc, #204]	; (80033c8 <HAL_UART_MspInit+0x3fc>)
 80032fc:	2280      	movs	r2, #128	; 0x80
 80032fe:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003300:	4b31      	ldr	r3, [pc, #196]	; (80033c8 <HAL_UART_MspInit+0x3fc>)
 8003302:	2200      	movs	r2, #0
 8003304:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003306:	4b30      	ldr	r3, [pc, #192]	; (80033c8 <HAL_UART_MspInit+0x3fc>)
 8003308:	2200      	movs	r2, #0
 800330a:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800330c:	4b2e      	ldr	r3, [pc, #184]	; (80033c8 <HAL_UART_MspInit+0x3fc>)
 800330e:	2200      	movs	r2, #0
 8003310:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003312:	4b2d      	ldr	r3, [pc, #180]	; (80033c8 <HAL_UART_MspInit+0x3fc>)
 8003314:	2200      	movs	r2, #0
 8003316:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003318:	482b      	ldr	r0, [pc, #172]	; (80033c8 <HAL_UART_MspInit+0x3fc>)
 800331a:	f000 f9ff 	bl	800371c <HAL_DMA_Init>
 800331e:	4603      	mov	r3, r0
 8003320:	2b00      	cmp	r3, #0
 8003322:	d001      	beq.n	8003328 <HAL_UART_MspInit+0x35c>
      Error_Handler();
 8003324:	f7ff f9f2 	bl	800270c <Error_Handler>
    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart2_rx, DMA_CHANNEL_NPRIV) != HAL_OK)
 8003328:	2110      	movs	r1, #16
 800332a:	4827      	ldr	r0, [pc, #156]	; (80033c8 <HAL_UART_MspInit+0x3fc>)
 800332c:	f000 fca0 	bl	8003c70 <HAL_DMA_ConfigChannelAttributes>
 8003330:	4603      	mov	r3, r0
 8003332:	2b00      	cmp	r3, #0
 8003334:	d001      	beq.n	800333a <HAL_UART_MspInit+0x36e>
      Error_Handler();
 8003336:	f7ff f9e9 	bl	800270c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	4a22      	ldr	r2, [pc, #136]	; (80033c8 <HAL_UART_MspInit+0x3fc>)
 800333e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8003342:	4a21      	ldr	r2, [pc, #132]	; (80033c8 <HAL_UART_MspInit+0x3fc>)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6293      	str	r3, [r2, #40]	; 0x28
    hdma_usart2_tx.Instance = DMA1_Channel6;
 8003348:	4b21      	ldr	r3, [pc, #132]	; (80033d0 <HAL_UART_MspInit+0x404>)
 800334a:	4a22      	ldr	r2, [pc, #136]	; (80033d4 <HAL_UART_MspInit+0x408>)
 800334c:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 800334e:	4b20      	ldr	r3, [pc, #128]	; (80033d0 <HAL_UART_MspInit+0x404>)
 8003350:	2214      	movs	r2, #20
 8003352:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003354:	4b1e      	ldr	r3, [pc, #120]	; (80033d0 <HAL_UART_MspInit+0x404>)
 8003356:	2210      	movs	r2, #16
 8003358:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800335a:	4b1d      	ldr	r3, [pc, #116]	; (80033d0 <HAL_UART_MspInit+0x404>)
 800335c:	2200      	movs	r2, #0
 800335e:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003360:	4b1b      	ldr	r3, [pc, #108]	; (80033d0 <HAL_UART_MspInit+0x404>)
 8003362:	2280      	movs	r2, #128	; 0x80
 8003364:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003366:	4b1a      	ldr	r3, [pc, #104]	; (80033d0 <HAL_UART_MspInit+0x404>)
 8003368:	2200      	movs	r2, #0
 800336a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800336c:	4b18      	ldr	r3, [pc, #96]	; (80033d0 <HAL_UART_MspInit+0x404>)
 800336e:	2200      	movs	r2, #0
 8003370:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8003372:	4b17      	ldr	r3, [pc, #92]	; (80033d0 <HAL_UART_MspInit+0x404>)
 8003374:	2200      	movs	r2, #0
 8003376:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003378:	4b15      	ldr	r3, [pc, #84]	; (80033d0 <HAL_UART_MspInit+0x404>)
 800337a:	2200      	movs	r2, #0
 800337c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800337e:	4814      	ldr	r0, [pc, #80]	; (80033d0 <HAL_UART_MspInit+0x404>)
 8003380:	f000 f9cc 	bl	800371c <HAL_DMA_Init>
 8003384:	4603      	mov	r3, r0
 8003386:	2b00      	cmp	r3, #0
 8003388:	d001      	beq.n	800338e <HAL_UART_MspInit+0x3c2>
      Error_Handler();
 800338a:	f7ff f9bf 	bl	800270c <Error_Handler>
    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart2_tx, DMA_CHANNEL_NPRIV) != HAL_OK)
 800338e:	2110      	movs	r1, #16
 8003390:	480f      	ldr	r0, [pc, #60]	; (80033d0 <HAL_UART_MspInit+0x404>)
 8003392:	f000 fc6d 	bl	8003c70 <HAL_DMA_ConfigChannelAttributes>
 8003396:	4603      	mov	r3, r0
 8003398:	2b00      	cmp	r3, #0
 800339a:	d001      	beq.n	80033a0 <HAL_UART_MspInit+0x3d4>
      Error_Handler();
 800339c:	f7ff f9b6 	bl	800270c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	4a0b      	ldr	r2, [pc, #44]	; (80033d0 <HAL_UART_MspInit+0x404>)
 80033a4:	67da      	str	r2, [r3, #124]	; 0x7c
 80033a6:	4a0a      	ldr	r2, [pc, #40]	; (80033d0 <HAL_UART_MspInit+0x404>)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80033ac:	2200      	movs	r2, #0
 80033ae:	2100      	movs	r1, #0
 80033b0:	2025      	movs	r0, #37	; 0x25
 80033b2:	f000 f97e 	bl	80036b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80033b6:	2025      	movs	r0, #37	; 0x25
 80033b8:	f000 f995 	bl	80036e6 <HAL_NVIC_EnableIRQ>
}
 80033bc:	bf00      	nop
 80033be:	3758      	adds	r7, #88	; 0x58
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bd80      	pop	{r7, pc}
 80033c4:	40004400 	.word	0x40004400
 80033c8:	2000086c 	.word	0x2000086c
 80033cc:	40020058 	.word	0x40020058
 80033d0:	200008cc 	.word	0x200008cc
 80033d4:	4002006c 	.word	0x4002006c

080033d8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80033d8:	480d      	ldr	r0, [pc, #52]	; (8003410 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80033da:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80033dc:	f7ff fbbe 	bl	8002b5c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80033e0:	480c      	ldr	r0, [pc, #48]	; (8003414 <LoopForever+0x6>)
  ldr r1, =_edata
 80033e2:	490d      	ldr	r1, [pc, #52]	; (8003418 <LoopForever+0xa>)
  ldr r2, =_sidata
 80033e4:	4a0d      	ldr	r2, [pc, #52]	; (800341c <LoopForever+0xe>)
  movs r3, #0
 80033e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80033e8:	e002      	b.n	80033f0 <LoopCopyDataInit>

080033ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80033ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80033ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80033ee:	3304      	adds	r3, #4

080033f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80033f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80033f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80033f4:	d3f9      	bcc.n	80033ea <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80033f6:	4a0a      	ldr	r2, [pc, #40]	; (8003420 <LoopForever+0x12>)
  ldr r4, =_ebss
 80033f8:	4c0a      	ldr	r4, [pc, #40]	; (8003424 <LoopForever+0x16>)
  movs r3, #0
 80033fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80033fc:	e001      	b.n	8003402 <LoopFillZerobss>

080033fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80033fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003400:	3204      	adds	r2, #4

08003402 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003402:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003404:	d3fb      	bcc.n	80033fe <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003406:	f008 fbf7 	bl	800bbf8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800340a:	f7fd ff63 	bl	80012d4 <main>

0800340e <LoopForever>:

LoopForever:
    b LoopForever
 800340e:	e7fe      	b.n	800340e <LoopForever>
  ldr   r0, =_estack
 8003410:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8003414:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003418:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 800341c:	0800d004 	.word	0x0800d004
  ldr r2, =_sbss
 8003420:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8003424:	20000c38 	.word	0x20000c38

08003428 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003428:	e7fe      	b.n	8003428 <ADC_IRQHandler>
	...

0800342c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b082      	sub	sp, #8
 8003430:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003432:	2300      	movs	r3, #0
 8003434:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003436:	2003      	movs	r0, #3
 8003438:	f000 f930 	bl	800369c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800343c:	f001 fe9e 	bl	800517c <HAL_RCC_GetHCLKFreq>
 8003440:	4603      	mov	r3, r0
 8003442:	4a09      	ldr	r2, [pc, #36]	; (8003468 <HAL_Init+0x3c>)
 8003444:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003446:	2000      	movs	r0, #0
 8003448:	f000 f810 	bl	800346c <HAL_InitTick>
 800344c:	4603      	mov	r3, r0
 800344e:	2b00      	cmp	r3, #0
 8003450:	d002      	beq.n	8003458 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8003452:	2301      	movs	r3, #1
 8003454:	71fb      	strb	r3, [r7, #7]
 8003456:	e001      	b.n	800345c <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003458:	f7ff fa54 	bl	8002904 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800345c:	79fb      	ldrb	r3, [r7, #7]
}
 800345e:	4618      	mov	r0, r3
 8003460:	3708      	adds	r7, #8
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}
 8003466:	bf00      	nop
 8003468:	2000000c 	.word	0x2000000c

0800346c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b084      	sub	sp, #16
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003474:	2300      	movs	r3, #0
 8003476:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003478:	4b17      	ldr	r3, [pc, #92]	; (80034d8 <HAL_InitTick+0x6c>)
 800347a:	781b      	ldrb	r3, [r3, #0]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d024      	beq.n	80034ca <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003480:	f001 fe7c 	bl	800517c <HAL_RCC_GetHCLKFreq>
 8003484:	4602      	mov	r2, r0
 8003486:	4b14      	ldr	r3, [pc, #80]	; (80034d8 <HAL_InitTick+0x6c>)
 8003488:	781b      	ldrb	r3, [r3, #0]
 800348a:	4619      	mov	r1, r3
 800348c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003490:	fbb3 f3f1 	udiv	r3, r3, r1
 8003494:	fbb2 f3f3 	udiv	r3, r2, r3
 8003498:	4618      	mov	r0, r3
 800349a:	f000 f932 	bl	8003702 <HAL_SYSTICK_Config>
 800349e:	4603      	mov	r3, r0
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d10f      	bne.n	80034c4 <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2b0f      	cmp	r3, #15
 80034a8:	d809      	bhi.n	80034be <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80034aa:	2200      	movs	r2, #0
 80034ac:	6879      	ldr	r1, [r7, #4]
 80034ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80034b2:	f000 f8fe 	bl	80036b2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80034b6:	4a09      	ldr	r2, [pc, #36]	; (80034dc <HAL_InitTick+0x70>)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6013      	str	r3, [r2, #0]
 80034bc:	e007      	b.n	80034ce <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	73fb      	strb	r3, [r7, #15]
 80034c2:	e004      	b.n	80034ce <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 80034c4:	2301      	movs	r3, #1
 80034c6:	73fb      	strb	r3, [r7, #15]
 80034c8:	e001      	b.n	80034ce <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 80034ca:	2301      	movs	r3, #1
 80034cc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80034ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	3710      	adds	r7, #16
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bd80      	pop	{r7, pc}
 80034d8:	20000014 	.word	0x20000014
 80034dc:	20000010 	.word	0x20000010

080034e0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80034e0:	b480      	push	{r7}
 80034e2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80034e4:	4b05      	ldr	r3, [pc, #20]	; (80034fc <HAL_IncTick+0x1c>)
 80034e6:	781b      	ldrb	r3, [r3, #0]
 80034e8:	461a      	mov	r2, r3
 80034ea:	4b05      	ldr	r3, [pc, #20]	; (8003500 <HAL_IncTick+0x20>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4413      	add	r3, r2
 80034f0:	4a03      	ldr	r2, [pc, #12]	; (8003500 <HAL_IncTick+0x20>)
 80034f2:	6013      	str	r3, [r2, #0]
}
 80034f4:	bf00      	nop
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bc80      	pop	{r7}
 80034fa:	4770      	bx	lr
 80034fc:	20000014 	.word	0x20000014
 8003500:	2000092c 	.word	0x2000092c

08003504 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003504:	b480      	push	{r7}
 8003506:	b085      	sub	sp, #20
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	f003 0307 	and.w	r3, r3, #7
 8003512:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003514:	4b0c      	ldr	r3, [pc, #48]	; (8003548 <__NVIC_SetPriorityGrouping+0x44>)
 8003516:	68db      	ldr	r3, [r3, #12]
 8003518:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800351a:	68ba      	ldr	r2, [r7, #8]
 800351c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003520:	4013      	ands	r3, r2
 8003522:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800352c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003530:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003534:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003536:	4a04      	ldr	r2, [pc, #16]	; (8003548 <__NVIC_SetPriorityGrouping+0x44>)
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	60d3      	str	r3, [r2, #12]
}
 800353c:	bf00      	nop
 800353e:	3714      	adds	r7, #20
 8003540:	46bd      	mov	sp, r7
 8003542:	bc80      	pop	{r7}
 8003544:	4770      	bx	lr
 8003546:	bf00      	nop
 8003548:	e000ed00 	.word	0xe000ed00

0800354c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800354c:	b480      	push	{r7}
 800354e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003550:	4b04      	ldr	r3, [pc, #16]	; (8003564 <__NVIC_GetPriorityGrouping+0x18>)
 8003552:	68db      	ldr	r3, [r3, #12]
 8003554:	0a1b      	lsrs	r3, r3, #8
 8003556:	f003 0307 	and.w	r3, r3, #7
}
 800355a:	4618      	mov	r0, r3
 800355c:	46bd      	mov	sp, r7
 800355e:	bc80      	pop	{r7}
 8003560:	4770      	bx	lr
 8003562:	bf00      	nop
 8003564:	e000ed00 	.word	0xe000ed00

08003568 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003568:	b480      	push	{r7}
 800356a:	b083      	sub	sp, #12
 800356c:	af00      	add	r7, sp, #0
 800356e:	4603      	mov	r3, r0
 8003570:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003572:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003576:	2b00      	cmp	r3, #0
 8003578:	db0b      	blt.n	8003592 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800357a:	79fb      	ldrb	r3, [r7, #7]
 800357c:	f003 021f 	and.w	r2, r3, #31
 8003580:	4906      	ldr	r1, [pc, #24]	; (800359c <__NVIC_EnableIRQ+0x34>)
 8003582:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003586:	095b      	lsrs	r3, r3, #5
 8003588:	2001      	movs	r0, #1
 800358a:	fa00 f202 	lsl.w	r2, r0, r2
 800358e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003592:	bf00      	nop
 8003594:	370c      	adds	r7, #12
 8003596:	46bd      	mov	sp, r7
 8003598:	bc80      	pop	{r7}
 800359a:	4770      	bx	lr
 800359c:	e000e100 	.word	0xe000e100

080035a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80035a0:	b480      	push	{r7}
 80035a2:	b083      	sub	sp, #12
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	4603      	mov	r3, r0
 80035a8:	6039      	str	r1, [r7, #0]
 80035aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	db0a      	blt.n	80035ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	b2da      	uxtb	r2, r3
 80035b8:	490c      	ldr	r1, [pc, #48]	; (80035ec <__NVIC_SetPriority+0x4c>)
 80035ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035be:	0112      	lsls	r2, r2, #4
 80035c0:	b2d2      	uxtb	r2, r2
 80035c2:	440b      	add	r3, r1
 80035c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80035c8:	e00a      	b.n	80035e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	b2da      	uxtb	r2, r3
 80035ce:	4908      	ldr	r1, [pc, #32]	; (80035f0 <__NVIC_SetPriority+0x50>)
 80035d0:	79fb      	ldrb	r3, [r7, #7]
 80035d2:	f003 030f 	and.w	r3, r3, #15
 80035d6:	3b04      	subs	r3, #4
 80035d8:	0112      	lsls	r2, r2, #4
 80035da:	b2d2      	uxtb	r2, r2
 80035dc:	440b      	add	r3, r1
 80035de:	761a      	strb	r2, [r3, #24]
}
 80035e0:	bf00      	nop
 80035e2:	370c      	adds	r7, #12
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bc80      	pop	{r7}
 80035e8:	4770      	bx	lr
 80035ea:	bf00      	nop
 80035ec:	e000e100 	.word	0xe000e100
 80035f0:	e000ed00 	.word	0xe000ed00

080035f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b089      	sub	sp, #36	; 0x24
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	60f8      	str	r0, [r7, #12]
 80035fc:	60b9      	str	r1, [r7, #8]
 80035fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	f003 0307 	and.w	r3, r3, #7
 8003606:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003608:	69fb      	ldr	r3, [r7, #28]
 800360a:	f1c3 0307 	rsb	r3, r3, #7
 800360e:	2b04      	cmp	r3, #4
 8003610:	bf28      	it	cs
 8003612:	2304      	movcs	r3, #4
 8003614:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003616:	69fb      	ldr	r3, [r7, #28]
 8003618:	3304      	adds	r3, #4
 800361a:	2b06      	cmp	r3, #6
 800361c:	d902      	bls.n	8003624 <NVIC_EncodePriority+0x30>
 800361e:	69fb      	ldr	r3, [r7, #28]
 8003620:	3b03      	subs	r3, #3
 8003622:	e000      	b.n	8003626 <NVIC_EncodePriority+0x32>
 8003624:	2300      	movs	r3, #0
 8003626:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003628:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800362c:	69bb      	ldr	r3, [r7, #24]
 800362e:	fa02 f303 	lsl.w	r3, r2, r3
 8003632:	43da      	mvns	r2, r3
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	401a      	ands	r2, r3
 8003638:	697b      	ldr	r3, [r7, #20]
 800363a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800363c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	fa01 f303 	lsl.w	r3, r1, r3
 8003646:	43d9      	mvns	r1, r3
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800364c:	4313      	orrs	r3, r2
         );
}
 800364e:	4618      	mov	r0, r3
 8003650:	3724      	adds	r7, #36	; 0x24
 8003652:	46bd      	mov	sp, r7
 8003654:	bc80      	pop	{r7}
 8003656:	4770      	bx	lr

08003658 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b082      	sub	sp, #8
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	3b01      	subs	r3, #1
 8003664:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003668:	d301      	bcc.n	800366e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800366a:	2301      	movs	r3, #1
 800366c:	e00f      	b.n	800368e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800366e:	4a0a      	ldr	r2, [pc, #40]	; (8003698 <SysTick_Config+0x40>)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	3b01      	subs	r3, #1
 8003674:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003676:	210f      	movs	r1, #15
 8003678:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800367c:	f7ff ff90 	bl	80035a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003680:	4b05      	ldr	r3, [pc, #20]	; (8003698 <SysTick_Config+0x40>)
 8003682:	2200      	movs	r2, #0
 8003684:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003686:	4b04      	ldr	r3, [pc, #16]	; (8003698 <SysTick_Config+0x40>)
 8003688:	2207      	movs	r2, #7
 800368a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800368c:	2300      	movs	r3, #0
}
 800368e:	4618      	mov	r0, r3
 8003690:	3708      	adds	r7, #8
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}
 8003696:	bf00      	nop
 8003698:	e000e010 	.word	0xe000e010

0800369c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b082      	sub	sp, #8
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80036a4:	6878      	ldr	r0, [r7, #4]
 80036a6:	f7ff ff2d 	bl	8003504 <__NVIC_SetPriorityGrouping>
}
 80036aa:	bf00      	nop
 80036ac:	3708      	adds	r7, #8
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}

080036b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036b2:	b580      	push	{r7, lr}
 80036b4:	b086      	sub	sp, #24
 80036b6:	af00      	add	r7, sp, #0
 80036b8:	4603      	mov	r3, r0
 80036ba:	60b9      	str	r1, [r7, #8]
 80036bc:	607a      	str	r2, [r7, #4]
 80036be:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80036c0:	f7ff ff44 	bl	800354c <__NVIC_GetPriorityGrouping>
 80036c4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80036c6:	687a      	ldr	r2, [r7, #4]
 80036c8:	68b9      	ldr	r1, [r7, #8]
 80036ca:	6978      	ldr	r0, [r7, #20]
 80036cc:	f7ff ff92 	bl	80035f4 <NVIC_EncodePriority>
 80036d0:	4602      	mov	r2, r0
 80036d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036d6:	4611      	mov	r1, r2
 80036d8:	4618      	mov	r0, r3
 80036da:	f7ff ff61 	bl	80035a0 <__NVIC_SetPriority>
}
 80036de:	bf00      	nop
 80036e0:	3718      	adds	r7, #24
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}

080036e6 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036e6:	b580      	push	{r7, lr}
 80036e8:	b082      	sub	sp, #8
 80036ea:	af00      	add	r7, sp, #0
 80036ec:	4603      	mov	r3, r0
 80036ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80036f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036f4:	4618      	mov	r0, r3
 80036f6:	f7ff ff37 	bl	8003568 <__NVIC_EnableIRQ>
}
 80036fa:	bf00      	nop
 80036fc:	3708      	adds	r7, #8
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}

08003702 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003702:	b580      	push	{r7, lr}
 8003704:	b082      	sub	sp, #8
 8003706:	af00      	add	r7, sp, #0
 8003708:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f7ff ffa4 	bl	8003658 <SysTick_Config>
 8003710:	4603      	mov	r3, r0
}
 8003712:	4618      	mov	r0, r3
 8003714:	3708      	adds	r7, #8
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}
	...

0800371c <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b082      	sub	sp, #8
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d101      	bne.n	800372e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	e08e      	b.n	800384c <HAL_DMA_Init+0x130>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	461a      	mov	r2, r3
 8003734:	4b47      	ldr	r3, [pc, #284]	; (8003854 <HAL_DMA_Init+0x138>)
 8003736:	429a      	cmp	r2, r3
 8003738:	d80f      	bhi.n	800375a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	461a      	mov	r2, r3
 8003740:	4b45      	ldr	r3, [pc, #276]	; (8003858 <HAL_DMA_Init+0x13c>)
 8003742:	4413      	add	r3, r2
 8003744:	4a45      	ldr	r2, [pc, #276]	; (800385c <HAL_DMA_Init+0x140>)
 8003746:	fba2 2303 	umull	r2, r3, r2, r3
 800374a:	091b      	lsrs	r3, r3, #4
 800374c:	009a      	lsls	r2, r3, #2
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	4a42      	ldr	r2, [pc, #264]	; (8003860 <HAL_DMA_Init+0x144>)
 8003756:	641a      	str	r2, [r3, #64]	; 0x40
 8003758:	e00e      	b.n	8003778 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	461a      	mov	r2, r3
 8003760:	4b40      	ldr	r3, [pc, #256]	; (8003864 <HAL_DMA_Init+0x148>)
 8003762:	4413      	add	r3, r2
 8003764:	4a3d      	ldr	r2, [pc, #244]	; (800385c <HAL_DMA_Init+0x140>)
 8003766:	fba2 2303 	umull	r2, r3, r2, r3
 800376a:	091b      	lsrs	r3, r3, #4
 800376c:	009a      	lsls	r2, r3, #2
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	4a3c      	ldr	r2, [pc, #240]	; (8003868 <HAL_DMA_Init+0x14c>)
 8003776:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2202      	movs	r2, #2
 800377c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	687a      	ldr	r2, [r7, #4]
 8003788:	6812      	ldr	r2, [r2, #0]
 800378a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800378e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003792:	6013      	str	r3, [r2, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	6819      	ldr	r1, [r3, #0]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	689a      	ldr	r2, [r3, #8]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	68db      	ldr	r3, [r3, #12]
 80037a2:	431a      	orrs	r2, r3
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	691b      	ldr	r3, [r3, #16]
 80037a8:	431a      	orrs	r2, r3
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	695b      	ldr	r3, [r3, #20]
 80037ae:	431a      	orrs	r2, r3
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	699b      	ldr	r3, [r3, #24]
 80037b4:	431a      	orrs	r2, r3
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	69db      	ldr	r3, [r3, #28]
 80037ba:	431a      	orrs	r2, r3
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6a1b      	ldr	r3, [r3, #32]
 80037c0:	431a      	orrs	r2, r3
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	430a      	orrs	r2, r1
 80037c8:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80037ca:	6878      	ldr	r0, [r7, #4]
 80037cc:	f000 fabc 	bl	8003d48 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80037d8:	d102      	bne.n	80037e0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2200      	movs	r2, #0
 80037de:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	685a      	ldr	r2, [r3, #4]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037e8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80037ec:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037f2:	687a      	ldr	r2, [r7, #4]
 80037f4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80037f6:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d010      	beq.n	8003822 <HAL_DMA_Init+0x106>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	2b04      	cmp	r3, #4
 8003806:	d80c      	bhi.n	8003822 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003808:	6878      	ldr	r0, [r7, #4]
 800380a:	f000 fae5 	bl	8003dd8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003812:	2200      	movs	r2, #0
 8003814:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800381a:	687a      	ldr	r2, [r7, #4]
 800381c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800381e:	605a      	str	r2, [r3, #4]
 8003820:	e008      	b.n	8003834 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = NULL;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2200      	movs	r2, #0
 8003826:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = NULL;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2200      	movs	r2, #0
 800382c:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2200      	movs	r2, #0
 8003832:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2200      	movs	r2, #0
 8003838:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2201      	movs	r2, #1
 800383e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2200      	movs	r2, #0
 8003846:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800384a:	2300      	movs	r3, #0
}
 800384c:	4618      	mov	r0, r3
 800384e:	3708      	adds	r7, #8
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}
 8003854:	40020407 	.word	0x40020407
 8003858:	bffdfff8 	.word	0xbffdfff8
 800385c:	cccccccd 	.word	0xcccccccd
 8003860:	40020000 	.word	0x40020000
 8003864:	bffdfbf8 	.word	0xbffdfbf8
 8003868:	40020400 	.word	0x40020400

0800386c <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b086      	sub	sp, #24
 8003870:	af00      	add	r7, sp, #0
 8003872:	60f8      	str	r0, [r7, #12]
 8003874:	60b9      	str	r1, [r7, #8]
 8003876:	607a      	str	r2, [r7, #4]
 8003878:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800387a:	2300      	movs	r3, #0
 800387c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003884:	2b01      	cmp	r3, #1
 8003886:	d101      	bne.n	800388c <HAL_DMA_Start_IT+0x20>
 8003888:	2302      	movs	r3, #2
 800388a:	e069      	b.n	8003960 <HAL_DMA_Start_IT+0xf4>
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	2201      	movs	r2, #1
 8003890:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (hdma->State == HAL_DMA_STATE_READY)
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800389a:	b2db      	uxtb	r3, r3
 800389c:	2b01      	cmp	r3, #1
 800389e:	d155      	bne.n	800394c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	2202      	movs	r2, #2
 80038a4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	2200      	movs	r2, #0
 80038ac:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	681a      	ldr	r2, [r3, #0]
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f022 0201 	bic.w	r2, r2, #1
 80038bc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	687a      	ldr	r2, [r7, #4]
 80038c2:	68b9      	ldr	r1, [r7, #8]
 80038c4:	68f8      	ldr	r0, [r7, #12]
 80038c6:	f000 fa02 	bl	8003cce <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d008      	beq.n	80038e4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	681a      	ldr	r2, [r3, #0]
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f042 020e 	orr.w	r2, r2, #14
 80038e0:	601a      	str	r2, [r3, #0]
 80038e2:	e00f      	b.n	8003904 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	681a      	ldr	r2, [r3, #0]
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f022 0204 	bic.w	r2, r2, #4
 80038f2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	681a      	ldr	r2, [r3, #0]
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f042 020a 	orr.w	r2, r2, #10
 8003902:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800390e:	2b00      	cmp	r3, #0
 8003910:	d007      	beq.n	8003922 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003916:	681a      	ldr	r2, [r3, #0]
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800391c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003920:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != NULL)
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003926:	2b00      	cmp	r3, #0
 8003928:	d007      	beq.n	800393a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800392e:	681a      	ldr	r2, [r3, #0]
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003934:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003938:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	681a      	ldr	r2, [r3, #0]
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f042 0201 	orr.w	r2, r2, #1
 8003948:	601a      	str	r2, [r3, #0]
 800394a:	e008      	b.n	800395e <HAL_DMA_Start_IT+0xf2>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	2280      	movs	r2, #128	; 0x80
 8003950:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	2200      	movs	r2, #0
 8003956:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Return error status */
    status = HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800395e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003960:	4618      	mov	r0, r3
 8003962:	3718      	adds	r7, #24
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}

08003968 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003968:	b480      	push	{r7}
 800396a:	b083      	sub	sp, #12
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d101      	bne.n	800397a <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	e04f      	b.n	8003a1a <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003980:	b2db      	uxtb	r3, r3
 8003982:	2b02      	cmp	r3, #2
 8003984:	d008      	beq.n	8003998 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2204      	movs	r2, #4
 800398a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2200      	movs	r2, #0
 8003990:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003994:	2301      	movs	r3, #1
 8003996:	e040      	b.n	8003a1a <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	681a      	ldr	r2, [r3, #0]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f022 020e 	bic.w	r2, r2, #14
 80039a6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039ac:	681a      	ldr	r2, [r3, #0]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039b2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80039b6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	681a      	ldr	r2, [r3, #0]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f022 0201 	bic.w	r2, r2, #1
 80039c6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039cc:	f003 021c 	and.w	r2, r3, #28
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d4:	2101      	movs	r1, #1
 80039d6:	fa01 f202 	lsl.w	r2, r1, r2
 80039da:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039e0:	687a      	ldr	r2, [r7, #4]
 80039e2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80039e4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d00c      	beq.n	8003a08 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039f2:	681a      	ldr	r2, [r3, #0]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80039fc:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a02:	687a      	ldr	r2, [r7, #4]
 8003a04:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003a06:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2200      	movs	r2, #0
 8003a14:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8003a18:	2300      	movs	r3, #0
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	370c      	adds	r7, #12
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bc80      	pop	{r7}
 8003a22:	4770      	bx	lr

08003a24 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b084      	sub	sp, #16
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003a36:	b2db      	uxtb	r3, r3
 8003a38:	2b02      	cmp	r3, #2
 8003a3a:	d005      	beq.n	8003a48 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2204      	movs	r2, #4
 8003a40:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	73fb      	strb	r3, [r7, #15]
 8003a46:	e047      	b.n	8003ad8 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	681a      	ldr	r2, [r3, #0]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f022 020e 	bic.w	r2, r2, #14
 8003a56:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	681a      	ldr	r2, [r3, #0]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f022 0201 	bic.w	r2, r2, #1
 8003a66:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a6c:	681a      	ldr	r2, [r3, #0]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a72:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a76:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a7c:	f003 021c 	and.w	r2, r3, #28
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a84:	2101      	movs	r1, #1
 8003a86:	fa01 f202 	lsl.w	r2, r1, r2
 8003a8a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a90:	687a      	ldr	r2, [r7, #4]
 8003a92:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003a94:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d00c      	beq.n	8003ab8 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aa2:	681a      	ldr	r2, [r3, #0]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aa8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003aac:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ab2:	687a      	ldr	r2, [r7, #4]
 8003ab4:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003ab6:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2201      	movs	r2, #1
 8003abc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d003      	beq.n	8003ad8 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ad4:	6878      	ldr	r0, [r7, #4]
 8003ad6:	4798      	blx	r3
    }
  }
  return status;
 8003ad8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ada:	4618      	mov	r0, r3
 8003adc:	3710      	adds	r7, #16
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bd80      	pop	{r7, pc}
	...

08003ae4 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b084      	sub	sp, #16
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b00:	f003 031c 	and.w	r3, r3, #28
 8003b04:	2204      	movs	r2, #4
 8003b06:	409a      	lsls	r2, r3
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	4013      	ands	r3, r2
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d027      	beq.n	8003b60 <HAL_DMA_IRQHandler+0x7c>
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	f003 0304 	and.w	r3, r3, #4
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d022      	beq.n	8003b60 <HAL_DMA_IRQHandler+0x7c>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f003 0320 	and.w	r3, r3, #32
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d107      	bne.n	8003b38 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	681a      	ldr	r2, [r3, #0]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f022 0204 	bic.w	r2, r2, #4
 8003b36:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b3c:	f003 021c 	and.w	r2, r3, #28
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b44:	2104      	movs	r1, #4
 8003b46:	fa01 f202 	lsl.w	r2, r1, r2
 8003b4a:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	f000 8081 	beq.w	8003c58 <HAL_DMA_IRQHandler+0x174>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8003b5e:	e07b      	b.n	8003c58 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b64:	f003 031c 	and.w	r3, r3, #28
 8003b68:	2202      	movs	r2, #2
 8003b6a:	409a      	lsls	r2, r3
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	4013      	ands	r3, r2
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d03d      	beq.n	8003bf0 <HAL_DMA_IRQHandler+0x10c>
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	f003 0302 	and.w	r3, r3, #2
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d038      	beq.n	8003bf0 <HAL_DMA_IRQHandler+0x10c>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f003 0320 	and.w	r3, r3, #32
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d10b      	bne.n	8003ba4 <HAL_DMA_IRQHandler+0xc0>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	681a      	ldr	r2, [r3, #0]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f022 020a 	bic.w	r2, r2, #10
 8003b9a:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	461a      	mov	r2, r3
 8003baa:	4b2e      	ldr	r3, [pc, #184]	; (8003c64 <HAL_DMA_IRQHandler+0x180>)
 8003bac:	429a      	cmp	r2, r3
 8003bae:	d909      	bls.n	8003bc4 <HAL_DMA_IRQHandler+0xe0>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bb4:	f003 031c 	and.w	r3, r3, #28
 8003bb8:	4a2b      	ldr	r2, [pc, #172]	; (8003c68 <HAL_DMA_IRQHandler+0x184>)
 8003bba:	2102      	movs	r1, #2
 8003bbc:	fa01 f303 	lsl.w	r3, r1, r3
 8003bc0:	6053      	str	r3, [r2, #4]
 8003bc2:	e008      	b.n	8003bd6 <HAL_DMA_IRQHandler+0xf2>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bc8:	f003 031c 	and.w	r3, r3, #28
 8003bcc:	4a27      	ldr	r2, [pc, #156]	; (8003c6c <HAL_DMA_IRQHandler+0x188>)
 8003bce:	2102      	movs	r1, #2
 8003bd0:	fa01 f303 	lsl.w	r3, r1, r3
 8003bd4:	6053      	str	r3, [r2, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      if (hdma->XferCpltCallback != NULL)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d038      	beq.n	8003c58 <HAL_DMA_IRQHandler+0x174>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bea:	6878      	ldr	r0, [r7, #4]
 8003bec:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8003bee:	e033      	b.n	8003c58 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bf4:	f003 031c 	and.w	r3, r3, #28
 8003bf8:	2208      	movs	r2, #8
 8003bfa:	409a      	lsls	r2, r3
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	4013      	ands	r3, r2
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d02a      	beq.n	8003c5a <HAL_DMA_IRQHandler+0x176>
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	f003 0308 	and.w	r3, r3, #8
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d025      	beq.n	8003c5a <HAL_DMA_IRQHandler+0x176>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	681a      	ldr	r2, [r3, #0]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f022 020e 	bic.w	r2, r2, #14
 8003c1c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c22:	f003 021c 	and.w	r2, r3, #28
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c2a:	2101      	movs	r1, #1
 8003c2c:	fa01 f202 	lsl.w	r2, r1, r2
 8003c30:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2201      	movs	r2, #1
 8003c36:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2200      	movs	r2, #0
 8003c44:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d004      	beq.n	8003c5a <HAL_DMA_IRQHandler+0x176>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c54:	6878      	ldr	r0, [r7, #4]
 8003c56:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003c58:	bf00      	nop
 8003c5a:	bf00      	nop
}
 8003c5c:	3710      	adds	r7, #16
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}
 8003c62:	bf00      	nop
 8003c64:	40020080 	.word	0x40020080
 8003c68:	40020400 	.word	0x40020400
 8003c6c:	40020000 	.word	0x40020000

08003c70 <HAL_DMA_ConfigChannelAttributes>:
  * @param ChannelAttributes specifies the DMA channel secure/privilege attributes.
  *        This parameter can be a one or a combination of @ref DMA_Channel_Attributes
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *hdma, uint32_t ChannelAttributes)
{
 8003c70:	b480      	push	{r7}
 8003c72:	b085      	sub	sp, #20
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
 8003c78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	72fb      	strb	r3, [r7, #11]
#if defined (CORE_CM0PLUS)
  uint32_t ccr_SECM;
#endif /* CORE_CM0PLUS */

  /* Check the DMA peripheral handle */
  if (hdma == NULL)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d103      	bne.n	8003c8c <HAL_DMA_ConfigChannelAttributes+0x1c>
  {
    status = HAL_ERROR;
 8003c84:	2301      	movs	r3, #1
 8003c86:	72fb      	strb	r3, [r7, #11]
    return status;
 8003c88:	7afb      	ldrb	r3, [r7, #11]
 8003c8a:	e01b      	b.n	8003cc4 <HAL_DMA_ConfigChannelAttributes+0x54>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Read CCR register */
  ccr = READ_REG(hdma->Instance->CCR);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	60fb      	str	r3, [r7, #12]

  /* Apply any requested privilege/non-privilege attributes */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) != 0U)
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	f003 0310 	and.w	r3, r3, #16
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d00d      	beq.n	8003cba <HAL_DMA_ConfigChannelAttributes+0x4a>
  {
    if ((ChannelAttributes & DMA_CCR_PRIV) != 0U)
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d004      	beq.n	8003cb2 <HAL_DMA_ConfigChannelAttributes+0x42>
    {
      SET_BIT(ccr, DMA_CCR_PRIV);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003cae:	60fb      	str	r3, [r7, #12]
 8003cb0:	e003      	b.n	8003cba <HAL_DMA_ConfigChannelAttributes+0x4a>
    }
    else
    {
      CLEAR_BIT(ccr, DMA_CCR_PRIV);
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003cb8:	60fb      	str	r3, [r7, #12]
  }

#endif /* CORE_CM0PLUS */

  /* Update CCR Register: PRIV, SECM, SCEC, DSEC bits */
  WRITE_REG(hdma->Instance->CCR, ccr);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	68fa      	ldr	r2, [r7, #12]
 8003cc0:	601a      	str	r2, [r3, #0]

  return status;
 8003cc2:	7afb      	ldrb	r3, [r7, #11]
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	3714      	adds	r7, #20
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bc80      	pop	{r7}
 8003ccc:	4770      	bx	lr

08003cce <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003cce:	b480      	push	{r7}
 8003cd0:	b085      	sub	sp, #20
 8003cd2:	af00      	add	r7, sp, #0
 8003cd4:	60f8      	str	r0, [r7, #12]
 8003cd6:	60b9      	str	r1, [r7, #8]
 8003cd8:	607a      	str	r2, [r7, #4]
 8003cda:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ce0:	68fa      	ldr	r2, [r7, #12]
 8003ce2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003ce4:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != NULL)
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d004      	beq.n	8003cf8 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cf2:	68fa      	ldr	r2, [r7, #12]
 8003cf4:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003cf6:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cfc:	f003 021c 	and.w	r2, r3, #28
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d04:	2101      	movs	r1, #1
 8003d06:	fa01 f202 	lsl.w	r2, r1, r2
 8003d0a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	683a      	ldr	r2, [r7, #0]
 8003d12:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	689b      	ldr	r3, [r3, #8]
 8003d18:	2b10      	cmp	r3, #16
 8003d1a:	d108      	bne.n	8003d2e <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	687a      	ldr	r2, [r7, #4]
 8003d22:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	68ba      	ldr	r2, [r7, #8]
 8003d2a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003d2c:	e007      	b.n	8003d3e <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	68ba      	ldr	r2, [r7, #8]
 8003d34:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	687a      	ldr	r2, [r7, #4]
 8003d3c:	60da      	str	r2, [r3, #12]
}
 8003d3e:	bf00      	nop
 8003d40:	3714      	adds	r7, #20
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bc80      	pop	{r7}
 8003d46:	4770      	bx	lr

08003d48 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b085      	sub	sp, #20
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	461a      	mov	r2, r3
 8003d56:	4b1c      	ldr	r3, [pc, #112]	; (8003dc8 <DMA_CalcDMAMUXChannelBaseAndMask+0x80>)
 8003d58:	429a      	cmp	r2, r3
 8003d5a:	d813      	bhi.n	8003d84 <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d60:	089b      	lsrs	r3, r3, #2
 8003d62:	009b      	lsls	r3, r3, #2
 8003d64:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003d68:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8003d6c:	687a      	ldr	r2, [r7, #4]
 8003d6e:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	b2db      	uxtb	r3, r3
 8003d76:	3b08      	subs	r3, #8
 8003d78:	4a14      	ldr	r2, [pc, #80]	; (8003dcc <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8003d7a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d7e:	091b      	lsrs	r3, r3, #4
 8003d80:	60fb      	str	r3, [r7, #12]
 8003d82:	e011      	b.n	8003da8 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d88:	089b      	lsrs	r3, r3, #2
 8003d8a:	009a      	lsls	r2, r3, #2
 8003d8c:	4b10      	ldr	r3, [pc, #64]	; (8003dd0 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 8003d8e:	4413      	add	r3, r2
 8003d90:	687a      	ldr	r2, [r7, #4]
 8003d92:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	b2db      	uxtb	r3, r3
 8003d9a:	3b08      	subs	r3, #8
 8003d9c:	4a0b      	ldr	r2, [pc, #44]	; (8003dcc <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8003d9e:	fba2 2303 	umull	r2, r3, r2, r3
 8003da2:	091b      	lsrs	r3, r3, #4
 8003da4:	3307      	adds	r3, #7
 8003da6:	60fb      	str	r3, [r7, #12]
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	4a0a      	ldr	r2, [pc, #40]	; (8003dd4 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 8003dac:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	f003 031f 	and.w	r3, r3, #31
 8003db4:	2201      	movs	r2, #1
 8003db6:	409a      	lsls	r2, r3
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003dbc:	bf00      	nop
 8003dbe:	3714      	adds	r7, #20
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	bc80      	pop	{r7}
 8003dc4:	4770      	bx	lr
 8003dc6:	bf00      	nop
 8003dc8:	40020407 	.word	0x40020407
 8003dcc:	cccccccd 	.word	0xcccccccd
 8003dd0:	4002081c 	.word	0x4002081c
 8003dd4:	40020880 	.word	0x40020880

08003dd8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b085      	sub	sp, #20
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003de8:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003dea:	68fa      	ldr	r2, [r7, #12]
 8003dec:	4b0a      	ldr	r3, [pc, #40]	; (8003e18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003dee:	4413      	add	r3, r2
 8003df0:	009b      	lsls	r3, r3, #2
 8003df2:	461a      	mov	r2, r3
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	4a08      	ldr	r2, [pc, #32]	; (8003e1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003dfc:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	3b01      	subs	r3, #1
 8003e02:	f003 0303 	and.w	r3, r3, #3
 8003e06:	2201      	movs	r2, #1
 8003e08:	409a      	lsls	r2, r3
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003e0e:	bf00      	nop
 8003e10:	3714      	adds	r7, #20
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bc80      	pop	{r7}
 8003e16:	4770      	bx	lr
 8003e18:	1000823f 	.word	0x1000823f
 8003e1c:	40020940 	.word	0x40020940

08003e20 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e20:	b480      	push	{r7}
 8003e22:	b087      	sub	sp, #28
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
 8003e28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e2e:	e140      	b.n	80040b2 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	681a      	ldr	r2, [r3, #0]
 8003e34:	2101      	movs	r1, #1
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	fa01 f303 	lsl.w	r3, r1, r3
 8003e3c:	4013      	ands	r3, r2
 8003e3e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	f000 8132 	beq.w	80040ac <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	f003 0303 	and.w	r3, r3, #3
 8003e50:	2b01      	cmp	r3, #1
 8003e52:	d005      	beq.n	8003e60 <HAL_GPIO_Init+0x40>
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	f003 0303 	and.w	r3, r3, #3
 8003e5c:	2b02      	cmp	r3, #2
 8003e5e:	d130      	bne.n	8003ec2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	689b      	ldr	r3, [r3, #8]
 8003e64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	005b      	lsls	r3, r3, #1
 8003e6a:	2203      	movs	r2, #3
 8003e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e70:	43db      	mvns	r3, r3
 8003e72:	693a      	ldr	r2, [r7, #16]
 8003e74:	4013      	ands	r3, r2
 8003e76:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	68da      	ldr	r2, [r3, #12]
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	005b      	lsls	r3, r3, #1
 8003e80:	fa02 f303 	lsl.w	r3, r2, r3
 8003e84:	693a      	ldr	r2, [r7, #16]
 8003e86:	4313      	orrs	r3, r2
 8003e88:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	693a      	ldr	r2, [r7, #16]
 8003e8e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003e96:	2201      	movs	r2, #1
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e9e:	43db      	mvns	r3, r3
 8003ea0:	693a      	ldr	r2, [r7, #16]
 8003ea2:	4013      	ands	r3, r2
 8003ea4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	091b      	lsrs	r3, r3, #4
 8003eac:	f003 0201 	and.w	r2, r3, #1
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb6:	693a      	ldr	r2, [r7, #16]
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	693a      	ldr	r2, [r7, #16]
 8003ec0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	f003 0303 	and.w	r3, r3, #3
 8003eca:	2b03      	cmp	r3, #3
 8003ecc:	d017      	beq.n	8003efe <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	68db      	ldr	r3, [r3, #12]
 8003ed2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	005b      	lsls	r3, r3, #1
 8003ed8:	2203      	movs	r2, #3
 8003eda:	fa02 f303 	lsl.w	r3, r2, r3
 8003ede:	43db      	mvns	r3, r3
 8003ee0:	693a      	ldr	r2, [r7, #16]
 8003ee2:	4013      	ands	r3, r2
 8003ee4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	689a      	ldr	r2, [r3, #8]
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	005b      	lsls	r3, r3, #1
 8003eee:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef2:	693a      	ldr	r2, [r7, #16]
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	693a      	ldr	r2, [r7, #16]
 8003efc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	f003 0303 	and.w	r3, r3, #3
 8003f06:	2b02      	cmp	r3, #2
 8003f08:	d123      	bne.n	8003f52 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	08da      	lsrs	r2, r3, #3
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	3208      	adds	r2, #8
 8003f12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f16:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003f18:	697b      	ldr	r3, [r7, #20]
 8003f1a:	f003 0307 	and.w	r3, r3, #7
 8003f1e:	009b      	lsls	r3, r3, #2
 8003f20:	220f      	movs	r2, #15
 8003f22:	fa02 f303 	lsl.w	r3, r2, r3
 8003f26:	43db      	mvns	r3, r3
 8003f28:	693a      	ldr	r2, [r7, #16]
 8003f2a:	4013      	ands	r3, r2
 8003f2c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	691a      	ldr	r2, [r3, #16]
 8003f32:	697b      	ldr	r3, [r7, #20]
 8003f34:	f003 0307 	and.w	r3, r3, #7
 8003f38:	009b      	lsls	r3, r3, #2
 8003f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f3e:	693a      	ldr	r2, [r7, #16]
 8003f40:	4313      	orrs	r3, r2
 8003f42:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003f44:	697b      	ldr	r3, [r7, #20]
 8003f46:	08da      	lsrs	r2, r3, #3
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	3208      	adds	r2, #8
 8003f4c:	6939      	ldr	r1, [r7, #16]
 8003f4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003f58:	697b      	ldr	r3, [r7, #20]
 8003f5a:	005b      	lsls	r3, r3, #1
 8003f5c:	2203      	movs	r2, #3
 8003f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f62:	43db      	mvns	r3, r3
 8003f64:	693a      	ldr	r2, [r7, #16]
 8003f66:	4013      	ands	r3, r2
 8003f68:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	f003 0203 	and.w	r2, r3, #3
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	005b      	lsls	r3, r3, #1
 8003f76:	fa02 f303 	lsl.w	r3, r2, r3
 8003f7a:	693a      	ldr	r2, [r7, #16]
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	693a      	ldr	r2, [r7, #16]
 8003f84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	f000 808c 	beq.w	80040ac <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8003f94:	4a4e      	ldr	r2, [pc, #312]	; (80040d0 <HAL_GPIO_Init+0x2b0>)
 8003f96:	697b      	ldr	r3, [r7, #20]
 8003f98:	089b      	lsrs	r3, r3, #2
 8003f9a:	3302      	adds	r3, #2
 8003f9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fa0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8003fa2:	697b      	ldr	r3, [r7, #20]
 8003fa4:	f003 0303 	and.w	r3, r3, #3
 8003fa8:	009b      	lsls	r3, r3, #2
 8003faa:	2207      	movs	r2, #7
 8003fac:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb0:	43db      	mvns	r3, r3
 8003fb2:	693a      	ldr	r2, [r7, #16]
 8003fb4:	4013      	ands	r3, r2
 8003fb6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003fbe:	d00d      	beq.n	8003fdc <HAL_GPIO_Init+0x1bc>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	4a44      	ldr	r2, [pc, #272]	; (80040d4 <HAL_GPIO_Init+0x2b4>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d007      	beq.n	8003fd8 <HAL_GPIO_Init+0x1b8>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	4a43      	ldr	r2, [pc, #268]	; (80040d8 <HAL_GPIO_Init+0x2b8>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d101      	bne.n	8003fd4 <HAL_GPIO_Init+0x1b4>
 8003fd0:	2302      	movs	r3, #2
 8003fd2:	e004      	b.n	8003fde <HAL_GPIO_Init+0x1be>
 8003fd4:	2307      	movs	r3, #7
 8003fd6:	e002      	b.n	8003fde <HAL_GPIO_Init+0x1be>
 8003fd8:	2301      	movs	r3, #1
 8003fda:	e000      	b.n	8003fde <HAL_GPIO_Init+0x1be>
 8003fdc:	2300      	movs	r3, #0
 8003fde:	697a      	ldr	r2, [r7, #20]
 8003fe0:	f002 0203 	and.w	r2, r2, #3
 8003fe4:	0092      	lsls	r2, r2, #2
 8003fe6:	4093      	lsls	r3, r2
 8003fe8:	693a      	ldr	r2, [r7, #16]
 8003fea:	4313      	orrs	r3, r2
 8003fec:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003fee:	4938      	ldr	r1, [pc, #224]	; (80040d0 <HAL_GPIO_Init+0x2b0>)
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	089b      	lsrs	r3, r3, #2
 8003ff4:	3302      	adds	r3, #2
 8003ff6:	693a      	ldr	r2, [r7, #16]
 8003ff8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003ffc:	4b37      	ldr	r3, [pc, #220]	; (80040dc <HAL_GPIO_Init+0x2bc>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	43db      	mvns	r3, r3
 8004006:	693a      	ldr	r2, [r7, #16]
 8004008:	4013      	ands	r3, r2
 800400a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004014:	2b00      	cmp	r3, #0
 8004016:	d003      	beq.n	8004020 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8004018:	693a      	ldr	r2, [r7, #16]
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	4313      	orrs	r3, r2
 800401e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004020:	4a2e      	ldr	r2, [pc, #184]	; (80040dc <HAL_GPIO_Init+0x2bc>)
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004026:	4b2d      	ldr	r3, [pc, #180]	; (80040dc <HAL_GPIO_Init+0x2bc>)
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	43db      	mvns	r3, r3
 8004030:	693a      	ldr	r2, [r7, #16]
 8004032:	4013      	ands	r3, r2
 8004034:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800403e:	2b00      	cmp	r3, #0
 8004040:	d003      	beq.n	800404a <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8004042:	693a      	ldr	r2, [r7, #16]
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	4313      	orrs	r3, r2
 8004048:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800404a:	4a24      	ldr	r2, [pc, #144]	; (80040dc <HAL_GPIO_Init+0x2bc>)
 800404c:	693b      	ldr	r3, [r7, #16]
 800404e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8004050:	4b22      	ldr	r3, [pc, #136]	; (80040dc <HAL_GPIO_Init+0x2bc>)
 8004052:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004056:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	43db      	mvns	r3, r3
 800405c:	693a      	ldr	r2, [r7, #16]
 800405e:	4013      	ands	r3, r2
 8004060:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800406a:	2b00      	cmp	r3, #0
 800406c:	d003      	beq.n	8004076 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 800406e:	693a      	ldr	r2, [r7, #16]
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	4313      	orrs	r3, r2
 8004074:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8004076:	4a19      	ldr	r2, [pc, #100]	; (80040dc <HAL_GPIO_Init+0x2bc>)
 8004078:	693b      	ldr	r3, [r7, #16]
 800407a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 800407e:	4b17      	ldr	r3, [pc, #92]	; (80040dc <HAL_GPIO_Init+0x2bc>)
 8004080:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004084:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	43db      	mvns	r3, r3
 800408a:	693a      	ldr	r2, [r7, #16]
 800408c:	4013      	ands	r3, r2
 800408e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004098:	2b00      	cmp	r3, #0
 800409a:	d003      	beq.n	80040a4 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 800409c:	693a      	ldr	r2, [r7, #16]
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	4313      	orrs	r3, r2
 80040a2:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 80040a4:	4a0d      	ldr	r2, [pc, #52]	; (80040dc <HAL_GPIO_Init+0x2bc>)
 80040a6:	693b      	ldr	r3, [r7, #16]
 80040a8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	3301      	adds	r3, #1
 80040b0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	681a      	ldr	r2, [r3, #0]
 80040b6:	697b      	ldr	r3, [r7, #20]
 80040b8:	fa22 f303 	lsr.w	r3, r2, r3
 80040bc:	2b00      	cmp	r3, #0
 80040be:	f47f aeb7 	bne.w	8003e30 <HAL_GPIO_Init+0x10>
  }
}
 80040c2:	bf00      	nop
 80040c4:	bf00      	nop
 80040c6:	371c      	adds	r7, #28
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bc80      	pop	{r7}
 80040cc:	4770      	bx	lr
 80040ce:	bf00      	nop
 80040d0:	40010000 	.word	0x40010000
 80040d4:	48000400 	.word	0x48000400
 80040d8:	48000800 	.word	0x48000800
 80040dc:	58000800 	.word	0x58000800

080040e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80040e0:	b480      	push	{r7}
 80040e2:	b083      	sub	sp, #12
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
 80040e8:	460b      	mov	r3, r1
 80040ea:	807b      	strh	r3, [r7, #2]
 80040ec:	4613      	mov	r3, r2
 80040ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80040f0:	787b      	ldrb	r3, [r7, #1]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d003      	beq.n	80040fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80040f6:	887a      	ldrh	r2, [r7, #2]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80040fc:	e002      	b.n	8004104 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80040fe:	887a      	ldrh	r2, [r7, #2]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004104:	bf00      	nop
 8004106:	370c      	adds	r7, #12
 8004108:	46bd      	mov	sp, r7
 800410a:	bc80      	pop	{r7}
 800410c:	4770      	bx	lr
	...

08004110 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004110:	b480      	push	{r7}
 8004112:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004114:	4b04      	ldr	r3, [pc, #16]	; (8004128 <HAL_PWR_EnableBkUpAccess+0x18>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a03      	ldr	r2, [pc, #12]	; (8004128 <HAL_PWR_EnableBkUpAccess+0x18>)
 800411a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800411e:	6013      	str	r3, [r2, #0]
}
 8004120:	bf00      	nop
 8004122:	46bd      	mov	sp, r7
 8004124:	bc80      	pop	{r7}
 8004126:	4770      	bx	lr
 8004128:	58000400 	.word	0x58000400

0800412c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800412c:	b480      	push	{r7}
 800412e:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8004130:	4b03      	ldr	r3, [pc, #12]	; (8004140 <HAL_PWREx_GetVoltageRange+0x14>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8004138:	4618      	mov	r0, r3
 800413a:	46bd      	mov	sp, r7
 800413c:	bc80      	pop	{r7}
 800413e:	4770      	bx	lr
 8004140:	58000400 	.word	0x58000400

08004144 <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 8004144:	b480      	push	{r7}
 8004146:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8004148:	4b06      	ldr	r3, [pc, #24]	; (8004164 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004150:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004154:	d101      	bne.n	800415a <LL_PWR_IsEnabledBkUpAccess+0x16>
 8004156:	2301      	movs	r3, #1
 8004158:	e000      	b.n	800415c <LL_PWR_IsEnabledBkUpAccess+0x18>
 800415a:	2300      	movs	r3, #0
}
 800415c:	4618      	mov	r0, r3
 800415e:	46bd      	mov	sp, r7
 8004160:	bc80      	pop	{r7}
 8004162:	4770      	bx	lr
 8004164:	58000400 	.word	0x58000400

08004168 <LL_RCC_HSE_EnableTcxo>:
  * @note PB0 must be configured in analog mode prior enabling VDDTCXO supply
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_EnableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableTcxo(void)
{
 8004168:	b480      	push	{r7}
 800416a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 800416c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004176:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800417a:	6013      	str	r3, [r2, #0]
}
 800417c:	bf00      	nop
 800417e:	46bd      	mov	sp, r7
 8004180:	bc80      	pop	{r7}
 8004182:	4770      	bx	lr

08004184 <LL_RCC_HSE_DisableTcxo>:
  * @brief  Disable HSE VDDTCXO output on package pin PB0-VDDTCXO
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_DisableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_DisableTcxo(void)
{
 8004184:	b480      	push	{r7}
 8004186:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8004188:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004192:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004196:	6013      	str	r3, [r2, #0]
}
 8004198:	bf00      	nop
 800419a:	46bd      	mov	sp, r7
 800419c:	bc80      	pop	{r7}
 800419e:	4770      	bx	lr

080041a0 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler  division by 2
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 80041a0:	b480      	push	{r7}
 80041a2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80041a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80041ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80041b2:	d101      	bne.n	80041b8 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80041b4:	2301      	movs	r3, #1
 80041b6:	e000      	b.n	80041ba <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80041b8:	2300      	movs	r3, #0
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	46bd      	mov	sp, r7
 80041be:	bc80      	pop	{r7}
 80041c0:	4770      	bx	lr

080041c2 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 80041c2:	b480      	push	{r7}
 80041c4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80041c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80041d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041d4:	6013      	str	r3, [r2, #0]
}
 80041d6:	bf00      	nop
 80041d8:	46bd      	mov	sp, r7
 80041da:	bc80      	pop	{r7}
 80041dc:	4770      	bx	lr

080041de <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 80041de:	b480      	push	{r7}
 80041e0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80041e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80041ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041f0:	6013      	str	r3, [r2, #0]
}
 80041f2:	bf00      	nop
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bc80      	pop	{r7}
 80041f8:	4770      	bx	lr

080041fa <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 80041fa:	b480      	push	{r7}
 80041fc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80041fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004208:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800420c:	d101      	bne.n	8004212 <LL_RCC_HSE_IsReady+0x18>
 800420e:	2301      	movs	r3, #1
 8004210:	e000      	b.n	8004214 <LL_RCC_HSE_IsReady+0x1a>
 8004212:	2300      	movs	r3, #0
}
 8004214:	4618      	mov	r0, r3
 8004216:	46bd      	mov	sp, r7
 8004218:	bc80      	pop	{r7}
 800421a:	4770      	bx	lr

0800421c <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 800421c:	b480      	push	{r7}
 800421e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8004220:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800422a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800422e:	6013      	str	r3, [r2, #0]
}
 8004230:	bf00      	nop
 8004232:	46bd      	mov	sp, r7
 8004234:	bc80      	pop	{r7}
 8004236:	4770      	bx	lr

08004238 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8004238:	b480      	push	{r7}
 800423a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800423c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004246:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800424a:	6013      	str	r3, [r2, #0]
}
 800424c:	bf00      	nop
 800424e:	46bd      	mov	sp, r7
 8004250:	bc80      	pop	{r7}
 8004252:	4770      	bx	lr

08004254 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8004254:	b480      	push	{r7}
 8004256:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8004258:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004262:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004266:	d101      	bne.n	800426c <LL_RCC_HSI_IsReady+0x18>
 8004268:	2301      	movs	r3, #1
 800426a:	e000      	b.n	800426e <LL_RCC_HSI_IsReady+0x1a>
 800426c:	2300      	movs	r3, #0
}
 800426e:	4618      	mov	r0, r3
 8004270:	46bd      	mov	sp, r7
 8004272:	bc80      	pop	{r7}
 8004274:	4770      	bx	lr

08004276 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8004276:	b480      	push	{r7}
 8004278:	b083      	sub	sp, #12
 800427a:	af00      	add	r7, sp, #0
 800427c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800427e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	061b      	lsls	r3, r3, #24
 800428c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004290:	4313      	orrs	r3, r2
 8004292:	604b      	str	r3, [r1, #4]
}
 8004294:	bf00      	nop
 8004296:	370c      	adds	r7, #12
 8004298:	46bd      	mov	sp, r7
 800429a:	bc80      	pop	{r7}
 800429c:	4770      	bx	lr

0800429e <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 800429e:	b480      	push	{r7}
 80042a0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80042a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042aa:	f003 0302 	and.w	r3, r3, #2
 80042ae:	2b02      	cmp	r3, #2
 80042b0:	d101      	bne.n	80042b6 <LL_RCC_LSE_IsReady+0x18>
 80042b2:	2301      	movs	r3, #1
 80042b4:	e000      	b.n	80042b8 <LL_RCC_LSE_IsReady+0x1a>
 80042b6:	2300      	movs	r3, #0
}
 80042b8:	4618      	mov	r0, r3
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bc80      	pop	{r7}
 80042be:	4770      	bx	lr

080042c0 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 80042c0:	b480      	push	{r7}
 80042c2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 80042c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042cc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80042d0:	f043 0301 	orr.w	r3, r3, #1
 80042d4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80042d8:	bf00      	nop
 80042da:	46bd      	mov	sp, r7
 80042dc:	bc80      	pop	{r7}
 80042de:	4770      	bx	lr

080042e0 <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 80042e0:	b480      	push	{r7}
 80042e2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 80042e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042ec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80042f0:	f023 0301 	bic.w	r3, r3, #1
 80042f4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80042f8:	bf00      	nop
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bc80      	pop	{r7}
 80042fe:	4770      	bx	lr

08004300 <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 8004300:	b480      	push	{r7}
 8004302:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8004304:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004308:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800430c:	f003 0302 	and.w	r3, r3, #2
 8004310:	2b02      	cmp	r3, #2
 8004312:	d101      	bne.n	8004318 <LL_RCC_LSI_IsReady+0x18>
 8004314:	2301      	movs	r3, #1
 8004316:	e000      	b.n	800431a <LL_RCC_LSI_IsReady+0x1a>
 8004318:	2300      	movs	r3, #0
}
 800431a:	4618      	mov	r0, r3
 800431c:	46bd      	mov	sp, r7
 800431e:	bc80      	pop	{r7}
 8004320:	4770      	bx	lr

08004322 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8004322:	b480      	push	{r7}
 8004324:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8004326:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004330:	f043 0301 	orr.w	r3, r3, #1
 8004334:	6013      	str	r3, [r2, #0]
}
 8004336:	bf00      	nop
 8004338:	46bd      	mov	sp, r7
 800433a:	bc80      	pop	{r7}
 800433c:	4770      	bx	lr

0800433e <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 800433e:	b480      	push	{r7}
 8004340:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8004342:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800434c:	f023 0301 	bic.w	r3, r3, #1
 8004350:	6013      	str	r3, [r2, #0]
}
 8004352:	bf00      	nop
 8004354:	46bd      	mov	sp, r7
 8004356:	bc80      	pop	{r7}
 8004358:	4770      	bx	lr

0800435a <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 800435a:	b480      	push	{r7}
 800435c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800435e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f003 0302 	and.w	r3, r3, #2
 8004368:	2b02      	cmp	r3, #2
 800436a:	d101      	bne.n	8004370 <LL_RCC_MSI_IsReady+0x16>
 800436c:	2301      	movs	r3, #1
 800436e:	e000      	b.n	8004372 <LL_RCC_MSI_IsReady+0x18>
 8004370:	2300      	movs	r3, #0
}
 8004372:	4618      	mov	r0, r3
 8004374:	46bd      	mov	sp, r7
 8004376:	bc80      	pop	{r7}
 8004378:	4770      	bx	lr

0800437a <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 800437a:	b480      	push	{r7}
 800437c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 800437e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f003 0308 	and.w	r3, r3, #8
 8004388:	2b08      	cmp	r3, #8
 800438a:	d101      	bne.n	8004390 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 800438c:	2301      	movs	r3, #1
 800438e:	e000      	b.n	8004392 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8004390:	2300      	movs	r3, #0
}
 8004392:	4618      	mov	r0, r3
 8004394:	46bd      	mov	sp, r7
 8004396:	bc80      	pop	{r7}
 8004398:	4770      	bx	lr

0800439a <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 800439a:	b480      	push	{r7}
 800439c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 800439e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80043a8:	4618      	mov	r0, r3
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bc80      	pop	{r7}
 80043ae:	4770      	bx	lr

080043b0 <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 80043b0:	b480      	push	{r7}
 80043b2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 80043b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043bc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 80043c0:	4618      	mov	r0, r3
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bc80      	pop	{r7}
 80043c6:	4770      	bx	lr

080043c8 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 80043c8:	b480      	push	{r7}
 80043ca:	b083      	sub	sp, #12
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80043d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	021b      	lsls	r3, r3, #8
 80043de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80043e2:	4313      	orrs	r3, r2
 80043e4:	604b      	str	r3, [r1, #4]
}
 80043e6:	bf00      	nop
 80043e8:	370c      	adds	r7, #12
 80043ea:	46bd      	mov	sp, r7
 80043ec:	bc80      	pop	{r7}
 80043ee:	4770      	bx	lr

080043f0 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80043f0:	b480      	push	{r7}
 80043f2:	b083      	sub	sp, #12
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80043f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043fc:	689b      	ldr	r3, [r3, #8]
 80043fe:	f023 0203 	bic.w	r2, r3, #3
 8004402:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	4313      	orrs	r3, r2
 800440a:	608b      	str	r3, [r1, #8]
}
 800440c:	bf00      	nop
 800440e:	370c      	adds	r7, #12
 8004410:	46bd      	mov	sp, r7
 8004412:	bc80      	pop	{r7}
 8004414:	4770      	bx	lr

08004416 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8004416:	b480      	push	{r7}
 8004418:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800441a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800441e:	689b      	ldr	r3, [r3, #8]
 8004420:	f003 030c 	and.w	r3, r3, #12
}
 8004424:	4618      	mov	r0, r3
 8004426:	46bd      	mov	sp, r7
 8004428:	bc80      	pop	{r7}
 800442a:	4770      	bx	lr

0800442c <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800442c:	b480      	push	{r7}
 800442e:	b083      	sub	sp, #12
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8004434:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004438:	689b      	ldr	r3, [r3, #8]
 800443a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800443e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	4313      	orrs	r3, r2
 8004446:	608b      	str	r3, [r1, #8]
}
 8004448:	bf00      	nop
 800444a:	370c      	adds	r7, #12
 800444c:	46bd      	mov	sp, r7
 800444e:	bc80      	pop	{r7}
 8004450:	4770      	bx	lr

08004452 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8004452:	b480      	push	{r7}
 8004454:	b083      	sub	sp, #12
 8004456:	af00      	add	r7, sp, #0
 8004458:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800445a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800445e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004462:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004466:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	4313      	orrs	r3, r2
 800446e:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8004472:	bf00      	nop
 8004474:	370c      	adds	r7, #12
 8004476:	46bd      	mov	sp, r7
 8004478:	bc80      	pop	{r7}
 800447a:	4770      	bx	lr

0800447c <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 800447c:	b480      	push	{r7}
 800447e:	b083      	sub	sp, #12
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8004484:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004488:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800448c:	f023 020f 	bic.w	r2, r3, #15
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	091b      	lsrs	r3, r3, #4
 8004494:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004498:	4313      	orrs	r3, r2
 800449a:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800449e:	bf00      	nop
 80044a0:	370c      	adds	r7, #12
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bc80      	pop	{r7}
 80044a6:	4770      	bx	lr

080044a8 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80044a8:	b480      	push	{r7}
 80044aa:	b083      	sub	sp, #12
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80044b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044b4:	689b      	ldr	r3, [r3, #8]
 80044b6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80044ba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	4313      	orrs	r3, r2
 80044c2:	608b      	str	r3, [r1, #8]
}
 80044c4:	bf00      	nop
 80044c6:	370c      	adds	r7, #12
 80044c8:	46bd      	mov	sp, r7
 80044ca:	bc80      	pop	{r7}
 80044cc:	4770      	bx	lr

080044ce <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80044ce:	b480      	push	{r7}
 80044d0:	b083      	sub	sp, #12
 80044d2:	af00      	add	r7, sp, #0
 80044d4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80044d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044da:	689b      	ldr	r3, [r3, #8]
 80044dc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80044e0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	4313      	orrs	r3, r2
 80044e8:	608b      	str	r3, [r1, #8]
}
 80044ea:	bf00      	nop
 80044ec:	370c      	adds	r7, #12
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bc80      	pop	{r7}
 80044f2:	4770      	bx	lr

080044f4 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80044f4:	b480      	push	{r7}
 80044f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80044f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044fc:	689b      	ldr	r3, [r3, #8]
 80044fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004502:	4618      	mov	r0, r3
 8004504:	46bd      	mov	sp, r7
 8004506:	bc80      	pop	{r7}
 8004508:	4770      	bx	lr

0800450a <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 800450a:	b480      	push	{r7}
 800450c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800450e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004512:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004516:	011b      	lsls	r3, r3, #4
 8004518:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800451c:	4618      	mov	r0, r3
 800451e:	46bd      	mov	sp, r7
 8004520:	bc80      	pop	{r7}
 8004522:	4770      	bx	lr

08004524 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8004524:	b480      	push	{r7}
 8004526:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8004528:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800452c:	689b      	ldr	r3, [r3, #8]
 800452e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8004532:	4618      	mov	r0, r3
 8004534:	46bd      	mov	sp, r7
 8004536:	bc80      	pop	{r7}
 8004538:	4770      	bx	lr

0800453a <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 800453a:	b480      	push	{r7}
 800453c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800453e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004542:	689b      	ldr	r3, [r3, #8]
 8004544:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8004548:	4618      	mov	r0, r3
 800454a:	46bd      	mov	sp, r7
 800454c:	bc80      	pop	{r7}
 800454e:	4770      	bx	lr

08004550 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8004550:	b480      	push	{r7}
 8004552:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8004554:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800455e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004562:	6013      	str	r3, [r2, #0]
}
 8004564:	bf00      	nop
 8004566:	46bd      	mov	sp, r7
 8004568:	bc80      	pop	{r7}
 800456a:	4770      	bx	lr

0800456c <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800456c:	b480      	push	{r7}
 800456e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8004570:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800457a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800457e:	6013      	str	r3, [r2, #0]
}
 8004580:	bf00      	nop
 8004582:	46bd      	mov	sp, r7
 8004584:	bc80      	pop	{r7}
 8004586:	4770      	bx	lr

08004588 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8004588:	b480      	push	{r7}
 800458a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800458c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004596:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800459a:	d101      	bne.n	80045a0 <LL_RCC_PLL_IsReady+0x18>
 800459c:	2301      	movs	r3, #1
 800459e:	e000      	b.n	80045a2 <LL_RCC_PLL_IsReady+0x1a>
 80045a0:	2300      	movs	r3, #0
}
 80045a2:	4618      	mov	r0, r3
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bc80      	pop	{r7}
 80045a8:	4770      	bx	lr

080045aa <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80045aa:	b480      	push	{r7}
 80045ac:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80045ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045b2:	68db      	ldr	r3, [r3, #12]
 80045b4:	0a1b      	lsrs	r3, r3, #8
 80045b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80045ba:	4618      	mov	r0, r3
 80045bc:	46bd      	mov	sp, r7
 80045be:	bc80      	pop	{r7}
 80045c0:	4770      	bx	lr

080045c2 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80045c2:	b480      	push	{r7}
 80045c4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80045c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045ca:	68db      	ldr	r3, [r3, #12]
 80045cc:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 80045d0:	4618      	mov	r0, r3
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bc80      	pop	{r7}
 80045d6:	4770      	bx	lr

080045d8 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80045d8:	b480      	push	{r7}
 80045da:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80045dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045e0:	68db      	ldr	r3, [r3, #12]
 80045e2:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	46bd      	mov	sp, r7
 80045ea:	bc80      	pop	{r7}
 80045ec:	4770      	bx	lr

080045ee <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80045ee:	b480      	push	{r7}
 80045f0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80045f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045f6:	68db      	ldr	r3, [r3, #12]
 80045f8:	f003 0303 	and.w	r3, r3, #3
}
 80045fc:	4618      	mov	r0, r3
 80045fe:	46bd      	mov	sp, r7
 8004600:	bc80      	pop	{r7}
 8004602:	4770      	bx	lr

08004604 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8004604:	b480      	push	{r7}
 8004606:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8004608:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800460c:	689b      	ldr	r3, [r3, #8]
 800460e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004612:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004616:	d101      	bne.n	800461c <LL_RCC_IsActiveFlag_HPRE+0x18>
 8004618:	2301      	movs	r3, #1
 800461a:	e000      	b.n	800461e <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800461c:	2300      	movs	r3, #0
}
 800461e:	4618      	mov	r0, r3
 8004620:	46bd      	mov	sp, r7
 8004622:	bc80      	pop	{r7}
 8004624:	4770      	bx	lr

08004626 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8004626:	b480      	push	{r7}
 8004628:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800462a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800462e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004632:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004636:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800463a:	d101      	bne.n	8004640 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 800463c:	2301      	movs	r3, #1
 800463e:	e000      	b.n	8004642 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8004640:	2300      	movs	r3, #0
}
 8004642:	4618      	mov	r0, r3
 8004644:	46bd      	mov	sp, r7
 8004646:	bc80      	pop	{r7}
 8004648:	4770      	bx	lr

0800464a <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 800464a:	b480      	push	{r7}
 800464c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800464e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004652:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004656:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800465a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800465e:	d101      	bne.n	8004664 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8004660:	2301      	movs	r3, #1
 8004662:	e000      	b.n	8004666 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8004664:	2300      	movs	r3, #0
}
 8004666:	4618      	mov	r0, r3
 8004668:	46bd      	mov	sp, r7
 800466a:	bc80      	pop	{r7}
 800466c:	4770      	bx	lr

0800466e <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800466e:	b480      	push	{r7}
 8004670:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8004672:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004676:	689b      	ldr	r3, [r3, #8]
 8004678:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800467c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004680:	d101      	bne.n	8004686 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8004682:	2301      	movs	r3, #1
 8004684:	e000      	b.n	8004688 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8004686:	2300      	movs	r3, #0
}
 8004688:	4618      	mov	r0, r3
 800468a:	46bd      	mov	sp, r7
 800468c:	bc80      	pop	{r7}
 800468e:	4770      	bx	lr

08004690 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8004690:	b480      	push	{r7}
 8004692:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8004694:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004698:	689b      	ldr	r3, [r3, #8]
 800469a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800469e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80046a2:	d101      	bne.n	80046a8 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80046a4:	2301      	movs	r3, #1
 80046a6:	e000      	b.n	80046aa <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80046a8:	2300      	movs	r3, #0
}
 80046aa:	4618      	mov	r0, r3
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bc80      	pop	{r7}
 80046b0:	4770      	bx	lr
	...

080046b4 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b088      	sub	sp, #32
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d101      	bne.n	80046c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80046c2:	2301      	movs	r3, #1
 80046c4:	e36f      	b.n	8004da6 <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80046c6:	f7ff fea6 	bl	8004416 <LL_RCC_GetSysClkSource>
 80046ca:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80046cc:	f7ff ff8f 	bl	80045ee <LL_RCC_PLL_GetMainSource>
 80046d0:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f003 0320 	and.w	r3, r3, #32
 80046da:	2b00      	cmp	r3, #0
 80046dc:	f000 80c4 	beq.w	8004868 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80046e0:	69fb      	ldr	r3, [r7, #28]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d005      	beq.n	80046f2 <HAL_RCC_OscConfig+0x3e>
 80046e6:	69fb      	ldr	r3, [r7, #28]
 80046e8:	2b0c      	cmp	r3, #12
 80046ea:	d176      	bne.n	80047da <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80046ec:	69bb      	ldr	r3, [r7, #24]
 80046ee:	2b01      	cmp	r3, #1
 80046f0:	d173      	bne.n	80047da <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6a1b      	ldr	r3, [r3, #32]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d101      	bne.n	80046fe <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 80046fa:	2301      	movs	r3, #1
 80046fc:	e353      	b.n	8004da6 <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004702:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f003 0308 	and.w	r3, r3, #8
 800470c:	2b00      	cmp	r3, #0
 800470e:	d005      	beq.n	800471c <HAL_RCC_OscConfig+0x68>
 8004710:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800471a:	e006      	b.n	800472a <HAL_RCC_OscConfig+0x76>
 800471c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004720:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004724:	091b      	lsrs	r3, r3, #4
 8004726:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800472a:	4293      	cmp	r3, r2
 800472c:	d222      	bcs.n	8004774 <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004732:	4618      	mov	r0, r3
 8004734:	f000 fd5a 	bl	80051ec <RCC_SetFlashLatencyFromMSIRange>
 8004738:	4603      	mov	r3, r0
 800473a:	2b00      	cmp	r3, #0
 800473c:	d001      	beq.n	8004742 <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 800473e:	2301      	movs	r3, #1
 8004740:	e331      	b.n	8004da6 <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004742:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800474c:	f043 0308 	orr.w	r3, r3, #8
 8004750:	6013      	str	r3, [r2, #0]
 8004752:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004760:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004764:	4313      	orrs	r3, r2
 8004766:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800476c:	4618      	mov	r0, r3
 800476e:	f7ff fe2b 	bl	80043c8 <LL_RCC_MSI_SetCalibTrimming>
 8004772:	e021      	b.n	80047b8 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004774:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800477e:	f043 0308 	orr.w	r3, r3, #8
 8004782:	6013      	str	r3, [r2, #0]
 8004784:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004792:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004796:	4313      	orrs	r3, r2
 8004798:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800479e:	4618      	mov	r0, r3
 80047a0:	f7ff fe12 	bl	80043c8 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047a8:	4618      	mov	r0, r3
 80047aa:	f000 fd1f 	bl	80051ec <RCC_SetFlashLatencyFromMSIRange>
 80047ae:	4603      	mov	r3, r0
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d001      	beq.n	80047b8 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 80047b4:	2301      	movs	r3, #1
 80047b6:	e2f6      	b.n	8004da6 <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80047b8:	f000 fce0 	bl	800517c <HAL_RCC_GetHCLKFreq>
 80047bc:	4603      	mov	r3, r0
 80047be:	4aa7      	ldr	r2, [pc, #668]	; (8004a5c <HAL_RCC_OscConfig+0x3a8>)
 80047c0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 80047c2:	4ba7      	ldr	r3, [pc, #668]	; (8004a60 <HAL_RCC_OscConfig+0x3ac>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4618      	mov	r0, r3
 80047c8:	f7fe fe50 	bl	800346c <HAL_InitTick>
 80047cc:	4603      	mov	r3, r0
 80047ce:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 80047d0:	7cfb      	ldrb	r3, [r7, #19]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d047      	beq.n	8004866 <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 80047d6:	7cfb      	ldrb	r3, [r7, #19]
 80047d8:	e2e5      	b.n	8004da6 <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6a1b      	ldr	r3, [r3, #32]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d02c      	beq.n	800483c <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80047e2:	f7ff fd9e 	bl	8004322 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80047e6:	f7fe f963 	bl	8002ab0 <HAL_GetTick>
 80047ea:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80047ec:	e008      	b.n	8004800 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80047ee:	f7fe f95f 	bl	8002ab0 <HAL_GetTick>
 80047f2:	4602      	mov	r2, r0
 80047f4:	697b      	ldr	r3, [r7, #20]
 80047f6:	1ad3      	subs	r3, r2, r3
 80047f8:	2b02      	cmp	r3, #2
 80047fa:	d901      	bls.n	8004800 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 80047fc:	2303      	movs	r3, #3
 80047fe:	e2d2      	b.n	8004da6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 8004800:	f7ff fdab 	bl	800435a <LL_RCC_MSI_IsReady>
 8004804:	4603      	mov	r3, r0
 8004806:	2b00      	cmp	r3, #0
 8004808:	d0f1      	beq.n	80047ee <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800480a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004814:	f043 0308 	orr.w	r3, r3, #8
 8004818:	6013      	str	r3, [r2, #0]
 800481a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004828:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800482c:	4313      	orrs	r3, r2
 800482e:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004834:	4618      	mov	r0, r3
 8004836:	f7ff fdc7 	bl	80043c8 <LL_RCC_MSI_SetCalibTrimming>
 800483a:	e015      	b.n	8004868 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800483c:	f7ff fd7f 	bl	800433e <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004840:	f7fe f936 	bl	8002ab0 <HAL_GetTick>
 8004844:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8004846:	e008      	b.n	800485a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004848:	f7fe f932 	bl	8002ab0 <HAL_GetTick>
 800484c:	4602      	mov	r2, r0
 800484e:	697b      	ldr	r3, [r7, #20]
 8004850:	1ad3      	subs	r3, r2, r3
 8004852:	2b02      	cmp	r3, #2
 8004854:	d901      	bls.n	800485a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8004856:	2303      	movs	r3, #3
 8004858:	e2a5      	b.n	8004da6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 800485a:	f7ff fd7e 	bl	800435a <LL_RCC_MSI_IsReady>
 800485e:	4603      	mov	r3, r0
 8004860:	2b00      	cmp	r3, #0
 8004862:	d1f1      	bne.n	8004848 <HAL_RCC_OscConfig+0x194>
 8004864:	e000      	b.n	8004868 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004866:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f003 0301 	and.w	r3, r3, #1
 8004870:	2b00      	cmp	r3, #0
 8004872:	d058      	beq.n	8004926 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004874:	69fb      	ldr	r3, [r7, #28]
 8004876:	2b08      	cmp	r3, #8
 8004878:	d005      	beq.n	8004886 <HAL_RCC_OscConfig+0x1d2>
 800487a:	69fb      	ldr	r3, [r7, #28]
 800487c:	2b0c      	cmp	r3, #12
 800487e:	d108      	bne.n	8004892 <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004880:	69bb      	ldr	r3, [r7, #24]
 8004882:	2b03      	cmp	r3, #3
 8004884:	d105      	bne.n	8004892 <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d14b      	bne.n	8004926 <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 800488e:	2301      	movs	r3, #1
 8004890:	e289      	b.n	8004da6 <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8004892:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	689b      	ldr	r3, [r3, #8]
 80048a0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80048a4:	4313      	orrs	r3, r2
 80048a6:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048b0:	d102      	bne.n	80048b8 <HAL_RCC_OscConfig+0x204>
 80048b2:	f7ff fc86 	bl	80041c2 <LL_RCC_HSE_Enable>
 80048b6:	e00d      	b.n	80048d4 <HAL_RCC_OscConfig+0x220>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 80048c0:	d104      	bne.n	80048cc <HAL_RCC_OscConfig+0x218>
 80048c2:	f7ff fc51 	bl	8004168 <LL_RCC_HSE_EnableTcxo>
 80048c6:	f7ff fc7c 	bl	80041c2 <LL_RCC_HSE_Enable>
 80048ca:	e003      	b.n	80048d4 <HAL_RCC_OscConfig+0x220>
 80048cc:	f7ff fc87 	bl	80041de <LL_RCC_HSE_Disable>
 80048d0:	f7ff fc58 	bl	8004184 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d012      	beq.n	8004902 <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048dc:	f7fe f8e8 	bl	8002ab0 <HAL_GetTick>
 80048e0:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80048e2:	e008      	b.n	80048f6 <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80048e4:	f7fe f8e4 	bl	8002ab0 <HAL_GetTick>
 80048e8:	4602      	mov	r2, r0
 80048ea:	697b      	ldr	r3, [r7, #20]
 80048ec:	1ad3      	subs	r3, r2, r3
 80048ee:	2b64      	cmp	r3, #100	; 0x64
 80048f0:	d901      	bls.n	80048f6 <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 80048f2:	2303      	movs	r3, #3
 80048f4:	e257      	b.n	8004da6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 80048f6:	f7ff fc80 	bl	80041fa <LL_RCC_HSE_IsReady>
 80048fa:	4603      	mov	r3, r0
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d0f1      	beq.n	80048e4 <HAL_RCC_OscConfig+0x230>
 8004900:	e011      	b.n	8004926 <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004902:	f7fe f8d5 	bl	8002ab0 <HAL_GetTick>
 8004906:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8004908:	e008      	b.n	800491c <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800490a:	f7fe f8d1 	bl	8002ab0 <HAL_GetTick>
 800490e:	4602      	mov	r2, r0
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	1ad3      	subs	r3, r2, r3
 8004914:	2b64      	cmp	r3, #100	; 0x64
 8004916:	d901      	bls.n	800491c <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8004918:	2303      	movs	r3, #3
 800491a:	e244      	b.n	8004da6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 800491c:	f7ff fc6d 	bl	80041fa <LL_RCC_HSE_IsReady>
 8004920:	4603      	mov	r3, r0
 8004922:	2b00      	cmp	r3, #0
 8004924:	d1f1      	bne.n	800490a <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f003 0302 	and.w	r3, r3, #2
 800492e:	2b00      	cmp	r3, #0
 8004930:	d046      	beq.n	80049c0 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8004932:	69fb      	ldr	r3, [r7, #28]
 8004934:	2b04      	cmp	r3, #4
 8004936:	d005      	beq.n	8004944 <HAL_RCC_OscConfig+0x290>
 8004938:	69fb      	ldr	r3, [r7, #28]
 800493a:	2b0c      	cmp	r3, #12
 800493c:	d10e      	bne.n	800495c <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800493e:	69bb      	ldr	r3, [r7, #24]
 8004940:	2b02      	cmp	r3, #2
 8004942:	d10b      	bne.n	800495c <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	691b      	ldr	r3, [r3, #16]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d101      	bne.n	8004950 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 800494c:	2301      	movs	r3, #1
 800494e:	e22a      	b.n	8004da6 <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	695b      	ldr	r3, [r3, #20]
 8004954:	4618      	mov	r0, r3
 8004956:	f7ff fc8e 	bl	8004276 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800495a:	e031      	b.n	80049c0 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	691b      	ldr	r3, [r3, #16]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d019      	beq.n	8004998 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004964:	f7ff fc5a 	bl	800421c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004968:	f7fe f8a2 	bl	8002ab0 <HAL_GetTick>
 800496c:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800496e:	e008      	b.n	8004982 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004970:	f7fe f89e 	bl	8002ab0 <HAL_GetTick>
 8004974:	4602      	mov	r2, r0
 8004976:	697b      	ldr	r3, [r7, #20]
 8004978:	1ad3      	subs	r3, r2, r3
 800497a:	2b02      	cmp	r3, #2
 800497c:	d901      	bls.n	8004982 <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 800497e:	2303      	movs	r3, #3
 8004980:	e211      	b.n	8004da6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 8004982:	f7ff fc67 	bl	8004254 <LL_RCC_HSI_IsReady>
 8004986:	4603      	mov	r3, r0
 8004988:	2b00      	cmp	r3, #0
 800498a:	d0f1      	beq.n	8004970 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	695b      	ldr	r3, [r3, #20]
 8004990:	4618      	mov	r0, r3
 8004992:	f7ff fc70 	bl	8004276 <LL_RCC_HSI_SetCalibTrimming>
 8004996:	e013      	b.n	80049c0 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004998:	f7ff fc4e 	bl	8004238 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800499c:	f7fe f888 	bl	8002ab0 <HAL_GetTick>
 80049a0:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80049a2:	e008      	b.n	80049b6 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80049a4:	f7fe f884 	bl	8002ab0 <HAL_GetTick>
 80049a8:	4602      	mov	r2, r0
 80049aa:	697b      	ldr	r3, [r7, #20]
 80049ac:	1ad3      	subs	r3, r2, r3
 80049ae:	2b02      	cmp	r3, #2
 80049b0:	d901      	bls.n	80049b6 <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 80049b2:	2303      	movs	r3, #3
 80049b4:	e1f7      	b.n	8004da6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 80049b6:	f7ff fc4d 	bl	8004254 <LL_RCC_HSI_IsReady>
 80049ba:	4603      	mov	r3, r0
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d1f1      	bne.n	80049a4 <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f003 0308 	and.w	r3, r3, #8
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d06e      	beq.n	8004aaa <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	699b      	ldr	r3, [r3, #24]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d056      	beq.n	8004a82 <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 80049d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80049dc:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	69da      	ldr	r2, [r3, #28]
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	f003 0310 	and.w	r3, r3, #16
 80049e8:	429a      	cmp	r2, r3
 80049ea:	d031      	beq.n	8004a50 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	f003 0302 	and.w	r3, r3, #2
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d006      	beq.n	8004a04 <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d101      	bne.n	8004a04 <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 8004a00:	2301      	movs	r3, #1
 8004a02:	e1d0      	b.n	8004da6 <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	f003 0301 	and.w	r3, r3, #1
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d013      	beq.n	8004a36 <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 8004a0e:	f7ff fc67 	bl	80042e0 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004a12:	f7fe f84d 	bl	8002ab0 <HAL_GetTick>
 8004a16:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8004a18:	e008      	b.n	8004a2c <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a1a:	f7fe f849 	bl	8002ab0 <HAL_GetTick>
 8004a1e:	4602      	mov	r2, r0
 8004a20:	697b      	ldr	r3, [r7, #20]
 8004a22:	1ad3      	subs	r3, r2, r3
 8004a24:	2b11      	cmp	r3, #17
 8004a26:	d901      	bls.n	8004a2c <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 8004a28:	2303      	movs	r3, #3
 8004a2a:	e1bc      	b.n	8004da6 <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 8004a2c:	f7ff fc68 	bl	8004300 <LL_RCC_LSI_IsReady>
 8004a30:	4603      	mov	r3, r0
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d1f1      	bne.n	8004a1a <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8004a36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a3e:	f023 0210 	bic.w	r2, r3, #16
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	69db      	ldr	r3, [r3, #28]
 8004a46:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a50:	f7ff fc36 	bl	80042c0 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a54:	f7fe f82c 	bl	8002ab0 <HAL_GetTick>
 8004a58:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8004a5a:	e00c      	b.n	8004a76 <HAL_RCC_OscConfig+0x3c2>
 8004a5c:	2000000c 	.word	0x2000000c
 8004a60:	20000010 	.word	0x20000010
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a64:	f7fe f824 	bl	8002ab0 <HAL_GetTick>
 8004a68:	4602      	mov	r2, r0
 8004a6a:	697b      	ldr	r3, [r7, #20]
 8004a6c:	1ad3      	subs	r3, r2, r3
 8004a6e:	2b11      	cmp	r3, #17
 8004a70:	d901      	bls.n	8004a76 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8004a72:	2303      	movs	r3, #3
 8004a74:	e197      	b.n	8004da6 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 8004a76:	f7ff fc43 	bl	8004300 <LL_RCC_LSI_IsReady>
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d0f1      	beq.n	8004a64 <HAL_RCC_OscConfig+0x3b0>
 8004a80:	e013      	b.n	8004aaa <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a82:	f7ff fc2d 	bl	80042e0 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a86:	f7fe f813 	bl	8002ab0 <HAL_GetTick>
 8004a8a:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8004a8c:	e008      	b.n	8004aa0 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a8e:	f7fe f80f 	bl	8002ab0 <HAL_GetTick>
 8004a92:	4602      	mov	r2, r0
 8004a94:	697b      	ldr	r3, [r7, #20]
 8004a96:	1ad3      	subs	r3, r2, r3
 8004a98:	2b11      	cmp	r3, #17
 8004a9a:	d901      	bls.n	8004aa0 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8004a9c:	2303      	movs	r3, #3
 8004a9e:	e182      	b.n	8004da6 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 8004aa0:	f7ff fc2e 	bl	8004300 <LL_RCC_LSI_IsReady>
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d1f1      	bne.n	8004a8e <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f003 0304 	and.w	r3, r3, #4
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	f000 80d8 	beq.w	8004c68 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8004ab8:	f7ff fb44 	bl	8004144 <LL_PWR_IsEnabledBkUpAccess>
 8004abc:	4603      	mov	r3, r0
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d113      	bne.n	8004aea <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8004ac2:	f7ff fb25 	bl	8004110 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ac6:	f7fd fff3 	bl	8002ab0 <HAL_GetTick>
 8004aca:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8004acc:	e008      	b.n	8004ae0 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ace:	f7fd ffef 	bl	8002ab0 <HAL_GetTick>
 8004ad2:	4602      	mov	r2, r0
 8004ad4:	697b      	ldr	r3, [r7, #20]
 8004ad6:	1ad3      	subs	r3, r2, r3
 8004ad8:	2b02      	cmp	r3, #2
 8004ada:	d901      	bls.n	8004ae0 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8004adc:	2303      	movs	r3, #3
 8004ade:	e162      	b.n	8004da6 <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8004ae0:	f7ff fb30 	bl	8004144 <LL_PWR_IsEnabledBkUpAccess>
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d0f1      	beq.n	8004ace <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	68db      	ldr	r3, [r3, #12]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d07b      	beq.n	8004bea <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	68db      	ldr	r3, [r3, #12]
 8004af6:	2b85      	cmp	r3, #133	; 0x85
 8004af8:	d003      	beq.n	8004b02 <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	68db      	ldr	r3, [r3, #12]
 8004afe:	2b05      	cmp	r3, #5
 8004b00:	d109      	bne.n	8004b16 <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004b02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b0a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b0e:	f043 0304 	orr.w	r3, r3, #4
 8004b12:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b16:	f7fd ffcb 	bl	8002ab0 <HAL_GetTick>
 8004b1a:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004b1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b24:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b28:	f043 0301 	orr.w	r3, r3, #1
 8004b2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8004b30:	e00a      	b.n	8004b48 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b32:	f7fd ffbd 	bl	8002ab0 <HAL_GetTick>
 8004b36:	4602      	mov	r2, r0
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	1ad3      	subs	r3, r2, r3
 8004b3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d901      	bls.n	8004b48 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 8004b44:	2303      	movs	r3, #3
 8004b46:	e12e      	b.n	8004da6 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 8004b48:	f7ff fba9 	bl	800429e <LL_RCC_LSE_IsReady>
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d0ef      	beq.n	8004b32 <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	68db      	ldr	r3, [r3, #12]
 8004b56:	2b81      	cmp	r3, #129	; 0x81
 8004b58:	d003      	beq.n	8004b62 <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	68db      	ldr	r3, [r3, #12]
 8004b5e:	2b85      	cmp	r3, #133	; 0x85
 8004b60:	d121      	bne.n	8004ba6 <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b62:	f7fd ffa5 	bl	8002ab0 <HAL_GetTick>
 8004b66:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004b68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b70:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8004b7c:	e00a      	b.n	8004b94 <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b7e:	f7fd ff97 	bl	8002ab0 <HAL_GetTick>
 8004b82:	4602      	mov	r2, r0
 8004b84:	697b      	ldr	r3, [r7, #20]
 8004b86:	1ad3      	subs	r3, r2, r3
 8004b88:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d901      	bls.n	8004b94 <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 8004b90:	2303      	movs	r3, #3
 8004b92:	e108      	b.n	8004da6 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8004b94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b9c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d0ec      	beq.n	8004b7e <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8004ba4:	e060      	b.n	8004c68 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ba6:	f7fd ff83 	bl	8002ab0 <HAL_GetTick>
 8004baa:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004bac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bb4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004bb8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004bbc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004bc0:	e00a      	b.n	8004bd8 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bc2:	f7fd ff75 	bl	8002ab0 <HAL_GetTick>
 8004bc6:	4602      	mov	r2, r0
 8004bc8:	697b      	ldr	r3, [r7, #20]
 8004bca:	1ad3      	subs	r3, r2, r3
 8004bcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d901      	bls.n	8004bd8 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8004bd4:	2303      	movs	r3, #3
 8004bd6:	e0e6      	b.n	8004da6 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004bd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004be0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d1ec      	bne.n	8004bc2 <HAL_RCC_OscConfig+0x50e>
 8004be8:	e03e      	b.n	8004c68 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004bea:	f7fd ff61 	bl	8002ab0 <HAL_GetTick>
 8004bee:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004bf0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bf8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004bfc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004c04:	e00a      	b.n	8004c1c <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c06:	f7fd ff53 	bl	8002ab0 <HAL_GetTick>
 8004c0a:	4602      	mov	r2, r0
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	1ad3      	subs	r3, r2, r3
 8004c10:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d901      	bls.n	8004c1c <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8004c18:	2303      	movs	r3, #3
 8004c1a:	e0c4      	b.n	8004da6 <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004c1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c24:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d1ec      	bne.n	8004c06 <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c2c:	f7fd ff40 	bl	8002ab0 <HAL_GetTick>
 8004c30:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004c32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c3a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c3e:	f023 0301 	bic.w	r3, r3, #1
 8004c42:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8004c46:	e00a      	b.n	8004c5e <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c48:	f7fd ff32 	bl	8002ab0 <HAL_GetTick>
 8004c4c:	4602      	mov	r2, r0
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	1ad3      	subs	r3, r2, r3
 8004c52:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d901      	bls.n	8004c5e <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 8004c5a:	2303      	movs	r3, #3
 8004c5c:	e0a3      	b.n	8004da6 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 8004c5e:	f7ff fb1e 	bl	800429e <LL_RCC_LSE_IsReady>
 8004c62:	4603      	mov	r3, r0
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d1ef      	bne.n	8004c48 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	f000 8099 	beq.w	8004da4 <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004c72:	69fb      	ldr	r3, [r7, #28]
 8004c74:	2b0c      	cmp	r3, #12
 8004c76:	d06c      	beq.n	8004d52 <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c7c:	2b02      	cmp	r3, #2
 8004c7e:	d14b      	bne.n	8004d18 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c80:	f7ff fc74 	bl	800456c <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c84:	f7fd ff14 	bl	8002ab0 <HAL_GetTick>
 8004c88:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8004c8a:	e008      	b.n	8004c9e <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c8c:	f7fd ff10 	bl	8002ab0 <HAL_GetTick>
 8004c90:	4602      	mov	r2, r0
 8004c92:	697b      	ldr	r3, [r7, #20]
 8004c94:	1ad3      	subs	r3, r2, r3
 8004c96:	2b0a      	cmp	r3, #10
 8004c98:	d901      	bls.n	8004c9e <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 8004c9a:	2303      	movs	r3, #3
 8004c9c:	e083      	b.n	8004da6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8004c9e:	f7ff fc73 	bl	8004588 <LL_RCC_PLL_IsReady>
 8004ca2:	4603      	mov	r3, r0
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d1f1      	bne.n	8004c8c <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004ca8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cac:	68da      	ldr	r2, [r3, #12]
 8004cae:	4b40      	ldr	r3, [pc, #256]	; (8004db0 <HAL_RCC_OscConfig+0x6fc>)
 8004cb0:	4013      	ands	r3, r2
 8004cb2:	687a      	ldr	r2, [r7, #4]
 8004cb4:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8004cb6:	687a      	ldr	r2, [r7, #4]
 8004cb8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004cba:	4311      	orrs	r1, r2
 8004cbc:	687a      	ldr	r2, [r7, #4]
 8004cbe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004cc0:	0212      	lsls	r2, r2, #8
 8004cc2:	4311      	orrs	r1, r2
 8004cc4:	687a      	ldr	r2, [r7, #4]
 8004cc6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004cc8:	4311      	orrs	r1, r2
 8004cca:	687a      	ldr	r2, [r7, #4]
 8004ccc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004cce:	4311      	orrs	r1, r2
 8004cd0:	687a      	ldr	r2, [r7, #4]
 8004cd2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004cd4:	430a      	orrs	r2, r1
 8004cd6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004cda:	4313      	orrs	r3, r2
 8004cdc:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004cde:	f7ff fc37 	bl	8004550 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004ce2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ce6:	68db      	ldr	r3, [r3, #12]
 8004ce8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004cec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cf0:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cf2:	f7fd fedd 	bl	8002ab0 <HAL_GetTick>
 8004cf6:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8004cf8:	e008      	b.n	8004d0c <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cfa:	f7fd fed9 	bl	8002ab0 <HAL_GetTick>
 8004cfe:	4602      	mov	r2, r0
 8004d00:	697b      	ldr	r3, [r7, #20]
 8004d02:	1ad3      	subs	r3, r2, r3
 8004d04:	2b0a      	cmp	r3, #10
 8004d06:	d901      	bls.n	8004d0c <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 8004d08:	2303      	movs	r3, #3
 8004d0a:	e04c      	b.n	8004da6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 8004d0c:	f7ff fc3c 	bl	8004588 <LL_RCC_PLL_IsReady>
 8004d10:	4603      	mov	r3, r0
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d0f1      	beq.n	8004cfa <HAL_RCC_OscConfig+0x646>
 8004d16:	e045      	b.n	8004da4 <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d18:	f7ff fc28 	bl	800456c <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d1c:	f7fd fec8 	bl	8002ab0 <HAL_GetTick>
 8004d20:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8004d22:	e008      	b.n	8004d36 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d24:	f7fd fec4 	bl	8002ab0 <HAL_GetTick>
 8004d28:	4602      	mov	r2, r0
 8004d2a:	697b      	ldr	r3, [r7, #20]
 8004d2c:	1ad3      	subs	r3, r2, r3
 8004d2e:	2b0a      	cmp	r3, #10
 8004d30:	d901      	bls.n	8004d36 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8004d32:	2303      	movs	r3, #3
 8004d34:	e037      	b.n	8004da6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8004d36:	f7ff fc27 	bl	8004588 <LL_RCC_PLL_IsReady>
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d1f1      	bne.n	8004d24 <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8004d40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d44:	68da      	ldr	r2, [r3, #12]
 8004d46:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004d4a:	4b1a      	ldr	r3, [pc, #104]	; (8004db4 <HAL_RCC_OscConfig+0x700>)
 8004d4c:	4013      	ands	r3, r2
 8004d4e:	60cb      	str	r3, [r1, #12]
 8004d50:	e028      	b.n	8004da4 <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d56:	2b01      	cmp	r3, #1
 8004d58:	d101      	bne.n	8004d5e <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	e023      	b.n	8004da6 <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004d5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d62:	68db      	ldr	r3, [r3, #12]
 8004d64:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8004d66:	69bb      	ldr	r3, [r7, #24]
 8004d68:	f003 0203 	and.w	r2, r3, #3
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d70:	429a      	cmp	r2, r3
 8004d72:	d115      	bne.n	8004da0 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8004d74:	69bb      	ldr	r3, [r7, #24]
 8004d76:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d7e:	429a      	cmp	r2, r3
 8004d80:	d10e      	bne.n	8004da0 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8004d82:	69bb      	ldr	r3, [r7, #24]
 8004d84:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d8c:	021b      	lsls	r3, r3, #8
 8004d8e:	429a      	cmp	r2, r3
 8004d90:	d106      	bne.n	8004da0 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8004d92:	69bb      	ldr	r3, [r7, #24]
 8004d94:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d9c:	429a      	cmp	r2, r3
 8004d9e:	d001      	beq.n	8004da4 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 8004da0:	2301      	movs	r3, #1
 8004da2:	e000      	b.n	8004da6 <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 8004da4:	2300      	movs	r3, #0
}
 8004da6:	4618      	mov	r0, r3
 8004da8:	3720      	adds	r7, #32
 8004daa:	46bd      	mov	sp, r7
 8004dac:	bd80      	pop	{r7, pc}
 8004dae:	bf00      	nop
 8004db0:	11c1808c 	.word	0x11c1808c
 8004db4:	eefefffc 	.word	0xeefefffc

08004db8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b084      	sub	sp, #16
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
 8004dc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d101      	bne.n	8004dcc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004dc8:	2301      	movs	r3, #1
 8004dca:	e12c      	b.n	8005026 <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004dcc:	4b98      	ldr	r3, [pc, #608]	; (8005030 <HAL_RCC_ClockConfig+0x278>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f003 0307 	and.w	r3, r3, #7
 8004dd4:	683a      	ldr	r2, [r7, #0]
 8004dd6:	429a      	cmp	r2, r3
 8004dd8:	d91b      	bls.n	8004e12 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dda:	4b95      	ldr	r3, [pc, #596]	; (8005030 <HAL_RCC_ClockConfig+0x278>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f023 0207 	bic.w	r2, r3, #7
 8004de2:	4993      	ldr	r1, [pc, #588]	; (8005030 <HAL_RCC_ClockConfig+0x278>)
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	4313      	orrs	r3, r2
 8004de8:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004dea:	f7fd fe61 	bl	8002ab0 <HAL_GetTick>
 8004dee:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004df0:	e008      	b.n	8004e04 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004df2:	f7fd fe5d 	bl	8002ab0 <HAL_GetTick>
 8004df6:	4602      	mov	r2, r0
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	1ad3      	subs	r3, r2, r3
 8004dfc:	2b02      	cmp	r3, #2
 8004dfe:	d901      	bls.n	8004e04 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8004e00:	2303      	movs	r3, #3
 8004e02:	e110      	b.n	8005026 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e04:	4b8a      	ldr	r3, [pc, #552]	; (8005030 <HAL_RCC_ClockConfig+0x278>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f003 0307 	and.w	r3, r3, #7
 8004e0c:	683a      	ldr	r2, [r7, #0]
 8004e0e:	429a      	cmp	r2, r3
 8004e10:	d1ef      	bne.n	8004df2 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f003 0302 	and.w	r3, r3, #2
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d016      	beq.n	8004e4c <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	689b      	ldr	r3, [r3, #8]
 8004e22:	4618      	mov	r0, r3
 8004e24:	f7ff fb02 	bl	800442c <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004e28:	f7fd fe42 	bl	8002ab0 <HAL_GetTick>
 8004e2c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004e2e:	e008      	b.n	8004e42 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004e30:	f7fd fe3e 	bl	8002ab0 <HAL_GetTick>
 8004e34:	4602      	mov	r2, r0
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	1ad3      	subs	r3, r2, r3
 8004e3a:	2b02      	cmp	r3, #2
 8004e3c:	d901      	bls.n	8004e42 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8004e3e:	2303      	movs	r3, #3
 8004e40:	e0f1      	b.n	8005026 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004e42:	f7ff fbdf 	bl	8004604 <LL_RCC_IsActiveFlag_HPRE>
 8004e46:	4603      	mov	r3, r0
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d0f1      	beq.n	8004e30 <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f003 0320 	and.w	r3, r3, #32
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d016      	beq.n	8004e86 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	695b      	ldr	r3, [r3, #20]
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	f7ff faf8 	bl	8004452 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004e62:	f7fd fe25 	bl	8002ab0 <HAL_GetTick>
 8004e66:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004e68:	e008      	b.n	8004e7c <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004e6a:	f7fd fe21 	bl	8002ab0 <HAL_GetTick>
 8004e6e:	4602      	mov	r2, r0
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	1ad3      	subs	r3, r2, r3
 8004e74:	2b02      	cmp	r3, #2
 8004e76:	d901      	bls.n	8004e7c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8004e78:	2303      	movs	r3, #3
 8004e7a:	e0d4      	b.n	8005026 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004e7c:	f7ff fbd3 	bl	8004626 <LL_RCC_IsActiveFlag_C2HPRE>
 8004e80:	4603      	mov	r3, r0
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d0f1      	beq.n	8004e6a <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d016      	beq.n	8004ec0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	699b      	ldr	r3, [r3, #24]
 8004e96:	4618      	mov	r0, r3
 8004e98:	f7ff faf0 	bl	800447c <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004e9c:	f7fd fe08 	bl	8002ab0 <HAL_GetTick>
 8004ea0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8004ea2:	e008      	b.n	8004eb6 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004ea4:	f7fd fe04 	bl	8002ab0 <HAL_GetTick>
 8004ea8:	4602      	mov	r2, r0
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	1ad3      	subs	r3, r2, r3
 8004eae:	2b02      	cmp	r3, #2
 8004eb0:	d901      	bls.n	8004eb6 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8004eb2:	2303      	movs	r3, #3
 8004eb4:	e0b7      	b.n	8005026 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8004eb6:	f7ff fbc8 	bl	800464a <LL_RCC_IsActiveFlag_SHDHPRE>
 8004eba:	4603      	mov	r3, r0
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d0f1      	beq.n	8004ea4 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f003 0304 	and.w	r3, r3, #4
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d016      	beq.n	8004efa <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	68db      	ldr	r3, [r3, #12]
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	f7ff fae9 	bl	80044a8 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004ed6:	f7fd fdeb 	bl	8002ab0 <HAL_GetTick>
 8004eda:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004edc:	e008      	b.n	8004ef0 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004ede:	f7fd fde7 	bl	8002ab0 <HAL_GetTick>
 8004ee2:	4602      	mov	r2, r0
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	1ad3      	subs	r3, r2, r3
 8004ee8:	2b02      	cmp	r3, #2
 8004eea:	d901      	bls.n	8004ef0 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8004eec:	2303      	movs	r3, #3
 8004eee:	e09a      	b.n	8005026 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004ef0:	f7ff fbbd 	bl	800466e <LL_RCC_IsActiveFlag_PPRE1>
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d0f1      	beq.n	8004ede <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f003 0308 	and.w	r3, r3, #8
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d017      	beq.n	8004f36 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	691b      	ldr	r3, [r3, #16]
 8004f0a:	00db      	lsls	r3, r3, #3
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	f7ff fade 	bl	80044ce <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004f12:	f7fd fdcd 	bl	8002ab0 <HAL_GetTick>
 8004f16:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004f18:	e008      	b.n	8004f2c <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004f1a:	f7fd fdc9 	bl	8002ab0 <HAL_GetTick>
 8004f1e:	4602      	mov	r2, r0
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	1ad3      	subs	r3, r2, r3
 8004f24:	2b02      	cmp	r3, #2
 8004f26:	d901      	bls.n	8004f2c <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8004f28:	2303      	movs	r3, #3
 8004f2a:	e07c      	b.n	8005026 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004f2c:	f7ff fbb0 	bl	8004690 <LL_RCC_IsActiveFlag_PPRE2>
 8004f30:	4603      	mov	r3, r0
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d0f1      	beq.n	8004f1a <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f003 0301 	and.w	r3, r3, #1
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d043      	beq.n	8004fca <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	685b      	ldr	r3, [r3, #4]
 8004f46:	2b02      	cmp	r3, #2
 8004f48:	d106      	bne.n	8004f58 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8004f4a:	f7ff f956 	bl	80041fa <LL_RCC_HSE_IsReady>
 8004f4e:	4603      	mov	r3, r0
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d11e      	bne.n	8004f92 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004f54:	2301      	movs	r3, #1
 8004f56:	e066      	b.n	8005026 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	685b      	ldr	r3, [r3, #4]
 8004f5c:	2b03      	cmp	r3, #3
 8004f5e:	d106      	bne.n	8004f6e <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8004f60:	f7ff fb12 	bl	8004588 <LL_RCC_PLL_IsReady>
 8004f64:	4603      	mov	r3, r0
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d113      	bne.n	8004f92 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	e05b      	b.n	8005026 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d106      	bne.n	8004f84 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8004f76:	f7ff f9f0 	bl	800435a <LL_RCC_MSI_IsReady>
 8004f7a:	4603      	mov	r3, r0
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d108      	bne.n	8004f92 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004f80:	2301      	movs	r3, #1
 8004f82:	e050      	b.n	8005026 <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8004f84:	f7ff f966 	bl	8004254 <LL_RCC_HSI_IsReady>
 8004f88:	4603      	mov	r3, r0
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d101      	bne.n	8004f92 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004f8e:	2301      	movs	r3, #1
 8004f90:	e049      	b.n	8005026 <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	685b      	ldr	r3, [r3, #4]
 8004f96:	4618      	mov	r0, r3
 8004f98:	f7ff fa2a 	bl	80043f0 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004f9c:	f7fd fd88 	bl	8002ab0 <HAL_GetTick>
 8004fa0:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fa2:	e00a      	b.n	8004fba <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004fa4:	f7fd fd84 	bl	8002ab0 <HAL_GetTick>
 8004fa8:	4602      	mov	r2, r0
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	1ad3      	subs	r3, r2, r3
 8004fae:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d901      	bls.n	8004fba <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8004fb6:	2303      	movs	r3, #3
 8004fb8:	e035      	b.n	8005026 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fba:	f7ff fa2c 	bl	8004416 <LL_RCC_GetSysClkSource>
 8004fbe:	4602      	mov	r2, r0
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	009b      	lsls	r3, r3, #2
 8004fc6:	429a      	cmp	r2, r3
 8004fc8:	d1ec      	bne.n	8004fa4 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004fca:	4b19      	ldr	r3, [pc, #100]	; (8005030 <HAL_RCC_ClockConfig+0x278>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f003 0307 	and.w	r3, r3, #7
 8004fd2:	683a      	ldr	r2, [r7, #0]
 8004fd4:	429a      	cmp	r2, r3
 8004fd6:	d21b      	bcs.n	8005010 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fd8:	4b15      	ldr	r3, [pc, #84]	; (8005030 <HAL_RCC_ClockConfig+0x278>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f023 0207 	bic.w	r2, r3, #7
 8004fe0:	4913      	ldr	r1, [pc, #76]	; (8005030 <HAL_RCC_ClockConfig+0x278>)
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004fe8:	f7fd fd62 	bl	8002ab0 <HAL_GetTick>
 8004fec:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fee:	e008      	b.n	8005002 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004ff0:	f7fd fd5e 	bl	8002ab0 <HAL_GetTick>
 8004ff4:	4602      	mov	r2, r0
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	1ad3      	subs	r3, r2, r3
 8004ffa:	2b02      	cmp	r3, #2
 8004ffc:	d901      	bls.n	8005002 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8004ffe:	2303      	movs	r3, #3
 8005000:	e011      	b.n	8005026 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005002:	4b0b      	ldr	r3, [pc, #44]	; (8005030 <HAL_RCC_ClockConfig+0x278>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f003 0307 	and.w	r3, r3, #7
 800500a:	683a      	ldr	r2, [r7, #0]
 800500c:	429a      	cmp	r2, r3
 800500e:	d1ef      	bne.n	8004ff0 <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005010:	f000 f8b4 	bl	800517c <HAL_RCC_GetHCLKFreq>
 8005014:	4603      	mov	r3, r0
 8005016:	4a07      	ldr	r2, [pc, #28]	; (8005034 <HAL_RCC_ClockConfig+0x27c>)
 8005018:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 800501a:	4b07      	ldr	r3, [pc, #28]	; (8005038 <HAL_RCC_ClockConfig+0x280>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4618      	mov	r0, r3
 8005020:	f7fe fa24 	bl	800346c <HAL_InitTick>
 8005024:	4603      	mov	r3, r0
}
 8005026:	4618      	mov	r0, r3
 8005028:	3710      	adds	r7, #16
 800502a:	46bd      	mov	sp, r7
 800502c:	bd80      	pop	{r7, pc}
 800502e:	bf00      	nop
 8005030:	58004000 	.word	0x58004000
 8005034:	2000000c 	.word	0x2000000c
 8005038:	20000010 	.word	0x20000010

0800503c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800503c:	b590      	push	{r4, r7, lr}
 800503e:	b087      	sub	sp, #28
 8005040:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8005042:	2300      	movs	r3, #0
 8005044:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8005046:	2300      	movs	r3, #0
 8005048:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800504a:	f7ff f9e4 	bl	8004416 <LL_RCC_GetSysClkSource>
 800504e:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005050:	f7ff facd 	bl	80045ee <LL_RCC_PLL_GetMainSource>
 8005054:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d005      	beq.n	8005068 <HAL_RCC_GetSysClockFreq+0x2c>
 800505c:	68bb      	ldr	r3, [r7, #8]
 800505e:	2b0c      	cmp	r3, #12
 8005060:	d139      	bne.n	80050d6 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2b01      	cmp	r3, #1
 8005066:	d136      	bne.n	80050d6 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8005068:	f7ff f987 	bl	800437a <LL_RCC_MSI_IsEnabledRangeSelect>
 800506c:	4603      	mov	r3, r0
 800506e:	2b00      	cmp	r3, #0
 8005070:	d115      	bne.n	800509e <HAL_RCC_GetSysClockFreq+0x62>
 8005072:	f7ff f982 	bl	800437a <LL_RCC_MSI_IsEnabledRangeSelect>
 8005076:	4603      	mov	r3, r0
 8005078:	2b01      	cmp	r3, #1
 800507a:	d106      	bne.n	800508a <HAL_RCC_GetSysClockFreq+0x4e>
 800507c:	f7ff f98d 	bl	800439a <LL_RCC_MSI_GetRange>
 8005080:	4603      	mov	r3, r0
 8005082:	0a1b      	lsrs	r3, r3, #8
 8005084:	f003 030f 	and.w	r3, r3, #15
 8005088:	e005      	b.n	8005096 <HAL_RCC_GetSysClockFreq+0x5a>
 800508a:	f7ff f991 	bl	80043b0 <LL_RCC_MSI_GetRangeAfterStandby>
 800508e:	4603      	mov	r3, r0
 8005090:	0a1b      	lsrs	r3, r3, #8
 8005092:	f003 030f 	and.w	r3, r3, #15
 8005096:	4a36      	ldr	r2, [pc, #216]	; (8005170 <HAL_RCC_GetSysClockFreq+0x134>)
 8005098:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800509c:	e014      	b.n	80050c8 <HAL_RCC_GetSysClockFreq+0x8c>
 800509e:	f7ff f96c 	bl	800437a <LL_RCC_MSI_IsEnabledRangeSelect>
 80050a2:	4603      	mov	r3, r0
 80050a4:	2b01      	cmp	r3, #1
 80050a6:	d106      	bne.n	80050b6 <HAL_RCC_GetSysClockFreq+0x7a>
 80050a8:	f7ff f977 	bl	800439a <LL_RCC_MSI_GetRange>
 80050ac:	4603      	mov	r3, r0
 80050ae:	091b      	lsrs	r3, r3, #4
 80050b0:	f003 030f 	and.w	r3, r3, #15
 80050b4:	e005      	b.n	80050c2 <HAL_RCC_GetSysClockFreq+0x86>
 80050b6:	f7ff f97b 	bl	80043b0 <LL_RCC_MSI_GetRangeAfterStandby>
 80050ba:	4603      	mov	r3, r0
 80050bc:	091b      	lsrs	r3, r3, #4
 80050be:	f003 030f 	and.w	r3, r3, #15
 80050c2:	4a2b      	ldr	r2, [pc, #172]	; (8005170 <HAL_RCC_GetSysClockFreq+0x134>)
 80050c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050c8:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d115      	bne.n	80050fc <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 80050d0:	693b      	ldr	r3, [r7, #16]
 80050d2:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80050d4:	e012      	b.n	80050fc <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80050d6:	68bb      	ldr	r3, [r7, #8]
 80050d8:	2b04      	cmp	r3, #4
 80050da:	d102      	bne.n	80050e2 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80050dc:	4b25      	ldr	r3, [pc, #148]	; (8005174 <HAL_RCC_GetSysClockFreq+0x138>)
 80050de:	617b      	str	r3, [r7, #20]
 80050e0:	e00c      	b.n	80050fc <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80050e2:	68bb      	ldr	r3, [r7, #8]
 80050e4:	2b08      	cmp	r3, #8
 80050e6:	d109      	bne.n	80050fc <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80050e8:	f7ff f85a 	bl	80041a0 <LL_RCC_HSE_IsEnabledDiv2>
 80050ec:	4603      	mov	r3, r0
 80050ee:	2b01      	cmp	r3, #1
 80050f0:	d102      	bne.n	80050f8 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80050f2:	4b20      	ldr	r3, [pc, #128]	; (8005174 <HAL_RCC_GetSysClockFreq+0x138>)
 80050f4:	617b      	str	r3, [r7, #20]
 80050f6:	e001      	b.n	80050fc <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80050f8:	4b1f      	ldr	r3, [pc, #124]	; (8005178 <HAL_RCC_GetSysClockFreq+0x13c>)
 80050fa:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80050fc:	f7ff f98b 	bl	8004416 <LL_RCC_GetSysClkSource>
 8005100:	4603      	mov	r3, r0
 8005102:	2b0c      	cmp	r3, #12
 8005104:	d12f      	bne.n	8005166 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8005106:	f7ff fa72 	bl	80045ee <LL_RCC_PLL_GetMainSource>
 800510a:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2b02      	cmp	r3, #2
 8005110:	d003      	beq.n	800511a <HAL_RCC_GetSysClockFreq+0xde>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2b03      	cmp	r3, #3
 8005116:	d003      	beq.n	8005120 <HAL_RCC_GetSysClockFreq+0xe4>
 8005118:	e00d      	b.n	8005136 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800511a:	4b16      	ldr	r3, [pc, #88]	; (8005174 <HAL_RCC_GetSysClockFreq+0x138>)
 800511c:	60fb      	str	r3, [r7, #12]
        break;
 800511e:	e00d      	b.n	800513c <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005120:	f7ff f83e 	bl	80041a0 <LL_RCC_HSE_IsEnabledDiv2>
 8005124:	4603      	mov	r3, r0
 8005126:	2b01      	cmp	r3, #1
 8005128:	d102      	bne.n	8005130 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800512a:	4b12      	ldr	r3, [pc, #72]	; (8005174 <HAL_RCC_GetSysClockFreq+0x138>)
 800512c:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800512e:	e005      	b.n	800513c <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8005130:	4b11      	ldr	r3, [pc, #68]	; (8005178 <HAL_RCC_GetSysClockFreq+0x13c>)
 8005132:	60fb      	str	r3, [r7, #12]
        break;
 8005134:	e002      	b.n	800513c <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8005136:	693b      	ldr	r3, [r7, #16]
 8005138:	60fb      	str	r3, [r7, #12]
        break;
 800513a:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800513c:	f7ff fa35 	bl	80045aa <LL_RCC_PLL_GetN>
 8005140:	4602      	mov	r2, r0
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	fb03 f402 	mul.w	r4, r3, r2
 8005148:	f7ff fa46 	bl	80045d8 <LL_RCC_PLL_GetDivider>
 800514c:	4603      	mov	r3, r0
 800514e:	091b      	lsrs	r3, r3, #4
 8005150:	3301      	adds	r3, #1
 8005152:	fbb4 f4f3 	udiv	r4, r4, r3
 8005156:	f7ff fa34 	bl	80045c2 <LL_RCC_PLL_GetR>
 800515a:	4603      	mov	r3, r0
 800515c:	0f5b      	lsrs	r3, r3, #29
 800515e:	3301      	adds	r3, #1
 8005160:	fbb4 f3f3 	udiv	r3, r4, r3
 8005164:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8005166:	697b      	ldr	r3, [r7, #20]
}
 8005168:	4618      	mov	r0, r3
 800516a:	371c      	adds	r7, #28
 800516c:	46bd      	mov	sp, r7
 800516e:	bd90      	pop	{r4, r7, pc}
 8005170:	0800cdec 	.word	0x0800cdec
 8005174:	00f42400 	.word	0x00f42400
 8005178:	01e84800 	.word	0x01e84800

0800517c <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800517c:	b598      	push	{r3, r4, r7, lr}
 800517e:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8005180:	f7ff ff5c 	bl	800503c <HAL_RCC_GetSysClockFreq>
 8005184:	4604      	mov	r4, r0
 8005186:	f7ff f9b5 	bl	80044f4 <LL_RCC_GetAHBPrescaler>
 800518a:	4603      	mov	r3, r0
 800518c:	091b      	lsrs	r3, r3, #4
 800518e:	f003 030f 	and.w	r3, r3, #15
 8005192:	4a03      	ldr	r2, [pc, #12]	; (80051a0 <HAL_RCC_GetHCLKFreq+0x24>)
 8005194:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005198:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800519c:	4618      	mov	r0, r3
 800519e:	bd98      	pop	{r3, r4, r7, pc}
 80051a0:	0800cd8c 	.word	0x0800cd8c

080051a4 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80051a4:	b598      	push	{r3, r4, r7, lr}
 80051a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80051a8:	f7ff ffe8 	bl	800517c <HAL_RCC_GetHCLKFreq>
 80051ac:	4604      	mov	r4, r0
 80051ae:	f7ff f9b9 	bl	8004524 <LL_RCC_GetAPB1Prescaler>
 80051b2:	4603      	mov	r3, r0
 80051b4:	0a1b      	lsrs	r3, r3, #8
 80051b6:	4a03      	ldr	r2, [pc, #12]	; (80051c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80051b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051bc:	fa24 f303 	lsr.w	r3, r4, r3
}
 80051c0:	4618      	mov	r0, r3
 80051c2:	bd98      	pop	{r3, r4, r7, pc}
 80051c4:	0800cdcc 	.word	0x0800cdcc

080051c8 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80051c8:	b598      	push	{r3, r4, r7, lr}
 80051ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80051cc:	f7ff ffd6 	bl	800517c <HAL_RCC_GetHCLKFreq>
 80051d0:	4604      	mov	r4, r0
 80051d2:	f7ff f9b2 	bl	800453a <LL_RCC_GetAPB2Prescaler>
 80051d6:	4603      	mov	r3, r0
 80051d8:	0adb      	lsrs	r3, r3, #11
 80051da:	4a03      	ldr	r2, [pc, #12]	; (80051e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80051dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051e0:	fa24 f303 	lsr.w	r3, r4, r3
}
 80051e4:	4618      	mov	r0, r3
 80051e6:	bd98      	pop	{r3, r4, r7, pc}
 80051e8:	0800cdcc 	.word	0x0800cdcc

080051ec <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80051ec:	b590      	push	{r4, r7, lr}
 80051ee:	b085      	sub	sp, #20
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	091b      	lsrs	r3, r3, #4
 80051f8:	f003 030f 	and.w	r3, r3, #15
 80051fc:	4a10      	ldr	r2, [pc, #64]	; (8005240 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 80051fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005202:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8005204:	f7ff f981 	bl	800450a <LL_RCC_GetAHB3Prescaler>
 8005208:	4603      	mov	r3, r0
 800520a:	091b      	lsrs	r3, r3, #4
 800520c:	f003 030f 	and.w	r3, r3, #15
 8005210:	4a0c      	ldr	r2, [pc, #48]	; (8005244 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8005212:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005216:	68fa      	ldr	r2, [r7, #12]
 8005218:	fbb2 f3f3 	udiv	r3, r2, r3
 800521c:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800521e:	68bb      	ldr	r3, [r7, #8]
 8005220:	4a09      	ldr	r2, [pc, #36]	; (8005248 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8005222:	fba2 2303 	umull	r2, r3, r2, r3
 8005226:	0c9c      	lsrs	r4, r3, #18
 8005228:	f7fe ff80 	bl	800412c <HAL_PWREx_GetVoltageRange>
 800522c:	4603      	mov	r3, r0
 800522e:	4619      	mov	r1, r3
 8005230:	4620      	mov	r0, r4
 8005232:	f000 f80b 	bl	800524c <RCC_SetFlashLatency>
 8005236:	4603      	mov	r3, r0
}
 8005238:	4618      	mov	r0, r3
 800523a:	3714      	adds	r7, #20
 800523c:	46bd      	mov	sp, r7
 800523e:	bd90      	pop	{r4, r7, pc}
 8005240:	0800cdec 	.word	0x0800cdec
 8005244:	0800cd8c 	.word	0x0800cd8c
 8005248:	431bde83 	.word	0x431bde83

0800524c <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b08e      	sub	sp, #56	; 0x38
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
 8005254:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8005256:	4a3a      	ldr	r2, [pc, #232]	; (8005340 <RCC_SetFlashLatency+0xf4>)
 8005258:	f107 0320 	add.w	r3, r7, #32
 800525c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005260:	6018      	str	r0, [r3, #0]
 8005262:	3304      	adds	r3, #4
 8005264:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8005266:	4a37      	ldr	r2, [pc, #220]	; (8005344 <RCC_SetFlashLatency+0xf8>)
 8005268:	f107 0318 	add.w	r3, r7, #24
 800526c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005270:	6018      	str	r0, [r3, #0]
 8005272:	3304      	adds	r3, #4
 8005274:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8005276:	4a34      	ldr	r2, [pc, #208]	; (8005348 <RCC_SetFlashLatency+0xfc>)
 8005278:	f107 030c 	add.w	r3, r7, #12
 800527c:	ca07      	ldmia	r2, {r0, r1, r2}
 800527e:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8005282:	2300      	movs	r3, #0
 8005284:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800528c:	d11b      	bne.n	80052c6 <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800528e:	2300      	movs	r3, #0
 8005290:	633b      	str	r3, [r7, #48]	; 0x30
 8005292:	e014      	b.n	80052be <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8005294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005296:	005b      	lsls	r3, r3, #1
 8005298:	3338      	adds	r3, #56	; 0x38
 800529a:	443b      	add	r3, r7
 800529c:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80052a0:	461a      	mov	r2, r3
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d807      	bhi.n	80052b8 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80052a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052aa:	009b      	lsls	r3, r3, #2
 80052ac:	3338      	adds	r3, #56	; 0x38
 80052ae:	443b      	add	r3, r7
 80052b0:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80052b4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80052b6:	e021      	b.n	80052fc <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80052b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052ba:	3301      	adds	r3, #1
 80052bc:	633b      	str	r3, [r7, #48]	; 0x30
 80052be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052c0:	2b02      	cmp	r3, #2
 80052c2:	d9e7      	bls.n	8005294 <RCC_SetFlashLatency+0x48>
 80052c4:	e01a      	b.n	80052fc <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80052c6:	2300      	movs	r3, #0
 80052c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80052ca:	e014      	b.n	80052f6 <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80052cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052ce:	005b      	lsls	r3, r3, #1
 80052d0:	3338      	adds	r3, #56	; 0x38
 80052d2:	443b      	add	r3, r7
 80052d4:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 80052d8:	461a      	mov	r2, r3
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	4293      	cmp	r3, r2
 80052de:	d807      	bhi.n	80052f0 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80052e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052e2:	009b      	lsls	r3, r3, #2
 80052e4:	3338      	adds	r3, #56	; 0x38
 80052e6:	443b      	add	r3, r7
 80052e8:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80052ec:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80052ee:	e005      	b.n	80052fc <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80052f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052f2:	3301      	adds	r3, #1
 80052f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80052f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052f8:	2b02      	cmp	r3, #2
 80052fa:	d9e7      	bls.n	80052cc <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80052fc:	4b13      	ldr	r3, [pc, #76]	; (800534c <RCC_SetFlashLatency+0x100>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f023 0207 	bic.w	r2, r3, #7
 8005304:	4911      	ldr	r1, [pc, #68]	; (800534c <RCC_SetFlashLatency+0x100>)
 8005306:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005308:	4313      	orrs	r3, r2
 800530a:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800530c:	f7fd fbd0 	bl	8002ab0 <HAL_GetTick>
 8005310:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8005312:	e008      	b.n	8005326 <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005314:	f7fd fbcc 	bl	8002ab0 <HAL_GetTick>
 8005318:	4602      	mov	r2, r0
 800531a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800531c:	1ad3      	subs	r3, r2, r3
 800531e:	2b02      	cmp	r3, #2
 8005320:	d901      	bls.n	8005326 <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 8005322:	2303      	movs	r3, #3
 8005324:	e007      	b.n	8005336 <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8005326:	4b09      	ldr	r3, [pc, #36]	; (800534c <RCC_SetFlashLatency+0x100>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f003 0307 	and.w	r3, r3, #7
 800532e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005330:	429a      	cmp	r2, r3
 8005332:	d1ef      	bne.n	8005314 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8005334:	2300      	movs	r3, #0
}
 8005336:	4618      	mov	r0, r3
 8005338:	3738      	adds	r7, #56	; 0x38
 800533a:	46bd      	mov	sp, r7
 800533c:	bd80      	pop	{r7, pc}
 800533e:	bf00      	nop
 8005340:	0800cd4c 	.word	0x0800cd4c
 8005344:	0800cd54 	.word	0x0800cd54
 8005348:	0800cd5c 	.word	0x0800cd5c
 800534c:	58004000 	.word	0x58004000

08005350 <LL_RCC_LSE_IsReady>:
{
 8005350:	b480      	push	{r7}
 8005352:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005354:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005358:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800535c:	f003 0302 	and.w	r3, r3, #2
 8005360:	2b02      	cmp	r3, #2
 8005362:	d101      	bne.n	8005368 <LL_RCC_LSE_IsReady+0x18>
 8005364:	2301      	movs	r3, #1
 8005366:	e000      	b.n	800536a <LL_RCC_LSE_IsReady+0x1a>
 8005368:	2300      	movs	r3, #0
}
 800536a:	4618      	mov	r0, r3
 800536c:	46bd      	mov	sp, r7
 800536e:	bc80      	pop	{r7}
 8005370:	4770      	bx	lr

08005372 <LL_RCC_SetUSARTClockSource>:
{
 8005372:	b480      	push	{r7}
 8005374:	b083      	sub	sp, #12
 8005376:	af00      	add	r7, sp, #0
 8005378:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 800537a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800537e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	0c1b      	lsrs	r3, r3, #16
 8005386:	43db      	mvns	r3, r3
 8005388:	401a      	ands	r2, r3
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	b29b      	uxth	r3, r3
 800538e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005392:	4313      	orrs	r3, r2
 8005394:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005398:	bf00      	nop
 800539a:	370c      	adds	r7, #12
 800539c:	46bd      	mov	sp, r7
 800539e:	bc80      	pop	{r7}
 80053a0:	4770      	bx	lr

080053a2 <LL_RCC_SetI2SClockSource>:
{
 80053a2:	b480      	push	{r7}
 80053a4:	b083      	sub	sp, #12
 80053a6:	af00      	add	r7, sp, #0
 80053a8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 80053aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053b2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80053b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	4313      	orrs	r3, r2
 80053be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80053c2:	bf00      	nop
 80053c4:	370c      	adds	r7, #12
 80053c6:	46bd      	mov	sp, r7
 80053c8:	bc80      	pop	{r7}
 80053ca:	4770      	bx	lr

080053cc <LL_RCC_SetLPUARTClockSource>:
{
 80053cc:	b480      	push	{r7}
 80053ce:	b083      	sub	sp, #12
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80053d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053dc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80053e0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	4313      	orrs	r3, r2
 80053e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80053ec:	bf00      	nop
 80053ee:	370c      	adds	r7, #12
 80053f0:	46bd      	mov	sp, r7
 80053f2:	bc80      	pop	{r7}
 80053f4:	4770      	bx	lr

080053f6 <LL_RCC_SetI2CClockSource>:
{
 80053f6:	b480      	push	{r7}
 80053f8:	b083      	sub	sp, #12
 80053fa:	af00      	add	r7, sp, #0
 80053fc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80053fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005402:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	091b      	lsrs	r3, r3, #4
 800540a:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800540e:	43db      	mvns	r3, r3
 8005410:	401a      	ands	r2, r3
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	011b      	lsls	r3, r3, #4
 8005416:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800541a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800541e:	4313      	orrs	r3, r2
 8005420:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005424:	bf00      	nop
 8005426:	370c      	adds	r7, #12
 8005428:	46bd      	mov	sp, r7
 800542a:	bc80      	pop	{r7}
 800542c:	4770      	bx	lr

0800542e <LL_RCC_SetLPTIMClockSource>:
{
 800542e:	b480      	push	{r7}
 8005430:	b083      	sub	sp, #12
 8005432:	af00      	add	r7, sp, #0
 8005434:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8005436:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800543a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	0c1b      	lsrs	r3, r3, #16
 8005442:	041b      	lsls	r3, r3, #16
 8005444:	43db      	mvns	r3, r3
 8005446:	401a      	ands	r2, r3
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	041b      	lsls	r3, r3, #16
 800544c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005450:	4313      	orrs	r3, r2
 8005452:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005456:	bf00      	nop
 8005458:	370c      	adds	r7, #12
 800545a:	46bd      	mov	sp, r7
 800545c:	bc80      	pop	{r7}
 800545e:	4770      	bx	lr

08005460 <LL_RCC_SetRNGClockSource>:
{
 8005460:	b480      	push	{r7}
 8005462:	b083      	sub	sp, #12
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8005468:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800546c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005470:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8005474:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	4313      	orrs	r3, r2
 800547c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005480:	bf00      	nop
 8005482:	370c      	adds	r7, #12
 8005484:	46bd      	mov	sp, r7
 8005486:	bc80      	pop	{r7}
 8005488:	4770      	bx	lr

0800548a <LL_RCC_SetADCClockSource>:
{
 800548a:	b480      	push	{r7}
 800548c:	b083      	sub	sp, #12
 800548e:	af00      	add	r7, sp, #0
 8005490:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8005492:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005496:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800549a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800549e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	4313      	orrs	r3, r2
 80054a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80054aa:	bf00      	nop
 80054ac:	370c      	adds	r7, #12
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bc80      	pop	{r7}
 80054b2:	4770      	bx	lr

080054b4 <LL_RCC_SetRTCClockSource>:
{
 80054b4:	b480      	push	{r7}
 80054b6:	b083      	sub	sp, #12
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80054bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80054c8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	4313      	orrs	r3, r2
 80054d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80054d4:	bf00      	nop
 80054d6:	370c      	adds	r7, #12
 80054d8:	46bd      	mov	sp, r7
 80054da:	bc80      	pop	{r7}
 80054dc:	4770      	bx	lr

080054de <LL_RCC_GetRTCClockSource>:
{
 80054de:	b480      	push	{r7}
 80054e0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80054e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 80054ee:	4618      	mov	r0, r3
 80054f0:	46bd      	mov	sp, r7
 80054f2:	bc80      	pop	{r7}
 80054f4:	4770      	bx	lr

080054f6 <LL_RCC_ForceBackupDomainReset>:
{
 80054f6:	b480      	push	{r7}
 80054f8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80054fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005502:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005506:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800550a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800550e:	bf00      	nop
 8005510:	46bd      	mov	sp, r7
 8005512:	bc80      	pop	{r7}
 8005514:	4770      	bx	lr

08005516 <LL_RCC_ReleaseBackupDomainReset>:
{
 8005516:	b480      	push	{r7}
 8005518:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800551a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800551e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005522:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005526:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800552a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800552e:	bf00      	nop
 8005530:	46bd      	mov	sp, r7
 8005532:	bc80      	pop	{r7}
 8005534:	4770      	bx	lr
	...

08005538 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b086      	sub	sp, #24
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8005540:	2300      	movs	r3, #0
 8005542:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8005544:	2300      	movs	r3, #0
 8005546:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8005548:	2300      	movs	r3, #0
 800554a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005554:	2b00      	cmp	r3, #0
 8005556:	d058      	beq.n	800560a <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8005558:	f7fe fdda 	bl	8004110 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800555c:	f7fd faa8 	bl	8002ab0 <HAL_GetTick>
 8005560:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8005562:	e009      	b.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005564:	f7fd faa4 	bl	8002ab0 <HAL_GetTick>
 8005568:	4602      	mov	r2, r0
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	1ad3      	subs	r3, r2, r3
 800556e:	2b02      	cmp	r3, #2
 8005570:	d902      	bls.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8005572:	2303      	movs	r3, #3
 8005574:	74fb      	strb	r3, [r7, #19]
        break;
 8005576:	e006      	b.n	8005586 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8005578:	4b7b      	ldr	r3, [pc, #492]	; (8005768 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005580:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005584:	d1ee      	bne.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8005586:	7cfb      	ldrb	r3, [r7, #19]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d13c      	bne.n	8005606 <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 800558c:	f7ff ffa7 	bl	80054de <LL_RCC_GetRTCClockSource>
 8005590:	4602      	mov	r2, r0
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005596:	429a      	cmp	r2, r3
 8005598:	d00f      	beq.n	80055ba <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800559a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800559e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055a6:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80055a8:	f7ff ffa5 	bl	80054f6 <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 80055ac:	f7ff ffb3 	bl	8005516 <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80055b0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80055b4:	697b      	ldr	r3, [r7, #20]
 80055b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 80055ba:	697b      	ldr	r3, [r7, #20]
 80055bc:	f003 0302 	and.w	r3, r3, #2
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d014      	beq.n	80055ee <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055c4:	f7fd fa74 	bl	8002ab0 <HAL_GetTick>
 80055c8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 80055ca:	e00b      	b.n	80055e4 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055cc:	f7fd fa70 	bl	8002ab0 <HAL_GetTick>
 80055d0:	4602      	mov	r2, r0
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	1ad3      	subs	r3, r2, r3
 80055d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80055da:	4293      	cmp	r3, r2
 80055dc:	d902      	bls.n	80055e4 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 80055de:	2303      	movs	r3, #3
 80055e0:	74fb      	strb	r3, [r7, #19]
            break;
 80055e2:	e004      	b.n	80055ee <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 80055e4:	f7ff feb4 	bl	8005350 <LL_RCC_LSE_IsReady>
 80055e8:	4603      	mov	r3, r0
 80055ea:	2b01      	cmp	r3, #1
 80055ec:	d1ee      	bne.n	80055cc <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 80055ee:	7cfb      	ldrb	r3, [r7, #19]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d105      	bne.n	8005600 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055f8:	4618      	mov	r0, r3
 80055fa:	f7ff ff5b 	bl	80054b4 <LL_RCC_SetRTCClockSource>
 80055fe:	e004      	b.n	800560a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005600:	7cfb      	ldrb	r3, [r7, #19]
 8005602:	74bb      	strb	r3, [r7, #18]
 8005604:	e001      	b.n	800560a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005606:	7cfb      	ldrb	r3, [r7, #19]
 8005608:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f003 0301 	and.w	r3, r3, #1
 8005612:	2b00      	cmp	r3, #0
 8005614:	d004      	beq.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	685b      	ldr	r3, [r3, #4]
 800561a:	4618      	mov	r0, r3
 800561c:	f7ff fea9 	bl	8005372 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f003 0302 	and.w	r3, r3, #2
 8005628:	2b00      	cmp	r3, #0
 800562a:	d004      	beq.n	8005636 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	689b      	ldr	r3, [r3, #8]
 8005630:	4618      	mov	r0, r3
 8005632:	f7ff fe9e 	bl	8005372 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f003 0320 	and.w	r3, r3, #32
 800563e:	2b00      	cmp	r3, #0
 8005640:	d004      	beq.n	800564c <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	691b      	ldr	r3, [r3, #16]
 8005646:	4618      	mov	r0, r3
 8005648:	f7ff fec0 	bl	80053cc <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005654:	2b00      	cmp	r3, #0
 8005656:	d004      	beq.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6a1b      	ldr	r3, [r3, #32]
 800565c:	4618      	mov	r0, r3
 800565e:	f7ff fee6 	bl	800542e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800566a:	2b00      	cmp	r3, #0
 800566c:	d004      	beq.n	8005678 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005672:	4618      	mov	r0, r3
 8005674:	f7ff fedb 	bl	800542e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005680:	2b00      	cmp	r3, #0
 8005682:	d004      	beq.n	800568e <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005688:	4618      	mov	r0, r3
 800568a:	f7ff fed0 	bl	800542e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005696:	2b00      	cmp	r3, #0
 8005698:	d004      	beq.n	80056a4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	695b      	ldr	r3, [r3, #20]
 800569e:	4618      	mov	r0, r3
 80056a0:	f7ff fea9 	bl	80053f6 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d004      	beq.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	699b      	ldr	r3, [r3, #24]
 80056b4:	4618      	mov	r0, r3
 80056b6:	f7ff fe9e 	bl	80053f6 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d004      	beq.n	80056d0 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	69db      	ldr	r3, [r3, #28]
 80056ca:	4618      	mov	r0, r3
 80056cc:	f7ff fe93 	bl	80053f6 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f003 0310 	and.w	r3, r3, #16
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d011      	beq.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	68db      	ldr	r3, [r3, #12]
 80056e0:	4618      	mov	r0, r3
 80056e2:	f7ff fe5e 	bl	80053a2 <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	68db      	ldr	r3, [r3, #12]
 80056ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056ee:	d107      	bne.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 80056f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056f4:	68db      	ldr	r3, [r3, #12]
 80056f6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80056fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80056fe:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005708:	2b00      	cmp	r3, #0
 800570a:	d010      	beq.n	800572e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005710:	4618      	mov	r0, r3
 8005712:	f7ff fea5 	bl	8005460 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800571a:	2b00      	cmp	r3, #0
 800571c:	d107      	bne.n	800572e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800571e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005722:	68db      	ldr	r3, [r3, #12]
 8005724:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005728:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800572c:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005736:	2b00      	cmp	r3, #0
 8005738:	d011      	beq.n	800575e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800573e:	4618      	mov	r0, r3
 8005740:	f7ff fea3 	bl	800548a <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005748:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800574c:	d107      	bne.n	800575e <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800574e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005752:	68db      	ldr	r3, [r3, #12]
 8005754:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005758:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800575c:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 800575e:	7cbb      	ldrb	r3, [r7, #18]
}
 8005760:	4618      	mov	r0, r3
 8005762:	3718      	adds	r7, #24
 8005764:	46bd      	mov	sp, r7
 8005766:	bd80      	pop	{r7, pc}
 8005768:	58000400 	.word	0x58000400

0800576c <LL_PWR_SetRadioBusyTrigger>:
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_NONE
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_WU_IT
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRadioBusyTrigger(uint32_t RadioBusyTrigger)
{
 800576c:	b480      	push	{r7}
 800576e:	b083      	sub	sp, #12
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 8005774:	4b06      	ldr	r3, [pc, #24]	; (8005790 <LL_PWR_SetRadioBusyTrigger+0x24>)
 8005776:	689b      	ldr	r3, [r3, #8]
 8005778:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800577c:	4904      	ldr	r1, [pc, #16]	; (8005790 <LL_PWR_SetRadioBusyTrigger+0x24>)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	4313      	orrs	r3, r2
 8005782:	608b      	str	r3, [r1, #8]
}
 8005784:	bf00      	nop
 8005786:	370c      	adds	r7, #12
 8005788:	46bd      	mov	sp, r7
 800578a:	bc80      	pop	{r7}
 800578c:	4770      	bx	lr
 800578e:	bf00      	nop
 8005790:	58000400 	.word	0x58000400

08005794 <LL_PWR_UnselectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level high.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_UnselectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_UnselectSUBGHZSPI_NSS(void)
{
 8005794:	b480      	push	{r7}
 8005796:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8005798:	4b05      	ldr	r3, [pc, #20]	; (80057b0 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 800579a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800579e:	4a04      	ldr	r2, [pc, #16]	; (80057b0 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 80057a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80057a8:	bf00      	nop
 80057aa:	46bd      	mov	sp, r7
 80057ac:	bc80      	pop	{r7}
 80057ae:	4770      	bx	lr
 80057b0:	58000400 	.word	0x58000400

080057b4 <LL_PWR_SelectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level low.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_SelectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SelectSUBGHZSPI_NSS(void)
{
 80057b4:	b480      	push	{r7}
 80057b6:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80057b8:	4b05      	ldr	r3, [pc, #20]	; (80057d0 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 80057ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057be:	4a04      	ldr	r2, [pc, #16]	; (80057d0 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 80057c0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80057c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80057c8:	bf00      	nop
 80057ca:	46bd      	mov	sp, r7
 80057cc:	bc80      	pop	{r7}
 80057ce:	4770      	bx	lr
 80057d0:	58000400 	.word	0x58000400

080057d4 <LL_PWR_ClearFlag_RFBUSY>:
  * @brief  Clear radio busy flag
  * @rmtoll SCR          CRFBUSYF      LL_PWR_ClearFlag_RFBUSY
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_RFBUSY(void)
{
 80057d4:	b480      	push	{r7}
 80057d6:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 80057d8:	4b03      	ldr	r3, [pc, #12]	; (80057e8 <LL_PWR_ClearFlag_RFBUSY+0x14>)
 80057da:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80057de:	619a      	str	r2, [r3, #24]
}
 80057e0:	bf00      	nop
 80057e2:	46bd      	mov	sp, r7
 80057e4:	bc80      	pop	{r7}
 80057e6:	4770      	bx	lr
 80057e8:	58000400 	.word	0x58000400

080057ec <LL_PWR_IsActiveFlag_RFBUSYS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYS       LL_PWR_IsActiveFlag_RFBUSYS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYS(void)
{
 80057ec:	b480      	push	{r7}
 80057ee:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 80057f0:	4b06      	ldr	r3, [pc, #24]	; (800580c <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 80057f2:	695b      	ldr	r3, [r3, #20]
 80057f4:	f003 0302 	and.w	r3, r3, #2
 80057f8:	2b02      	cmp	r3, #2
 80057fa:	d101      	bne.n	8005800 <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 80057fc:	2301      	movs	r3, #1
 80057fe:	e000      	b.n	8005802 <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 8005800:	2300      	movs	r3, #0
}
 8005802:	4618      	mov	r0, r3
 8005804:	46bd      	mov	sp, r7
 8005806:	bc80      	pop	{r7}
 8005808:	4770      	bx	lr
 800580a:	bf00      	nop
 800580c:	58000400 	.word	0x58000400

08005810 <LL_PWR_IsActiveFlag_RFBUSYMS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYMS      LL_PWR_IsActiveFlag_RFBUSYMS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYMS(void)
{
 8005810:	b480      	push	{r7}
 8005812:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8005814:	4b06      	ldr	r3, [pc, #24]	; (8005830 <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 8005816:	695b      	ldr	r3, [r3, #20]
 8005818:	f003 0304 	and.w	r3, r3, #4
 800581c:	2b04      	cmp	r3, #4
 800581e:	d101      	bne.n	8005824 <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 8005820:	2301      	movs	r3, #1
 8005822:	e000      	b.n	8005826 <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 8005824:	2300      	movs	r3, #0
}
 8005826:	4618      	mov	r0, r3
 8005828:	46bd      	mov	sp, r7
 800582a:	bc80      	pop	{r7}
 800582c:	4770      	bx	lr
 800582e:	bf00      	nop
 8005830:	58000400 	.word	0x58000400

08005834 <LL_RCC_RF_DisableReset>:
{
 8005834:	b480      	push	{r7}
 8005836:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8005838:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800583c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005840:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005844:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005848:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800584c:	bf00      	nop
 800584e:	46bd      	mov	sp, r7
 8005850:	bc80      	pop	{r7}
 8005852:	4770      	bx	lr

08005854 <LL_RCC_IsRFUnderReset>:
{
 8005854:	b480      	push	{r7}
 8005856:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8005858:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800585c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005860:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005864:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005868:	d101      	bne.n	800586e <LL_RCC_IsRFUnderReset+0x1a>
 800586a:	2301      	movs	r3, #1
 800586c:	e000      	b.n	8005870 <LL_RCC_IsRFUnderReset+0x1c>
 800586e:	2300      	movs	r3, #0
}
 8005870:	4618      	mov	r0, r3
 8005872:	46bd      	mov	sp, r7
 8005874:	bc80      	pop	{r7}
 8005876:	4770      	bx	lr

08005878 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8005878:	b480      	push	{r7}
 800587a:	b083      	sub	sp, #12
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8005880:	4b06      	ldr	r3, [pc, #24]	; (800589c <LL_EXTI_EnableIT_32_63+0x24>)
 8005882:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8005886:	4905      	ldr	r1, [pc, #20]	; (800589c <LL_EXTI_EnableIT_32_63+0x24>)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	4313      	orrs	r3, r2
 800588c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8005890:	bf00      	nop
 8005892:	370c      	adds	r7, #12
 8005894:	46bd      	mov	sp, r7
 8005896:	bc80      	pop	{r7}
 8005898:	4770      	bx	lr
 800589a:	bf00      	nop
 800589c:	58000800 	.word	0x58000800

080058a0 <HAL_SUBGHZ_Init>:
  *         set the state to HAL_SUBGHZ_STATE_RESET_RF_READY with __HAL_SUBGHZ_RESET_HANDLE_STATE_RF_READY
  *         to avoid the reset of Radio peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b084      	sub	sp, #16
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  HAL_SUBGHZ_StateTypeDef subghz_state;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d103      	bne.n	80058b6 <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 80058ae:	2301      	movs	r3, #1
 80058b0:	73fb      	strb	r3, [r7, #15]
    return status;
 80058b2:	7bfb      	ldrb	r3, [r7, #15]
 80058b4:	e052      	b.n	800595c <HAL_SUBGHZ_Init+0xbc>
  }
  else
  {
    status = HAL_OK;
 80058b6:	2300      	movs	r3, #0
 80058b8:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  subghz_state = hsubghz->State;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	799b      	ldrb	r3, [r3, #6]
 80058be:	73bb      	strb	r3, [r7, #14]
  if ((subghz_state == HAL_SUBGHZ_STATE_RESET) ||
 80058c0:	7bbb      	ldrb	r3, [r7, #14]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d002      	beq.n	80058cc <HAL_SUBGHZ_Init+0x2c>
 80058c6:	7bbb      	ldrb	r3, [r7, #14]
 80058c8:	2b03      	cmp	r3, #3
 80058ca:	d109      	bne.n	80058e0 <HAL_SUBGHZ_Init+0x40>
      (subghz_state == HAL_SUBGHZ_STATE_RESET_RF_READY))
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2200      	movs	r2, #0
 80058d0:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 80058d2:	6878      	ldr	r0, [r7, #4]
 80058d4:	f7fd f8d2 	bl	8002a7c <HAL_SUBGHZ_MspInit>
#if defined(CM0PLUS)
    /* Enable EXTI 44 : Radio IRQ ITs for CPU2 */
    LL_C2_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
#else
    /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
    LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 80058d8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80058dc:	f7ff ffcc 	bl	8005878 <LL_EXTI_EnableIT_32_63>
#endif /* CM0PLUS */
  }

  if (subghz_state == HAL_SUBGHZ_STATE_RESET)
 80058e0:	7bbb      	ldrb	r3, [r7, #14]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d126      	bne.n	8005934 <HAL_SUBGHZ_Init+0x94>
  {
    /* Reinitialize Radio peripheral only if SUBGHZ is in full RESET state */
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2202      	movs	r2, #2
 80058ea:	719a      	strb	r2, [r3, #6]

    /* De-asserts the reset signal of the Radio peripheral */
    LL_RCC_RF_DisableReset();
 80058ec:	f7ff ffa2 	bl	8005834 <LL_RCC_RF_DisableReset>

    /* Verify that Radio in reset status flag is set */
    count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80058f0:	4b1c      	ldr	r3, [pc, #112]	; (8005964 <HAL_SUBGHZ_Init+0xc4>)
 80058f2:	681a      	ldr	r2, [r3, #0]
 80058f4:	4613      	mov	r3, r2
 80058f6:	00db      	lsls	r3, r3, #3
 80058f8:	1a9b      	subs	r3, r3, r2
 80058fa:	009b      	lsls	r3, r3, #2
 80058fc:	0cdb      	lsrs	r3, r3, #19
 80058fe:	2264      	movs	r2, #100	; 0x64
 8005900:	fb02 f303 	mul.w	r3, r2, r3
 8005904:	60bb      	str	r3, [r7, #8]

    do
    {
      if (count == 0U)
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d105      	bne.n	8005918 <HAL_SUBGHZ_Init+0x78>
      {
        status  = HAL_ERROR;
 800590c:	2301      	movs	r3, #1
 800590e:	73fb      	strb	r3, [r7, #15]
        hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2201      	movs	r2, #1
 8005914:	609a      	str	r2, [r3, #8]
        break;
 8005916:	e007      	b.n	8005928 <HAL_SUBGHZ_Init+0x88>
      }
      count--;
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	3b01      	subs	r3, #1
 800591c:	60bb      	str	r3, [r7, #8]
    } while (LL_RCC_IsRFUnderReset() != 0UL);
 800591e:	f7ff ff99 	bl	8005854 <LL_RCC_IsRFUnderReset>
 8005922:	4603      	mov	r3, r0
 8005924:	2b00      	cmp	r3, #0
 8005926:	d1ee      	bne.n	8005906 <HAL_SUBGHZ_Init+0x66>

    /* Asserts the reset signal of the Radio peripheral */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8005928:	f7ff ff34 	bl	8005794 <LL_PWR_UnselectSUBGHZSPI_NSS>
#if defined(CM0PLUS)
    /* Enable wakeup signal of the Radio peripheral */
    LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
    /* Enable wakeup signal of the Radio peripheral */
    LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 800592c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8005930:	f7ff ff1c 	bl	800576c <LL_PWR_SetRadioBusyTrigger>
#endif /* CM0PLUS */
  }

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 8005934:	f7ff ff4e 	bl	80057d4 <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 8005938:	7bfb      	ldrb	r3, [r7, #15]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d10a      	bne.n	8005954 <HAL_SUBGHZ_Init+0xb4>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	4618      	mov	r0, r3
 8005944:	f000 faac 	bl	8005ea0 <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2201      	movs	r2, #1
 800594c:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2200      	movs	r2, #0
 8005952:	609a      	str	r2, [r3, #8]
  }

  hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2201      	movs	r2, #1
 8005958:	719a      	strb	r2, [r3, #6]

  return status;
 800595a:	7bfb      	ldrb	r3, [r7, #15]
}
 800595c:	4618      	mov	r0, r3
 800595e:	3710      	adds	r7, #16
 8005960:	46bd      	mov	sp, r7
 8005962:	bd80      	pop	{r7, pc}
 8005964:	2000000c 	.word	0x2000000c

08005968 <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b086      	sub	sp, #24
 800596c:	af00      	add	r7, sp, #0
 800596e:	60f8      	str	r0, [r7, #12]
 8005970:	607a      	str	r2, [r7, #4]
 8005972:	461a      	mov	r2, r3
 8005974:	460b      	mov	r3, r1
 8005976:	817b      	strh	r3, [r7, #10]
 8005978:	4613      	mov	r3, r2
 800597a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	799b      	ldrb	r3, [r3, #6]
 8005980:	b2db      	uxtb	r3, r3
 8005982:	2b01      	cmp	r3, #1
 8005984:	d14a      	bne.n	8005a1c <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	795b      	ldrb	r3, [r3, #5]
 800598a:	2b01      	cmp	r3, #1
 800598c:	d101      	bne.n	8005992 <HAL_SUBGHZ_WriteRegisters+0x2a>
 800598e:	2302      	movs	r3, #2
 8005990:	e045      	b.n	8005a1e <HAL_SUBGHZ_WriteRegisters+0xb6>
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	2201      	movs	r2, #1
 8005996:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	2202      	movs	r2, #2
 800599c:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800599e:	68f8      	ldr	r0, [r7, #12]
 80059a0:	f000 fb4c 	bl	800603c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80059a4:	f7ff ff06 	bl	80057b4 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 80059a8:	210d      	movs	r1, #13
 80059aa:	68f8      	ldr	r0, [r7, #12]
 80059ac:	f000 fa98 	bl	8005ee0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 80059b0:	897b      	ldrh	r3, [r7, #10]
 80059b2:	0a1b      	lsrs	r3, r3, #8
 80059b4:	b29b      	uxth	r3, r3
 80059b6:	b2db      	uxtb	r3, r3
 80059b8:	4619      	mov	r1, r3
 80059ba:	68f8      	ldr	r0, [r7, #12]
 80059bc:	f000 fa90 	bl	8005ee0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 80059c0:	897b      	ldrh	r3, [r7, #10]
 80059c2:	b2db      	uxtb	r3, r3
 80059c4:	4619      	mov	r1, r3
 80059c6:	68f8      	ldr	r0, [r7, #12]
 80059c8:	f000 fa8a 	bl	8005ee0 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80059cc:	2300      	movs	r3, #0
 80059ce:	82bb      	strh	r3, [r7, #20]
 80059d0:	e00a      	b.n	80059e8 <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 80059d2:	8abb      	ldrh	r3, [r7, #20]
 80059d4:	687a      	ldr	r2, [r7, #4]
 80059d6:	4413      	add	r3, r2
 80059d8:	781b      	ldrb	r3, [r3, #0]
 80059da:	4619      	mov	r1, r3
 80059dc:	68f8      	ldr	r0, [r7, #12]
 80059de:	f000 fa7f 	bl	8005ee0 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80059e2:	8abb      	ldrh	r3, [r7, #20]
 80059e4:	3301      	adds	r3, #1
 80059e6:	82bb      	strh	r3, [r7, #20]
 80059e8:	8aba      	ldrh	r2, [r7, #20]
 80059ea:	893b      	ldrh	r3, [r7, #8]
 80059ec:	429a      	cmp	r2, r3
 80059ee:	d3f0      	bcc.n	80059d2 <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80059f0:	f7ff fed0 	bl	8005794 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80059f4:	68f8      	ldr	r0, [r7, #12]
 80059f6:	f000 fb45 	bl	8006084 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	689b      	ldr	r3, [r3, #8]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d002      	beq.n	8005a08 <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 8005a02:	2301      	movs	r3, #1
 8005a04:	75fb      	strb	r3, [r7, #23]
 8005a06:	e001      	b.n	8005a0c <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 8005a08:	2300      	movs	r3, #0
 8005a0a:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	2201      	movs	r2, #1
 8005a10:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	2200      	movs	r2, #0
 8005a16:	715a      	strb	r2, [r3, #5]

    return status;
 8005a18:	7dfb      	ldrb	r3, [r7, #23]
 8005a1a:	e000      	b.n	8005a1e <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8005a1c:	2302      	movs	r3, #2
  }
}
 8005a1e:	4618      	mov	r0, r3
 8005a20:	3718      	adds	r7, #24
 8005a22:	46bd      	mov	sp, r7
 8005a24:	bd80      	pop	{r7, pc}

08005a26 <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 8005a26:	b580      	push	{r7, lr}
 8005a28:	b088      	sub	sp, #32
 8005a2a:	af00      	add	r7, sp, #0
 8005a2c:	60f8      	str	r0, [r7, #12]
 8005a2e:	607a      	str	r2, [r7, #4]
 8005a30:	461a      	mov	r2, r3
 8005a32:	460b      	mov	r3, r1
 8005a34:	817b      	strh	r3, [r7, #10]
 8005a36:	4613      	mov	r3, r2
 8005a38:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	799b      	ldrb	r3, [r3, #6]
 8005a42:	b2db      	uxtb	r3, r3
 8005a44:	2b01      	cmp	r3, #1
 8005a46:	d14a      	bne.n	8005ade <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	795b      	ldrb	r3, [r3, #5]
 8005a4c:	2b01      	cmp	r3, #1
 8005a4e:	d101      	bne.n	8005a54 <HAL_SUBGHZ_ReadRegisters+0x2e>
 8005a50:	2302      	movs	r3, #2
 8005a52:	e045      	b.n	8005ae0 <HAL_SUBGHZ_ReadRegisters+0xba>
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	2201      	movs	r2, #1
 8005a58:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8005a5a:	68f8      	ldr	r0, [r7, #12]
 8005a5c:	f000 faee 	bl	800603c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8005a60:	f7ff fea8 	bl	80057b4 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 8005a64:	211d      	movs	r1, #29
 8005a66:	68f8      	ldr	r0, [r7, #12]
 8005a68:	f000 fa3a 	bl	8005ee0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8005a6c:	897b      	ldrh	r3, [r7, #10]
 8005a6e:	0a1b      	lsrs	r3, r3, #8
 8005a70:	b29b      	uxth	r3, r3
 8005a72:	b2db      	uxtb	r3, r3
 8005a74:	4619      	mov	r1, r3
 8005a76:	68f8      	ldr	r0, [r7, #12]
 8005a78:	f000 fa32 	bl	8005ee0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8005a7c:	897b      	ldrh	r3, [r7, #10]
 8005a7e:	b2db      	uxtb	r3, r3
 8005a80:	4619      	mov	r1, r3
 8005a82:	68f8      	ldr	r0, [r7, #12]
 8005a84:	f000 fa2c 	bl	8005ee0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 8005a88:	2100      	movs	r1, #0
 8005a8a:	68f8      	ldr	r0, [r7, #12]
 8005a8c:	f000 fa28 	bl	8005ee0 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8005a90:	2300      	movs	r3, #0
 8005a92:	82fb      	strh	r3, [r7, #22]
 8005a94:	e009      	b.n	8005aaa <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8005a96:	69b9      	ldr	r1, [r7, #24]
 8005a98:	68f8      	ldr	r0, [r7, #12]
 8005a9a:	f000 fa77 	bl	8005f8c <SUBGHZSPI_Receive>
      pData++;
 8005a9e:	69bb      	ldr	r3, [r7, #24]
 8005aa0:	3301      	adds	r3, #1
 8005aa2:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8005aa4:	8afb      	ldrh	r3, [r7, #22]
 8005aa6:	3301      	adds	r3, #1
 8005aa8:	82fb      	strh	r3, [r7, #22]
 8005aaa:	8afa      	ldrh	r2, [r7, #22]
 8005aac:	893b      	ldrh	r3, [r7, #8]
 8005aae:	429a      	cmp	r2, r3
 8005ab0:	d3f1      	bcc.n	8005a96 <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8005ab2:	f7ff fe6f 	bl	8005794 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8005ab6:	68f8      	ldr	r0, [r7, #12]
 8005ab8:	f000 fae4 	bl	8006084 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	689b      	ldr	r3, [r3, #8]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d002      	beq.n	8005aca <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 8005ac4:	2301      	movs	r3, #1
 8005ac6:	77fb      	strb	r3, [r7, #31]
 8005ac8:	e001      	b.n	8005ace <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 8005aca:	2300      	movs	r3, #0
 8005acc:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	2201      	movs	r2, #1
 8005ad2:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	715a      	strb	r2, [r3, #5]

    return status;
 8005ada:	7ffb      	ldrb	r3, [r7, #31]
 8005adc:	e000      	b.n	8005ae0 <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 8005ade:	2302      	movs	r3, #2
  }
}
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	3720      	adds	r7, #32
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	bd80      	pop	{r7, pc}

08005ae8 <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b086      	sub	sp, #24
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	60f8      	str	r0, [r7, #12]
 8005af0:	607a      	str	r2, [r7, #4]
 8005af2:	461a      	mov	r2, r3
 8005af4:	460b      	mov	r3, r1
 8005af6:	72fb      	strb	r3, [r7, #11]
 8005af8:	4613      	mov	r3, r2
 8005afa:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0U]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	799b      	ldrb	r3, [r3, #6]
 8005b00:	b2db      	uxtb	r3, r3
 8005b02:	2b01      	cmp	r3, #1
 8005b04:	d14a      	bne.n	8005b9c <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	795b      	ldrb	r3, [r3, #5]
 8005b0a:	2b01      	cmp	r3, #1
 8005b0c:	d101      	bne.n	8005b12 <HAL_SUBGHZ_ExecSetCmd+0x2a>
 8005b0e:	2302      	movs	r3, #2
 8005b10:	e045      	b.n	8005b9e <HAL_SUBGHZ_ExecSetCmd+0xb6>
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	2201      	movs	r2, #1
 8005b16:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8005b18:	68f8      	ldr	r0, [r7, #12]
 8005b1a:	f000 fa8f 	bl	800603c <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 8005b1e:	7afb      	ldrb	r3, [r7, #11]
 8005b20:	2b84      	cmp	r3, #132	; 0x84
 8005b22:	d002      	beq.n	8005b2a <HAL_SUBGHZ_ExecSetCmd+0x42>
 8005b24:	7afb      	ldrb	r3, [r7, #11]
 8005b26:	2b94      	cmp	r3, #148	; 0x94
 8005b28:	d103      	bne.n	8005b32 <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	2201      	movs	r2, #1
 8005b2e:	711a      	strb	r2, [r3, #4]
 8005b30:	e002      	b.n	8005b38 <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	2200      	movs	r2, #0
 8005b36:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8005b38:	f7ff fe3c 	bl	80057b4 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8005b3c:	7afb      	ldrb	r3, [r7, #11]
 8005b3e:	4619      	mov	r1, r3
 8005b40:	68f8      	ldr	r0, [r7, #12]
 8005b42:	f000 f9cd 	bl	8005ee0 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8005b46:	2300      	movs	r3, #0
 8005b48:	82bb      	strh	r3, [r7, #20]
 8005b4a:	e00a      	b.n	8005b62 <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8005b4c:	8abb      	ldrh	r3, [r7, #20]
 8005b4e:	687a      	ldr	r2, [r7, #4]
 8005b50:	4413      	add	r3, r2
 8005b52:	781b      	ldrb	r3, [r3, #0]
 8005b54:	4619      	mov	r1, r3
 8005b56:	68f8      	ldr	r0, [r7, #12]
 8005b58:	f000 f9c2 	bl	8005ee0 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8005b5c:	8abb      	ldrh	r3, [r7, #20]
 8005b5e:	3301      	adds	r3, #1
 8005b60:	82bb      	strh	r3, [r7, #20]
 8005b62:	8aba      	ldrh	r2, [r7, #20]
 8005b64:	893b      	ldrh	r3, [r7, #8]
 8005b66:	429a      	cmp	r2, r3
 8005b68:	d3f0      	bcc.n	8005b4c <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8005b6a:	f7ff fe13 	bl	8005794 <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 8005b6e:	7afb      	ldrb	r3, [r7, #11]
 8005b70:	2b84      	cmp	r3, #132	; 0x84
 8005b72:	d002      	beq.n	8005b7a <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 8005b74:	68f8      	ldr	r0, [r7, #12]
 8005b76:	f000 fa85 	bl	8006084 <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	689b      	ldr	r3, [r3, #8]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d002      	beq.n	8005b88 <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 8005b82:	2301      	movs	r3, #1
 8005b84:	75fb      	strb	r3, [r7, #23]
 8005b86:	e001      	b.n	8005b8c <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 8005b88:	2300      	movs	r3, #0
 8005b8a:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	2201      	movs	r2, #1
 8005b90:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	2200      	movs	r2, #0
 8005b96:	715a      	strb	r2, [r3, #5]

    return status;
 8005b98:	7dfb      	ldrb	r3, [r7, #23]
 8005b9a:	e000      	b.n	8005b9e <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8005b9c:	2302      	movs	r3, #2
  }
}
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	3718      	adds	r7, #24
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	bd80      	pop	{r7, pc}

08005ba6 <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8005ba6:	b580      	push	{r7, lr}
 8005ba8:	b088      	sub	sp, #32
 8005baa:	af00      	add	r7, sp, #0
 8005bac:	60f8      	str	r0, [r7, #12]
 8005bae:	607a      	str	r2, [r7, #4]
 8005bb0:	461a      	mov	r2, r3
 8005bb2:	460b      	mov	r3, r1
 8005bb4:	72fb      	strb	r3, [r7, #11]
 8005bb6:	4613      	mov	r3, r2
 8005bb8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	799b      	ldrb	r3, [r3, #6]
 8005bc2:	b2db      	uxtb	r3, r3
 8005bc4:	2b01      	cmp	r3, #1
 8005bc6:	d13d      	bne.n	8005c44 <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	795b      	ldrb	r3, [r3, #5]
 8005bcc:	2b01      	cmp	r3, #1
 8005bce:	d101      	bne.n	8005bd4 <HAL_SUBGHZ_ExecGetCmd+0x2e>
 8005bd0:	2302      	movs	r3, #2
 8005bd2:	e038      	b.n	8005c46 <HAL_SUBGHZ_ExecGetCmd+0xa0>
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	2201      	movs	r2, #1
 8005bd8:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8005bda:	68f8      	ldr	r0, [r7, #12]
 8005bdc:	f000 fa2e 	bl	800603c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8005be0:	f7ff fde8 	bl	80057b4 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8005be4:	7afb      	ldrb	r3, [r7, #11]
 8005be6:	4619      	mov	r1, r3
 8005be8:	68f8      	ldr	r0, [r7, #12]
 8005bea:	f000 f979 	bl	8005ee0 <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8005bee:	2100      	movs	r1, #0
 8005bf0:	68f8      	ldr	r0, [r7, #12]
 8005bf2:	f000 f975 	bl	8005ee0 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	82fb      	strh	r3, [r7, #22]
 8005bfa:	e009      	b.n	8005c10 <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8005bfc:	69b9      	ldr	r1, [r7, #24]
 8005bfe:	68f8      	ldr	r0, [r7, #12]
 8005c00:	f000 f9c4 	bl	8005f8c <SUBGHZSPI_Receive>
      pData++;
 8005c04:	69bb      	ldr	r3, [r7, #24]
 8005c06:	3301      	adds	r3, #1
 8005c08:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8005c0a:	8afb      	ldrh	r3, [r7, #22]
 8005c0c:	3301      	adds	r3, #1
 8005c0e:	82fb      	strh	r3, [r7, #22]
 8005c10:	8afa      	ldrh	r2, [r7, #22]
 8005c12:	893b      	ldrh	r3, [r7, #8]
 8005c14:	429a      	cmp	r2, r3
 8005c16:	d3f1      	bcc.n	8005bfc <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8005c18:	f7ff fdbc 	bl	8005794 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8005c1c:	68f8      	ldr	r0, [r7, #12]
 8005c1e:	f000 fa31 	bl	8006084 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	689b      	ldr	r3, [r3, #8]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d002      	beq.n	8005c30 <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 8005c2a:	2301      	movs	r3, #1
 8005c2c:	77fb      	strb	r3, [r7, #31]
 8005c2e:	e001      	b.n	8005c34 <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 8005c30:	2300      	movs	r3, #0
 8005c32:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	2201      	movs	r2, #1
 8005c38:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	715a      	strb	r2, [r3, #5]

    return status;
 8005c40:	7ffb      	ldrb	r3, [r7, #31]
 8005c42:	e000      	b.n	8005c46 <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8005c44:	2302      	movs	r3, #2
  }
}
 8005c46:	4618      	mov	r0, r3
 8005c48:	3720      	adds	r7, #32
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	bd80      	pop	{r7, pc}

08005c4e <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 8005c4e:	b580      	push	{r7, lr}
 8005c50:	b086      	sub	sp, #24
 8005c52:	af00      	add	r7, sp, #0
 8005c54:	60f8      	str	r0, [r7, #12]
 8005c56:	607a      	str	r2, [r7, #4]
 8005c58:	461a      	mov	r2, r3
 8005c5a:	460b      	mov	r3, r1
 8005c5c:	72fb      	strb	r3, [r7, #11]
 8005c5e:	4613      	mov	r3, r2
 8005c60:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	799b      	ldrb	r3, [r3, #6]
 8005c66:	b2db      	uxtb	r3, r3
 8005c68:	2b01      	cmp	r3, #1
 8005c6a:	d13e      	bne.n	8005cea <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	795b      	ldrb	r3, [r3, #5]
 8005c70:	2b01      	cmp	r3, #1
 8005c72:	d101      	bne.n	8005c78 <HAL_SUBGHZ_WriteBuffer+0x2a>
 8005c74:	2302      	movs	r3, #2
 8005c76:	e039      	b.n	8005cec <HAL_SUBGHZ_WriteBuffer+0x9e>
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	2201      	movs	r2, #1
 8005c7c:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8005c7e:	68f8      	ldr	r0, [r7, #12]
 8005c80:	f000 f9dc 	bl	800603c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8005c84:	f7ff fd96 	bl	80057b4 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 8005c88:	210e      	movs	r1, #14
 8005c8a:	68f8      	ldr	r0, [r7, #12]
 8005c8c:	f000 f928 	bl	8005ee0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8005c90:	7afb      	ldrb	r3, [r7, #11]
 8005c92:	4619      	mov	r1, r3
 8005c94:	68f8      	ldr	r0, [r7, #12]
 8005c96:	f000 f923 	bl	8005ee0 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	82bb      	strh	r3, [r7, #20]
 8005c9e:	e00a      	b.n	8005cb6 <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8005ca0:	8abb      	ldrh	r3, [r7, #20]
 8005ca2:	687a      	ldr	r2, [r7, #4]
 8005ca4:	4413      	add	r3, r2
 8005ca6:	781b      	ldrb	r3, [r3, #0]
 8005ca8:	4619      	mov	r1, r3
 8005caa:	68f8      	ldr	r0, [r7, #12]
 8005cac:	f000 f918 	bl	8005ee0 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8005cb0:	8abb      	ldrh	r3, [r7, #20]
 8005cb2:	3301      	adds	r3, #1
 8005cb4:	82bb      	strh	r3, [r7, #20]
 8005cb6:	8aba      	ldrh	r2, [r7, #20]
 8005cb8:	893b      	ldrh	r3, [r7, #8]
 8005cba:	429a      	cmp	r2, r3
 8005cbc:	d3f0      	bcc.n	8005ca0 <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8005cbe:	f7ff fd69 	bl	8005794 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8005cc2:	68f8      	ldr	r0, [r7, #12]
 8005cc4:	f000 f9de 	bl	8006084 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	689b      	ldr	r3, [r3, #8]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d002      	beq.n	8005cd6 <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	75fb      	strb	r3, [r7, #23]
 8005cd4:	e001      	b.n	8005cda <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	2201      	movs	r2, #1
 8005cde:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	715a      	strb	r2, [r3, #5]

    return status;
 8005ce6:	7dfb      	ldrb	r3, [r7, #23]
 8005ce8:	e000      	b.n	8005cec <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8005cea:	2302      	movs	r3, #2
  }
}
 8005cec:	4618      	mov	r0, r3
 8005cee:	3718      	adds	r7, #24
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	bd80      	pop	{r7, pc}

08005cf4 <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b088      	sub	sp, #32
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	60f8      	str	r0, [r7, #12]
 8005cfc:	607a      	str	r2, [r7, #4]
 8005cfe:	461a      	mov	r2, r3
 8005d00:	460b      	mov	r3, r1
 8005d02:	72fb      	strb	r3, [r7, #11]
 8005d04:	4613      	mov	r3, r2
 8005d06:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	799b      	ldrb	r3, [r3, #6]
 8005d10:	b2db      	uxtb	r3, r3
 8005d12:	2b01      	cmp	r3, #1
 8005d14:	d141      	bne.n	8005d9a <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	795b      	ldrb	r3, [r3, #5]
 8005d1a:	2b01      	cmp	r3, #1
 8005d1c:	d101      	bne.n	8005d22 <HAL_SUBGHZ_ReadBuffer+0x2e>
 8005d1e:	2302      	movs	r3, #2
 8005d20:	e03c      	b.n	8005d9c <HAL_SUBGHZ_ReadBuffer+0xa8>
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	2201      	movs	r2, #1
 8005d26:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8005d28:	68f8      	ldr	r0, [r7, #12]
 8005d2a:	f000 f987 	bl	800603c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8005d2e:	f7ff fd41 	bl	80057b4 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 8005d32:	211e      	movs	r1, #30
 8005d34:	68f8      	ldr	r0, [r7, #12]
 8005d36:	f000 f8d3 	bl	8005ee0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8005d3a:	7afb      	ldrb	r3, [r7, #11]
 8005d3c:	4619      	mov	r1, r3
 8005d3e:	68f8      	ldr	r0, [r7, #12]
 8005d40:	f000 f8ce 	bl	8005ee0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8005d44:	2100      	movs	r1, #0
 8005d46:	68f8      	ldr	r0, [r7, #12]
 8005d48:	f000 f8ca 	bl	8005ee0 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	82fb      	strh	r3, [r7, #22]
 8005d50:	e009      	b.n	8005d66 <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8005d52:	69b9      	ldr	r1, [r7, #24]
 8005d54:	68f8      	ldr	r0, [r7, #12]
 8005d56:	f000 f919 	bl	8005f8c <SUBGHZSPI_Receive>
      pData++;
 8005d5a:	69bb      	ldr	r3, [r7, #24]
 8005d5c:	3301      	adds	r3, #1
 8005d5e:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8005d60:	8afb      	ldrh	r3, [r7, #22]
 8005d62:	3301      	adds	r3, #1
 8005d64:	82fb      	strh	r3, [r7, #22]
 8005d66:	8afa      	ldrh	r2, [r7, #22]
 8005d68:	893b      	ldrh	r3, [r7, #8]
 8005d6a:	429a      	cmp	r2, r3
 8005d6c:	d3f1      	bcc.n	8005d52 <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8005d6e:	f7ff fd11 	bl	8005794 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8005d72:	68f8      	ldr	r0, [r7, #12]
 8005d74:	f000 f986 	bl	8006084 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	689b      	ldr	r3, [r3, #8]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d002      	beq.n	8005d86 <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 8005d80:	2301      	movs	r3, #1
 8005d82:	77fb      	strb	r3, [r7, #31]
 8005d84:	e001      	b.n	8005d8a <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 8005d86:	2300      	movs	r3, #0
 8005d88:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	2201      	movs	r2, #1
 8005d8e:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	2200      	movs	r2, #0
 8005d94:	715a      	strb	r2, [r3, #5]

    return status;
 8005d96:	7ffb      	ldrb	r3, [r7, #31]
 8005d98:	e000      	b.n	8005d9c <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8005d9a:	2302      	movs	r3, #2
  }
}
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	3720      	adds	r7, #32
 8005da0:	46bd      	mov	sp, r7
 8005da2:	bd80      	pop	{r7, pc}

08005da4 <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b084      	sub	sp, #16
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2U] = {0U};
 8005dac:	2300      	movs	r3, #0
 8005dae:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 8005db0:	f107 020c 	add.w	r2, r7, #12
 8005db4:	2302      	movs	r3, #2
 8005db6:	2112      	movs	r1, #18
 8005db8:	6878      	ldr	r0, [r7, #4]
 8005dba:	f7ff fef4 	bl	8005ba6 <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 8005dbe:	7b3b      	ldrb	r3, [r7, #12]
 8005dc0:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8U) | tmpisr[1U];
 8005dc2:	89fb      	ldrh	r3, [r7, #14]
 8005dc4:	021b      	lsls	r3, r3, #8
 8005dc6:	b21a      	sxth	r2, r3
 8005dc8:	7b7b      	ldrb	r3, [r7, #13]
 8005dca:	b21b      	sxth	r3, r3
 8005dcc:	4313      	orrs	r3, r2
 8005dce:	b21b      	sxth	r3, r3
 8005dd0:	81fb      	strh	r3, [r7, #14]

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2U);
 8005dd2:	f107 020c 	add.w	r2, r7, #12
 8005dd6:	2302      	movs	r3, #2
 8005dd8:	2102      	movs	r1, #2
 8005dda:	6878      	ldr	r0, [r7, #4]
 8005ddc:	f7ff fe84 	bl	8005ae8 <HAL_SUBGHZ_ExecSetCmd>

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 8005de0:	89fb      	ldrh	r3, [r7, #14]
 8005de2:	f003 0301 	and.w	r3, r3, #1
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d002      	beq.n	8005df0 <HAL_SUBGHZ_IRQHandler+0x4c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 8005dea:	6878      	ldr	r0, [r7, #4]
 8005dec:	f005 f95c 	bl	800b0a8 <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 8005df0:	89fb      	ldrh	r3, [r7, #14]
 8005df2:	f003 0302 	and.w	r3, r3, #2
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d002      	beq.n	8005e00 <HAL_SUBGHZ_IRQHandler+0x5c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 8005dfa:	6878      	ldr	r0, [r7, #4]
 8005dfc:	f005 f962 	bl	800b0c4 <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 8005e00:	89fb      	ldrh	r3, [r7, #14]
 8005e02:	f003 0304 	and.w	r3, r3, #4
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d002      	beq.n	8005e10 <HAL_SUBGHZ_IRQHandler+0x6c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 8005e0a:	6878      	ldr	r0, [r7, #4]
 8005e0c:	f005 f9b2 	bl	800b174 <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 8005e10:	89fb      	ldrh	r3, [r7, #14]
 8005e12:	f003 0308 	and.w	r3, r3, #8
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d002      	beq.n	8005e20 <HAL_SUBGHZ_IRQHandler+0x7c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 8005e1a:	6878      	ldr	r0, [r7, #4]
 8005e1c:	f005 f9b8 	bl	800b190 <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 8005e20:	89fb      	ldrh	r3, [r7, #14]
 8005e22:	f003 0310 	and.w	r3, r3, #16
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d002      	beq.n	8005e30 <HAL_SUBGHZ_IRQHandler+0x8c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 8005e2a:	6878      	ldr	r0, [r7, #4]
 8005e2c:	f005 f9be 	bl	800b1ac <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 8005e30:	89fb      	ldrh	r3, [r7, #14]
 8005e32:	f003 0320 	and.w	r3, r3, #32
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d002      	beq.n	8005e40 <HAL_SUBGHZ_IRQHandler+0x9c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 8005e3a:	6878      	ldr	r0, [r7, #4]
 8005e3c:	f005 f98c 	bl	800b158 <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 8005e40:	89fb      	ldrh	r3, [r7, #14]
 8005e42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d002      	beq.n	8005e50 <HAL_SUBGHZ_IRQHandler+0xac>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 8005e4a:	6878      	ldr	r0, [r7, #4]
 8005e4c:	f005 f948 	bl	800b0e0 <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 8005e50:	89fb      	ldrh	r3, [r7, #14]
 8005e52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d00d      	beq.n	8005e76 <HAL_SUBGHZ_IRQHandler+0xd2>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 8005e5a:	89fb      	ldrh	r3, [r7, #14]
 8005e5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d004      	beq.n	8005e6e <HAL_SUBGHZ_IRQHandler+0xca>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 8005e64:	2101      	movs	r1, #1
 8005e66:	6878      	ldr	r0, [r7, #4]
 8005e68:	f005 f948 	bl	800b0fc <HAL_SUBGHZ_CADStatusCallback>
 8005e6c:	e003      	b.n	8005e76 <HAL_SUBGHZ_IRQHandler+0xd2>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 8005e6e:	2100      	movs	r1, #0
 8005e70:	6878      	ldr	r0, [r7, #4]
 8005e72:	f005 f943 	bl	800b0fc <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 8005e76:	89fb      	ldrh	r3, [r7, #14]
 8005e78:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d002      	beq.n	8005e86 <HAL_SUBGHZ_IRQHandler+0xe2>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 8005e80:	6878      	ldr	r0, [r7, #4]
 8005e82:	f005 f959 	bl	800b138 <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LR_FHSS Hop interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_LR_FHSS_HOP) != RESET)
 8005e86:	89fb      	ldrh	r3, [r7, #14]
 8005e88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d002      	beq.n	8005e96 <HAL_SUBGHZ_IRQHandler+0xf2>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->LrFhssHopCallback(hsubghz);
#else
    HAL_SUBGHZ_LrFhssHopCallback(hsubghz);
 8005e90:	6878      	ldr	r0, [r7, #4]
 8005e92:	f005 f999 	bl	800b1c8 <HAL_SUBGHZ_LrFhssHopCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }
}
 8005e96:	bf00      	nop
 8005e98:	3710      	adds	r7, #16
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	bd80      	pop	{r7, pc}
	...

08005ea0 <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 8005ea0:	b480      	push	{r7}
 8005ea2:	b083      	sub	sp, #12
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8005ea8:	4b0c      	ldr	r3, [pc, #48]	; (8005edc <SUBGHZSPI_Init+0x3c>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	4a0b      	ldr	r2, [pc, #44]	; (8005edc <SUBGHZSPI_Init+0x3c>)
 8005eae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005eb2:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 8005eb4:	4a09      	ldr	r2, [pc, #36]	; (8005edc <SUBGHZSPI_Init+0x3c>)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	f443 7341 	orr.w	r3, r3, #772	; 0x304
 8005ebc:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 8005ebe:	4b07      	ldr	r3, [pc, #28]	; (8005edc <SUBGHZSPI_Init+0x3c>)
 8005ec0:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 8005ec4:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8005ec6:	4b05      	ldr	r3, [pc, #20]	; (8005edc <SUBGHZSPI_Init+0x3c>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	4a04      	ldr	r2, [pc, #16]	; (8005edc <SUBGHZSPI_Init+0x3c>)
 8005ecc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ed0:	6013      	str	r3, [r2, #0]
}
 8005ed2:	bf00      	nop
 8005ed4:	370c      	adds	r7, #12
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	bc80      	pop	{r7}
 8005eda:	4770      	bx	lr
 8005edc:	58010000 	.word	0x58010000

08005ee0 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8005ee0:	b480      	push	{r7}
 8005ee2:	b087      	sub	sp, #28
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
 8005ee8:	460b      	mov	r3, r1
 8005eea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8005eec:	2300      	movs	r3, #0
 8005eee:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8005ef0:	4b23      	ldr	r3, [pc, #140]	; (8005f80 <SUBGHZSPI_Transmit+0xa0>)
 8005ef2:	681a      	ldr	r2, [r3, #0]
 8005ef4:	4613      	mov	r3, r2
 8005ef6:	00db      	lsls	r3, r3, #3
 8005ef8:	1a9b      	subs	r3, r3, r2
 8005efa:	009b      	lsls	r3, r3, #2
 8005efc:	0cdb      	lsrs	r3, r3, #19
 8005efe:	2264      	movs	r2, #100	; 0x64
 8005f00:	fb02 f303 	mul.w	r3, r2, r3
 8005f04:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d105      	bne.n	8005f18 <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 8005f0c:	2301      	movs	r3, #1
 8005f0e:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2201      	movs	r2, #1
 8005f14:	609a      	str	r2, [r3, #8]
      break;
 8005f16:	e008      	b.n	8005f2a <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	3b01      	subs	r3, #1
 8005f1c:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8005f1e:	4b19      	ldr	r3, [pc, #100]	; (8005f84 <SUBGHZSPI_Transmit+0xa4>)
 8005f20:	689b      	ldr	r3, [r3, #8]
 8005f22:	f003 0302 	and.w	r3, r3, #2
 8005f26:	2b02      	cmp	r3, #2
 8005f28:	d1ed      	bne.n	8005f06 <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8005f2a:	4b17      	ldr	r3, [pc, #92]	; (8005f88 <SUBGHZSPI_Transmit+0xa8>)
 8005f2c:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 8005f2e:	693b      	ldr	r3, [r7, #16]
 8005f30:	78fa      	ldrb	r2, [r7, #3]
 8005f32:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8005f34:	4b12      	ldr	r3, [pc, #72]	; (8005f80 <SUBGHZSPI_Transmit+0xa0>)
 8005f36:	681a      	ldr	r2, [r3, #0]
 8005f38:	4613      	mov	r3, r2
 8005f3a:	00db      	lsls	r3, r3, #3
 8005f3c:	1a9b      	subs	r3, r3, r2
 8005f3e:	009b      	lsls	r3, r3, #2
 8005f40:	0cdb      	lsrs	r3, r3, #19
 8005f42:	2264      	movs	r2, #100	; 0x64
 8005f44:	fb02 f303 	mul.w	r3, r2, r3
 8005f48:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d105      	bne.n	8005f5c <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 8005f50:	2301      	movs	r3, #1
 8005f52:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2201      	movs	r2, #1
 8005f58:	609a      	str	r2, [r3, #8]
      break;
 8005f5a:	e008      	b.n	8005f6e <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	3b01      	subs	r3, #1
 8005f60:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8005f62:	4b08      	ldr	r3, [pc, #32]	; (8005f84 <SUBGHZSPI_Transmit+0xa4>)
 8005f64:	689b      	ldr	r3, [r3, #8]
 8005f66:	f003 0301 	and.w	r3, r3, #1
 8005f6a:	2b01      	cmp	r3, #1
 8005f6c:	d1ed      	bne.n	8005f4a <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 8005f6e:	4b05      	ldr	r3, [pc, #20]	; (8005f84 <SUBGHZSPI_Transmit+0xa4>)
 8005f70:	68db      	ldr	r3, [r3, #12]

  return status;
 8005f72:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f74:	4618      	mov	r0, r3
 8005f76:	371c      	adds	r7, #28
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	bc80      	pop	{r7}
 8005f7c:	4770      	bx	lr
 8005f7e:	bf00      	nop
 8005f80:	2000000c 	.word	0x2000000c
 8005f84:	58010000 	.word	0x58010000
 8005f88:	5801000c 	.word	0x5801000c

08005f8c <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 8005f8c:	b480      	push	{r7}
 8005f8e:	b087      	sub	sp, #28
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
 8005f94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005f96:	2300      	movs	r3, #0
 8005f98:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8005f9a:	4b25      	ldr	r3, [pc, #148]	; (8006030 <SUBGHZSPI_Receive+0xa4>)
 8005f9c:	681a      	ldr	r2, [r3, #0]
 8005f9e:	4613      	mov	r3, r2
 8005fa0:	00db      	lsls	r3, r3, #3
 8005fa2:	1a9b      	subs	r3, r3, r2
 8005fa4:	009b      	lsls	r3, r3, #2
 8005fa6:	0cdb      	lsrs	r3, r3, #19
 8005fa8:	2264      	movs	r2, #100	; 0x64
 8005faa:	fb02 f303 	mul.w	r3, r2, r3
 8005fae:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d105      	bne.n	8005fc2 <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2201      	movs	r2, #1
 8005fbe:	609a      	str	r2, [r3, #8]
      break;
 8005fc0:	e008      	b.n	8005fd4 <SUBGHZSPI_Receive+0x48>
    }
    count--;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	3b01      	subs	r3, #1
 8005fc6:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8005fc8:	4b1a      	ldr	r3, [pc, #104]	; (8006034 <SUBGHZSPI_Receive+0xa8>)
 8005fca:	689b      	ldr	r3, [r3, #8]
 8005fcc:	f003 0302 	and.w	r3, r3, #2
 8005fd0:	2b02      	cmp	r3, #2
 8005fd2:	d1ed      	bne.n	8005fb0 <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8005fd4:	4b18      	ldr	r3, [pc, #96]	; (8006038 <SUBGHZSPI_Receive+0xac>)
 8005fd6:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 8005fd8:	693b      	ldr	r3, [r7, #16]
 8005fda:	22ff      	movs	r2, #255	; 0xff
 8005fdc:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8005fde:	4b14      	ldr	r3, [pc, #80]	; (8006030 <SUBGHZSPI_Receive+0xa4>)
 8005fe0:	681a      	ldr	r2, [r3, #0]
 8005fe2:	4613      	mov	r3, r2
 8005fe4:	00db      	lsls	r3, r3, #3
 8005fe6:	1a9b      	subs	r3, r3, r2
 8005fe8:	009b      	lsls	r3, r3, #2
 8005fea:	0cdb      	lsrs	r3, r3, #19
 8005fec:	2264      	movs	r2, #100	; 0x64
 8005fee:	fb02 f303 	mul.w	r3, r2, r3
 8005ff2:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d105      	bne.n	8006006 <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2201      	movs	r2, #1
 8006002:	609a      	str	r2, [r3, #8]
      break;
 8006004:	e008      	b.n	8006018 <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	3b01      	subs	r3, #1
 800600a:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 800600c:	4b09      	ldr	r3, [pc, #36]	; (8006034 <SUBGHZSPI_Receive+0xa8>)
 800600e:	689b      	ldr	r3, [r3, #8]
 8006010:	f003 0301 	and.w	r3, r3, #1
 8006014:	2b01      	cmp	r3, #1
 8006016:	d1ed      	bne.n	8005ff4 <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8006018:	4b06      	ldr	r3, [pc, #24]	; (8006034 <SUBGHZSPI_Receive+0xa8>)
 800601a:	68db      	ldr	r3, [r3, #12]
 800601c:	b2da      	uxtb	r2, r3
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	701a      	strb	r2, [r3, #0]

  return status;
 8006022:	7dfb      	ldrb	r3, [r7, #23]
}
 8006024:	4618      	mov	r0, r3
 8006026:	371c      	adds	r7, #28
 8006028:	46bd      	mov	sp, r7
 800602a:	bc80      	pop	{r7}
 800602c:	4770      	bx	lr
 800602e:	bf00      	nop
 8006030:	2000000c 	.word	0x2000000c
 8006034:	58010000 	.word	0x58010000
 8006038:	5801000c 	.word	0x5801000c

0800603c <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b084      	sub	sp, #16
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	791b      	ldrb	r3, [r3, #4]
 8006048:	2b01      	cmp	r3, #1
 800604a:	d111      	bne.n	8006070 <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 800604c:	4b0c      	ldr	r3, [pc, #48]	; (8006080 <SUBGHZ_CheckDeviceReady+0x44>)
 800604e:	681a      	ldr	r2, [r3, #0]
 8006050:	4613      	mov	r3, r2
 8006052:	005b      	lsls	r3, r3, #1
 8006054:	4413      	add	r3, r2
 8006056:	00db      	lsls	r3, r3, #3
 8006058:	0c1b      	lsrs	r3, r3, #16
 800605a:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800605c:	f7ff fbaa 	bl	80057b4 <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	3b01      	subs	r3, #1
 8006064:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d1f9      	bne.n	8006060 <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800606c:	f7ff fb92 	bl	8005794 <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 8006070:	6878      	ldr	r0, [r7, #4]
 8006072:	f000 f807 	bl	8006084 <SUBGHZ_WaitOnBusy>
 8006076:	4603      	mov	r3, r0
}
 8006078:	4618      	mov	r0, r3
 800607a:	3710      	adds	r7, #16
 800607c:	46bd      	mov	sp, r7
 800607e:	bd80      	pop	{r7, pc}
 8006080:	2000000c 	.word	0x2000000c

08006084 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b086      	sub	sp, #24
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 800608c:	2300      	movs	r3, #0
 800608e:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 8006090:	4b12      	ldr	r3, [pc, #72]	; (80060dc <SUBGHZ_WaitOnBusy+0x58>)
 8006092:	681a      	ldr	r2, [r3, #0]
 8006094:	4613      	mov	r3, r2
 8006096:	005b      	lsls	r3, r3, #1
 8006098:	4413      	add	r3, r2
 800609a:	00db      	lsls	r3, r3, #3
 800609c:	0d1b      	lsrs	r3, r3, #20
 800609e:	2264      	movs	r2, #100	; 0x64
 80060a0:	fb02 f303 	mul.w	r3, r2, r3
 80060a4:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 80060a6:	f7ff fbb3 	bl	8005810 <LL_PWR_IsActiveFlag_RFBUSYMS>
 80060aa:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d105      	bne.n	80060be <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 80060b2:	2301      	movs	r3, #1
 80060b4:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2202      	movs	r2, #2
 80060ba:	609a      	str	r2, [r3, #8]
      break;
 80060bc:	e009      	b.n	80060d2 <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	3b01      	subs	r3, #1
 80060c2:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 80060c4:	f7ff fb92 	bl	80057ec <LL_PWR_IsActiveFlag_RFBUSYS>
 80060c8:	4602      	mov	r2, r0
 80060ca:	693b      	ldr	r3, [r7, #16]
 80060cc:	4013      	ands	r3, r2
 80060ce:	2b01      	cmp	r3, #1
 80060d0:	d0e9      	beq.n	80060a6 <SUBGHZ_WaitOnBusy+0x22>

  return status;
 80060d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80060d4:	4618      	mov	r0, r3
 80060d6:	3718      	adds	r7, #24
 80060d8:	46bd      	mov	sp, r7
 80060da:	bd80      	pop	{r7, pc}
 80060dc:	2000000c 	.word	0x2000000c

080060e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b082      	sub	sp, #8
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d101      	bne.n	80060f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80060ee:	2301      	movs	r3, #1
 80060f0:	e049      	b.n	8006186 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060f8:	b2db      	uxtb	r3, r3
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d106      	bne.n	800610c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2200      	movs	r2, #0
 8006102:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006106:	6878      	ldr	r0, [r7, #4]
 8006108:	f7fc fd94 	bl	8002c34 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2202      	movs	r2, #2
 8006110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681a      	ldr	r2, [r3, #0]
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	3304      	adds	r3, #4
 800611c:	4619      	mov	r1, r3
 800611e:	4610      	mov	r0, r2
 8006120:	f000 f944 	bl	80063ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2201      	movs	r2, #1
 8006128:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2201      	movs	r2, #1
 8006130:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2201      	movs	r2, #1
 8006138:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2201      	movs	r2, #1
 8006140:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2201      	movs	r2, #1
 8006148:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2201      	movs	r2, #1
 8006150:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2201      	movs	r2, #1
 8006158:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2201      	movs	r2, #1
 8006160:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2201      	movs	r2, #1
 8006168:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2201      	movs	r2, #1
 8006170:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2201      	movs	r2, #1
 8006178:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2201      	movs	r2, #1
 8006180:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006184:	2300      	movs	r3, #0
}
 8006186:	4618      	mov	r0, r3
 8006188:	3708      	adds	r7, #8
 800618a:	46bd      	mov	sp, r7
 800618c:	bd80      	pop	{r7, pc}
	...

08006190 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006190:	b480      	push	{r7}
 8006192:	b085      	sub	sp, #20
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800619e:	b2db      	uxtb	r3, r3
 80061a0:	2b01      	cmp	r3, #1
 80061a2:	d001      	beq.n	80061a8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80061a4:	2301      	movs	r3, #1
 80061a6:	e02e      	b.n	8006206 <HAL_TIM_Base_Start+0x76>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2202      	movs	r2, #2
 80061ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	4a16      	ldr	r2, [pc, #88]	; (8006210 <HAL_TIM_Base_Start+0x80>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d004      	beq.n	80061c4 <HAL_TIM_Base_Start+0x34>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061c2:	d115      	bne.n	80061f0 <HAL_TIM_Base_Start+0x60>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	689a      	ldr	r2, [r3, #8]
 80061ca:	4b12      	ldr	r3, [pc, #72]	; (8006214 <HAL_TIM_Base_Start+0x84>)
 80061cc:	4013      	ands	r3, r2
 80061ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	2b06      	cmp	r3, #6
 80061d4:	d015      	beq.n	8006202 <HAL_TIM_Base_Start+0x72>
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061dc:	d011      	beq.n	8006202 <HAL_TIM_Base_Start+0x72>
    {
      __HAL_TIM_ENABLE(htim);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	681a      	ldr	r2, [r3, #0]
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f042 0201 	orr.w	r2, r2, #1
 80061ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061ee:	e008      	b.n	8006202 <HAL_TIM_Base_Start+0x72>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	681a      	ldr	r2, [r3, #0]
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f042 0201 	orr.w	r2, r2, #1
 80061fe:	601a      	str	r2, [r3, #0]
 8006200:	e000      	b.n	8006204 <HAL_TIM_Base_Start+0x74>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006202:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006204:	2300      	movs	r3, #0
}
 8006206:	4618      	mov	r0, r3
 8006208:	3714      	adds	r7, #20
 800620a:	46bd      	mov	sp, r7
 800620c:	bc80      	pop	{r7}
 800620e:	4770      	bx	lr
 8006210:	40012c00 	.word	0x40012c00
 8006214:	00010007 	.word	0x00010007

08006218 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b084      	sub	sp, #16
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
 8006220:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006222:	2300      	movs	r3, #0
 8006224:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800622c:	2b01      	cmp	r3, #1
 800622e:	d101      	bne.n	8006234 <HAL_TIM_ConfigClockSource+0x1c>
 8006230:	2302      	movs	r3, #2
 8006232:	e0b6      	b.n	80063a2 <HAL_TIM_ConfigClockSource+0x18a>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2201      	movs	r2, #1
 8006238:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2202      	movs	r2, #2
 8006240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	689b      	ldr	r3, [r3, #8]
 800624a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8006252:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006256:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800625e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	68ba      	ldr	r2, [r7, #8]
 8006266:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006270:	d03e      	beq.n	80062f0 <HAL_TIM_ConfigClockSource+0xd8>
 8006272:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006276:	f200 8087 	bhi.w	8006388 <HAL_TIM_ConfigClockSource+0x170>
 800627a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800627e:	f000 8086 	beq.w	800638e <HAL_TIM_ConfigClockSource+0x176>
 8006282:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006286:	d87f      	bhi.n	8006388 <HAL_TIM_ConfigClockSource+0x170>
 8006288:	2b70      	cmp	r3, #112	; 0x70
 800628a:	d01a      	beq.n	80062c2 <HAL_TIM_ConfigClockSource+0xaa>
 800628c:	2b70      	cmp	r3, #112	; 0x70
 800628e:	d87b      	bhi.n	8006388 <HAL_TIM_ConfigClockSource+0x170>
 8006290:	2b60      	cmp	r3, #96	; 0x60
 8006292:	d050      	beq.n	8006336 <HAL_TIM_ConfigClockSource+0x11e>
 8006294:	2b60      	cmp	r3, #96	; 0x60
 8006296:	d877      	bhi.n	8006388 <HAL_TIM_ConfigClockSource+0x170>
 8006298:	2b50      	cmp	r3, #80	; 0x50
 800629a:	d03c      	beq.n	8006316 <HAL_TIM_ConfigClockSource+0xfe>
 800629c:	2b50      	cmp	r3, #80	; 0x50
 800629e:	d873      	bhi.n	8006388 <HAL_TIM_ConfigClockSource+0x170>
 80062a0:	2b40      	cmp	r3, #64	; 0x40
 80062a2:	d058      	beq.n	8006356 <HAL_TIM_ConfigClockSource+0x13e>
 80062a4:	2b40      	cmp	r3, #64	; 0x40
 80062a6:	d86f      	bhi.n	8006388 <HAL_TIM_ConfigClockSource+0x170>
 80062a8:	2b30      	cmp	r3, #48	; 0x30
 80062aa:	d064      	beq.n	8006376 <HAL_TIM_ConfigClockSource+0x15e>
 80062ac:	2b30      	cmp	r3, #48	; 0x30
 80062ae:	d86b      	bhi.n	8006388 <HAL_TIM_ConfigClockSource+0x170>
 80062b0:	2b20      	cmp	r3, #32
 80062b2:	d060      	beq.n	8006376 <HAL_TIM_ConfigClockSource+0x15e>
 80062b4:	2b20      	cmp	r3, #32
 80062b6:	d867      	bhi.n	8006388 <HAL_TIM_ConfigClockSource+0x170>
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d05c      	beq.n	8006376 <HAL_TIM_ConfigClockSource+0x15e>
 80062bc:	2b10      	cmp	r3, #16
 80062be:	d05a      	beq.n	8006376 <HAL_TIM_ConfigClockSource+0x15e>
 80062c0:	e062      	b.n	8006388 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80062d2:	f000 f946 	bl	8006562 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	689b      	ldr	r3, [r3, #8]
 80062dc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80062de:	68bb      	ldr	r3, [r7, #8]
 80062e0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80062e4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	68ba      	ldr	r2, [r7, #8]
 80062ec:	609a      	str	r2, [r3, #8]
      break;
 80062ee:	e04f      	b.n	8006390 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006300:	f000 f92f 	bl	8006562 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	689a      	ldr	r2, [r3, #8]
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006312:	609a      	str	r2, [r3, #8]
      break;
 8006314:	e03c      	b.n	8006390 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006322:	461a      	mov	r2, r3
 8006324:	f000 f8a4 	bl	8006470 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	2150      	movs	r1, #80	; 0x50
 800632e:	4618      	mov	r0, r3
 8006330:	f000 f8fb 	bl	800652a <TIM_ITRx_SetConfig>
      break;
 8006334:	e02c      	b.n	8006390 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006342:	461a      	mov	r2, r3
 8006344:	f000 f8c2 	bl	80064cc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	2160      	movs	r1, #96	; 0x60
 800634e:	4618      	mov	r0, r3
 8006350:	f000 f8eb 	bl	800652a <TIM_ITRx_SetConfig>
      break;
 8006354:	e01c      	b.n	8006390 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006362:	461a      	mov	r2, r3
 8006364:	f000 f884 	bl	8006470 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	2140      	movs	r1, #64	; 0x40
 800636e:	4618      	mov	r0, r3
 8006370:	f000 f8db 	bl	800652a <TIM_ITRx_SetConfig>
      break;
 8006374:	e00c      	b.n	8006390 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681a      	ldr	r2, [r3, #0]
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	4619      	mov	r1, r3
 8006380:	4610      	mov	r0, r2
 8006382:	f000 f8d2 	bl	800652a <TIM_ITRx_SetConfig>
      break;
 8006386:	e003      	b.n	8006390 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8006388:	2301      	movs	r3, #1
 800638a:	73fb      	strb	r3, [r7, #15]
      break;
 800638c:	e000      	b.n	8006390 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800638e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2201      	movs	r2, #1
 8006394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2200      	movs	r2, #0
 800639c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80063a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80063a2:	4618      	mov	r0, r3
 80063a4:	3710      	adds	r7, #16
 80063a6:	46bd      	mov	sp, r7
 80063a8:	bd80      	pop	{r7, pc}
	...

080063ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80063ac:	b480      	push	{r7}
 80063ae:	b085      	sub	sp, #20
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
 80063b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	4a29      	ldr	r2, [pc, #164]	; (8006464 <TIM_Base_SetConfig+0xb8>)
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d003      	beq.n	80063cc <TIM_Base_SetConfig+0x20>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063ca:	d108      	bne.n	80063de <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	685b      	ldr	r3, [r3, #4]
 80063d8:	68fa      	ldr	r2, [r7, #12]
 80063da:	4313      	orrs	r3, r2
 80063dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	4a20      	ldr	r2, [pc, #128]	; (8006464 <TIM_Base_SetConfig+0xb8>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d00b      	beq.n	80063fe <TIM_Base_SetConfig+0x52>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063ec:	d007      	beq.n	80063fe <TIM_Base_SetConfig+0x52>
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	4a1d      	ldr	r2, [pc, #116]	; (8006468 <TIM_Base_SetConfig+0xbc>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d003      	beq.n	80063fe <TIM_Base_SetConfig+0x52>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	4a1c      	ldr	r2, [pc, #112]	; (800646c <TIM_Base_SetConfig+0xc0>)
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d108      	bne.n	8006410 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006404:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	68db      	ldr	r3, [r3, #12]
 800640a:	68fa      	ldr	r2, [r7, #12]
 800640c:	4313      	orrs	r3, r2
 800640e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	695b      	ldr	r3, [r3, #20]
 800641a:	4313      	orrs	r3, r2
 800641c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	68fa      	ldr	r2, [r7, #12]
 8006422:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	689a      	ldr	r2, [r3, #8]
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	681a      	ldr	r2, [r3, #0]
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	4a0b      	ldr	r2, [pc, #44]	; (8006464 <TIM_Base_SetConfig+0xb8>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d007      	beq.n	800644c <TIM_Base_SetConfig+0xa0>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	4a0a      	ldr	r2, [pc, #40]	; (8006468 <TIM_Base_SetConfig+0xbc>)
 8006440:	4293      	cmp	r3, r2
 8006442:	d003      	beq.n	800644c <TIM_Base_SetConfig+0xa0>
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	4a09      	ldr	r2, [pc, #36]	; (800646c <TIM_Base_SetConfig+0xc0>)
 8006448:	4293      	cmp	r3, r2
 800644a:	d103      	bne.n	8006454 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	691a      	ldr	r2, [r3, #16]
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2201      	movs	r2, #1
 8006458:	615a      	str	r2, [r3, #20]
}
 800645a:	bf00      	nop
 800645c:	3714      	adds	r7, #20
 800645e:	46bd      	mov	sp, r7
 8006460:	bc80      	pop	{r7}
 8006462:	4770      	bx	lr
 8006464:	40012c00 	.word	0x40012c00
 8006468:	40014400 	.word	0x40014400
 800646c:	40014800 	.word	0x40014800

08006470 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006470:	b480      	push	{r7}
 8006472:	b087      	sub	sp, #28
 8006474:	af00      	add	r7, sp, #0
 8006476:	60f8      	str	r0, [r7, #12]
 8006478:	60b9      	str	r1, [r7, #8]
 800647a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	6a1b      	ldr	r3, [r3, #32]
 8006480:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	6a1b      	ldr	r3, [r3, #32]
 8006486:	f023 0201 	bic.w	r2, r3, #1
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	699b      	ldr	r3, [r3, #24]
 8006492:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006494:	693b      	ldr	r3, [r7, #16]
 8006496:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800649a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	011b      	lsls	r3, r3, #4
 80064a0:	693a      	ldr	r2, [r7, #16]
 80064a2:	4313      	orrs	r3, r2
 80064a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80064a6:	697b      	ldr	r3, [r7, #20]
 80064a8:	f023 030a 	bic.w	r3, r3, #10
 80064ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80064ae:	697a      	ldr	r2, [r7, #20]
 80064b0:	68bb      	ldr	r3, [r7, #8]
 80064b2:	4313      	orrs	r3, r2
 80064b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	693a      	ldr	r2, [r7, #16]
 80064ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	697a      	ldr	r2, [r7, #20]
 80064c0:	621a      	str	r2, [r3, #32]
}
 80064c2:	bf00      	nop
 80064c4:	371c      	adds	r7, #28
 80064c6:	46bd      	mov	sp, r7
 80064c8:	bc80      	pop	{r7}
 80064ca:	4770      	bx	lr

080064cc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80064cc:	b480      	push	{r7}
 80064ce:	b087      	sub	sp, #28
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	60f8      	str	r0, [r7, #12]
 80064d4:	60b9      	str	r1, [r7, #8]
 80064d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	6a1b      	ldr	r3, [r3, #32]
 80064dc:	f023 0210 	bic.w	r2, r3, #16
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	699b      	ldr	r3, [r3, #24]
 80064e8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	6a1b      	ldr	r3, [r3, #32]
 80064ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80064f0:	697b      	ldr	r3, [r7, #20]
 80064f2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80064f6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	031b      	lsls	r3, r3, #12
 80064fc:	697a      	ldr	r2, [r7, #20]
 80064fe:	4313      	orrs	r3, r2
 8006500:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006502:	693b      	ldr	r3, [r7, #16]
 8006504:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006508:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800650a:	68bb      	ldr	r3, [r7, #8]
 800650c:	011b      	lsls	r3, r3, #4
 800650e:	693a      	ldr	r2, [r7, #16]
 8006510:	4313      	orrs	r3, r2
 8006512:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	697a      	ldr	r2, [r7, #20]
 8006518:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	693a      	ldr	r2, [r7, #16]
 800651e:	621a      	str	r2, [r3, #32]
}
 8006520:	bf00      	nop
 8006522:	371c      	adds	r7, #28
 8006524:	46bd      	mov	sp, r7
 8006526:	bc80      	pop	{r7}
 8006528:	4770      	bx	lr

0800652a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800652a:	b480      	push	{r7}
 800652c:	b085      	sub	sp, #20
 800652e:	af00      	add	r7, sp, #0
 8006530:	6078      	str	r0, [r7, #4]
 8006532:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	689b      	ldr	r3, [r3, #8]
 8006538:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8006540:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006544:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006546:	683a      	ldr	r2, [r7, #0]
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	4313      	orrs	r3, r2
 800654c:	f043 0307 	orr.w	r3, r3, #7
 8006550:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	68fa      	ldr	r2, [r7, #12]
 8006556:	609a      	str	r2, [r3, #8]
}
 8006558:	bf00      	nop
 800655a:	3714      	adds	r7, #20
 800655c:	46bd      	mov	sp, r7
 800655e:	bc80      	pop	{r7}
 8006560:	4770      	bx	lr

08006562 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006562:	b480      	push	{r7}
 8006564:	b087      	sub	sp, #28
 8006566:	af00      	add	r7, sp, #0
 8006568:	60f8      	str	r0, [r7, #12]
 800656a:	60b9      	str	r1, [r7, #8]
 800656c:	607a      	str	r2, [r7, #4]
 800656e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	689b      	ldr	r3, [r3, #8]
 8006574:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006576:	697b      	ldr	r3, [r7, #20]
 8006578:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800657c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	021a      	lsls	r2, r3, #8
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	431a      	orrs	r2, r3
 8006586:	68bb      	ldr	r3, [r7, #8]
 8006588:	4313      	orrs	r3, r2
 800658a:	697a      	ldr	r2, [r7, #20]
 800658c:	4313      	orrs	r3, r2
 800658e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	697a      	ldr	r2, [r7, #20]
 8006594:	609a      	str	r2, [r3, #8]
}
 8006596:	bf00      	nop
 8006598:	371c      	adds	r7, #28
 800659a:	46bd      	mov	sp, r7
 800659c:	bc80      	pop	{r7}
 800659e:	4770      	bx	lr

080065a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80065a0:	b480      	push	{r7}
 80065a2:	b085      	sub	sp, #20
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
 80065a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065b0:	2b01      	cmp	r3, #1
 80065b2:	d101      	bne.n	80065b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80065b4:	2302      	movs	r3, #2
 80065b6:	e04a      	b.n	800664e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2201      	movs	r2, #1
 80065bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2202      	movs	r2, #2
 80065c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	685b      	ldr	r3, [r3, #4]
 80065ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	689b      	ldr	r3, [r3, #8]
 80065d6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	4a1e      	ldr	r2, [pc, #120]	; (8006658 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80065de:	4293      	cmp	r3, r2
 80065e0:	d108      	bne.n	80065f4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80065e8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	685b      	ldr	r3, [r3, #4]
 80065ee:	68fa      	ldr	r2, [r7, #12]
 80065f0:	4313      	orrs	r3, r2
 80065f2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	68fa      	ldr	r2, [r7, #12]
 8006602:	4313      	orrs	r3, r2
 8006604:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	68fa      	ldr	r2, [r7, #12]
 800660c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	4a11      	ldr	r2, [pc, #68]	; (8006658 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8006614:	4293      	cmp	r3, r2
 8006616:	d004      	beq.n	8006622 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006620:	d10c      	bne.n	800663c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006622:	68bb      	ldr	r3, [r7, #8]
 8006624:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006628:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	689b      	ldr	r3, [r3, #8]
 800662e:	68ba      	ldr	r2, [r7, #8]
 8006630:	4313      	orrs	r3, r2
 8006632:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	68ba      	ldr	r2, [r7, #8]
 800663a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2201      	movs	r2, #1
 8006640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2200      	movs	r2, #0
 8006648:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800664c:	2300      	movs	r3, #0
}
 800664e:	4618      	mov	r0, r3
 8006650:	3714      	adds	r7, #20
 8006652:	46bd      	mov	sp, r7
 8006654:	bc80      	pop	{r7}
 8006656:	4770      	bx	lr
 8006658:	40012c00 	.word	0x40012c00

0800665c <LL_RCC_GetUSARTClockSource>:
{
 800665c:	b480      	push	{r7}
 800665e:	b083      	sub	sp, #12
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8006664:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006668:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	401a      	ands	r2, r3
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	041b      	lsls	r3, r3, #16
 8006674:	4313      	orrs	r3, r2
}
 8006676:	4618      	mov	r0, r3
 8006678:	370c      	adds	r7, #12
 800667a:	46bd      	mov	sp, r7
 800667c:	bc80      	pop	{r7}
 800667e:	4770      	bx	lr

08006680 <LL_RCC_GetLPUARTClockSource>:
{
 8006680:	b480      	push	{r7}
 8006682:	b083      	sub	sp, #12
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8006688:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800668c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	4013      	ands	r3, r2
}
 8006694:	4618      	mov	r0, r3
 8006696:	370c      	adds	r7, #12
 8006698:	46bd      	mov	sp, r7
 800669a:	bc80      	pop	{r7}
 800669c:	4770      	bx	lr

0800669e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800669e:	b580      	push	{r7, lr}
 80066a0:	b082      	sub	sp, #8
 80066a2:	af00      	add	r7, sp, #0
 80066a4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d101      	bne.n	80066b0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80066ac:	2301      	movs	r3, #1
 80066ae:	e042      	b.n	8006736 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d106      	bne.n	80066c8 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2200      	movs	r2, #0
 80066be:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80066c2:	6878      	ldr	r0, [r7, #4]
 80066c4:	f7fc fc82 	bl	8002fcc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2224      	movs	r2, #36	; 0x24
 80066cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	681a      	ldr	r2, [r3, #0]
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f022 0201 	bic.w	r2, r2, #1
 80066de:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80066e0:	6878      	ldr	r0, [r7, #4]
 80066e2:	f000 fd0d 	bl	8007100 <UART_SetConfig>
 80066e6:	4603      	mov	r3, r0
 80066e8:	2b01      	cmp	r3, #1
 80066ea:	d101      	bne.n	80066f0 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80066ec:	2301      	movs	r3, #1
 80066ee:	e022      	b.n	8006736 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d002      	beq.n	80066fe <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80066f8:	6878      	ldr	r0, [r7, #4]
 80066fa:	f000 ff75 	bl	80075e8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	685a      	ldr	r2, [r3, #4]
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800670c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	689a      	ldr	r2, [r3, #8]
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800671c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	681a      	ldr	r2, [r3, #0]
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f042 0201 	orr.w	r2, r2, #1
 800672c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800672e:	6878      	ldr	r0, [r7, #4]
 8006730:	f000 fffb 	bl	800772a <UART_CheckIdleState>
 8006734:	4603      	mov	r3, r0
}
 8006736:	4618      	mov	r0, r3
 8006738:	3708      	adds	r7, #8
 800673a:	46bd      	mov	sp, r7
 800673c:	bd80      	pop	{r7, pc}

0800673e <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800673e:	b580      	push	{r7, lr}
 8006740:	b08a      	sub	sp, #40	; 0x28
 8006742:	af02      	add	r7, sp, #8
 8006744:	60f8      	str	r0, [r7, #12]
 8006746:	60b9      	str	r1, [r7, #8]
 8006748:	603b      	str	r3, [r7, #0]
 800674a:	4613      	mov	r3, r2
 800674c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006754:	2b20      	cmp	r3, #32
 8006756:	d173      	bne.n	8006840 <HAL_UART_Transmit+0x102>
  {
    if ((pData == NULL) || (Size == 0U))
 8006758:	68bb      	ldr	r3, [r7, #8]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d002      	beq.n	8006764 <HAL_UART_Transmit+0x26>
 800675e:	88fb      	ldrh	r3, [r7, #6]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d101      	bne.n	8006768 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006764:	2301      	movs	r3, #1
 8006766:	e06c      	b.n	8006842 <HAL_UART_Transmit+0x104>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	2200      	movs	r2, #0
 800676c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	2221      	movs	r2, #33	; 0x21
 8006774:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006778:	f7fc f99a 	bl	8002ab0 <HAL_GetTick>
 800677c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	88fa      	ldrh	r2, [r7, #6]
 8006782:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	88fa      	ldrh	r2, [r7, #6]
 800678a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	689b      	ldr	r3, [r3, #8]
 8006792:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006796:	d108      	bne.n	80067aa <HAL_UART_Transmit+0x6c>
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	691b      	ldr	r3, [r3, #16]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d104      	bne.n	80067aa <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80067a0:	2300      	movs	r3, #0
 80067a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80067a4:	68bb      	ldr	r3, [r7, #8]
 80067a6:	61bb      	str	r3, [r7, #24]
 80067a8:	e003      	b.n	80067b2 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80067aa:	68bb      	ldr	r3, [r7, #8]
 80067ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80067ae:	2300      	movs	r3, #0
 80067b0:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80067b2:	e02c      	b.n	800680e <HAL_UART_Transmit+0xd0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	9300      	str	r3, [sp, #0]
 80067b8:	697b      	ldr	r3, [r7, #20]
 80067ba:	2200      	movs	r2, #0
 80067bc:	2180      	movs	r1, #128	; 0x80
 80067be:	68f8      	ldr	r0, [r7, #12]
 80067c0:	f001 f801 	bl	80077c6 <UART_WaitOnFlagUntilTimeout>
 80067c4:	4603      	mov	r3, r0
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d001      	beq.n	80067ce <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80067ca:	2303      	movs	r3, #3
 80067cc:	e039      	b.n	8006842 <HAL_UART_Transmit+0x104>
      }
      if (pdata8bits == NULL)
 80067ce:	69fb      	ldr	r3, [r7, #28]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d10b      	bne.n	80067ec <HAL_UART_Transmit+0xae>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80067d4:	69bb      	ldr	r3, [r7, #24]
 80067d6:	881b      	ldrh	r3, [r3, #0]
 80067d8:	461a      	mov	r2, r3
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80067e2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80067e4:	69bb      	ldr	r3, [r7, #24]
 80067e6:	3302      	adds	r3, #2
 80067e8:	61bb      	str	r3, [r7, #24]
 80067ea:	e007      	b.n	80067fc <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80067ec:	69fb      	ldr	r3, [r7, #28]
 80067ee:	781a      	ldrb	r2, [r3, #0]
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80067f6:	69fb      	ldr	r3, [r7, #28]
 80067f8:	3301      	adds	r3, #1
 80067fa:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006802:	b29b      	uxth	r3, r3
 8006804:	3b01      	subs	r3, #1
 8006806:	b29a      	uxth	r2, r3
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006814:	b29b      	uxth	r3, r3
 8006816:	2b00      	cmp	r3, #0
 8006818:	d1cc      	bne.n	80067b4 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	9300      	str	r3, [sp, #0]
 800681e:	697b      	ldr	r3, [r7, #20]
 8006820:	2200      	movs	r2, #0
 8006822:	2140      	movs	r1, #64	; 0x40
 8006824:	68f8      	ldr	r0, [r7, #12]
 8006826:	f000 ffce 	bl	80077c6 <UART_WaitOnFlagUntilTimeout>
 800682a:	4603      	mov	r3, r0
 800682c:	2b00      	cmp	r3, #0
 800682e:	d001      	beq.n	8006834 <HAL_UART_Transmit+0xf6>
    {
      return HAL_TIMEOUT;
 8006830:	2303      	movs	r3, #3
 8006832:	e006      	b.n	8006842 <HAL_UART_Transmit+0x104>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	2220      	movs	r2, #32
 8006838:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800683c:	2300      	movs	r3, #0
 800683e:	e000      	b.n	8006842 <HAL_UART_Transmit+0x104>
  }
  else
  {
    return HAL_BUSY;
 8006840:	2302      	movs	r3, #2
  }
}
 8006842:	4618      	mov	r0, r3
 8006844:	3720      	adds	r7, #32
 8006846:	46bd      	mov	sp, r7
 8006848:	bd80      	pop	{r7, pc}

0800684a <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800684a:	b580      	push	{r7, lr}
 800684c:	b08a      	sub	sp, #40	; 0x28
 800684e:	af02      	add	r7, sp, #8
 8006850:	60f8      	str	r0, [r7, #12]
 8006852:	60b9      	str	r1, [r7, #8]
 8006854:	603b      	str	r3, [r7, #0]
 8006856:	4613      	mov	r3, r2
 8006858:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006860:	2b20      	cmp	r3, #32
 8006862:	f040 80b1 	bne.w	80069c8 <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006866:	68bb      	ldr	r3, [r7, #8]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d002      	beq.n	8006872 <HAL_UART_Receive+0x28>
 800686c:	88fb      	ldrh	r3, [r7, #6]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d101      	bne.n	8006876 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8006872:	2301      	movs	r3, #1
 8006874:	e0a9      	b.n	80069ca <HAL_UART_Receive+0x180>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	2200      	movs	r2, #0
 800687a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	2222      	movs	r2, #34	; 0x22
 8006882:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	2200      	movs	r2, #0
 800688a:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800688c:	f7fc f910 	bl	8002ab0 <HAL_GetTick>
 8006890:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	88fa      	ldrh	r2, [r7, #6]
 8006896:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	88fa      	ldrh	r2, [r7, #6]
 800689e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	689b      	ldr	r3, [r3, #8]
 80068a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068aa:	d10e      	bne.n	80068ca <HAL_UART_Receive+0x80>
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	691b      	ldr	r3, [r3, #16]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d105      	bne.n	80068c0 <HAL_UART_Receive+0x76>
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	f240 12ff 	movw	r2, #511	; 0x1ff
 80068ba:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80068be:	e02d      	b.n	800691c <HAL_UART_Receive+0xd2>
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	22ff      	movs	r2, #255	; 0xff
 80068c4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80068c8:	e028      	b.n	800691c <HAL_UART_Receive+0xd2>
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	689b      	ldr	r3, [r3, #8]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d10d      	bne.n	80068ee <HAL_UART_Receive+0xa4>
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	691b      	ldr	r3, [r3, #16]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d104      	bne.n	80068e4 <HAL_UART_Receive+0x9a>
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	22ff      	movs	r2, #255	; 0xff
 80068de:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80068e2:	e01b      	b.n	800691c <HAL_UART_Receive+0xd2>
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	227f      	movs	r2, #127	; 0x7f
 80068e8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80068ec:	e016      	b.n	800691c <HAL_UART_Receive+0xd2>
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	689b      	ldr	r3, [r3, #8]
 80068f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80068f6:	d10d      	bne.n	8006914 <HAL_UART_Receive+0xca>
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	691b      	ldr	r3, [r3, #16]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d104      	bne.n	800690a <HAL_UART_Receive+0xc0>
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	227f      	movs	r2, #127	; 0x7f
 8006904:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006908:	e008      	b.n	800691c <HAL_UART_Receive+0xd2>
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	223f      	movs	r2, #63	; 0x3f
 800690e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006912:	e003      	b.n	800691c <HAL_UART_Receive+0xd2>
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	2200      	movs	r2, #0
 8006918:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006922:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	689b      	ldr	r3, [r3, #8]
 8006928:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800692c:	d108      	bne.n	8006940 <HAL_UART_Receive+0xf6>
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	691b      	ldr	r3, [r3, #16]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d104      	bne.n	8006940 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8006936:	2300      	movs	r3, #0
 8006938:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800693a:	68bb      	ldr	r3, [r7, #8]
 800693c:	61bb      	str	r3, [r7, #24]
 800693e:	e003      	b.n	8006948 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8006940:	68bb      	ldr	r3, [r7, #8]
 8006942:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006944:	2300      	movs	r3, #0
 8006946:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8006948:	e032      	b.n	80069b0 <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	9300      	str	r3, [sp, #0]
 800694e:	697b      	ldr	r3, [r7, #20]
 8006950:	2200      	movs	r2, #0
 8006952:	2120      	movs	r1, #32
 8006954:	68f8      	ldr	r0, [r7, #12]
 8006956:	f000 ff36 	bl	80077c6 <UART_WaitOnFlagUntilTimeout>
 800695a:	4603      	mov	r3, r0
 800695c:	2b00      	cmp	r3, #0
 800695e:	d001      	beq.n	8006964 <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 8006960:	2303      	movs	r3, #3
 8006962:	e032      	b.n	80069ca <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 8006964:	69fb      	ldr	r3, [r7, #28]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d10c      	bne.n	8006984 <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006970:	b29a      	uxth	r2, r3
 8006972:	8a7b      	ldrh	r3, [r7, #18]
 8006974:	4013      	ands	r3, r2
 8006976:	b29a      	uxth	r2, r3
 8006978:	69bb      	ldr	r3, [r7, #24]
 800697a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800697c:	69bb      	ldr	r3, [r7, #24]
 800697e:	3302      	adds	r3, #2
 8006980:	61bb      	str	r3, [r7, #24]
 8006982:	e00c      	b.n	800699e <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800698a:	b2da      	uxtb	r2, r3
 800698c:	8a7b      	ldrh	r3, [r7, #18]
 800698e:	b2db      	uxtb	r3, r3
 8006990:	4013      	ands	r3, r2
 8006992:	b2da      	uxtb	r2, r3
 8006994:	69fb      	ldr	r3, [r7, #28]
 8006996:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8006998:	69fb      	ldr	r3, [r7, #28]
 800699a:	3301      	adds	r3, #1
 800699c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80069a4:	b29b      	uxth	r3, r3
 80069a6:	3b01      	subs	r3, #1
 80069a8:	b29a      	uxth	r2, r3
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80069b6:	b29b      	uxth	r3, r3
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d1c6      	bne.n	800694a <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	2220      	movs	r2, #32
 80069c0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 80069c4:	2300      	movs	r3, #0
 80069c6:	e000      	b.n	80069ca <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 80069c8:	2302      	movs	r3, #2
  }
}
 80069ca:	4618      	mov	r0, r3
 80069cc:	3720      	adds	r7, #32
 80069ce:	46bd      	mov	sp, r7
 80069d0:	bd80      	pop	{r7, pc}
	...

080069d4 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b08a      	sub	sp, #40	; 0x28
 80069d8:	af00      	add	r7, sp, #0
 80069da:	60f8      	str	r0, [r7, #12]
 80069dc:	60b9      	str	r1, [r7, #8]
 80069de:	4613      	mov	r3, r2
 80069e0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80069e8:	2b20      	cmp	r3, #32
 80069ea:	d137      	bne.n	8006a5c <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80069ec:	68bb      	ldr	r3, [r7, #8]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d002      	beq.n	80069f8 <HAL_UART_Receive_DMA+0x24>
 80069f2:	88fb      	ldrh	r3, [r7, #6]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d101      	bne.n	80069fc <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80069f8:	2301      	movs	r3, #1
 80069fa:	e030      	b.n	8006a5e <HAL_UART_Receive_DMA+0x8a>
      }
    }

#endif /* CORE_CM0PLUS */
    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	2200      	movs	r2, #0
 8006a00:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	4a18      	ldr	r2, [pc, #96]	; (8006a68 <HAL_UART_Receive_DMA+0x94>)
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	d01f      	beq.n	8006a4c <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	685b      	ldr	r3, [r3, #4]
 8006a12:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d018      	beq.n	8006a4c <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a20:	697b      	ldr	r3, [r7, #20]
 8006a22:	e853 3f00 	ldrex	r3, [r3]
 8006a26:	613b      	str	r3, [r7, #16]
   return(result);
 8006a28:	693b      	ldr	r3, [r7, #16]
 8006a2a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006a2e:	627b      	str	r3, [r7, #36]	; 0x24
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	461a      	mov	r2, r3
 8006a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a38:	623b      	str	r3, [r7, #32]
 8006a3a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a3c:	69f9      	ldr	r1, [r7, #28]
 8006a3e:	6a3a      	ldr	r2, [r7, #32]
 8006a40:	e841 2300 	strex	r3, r2, [r1]
 8006a44:	61bb      	str	r3, [r7, #24]
   return(result);
 8006a46:	69bb      	ldr	r3, [r7, #24]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d1e6      	bne.n	8006a1a <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8006a4c:	88fb      	ldrh	r3, [r7, #6]
 8006a4e:	461a      	mov	r2, r3
 8006a50:	68b9      	ldr	r1, [r7, #8]
 8006a52:	68f8      	ldr	r0, [r7, #12]
 8006a54:	f000 ff80 	bl	8007958 <UART_Start_Receive_DMA>
 8006a58:	4603      	mov	r3, r0
 8006a5a:	e000      	b.n	8006a5e <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006a5c:	2302      	movs	r3, #2
  }
}
 8006a5e:	4618      	mov	r0, r3
 8006a60:	3728      	adds	r7, #40	; 0x28
 8006a62:	46bd      	mov	sp, r7
 8006a64:	bd80      	pop	{r7, pc}
 8006a66:	bf00      	nop
 8006a68:	40008000 	.word	0x40008000

08006a6c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b0ba      	sub	sp, #232	; 0xe8
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	69db      	ldr	r3, [r3, #28]
 8006a7a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	689b      	ldr	r3, [r3, #8]
 8006a8e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006a92:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006a96:	f640 030f 	movw	r3, #2063	; 0x80f
 8006a9a:	4013      	ands	r3, r2
 8006a9c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006aa0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d11b      	bne.n	8006ae0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006aa8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006aac:	f003 0320 	and.w	r3, r3, #32
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d015      	beq.n	8006ae0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006ab4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ab8:	f003 0320 	and.w	r3, r3, #32
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d105      	bne.n	8006acc <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006ac0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006ac4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d009      	beq.n	8006ae0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	f000 82e3 	beq.w	800709c <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ada:	6878      	ldr	r0, [r7, #4]
 8006adc:	4798      	blx	r3
      }
      return;
 8006ade:	e2dd      	b.n	800709c <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006ae0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	f000 8123 	beq.w	8006d30 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006aea:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006aee:	4b8d      	ldr	r3, [pc, #564]	; (8006d24 <HAL_UART_IRQHandler+0x2b8>)
 8006af0:	4013      	ands	r3, r2
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d106      	bne.n	8006b04 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006af6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006afa:	4b8b      	ldr	r3, [pc, #556]	; (8006d28 <HAL_UART_IRQHandler+0x2bc>)
 8006afc:	4013      	ands	r3, r2
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	f000 8116 	beq.w	8006d30 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006b04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b08:	f003 0301 	and.w	r3, r3, #1
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d011      	beq.n	8006b34 <HAL_UART_IRQHandler+0xc8>
 8006b10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d00b      	beq.n	8006b34 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	2201      	movs	r2, #1
 8006b22:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b2a:	f043 0201 	orr.w	r2, r3, #1
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006b34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b38:	f003 0302 	and.w	r3, r3, #2
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d011      	beq.n	8006b64 <HAL_UART_IRQHandler+0xf8>
 8006b40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006b44:	f003 0301 	and.w	r3, r3, #1
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d00b      	beq.n	8006b64 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	2202      	movs	r2, #2
 8006b52:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b5a:	f043 0204 	orr.w	r2, r3, #4
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006b64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b68:	f003 0304 	and.w	r3, r3, #4
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d011      	beq.n	8006b94 <HAL_UART_IRQHandler+0x128>
 8006b70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006b74:	f003 0301 	and.w	r3, r3, #1
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d00b      	beq.n	8006b94 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	2204      	movs	r2, #4
 8006b82:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b8a:	f043 0202 	orr.w	r2, r3, #2
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006b94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b98:	f003 0308 	and.w	r3, r3, #8
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d017      	beq.n	8006bd0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006ba0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ba4:	f003 0320 	and.w	r3, r3, #32
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d105      	bne.n	8006bb8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006bac:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006bb0:	4b5c      	ldr	r3, [pc, #368]	; (8006d24 <HAL_UART_IRQHandler+0x2b8>)
 8006bb2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d00b      	beq.n	8006bd0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	2208      	movs	r2, #8
 8006bbe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bc6:	f043 0208 	orr.w	r2, r3, #8
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006bd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bd4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d012      	beq.n	8006c02 <HAL_UART_IRQHandler+0x196>
 8006bdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006be0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d00c      	beq.n	8006c02 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006bf0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bf8:	f043 0220 	orr.w	r2, r3, #32
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	f000 8249 	beq.w	80070a0 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006c0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c12:	f003 0320 	and.w	r3, r3, #32
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d013      	beq.n	8006c42 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006c1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c1e:	f003 0320 	and.w	r3, r3, #32
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d105      	bne.n	8006c32 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006c26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d007      	beq.n	8006c42 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d003      	beq.n	8006c42 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c3e:	6878      	ldr	r0, [r7, #4]
 8006c40:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c48:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	689b      	ldr	r3, [r3, #8]
 8006c52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c56:	2b40      	cmp	r3, #64	; 0x40
 8006c58:	d005      	beq.n	8006c66 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006c5a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006c5e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d054      	beq.n	8006d10 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006c66:	6878      	ldr	r0, [r7, #4]
 8006c68:	f000 ff5c 	bl	8007b24 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	689b      	ldr	r3, [r3, #8]
 8006c72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c76:	2b40      	cmp	r3, #64	; 0x40
 8006c78:	d146      	bne.n	8006d08 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	3308      	adds	r3, #8
 8006c80:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c84:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006c88:	e853 3f00 	ldrex	r3, [r3]
 8006c8c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006c90:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006c94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c98:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	3308      	adds	r3, #8
 8006ca2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006ca6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006caa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006cb2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006cb6:	e841 2300 	strex	r3, r2, [r1]
 8006cba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006cbe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d1d9      	bne.n	8006c7a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d017      	beq.n	8006d00 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006cd6:	4a15      	ldr	r2, [pc, #84]	; (8006d2c <HAL_UART_IRQHandler+0x2c0>)
 8006cd8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	f7fc fe9f 	bl	8003a24 <HAL_DMA_Abort_IT>
 8006ce6:	4603      	mov	r3, r0
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d019      	beq.n	8006d20 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006cf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cf4:	687a      	ldr	r2, [r7, #4]
 8006cf6:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8006cfa:	4610      	mov	r0, r2
 8006cfc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cfe:	e00f      	b.n	8006d20 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006d00:	6878      	ldr	r0, [r7, #4]
 8006d02:	f000 f9e9 	bl	80070d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d06:	e00b      	b.n	8006d20 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006d08:	6878      	ldr	r0, [r7, #4]
 8006d0a:	f000 f9e5 	bl	80070d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d0e:	e007      	b.n	8006d20 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006d10:	6878      	ldr	r0, [r7, #4]
 8006d12:	f000 f9e1 	bl	80070d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2200      	movs	r2, #0
 8006d1a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8006d1e:	e1bf      	b.n	80070a0 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d20:	bf00      	nop
    return;
 8006d22:	e1bd      	b.n	80070a0 <HAL_UART_IRQHandler+0x634>
 8006d24:	10000001 	.word	0x10000001
 8006d28:	04000120 	.word	0x04000120
 8006d2c:	08007dd9 	.word	0x08007dd9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d34:	2b01      	cmp	r3, #1
 8006d36:	f040 8153 	bne.w	8006fe0 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006d3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d3e:	f003 0310 	and.w	r3, r3, #16
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	f000 814c 	beq.w	8006fe0 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006d48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d4c:	f003 0310 	and.w	r3, r3, #16
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	f000 8145 	beq.w	8006fe0 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	2210      	movs	r2, #16
 8006d5c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	689b      	ldr	r3, [r3, #8]
 8006d64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d68:	2b40      	cmp	r3, #64	; 0x40
 8006d6a:	f040 80bb 	bne.w	8006ee4 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	685b      	ldr	r3, [r3, #4]
 8006d78:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006d7c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	f000 818f 	beq.w	80070a4 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006d8c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006d90:	429a      	cmp	r2, r3
 8006d92:	f080 8187 	bcs.w	80070a4 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006d9c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f003 0320 	and.w	r3, r3, #32
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	f040 8087 	bne.w	8006ec2 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dbc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006dc0:	e853 3f00 	ldrex	r3, [r3]
 8006dc4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006dc8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006dcc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006dd0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	461a      	mov	r2, r3
 8006dda:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006dde:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006de2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006de6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006dea:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006dee:	e841 2300 	strex	r3, r2, [r1]
 8006df2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006df6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d1da      	bne.n	8006db4 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	3308      	adds	r3, #8
 8006e04:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006e08:	e853 3f00 	ldrex	r3, [r3]
 8006e0c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006e0e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006e10:	f023 0301 	bic.w	r3, r3, #1
 8006e14:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	3308      	adds	r3, #8
 8006e1e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006e22:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006e26:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e28:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006e2a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006e2e:	e841 2300 	strex	r3, r2, [r1]
 8006e32:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006e34:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d1e1      	bne.n	8006dfe <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	3308      	adds	r3, #8
 8006e40:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e42:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006e44:	e853 3f00 	ldrex	r3, [r3]
 8006e48:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006e4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006e4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e50:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	3308      	adds	r3, #8
 8006e5a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006e5e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006e60:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e62:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006e64:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006e66:	e841 2300 	strex	r3, r2, [r1]
 8006e6a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006e6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d1e3      	bne.n	8006e3a <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	2220      	movs	r2, #32
 8006e76:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e88:	e853 3f00 	ldrex	r3, [r3]
 8006e8c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006e8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e90:	f023 0310 	bic.w	r3, r3, #16
 8006e94:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	461a      	mov	r2, r3
 8006e9e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006ea2:	65bb      	str	r3, [r7, #88]	; 0x58
 8006ea4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ea6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006ea8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006eaa:	e841 2300 	strex	r3, r2, [r1]
 8006eae:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006eb0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d1e4      	bne.n	8006e80 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	f7fc fd53 	bl	8003968 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	2202      	movs	r2, #2
 8006ec6:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006ed4:	b29b      	uxth	r3, r3
 8006ed6:	1ad3      	subs	r3, r2, r3
 8006ed8:	b29b      	uxth	r3, r3
 8006eda:	4619      	mov	r1, r3
 8006edc:	6878      	ldr	r0, [r7, #4]
 8006ede:	f000 f904 	bl	80070ea <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006ee2:	e0df      	b.n	80070a4 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006ef0:	b29b      	uxth	r3, r3
 8006ef2:	1ad3      	subs	r3, r2, r3
 8006ef4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006efe:	b29b      	uxth	r3, r3
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	f000 80d1 	beq.w	80070a8 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8006f06:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	f000 80cc 	beq.w	80070a8 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f18:	e853 3f00 	ldrex	r3, [r3]
 8006f1c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006f1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f20:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006f24:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	461a      	mov	r2, r3
 8006f2e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006f32:	647b      	str	r3, [r7, #68]	; 0x44
 8006f34:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f36:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006f38:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006f3a:	e841 2300 	strex	r3, r2, [r1]
 8006f3e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006f40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d1e4      	bne.n	8006f10 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	3308      	adds	r3, #8
 8006f4c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f50:	e853 3f00 	ldrex	r3, [r3]
 8006f54:	623b      	str	r3, [r7, #32]
   return(result);
 8006f56:	6a3b      	ldr	r3, [r7, #32]
 8006f58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006f5c:	f023 0301 	bic.w	r3, r3, #1
 8006f60:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	3308      	adds	r3, #8
 8006f6a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006f6e:	633a      	str	r2, [r7, #48]	; 0x30
 8006f70:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f72:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006f74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f76:	e841 2300 	strex	r3, r2, [r1]
 8006f7a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d1e1      	bne.n	8006f46 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2220      	movs	r2, #32
 8006f86:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2200      	movs	r2, #0
 8006f94:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f9c:	693b      	ldr	r3, [r7, #16]
 8006f9e:	e853 3f00 	ldrex	r3, [r3]
 8006fa2:	60fb      	str	r3, [r7, #12]
   return(result);
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	f023 0310 	bic.w	r3, r3, #16
 8006faa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	461a      	mov	r2, r3
 8006fb4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006fb8:	61fb      	str	r3, [r7, #28]
 8006fba:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fbc:	69b9      	ldr	r1, [r7, #24]
 8006fbe:	69fa      	ldr	r2, [r7, #28]
 8006fc0:	e841 2300 	strex	r3, r2, [r1]
 8006fc4:	617b      	str	r3, [r7, #20]
   return(result);
 8006fc6:	697b      	ldr	r3, [r7, #20]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d1e4      	bne.n	8006f96 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2202      	movs	r2, #2
 8006fd0:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006fd2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006fd6:	4619      	mov	r1, r3
 8006fd8:	6878      	ldr	r0, [r7, #4]
 8006fda:	f000 f886 	bl	80070ea <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006fde:	e063      	b.n	80070a8 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006fe0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006fe4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d00e      	beq.n	800700a <HAL_UART_IRQHandler+0x59e>
 8006fec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006ff0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d008      	beq.n	800700a <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007000:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007002:	6878      	ldr	r0, [r7, #4]
 8007004:	f000 ff29 	bl	8007e5a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007008:	e051      	b.n	80070ae <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800700a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800700e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007012:	2b00      	cmp	r3, #0
 8007014:	d014      	beq.n	8007040 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007016:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800701a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800701e:	2b00      	cmp	r3, #0
 8007020:	d105      	bne.n	800702e <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007022:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007026:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800702a:	2b00      	cmp	r3, #0
 800702c:	d008      	beq.n	8007040 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007032:	2b00      	cmp	r3, #0
 8007034:	d03a      	beq.n	80070ac <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800703a:	6878      	ldr	r0, [r7, #4]
 800703c:	4798      	blx	r3
    }
    return;
 800703e:	e035      	b.n	80070ac <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007040:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007044:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007048:	2b00      	cmp	r3, #0
 800704a:	d009      	beq.n	8007060 <HAL_UART_IRQHandler+0x5f4>
 800704c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007050:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007054:	2b00      	cmp	r3, #0
 8007056:	d003      	beq.n	8007060 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8007058:	6878      	ldr	r0, [r7, #4]
 800705a:	f000 fed3 	bl	8007e04 <UART_EndTransmit_IT>
    return;
 800705e:	e026      	b.n	80070ae <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007060:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007064:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007068:	2b00      	cmp	r3, #0
 800706a:	d009      	beq.n	8007080 <HAL_UART_IRQHandler+0x614>
 800706c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007070:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007074:	2b00      	cmp	r3, #0
 8007076:	d003      	beq.n	8007080 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007078:	6878      	ldr	r0, [r7, #4]
 800707a:	f000 ff00 	bl	8007e7e <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800707e:	e016      	b.n	80070ae <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007080:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007084:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007088:	2b00      	cmp	r3, #0
 800708a:	d010      	beq.n	80070ae <HAL_UART_IRQHandler+0x642>
 800708c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007090:	2b00      	cmp	r3, #0
 8007092:	da0c      	bge.n	80070ae <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007094:	6878      	ldr	r0, [r7, #4]
 8007096:	f000 fee9 	bl	8007e6c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800709a:	e008      	b.n	80070ae <HAL_UART_IRQHandler+0x642>
      return;
 800709c:	bf00      	nop
 800709e:	e006      	b.n	80070ae <HAL_UART_IRQHandler+0x642>
    return;
 80070a0:	bf00      	nop
 80070a2:	e004      	b.n	80070ae <HAL_UART_IRQHandler+0x642>
      return;
 80070a4:	bf00      	nop
 80070a6:	e002      	b.n	80070ae <HAL_UART_IRQHandler+0x642>
      return;
 80070a8:	bf00      	nop
 80070aa:	e000      	b.n	80070ae <HAL_UART_IRQHandler+0x642>
    return;
 80070ac:	bf00      	nop
  }
}
 80070ae:	37e8      	adds	r7, #232	; 0xe8
 80070b0:	46bd      	mov	sp, r7
 80070b2:	bd80      	pop	{r7, pc}

080070b4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80070b4:	b480      	push	{r7}
 80070b6:	b083      	sub	sp, #12
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80070bc:	bf00      	nop
 80070be:	370c      	adds	r7, #12
 80070c0:	46bd      	mov	sp, r7
 80070c2:	bc80      	pop	{r7}
 80070c4:	4770      	bx	lr

080070c6 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80070c6:	b480      	push	{r7}
 80070c8:	b083      	sub	sp, #12
 80070ca:	af00      	add	r7, sp, #0
 80070cc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80070ce:	bf00      	nop
 80070d0:	370c      	adds	r7, #12
 80070d2:	46bd      	mov	sp, r7
 80070d4:	bc80      	pop	{r7}
 80070d6:	4770      	bx	lr

080070d8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80070d8:	b480      	push	{r7}
 80070da:	b083      	sub	sp, #12
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80070e0:	bf00      	nop
 80070e2:	370c      	adds	r7, #12
 80070e4:	46bd      	mov	sp, r7
 80070e6:	bc80      	pop	{r7}
 80070e8:	4770      	bx	lr

080070ea <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80070ea:	b480      	push	{r7}
 80070ec:	b083      	sub	sp, #12
 80070ee:	af00      	add	r7, sp, #0
 80070f0:	6078      	str	r0, [r7, #4]
 80070f2:	460b      	mov	r3, r1
 80070f4:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80070f6:	bf00      	nop
 80070f8:	370c      	adds	r7, #12
 80070fa:	46bd      	mov	sp, r7
 80070fc:	bc80      	pop	{r7}
 80070fe:	4770      	bx	lr

08007100 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007100:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007104:	b08c      	sub	sp, #48	; 0x30
 8007106:	af00      	add	r7, sp, #0
 8007108:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800710a:	2300      	movs	r3, #0
 800710c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007110:	697b      	ldr	r3, [r7, #20]
 8007112:	689a      	ldr	r2, [r3, #8]
 8007114:	697b      	ldr	r3, [r7, #20]
 8007116:	691b      	ldr	r3, [r3, #16]
 8007118:	431a      	orrs	r2, r3
 800711a:	697b      	ldr	r3, [r7, #20]
 800711c:	695b      	ldr	r3, [r3, #20]
 800711e:	431a      	orrs	r2, r3
 8007120:	697b      	ldr	r3, [r7, #20]
 8007122:	69db      	ldr	r3, [r3, #28]
 8007124:	4313      	orrs	r3, r2
 8007126:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007128:	697b      	ldr	r3, [r7, #20]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	681a      	ldr	r2, [r3, #0]
 800712e:	4b94      	ldr	r3, [pc, #592]	; (8007380 <UART_SetConfig+0x280>)
 8007130:	4013      	ands	r3, r2
 8007132:	697a      	ldr	r2, [r7, #20]
 8007134:	6812      	ldr	r2, [r2, #0]
 8007136:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007138:	430b      	orrs	r3, r1
 800713a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800713c:	697b      	ldr	r3, [r7, #20]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	685b      	ldr	r3, [r3, #4]
 8007142:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007146:	697b      	ldr	r3, [r7, #20]
 8007148:	68da      	ldr	r2, [r3, #12]
 800714a:	697b      	ldr	r3, [r7, #20]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	430a      	orrs	r2, r1
 8007150:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007152:	697b      	ldr	r3, [r7, #20]
 8007154:	699b      	ldr	r3, [r3, #24]
 8007156:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007158:	697b      	ldr	r3, [r7, #20]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	4a89      	ldr	r2, [pc, #548]	; (8007384 <UART_SetConfig+0x284>)
 800715e:	4293      	cmp	r3, r2
 8007160:	d004      	beq.n	800716c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007162:	697b      	ldr	r3, [r7, #20]
 8007164:	6a1b      	ldr	r3, [r3, #32]
 8007166:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007168:	4313      	orrs	r3, r2
 800716a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800716c:	697b      	ldr	r3, [r7, #20]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	689b      	ldr	r3, [r3, #8]
 8007172:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8007176:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800717a:	697a      	ldr	r2, [r7, #20]
 800717c:	6812      	ldr	r2, [r2, #0]
 800717e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007180:	430b      	orrs	r3, r1
 8007182:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007184:	697b      	ldr	r3, [r7, #20]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800718a:	f023 010f 	bic.w	r1, r3, #15
 800718e:	697b      	ldr	r3, [r7, #20]
 8007190:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007192:	697b      	ldr	r3, [r7, #20]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	430a      	orrs	r2, r1
 8007198:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800719a:	697b      	ldr	r3, [r7, #20]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	4a7a      	ldr	r2, [pc, #488]	; (8007388 <UART_SetConfig+0x288>)
 80071a0:	4293      	cmp	r3, r2
 80071a2:	d127      	bne.n	80071f4 <UART_SetConfig+0xf4>
 80071a4:	2003      	movs	r0, #3
 80071a6:	f7ff fa59 	bl	800665c <LL_RCC_GetUSARTClockSource>
 80071aa:	4603      	mov	r3, r0
 80071ac:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 80071b0:	2b03      	cmp	r3, #3
 80071b2:	d81b      	bhi.n	80071ec <UART_SetConfig+0xec>
 80071b4:	a201      	add	r2, pc, #4	; (adr r2, 80071bc <UART_SetConfig+0xbc>)
 80071b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071ba:	bf00      	nop
 80071bc:	080071cd 	.word	0x080071cd
 80071c0:	080071dd 	.word	0x080071dd
 80071c4:	080071d5 	.word	0x080071d5
 80071c8:	080071e5 	.word	0x080071e5
 80071cc:	2301      	movs	r3, #1
 80071ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80071d2:	e080      	b.n	80072d6 <UART_SetConfig+0x1d6>
 80071d4:	2302      	movs	r3, #2
 80071d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80071da:	e07c      	b.n	80072d6 <UART_SetConfig+0x1d6>
 80071dc:	2304      	movs	r3, #4
 80071de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80071e2:	e078      	b.n	80072d6 <UART_SetConfig+0x1d6>
 80071e4:	2308      	movs	r3, #8
 80071e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80071ea:	e074      	b.n	80072d6 <UART_SetConfig+0x1d6>
 80071ec:	2310      	movs	r3, #16
 80071ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80071f2:	e070      	b.n	80072d6 <UART_SetConfig+0x1d6>
 80071f4:	697b      	ldr	r3, [r7, #20]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	4a64      	ldr	r2, [pc, #400]	; (800738c <UART_SetConfig+0x28c>)
 80071fa:	4293      	cmp	r3, r2
 80071fc:	d138      	bne.n	8007270 <UART_SetConfig+0x170>
 80071fe:	200c      	movs	r0, #12
 8007200:	f7ff fa2c 	bl	800665c <LL_RCC_GetUSARTClockSource>
 8007204:	4603      	mov	r3, r0
 8007206:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 800720a:	2b0c      	cmp	r3, #12
 800720c:	d82c      	bhi.n	8007268 <UART_SetConfig+0x168>
 800720e:	a201      	add	r2, pc, #4	; (adr r2, 8007214 <UART_SetConfig+0x114>)
 8007210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007214:	08007249 	.word	0x08007249
 8007218:	08007269 	.word	0x08007269
 800721c:	08007269 	.word	0x08007269
 8007220:	08007269 	.word	0x08007269
 8007224:	08007259 	.word	0x08007259
 8007228:	08007269 	.word	0x08007269
 800722c:	08007269 	.word	0x08007269
 8007230:	08007269 	.word	0x08007269
 8007234:	08007251 	.word	0x08007251
 8007238:	08007269 	.word	0x08007269
 800723c:	08007269 	.word	0x08007269
 8007240:	08007269 	.word	0x08007269
 8007244:	08007261 	.word	0x08007261
 8007248:	2300      	movs	r3, #0
 800724a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800724e:	e042      	b.n	80072d6 <UART_SetConfig+0x1d6>
 8007250:	2302      	movs	r3, #2
 8007252:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007256:	e03e      	b.n	80072d6 <UART_SetConfig+0x1d6>
 8007258:	2304      	movs	r3, #4
 800725a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800725e:	e03a      	b.n	80072d6 <UART_SetConfig+0x1d6>
 8007260:	2308      	movs	r3, #8
 8007262:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007266:	e036      	b.n	80072d6 <UART_SetConfig+0x1d6>
 8007268:	2310      	movs	r3, #16
 800726a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800726e:	e032      	b.n	80072d6 <UART_SetConfig+0x1d6>
 8007270:	697b      	ldr	r3, [r7, #20]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	4a43      	ldr	r2, [pc, #268]	; (8007384 <UART_SetConfig+0x284>)
 8007276:	4293      	cmp	r3, r2
 8007278:	d12a      	bne.n	80072d0 <UART_SetConfig+0x1d0>
 800727a:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800727e:	f7ff f9ff 	bl	8006680 <LL_RCC_GetLPUARTClockSource>
 8007282:	4603      	mov	r3, r0
 8007284:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007288:	d01a      	beq.n	80072c0 <UART_SetConfig+0x1c0>
 800728a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800728e:	d81b      	bhi.n	80072c8 <UART_SetConfig+0x1c8>
 8007290:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007294:	d00c      	beq.n	80072b0 <UART_SetConfig+0x1b0>
 8007296:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800729a:	d815      	bhi.n	80072c8 <UART_SetConfig+0x1c8>
 800729c:	2b00      	cmp	r3, #0
 800729e:	d003      	beq.n	80072a8 <UART_SetConfig+0x1a8>
 80072a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80072a4:	d008      	beq.n	80072b8 <UART_SetConfig+0x1b8>
 80072a6:	e00f      	b.n	80072c8 <UART_SetConfig+0x1c8>
 80072a8:	2300      	movs	r3, #0
 80072aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80072ae:	e012      	b.n	80072d6 <UART_SetConfig+0x1d6>
 80072b0:	2302      	movs	r3, #2
 80072b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80072b6:	e00e      	b.n	80072d6 <UART_SetConfig+0x1d6>
 80072b8:	2304      	movs	r3, #4
 80072ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80072be:	e00a      	b.n	80072d6 <UART_SetConfig+0x1d6>
 80072c0:	2308      	movs	r3, #8
 80072c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80072c6:	e006      	b.n	80072d6 <UART_SetConfig+0x1d6>
 80072c8:	2310      	movs	r3, #16
 80072ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80072ce:	e002      	b.n	80072d6 <UART_SetConfig+0x1d6>
 80072d0:	2310      	movs	r3, #16
 80072d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80072d6:	697b      	ldr	r3, [r7, #20]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	4a2a      	ldr	r2, [pc, #168]	; (8007384 <UART_SetConfig+0x284>)
 80072dc:	4293      	cmp	r3, r2
 80072de:	f040 80a4 	bne.w	800742a <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80072e2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80072e6:	2b08      	cmp	r3, #8
 80072e8:	d823      	bhi.n	8007332 <UART_SetConfig+0x232>
 80072ea:	a201      	add	r2, pc, #4	; (adr r2, 80072f0 <UART_SetConfig+0x1f0>)
 80072ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072f0:	08007315 	.word	0x08007315
 80072f4:	08007333 	.word	0x08007333
 80072f8:	0800731d 	.word	0x0800731d
 80072fc:	08007333 	.word	0x08007333
 8007300:	08007323 	.word	0x08007323
 8007304:	08007333 	.word	0x08007333
 8007308:	08007333 	.word	0x08007333
 800730c:	08007333 	.word	0x08007333
 8007310:	0800732b 	.word	0x0800732b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007314:	f7fd ff46 	bl	80051a4 <HAL_RCC_GetPCLK1Freq>
 8007318:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800731a:	e010      	b.n	800733e <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800731c:	4b1c      	ldr	r3, [pc, #112]	; (8007390 <UART_SetConfig+0x290>)
 800731e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007320:	e00d      	b.n	800733e <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007322:	f7fd fe8b 	bl	800503c <HAL_RCC_GetSysClockFreq>
 8007326:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007328:	e009      	b.n	800733e <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800732a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800732e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007330:	e005      	b.n	800733e <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 8007332:	2300      	movs	r3, #0
 8007334:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007336:	2301      	movs	r3, #1
 8007338:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800733c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800733e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007340:	2b00      	cmp	r3, #0
 8007342:	f000 8137 	beq.w	80075b4 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007346:	697b      	ldr	r3, [r7, #20]
 8007348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800734a:	4a12      	ldr	r2, [pc, #72]	; (8007394 <UART_SetConfig+0x294>)
 800734c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007350:	461a      	mov	r2, r3
 8007352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007354:	fbb3 f3f2 	udiv	r3, r3, r2
 8007358:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800735a:	697b      	ldr	r3, [r7, #20]
 800735c:	685a      	ldr	r2, [r3, #4]
 800735e:	4613      	mov	r3, r2
 8007360:	005b      	lsls	r3, r3, #1
 8007362:	4413      	add	r3, r2
 8007364:	69ba      	ldr	r2, [r7, #24]
 8007366:	429a      	cmp	r2, r3
 8007368:	d305      	bcc.n	8007376 <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800736a:	697b      	ldr	r3, [r7, #20]
 800736c:	685b      	ldr	r3, [r3, #4]
 800736e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007370:	69ba      	ldr	r2, [r7, #24]
 8007372:	429a      	cmp	r2, r3
 8007374:	d910      	bls.n	8007398 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 8007376:	2301      	movs	r3, #1
 8007378:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800737c:	e11a      	b.n	80075b4 <UART_SetConfig+0x4b4>
 800737e:	bf00      	nop
 8007380:	cfff69f3 	.word	0xcfff69f3
 8007384:	40008000 	.word	0x40008000
 8007388:	40013800 	.word	0x40013800
 800738c:	40004400 	.word	0x40004400
 8007390:	00f42400 	.word	0x00f42400
 8007394:	0800ce58 	.word	0x0800ce58
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800739a:	2200      	movs	r2, #0
 800739c:	60bb      	str	r3, [r7, #8]
 800739e:	60fa      	str	r2, [r7, #12]
 80073a0:	697b      	ldr	r3, [r7, #20]
 80073a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073a4:	4a8e      	ldr	r2, [pc, #568]	; (80075e0 <UART_SetConfig+0x4e0>)
 80073a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80073aa:	b29b      	uxth	r3, r3
 80073ac:	2200      	movs	r2, #0
 80073ae:	603b      	str	r3, [r7, #0]
 80073b0:	607a      	str	r2, [r7, #4]
 80073b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80073b6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80073ba:	f7f8 ff31 	bl	8000220 <__aeabi_uldivmod>
 80073be:	4602      	mov	r2, r0
 80073c0:	460b      	mov	r3, r1
 80073c2:	4610      	mov	r0, r2
 80073c4:	4619      	mov	r1, r3
 80073c6:	f04f 0200 	mov.w	r2, #0
 80073ca:	f04f 0300 	mov.w	r3, #0
 80073ce:	020b      	lsls	r3, r1, #8
 80073d0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80073d4:	0202      	lsls	r2, r0, #8
 80073d6:	6979      	ldr	r1, [r7, #20]
 80073d8:	6849      	ldr	r1, [r1, #4]
 80073da:	0849      	lsrs	r1, r1, #1
 80073dc:	2000      	movs	r0, #0
 80073de:	460c      	mov	r4, r1
 80073e0:	4605      	mov	r5, r0
 80073e2:	eb12 0804 	adds.w	r8, r2, r4
 80073e6:	eb43 0905 	adc.w	r9, r3, r5
 80073ea:	697b      	ldr	r3, [r7, #20]
 80073ec:	685b      	ldr	r3, [r3, #4]
 80073ee:	2200      	movs	r2, #0
 80073f0:	469a      	mov	sl, r3
 80073f2:	4693      	mov	fp, r2
 80073f4:	4652      	mov	r2, sl
 80073f6:	465b      	mov	r3, fp
 80073f8:	4640      	mov	r0, r8
 80073fa:	4649      	mov	r1, r9
 80073fc:	f7f8 ff10 	bl	8000220 <__aeabi_uldivmod>
 8007400:	4602      	mov	r2, r0
 8007402:	460b      	mov	r3, r1
 8007404:	4613      	mov	r3, r2
 8007406:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007408:	6a3b      	ldr	r3, [r7, #32]
 800740a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800740e:	d308      	bcc.n	8007422 <UART_SetConfig+0x322>
 8007410:	6a3b      	ldr	r3, [r7, #32]
 8007412:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007416:	d204      	bcs.n	8007422 <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 8007418:	697b      	ldr	r3, [r7, #20]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	6a3a      	ldr	r2, [r7, #32]
 800741e:	60da      	str	r2, [r3, #12]
 8007420:	e0c8      	b.n	80075b4 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 8007422:	2301      	movs	r3, #1
 8007424:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007428:	e0c4      	b.n	80075b4 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800742a:	697b      	ldr	r3, [r7, #20]
 800742c:	69db      	ldr	r3, [r3, #28]
 800742e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007432:	d167      	bne.n	8007504 <UART_SetConfig+0x404>
  {
    switch (clocksource)
 8007434:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007438:	2b08      	cmp	r3, #8
 800743a:	d828      	bhi.n	800748e <UART_SetConfig+0x38e>
 800743c:	a201      	add	r2, pc, #4	; (adr r2, 8007444 <UART_SetConfig+0x344>)
 800743e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007442:	bf00      	nop
 8007444:	08007469 	.word	0x08007469
 8007448:	08007471 	.word	0x08007471
 800744c:	08007479 	.word	0x08007479
 8007450:	0800748f 	.word	0x0800748f
 8007454:	0800747f 	.word	0x0800747f
 8007458:	0800748f 	.word	0x0800748f
 800745c:	0800748f 	.word	0x0800748f
 8007460:	0800748f 	.word	0x0800748f
 8007464:	08007487 	.word	0x08007487
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007468:	f7fd fe9c 	bl	80051a4 <HAL_RCC_GetPCLK1Freq>
 800746c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800746e:	e014      	b.n	800749a <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007470:	f7fd feaa 	bl	80051c8 <HAL_RCC_GetPCLK2Freq>
 8007474:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007476:	e010      	b.n	800749a <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007478:	4b5a      	ldr	r3, [pc, #360]	; (80075e4 <UART_SetConfig+0x4e4>)
 800747a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800747c:	e00d      	b.n	800749a <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800747e:	f7fd fddd 	bl	800503c <HAL_RCC_GetSysClockFreq>
 8007482:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007484:	e009      	b.n	800749a <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007486:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800748a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800748c:	e005      	b.n	800749a <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 800748e:	2300      	movs	r3, #0
 8007490:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007492:	2301      	movs	r3, #1
 8007494:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007498:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800749a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800749c:	2b00      	cmp	r3, #0
 800749e:	f000 8089 	beq.w	80075b4 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80074a2:	697b      	ldr	r3, [r7, #20]
 80074a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074a6:	4a4e      	ldr	r2, [pc, #312]	; (80075e0 <UART_SetConfig+0x4e0>)
 80074a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80074ac:	461a      	mov	r2, r3
 80074ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074b0:	fbb3 f3f2 	udiv	r3, r3, r2
 80074b4:	005a      	lsls	r2, r3, #1
 80074b6:	697b      	ldr	r3, [r7, #20]
 80074b8:	685b      	ldr	r3, [r3, #4]
 80074ba:	085b      	lsrs	r3, r3, #1
 80074bc:	441a      	add	r2, r3
 80074be:	697b      	ldr	r3, [r7, #20]
 80074c0:	685b      	ldr	r3, [r3, #4]
 80074c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80074c6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80074c8:	6a3b      	ldr	r3, [r7, #32]
 80074ca:	2b0f      	cmp	r3, #15
 80074cc:	d916      	bls.n	80074fc <UART_SetConfig+0x3fc>
 80074ce:	6a3b      	ldr	r3, [r7, #32]
 80074d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80074d4:	d212      	bcs.n	80074fc <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80074d6:	6a3b      	ldr	r3, [r7, #32]
 80074d8:	b29b      	uxth	r3, r3
 80074da:	f023 030f 	bic.w	r3, r3, #15
 80074de:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80074e0:	6a3b      	ldr	r3, [r7, #32]
 80074e2:	085b      	lsrs	r3, r3, #1
 80074e4:	b29b      	uxth	r3, r3
 80074e6:	f003 0307 	and.w	r3, r3, #7
 80074ea:	b29a      	uxth	r2, r3
 80074ec:	8bfb      	ldrh	r3, [r7, #30]
 80074ee:	4313      	orrs	r3, r2
 80074f0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80074f2:	697b      	ldr	r3, [r7, #20]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	8bfa      	ldrh	r2, [r7, #30]
 80074f8:	60da      	str	r2, [r3, #12]
 80074fa:	e05b      	b.n	80075b4 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 80074fc:	2301      	movs	r3, #1
 80074fe:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007502:	e057      	b.n	80075b4 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007504:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007508:	2b08      	cmp	r3, #8
 800750a:	d828      	bhi.n	800755e <UART_SetConfig+0x45e>
 800750c:	a201      	add	r2, pc, #4	; (adr r2, 8007514 <UART_SetConfig+0x414>)
 800750e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007512:	bf00      	nop
 8007514:	08007539 	.word	0x08007539
 8007518:	08007541 	.word	0x08007541
 800751c:	08007549 	.word	0x08007549
 8007520:	0800755f 	.word	0x0800755f
 8007524:	0800754f 	.word	0x0800754f
 8007528:	0800755f 	.word	0x0800755f
 800752c:	0800755f 	.word	0x0800755f
 8007530:	0800755f 	.word	0x0800755f
 8007534:	08007557 	.word	0x08007557
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007538:	f7fd fe34 	bl	80051a4 <HAL_RCC_GetPCLK1Freq>
 800753c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800753e:	e014      	b.n	800756a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007540:	f7fd fe42 	bl	80051c8 <HAL_RCC_GetPCLK2Freq>
 8007544:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007546:	e010      	b.n	800756a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007548:	4b26      	ldr	r3, [pc, #152]	; (80075e4 <UART_SetConfig+0x4e4>)
 800754a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800754c:	e00d      	b.n	800756a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800754e:	f7fd fd75 	bl	800503c <HAL_RCC_GetSysClockFreq>
 8007552:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007554:	e009      	b.n	800756a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007556:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800755a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800755c:	e005      	b.n	800756a <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 800755e:	2300      	movs	r3, #0
 8007560:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007562:	2301      	movs	r3, #1
 8007564:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007568:	bf00      	nop
    }

    if (pclk != 0U)
 800756a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800756c:	2b00      	cmp	r3, #0
 800756e:	d021      	beq.n	80075b4 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007570:	697b      	ldr	r3, [r7, #20]
 8007572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007574:	4a1a      	ldr	r2, [pc, #104]	; (80075e0 <UART_SetConfig+0x4e0>)
 8007576:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800757a:	461a      	mov	r2, r3
 800757c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800757e:	fbb3 f2f2 	udiv	r2, r3, r2
 8007582:	697b      	ldr	r3, [r7, #20]
 8007584:	685b      	ldr	r3, [r3, #4]
 8007586:	085b      	lsrs	r3, r3, #1
 8007588:	441a      	add	r2, r3
 800758a:	697b      	ldr	r3, [r7, #20]
 800758c:	685b      	ldr	r3, [r3, #4]
 800758e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007592:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007594:	6a3b      	ldr	r3, [r7, #32]
 8007596:	2b0f      	cmp	r3, #15
 8007598:	d909      	bls.n	80075ae <UART_SetConfig+0x4ae>
 800759a:	6a3b      	ldr	r3, [r7, #32]
 800759c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80075a0:	d205      	bcs.n	80075ae <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80075a2:	6a3b      	ldr	r3, [r7, #32]
 80075a4:	b29a      	uxth	r2, r3
 80075a6:	697b      	ldr	r3, [r7, #20]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	60da      	str	r2, [r3, #12]
 80075ac:	e002      	b.n	80075b4 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 80075ae:	2301      	movs	r3, #1
 80075b0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80075b4:	697b      	ldr	r3, [r7, #20]
 80075b6:	2201      	movs	r2, #1
 80075b8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80075bc:	697b      	ldr	r3, [r7, #20]
 80075be:	2201      	movs	r2, #1
 80075c0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80075c4:	697b      	ldr	r3, [r7, #20]
 80075c6:	2200      	movs	r2, #0
 80075c8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80075ca:	697b      	ldr	r3, [r7, #20]
 80075cc:	2200      	movs	r2, #0
 80075ce:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80075d0:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80075d4:	4618      	mov	r0, r3
 80075d6:	3730      	adds	r7, #48	; 0x30
 80075d8:	46bd      	mov	sp, r7
 80075da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80075de:	bf00      	nop
 80075e0:	0800ce58 	.word	0x0800ce58
 80075e4:	00f42400 	.word	0x00f42400

080075e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80075e8:	b480      	push	{r7}
 80075ea:	b083      	sub	sp, #12
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075f4:	f003 0301 	and.w	r3, r3, #1
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d00a      	beq.n	8007612 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	685b      	ldr	r3, [r3, #4]
 8007602:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	430a      	orrs	r2, r1
 8007610:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007616:	f003 0302 	and.w	r3, r3, #2
 800761a:	2b00      	cmp	r3, #0
 800761c:	d00a      	beq.n	8007634 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	685b      	ldr	r3, [r3, #4]
 8007624:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	430a      	orrs	r2, r1
 8007632:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007638:	f003 0304 	and.w	r3, r3, #4
 800763c:	2b00      	cmp	r3, #0
 800763e:	d00a      	beq.n	8007656 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	685b      	ldr	r3, [r3, #4]
 8007646:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	430a      	orrs	r2, r1
 8007654:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800765a:	f003 0308 	and.w	r3, r3, #8
 800765e:	2b00      	cmp	r3, #0
 8007660:	d00a      	beq.n	8007678 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	685b      	ldr	r3, [r3, #4]
 8007668:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	430a      	orrs	r2, r1
 8007676:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800767c:	f003 0310 	and.w	r3, r3, #16
 8007680:	2b00      	cmp	r3, #0
 8007682:	d00a      	beq.n	800769a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	689b      	ldr	r3, [r3, #8]
 800768a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	430a      	orrs	r2, r1
 8007698:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800769e:	f003 0320 	and.w	r3, r3, #32
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d00a      	beq.n	80076bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	689b      	ldr	r3, [r3, #8]
 80076ac:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	430a      	orrs	r2, r1
 80076ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d01a      	beq.n	80076fe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	685b      	ldr	r3, [r3, #4]
 80076ce:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	430a      	orrs	r2, r1
 80076dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80076e6:	d10a      	bne.n	80076fe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	685b      	ldr	r3, [r3, #4]
 80076ee:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	430a      	orrs	r2, r1
 80076fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007702:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007706:	2b00      	cmp	r3, #0
 8007708:	d00a      	beq.n	8007720 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	685b      	ldr	r3, [r3, #4]
 8007710:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	430a      	orrs	r2, r1
 800771e:	605a      	str	r2, [r3, #4]
  }
}
 8007720:	bf00      	nop
 8007722:	370c      	adds	r7, #12
 8007724:	46bd      	mov	sp, r7
 8007726:	bc80      	pop	{r7}
 8007728:	4770      	bx	lr

0800772a <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800772a:	b580      	push	{r7, lr}
 800772c:	b086      	sub	sp, #24
 800772e:	af02      	add	r7, sp, #8
 8007730:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	2200      	movs	r2, #0
 8007736:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800773a:	f7fb f9b9 	bl	8002ab0 <HAL_GetTick>
 800773e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	f003 0308 	and.w	r3, r3, #8
 800774a:	2b08      	cmp	r3, #8
 800774c:	d10e      	bne.n	800776c <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800774e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007752:	9300      	str	r3, [sp, #0]
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	2200      	movs	r2, #0
 8007758:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800775c:	6878      	ldr	r0, [r7, #4]
 800775e:	f000 f832 	bl	80077c6 <UART_WaitOnFlagUntilTimeout>
 8007762:	4603      	mov	r3, r0
 8007764:	2b00      	cmp	r3, #0
 8007766:	d001      	beq.n	800776c <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007768:	2303      	movs	r3, #3
 800776a:	e028      	b.n	80077be <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	f003 0304 	and.w	r3, r3, #4
 8007776:	2b04      	cmp	r3, #4
 8007778:	d10e      	bne.n	8007798 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800777a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800777e:	9300      	str	r3, [sp, #0]
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	2200      	movs	r2, #0
 8007784:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007788:	6878      	ldr	r0, [r7, #4]
 800778a:	f000 f81c 	bl	80077c6 <UART_WaitOnFlagUntilTimeout>
 800778e:	4603      	mov	r3, r0
 8007790:	2b00      	cmp	r3, #0
 8007792:	d001      	beq.n	8007798 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007794:	2303      	movs	r3, #3
 8007796:	e012      	b.n	80077be <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2220      	movs	r2, #32
 800779c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2220      	movs	r2, #32
 80077a4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2200      	movs	r2, #0
 80077ac:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	2200      	movs	r2, #0
 80077b2:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2200      	movs	r2, #0
 80077b8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80077bc:	2300      	movs	r3, #0
}
 80077be:	4618      	mov	r0, r3
 80077c0:	3710      	adds	r7, #16
 80077c2:	46bd      	mov	sp, r7
 80077c4:	bd80      	pop	{r7, pc}

080077c6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80077c6:	b580      	push	{r7, lr}
 80077c8:	b09c      	sub	sp, #112	; 0x70
 80077ca:	af00      	add	r7, sp, #0
 80077cc:	60f8      	str	r0, [r7, #12]
 80077ce:	60b9      	str	r1, [r7, #8]
 80077d0:	603b      	str	r3, [r7, #0]
 80077d2:	4613      	mov	r3, r2
 80077d4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80077d6:	e0a9      	b.n	800792c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80077d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80077da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80077de:	f000 80a5 	beq.w	800792c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80077e2:	f7fb f965 	bl	8002ab0 <HAL_GetTick>
 80077e6:	4602      	mov	r2, r0
 80077e8:	683b      	ldr	r3, [r7, #0]
 80077ea:	1ad3      	subs	r3, r2, r3
 80077ec:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80077ee:	429a      	cmp	r2, r3
 80077f0:	d302      	bcc.n	80077f8 <UART_WaitOnFlagUntilTimeout+0x32>
 80077f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d140      	bne.n	800787a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007800:	e853 3f00 	ldrex	r3, [r3]
 8007804:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007806:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007808:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800780c:	667b      	str	r3, [r7, #100]	; 0x64
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	461a      	mov	r2, r3
 8007814:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007816:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007818:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800781a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800781c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800781e:	e841 2300 	strex	r3, r2, [r1]
 8007822:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007824:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007826:	2b00      	cmp	r3, #0
 8007828:	d1e6      	bne.n	80077f8 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	3308      	adds	r3, #8
 8007830:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007832:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007834:	e853 3f00 	ldrex	r3, [r3]
 8007838:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800783a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800783c:	f023 0301 	bic.w	r3, r3, #1
 8007840:	663b      	str	r3, [r7, #96]	; 0x60
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	3308      	adds	r3, #8
 8007848:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800784a:	64ba      	str	r2, [r7, #72]	; 0x48
 800784c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800784e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007850:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007852:	e841 2300 	strex	r3, r2, [r1]
 8007856:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007858:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800785a:	2b00      	cmp	r3, #0
 800785c:	d1e5      	bne.n	800782a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	2220      	movs	r2, #32
 8007862:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	2220      	movs	r2, #32
 800786a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	2200      	movs	r2, #0
 8007872:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

        return HAL_TIMEOUT;
 8007876:	2303      	movs	r3, #3
 8007878:	e069      	b.n	800794e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	f003 0304 	and.w	r3, r3, #4
 8007884:	2b00      	cmp	r3, #0
 8007886:	d051      	beq.n	800792c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	69db      	ldr	r3, [r3, #28]
 800788e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007892:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007896:	d149      	bne.n	800792c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80078a0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078aa:	e853 3f00 	ldrex	r3, [r3]
 80078ae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80078b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078b2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80078b6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	461a      	mov	r2, r3
 80078be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078c0:	637b      	str	r3, [r7, #52]	; 0x34
 80078c2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078c4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80078c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80078c8:	e841 2300 	strex	r3, r2, [r1]
 80078cc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80078ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d1e6      	bne.n	80078a2 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	3308      	adds	r3, #8
 80078da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078dc:	697b      	ldr	r3, [r7, #20]
 80078de:	e853 3f00 	ldrex	r3, [r3]
 80078e2:	613b      	str	r3, [r7, #16]
   return(result);
 80078e4:	693b      	ldr	r3, [r7, #16]
 80078e6:	f023 0301 	bic.w	r3, r3, #1
 80078ea:	66bb      	str	r3, [r7, #104]	; 0x68
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	3308      	adds	r3, #8
 80078f2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80078f4:	623a      	str	r2, [r7, #32]
 80078f6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078f8:	69f9      	ldr	r1, [r7, #28]
 80078fa:	6a3a      	ldr	r2, [r7, #32]
 80078fc:	e841 2300 	strex	r3, r2, [r1]
 8007900:	61bb      	str	r3, [r7, #24]
   return(result);
 8007902:	69bb      	ldr	r3, [r7, #24]
 8007904:	2b00      	cmp	r3, #0
 8007906:	d1e5      	bne.n	80078d4 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	2220      	movs	r2, #32
 800790c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	2220      	movs	r2, #32
 8007914:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	2220      	movs	r2, #32
 800791c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	2200      	movs	r2, #0
 8007924:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8007928:	2303      	movs	r3, #3
 800792a:	e010      	b.n	800794e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	69da      	ldr	r2, [r3, #28]
 8007932:	68bb      	ldr	r3, [r7, #8]
 8007934:	4013      	ands	r3, r2
 8007936:	68ba      	ldr	r2, [r7, #8]
 8007938:	429a      	cmp	r2, r3
 800793a:	bf0c      	ite	eq
 800793c:	2301      	moveq	r3, #1
 800793e:	2300      	movne	r3, #0
 8007940:	b2db      	uxtb	r3, r3
 8007942:	461a      	mov	r2, r3
 8007944:	79fb      	ldrb	r3, [r7, #7]
 8007946:	429a      	cmp	r2, r3
 8007948:	f43f af46 	beq.w	80077d8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800794c:	2300      	movs	r3, #0
}
 800794e:	4618      	mov	r0, r3
 8007950:	3770      	adds	r7, #112	; 0x70
 8007952:	46bd      	mov	sp, r7
 8007954:	bd80      	pop	{r7, pc}
	...

08007958 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007958:	b580      	push	{r7, lr}
 800795a:	b096      	sub	sp, #88	; 0x58
 800795c:	af00      	add	r7, sp, #0
 800795e:	60f8      	str	r0, [r7, #12]
 8007960:	60b9      	str	r1, [r7, #8]
 8007962:	4613      	mov	r3, r2
 8007964:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	68ba      	ldr	r2, [r7, #8]
 800796a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	88fa      	ldrh	r2, [r7, #6]
 8007970:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	2200      	movs	r2, #0
 8007978:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	2222      	movs	r2, #34	; 0x22
 8007980:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if (huart->hdmarx != NULL)
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800798a:	2b00      	cmp	r3, #0
 800798c:	d02d      	beq.n	80079ea <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007994:	4a40      	ldr	r2, [pc, #256]	; (8007a98 <UART_Start_Receive_DMA+0x140>)
 8007996:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800799e:	4a3f      	ldr	r2, [pc, #252]	; (8007a9c <UART_Start_Receive_DMA+0x144>)
 80079a0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80079a8:	4a3d      	ldr	r2, [pc, #244]	; (8007aa0 <UART_Start_Receive_DMA+0x148>)
 80079aa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80079b2:	2200      	movs	r2, #0
 80079b4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	3324      	adds	r3, #36	; 0x24
 80079c2:	4619      	mov	r1, r3
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079c8:	461a      	mov	r2, r3
 80079ca:	88fb      	ldrh	r3, [r7, #6]
 80079cc:	f7fb ff4e 	bl	800386c <HAL_DMA_Start_IT>
 80079d0:	4603      	mov	r3, r0
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d009      	beq.n	80079ea <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	2210      	movs	r2, #16
 80079da:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	2220      	movs	r2, #32
 80079e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      return HAL_ERROR;
 80079e6:	2301      	movs	r3, #1
 80079e8:	e051      	b.n	8007a8e <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	691b      	ldr	r3, [r3, #16]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d018      	beq.n	8007a24 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079fa:	e853 3f00 	ldrex	r3, [r3]
 80079fe:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007a00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007a06:	657b      	str	r3, [r7, #84]	; 0x54
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	461a      	mov	r2, r3
 8007a0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007a10:	64bb      	str	r3, [r7, #72]	; 0x48
 8007a12:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a14:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007a16:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007a18:	e841 2300 	strex	r3, r2, [r1]
 8007a1c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007a1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d1e6      	bne.n	80079f2 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	3308      	adds	r3, #8
 8007a2a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a2e:	e853 3f00 	ldrex	r3, [r3]
 8007a32:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a36:	f043 0301 	orr.w	r3, r3, #1
 8007a3a:	653b      	str	r3, [r7, #80]	; 0x50
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	3308      	adds	r3, #8
 8007a42:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007a44:	637a      	str	r2, [r7, #52]	; 0x34
 8007a46:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a48:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007a4a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007a4c:	e841 2300 	strex	r3, r2, [r1]
 8007a50:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007a52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d1e5      	bne.n	8007a24 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	3308      	adds	r3, #8
 8007a5e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a60:	697b      	ldr	r3, [r7, #20]
 8007a62:	e853 3f00 	ldrex	r3, [r3]
 8007a66:	613b      	str	r3, [r7, #16]
   return(result);
 8007a68:	693b      	ldr	r3, [r7, #16]
 8007a6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	3308      	adds	r3, #8
 8007a76:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007a78:	623a      	str	r2, [r7, #32]
 8007a7a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a7c:	69f9      	ldr	r1, [r7, #28]
 8007a7e:	6a3a      	ldr	r2, [r7, #32]
 8007a80:	e841 2300 	strex	r3, r2, [r1]
 8007a84:	61bb      	str	r3, [r7, #24]
   return(result);
 8007a86:	69bb      	ldr	r3, [r7, #24]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d1e5      	bne.n	8007a58 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8007a8c:	2300      	movs	r3, #0
}
 8007a8e:	4618      	mov	r0, r3
 8007a90:	3758      	adds	r7, #88	; 0x58
 8007a92:	46bd      	mov	sp, r7
 8007a94:	bd80      	pop	{r7, pc}
 8007a96:	bf00      	nop
 8007a98:	08007bef 	.word	0x08007bef
 8007a9c:	08007d1b 	.word	0x08007d1b
 8007aa0:	08007d59 	.word	0x08007d59

08007aa4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007aa4:	b480      	push	{r7}
 8007aa6:	b08f      	sub	sp, #60	; 0x3c
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ab2:	6a3b      	ldr	r3, [r7, #32]
 8007ab4:	e853 3f00 	ldrex	r3, [r3]
 8007ab8:	61fb      	str	r3, [r7, #28]
   return(result);
 8007aba:	69fb      	ldr	r3, [r7, #28]
 8007abc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007ac0:	637b      	str	r3, [r7, #52]	; 0x34
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	461a      	mov	r2, r3
 8007ac8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007aca:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007acc:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ace:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007ad0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007ad2:	e841 2300 	strex	r3, r2, [r1]
 8007ad6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d1e6      	bne.n	8007aac <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	3308      	adds	r3, #8
 8007ae4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	e853 3f00 	ldrex	r3, [r3]
 8007aec:	60bb      	str	r3, [r7, #8]
   return(result);
 8007aee:	68bb      	ldr	r3, [r7, #8]
 8007af0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8007af4:	633b      	str	r3, [r7, #48]	; 0x30
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	3308      	adds	r3, #8
 8007afc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007afe:	61ba      	str	r2, [r7, #24]
 8007b00:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b02:	6979      	ldr	r1, [r7, #20]
 8007b04:	69ba      	ldr	r2, [r7, #24]
 8007b06:	e841 2300 	strex	r3, r2, [r1]
 8007b0a:	613b      	str	r3, [r7, #16]
   return(result);
 8007b0c:	693b      	ldr	r3, [r7, #16]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d1e5      	bne.n	8007ade <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	2220      	movs	r2, #32
 8007b16:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 8007b1a:	bf00      	nop
 8007b1c:	373c      	adds	r7, #60	; 0x3c
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	bc80      	pop	{r7}
 8007b22:	4770      	bx	lr

08007b24 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007b24:	b480      	push	{r7}
 8007b26:	b095      	sub	sp, #84	; 0x54
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b34:	e853 3f00 	ldrex	r3, [r3]
 8007b38:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b3c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007b40:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	461a      	mov	r2, r3
 8007b48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b4a:	643b      	str	r3, [r7, #64]	; 0x40
 8007b4c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b4e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007b50:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007b52:	e841 2300 	strex	r3, r2, [r1]
 8007b56:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007b58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d1e6      	bne.n	8007b2c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	3308      	adds	r3, #8
 8007b64:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b66:	6a3b      	ldr	r3, [r7, #32]
 8007b68:	e853 3f00 	ldrex	r3, [r3]
 8007b6c:	61fb      	str	r3, [r7, #28]
   return(result);
 8007b6e:	69fb      	ldr	r3, [r7, #28]
 8007b70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007b74:	f023 0301 	bic.w	r3, r3, #1
 8007b78:	64bb      	str	r3, [r7, #72]	; 0x48
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	3308      	adds	r3, #8
 8007b80:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007b82:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007b84:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b86:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007b88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007b8a:	e841 2300 	strex	r3, r2, [r1]
 8007b8e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d1e3      	bne.n	8007b5e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b9a:	2b01      	cmp	r3, #1
 8007b9c:	d118      	bne.n	8007bd0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	e853 3f00 	ldrex	r3, [r3]
 8007baa:	60bb      	str	r3, [r7, #8]
   return(result);
 8007bac:	68bb      	ldr	r3, [r7, #8]
 8007bae:	f023 0310 	bic.w	r3, r3, #16
 8007bb2:	647b      	str	r3, [r7, #68]	; 0x44
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	461a      	mov	r2, r3
 8007bba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007bbc:	61bb      	str	r3, [r7, #24]
 8007bbe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bc0:	6979      	ldr	r1, [r7, #20]
 8007bc2:	69ba      	ldr	r2, [r7, #24]
 8007bc4:	e841 2300 	strex	r3, r2, [r1]
 8007bc8:	613b      	str	r3, [r7, #16]
   return(result);
 8007bca:	693b      	ldr	r3, [r7, #16]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d1e6      	bne.n	8007b9e <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2220      	movs	r2, #32
 8007bd4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	2200      	movs	r2, #0
 8007bdc:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	2200      	movs	r2, #0
 8007be2:	675a      	str	r2, [r3, #116]	; 0x74
}
 8007be4:	bf00      	nop
 8007be6:	3754      	adds	r7, #84	; 0x54
 8007be8:	46bd      	mov	sp, r7
 8007bea:	bc80      	pop	{r7}
 8007bec:	4770      	bx	lr

08007bee <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007bee:	b580      	push	{r7, lr}
 8007bf0:	b09c      	sub	sp, #112	; 0x70
 8007bf2:	af00      	add	r7, sp, #0
 8007bf4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bfa:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	f003 0320 	and.w	r3, r3, #32
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d171      	bne.n	8007cee <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8007c0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007c12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c1a:	e853 3f00 	ldrex	r3, [r3]
 8007c1e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007c20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007c22:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007c26:	66bb      	str	r3, [r7, #104]	; 0x68
 8007c28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	461a      	mov	r2, r3
 8007c2e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007c30:	65bb      	str	r3, [r7, #88]	; 0x58
 8007c32:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c34:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007c36:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007c38:	e841 2300 	strex	r3, r2, [r1]
 8007c3c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007c3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d1e6      	bne.n	8007c12 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	3308      	adds	r3, #8
 8007c4a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c4e:	e853 3f00 	ldrex	r3, [r3]
 8007c52:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007c54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c56:	f023 0301 	bic.w	r3, r3, #1
 8007c5a:	667b      	str	r3, [r7, #100]	; 0x64
 8007c5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	3308      	adds	r3, #8
 8007c62:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007c64:	647a      	str	r2, [r7, #68]	; 0x44
 8007c66:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c68:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007c6a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007c6c:	e841 2300 	strex	r3, r2, [r1]
 8007c70:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007c72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d1e5      	bne.n	8007c44 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007c78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	3308      	adds	r3, #8
 8007c7e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c82:	e853 3f00 	ldrex	r3, [r3]
 8007c86:	623b      	str	r3, [r7, #32]
   return(result);
 8007c88:	6a3b      	ldr	r3, [r7, #32]
 8007c8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c8e:	663b      	str	r3, [r7, #96]	; 0x60
 8007c90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	3308      	adds	r3, #8
 8007c96:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007c98:	633a      	str	r2, [r7, #48]	; 0x30
 8007c9a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c9c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007c9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ca0:	e841 2300 	strex	r3, r2, [r1]
 8007ca4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007ca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d1e5      	bne.n	8007c78 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007cac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007cae:	2220      	movs	r2, #32
 8007cb0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007cb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007cb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007cb8:	2b01      	cmp	r3, #1
 8007cba:	d118      	bne.n	8007cee <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007cbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cc2:	693b      	ldr	r3, [r7, #16]
 8007cc4:	e853 3f00 	ldrex	r3, [r3]
 8007cc8:	60fb      	str	r3, [r7, #12]
   return(result);
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	f023 0310 	bic.w	r3, r3, #16
 8007cd0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007cd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	461a      	mov	r2, r3
 8007cd8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007cda:	61fb      	str	r3, [r7, #28]
 8007cdc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cde:	69b9      	ldr	r1, [r7, #24]
 8007ce0:	69fa      	ldr	r2, [r7, #28]
 8007ce2:	e841 2300 	strex	r3, r2, [r1]
 8007ce6:	617b      	str	r3, [r7, #20]
   return(result);
 8007ce8:	697b      	ldr	r3, [r7, #20]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d1e6      	bne.n	8007cbc <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007cee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007cf0:	2200      	movs	r2, #0
 8007cf2:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007cf4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007cf6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007cf8:	2b01      	cmp	r3, #1
 8007cfa:	d107      	bne.n	8007d0c <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007cfc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007cfe:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007d02:	4619      	mov	r1, r3
 8007d04:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007d06:	f7ff f9f0 	bl	80070ea <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007d0a:	e002      	b.n	8007d12 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8007d0c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007d0e:	f7f9 f897 	bl	8000e40 <HAL_UART_RxCpltCallback>
}
 8007d12:	bf00      	nop
 8007d14:	3770      	adds	r7, #112	; 0x70
 8007d16:	46bd      	mov	sp, r7
 8007d18:	bd80      	pop	{r7, pc}

08007d1a <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007d1a:	b580      	push	{r7, lr}
 8007d1c:	b084      	sub	sp, #16
 8007d1e:	af00      	add	r7, sp, #0
 8007d20:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d26:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	2201      	movs	r2, #1
 8007d2c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d32:	2b01      	cmp	r3, #1
 8007d34:	d109      	bne.n	8007d4a <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007d3c:	085b      	lsrs	r3, r3, #1
 8007d3e:	b29b      	uxth	r3, r3
 8007d40:	4619      	mov	r1, r3
 8007d42:	68f8      	ldr	r0, [r7, #12]
 8007d44:	f7ff f9d1 	bl	80070ea <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007d48:	e002      	b.n	8007d50 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8007d4a:	68f8      	ldr	r0, [r7, #12]
 8007d4c:	f7ff f9bb 	bl	80070c6 <HAL_UART_RxHalfCpltCallback>
}
 8007d50:	bf00      	nop
 8007d52:	3710      	adds	r7, #16
 8007d54:	46bd      	mov	sp, r7
 8007d56:	bd80      	pop	{r7, pc}

08007d58 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b086      	sub	sp, #24
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d64:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8007d66:	697b      	ldr	r3, [r7, #20]
 8007d68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d6c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8007d6e:	697b      	ldr	r3, [r7, #20]
 8007d70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007d74:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8007d76:	697b      	ldr	r3, [r7, #20]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	689b      	ldr	r3, [r3, #8]
 8007d7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d80:	2b80      	cmp	r3, #128	; 0x80
 8007d82:	d109      	bne.n	8007d98 <UART_DMAError+0x40>
 8007d84:	693b      	ldr	r3, [r7, #16]
 8007d86:	2b21      	cmp	r3, #33	; 0x21
 8007d88:	d106      	bne.n	8007d98 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8007d8a:	697b      	ldr	r3, [r7, #20]
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8007d92:	6978      	ldr	r0, [r7, #20]
 8007d94:	f7ff fe86 	bl	8007aa4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007d98:	697b      	ldr	r3, [r7, #20]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	689b      	ldr	r3, [r3, #8]
 8007d9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007da2:	2b40      	cmp	r3, #64	; 0x40
 8007da4:	d109      	bne.n	8007dba <UART_DMAError+0x62>
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	2b22      	cmp	r3, #34	; 0x22
 8007daa:	d106      	bne.n	8007dba <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8007dac:	697b      	ldr	r3, [r7, #20]
 8007dae:	2200      	movs	r2, #0
 8007db0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8007db4:	6978      	ldr	r0, [r7, #20]
 8007db6:	f7ff feb5 	bl	8007b24 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007dba:	697b      	ldr	r3, [r7, #20]
 8007dbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007dc0:	f043 0210 	orr.w	r2, r3, #16
 8007dc4:	697b      	ldr	r3, [r7, #20]
 8007dc6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007dca:	6978      	ldr	r0, [r7, #20]
 8007dcc:	f7ff f984 	bl	80070d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007dd0:	bf00      	nop
 8007dd2:	3718      	adds	r7, #24
 8007dd4:	46bd      	mov	sp, r7
 8007dd6:	bd80      	pop	{r7, pc}

08007dd8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007dd8:	b580      	push	{r7, lr}
 8007dda:	b084      	sub	sp, #16
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007de4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	2200      	movs	r2, #0
 8007dea:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	2200      	movs	r2, #0
 8007df2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007df6:	68f8      	ldr	r0, [r7, #12]
 8007df8:	f7ff f96e 	bl	80070d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007dfc:	bf00      	nop
 8007dfe:	3710      	adds	r7, #16
 8007e00:	46bd      	mov	sp, r7
 8007e02:	bd80      	pop	{r7, pc}

08007e04 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007e04:	b580      	push	{r7, lr}
 8007e06:	b088      	sub	sp, #32
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	e853 3f00 	ldrex	r3, [r3]
 8007e18:	60bb      	str	r3, [r7, #8]
   return(result);
 8007e1a:	68bb      	ldr	r3, [r7, #8]
 8007e1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e20:	61fb      	str	r3, [r7, #28]
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	461a      	mov	r2, r3
 8007e28:	69fb      	ldr	r3, [r7, #28]
 8007e2a:	61bb      	str	r3, [r7, #24]
 8007e2c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e2e:	6979      	ldr	r1, [r7, #20]
 8007e30:	69ba      	ldr	r2, [r7, #24]
 8007e32:	e841 2300 	strex	r3, r2, [r1]
 8007e36:	613b      	str	r3, [r7, #16]
   return(result);
 8007e38:	693b      	ldr	r3, [r7, #16]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d1e6      	bne.n	8007e0c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	2220      	movs	r2, #32
 8007e42:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	2200      	movs	r2, #0
 8007e4a:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007e4c:	6878      	ldr	r0, [r7, #4]
 8007e4e:	f7ff f931 	bl	80070b4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007e52:	bf00      	nop
 8007e54:	3720      	adds	r7, #32
 8007e56:	46bd      	mov	sp, r7
 8007e58:	bd80      	pop	{r7, pc}

08007e5a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007e5a:	b480      	push	{r7}
 8007e5c:	b083      	sub	sp, #12
 8007e5e:	af00      	add	r7, sp, #0
 8007e60:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007e62:	bf00      	nop
 8007e64:	370c      	adds	r7, #12
 8007e66:	46bd      	mov	sp, r7
 8007e68:	bc80      	pop	{r7}
 8007e6a:	4770      	bx	lr

08007e6c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007e6c:	b480      	push	{r7}
 8007e6e:	b083      	sub	sp, #12
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007e74:	bf00      	nop
 8007e76:	370c      	adds	r7, #12
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	bc80      	pop	{r7}
 8007e7c:	4770      	bx	lr

08007e7e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007e7e:	b480      	push	{r7}
 8007e80:	b083      	sub	sp, #12
 8007e82:	af00      	add	r7, sp, #0
 8007e84:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007e86:	bf00      	nop
 8007e88:	370c      	adds	r7, #12
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	bc80      	pop	{r7}
 8007e8e:	4770      	bx	lr

08007e90 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007e90:	b480      	push	{r7}
 8007e92:	b085      	sub	sp, #20
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007e9e:	2b01      	cmp	r3, #1
 8007ea0:	d101      	bne.n	8007ea6 <HAL_UARTEx_DisableFifoMode+0x16>
 8007ea2:	2302      	movs	r3, #2
 8007ea4:	e027      	b.n	8007ef6 <HAL_UARTEx_DisableFifoMode+0x66>
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	2201      	movs	r2, #1
 8007eaa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	2224      	movs	r2, #36	; 0x24
 8007eb2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	681a      	ldr	r2, [r3, #0]
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	f022 0201 	bic.w	r2, r2, #1
 8007ecc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007ed4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	2200      	movs	r2, #0
 8007eda:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	68fa      	ldr	r2, [r7, #12]
 8007ee2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	2220      	movs	r2, #32
 8007ee8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	2200      	movs	r2, #0
 8007ef0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007ef4:	2300      	movs	r3, #0
}
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	3714      	adds	r7, #20
 8007efa:	46bd      	mov	sp, r7
 8007efc:	bc80      	pop	{r7}
 8007efe:	4770      	bx	lr

08007f00 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007f00:	b580      	push	{r7, lr}
 8007f02:	b084      	sub	sp, #16
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	6078      	str	r0, [r7, #4]
 8007f08:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007f10:	2b01      	cmp	r3, #1
 8007f12:	d101      	bne.n	8007f18 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007f14:	2302      	movs	r3, #2
 8007f16:	e02d      	b.n	8007f74 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	2201      	movs	r2, #1
 8007f1c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	2224      	movs	r2, #36	; 0x24
 8007f24:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	681a      	ldr	r2, [r3, #0]
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	f022 0201 	bic.w	r2, r2, #1
 8007f3e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	689b      	ldr	r3, [r3, #8]
 8007f46:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	683a      	ldr	r2, [r7, #0]
 8007f50:	430a      	orrs	r2, r1
 8007f52:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007f54:	6878      	ldr	r0, [r7, #4]
 8007f56:	f000 f84f 	bl	8007ff8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	68fa      	ldr	r2, [r7, #12]
 8007f60:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	2220      	movs	r2, #32
 8007f66:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	2200      	movs	r2, #0
 8007f6e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007f72:	2300      	movs	r3, #0
}
 8007f74:	4618      	mov	r0, r3
 8007f76:	3710      	adds	r7, #16
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	bd80      	pop	{r7, pc}

08007f7c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b084      	sub	sp, #16
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
 8007f84:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007f8c:	2b01      	cmp	r3, #1
 8007f8e:	d101      	bne.n	8007f94 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007f90:	2302      	movs	r3, #2
 8007f92:	e02d      	b.n	8007ff0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	2201      	movs	r2, #1
 8007f98:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	2224      	movs	r2, #36	; 0x24
 8007fa0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	681a      	ldr	r2, [r3, #0]
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	f022 0201 	bic.w	r2, r2, #1
 8007fba:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	689b      	ldr	r3, [r3, #8]
 8007fc2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	683a      	ldr	r2, [r7, #0]
 8007fcc:	430a      	orrs	r2, r1
 8007fce:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007fd0:	6878      	ldr	r0, [r7, #4]
 8007fd2:	f000 f811 	bl	8007ff8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	68fa      	ldr	r2, [r7, #12]
 8007fdc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	2220      	movs	r2, #32
 8007fe2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	2200      	movs	r2, #0
 8007fea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007fee:	2300      	movs	r3, #0
}
 8007ff0:	4618      	mov	r0, r3
 8007ff2:	3710      	adds	r7, #16
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	bd80      	pop	{r7, pc}

08007ff8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007ff8:	b480      	push	{r7}
 8007ffa:	b085      	sub	sp, #20
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008004:	2b00      	cmp	r3, #0
 8008006:	d108      	bne.n	800801a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	2201      	movs	r2, #1
 800800c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	2201      	movs	r2, #1
 8008014:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008018:	e031      	b.n	800807e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800801a:	2308      	movs	r3, #8
 800801c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800801e:	2308      	movs	r3, #8
 8008020:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	689b      	ldr	r3, [r3, #8]
 8008028:	0e5b      	lsrs	r3, r3, #25
 800802a:	b2db      	uxtb	r3, r3
 800802c:	f003 0307 	and.w	r3, r3, #7
 8008030:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	689b      	ldr	r3, [r3, #8]
 8008038:	0f5b      	lsrs	r3, r3, #29
 800803a:	b2db      	uxtb	r3, r3
 800803c:	f003 0307 	and.w	r3, r3, #7
 8008040:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008042:	7bbb      	ldrb	r3, [r7, #14]
 8008044:	7b3a      	ldrb	r2, [r7, #12]
 8008046:	4910      	ldr	r1, [pc, #64]	; (8008088 <UARTEx_SetNbDataToProcess+0x90>)
 8008048:	5c8a      	ldrb	r2, [r1, r2]
 800804a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800804e:	7b3a      	ldrb	r2, [r7, #12]
 8008050:	490e      	ldr	r1, [pc, #56]	; (800808c <UARTEx_SetNbDataToProcess+0x94>)
 8008052:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008054:	fb93 f3f2 	sdiv	r3, r3, r2
 8008058:	b29a      	uxth	r2, r3
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008060:	7bfb      	ldrb	r3, [r7, #15]
 8008062:	7b7a      	ldrb	r2, [r7, #13]
 8008064:	4908      	ldr	r1, [pc, #32]	; (8008088 <UARTEx_SetNbDataToProcess+0x90>)
 8008066:	5c8a      	ldrb	r2, [r1, r2]
 8008068:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800806c:	7b7a      	ldrb	r2, [r7, #13]
 800806e:	4907      	ldr	r1, [pc, #28]	; (800808c <UARTEx_SetNbDataToProcess+0x94>)
 8008070:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008072:	fb93 f3f2 	sdiv	r3, r3, r2
 8008076:	b29a      	uxth	r2, r3
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800807e:	bf00      	nop
 8008080:	3714      	adds	r7, #20
 8008082:	46bd      	mov	sp, r7
 8008084:	bc80      	pop	{r7}
 8008086:	4770      	bx	lr
 8008088:	0800ce70 	.word	0x0800ce70
 800808c:	0800ce78 	.word	0x0800ce78

08008090 <RadioInit>:
TimerEvent_t RxTimeoutTimer;

/* Private  functions ---------------------------------------------------------*/

static void RadioInit( RadioEvents_t *events )
{
 8008090:	b580      	push	{r7, lr}
 8008092:	b084      	sub	sp, #16
 8008094:	af02      	add	r7, sp, #8
 8008096:	6078      	str	r0, [r7, #4]
    RadioEvents = events;
 8008098:	4a24      	ldr	r2, [pc, #144]	; (800812c <RadioInit+0x9c>)
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	6013      	str	r3, [r2, #0]

    SubgRf.RxContinuous = false;
 800809e:	4b24      	ldr	r3, [pc, #144]	; (8008130 <RadioInit+0xa0>)
 80080a0:	2200      	movs	r2, #0
 80080a2:	705a      	strb	r2, [r3, #1]
    SubgRf.TxTimeout = 0;
 80080a4:	4b22      	ldr	r3, [pc, #136]	; (8008130 <RadioInit+0xa0>)
 80080a6:	2200      	movs	r2, #0
 80080a8:	605a      	str	r2, [r3, #4]
    SubgRf.RxTimeout = 0;
 80080aa:	4b21      	ldr	r3, [pc, #132]	; (8008130 <RadioInit+0xa0>)
 80080ac:	2200      	movs	r2, #0
 80080ae:	609a      	str	r2, [r3, #8]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 80080b0:	4b1f      	ldr	r3, [pc, #124]	; (8008130 <RadioInit+0xa0>)
 80080b2:	2200      	movs	r2, #0
 80080b4:	659a      	str	r2, [r3, #88]	; 0x58
#if( RADIO_LR_FHSS_IS_ON == 1 )
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    SUBGRF_Init( RadioOnDioIrq );
 80080b6:	481f      	ldr	r0, [pc, #124]	; (8008134 <RadioInit+0xa4>)
 80080b8:	f001 ff88 	bl	8009fcc <SUBGRF_Init>
    /*SubgRf.publicNetwork set to false*/
    SubgRf.PublicNetwork.Current = false;
 80080bc:	4b1c      	ldr	r3, [pc, #112]	; (8008130 <RadioInit+0xa0>)
 80080be:	2200      	movs	r2, #0
 80080c0:	735a      	strb	r2, [r3, #13]
    SubgRf.PublicNetwork.Previous = false;
 80080c2:	4b1b      	ldr	r3, [pc, #108]	; (8008130 <RadioInit+0xa0>)
 80080c4:	2200      	movs	r2, #0
 80080c6:	731a      	strb	r2, [r3, #12]

    RADIO_IRQ_PROCESS_INIT();

    SUBGRF_SetRegulatorMode( );
 80080c8:	f002 fa1c 	bl	800a504 <SUBGRF_SetRegulatorMode>

    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 80080cc:	2100      	movs	r1, #0
 80080ce:	2000      	movs	r0, #0
 80080d0:	f002 fde8 	bl	800aca4 <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams( RFO_LP, 0, RADIO_RAMP_200_US );
 80080d4:	2204      	movs	r2, #4
 80080d6:	2100      	movs	r1, #0
 80080d8:	2001      	movs	r0, #1
 80080da:	f002 fba5 	bl	800a828 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 80080de:	2300      	movs	r3, #0
 80080e0:	2200      	movs	r2, #0
 80080e2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80080e6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80080ea:	f002 fad5 	bl	800a698 <SUBGRF_SetDioIrqParams>

    RadioSleep();
 80080ee:	f000 fe91 	bl	8008e14 <RadioSleep>
    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 80080f2:	2300      	movs	r3, #0
 80080f4:	9300      	str	r3, [sp, #0]
 80080f6:	4b10      	ldr	r3, [pc, #64]	; (8008138 <RadioInit+0xa8>)
 80080f8:	2200      	movs	r2, #0
 80080fa:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80080fe:	480f      	ldr	r0, [pc, #60]	; (800813c <RadioInit+0xac>)
 8008100:	f003 fb32 	bl	800b768 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 8008104:	2300      	movs	r3, #0
 8008106:	9300      	str	r3, [sp, #0]
 8008108:	4b0d      	ldr	r3, [pc, #52]	; (8008140 <RadioInit+0xb0>)
 800810a:	2200      	movs	r2, #0
 800810c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8008110:	480c      	ldr	r0, [pc, #48]	; (8008144 <RadioInit+0xb4>)
 8008112:	f003 fb29 	bl	800b768 <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 8008116:	4809      	ldr	r0, [pc, #36]	; (800813c <RadioInit+0xac>)
 8008118:	f003 fbca 	bl	800b8b0 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 800811c:	4809      	ldr	r0, [pc, #36]	; (8008144 <RadioInit+0xb4>)
 800811e:	f003 fbc7 	bl	800b8b0 <UTIL_TIMER_Stop>
}
 8008122:	bf00      	nop
 8008124:	3708      	adds	r7, #8
 8008126:	46bd      	mov	sp, r7
 8008128:	bd80      	pop	{r7, pc}
 800812a:	bf00      	nop
 800812c:	20000a30 	.word	0x20000a30
 8008130:	20000a34 	.word	0x20000a34
 8008134:	0800920d 	.word	0x0800920d
 8008138:	08009195 	.word	0x08009195
 800813c:	20000a90 	.word	0x20000a90
 8008140:	080091a9 	.word	0x080091a9
 8008144:	20000aa8 	.word	0x20000aa8

08008148 <RadioGetStatus>:

static RadioState_t RadioGetStatus( void )
{
 8008148:	b580      	push	{r7, lr}
 800814a:	af00      	add	r7, sp, #0
    switch( SUBGRF_GetOperatingMode( ) )
 800814c:	f001 ff86 	bl	800a05c <SUBGRF_GetOperatingMode>
 8008150:	4603      	mov	r3, r0
 8008152:	2b07      	cmp	r3, #7
 8008154:	d00a      	beq.n	800816c <RadioGetStatus+0x24>
 8008156:	2b07      	cmp	r3, #7
 8008158:	dc0a      	bgt.n	8008170 <RadioGetStatus+0x28>
 800815a:	2b04      	cmp	r3, #4
 800815c:	d002      	beq.n	8008164 <RadioGetStatus+0x1c>
 800815e:	2b05      	cmp	r3, #5
 8008160:	d002      	beq.n	8008168 <RadioGetStatus+0x20>
 8008162:	e005      	b.n	8008170 <RadioGetStatus+0x28>
    {
        case MODE_TX:
            return RF_TX_RUNNING;
 8008164:	2302      	movs	r3, #2
 8008166:	e004      	b.n	8008172 <RadioGetStatus+0x2a>
        case MODE_RX:
            return RF_RX_RUNNING;
 8008168:	2301      	movs	r3, #1
 800816a:	e002      	b.n	8008172 <RadioGetStatus+0x2a>
        case MODE_CAD:
            return RF_CAD;
 800816c:	2303      	movs	r3, #3
 800816e:	e000      	b.n	8008172 <RadioGetStatus+0x2a>
        default:
            return RF_IDLE;
 8008170:	2300      	movs	r3, #0
    }
}
 8008172:	4618      	mov	r0, r3
 8008174:	bd80      	pop	{r7, pc}
	...

08008178 <RadioSetModem>:

static void RadioSetModem( RadioModems_t modem )
{
 8008178:	b580      	push	{r7, lr}
 800817a:	b082      	sub	sp, #8
 800817c:	af00      	add	r7, sp, #0
 800817e:	4603      	mov	r3, r0
 8008180:	71fb      	strb	r3, [r7, #7]
    SubgRf.Modem = modem;
 8008182:	4a2a      	ldr	r2, [pc, #168]	; (800822c <RadioSetModem+0xb4>)
 8008184:	79fb      	ldrb	r3, [r7, #7]
 8008186:	7013      	strb	r3, [r2, #0]
    RFW_SetRadioModem( modem );
 8008188:	79fb      	ldrb	r3, [r7, #7]
 800818a:	4618      	mov	r0, r3
 800818c:	f003 f95d 	bl	800b44a <RFW_SetRadioModem>
    switch( modem )
 8008190:	79fb      	ldrb	r3, [r7, #7]
 8008192:	2b05      	cmp	r3, #5
 8008194:	d80e      	bhi.n	80081b4 <RadioSetModem+0x3c>
 8008196:	a201      	add	r2, pc, #4	; (adr r2, 800819c <RadioSetModem+0x24>)
 8008198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800819c:	080081c3 	.word	0x080081c3
 80081a0:	080081d1 	.word	0x080081d1
 80081a4:	080081b5 	.word	0x080081b5
 80081a8:	080081f7 	.word	0x080081f7
 80081ac:	08008205 	.word	0x08008205
 80081b0:	08008213 	.word	0x08008213
    {
    default:
    case MODEM_MSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GMSK );
 80081b4:	2003      	movs	r0, #3
 80081b6:	f002 fb11 	bl	800a7dc <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 80081ba:	4b1c      	ldr	r3, [pc, #112]	; (800822c <RadioSetModem+0xb4>)
 80081bc:	2200      	movs	r2, #0
 80081be:	735a      	strb	r2, [r3, #13]
        break;
 80081c0:	e02f      	b.n	8008222 <RadioSetModem+0xaa>
    case MODEM_FSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 80081c2:	2000      	movs	r0, #0
 80081c4:	f002 fb0a 	bl	800a7dc <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 80081c8:	4b18      	ldr	r3, [pc, #96]	; (800822c <RadioSetModem+0xb4>)
 80081ca:	2200      	movs	r2, #0
 80081cc:	735a      	strb	r2, [r3, #13]
        break;
 80081ce:	e028      	b.n	8008222 <RadioSetModem+0xaa>
    case MODEM_LORA:
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 80081d0:	2001      	movs	r0, #1
 80081d2:	f002 fb03 	bl	800a7dc <SUBGRF_SetPacketType>
        // Public/Private network register is reset when switching modems
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 80081d6:	4b15      	ldr	r3, [pc, #84]	; (800822c <RadioSetModem+0xb4>)
 80081d8:	7b5a      	ldrb	r2, [r3, #13]
 80081da:	4b14      	ldr	r3, [pc, #80]	; (800822c <RadioSetModem+0xb4>)
 80081dc:	7b1b      	ldrb	r3, [r3, #12]
 80081de:	429a      	cmp	r2, r3
 80081e0:	d01e      	beq.n	8008220 <RadioSetModem+0xa8>
        {
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 80081e2:	4b12      	ldr	r3, [pc, #72]	; (800822c <RadioSetModem+0xb4>)
 80081e4:	7b1a      	ldrb	r2, [r3, #12]
 80081e6:	4b11      	ldr	r3, [pc, #68]	; (800822c <RadioSetModem+0xb4>)
 80081e8:	735a      	strb	r2, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 80081ea:	4b10      	ldr	r3, [pc, #64]	; (800822c <RadioSetModem+0xb4>)
 80081ec:	7b5b      	ldrb	r3, [r3, #13]
 80081ee:	4618      	mov	r0, r3
 80081f0:	f000 ff9a 	bl	8009128 <RadioSetPublicNetwork>
        }
        break;
 80081f4:	e014      	b.n	8008220 <RadioSetModem+0xa8>
    case MODEM_BPSK:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 80081f6:	2002      	movs	r0, #2
 80081f8:	f002 faf0 	bl	800a7dc <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 80081fc:	4b0b      	ldr	r3, [pc, #44]	; (800822c <RadioSetModem+0xb4>)
 80081fe:	2200      	movs	r2, #0
 8008200:	735a      	strb	r2, [r3, #13]
        break;
 8008202:	e00e      	b.n	8008222 <RadioSetModem+0xaa>
#if (RADIO_SIGFOX_ENABLE == 1)
    case MODEM_SIGFOX_TX:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8008204:	2002      	movs	r0, #2
 8008206:	f002 fae9 	bl	800a7dc <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 800820a:	4b08      	ldr	r3, [pc, #32]	; (800822c <RadioSetModem+0xb4>)
 800820c:	2200      	movs	r2, #0
 800820e:	735a      	strb	r2, [r3, #13]
        break;
 8008210:	e007      	b.n	8008222 <RadioSetModem+0xaa>
    case MODEM_SIGFOX_RX:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8008212:	2000      	movs	r0, #0
 8008214:	f002 fae2 	bl	800a7dc <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8008218:	4b04      	ldr	r3, [pc, #16]	; (800822c <RadioSetModem+0xb4>)
 800821a:	2200      	movs	r2, #0
 800821c:	735a      	strb	r2, [r3, #13]
        break;
 800821e:	e000      	b.n	8008222 <RadioSetModem+0xaa>
        break;
 8008220:	bf00      	nop
#endif /*RADIO_SIGFOX_ENABLE == 1*/
    }
}
 8008222:	bf00      	nop
 8008224:	3708      	adds	r7, #8
 8008226:	46bd      	mov	sp, r7
 8008228:	bd80      	pop	{r7, pc}
 800822a:	bf00      	nop
 800822c:	20000a34 	.word	0x20000a34

08008230 <RadioSetChannel>:

static void RadioSetChannel( uint32_t freq )
{
 8008230:	b580      	push	{r7, lr}
 8008232:	b082      	sub	sp, #8
 8008234:	af00      	add	r7, sp, #0
 8008236:	6078      	str	r0, [r7, #4]
    SUBGRF_SetRfFrequency( freq );
 8008238:	6878      	ldr	r0, [r7, #4]
 800823a:	f002 fa89 	bl	800a750 <SUBGRF_SetRfFrequency>
}
 800823e:	bf00      	nop
 8008240:	3708      	adds	r7, #8
 8008242:	46bd      	mov	sp, r7
 8008244:	bd80      	pop	{r7, pc}

08008246 <RadioIsChannelFree>:

static bool RadioIsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 8008246:	b580      	push	{r7, lr}
 8008248:	b090      	sub	sp, #64	; 0x40
 800824a:	af0a      	add	r7, sp, #40	; 0x28
 800824c:	60f8      	str	r0, [r7, #12]
 800824e:	60b9      	str	r1, [r7, #8]
 8008250:	603b      	str	r3, [r7, #0]
 8008252:	4613      	mov	r3, r2
 8008254:	80fb      	strh	r3, [r7, #6]
    bool status = true;
 8008256:	2301      	movs	r3, #1
 8008258:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 800825a:	2300      	movs	r3, #0
 800825c:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 800825e:	2300      	movs	r3, #0
 8008260:	613b      	str	r3, [r7, #16]

    RadioStandby( );
 8008262:	f000 fdea 	bl	8008e3a <RadioStandby>

    RadioSetModem( MODEM_FSK );
 8008266:	2000      	movs	r0, #0
 8008268:	f7ff ff86 	bl	8008178 <RadioSetModem>

    RadioSetChannel( freq );
 800826c:	68f8      	ldr	r0, [r7, #12]
 800826e:	f7ff ffdf 	bl	8008230 <RadioSetChannel>

    // Set Rx bandwidth. Other parameters are not used.
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 8008272:	2301      	movs	r3, #1
 8008274:	9309      	str	r3, [sp, #36]	; 0x24
 8008276:	2300      	movs	r3, #0
 8008278:	9308      	str	r3, [sp, #32]
 800827a:	2300      	movs	r3, #0
 800827c:	9307      	str	r3, [sp, #28]
 800827e:	2300      	movs	r3, #0
 8008280:	9306      	str	r3, [sp, #24]
 8008282:	2300      	movs	r3, #0
 8008284:	9305      	str	r3, [sp, #20]
 8008286:	2300      	movs	r3, #0
 8008288:	9304      	str	r3, [sp, #16]
 800828a:	2300      	movs	r3, #0
 800828c:	9303      	str	r3, [sp, #12]
 800828e:	2300      	movs	r3, #0
 8008290:	9302      	str	r3, [sp, #8]
 8008292:	2303      	movs	r3, #3
 8008294:	9301      	str	r3, [sp, #4]
 8008296:	68bb      	ldr	r3, [r7, #8]
 8008298:	9300      	str	r3, [sp, #0]
 800829a:	2300      	movs	r3, #0
 800829c:	f44f 7216 	mov.w	r2, #600	; 0x258
 80082a0:	68b9      	ldr	r1, [r7, #8]
 80082a2:	2000      	movs	r0, #0
 80082a4:	f000 f83c 	bl	8008320 <RadioSetRxConfig>
                      0, false, 0, 0, false, true );
    RadioRx( 0 );
 80082a8:	2000      	movs	r0, #0
 80082aa:	f000 fdcd 	bl	8008e48 <RadioRx>

    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 80082ae:	f000 ff69 	bl	8009184 <RadioGetWakeupTime>
 80082b2:	4603      	mov	r3, r0
 80082b4:	4618      	mov	r0, r3
 80082b6:	f7fa fc0f 	bl	8002ad8 <HAL_Delay>

    carrierSenseTime = TimerGetCurrentTime( );
 80082ba:	f003 fb93 	bl	800b9e4 <UTIL_TIMER_GetCurrentTime>
 80082be:	6138      	str	r0, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 80082c0:	e00d      	b.n	80082de <RadioIsChannelFree+0x98>
    {
        rssi = RadioRssi( MODEM_FSK );
 80082c2:	2000      	movs	r0, #0
 80082c4:	f000 feae 	bl	8009024 <RadioRssi>
 80082c8:	4603      	mov	r3, r0
 80082ca:	82bb      	strh	r3, [r7, #20]

        if( rssi > rssiThresh )
 80082cc:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80082d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80082d4:	429a      	cmp	r2, r3
 80082d6:	dd02      	ble.n	80082de <RadioIsChannelFree+0x98>
        {
            status = false;
 80082d8:	2300      	movs	r3, #0
 80082da:	75fb      	strb	r3, [r7, #23]
            break;
 80082dc:	e006      	b.n	80082ec <RadioIsChannelFree+0xa6>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 80082de:	6938      	ldr	r0, [r7, #16]
 80082e0:	f003 fb92 	bl	800ba08 <UTIL_TIMER_GetElapsedTime>
 80082e4:	4602      	mov	r2, r0
 80082e6:	683b      	ldr	r3, [r7, #0]
 80082e8:	4293      	cmp	r3, r2
 80082ea:	d8ea      	bhi.n	80082c2 <RadioIsChannelFree+0x7c>
        }
    }
    RadioStandby( );
 80082ec:	f000 fda5 	bl	8008e3a <RadioStandby>

    return status;
 80082f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80082f2:	4618      	mov	r0, r3
 80082f4:	3718      	adds	r7, #24
 80082f6:	46bd      	mov	sp, r7
 80082f8:	bd80      	pop	{r7, pc}

080082fa <RadioRandom>:

static uint32_t RadioRandom( void )
{
 80082fa:	b580      	push	{r7, lr}
 80082fc:	b082      	sub	sp, #8
 80082fe:	af00      	add	r7, sp, #0
    uint32_t rnd = 0;
 8008300:	2300      	movs	r3, #0
 8008302:	607b      	str	r3, [r7, #4]

    /*
     * Radio setup for random number generation
     */
    // Disable modem interrupts
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8008304:	2300      	movs	r3, #0
 8008306:	2200      	movs	r2, #0
 8008308:	2100      	movs	r1, #0
 800830a:	2000      	movs	r0, #0
 800830c:	f002 f9c4 	bl	800a698 <SUBGRF_SetDioIrqParams>

    rnd = SUBGRF_GetRandom();
 8008310:	f001 ff75 	bl	800a1fe <SUBGRF_GetRandom>
 8008314:	6078      	str	r0, [r7, #4]

    return rnd;
 8008316:	687b      	ldr	r3, [r7, #4]
}
 8008318:	4618      	mov	r0, r3
 800831a:	3708      	adds	r7, #8
 800831c:	46bd      	mov	sp, r7
 800831e:	bd80      	pop	{r7, pc}

08008320 <RadioSetRxConfig>:
                              uint32_t bandwidthAfc, uint16_t preambleLen,
                              uint16_t symbTimeout, bool fixLen,
                              uint8_t payloadLen,
                              bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                              bool iqInverted, bool rxContinuous )
{
 8008320:	b580      	push	{r7, lr}
 8008322:	b08a      	sub	sp, #40	; 0x28
 8008324:	af00      	add	r7, sp, #0
 8008326:	60b9      	str	r1, [r7, #8]
 8008328:	607a      	str	r2, [r7, #4]
 800832a:	461a      	mov	r2, r3
 800832c:	4603      	mov	r3, r0
 800832e:	73fb      	strb	r3, [r7, #15]
 8008330:	4613      	mov	r3, r2
 8008332:	73bb      	strb	r3, [r7, #14]
#if (RADIO_SIGFOX_ENABLE == 1)
    uint8_t modReg;
#endif
    SubgRf.RxContinuous = rxContinuous;
 8008334:	4ab9      	ldr	r2, [pc, #740]	; (800861c <RadioSetRxConfig+0x2fc>)
 8008336:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800833a:	7053      	strb	r3, [r2, #1]
    RFW_DeInit();
 800833c:	f003 f843 	bl	800b3c6 <RFW_DeInit>
    if( rxContinuous == true )
 8008340:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8008344:	2b00      	cmp	r3, #0
 8008346:	d001      	beq.n	800834c <RadioSetRxConfig+0x2c>
    {
        symbTimeout = 0;
 8008348:	2300      	movs	r3, #0
 800834a:	873b      	strh	r3, [r7, #56]	; 0x38
    }
    if( fixLen == true )
 800834c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8008350:	2b00      	cmp	r3, #0
 8008352:	d004      	beq.n	800835e <RadioSetRxConfig+0x3e>
    {
        MaxPayloadLength = payloadLen;
 8008354:	4ab2      	ldr	r2, [pc, #712]	; (8008620 <RadioSetRxConfig+0x300>)
 8008356:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800835a:	7013      	strb	r3, [r2, #0]
 800835c:	e002      	b.n	8008364 <RadioSetRxConfig+0x44>
    }
    else
    {
        MaxPayloadLength = 0xFF;
 800835e:	4bb0      	ldr	r3, [pc, #704]	; (8008620 <RadioSetRxConfig+0x300>)
 8008360:	22ff      	movs	r2, #255	; 0xff
 8008362:	701a      	strb	r2, [r3, #0]
    }

    switch( modem )
 8008364:	7bfb      	ldrb	r3, [r7, #15]
 8008366:	2b05      	cmp	r3, #5
 8008368:	d009      	beq.n	800837e <RadioSetRxConfig+0x5e>
 800836a:	2b05      	cmp	r3, #5
 800836c:	f300 81d7 	bgt.w	800871e <RadioSetRxConfig+0x3fe>
 8008370:	2b00      	cmp	r3, #0
 8008372:	f000 80bf 	beq.w	80084f4 <RadioSetRxConfig+0x1d4>
 8008376:	2b01      	cmp	r3, #1
 8008378:	f000 8124 	beq.w	80085c4 <RadioSetRxConfig+0x2a4>
            // Timeout Max, Timeout handled directly in SetRx function
            SubgRf.RxTimeout = 0xFFFF;

            break;
        default:
            break;
 800837c:	e1cf      	b.n	800871e <RadioSetRxConfig+0x3fe>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 800837e:	2001      	movs	r0, #1
 8008380:	f002 f882 	bl	800a488 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8008384:	4ba5      	ldr	r3, [pc, #660]	; (800861c <RadioSetRxConfig+0x2fc>)
 8008386:	2200      	movs	r2, #0
 8008388:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 800838c:	4aa3      	ldr	r2, [pc, #652]	; (800861c <RadioSetRxConfig+0x2fc>)
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 8008392:	4ba2      	ldr	r3, [pc, #648]	; (800861c <RadioSetRxConfig+0x2fc>)
 8008394:	2209      	movs	r2, #9
 8008396:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 800839a:	4ba0      	ldr	r3, [pc, #640]	; (800861c <RadioSetRxConfig+0x2fc>)
 800839c:	f44f 7248 	mov.w	r2, #800	; 0x320
 80083a0:	641a      	str	r2, [r3, #64]	; 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 80083a2:	68b8      	ldr	r0, [r7, #8]
 80083a4:	f002 ff42 	bl	800b22c <SUBGRF_GetFskBandwidthRegValue>
 80083a8:	4603      	mov	r3, r0
 80083aa:	461a      	mov	r2, r3
 80083ac:	4b9b      	ldr	r3, [pc, #620]	; (800861c <RadioSetRxConfig+0x2fc>)
 80083ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80083b2:	4b9a      	ldr	r3, [pc, #616]	; (800861c <RadioSetRxConfig+0x2fc>)
 80083b4:	2200      	movs	r2, #0
 80083b6:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 80083b8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80083ba:	00db      	lsls	r3, r3, #3
 80083bc:	b29a      	uxth	r2, r3
 80083be:	4b97      	ldr	r3, [pc, #604]	; (800861c <RadioSetRxConfig+0x2fc>)
 80083c0:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 80083c2:	4b96      	ldr	r3, [pc, #600]	; (800861c <RadioSetRxConfig+0x2fc>)
 80083c4:	2200      	movs	r2, #0
 80083c6:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 80083c8:	4b94      	ldr	r3, [pc, #592]	; (800861c <RadioSetRxConfig+0x2fc>)
 80083ca:	2210      	movs	r2, #16
 80083cc:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 80083ce:	4b93      	ldr	r3, [pc, #588]	; (800861c <RadioSetRxConfig+0x2fc>)
 80083d0:	2200      	movs	r2, #0
 80083d2:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 80083d4:	4b91      	ldr	r3, [pc, #580]	; (800861c <RadioSetRxConfig+0x2fc>)
 80083d6:	2200      	movs	r2, #0
 80083d8:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 80083da:	4b91      	ldr	r3, [pc, #580]	; (8008620 <RadioSetRxConfig+0x300>)
 80083dc:	781a      	ldrb	r2, [r3, #0]
 80083de:	4b8f      	ldr	r3, [pc, #572]	; (800861c <RadioSetRxConfig+0x2fc>)
 80083e0:	759a      	strb	r2, [r3, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 80083e2:	4b8e      	ldr	r3, [pc, #568]	; (800861c <RadioSetRxConfig+0x2fc>)
 80083e4:	2201      	movs	r2, #1
 80083e6:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 80083e8:	4b8c      	ldr	r3, [pc, #560]	; (800861c <RadioSetRxConfig+0x2fc>)
 80083ea:	2200      	movs	r2, #0
 80083ec:	761a      	strb	r2, [r3, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 80083ee:	2005      	movs	r0, #5
 80083f0:	f7ff fec2 	bl	8008178 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80083f4:	488b      	ldr	r0, [pc, #556]	; (8008624 <RadioSetRxConfig+0x304>)
 80083f6:	f002 fae5 	bl	800a9c4 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80083fa:	488b      	ldr	r0, [pc, #556]	; (8008628 <RadioSetRxConfig+0x308>)
 80083fc:	f002 fbb4 	bl	800ab68 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8008400:	4a8a      	ldr	r2, [pc, #552]	; (800862c <RadioSetRxConfig+0x30c>)
 8008402:	f107 031c 	add.w	r3, r7, #28
 8008406:	e892 0003 	ldmia.w	r2, {r0, r1}
 800840a:	e883 0003 	stmia.w	r3, {r0, r1}
 800840e:	f107 031c 	add.w	r3, r7, #28
 8008412:	4618      	mov	r0, r3
 8008414:	f001 fe71 	bl	800a0fa <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8008418:	f240 10ff 	movw	r0, #511	; 0x1ff
 800841c:	f001 febc 	bl	800a198 <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(SUBGHZ_AGCGFORSTCFGR);
 8008420:	f640 00b8 	movw	r0, #2232	; 0x8b8
 8008424:	f000 fe1d 	bl	8009062 <RadioRead>
 8008428:	4603      	mov	r3, r0
 800842a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=RADIO_BIT_MASK(4);
 800842e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008432:	f023 0310 	bic.w	r3, r3, #16
 8008436:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_AGCGFORSTCFGR, modReg);
 800843a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800843e:	4619      	mov	r1, r3
 8008440:	f640 00b8 	movw	r0, #2232	; 0x8b8
 8008444:	f000 fdfb 	bl	800903e <RadioWrite>
            RadioWrite(SUBGHZ_AGCGFORSTPOWTHR, 0x4 );
 8008448:	2104      	movs	r1, #4
 800844a:	f640 00b9 	movw	r0, #2233	; 0x8b9
 800844e:	f000 fdf6 	bl	800903e <RadioWrite>
            modReg= RadioRead(SUBGHZ_AGCRSSICTL0R);
 8008452:	f640 009b 	movw	r0, #2203	; 0x89b
 8008456:	f000 fe04 	bl	8009062 <RadioRead>
 800845a:	4603      	mov	r3, r0
 800845c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8008460:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008464:	f023 031c 	bic.w	r3, r3, #28
 8008468:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_AGCRSSICTL0R, (modReg| (0x1<<3) ) );
 800846c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008470:	f043 0308 	orr.w	r3, r3, #8
 8008474:	b2db      	uxtb	r3, r3
 8008476:	4619      	mov	r1, r3
 8008478:	f640 009b 	movw	r0, #2203	; 0x89b
 800847c:	f000 fddf 	bl	800903e <RadioWrite>
            modReg= RadioRead(SUBGHZ_GAFCR);
 8008480:	f240 60d1 	movw	r0, #1745	; 0x6d1
 8008484:	f000 fded 	bl	8009062 <RadioRead>
 8008488:	4603      	mov	r3, r0
 800848a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 800848e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008492:	f023 0318 	bic.w	r3, r3, #24
 8008496:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_GAFCR, (modReg| (0x3<<3) ));
 800849a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800849e:	f043 0318 	orr.w	r3, r3, #24
 80084a2:	b2db      	uxtb	r3, r3
 80084a4:	4619      	mov	r1, r3
 80084a6:	f240 60d1 	movw	r0, #1745	; 0x6d1
 80084aa:	f000 fdc8 	bl	800903e <RadioWrite>
            modReg= RadioRead(SUBGHZ_GBSYNCR);
 80084ae:	f240 60ac 	movw	r0, #1708	; 0x6ac
 80084b2:	f000 fdd6 	bl	8009062 <RadioRead>
 80084b6:	4603      	mov	r3, r0
 80084b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 80084bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80084c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_GBSYNCR, (modReg| (0x5<<4) ));
 80084c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80084cc:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 80084d0:	b2db      	uxtb	r3, r3
 80084d2:	4619      	mov	r1, r3
 80084d4:	f240 60ac 	movw	r0, #1708	; 0x6ac
 80084d8:	f000 fdb1 	bl	800903e <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 80084dc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80084de:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80084e2:	fb02 f303 	mul.w	r3, r2, r3
 80084e6:	461a      	mov	r2, r3
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80084ee:	4a4b      	ldr	r2, [pc, #300]	; (800861c <RadioSetRxConfig+0x2fc>)
 80084f0:	6093      	str	r3, [r2, #8]
            break;
 80084f2:	e115      	b.n	8008720 <RadioSetRxConfig+0x400>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 80084f4:	2000      	movs	r0, #0
 80084f6:	f001 ffc7 	bl	800a488 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80084fa:	4b48      	ldr	r3, [pc, #288]	; (800861c <RadioSetRxConfig+0x2fc>)
 80084fc:	2200      	movs	r2, #0
 80084fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8008502:	4a46      	ldr	r2, [pc, #280]	; (800861c <RadioSetRxConfig+0x2fc>)
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8008508:	4b44      	ldr	r3, [pc, #272]	; (800861c <RadioSetRxConfig+0x2fc>)
 800850a:	220b      	movs	r2, #11
 800850c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8008510:	68b8      	ldr	r0, [r7, #8]
 8008512:	f002 fe8b 	bl	800b22c <SUBGRF_GetFskBandwidthRegValue>
 8008516:	4603      	mov	r3, r0
 8008518:	461a      	mov	r2, r3
 800851a:	4b40      	ldr	r3, [pc, #256]	; (800861c <RadioSetRxConfig+0x2fc>)
 800851c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8008520:	4b3e      	ldr	r3, [pc, #248]	; (800861c <RadioSetRxConfig+0x2fc>)
 8008522:	2200      	movs	r2, #0
 8008524:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8008526:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8008528:	00db      	lsls	r3, r3, #3
 800852a:	b29a      	uxth	r2, r3
 800852c:	4b3b      	ldr	r3, [pc, #236]	; (800861c <RadioSetRxConfig+0x2fc>)
 800852e:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8008530:	4b3a      	ldr	r3, [pc, #232]	; (800861c <RadioSetRxConfig+0x2fc>)
 8008532:	2204      	movs	r2, #4
 8008534:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 8008536:	4b39      	ldr	r3, [pc, #228]	; (800861c <RadioSetRxConfig+0x2fc>)
 8008538:	2218      	movs	r2, #24
 800853a:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 800853c:	4b37      	ldr	r3, [pc, #220]	; (800861c <RadioSetRxConfig+0x2fc>)
 800853e:	2200      	movs	r2, #0
 8008540:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8008542:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8008546:	f083 0301 	eor.w	r3, r3, #1
 800854a:	b2db      	uxtb	r3, r3
 800854c:	461a      	mov	r2, r3
 800854e:	4b33      	ldr	r3, [pc, #204]	; (800861c <RadioSetRxConfig+0x2fc>)
 8008550:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8008552:	4b33      	ldr	r3, [pc, #204]	; (8008620 <RadioSetRxConfig+0x300>)
 8008554:	781a      	ldrb	r2, [r3, #0]
 8008556:	4b31      	ldr	r3, [pc, #196]	; (800861c <RadioSetRxConfig+0x2fc>)
 8008558:	759a      	strb	r2, [r3, #22]
            if( crcOn == true )
 800855a:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800855e:	2b00      	cmp	r3, #0
 8008560:	d003      	beq.n	800856a <RadioSetRxConfig+0x24a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8008562:	4b2e      	ldr	r3, [pc, #184]	; (800861c <RadioSetRxConfig+0x2fc>)
 8008564:	22f2      	movs	r2, #242	; 0xf2
 8008566:	75da      	strb	r2, [r3, #23]
 8008568:	e002      	b.n	8008570 <RadioSetRxConfig+0x250>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 800856a:	4b2c      	ldr	r3, [pc, #176]	; (800861c <RadioSetRxConfig+0x2fc>)
 800856c:	2201      	movs	r2, #1
 800856e:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8008570:	4b2a      	ldr	r3, [pc, #168]	; (800861c <RadioSetRxConfig+0x2fc>)
 8008572:	2201      	movs	r2, #1
 8008574:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 8008576:	f000 fc60 	bl	8008e3a <RadioStandby>
            RadioSetModem( MODEM_FSK );
 800857a:	2000      	movs	r0, #0
 800857c:	f7ff fdfc 	bl	8008178 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8008580:	4828      	ldr	r0, [pc, #160]	; (8008624 <RadioSetRxConfig+0x304>)
 8008582:	f002 fa1f 	bl	800a9c4 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008586:	4828      	ldr	r0, [pc, #160]	; (8008628 <RadioSetRxConfig+0x308>)
 8008588:	f002 faee 	bl	800ab68 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 800858c:	4a28      	ldr	r2, [pc, #160]	; (8008630 <RadioSetRxConfig+0x310>)
 800858e:	f107 0314 	add.w	r3, r7, #20
 8008592:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008596:	e883 0003 	stmia.w	r3, {r0, r1}
 800859a:	f107 0314 	add.w	r3, r7, #20
 800859e:	4618      	mov	r0, r3
 80085a0:	f001 fdab 	bl	800a0fa <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 80085a4:	f240 10ff 	movw	r0, #511	; 0x1ff
 80085a8:	f001 fdf6 	bl	800a198 <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 80085ac:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80085ae:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80085b2:	fb02 f303 	mul.w	r3, r2, r3
 80085b6:	461a      	mov	r2, r3
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80085be:	4a17      	ldr	r2, [pc, #92]	; (800861c <RadioSetRxConfig+0x2fc>)
 80085c0:	6093      	str	r3, [r2, #8]
            break;
 80085c2:	e0ad      	b.n	8008720 <RadioSetRxConfig+0x400>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 80085c4:	2000      	movs	r0, #0
 80085c6:	f001 ff5f 	bl	800a488 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 80085ca:	4b14      	ldr	r3, [pc, #80]	; (800861c <RadioSetRxConfig+0x2fc>)
 80085cc:	2201      	movs	r2, #1
 80085ce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	b2da      	uxtb	r2, r3
 80085d6:	4b11      	ldr	r3, [pc, #68]	; (800861c <RadioSetRxConfig+0x2fc>)
 80085d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 80085dc:	4a15      	ldr	r2, [pc, #84]	; (8008634 <RadioSetRxConfig+0x314>)
 80085de:	68bb      	ldr	r3, [r7, #8]
 80085e0:	4413      	add	r3, r2
 80085e2:	781a      	ldrb	r2, [r3, #0]
 80085e4:	4b0d      	ldr	r3, [pc, #52]	; (800861c <RadioSetRxConfig+0x2fc>)
 80085e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 80085ea:	4a0c      	ldr	r2, [pc, #48]	; (800861c <RadioSetRxConfig+0x2fc>)
 80085ec:	7bbb      	ldrb	r3, [r7, #14]
 80085ee:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80085f2:	68bb      	ldr	r3, [r7, #8]
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d105      	bne.n	8008604 <RadioSetRxConfig+0x2e4>
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	2b0b      	cmp	r3, #11
 80085fc:	d008      	beq.n	8008610 <RadioSetRxConfig+0x2f0>
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	2b0c      	cmp	r3, #12
 8008602:	d005      	beq.n	8008610 <RadioSetRxConfig+0x2f0>
 8008604:	68bb      	ldr	r3, [r7, #8]
 8008606:	2b01      	cmp	r3, #1
 8008608:	d116      	bne.n	8008638 <RadioSetRxConfig+0x318>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	2b0c      	cmp	r3, #12
 800860e:	d113      	bne.n	8008638 <RadioSetRxConfig+0x318>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8008610:	4b02      	ldr	r3, [pc, #8]	; (800861c <RadioSetRxConfig+0x2fc>)
 8008612:	2201      	movs	r2, #1
 8008614:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8008618:	e012      	b.n	8008640 <RadioSetRxConfig+0x320>
 800861a:	bf00      	nop
 800861c:	20000a34 	.word	0x20000a34
 8008620:	20000015 	.word	0x20000015
 8008624:	20000a6c 	.word	0x20000a6c
 8008628:	20000a42 	.word	0x20000a42
 800862c:	0800cd68 	.word	0x0800cd68
 8008630:	0800cd70 	.word	0x0800cd70
 8008634:	0800cf0c 	.word	0x0800cf0c
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8008638:	4b3b      	ldr	r3, [pc, #236]	; (8008728 <RadioSetRxConfig+0x408>)
 800863a:	2200      	movs	r2, #0
 800863c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8008640:	4b39      	ldr	r3, [pc, #228]	; (8008728 <RadioSetRxConfig+0x408>)
 8008642:	2201      	movs	r2, #1
 8008644:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8008646:	4b38      	ldr	r3, [pc, #224]	; (8008728 <RadioSetRxConfig+0x408>)
 8008648:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800864c:	2b05      	cmp	r3, #5
 800864e:	d004      	beq.n	800865a <RadioSetRxConfig+0x33a>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 8008650:	4b35      	ldr	r3, [pc, #212]	; (8008728 <RadioSetRxConfig+0x408>)
 8008652:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8008656:	2b06      	cmp	r3, #6
 8008658:	d10a      	bne.n	8008670 <RadioSetRxConfig+0x350>
                if( preambleLen < 12 )
 800865a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800865c:	2b0b      	cmp	r3, #11
 800865e:	d803      	bhi.n	8008668 <RadioSetRxConfig+0x348>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8008660:	4b31      	ldr	r3, [pc, #196]	; (8008728 <RadioSetRxConfig+0x408>)
 8008662:	220c      	movs	r2, #12
 8008664:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 8008666:	e006      	b.n	8008676 <RadioSetRxConfig+0x356>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8008668:	4a2f      	ldr	r2, [pc, #188]	; (8008728 <RadioSetRxConfig+0x408>)
 800866a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800866c:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 800866e:	e002      	b.n	8008676 <RadioSetRxConfig+0x356>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8008670:	4a2d      	ldr	r2, [pc, #180]	; (8008728 <RadioSetRxConfig+0x408>)
 8008672:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8008674:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8008676:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 800867a:	4b2b      	ldr	r3, [pc, #172]	; (8008728 <RadioSetRxConfig+0x408>)
 800867c:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 800867e:	4b2b      	ldr	r3, [pc, #172]	; (800872c <RadioSetRxConfig+0x40c>)
 8008680:	781a      	ldrb	r2, [r3, #0]
 8008682:	4b29      	ldr	r3, [pc, #164]	; (8008728 <RadioSetRxConfig+0x408>)
 8008684:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8008686:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 800868a:	4b27      	ldr	r3, [pc, #156]	; (8008728 <RadioSetRxConfig+0x408>)
 800868c:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8008690:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 8008694:	4b24      	ldr	r3, [pc, #144]	; (8008728 <RadioSetRxConfig+0x408>)
 8008696:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 800869a:	f000 fbce 	bl	8008e3a <RadioStandby>
            RadioSetModem( MODEM_LORA );
 800869e:	2001      	movs	r0, #1
 80086a0:	f7ff fd6a 	bl	8008178 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80086a4:	4822      	ldr	r0, [pc, #136]	; (8008730 <RadioSetRxConfig+0x410>)
 80086a6:	f002 f98d 	bl	800a9c4 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80086aa:	4822      	ldr	r0, [pc, #136]	; (8008734 <RadioSetRxConfig+0x414>)
 80086ac:	f002 fa5c 	bl	800ab68 <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 80086b0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80086b2:	b2db      	uxtb	r3, r3
 80086b4:	4618      	mov	r0, r3
 80086b6:	f001 fef6 	bl	800a4a6 <SUBGRF_SetLoRaSymbNumTimeout>
            SUBGRF_WriteRegister(SUBGHZ_AGCCFG,SUBGRF_ReadRegister(SUBGHZ_AGCCFG)&0x1);
 80086ba:	f640 00a3 	movw	r0, #2211	; 0x8a3
 80086be:	f002 fbaf 	bl	800ae20 <SUBGRF_ReadRegister>
 80086c2:	4603      	mov	r3, r0
 80086c4:	f003 0301 	and.w	r3, r3, #1
 80086c8:	b2db      	uxtb	r3, r3
 80086ca:	4619      	mov	r1, r3
 80086cc:	f640 00a3 	movw	r0, #2211	; 0x8a3
 80086d0:	f002 fb92 	bl	800adf8 <SUBGRF_WriteRegister>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 80086d4:	4b14      	ldr	r3, [pc, #80]	; (8008728 <RadioSetRxConfig+0x408>)
 80086d6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80086da:	2b01      	cmp	r3, #1
 80086dc:	d10d      	bne.n	80086fa <RadioSetRxConfig+0x3da>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 80086de:	f240 7036 	movw	r0, #1846	; 0x736
 80086e2:	f002 fb9d 	bl	800ae20 <SUBGRF_ReadRegister>
 80086e6:	4603      	mov	r3, r0
 80086e8:	f023 0304 	bic.w	r3, r3, #4
 80086ec:	b2db      	uxtb	r3, r3
 80086ee:	4619      	mov	r1, r3
 80086f0:	f240 7036 	movw	r0, #1846	; 0x736
 80086f4:	f002 fb80 	bl	800adf8 <SUBGRF_WriteRegister>
 80086f8:	e00c      	b.n	8008714 <RadioSetRxConfig+0x3f4>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 80086fa:	f240 7036 	movw	r0, #1846	; 0x736
 80086fe:	f002 fb8f 	bl	800ae20 <SUBGRF_ReadRegister>
 8008702:	4603      	mov	r3, r0
 8008704:	f043 0304 	orr.w	r3, r3, #4
 8008708:	b2db      	uxtb	r3, r3
 800870a:	4619      	mov	r1, r3
 800870c:	f240 7036 	movw	r0, #1846	; 0x736
 8008710:	f002 fb72 	bl	800adf8 <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 8008714:	4b04      	ldr	r3, [pc, #16]	; (8008728 <RadioSetRxConfig+0x408>)
 8008716:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800871a:	609a      	str	r2, [r3, #8]
            break;
 800871c:	e000      	b.n	8008720 <RadioSetRxConfig+0x400>
            break;
 800871e:	bf00      	nop
    }
}
 8008720:	bf00      	nop
 8008722:	3728      	adds	r7, #40	; 0x28
 8008724:	46bd      	mov	sp, r7
 8008726:	bd80      	pop	{r7, pc}
 8008728:	20000a34 	.word	0x20000a34
 800872c:	20000015 	.word	0x20000015
 8008730:	20000a6c 	.word	0x20000a6c
 8008734:	20000a42 	.word	0x20000a42

08008738 <RadioSetTxConfig>:
static void RadioSetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                              uint32_t bandwidth, uint32_t datarate,
                              uint8_t coderate, uint16_t preambleLen,
                              bool fixLen, bool crcOn, bool freqHopOn,
                              uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 8008738:	b580      	push	{r7, lr}
 800873a:	b086      	sub	sp, #24
 800873c:	af00      	add	r7, sp, #0
 800873e:	60ba      	str	r2, [r7, #8]
 8008740:	607b      	str	r3, [r7, #4]
 8008742:	4603      	mov	r3, r0
 8008744:	73fb      	strb	r3, [r7, #15]
 8008746:	460b      	mov	r3, r1
 8008748:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    RFW_DeInit();
 800874a:	f002 fe3c 	bl	800b3c6 <RFW_DeInit>
    switch( modem )
 800874e:	7bfb      	ldrb	r3, [r7, #15]
 8008750:	2b04      	cmp	r3, #4
 8008752:	f000 80c7 	beq.w	80088e4 <RadioSetTxConfig+0x1ac>
 8008756:	2b04      	cmp	r3, #4
 8008758:	f300 80d6 	bgt.w	8008908 <RadioSetTxConfig+0x1d0>
 800875c:	2b00      	cmp	r3, #0
 800875e:	d002      	beq.n	8008766 <RadioSetTxConfig+0x2e>
 8008760:	2b01      	cmp	r3, #1
 8008762:	d059      	beq.n	8008818 <RadioSetTxConfig+0xe0>
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
            break;
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 8008764:	e0d0      	b.n	8008908 <RadioSetTxConfig+0x1d0>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8008766:	4b77      	ldr	r3, [pc, #476]	; (8008944 <RadioSetTxConfig+0x20c>)
 8008768:	2200      	movs	r2, #0
 800876a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 800876e:	4a75      	ldr	r2, [pc, #468]	; (8008944 <RadioSetTxConfig+0x20c>)
 8008770:	6a3b      	ldr	r3, [r7, #32]
 8008772:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8008774:	4b73      	ldr	r3, [pc, #460]	; (8008944 <RadioSetTxConfig+0x20c>)
 8008776:	220b      	movs	r2, #11
 8008778:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 800877c:	6878      	ldr	r0, [r7, #4]
 800877e:	f002 fd55 	bl	800b22c <SUBGRF_GetFskBandwidthRegValue>
 8008782:	4603      	mov	r3, r0
 8008784:	461a      	mov	r2, r3
 8008786:	4b6f      	ldr	r3, [pc, #444]	; (8008944 <RadioSetTxConfig+0x20c>)
 8008788:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 800878c:	4a6d      	ldr	r2, [pc, #436]	; (8008944 <RadioSetTxConfig+0x20c>)
 800878e:	68bb      	ldr	r3, [r7, #8]
 8008790:	6413      	str	r3, [r2, #64]	; 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8008792:	4b6c      	ldr	r3, [pc, #432]	; (8008944 <RadioSetTxConfig+0x20c>)
 8008794:	2200      	movs	r2, #0
 8008796:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8008798:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800879a:	00db      	lsls	r3, r3, #3
 800879c:	b29a      	uxth	r2, r3
 800879e:	4b69      	ldr	r3, [pc, #420]	; (8008944 <RadioSetTxConfig+0x20c>)
 80087a0:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 80087a2:	4b68      	ldr	r3, [pc, #416]	; (8008944 <RadioSetTxConfig+0x20c>)
 80087a4:	2204      	movs	r2, #4
 80087a6:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 80087a8:	4b66      	ldr	r3, [pc, #408]	; (8008944 <RadioSetTxConfig+0x20c>)
 80087aa:	2218      	movs	r2, #24
 80087ac:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 80087ae:	4b65      	ldr	r3, [pc, #404]	; (8008944 <RadioSetTxConfig+0x20c>)
 80087b0:	2200      	movs	r2, #0
 80087b2:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 80087b4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80087b8:	f083 0301 	eor.w	r3, r3, #1
 80087bc:	b2db      	uxtb	r3, r3
 80087be:	461a      	mov	r2, r3
 80087c0:	4b60      	ldr	r3, [pc, #384]	; (8008944 <RadioSetTxConfig+0x20c>)
 80087c2:	755a      	strb	r2, [r3, #21]
            if( crcOn == true )
 80087c4:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d003      	beq.n	80087d4 <RadioSetTxConfig+0x9c>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 80087cc:	4b5d      	ldr	r3, [pc, #372]	; (8008944 <RadioSetTxConfig+0x20c>)
 80087ce:	22f2      	movs	r2, #242	; 0xf2
 80087d0:	75da      	strb	r2, [r3, #23]
 80087d2:	e002      	b.n	80087da <RadioSetTxConfig+0xa2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 80087d4:	4b5b      	ldr	r3, [pc, #364]	; (8008944 <RadioSetTxConfig+0x20c>)
 80087d6:	2201      	movs	r2, #1
 80087d8:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 80087da:	4b5a      	ldr	r3, [pc, #360]	; (8008944 <RadioSetTxConfig+0x20c>)
 80087dc:	2201      	movs	r2, #1
 80087de:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 80087e0:	f000 fb2b 	bl	8008e3a <RadioStandby>
            RadioSetModem(  MODEM_FSK  );
 80087e4:	2000      	movs	r0, #0
 80087e6:	f7ff fcc7 	bl	8008178 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80087ea:	4857      	ldr	r0, [pc, #348]	; (8008948 <RadioSetTxConfig+0x210>)
 80087ec:	f002 f8ea 	bl	800a9c4 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80087f0:	4856      	ldr	r0, [pc, #344]	; (800894c <RadioSetTxConfig+0x214>)
 80087f2:	f002 f9b9 	bl	800ab68 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 80087f6:	4a56      	ldr	r2, [pc, #344]	; (8008950 <RadioSetTxConfig+0x218>)
 80087f8:	f107 0310 	add.w	r3, r7, #16
 80087fc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008800:	e883 0003 	stmia.w	r3, {r0, r1}
 8008804:	f107 0310 	add.w	r3, r7, #16
 8008808:	4618      	mov	r0, r3
 800880a:	f001 fc76 	bl	800a0fa <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 800880e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8008812:	f001 fcc1 	bl	800a198 <SUBGRF_SetWhiteningSeed>
            break;
 8008816:	e078      	b.n	800890a <RadioSetTxConfig+0x1d2>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8008818:	4b4a      	ldr	r3, [pc, #296]	; (8008944 <RadioSetTxConfig+0x20c>)
 800881a:	2201      	movs	r2, #1
 800881c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 8008820:	6a3b      	ldr	r3, [r7, #32]
 8008822:	b2da      	uxtb	r2, r3
 8008824:	4b47      	ldr	r3, [pc, #284]	; (8008944 <RadioSetTxConfig+0x20c>)
 8008826:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 800882a:	4a4a      	ldr	r2, [pc, #296]	; (8008954 <RadioSetTxConfig+0x21c>)
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	4413      	add	r3, r2
 8008830:	781a      	ldrb	r2, [r3, #0]
 8008832:	4b44      	ldr	r3, [pc, #272]	; (8008944 <RadioSetTxConfig+0x20c>)
 8008834:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 8008838:	4a42      	ldr	r2, [pc, #264]	; (8008944 <RadioSetTxConfig+0x20c>)
 800883a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800883e:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	2b00      	cmp	r3, #0
 8008846:	d105      	bne.n	8008854 <RadioSetTxConfig+0x11c>
 8008848:	6a3b      	ldr	r3, [r7, #32]
 800884a:	2b0b      	cmp	r3, #11
 800884c:	d008      	beq.n	8008860 <RadioSetTxConfig+0x128>
 800884e:	6a3b      	ldr	r3, [r7, #32]
 8008850:	2b0c      	cmp	r3, #12
 8008852:	d005      	beq.n	8008860 <RadioSetTxConfig+0x128>
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	2b01      	cmp	r3, #1
 8008858:	d107      	bne.n	800886a <RadioSetTxConfig+0x132>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 800885a:	6a3b      	ldr	r3, [r7, #32]
 800885c:	2b0c      	cmp	r3, #12
 800885e:	d104      	bne.n	800886a <RadioSetTxConfig+0x132>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8008860:	4b38      	ldr	r3, [pc, #224]	; (8008944 <RadioSetTxConfig+0x20c>)
 8008862:	2201      	movs	r2, #1
 8008864:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8008868:	e003      	b.n	8008872 <RadioSetTxConfig+0x13a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 800886a:	4b36      	ldr	r3, [pc, #216]	; (8008944 <RadioSetTxConfig+0x20c>)
 800886c:	2200      	movs	r2, #0
 800886e:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8008872:	4b34      	ldr	r3, [pc, #208]	; (8008944 <RadioSetTxConfig+0x20c>)
 8008874:	2201      	movs	r2, #1
 8008876:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8008878:	4b32      	ldr	r3, [pc, #200]	; (8008944 <RadioSetTxConfig+0x20c>)
 800887a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800887e:	2b05      	cmp	r3, #5
 8008880:	d004      	beq.n	800888c <RadioSetTxConfig+0x154>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 8008882:	4b30      	ldr	r3, [pc, #192]	; (8008944 <RadioSetTxConfig+0x20c>)
 8008884:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8008888:	2b06      	cmp	r3, #6
 800888a:	d10a      	bne.n	80088a2 <RadioSetTxConfig+0x16a>
                if( preambleLen < 12 )
 800888c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800888e:	2b0b      	cmp	r3, #11
 8008890:	d803      	bhi.n	800889a <RadioSetTxConfig+0x162>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8008892:	4b2c      	ldr	r3, [pc, #176]	; (8008944 <RadioSetTxConfig+0x20c>)
 8008894:	220c      	movs	r2, #12
 8008896:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 8008898:	e006      	b.n	80088a8 <RadioSetTxConfig+0x170>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 800889a:	4a2a      	ldr	r2, [pc, #168]	; (8008944 <RadioSetTxConfig+0x20c>)
 800889c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800889e:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 80088a0:	e002      	b.n	80088a8 <RadioSetTxConfig+0x170>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 80088a2:	4a28      	ldr	r2, [pc, #160]	; (8008944 <RadioSetTxConfig+0x20c>)
 80088a4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80088a6:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 80088a8:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80088ac:	4b25      	ldr	r3, [pc, #148]	; (8008944 <RadioSetTxConfig+0x20c>)
 80088ae:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 80088b0:	4b29      	ldr	r3, [pc, #164]	; (8008958 <RadioSetTxConfig+0x220>)
 80088b2:	781a      	ldrb	r2, [r3, #0]
 80088b4:	4b23      	ldr	r3, [pc, #140]	; (8008944 <RadioSetTxConfig+0x20c>)
 80088b6:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 80088b8:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80088bc:	4b21      	ldr	r3, [pc, #132]	; (8008944 <RadioSetTxConfig+0x20c>)
 80088be:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 80088c2:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 80088c6:	4b1f      	ldr	r3, [pc, #124]	; (8008944 <RadioSetTxConfig+0x20c>)
 80088c8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 80088cc:	f000 fab5 	bl	8008e3a <RadioStandby>
            RadioSetModem( MODEM_LORA );
 80088d0:	2001      	movs	r0, #1
 80088d2:	f7ff fc51 	bl	8008178 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80088d6:	481c      	ldr	r0, [pc, #112]	; (8008948 <RadioSetTxConfig+0x210>)
 80088d8:	f002 f874 	bl	800a9c4 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80088dc:	481b      	ldr	r0, [pc, #108]	; (800894c <RadioSetTxConfig+0x214>)
 80088de:	f002 f943 	bl	800ab68 <SUBGRF_SetPacketParams>
            break;
 80088e2:	e012      	b.n	800890a <RadioSetTxConfig+0x1d2>
            RadioSetModem(MODEM_SIGFOX_TX);
 80088e4:	2004      	movs	r0, #4
 80088e6:	f7ff fc47 	bl	8008178 <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 80088ea:	4b16      	ldr	r3, [pc, #88]	; (8008944 <RadioSetTxConfig+0x20c>)
 80088ec:	2202      	movs	r2, #2
 80088ee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 80088f2:	4a14      	ldr	r2, [pc, #80]	; (8008944 <RadioSetTxConfig+0x20c>)
 80088f4:	6a3b      	ldr	r3, [r7, #32]
 80088f6:	6493      	str	r3, [r2, #72]	; 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 80088f8:	4b12      	ldr	r3, [pc, #72]	; (8008944 <RadioSetTxConfig+0x20c>)
 80088fa:	2216      	movs	r2, #22
 80088fc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8008900:	4811      	ldr	r0, [pc, #68]	; (8008948 <RadioSetTxConfig+0x210>)
 8008902:	f002 f85f 	bl	800a9c4 <SUBGRF_SetModulationParams>
            break;
 8008906:	e000      	b.n	800890a <RadioSetTxConfig+0x1d2>
            break;
 8008908:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 800890a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800890e:	4618      	mov	r0, r3
 8008910:	f002 fb8e 	bl	800b030 <SUBGRF_SetRfTxPower>
 8008914:	4603      	mov	r3, r0
 8008916:	461a      	mov	r2, r3
 8008918:	4b0a      	ldr	r3, [pc, #40]	; (8008944 <RadioSetTxConfig+0x20c>)
 800891a:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 800891e:	210e      	movs	r1, #14
 8008920:	f640 101f 	movw	r0, #2335	; 0x91f
 8008924:	f002 fa68 	bl	800adf8 <SUBGRF_WriteRegister>
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 8008928:	4b06      	ldr	r3, [pc, #24]	; (8008944 <RadioSetTxConfig+0x20c>)
 800892a:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800892e:	4618      	mov	r0, r3
 8008930:	f002 fd5d 	bl	800b3ee <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 8008934:	4a03      	ldr	r2, [pc, #12]	; (8008944 <RadioSetTxConfig+0x20c>)
 8008936:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008938:	6053      	str	r3, [r2, #4]
}
 800893a:	bf00      	nop
 800893c:	3718      	adds	r7, #24
 800893e:	46bd      	mov	sp, r7
 8008940:	bd80      	pop	{r7, pc}
 8008942:	bf00      	nop
 8008944:	20000a34 	.word	0x20000a34
 8008948:	20000a6c 	.word	0x20000a6c
 800894c:	20000a42 	.word	0x20000a42
 8008950:	0800cd70 	.word	0x0800cd70
 8008954:	0800cf0c 	.word	0x0800cf0c
 8008958:	20000015 	.word	0x20000015

0800895c <RadioCheckRfFrequency>:

static bool RadioCheckRfFrequency( uint32_t frequency )
{
 800895c:	b480      	push	{r7}
 800895e:	b083      	sub	sp, #12
 8008960:	af00      	add	r7, sp, #0
 8008962:	6078      	str	r0, [r7, #4]
    return true;
 8008964:	2301      	movs	r3, #1
}
 8008966:	4618      	mov	r0, r3
 8008968:	370c      	adds	r7, #12
 800896a:	46bd      	mov	sp, r7
 800896c:	bc80      	pop	{r7}
 800896e:	4770      	bx	lr

08008970 <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
 8008970:	b480      	push	{r7}
 8008972:	b085      	sub	sp, #20
 8008974:	af00      	add	r7, sp, #0
 8008976:	4603      	mov	r3, r0
 8008978:	71fb      	strb	r3, [r7, #7]
    uint32_t bandwidthInHz = 0;
 800897a:	2300      	movs	r3, #0
 800897c:	60fb      	str	r3, [r7, #12]

    switch( bw )
 800897e:	79fb      	ldrb	r3, [r7, #7]
 8008980:	2b0a      	cmp	r3, #10
 8008982:	d83e      	bhi.n	8008a02 <RadioGetLoRaBandwidthInHz+0x92>
 8008984:	a201      	add	r2, pc, #4	; (adr r2, 800898c <RadioGetLoRaBandwidthInHz+0x1c>)
 8008986:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800898a:	bf00      	nop
 800898c:	080089b9 	.word	0x080089b9
 8008990:	080089c9 	.word	0x080089c9
 8008994:	080089d9 	.word	0x080089d9
 8008998:	080089e9 	.word	0x080089e9
 800899c:	080089f1 	.word	0x080089f1
 80089a0:	080089f7 	.word	0x080089f7
 80089a4:	080089fd 	.word	0x080089fd
 80089a8:	08008a03 	.word	0x08008a03
 80089ac:	080089c1 	.word	0x080089c1
 80089b0:	080089d1 	.word	0x080089d1
 80089b4:	080089e1 	.word	0x080089e1
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
 80089b8:	f641 6384 	movw	r3, #7812	; 0x1e84
 80089bc:	60fb      	str	r3, [r7, #12]
        break;
 80089be:	e020      	b.n	8008a02 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 80089c0:	f642 03b1 	movw	r3, #10417	; 0x28b1
 80089c4:	60fb      	str	r3, [r7, #12]
        break;
 80089c6:	e01c      	b.n	8008a02 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 80089c8:	f643 5309 	movw	r3, #15625	; 0x3d09
 80089cc:	60fb      	str	r3, [r7, #12]
        break;
 80089ce:	e018      	b.n	8008a02 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 80089d0:	f245 1361 	movw	r3, #20833	; 0x5161
 80089d4:	60fb      	str	r3, [r7, #12]
        break;
 80089d6:	e014      	b.n	8008a02 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 80089d8:	f647 2312 	movw	r3, #31250	; 0x7a12
 80089dc:	60fb      	str	r3, [r7, #12]
        break;
 80089de:	e010      	b.n	8008a02 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 80089e0:	f24a 23c3 	movw	r3, #41667	; 0xa2c3
 80089e4:	60fb      	str	r3, [r7, #12]
        break;
 80089e6:	e00c      	b.n	8008a02 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 80089e8:	f24f 4324 	movw	r3, #62500	; 0xf424
 80089ec:	60fb      	str	r3, [r7, #12]
        break;
 80089ee:	e008      	b.n	8008a02 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 80089f0:	4b07      	ldr	r3, [pc, #28]	; (8008a10 <RadioGetLoRaBandwidthInHz+0xa0>)
 80089f2:	60fb      	str	r3, [r7, #12]
        break;
 80089f4:	e005      	b.n	8008a02 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 80089f6:	4b07      	ldr	r3, [pc, #28]	; (8008a14 <RadioGetLoRaBandwidthInHz+0xa4>)
 80089f8:	60fb      	str	r3, [r7, #12]
        break;
 80089fa:	e002      	b.n	8008a02 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 80089fc:	4b06      	ldr	r3, [pc, #24]	; (8008a18 <RadioGetLoRaBandwidthInHz+0xa8>)
 80089fe:	60fb      	str	r3, [r7, #12]
        break;
 8008a00:	bf00      	nop
    }

    return bandwidthInHz;
 8008a02:	68fb      	ldr	r3, [r7, #12]
}
 8008a04:	4618      	mov	r0, r3
 8008a06:	3714      	adds	r7, #20
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	bc80      	pop	{r7}
 8008a0c:	4770      	bx	lr
 8008a0e:	bf00      	nop
 8008a10:	0001e848 	.word	0x0001e848
 8008a14:	0003d090 	.word	0x0003d090
 8008a18:	0007a120 	.word	0x0007a120

08008a1c <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8008a1c:	b480      	push	{r7}
 8008a1e:	b083      	sub	sp, #12
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	6078      	str	r0, [r7, #4]
 8008a24:	4608      	mov	r0, r1
 8008a26:	4611      	mov	r1, r2
 8008a28:	461a      	mov	r2, r3
 8008a2a:	4603      	mov	r3, r0
 8008a2c:	70fb      	strb	r3, [r7, #3]
 8008a2e:	460b      	mov	r3, r1
 8008a30:	803b      	strh	r3, [r7, #0]
 8008a32:	4613      	mov	r3, r2
 8008a34:	70bb      	strb	r3, [r7, #2]
    return ( preambleLen << 3 ) +
 8008a36:	883b      	ldrh	r3, [r7, #0]
 8008a38:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8008a3a:	78ba      	ldrb	r2, [r7, #2]
 8008a3c:	f082 0201 	eor.w	r2, r2, #1
 8008a40:	b2d2      	uxtb	r2, r2
 8008a42:	2a00      	cmp	r2, #0
 8008a44:	d001      	beq.n	8008a4a <RadioGetGfskTimeOnAirNumerator+0x2e>
 8008a46:	2208      	movs	r2, #8
 8008a48:	e000      	b.n	8008a4c <RadioGetGfskTimeOnAirNumerator+0x30>
 8008a4a:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 8008a4c:	4413      	add	r3, r2
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8008a4e:	f103 0218 	add.w	r2, r3, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 8008a52:	7c3b      	ldrb	r3, [r7, #16]
 8008a54:	7d39      	ldrb	r1, [r7, #20]
 8008a56:	2900      	cmp	r1, #0
 8008a58:	d001      	beq.n	8008a5e <RadioGetGfskTimeOnAirNumerator+0x42>
 8008a5a:	2102      	movs	r1, #2
 8008a5c:	e000      	b.n	8008a60 <RadioGetGfskTimeOnAirNumerator+0x44>
 8008a5e:	2100      	movs	r1, #0
 8008a60:	440b      	add	r3, r1
 8008a62:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8008a64:	4413      	add	r3, r2
}
 8008a66:	4618      	mov	r0, r3
 8008a68:	370c      	adds	r7, #12
 8008a6a:	46bd      	mov	sp, r7
 8008a6c:	bc80      	pop	{r7}
 8008a6e:	4770      	bx	lr

08008a70 <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8008a70:	b480      	push	{r7}
 8008a72:	b08b      	sub	sp, #44	; 0x2c
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	60f8      	str	r0, [r7, #12]
 8008a78:	60b9      	str	r1, [r7, #8]
 8008a7a:	4611      	mov	r1, r2
 8008a7c:	461a      	mov	r2, r3
 8008a7e:	460b      	mov	r3, r1
 8008a80:	71fb      	strb	r3, [r7, #7]
 8008a82:	4613      	mov	r3, r2
 8008a84:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 8008a86:	79fb      	ldrb	r3, [r7, #7]
 8008a88:	3304      	adds	r3, #4
 8008a8a:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 8008a92:	68bb      	ldr	r3, [r7, #8]
 8008a94:	2b05      	cmp	r3, #5
 8008a96:	d002      	beq.n	8008a9e <RadioGetLoRaTimeOnAirNumerator+0x2e>
 8008a98:	68bb      	ldr	r3, [r7, #8]
 8008a9a:	2b06      	cmp	r3, #6
 8008a9c:	d104      	bne.n	8008aa8 <RadioGetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 8008a9e:	88bb      	ldrh	r3, [r7, #4]
 8008aa0:	2b0b      	cmp	r3, #11
 8008aa2:	d801      	bhi.n	8008aa8 <RadioGetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 8008aa4:	230c      	movs	r3, #12
 8008aa6:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d105      	bne.n	8008aba <RadioGetLoRaTimeOnAirNumerator+0x4a>
 8008aae:	68bb      	ldr	r3, [r7, #8]
 8008ab0:	2b0b      	cmp	r3, #11
 8008ab2:	d008      	beq.n	8008ac6 <RadioGetLoRaTimeOnAirNumerator+0x56>
 8008ab4:	68bb      	ldr	r3, [r7, #8]
 8008ab6:	2b0c      	cmp	r3, #12
 8008ab8:	d005      	beq.n	8008ac6 <RadioGetLoRaTimeOnAirNumerator+0x56>
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	2b01      	cmp	r3, #1
 8008abe:	d105      	bne.n	8008acc <RadioGetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8008ac0:	68bb      	ldr	r3, [r7, #8]
 8008ac2:	2b0c      	cmp	r3, #12
 8008ac4:	d102      	bne.n	8008acc <RadioGetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 8008ac6:	2301      	movs	r3, #1
 8008ac8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8008acc:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8008ad0:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 8008ad2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008ad6:	2a00      	cmp	r2, #0
 8008ad8:	d001      	beq.n	8008ade <RadioGetLoRaTimeOnAirNumerator+0x6e>
 8008ada:	2210      	movs	r2, #16
 8008adc:	e000      	b.n	8008ae0 <RadioGetLoRaTimeOnAirNumerator+0x70>
 8008ade:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8008ae0:	4413      	add	r3, r2
 8008ae2:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 8008ae4:	68bb      	ldr	r3, [r7, #8]
 8008ae6:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 8008ae8:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 8008aea:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8008aee:	2a00      	cmp	r2, #0
 8008af0:	d001      	beq.n	8008af6 <RadioGetLoRaTimeOnAirNumerator+0x86>
 8008af2:	2200      	movs	r2, #0
 8008af4:	e000      	b.n	8008af8 <RadioGetLoRaTimeOnAirNumerator+0x88>
 8008af6:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 8008af8:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8008afa:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 8008afc:	68bb      	ldr	r3, [r7, #8]
 8008afe:	2b06      	cmp	r3, #6
 8008b00:	d803      	bhi.n	8008b0a <RadioGetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 8008b02:	68bb      	ldr	r3, [r7, #8]
 8008b04:	009b      	lsls	r3, r3, #2
 8008b06:	623b      	str	r3, [r7, #32]
 8008b08:	e00e      	b.n	8008b28 <RadioGetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 8008b0a:	69fb      	ldr	r3, [r7, #28]
 8008b0c:	3308      	adds	r3, #8
 8008b0e:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 8008b10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d004      	beq.n	8008b22 <RadioGetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 8008b18:	68bb      	ldr	r3, [r7, #8]
 8008b1a:	3b02      	subs	r3, #2
 8008b1c:	009b      	lsls	r3, r3, #2
 8008b1e:	623b      	str	r3, [r7, #32]
 8008b20:	e002      	b.n	8008b28 <RadioGetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 8008b22:	68bb      	ldr	r3, [r7, #8]
 8008b24:	009b      	lsls	r3, r3, #2
 8008b26:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 8008b28:	69fb      	ldr	r3, [r7, #28]
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	da01      	bge.n	8008b32 <RadioGetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 8008b2e:	2300      	movs	r3, #0
 8008b30:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 8008b32:	69fa      	ldr	r2, [r7, #28]
 8008b34:	6a3b      	ldr	r3, [r7, #32]
 8008b36:	4413      	add	r3, r2
 8008b38:	1e5a      	subs	r2, r3, #1
 8008b3a:	6a3b      	ldr	r3, [r7, #32]
 8008b3c:	fb92 f3f3 	sdiv	r3, r2, r3
 8008b40:	697a      	ldr	r2, [r7, #20]
 8008b42:	fb03 f202 	mul.w	r2, r3, r2
 8008b46:	88bb      	ldrh	r3, [r7, #4]
 8008b48:	4413      	add	r3, r2
    int32_t intermediate =
 8008b4a:	330c      	adds	r3, #12
 8008b4c:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 8008b4e:	68bb      	ldr	r3, [r7, #8]
 8008b50:	2b06      	cmp	r3, #6
 8008b52:	d802      	bhi.n	8008b5a <RadioGetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 8008b54:	69bb      	ldr	r3, [r7, #24]
 8008b56:	3302      	adds	r3, #2
 8008b58:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 8008b5a:	69bb      	ldr	r3, [r7, #24]
 8008b5c:	009b      	lsls	r3, r3, #2
 8008b5e:	1c5a      	adds	r2, r3, #1
 8008b60:	68bb      	ldr	r3, [r7, #8]
 8008b62:	3b02      	subs	r3, #2
 8008b64:	fa02 f303 	lsl.w	r3, r2, r3
}
 8008b68:	4618      	mov	r0, r3
 8008b6a:	372c      	adds	r7, #44	; 0x2c
 8008b6c:	46bd      	mov	sp, r7
 8008b6e:	bc80      	pop	{r7}
 8008b70:	4770      	bx	lr
	...

08008b74 <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 8008b74:	b580      	push	{r7, lr}
 8008b76:	b08a      	sub	sp, #40	; 0x28
 8008b78:	af04      	add	r7, sp, #16
 8008b7a:	60b9      	str	r1, [r7, #8]
 8008b7c:	607a      	str	r2, [r7, #4]
 8008b7e:	461a      	mov	r2, r3
 8008b80:	4603      	mov	r3, r0
 8008b82:	73fb      	strb	r3, [r7, #15]
 8008b84:	4613      	mov	r3, r2
 8008b86:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 8008b88:	2300      	movs	r3, #0
 8008b8a:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 8008b8c:	2301      	movs	r3, #1
 8008b8e:	613b      	str	r3, [r7, #16]

    switch( modem )
 8008b90:	7bfb      	ldrb	r3, [r7, #15]
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d002      	beq.n	8008b9c <RadioTimeOnAir+0x28>
 8008b96:	2b01      	cmp	r3, #1
 8008b98:	d017      	beq.n	8008bca <RadioTimeOnAir+0x56>
                                                                  fixLen, payloadLen, crcOn );
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
        }
        break;
    default:
        break;
 8008b9a:	e035      	b.n	8008c08 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 8008b9c:	f897 0024 	ldrb.w	r0, [r7, #36]	; 0x24
 8008ba0:	8c3a      	ldrh	r2, [r7, #32]
 8008ba2:	7bb9      	ldrb	r1, [r7, #14]
 8008ba4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008ba8:	9301      	str	r3, [sp, #4]
 8008baa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008bae:	9300      	str	r3, [sp, #0]
 8008bb0:	4603      	mov	r3, r0
 8008bb2:	6878      	ldr	r0, [r7, #4]
 8008bb4:	f7ff ff32 	bl	8008a1c <RadioGetGfskTimeOnAirNumerator>
 8008bb8:	4603      	mov	r3, r0
 8008bba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008bbe:	fb02 f303 	mul.w	r3, r2, r3
 8008bc2:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	613b      	str	r3, [r7, #16]
        break;
 8008bc8:	e01e      	b.n	8008c08 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 8008bca:	8c39      	ldrh	r1, [r7, #32]
 8008bcc:	7bba      	ldrb	r2, [r7, #14]
 8008bce:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008bd2:	9302      	str	r3, [sp, #8]
 8008bd4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008bd8:	9301      	str	r3, [sp, #4]
 8008bda:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008bde:	9300      	str	r3, [sp, #0]
 8008be0:	460b      	mov	r3, r1
 8008be2:	6879      	ldr	r1, [r7, #4]
 8008be4:	68b8      	ldr	r0, [r7, #8]
 8008be6:	f7ff ff43 	bl	8008a70 <RadioGetLoRaTimeOnAirNumerator>
 8008bea:	4603      	mov	r3, r0
 8008bec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008bf0:	fb02 f303 	mul.w	r3, r2, r3
 8008bf4:	617b      	str	r3, [r7, #20]
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 8008bf6:	4a0a      	ldr	r2, [pc, #40]	; (8008c20 <RadioTimeOnAir+0xac>)
 8008bf8:	68bb      	ldr	r3, [r7, #8]
 8008bfa:	4413      	add	r3, r2
 8008bfc:	781b      	ldrb	r3, [r3, #0]
 8008bfe:	4618      	mov	r0, r3
 8008c00:	f7ff feb6 	bl	8008970 <RadioGetLoRaBandwidthInHz>
 8008c04:	6138      	str	r0, [r7, #16]
        break;
 8008c06:	bf00      	nop
    }
    // Perform integral ceil()
    return DIVC( numerator, denominator );
 8008c08:	697a      	ldr	r2, [r7, #20]
 8008c0a:	693b      	ldr	r3, [r7, #16]
 8008c0c:	4413      	add	r3, r2
 8008c0e:	1e5a      	subs	r2, r3, #1
 8008c10:	693b      	ldr	r3, [r7, #16]
 8008c12:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8008c16:	4618      	mov	r0, r3
 8008c18:	3718      	adds	r7, #24
 8008c1a:	46bd      	mov	sp, r7
 8008c1c:	bd80      	pop	{r7, pc}
 8008c1e:	bf00      	nop
 8008c20:	0800cf0c 	.word	0x0800cf0c

08008c24 <RadioSend>:

static radio_status_t RadioSend( uint8_t *buffer, uint8_t size )
{
 8008c24:	b580      	push	{r7, lr}
 8008c26:	b084      	sub	sp, #16
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	6078      	str	r0, [r7, #4]
 8008c2c:	460b      	mov	r3, r1
 8008c2e:	70fb      	strb	r3, [r7, #3]
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 8008c30:	2300      	movs	r3, #0
 8008c32:	2200      	movs	r2, #0
 8008c34:	f240 2101 	movw	r1, #513	; 0x201
 8008c38:	f240 2001 	movw	r0, #513	; 0x201
 8008c3c:	f001 fd2c 	bl	800a698 <SUBGRF_SetDioIrqParams>

    /* Set DBG pin */
    DBG_GPIO_RADIO_TX( SET );

    /* Set RF switch */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8008c40:	4b70      	ldr	r3, [pc, #448]	; (8008e04 <RadioSend+0x1e0>)
 8008c42:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8008c46:	2101      	movs	r1, #1
 8008c48:	4618      	mov	r0, r3
 8008c4a:	f002 f9c9 	bl	800afe0 <SUBGRF_SetSwitch>
    /* WORKAROUND - Modulation Quality with 500 kHz LoRaTM Bandwidth*/
    /* RegTxModulation = @address 0x0889 */
    if( ( SubgRf.Modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 8008c4e:	4b6d      	ldr	r3, [pc, #436]	; (8008e04 <RadioSend+0x1e0>)
 8008c50:	781b      	ldrb	r3, [r3, #0]
 8008c52:	2b01      	cmp	r3, #1
 8008c54:	d112      	bne.n	8008c7c <RadioSend+0x58>
 8008c56:	4b6b      	ldr	r3, [pc, #428]	; (8008e04 <RadioSend+0x1e0>)
 8008c58:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008c5c:	2b06      	cmp	r3, #6
 8008c5e:	d10d      	bne.n	8008c7c <RadioSend+0x58>
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 8008c60:	f640 0089 	movw	r0, #2185	; 0x889
 8008c64:	f002 f8dc 	bl	800ae20 <SUBGRF_ReadRegister>
 8008c68:	4603      	mov	r3, r0
 8008c6a:	f023 0304 	bic.w	r3, r3, #4
 8008c6e:	b2db      	uxtb	r3, r3
 8008c70:	4619      	mov	r1, r3
 8008c72:	f640 0089 	movw	r0, #2185	; 0x889
 8008c76:	f002 f8bf 	bl	800adf8 <SUBGRF_WriteRegister>
 8008c7a:	e00c      	b.n	8008c96 <RadioSend+0x72>
    }
    else
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 8008c7c:	f640 0089 	movw	r0, #2185	; 0x889
 8008c80:	f002 f8ce 	bl	800ae20 <SUBGRF_ReadRegister>
 8008c84:	4603      	mov	r3, r0
 8008c86:	f043 0304 	orr.w	r3, r3, #4
 8008c8a:	b2db      	uxtb	r3, r3
 8008c8c:	4619      	mov	r1, r3
 8008c8e:	f640 0089 	movw	r0, #2185	; 0x889
 8008c92:	f002 f8b1 	bl	800adf8 <SUBGRF_WriteRegister>
    }
    else
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    {
        /* WORKAROUND END */
        switch( SubgRf.Modem )
 8008c96:	4b5b      	ldr	r3, [pc, #364]	; (8008e04 <RadioSend+0x1e0>)
 8008c98:	781b      	ldrb	r3, [r3, #0]
 8008c9a:	2b04      	cmp	r3, #4
 8008c9c:	f200 80a2 	bhi.w	8008de4 <RadioSend+0x1c0>
 8008ca0:	a201      	add	r2, pc, #4	; (adr r2, 8008ca8 <RadioSend+0x84>)
 8008ca2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ca6:	bf00      	nop
 8008ca8:	08008cd7 	.word	0x08008cd7
 8008cac:	08008cbd 	.word	0x08008cbd
 8008cb0:	08008cd7 	.word	0x08008cd7
 8008cb4:	08008d2d 	.word	0x08008d2d
 8008cb8:	08008d4d 	.word	0x08008d4d
        {
        case MODEM_LORA:
        {
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 8008cbc:	4a51      	ldr	r2, [pc, #324]	; (8008e04 <RadioSend+0x1e0>)
 8008cbe:	78fb      	ldrb	r3, [r7, #3]
 8008cc0:	77d3      	strb	r3, [r2, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008cc2:	4851      	ldr	r0, [pc, #324]	; (8008e08 <RadioSend+0x1e4>)
 8008cc4:	f001 ff50 	bl	800ab68 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8008cc8:	78fb      	ldrb	r3, [r7, #3]
 8008cca:	2200      	movs	r2, #0
 8008ccc:	4619      	mov	r1, r3
 8008cce:	6878      	ldr	r0, [r7, #4]
 8008cd0:	f001 fa00 	bl	800a0d4 <SUBGRF_SendPayload>
            break;
 8008cd4:	e087      	b.n	8008de6 <RadioSend+0x1c2>
        }
        case MODEM_MSK:
        case MODEM_FSK:
        {
            if ( 1UL == RFW_Is_Init( ) )
 8008cd6:	f002 fb7c 	bl	800b3d2 <RFW_Is_Init>
 8008cda:	4603      	mov	r3, r0
 8008cdc:	2b01      	cmp	r3, #1
 8008cde:	d118      	bne.n	8008d12 <RadioSend+0xee>
            {
                uint8_t outsize;
                if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 8008ce0:	f107 020d 	add.w	r2, r7, #13
 8008ce4:	78fb      	ldrb	r3, [r7, #3]
 8008ce6:	4619      	mov	r1, r3
 8008ce8:	6878      	ldr	r0, [r7, #4]
 8008cea:	f002 fb8a 	bl	800b402 <RFW_TransmitInit>
 8008cee:	4603      	mov	r3, r0
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d10c      	bne.n	8008d0e <RadioSend+0xea>
                {
                    SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 8008cf4:	7b7a      	ldrb	r2, [r7, #13]
 8008cf6:	4b43      	ldr	r3, [pc, #268]	; (8008e04 <RadioSend+0x1e0>)
 8008cf8:	759a      	strb	r2, [r3, #22]
                    SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008cfa:	4843      	ldr	r0, [pc, #268]	; (8008e08 <RadioSend+0x1e4>)
 8008cfc:	f001 ff34 	bl	800ab68 <SUBGRF_SetPacketParams>
                    SUBGRF_SendPayload( buffer, outsize, 0 );
 8008d00:	7b7b      	ldrb	r3, [r7, #13]
 8008d02:	2200      	movs	r2, #0
 8008d04:	4619      	mov	r1, r3
 8008d06:	6878      	ldr	r0, [r7, #4]
 8008d08:	f001 f9e4 	bl	800a0d4 <SUBGRF_SendPayload>
            {
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
                SUBGRF_SendPayload( buffer, size, 0 );
            }
            break;
 8008d0c:	e06b      	b.n	8008de6 <RadioSend+0x1c2>
                    return RADIO_STATUS_ERROR;
 8008d0e:	2303      	movs	r3, #3
 8008d10:	e073      	b.n	8008dfa <RadioSend+0x1d6>
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 8008d12:	4a3c      	ldr	r2, [pc, #240]	; (8008e04 <RadioSend+0x1e0>)
 8008d14:	78fb      	ldrb	r3, [r7, #3]
 8008d16:	7593      	strb	r3, [r2, #22]
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008d18:	483b      	ldr	r0, [pc, #236]	; (8008e08 <RadioSend+0x1e4>)
 8008d1a:	f001 ff25 	bl	800ab68 <SUBGRF_SetPacketParams>
                SUBGRF_SendPayload( buffer, size, 0 );
 8008d1e:	78fb      	ldrb	r3, [r7, #3]
 8008d20:	2200      	movs	r2, #0
 8008d22:	4619      	mov	r1, r3
 8008d24:	6878      	ldr	r0, [r7, #4]
 8008d26:	f001 f9d5 	bl	800a0d4 <SUBGRF_SendPayload>
            break;
 8008d2a:	e05c      	b.n	8008de6 <RadioSend+0x1c2>
        }
        case MODEM_BPSK:
        {
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8008d2c:	4b35      	ldr	r3, [pc, #212]	; (8008e04 <RadioSend+0x1e0>)
 8008d2e:	2202      	movs	r2, #2
 8008d30:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 8008d32:	4a34      	ldr	r2, [pc, #208]	; (8008e04 <RadioSend+0x1e0>)
 8008d34:	78fb      	ldrb	r3, [r7, #3]
 8008d36:	7693      	strb	r3, [r2, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008d38:	4833      	ldr	r0, [pc, #204]	; (8008e08 <RadioSend+0x1e4>)
 8008d3a:	f001 ff15 	bl	800ab68 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8008d3e:	78fb      	ldrb	r3, [r7, #3]
 8008d40:	2200      	movs	r2, #0
 8008d42:	4619      	mov	r1, r3
 8008d44:	6878      	ldr	r0, [r7, #4]
 8008d46:	f001 f9c5 	bl	800a0d4 <SUBGRF_SendPayload>
            break;
 8008d4a:	e04c      	b.n	8008de6 <RadioSend+0x1c2>
        case MODEM_SIGFOX_TX:
        {
            /* from bpsk to dbpsk */
            /* first 1 bit duplicated */
            /* RadioBuffer is 1 bytes more */
            payload_integration( RadioBuffer, buffer, size );
 8008d4c:	78fb      	ldrb	r3, [r7, #3]
 8008d4e:	461a      	mov	r2, r3
 8008d50:	6879      	ldr	r1, [r7, #4]
 8008d52:	482e      	ldr	r0, [pc, #184]	; (8008e0c <RadioSend+0x1e8>)
 8008d54:	f000 fc98 	bl	8009688 <payload_integration>

            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8008d58:	4b2a      	ldr	r3, [pc, #168]	; (8008e04 <RadioSend+0x1e0>)
 8008d5a:	2202      	movs	r2, #2
 8008d5c:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 8008d5e:	78fb      	ldrb	r3, [r7, #3]
 8008d60:	3301      	adds	r3, #1
 8008d62:	b2da      	uxtb	r2, r3
 8008d64:	4b27      	ldr	r3, [pc, #156]	; (8008e04 <RadioSend+0x1e0>)
 8008d66:	769a      	strb	r2, [r3, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008d68:	4827      	ldr	r0, [pc, #156]	; (8008e08 <RadioSend+0x1e4>)
 8008d6a:	f001 fefd 	bl	800ab68 <SUBGRF_SetPacketParams>

            RadioWrite( SUBGHZ_RAM_RAMPUPL, 0 ); // clean start-up LSB
 8008d6e:	2100      	movs	r1, #0
 8008d70:	20f1      	movs	r0, #241	; 0xf1
 8008d72:	f000 f964 	bl	800903e <RadioWrite>
            RadioWrite( SUBGHZ_RAM_RAMPUPH, 0 ); // clean start-up MSB
 8008d76:	2100      	movs	r1, #0
 8008d78:	20f0      	movs	r0, #240	; 0xf0
 8008d7a:	f000 f960 	bl	800903e <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 8008d7e:	4b21      	ldr	r3, [pc, #132]	; (8008e04 <RadioSend+0x1e0>)
 8008d80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008d82:	2b64      	cmp	r3, #100	; 0x64
 8008d84:	d108      	bne.n	8008d98 <RadioSend+0x174>
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0x70 ); // clean end of frame LSB
 8008d86:	2170      	movs	r1, #112	; 0x70
 8008d88:	20f3      	movs	r0, #243	; 0xf3
 8008d8a:	f000 f958 	bl	800903e <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x1D ); // clean end of frame MSB
 8008d8e:	211d      	movs	r1, #29
 8008d90:	20f2      	movs	r0, #242	; 0xf2
 8008d92:	f000 f954 	bl	800903e <RadioWrite>
 8008d96:	e007      	b.n	8008da8 <RadioSend+0x184>
            }
            else // 600 bps
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0xE1 ); // clean end of frame LSB
 8008d98:	21e1      	movs	r1, #225	; 0xe1
 8008d9a:	20f3      	movs	r0, #243	; 0xf3
 8008d9c:	f000 f94f 	bl	800903e <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x04 ); // clean end of frame MSB
 8008da0:	2104      	movs	r1, #4
 8008da2:	20f2      	movs	r0, #242	; 0xf2
 8008da4:	f000 f94b 	bl	800903e <RadioWrite>
            }

            uint16_t bitNum = ( size * 8 ) + 2;
 8008da8:	78fb      	ldrb	r3, [r7, #3]
 8008daa:	b29b      	uxth	r3, r3
 8008dac:	00db      	lsls	r3, r3, #3
 8008dae:	b29b      	uxth	r3, r3
 8008db0:	3302      	adds	r3, #2
 8008db2:	81fb      	strh	r3, [r7, #14]
            RadioWrite( SUBGHZ_RAM_FRAMELIMH, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 8008db4:	89fb      	ldrh	r3, [r7, #14]
 8008db6:	0a1b      	lsrs	r3, r3, #8
 8008db8:	b29b      	uxth	r3, r3
 8008dba:	b2db      	uxtb	r3, r3
 8008dbc:	4619      	mov	r1, r3
 8008dbe:	20f4      	movs	r0, #244	; 0xf4
 8008dc0:	f000 f93d 	bl	800903e <RadioWrite>
            RadioWrite( SUBGHZ_RAM_FRAMELIML, bitNum & 0x00FF );             // limit frame
 8008dc4:	89fb      	ldrh	r3, [r7, #14]
 8008dc6:	b2db      	uxtb	r3, r3
 8008dc8:	4619      	mov	r1, r3
 8008dca:	20f5      	movs	r0, #245	; 0xf5
 8008dcc:	f000 f937 	bl	800903e <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size + 1, 0xFFFFFF );
 8008dd0:	78fb      	ldrb	r3, [r7, #3]
 8008dd2:	3301      	adds	r3, #1
 8008dd4:	b2db      	uxtb	r3, r3
 8008dd6:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8008dda:	4619      	mov	r1, r3
 8008ddc:	480b      	ldr	r0, [pc, #44]	; (8008e0c <RadioSend+0x1e8>)
 8008dde:	f001 f979 	bl	800a0d4 <SUBGRF_SendPayload>
            break;
 8008de2:	e000      	b.n	8008de6 <RadioSend+0x1c2>
        }
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 8008de4:	bf00      	nop
        }

        TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 8008de6:	4b07      	ldr	r3, [pc, #28]	; (8008e04 <RadioSend+0x1e0>)
 8008de8:	685b      	ldr	r3, [r3, #4]
 8008dea:	4619      	mov	r1, r3
 8008dec:	4808      	ldr	r0, [pc, #32]	; (8008e10 <RadioSend+0x1ec>)
 8008dee:	f002 fdcf 	bl	800b990 <UTIL_TIMER_SetPeriod>
        TimerStart( &TxTimeoutTimer );
 8008df2:	4807      	ldr	r0, [pc, #28]	; (8008e10 <RadioSend+0x1ec>)
 8008df4:	f002 fcee 	bl	800b7d4 <UTIL_TIMER_Start>
    }

    return RADIO_STATUS_OK;
 8008df8:	2300      	movs	r3, #0
}
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	3710      	adds	r7, #16
 8008dfe:	46bd      	mov	sp, r7
 8008e00:	bd80      	pop	{r7, pc}
 8008e02:	bf00      	nop
 8008e04:	20000a34 	.word	0x20000a34
 8008e08:	20000a42 	.word	0x20000a42
 8008e0c:	20000930 	.word	0x20000930
 8008e10:	20000a90 	.word	0x20000a90

08008e14 <RadioSleep>:

static void RadioSleep( void )
{
 8008e14:	b580      	push	{r7, lr}
 8008e16:	b082      	sub	sp, #8
 8008e18:	af00      	add	r7, sp, #0
    SleepParams_t params = { 0 };
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	713b      	strb	r3, [r7, #4]

    params.Fields.WarmStart = 1;
 8008e1e:	793b      	ldrb	r3, [r7, #4]
 8008e20:	f043 0304 	orr.w	r3, r3, #4
 8008e24:	713b      	strb	r3, [r7, #4]
    SUBGRF_SetSleep( params );
 8008e26:	7938      	ldrb	r0, [r7, #4]
 8008e28:	f001 fa30 	bl	800a28c <SUBGRF_SetSleep>

    RADIO_DELAY_MS( 2 );
 8008e2c:	2002      	movs	r0, #2
 8008e2e:	f7f9 fe53 	bl	8002ad8 <HAL_Delay>
}
 8008e32:	bf00      	nop
 8008e34:	3708      	adds	r7, #8
 8008e36:	46bd      	mov	sp, r7
 8008e38:	bd80      	pop	{r7, pc}

08008e3a <RadioStandby>:

static void RadioStandby( void )
{
 8008e3a:	b580      	push	{r7, lr}
 8008e3c:	af00      	add	r7, sp, #0
    SUBGRF_SetStandby( STDBY_RC );
 8008e3e:	2000      	movs	r0, #0
 8008e40:	f001 fa56 	bl	800a2f0 <SUBGRF_SetStandby>
}
 8008e44:	bf00      	nop
 8008e46:	bd80      	pop	{r7, pc}

08008e48 <RadioRx>:

static void RadioRx( uint32_t timeout )
{
 8008e48:	b580      	push	{r7, lr}
 8008e4a:	b082      	sub	sp, #8
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init( ) )
 8008e50:	f002 fabf 	bl	800b3d2 <RFW_Is_Init>
 8008e54:	4603      	mov	r3, r0
 8008e56:	2b01      	cmp	r3, #1
 8008e58:	d102      	bne.n	8008e60 <RadioRx+0x18>
    {
        RFW_ReceiveInit( );
 8008e5a:	f002 fae2 	bl	800b422 <RFW_ReceiveInit>
 8008e5e:	e007      	b.n	8008e70 <RadioRx+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8008e60:	2300      	movs	r3, #0
 8008e62:	2200      	movs	r2, #0
 8008e64:	f240 2162 	movw	r1, #610	; 0x262
 8008e68:	f240 2062 	movw	r0, #610	; 0x262
 8008e6c:	f001 fc14 	bl	800a698 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }

    if( timeout != 0 )
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d006      	beq.n	8008e84 <RadioRx+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 8008e76:	6879      	ldr	r1, [r7, #4]
 8008e78:	4811      	ldr	r0, [pc, #68]	; (8008ec0 <RadioRx+0x78>)
 8008e7a:	f002 fd89 	bl	800b990 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8008e7e:	4810      	ldr	r0, [pc, #64]	; (8008ec0 <RadioRx+0x78>)
 8008e80:	f002 fca8 	bl	800b7d4 <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8008e84:	4b0f      	ldr	r3, [pc, #60]	; (8008ec4 <RadioRx+0x7c>)
 8008e86:	2200      	movs	r2, #0
 8008e88:	659a      	str	r2, [r3, #88]	; 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8008e8a:	4b0e      	ldr	r3, [pc, #56]	; (8008ec4 <RadioRx+0x7c>)
 8008e8c:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8008e90:	2100      	movs	r1, #0
 8008e92:	4618      	mov	r0, r3
 8008e94:	f002 f8a4 	bl	800afe0 <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 8008e98:	4b0a      	ldr	r3, [pc, #40]	; (8008ec4 <RadioRx+0x7c>)
 8008e9a:	785b      	ldrb	r3, [r3, #1]
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d004      	beq.n	8008eaa <RadioRx+0x62>
    {
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8008ea0:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8008ea4:	f001 fa60 	bl	800a368 <SUBGRF_SetRx>
    }
    else
    {
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
    }
}
 8008ea8:	e005      	b.n	8008eb6 <RadioRx+0x6e>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 8008eaa:	4b06      	ldr	r3, [pc, #24]	; (8008ec4 <RadioRx+0x7c>)
 8008eac:	689b      	ldr	r3, [r3, #8]
 8008eae:	019b      	lsls	r3, r3, #6
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	f001 fa59 	bl	800a368 <SUBGRF_SetRx>
}
 8008eb6:	bf00      	nop
 8008eb8:	3708      	adds	r7, #8
 8008eba:	46bd      	mov	sp, r7
 8008ebc:	bd80      	pop	{r7, pc}
 8008ebe:	bf00      	nop
 8008ec0:	20000aa8 	.word	0x20000aa8
 8008ec4:	20000a34 	.word	0x20000a34

08008ec8 <RadioRxBoosted>:

static void RadioRxBoosted( uint32_t timeout )
{
 8008ec8:	b580      	push	{r7, lr}
 8008eca:	b082      	sub	sp, #8
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init() )
 8008ed0:	f002 fa7f 	bl	800b3d2 <RFW_Is_Init>
 8008ed4:	4603      	mov	r3, r0
 8008ed6:	2b01      	cmp	r3, #1
 8008ed8:	d102      	bne.n	8008ee0 <RadioRxBoosted+0x18>
    {
        RFW_ReceiveInit();
 8008eda:	f002 faa2 	bl	800b422 <RFW_ReceiveInit>
 8008ede:	e007      	b.n	8008ef0 <RadioRxBoosted+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8008ee0:	2300      	movs	r3, #0
 8008ee2:	2200      	movs	r2, #0
 8008ee4:	f240 2162 	movw	r1, #610	; 0x262
 8008ee8:	f240 2062 	movw	r0, #610	; 0x262
 8008eec:	f001 fbd4 	bl	800a698 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }
    if( timeout != 0 )
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d006      	beq.n	8008f04 <RadioRxBoosted+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 8008ef6:	6879      	ldr	r1, [r7, #4]
 8008ef8:	4811      	ldr	r0, [pc, #68]	; (8008f40 <RadioRxBoosted+0x78>)
 8008efa:	f002 fd49 	bl	800b990 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8008efe:	4810      	ldr	r0, [pc, #64]	; (8008f40 <RadioRxBoosted+0x78>)
 8008f00:	f002 fc68 	bl	800b7d4 <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8008f04:	4b0f      	ldr	r3, [pc, #60]	; (8008f44 <RadioRxBoosted+0x7c>)
 8008f06:	2200      	movs	r2, #0
 8008f08:	659a      	str	r2, [r3, #88]	; 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8008f0a:	4b0e      	ldr	r3, [pc, #56]	; (8008f44 <RadioRxBoosted+0x7c>)
 8008f0c:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8008f10:	2100      	movs	r1, #0
 8008f12:	4618      	mov	r0, r3
 8008f14:	f002 f864 	bl	800afe0 <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 8008f18:	4b0a      	ldr	r3, [pc, #40]	; (8008f44 <RadioRxBoosted+0x7c>)
 8008f1a:	785b      	ldrb	r3, [r3, #1]
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d004      	beq.n	8008f2a <RadioRxBoosted+0x62>
    {
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 8008f20:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8008f24:	f001 fa40 	bl	800a3a8 <SUBGRF_SetRxBoosted>
    }
    else
    {
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
    }
}
 8008f28:	e005      	b.n	8008f36 <RadioRxBoosted+0x6e>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 8008f2a:	4b06      	ldr	r3, [pc, #24]	; (8008f44 <RadioRxBoosted+0x7c>)
 8008f2c:	689b      	ldr	r3, [r3, #8]
 8008f2e:	019b      	lsls	r3, r3, #6
 8008f30:	4618      	mov	r0, r3
 8008f32:	f001 fa39 	bl	800a3a8 <SUBGRF_SetRxBoosted>
}
 8008f36:	bf00      	nop
 8008f38:	3708      	adds	r7, #8
 8008f3a:	46bd      	mov	sp, r7
 8008f3c:	bd80      	pop	{r7, pc}
 8008f3e:	bf00      	nop
 8008f40:	20000aa8 	.word	0x20000aa8
 8008f44:	20000a34 	.word	0x20000a34

08008f48 <RadioSetRxDutyCycle>:

static void RadioSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 8008f48:	b580      	push	{r7, lr}
 8008f4a:	b082      	sub	sp, #8
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	6078      	str	r0, [r7, #4]
 8008f50:	6039      	str	r1, [r7, #0]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 2 * rxTime + sleepTime;
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	005a      	lsls	r2, r3, #1
 8008f56:	683b      	ldr	r3, [r7, #0]
 8008f58:	4413      	add	r3, r2
 8008f5a:	4a0c      	ldr	r2, [pc, #48]	; (8008f8c <RadioSetRxDutyCycle+0x44>)
 8008f5c:	6593      	str	r3, [r2, #88]	; 0x58
    /*Enable also the IRQ_PREAMBLE_DETECTED*/
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8008f5e:	2300      	movs	r3, #0
 8008f60:	2200      	movs	r2, #0
 8008f62:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8008f66:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8008f6a:	f001 fb95 	bl	800a698 <SUBGRF_SetDioIrqParams>
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8008f6e:	4b07      	ldr	r3, [pc, #28]	; (8008f8c <RadioSetRxDutyCycle+0x44>)
 8008f70:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8008f74:	2100      	movs	r1, #0
 8008f76:	4618      	mov	r0, r3
 8008f78:	f002 f832 	bl	800afe0 <SUBGRF_SetSwitch>
    /* Start Rx DutyCycle*/
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 8008f7c:	6839      	ldr	r1, [r7, #0]
 8008f7e:	6878      	ldr	r0, [r7, #4]
 8008f80:	f001 fa36 	bl	800a3f0 <SUBGRF_SetRxDutyCycle>
}
 8008f84:	bf00      	nop
 8008f86:	3708      	adds	r7, #8
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	bd80      	pop	{r7, pc}
 8008f8c:	20000a34 	.word	0x20000a34

08008f90 <RadioStartCad>:

static void RadioStartCad( void )
{
 8008f90:	b580      	push	{r7, lr}
 8008f92:	af00      	add	r7, sp, #0
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8008f94:	4b09      	ldr	r3, [pc, #36]	; (8008fbc <RadioStartCad+0x2c>)
 8008f96:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8008f9a:	2100      	movs	r1, #0
 8008f9c:	4618      	mov	r0, r3
 8008f9e:	f002 f81f 	bl	800afe0 <SUBGRF_SetSwitch>

    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 8008fa2:	2300      	movs	r3, #0
 8008fa4:	2200      	movs	r2, #0
 8008fa6:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8008faa:	f44f 70c0 	mov.w	r0, #384	; 0x180
 8008fae:	f001 fb73 	bl	800a698 <SUBGRF_SetDioIrqParams>
                            IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );
    SUBGRF_SetCad( );
 8008fb2:	f001 fa49 	bl	800a448 <SUBGRF_SetCad>
}
 8008fb6:	bf00      	nop
 8008fb8:	bd80      	pop	{r7, pc}
 8008fba:	bf00      	nop
 8008fbc:	20000a34 	.word	0x20000a34

08008fc0 <RadioSetTxContinuousWave>:

static void RadioSetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b084      	sub	sp, #16
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	6078      	str	r0, [r7, #4]
 8008fc8:	460b      	mov	r3, r1
 8008fca:	70fb      	strb	r3, [r7, #3]
 8008fcc:	4613      	mov	r3, r2
 8008fce:	803b      	strh	r3, [r7, #0]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    uint32_t timeout = ( uint32_t )time * 1000;
 8008fd0:	883b      	ldrh	r3, [r7, #0]
 8008fd2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008fd6:	fb02 f303 	mul.w	r3, r2, r3
 8008fda:	60fb      	str	r3, [r7, #12]
    uint8_t antswitchpow;

    SUBGRF_SetRfFrequency( freq );
 8008fdc:	6878      	ldr	r0, [r7, #4]
 8008fde:	f001 fbb7 	bl	800a750 <SUBGRF_SetRfFrequency>

    antswitchpow = SUBGRF_SetRfTxPower( power );
 8008fe2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	f002 f822 	bl	800b030 <SUBGRF_SetRfTxPower>
 8008fec:	4603      	mov	r3, r0
 8008fee:	72fb      	strb	r3, [r7, #11]

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8008ff0:	210e      	movs	r1, #14
 8008ff2:	f640 101f 	movw	r0, #2335	; 0x91f
 8008ff6:	f001 feff 	bl	800adf8 <SUBGRF_WriteRegister>

    /* Set RF switch */
    SUBGRF_SetSwitch( antswitchpow, RFSWITCH_TX );
 8008ffa:	7afb      	ldrb	r3, [r7, #11]
 8008ffc:	2101      	movs	r1, #1
 8008ffe:	4618      	mov	r0, r3
 8009000:	f001 ffee 	bl	800afe0 <SUBGRF_SetSwitch>

    SUBGRF_SetTxContinuousWave( );
 8009004:	f001 fa2e 	bl	800a464 <SUBGRF_SetTxContinuousWave>

    TimerSetValue( &TxTimeoutTimer, timeout );
 8009008:	68f9      	ldr	r1, [r7, #12]
 800900a:	4805      	ldr	r0, [pc, #20]	; (8009020 <RadioSetTxContinuousWave+0x60>)
 800900c:	f002 fcc0 	bl	800b990 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 8009010:	4803      	ldr	r0, [pc, #12]	; (8009020 <RadioSetTxContinuousWave+0x60>)
 8009012:	f002 fbdf 	bl	800b7d4 <UTIL_TIMER_Start>
}
 8009016:	bf00      	nop
 8009018:	3710      	adds	r7, #16
 800901a:	46bd      	mov	sp, r7
 800901c:	bd80      	pop	{r7, pc}
 800901e:	bf00      	nop
 8009020:	20000a90 	.word	0x20000a90

08009024 <RadioRssi>:

static int16_t RadioRssi( RadioModems_t modem )
{
 8009024:	b580      	push	{r7, lr}
 8009026:	b082      	sub	sp, #8
 8009028:	af00      	add	r7, sp, #0
 800902a:	4603      	mov	r3, r0
 800902c:	71fb      	strb	r3, [r7, #7]
    return SUBGRF_GetRssiInst( );
 800902e:	f001 fe50 	bl	800acd2 <SUBGRF_GetRssiInst>
 8009032:	4603      	mov	r3, r0
 8009034:	b21b      	sxth	r3, r3
}
 8009036:	4618      	mov	r0, r3
 8009038:	3708      	adds	r7, #8
 800903a:	46bd      	mov	sp, r7
 800903c:	bd80      	pop	{r7, pc}

0800903e <RadioWrite>:

static void RadioWrite( uint16_t addr, uint8_t data )
{
 800903e:	b580      	push	{r7, lr}
 8009040:	b082      	sub	sp, #8
 8009042:	af00      	add	r7, sp, #0
 8009044:	4603      	mov	r3, r0
 8009046:	460a      	mov	r2, r1
 8009048:	80fb      	strh	r3, [r7, #6]
 800904a:	4613      	mov	r3, r2
 800904c:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegister( addr, data );
 800904e:	797a      	ldrb	r2, [r7, #5]
 8009050:	88fb      	ldrh	r3, [r7, #6]
 8009052:	4611      	mov	r1, r2
 8009054:	4618      	mov	r0, r3
 8009056:	f001 fecf 	bl	800adf8 <SUBGRF_WriteRegister>
}
 800905a:	bf00      	nop
 800905c:	3708      	adds	r7, #8
 800905e:	46bd      	mov	sp, r7
 8009060:	bd80      	pop	{r7, pc}

08009062 <RadioRead>:

static uint8_t RadioRead( uint16_t addr )
{
 8009062:	b580      	push	{r7, lr}
 8009064:	b082      	sub	sp, #8
 8009066:	af00      	add	r7, sp, #0
 8009068:	4603      	mov	r3, r0
 800906a:	80fb      	strh	r3, [r7, #6]
    return SUBGRF_ReadRegister( addr );
 800906c:	88fb      	ldrh	r3, [r7, #6]
 800906e:	4618      	mov	r0, r3
 8009070:	f001 fed6 	bl	800ae20 <SUBGRF_ReadRegister>
 8009074:	4603      	mov	r3, r0
}
 8009076:	4618      	mov	r0, r3
 8009078:	3708      	adds	r7, #8
 800907a:	46bd      	mov	sp, r7
 800907c:	bd80      	pop	{r7, pc}

0800907e <RadioWriteRegisters>:

static void RadioWriteRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 800907e:	b580      	push	{r7, lr}
 8009080:	b082      	sub	sp, #8
 8009082:	af00      	add	r7, sp, #0
 8009084:	4603      	mov	r3, r0
 8009086:	6039      	str	r1, [r7, #0]
 8009088:	80fb      	strh	r3, [r7, #6]
 800908a:	4613      	mov	r3, r2
 800908c:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegisters( addr, buffer, size );
 800908e:	797b      	ldrb	r3, [r7, #5]
 8009090:	b29a      	uxth	r2, r3
 8009092:	88fb      	ldrh	r3, [r7, #6]
 8009094:	6839      	ldr	r1, [r7, #0]
 8009096:	4618      	mov	r0, r3
 8009098:	f001 fed6 	bl	800ae48 <SUBGRF_WriteRegisters>
}
 800909c:	bf00      	nop
 800909e:	3708      	adds	r7, #8
 80090a0:	46bd      	mov	sp, r7
 80090a2:	bd80      	pop	{r7, pc}

080090a4 <RadioReadRegisters>:

static void RadioReadRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 80090a4:	b580      	push	{r7, lr}
 80090a6:	b082      	sub	sp, #8
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	4603      	mov	r3, r0
 80090ac:	6039      	str	r1, [r7, #0]
 80090ae:	80fb      	strh	r3, [r7, #6]
 80090b0:	4613      	mov	r3, r2
 80090b2:	717b      	strb	r3, [r7, #5]
    SUBGRF_ReadRegisters( addr, buffer, size );
 80090b4:	797b      	ldrb	r3, [r7, #5]
 80090b6:	b29a      	uxth	r2, r3
 80090b8:	88fb      	ldrh	r3, [r7, #6]
 80090ba:	6839      	ldr	r1, [r7, #0]
 80090bc:	4618      	mov	r0, r3
 80090be:	f001 fee5 	bl	800ae8c <SUBGRF_ReadRegisters>
}
 80090c2:	bf00      	nop
 80090c4:	3708      	adds	r7, #8
 80090c6:	46bd      	mov	sp, r7
 80090c8:	bd80      	pop	{r7, pc}
	...

080090cc <RadioSetMaxPayloadLength>:

static void RadioSetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 80090cc:	b580      	push	{r7, lr}
 80090ce:	b082      	sub	sp, #8
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	4603      	mov	r3, r0
 80090d4:	460a      	mov	r2, r1
 80090d6:	71fb      	strb	r3, [r7, #7]
 80090d8:	4613      	mov	r3, r2
 80090da:	71bb      	strb	r3, [r7, #6]
    if( modem == MODEM_LORA )
 80090dc:	79fb      	ldrb	r3, [r7, #7]
 80090de:	2b01      	cmp	r3, #1
 80090e0:	d10a      	bne.n	80090f8 <RadioSetMaxPayloadLength+0x2c>
    {
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 80090e2:	4a0e      	ldr	r2, [pc, #56]	; (800911c <RadioSetMaxPayloadLength+0x50>)
 80090e4:	79bb      	ldrb	r3, [r7, #6]
 80090e6:	7013      	strb	r3, [r2, #0]
 80090e8:	4b0c      	ldr	r3, [pc, #48]	; (800911c <RadioSetMaxPayloadLength+0x50>)
 80090ea:	781a      	ldrb	r2, [r3, #0]
 80090ec:	4b0c      	ldr	r3, [pc, #48]	; (8009120 <RadioSetMaxPayloadLength+0x54>)
 80090ee:	77da      	strb	r2, [r3, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80090f0:	480c      	ldr	r0, [pc, #48]	; (8009124 <RadioSetMaxPayloadLength+0x58>)
 80090f2:	f001 fd39 	bl	800ab68 <SUBGRF_SetPacketParams>
        {
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
        }
    }
}
 80090f6:	e00d      	b.n	8009114 <RadioSetMaxPayloadLength+0x48>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 80090f8:	4b09      	ldr	r3, [pc, #36]	; (8009120 <RadioSetMaxPayloadLength+0x54>)
 80090fa:	7d5b      	ldrb	r3, [r3, #21]
 80090fc:	2b01      	cmp	r3, #1
 80090fe:	d109      	bne.n	8009114 <RadioSetMaxPayloadLength+0x48>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 8009100:	4a06      	ldr	r2, [pc, #24]	; (800911c <RadioSetMaxPayloadLength+0x50>)
 8009102:	79bb      	ldrb	r3, [r7, #6]
 8009104:	7013      	strb	r3, [r2, #0]
 8009106:	4b05      	ldr	r3, [pc, #20]	; (800911c <RadioSetMaxPayloadLength+0x50>)
 8009108:	781a      	ldrb	r2, [r3, #0]
 800910a:	4b05      	ldr	r3, [pc, #20]	; (8009120 <RadioSetMaxPayloadLength+0x54>)
 800910c:	759a      	strb	r2, [r3, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800910e:	4805      	ldr	r0, [pc, #20]	; (8009124 <RadioSetMaxPayloadLength+0x58>)
 8009110:	f001 fd2a 	bl	800ab68 <SUBGRF_SetPacketParams>
}
 8009114:	bf00      	nop
 8009116:	3708      	adds	r7, #8
 8009118:	46bd      	mov	sp, r7
 800911a:	bd80      	pop	{r7, pc}
 800911c:	20000015 	.word	0x20000015
 8009120:	20000a34 	.word	0x20000a34
 8009124:	20000a42 	.word	0x20000a42

08009128 <RadioSetPublicNetwork>:

static void RadioSetPublicNetwork( bool enable )
{
 8009128:	b580      	push	{r7, lr}
 800912a:	b082      	sub	sp, #8
 800912c:	af00      	add	r7, sp, #0
 800912e:	4603      	mov	r3, r0
 8009130:	71fb      	strb	r3, [r7, #7]
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 8009132:	4a13      	ldr	r2, [pc, #76]	; (8009180 <RadioSetPublicNetwork+0x58>)
 8009134:	79fb      	ldrb	r3, [r7, #7]
 8009136:	7313      	strb	r3, [r2, #12]
 8009138:	4b11      	ldr	r3, [pc, #68]	; (8009180 <RadioSetPublicNetwork+0x58>)
 800913a:	7b1a      	ldrb	r2, [r3, #12]
 800913c:	4b10      	ldr	r3, [pc, #64]	; (8009180 <RadioSetPublicNetwork+0x58>)
 800913e:	735a      	strb	r2, [r3, #13]

    RadioSetModem( MODEM_LORA );
 8009140:	2001      	movs	r0, #1
 8009142:	f7ff f819 	bl	8008178 <RadioSetModem>
    if( enable == true )
 8009146:	79fb      	ldrb	r3, [r7, #7]
 8009148:	2b00      	cmp	r3, #0
 800914a:	d00a      	beq.n	8009162 <RadioSetPublicNetwork+0x3a>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 800914c:	2134      	movs	r1, #52	; 0x34
 800914e:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 8009152:	f001 fe51 	bl	800adf8 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 8009156:	2144      	movs	r1, #68	; 0x44
 8009158:	f240 7041 	movw	r0, #1857	; 0x741
 800915c:	f001 fe4c 	bl	800adf8 <SUBGRF_WriteRegister>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
    }
}
 8009160:	e009      	b.n	8009176 <RadioSetPublicNetwork+0x4e>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 8009162:	2114      	movs	r1, #20
 8009164:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 8009168:	f001 fe46 	bl	800adf8 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 800916c:	2124      	movs	r1, #36	; 0x24
 800916e:	f240 7041 	movw	r0, #1857	; 0x741
 8009172:	f001 fe41 	bl	800adf8 <SUBGRF_WriteRegister>
}
 8009176:	bf00      	nop
 8009178:	3708      	adds	r7, #8
 800917a:	46bd      	mov	sp, r7
 800917c:	bd80      	pop	{r7, pc}
 800917e:	bf00      	nop
 8009180:	20000a34 	.word	0x20000a34

08009184 <RadioGetWakeupTime>:

static uint32_t RadioGetWakeupTime( void )
{
 8009184:	b580      	push	{r7, lr}
 8009186:	af00      	add	r7, sp, #0
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 8009188:	f001 ff86 	bl	800b098 <SUBGRF_GetRadioWakeUpTime>
 800918c:	4603      	mov	r3, r0
 800918e:	3303      	adds	r3, #3
}
 8009190:	4618      	mov	r0, r3
 8009192:	bd80      	pop	{r7, pc}

08009194 <RadioOnTxTimeoutIrq>:

static void RadioOnTxTimeoutIrq( void *context )
{
 8009194:	b580      	push	{r7, lr}
 8009196:	b082      	sub	sp, #8
 8009198:	af00      	add	r7, sp, #0
 800919a:	6078      	str	r0, [r7, #4]
    RADIO_TX_TIMEOUT_PROCESS();
 800919c:	f000 f80e 	bl	80091bc <RadioOnTxTimeoutProcess>
}
 80091a0:	bf00      	nop
 80091a2:	3708      	adds	r7, #8
 80091a4:	46bd      	mov	sp, r7
 80091a6:	bd80      	pop	{r7, pc}

080091a8 <RadioOnRxTimeoutIrq>:

static void RadioOnRxTimeoutIrq( void *context )
{
 80091a8:	b580      	push	{r7, lr}
 80091aa:	b082      	sub	sp, #8
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	6078      	str	r0, [r7, #4]
    RADIO_RX_TIMEOUT_PROCESS();
 80091b0:	f000 f818 	bl	80091e4 <RadioOnRxTimeoutProcess>
}
 80091b4:	bf00      	nop
 80091b6:	3708      	adds	r7, #8
 80091b8:	46bd      	mov	sp, r7
 80091ba:	bd80      	pop	{r7, pc}

080091bc <RadioOnTxTimeoutProcess>:

static void RadioOnTxTimeoutProcess( void )
{
 80091bc:	b580      	push	{r7, lr}
 80091be:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_TX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 80091c0:	4b07      	ldr	r3, [pc, #28]	; (80091e0 <RadioOnTxTimeoutProcess+0x24>)
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d008      	beq.n	80091da <RadioOnTxTimeoutProcess+0x1e>
 80091c8:	4b05      	ldr	r3, [pc, #20]	; (80091e0 <RadioOnTxTimeoutProcess+0x24>)
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	685b      	ldr	r3, [r3, #4]
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d003      	beq.n	80091da <RadioOnTxTimeoutProcess+0x1e>
    {
        RadioEvents->TxTimeout( );
 80091d2:	4b03      	ldr	r3, [pc, #12]	; (80091e0 <RadioOnTxTimeoutProcess+0x24>)
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	685b      	ldr	r3, [r3, #4]
 80091d8:	4798      	blx	r3
    }
}
 80091da:	bf00      	nop
 80091dc:	bd80      	pop	{r7, pc}
 80091de:	bf00      	nop
 80091e0:	20000a30 	.word	0x20000a30

080091e4 <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 80091e4:	b580      	push	{r7, lr}
 80091e6:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_RX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 80091e8:	4b07      	ldr	r3, [pc, #28]	; (8009208 <RadioOnRxTimeoutProcess+0x24>)
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d008      	beq.n	8009202 <RadioOnRxTimeoutProcess+0x1e>
 80091f0:	4b05      	ldr	r3, [pc, #20]	; (8009208 <RadioOnRxTimeoutProcess+0x24>)
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	68db      	ldr	r3, [r3, #12]
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d003      	beq.n	8009202 <RadioOnRxTimeoutProcess+0x1e>
    {
        RadioEvents->RxTimeout( );
 80091fa:	4b03      	ldr	r3, [pc, #12]	; (8009208 <RadioOnRxTimeoutProcess+0x24>)
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	68db      	ldr	r3, [r3, #12]
 8009200:	4798      	blx	r3
    }
}
 8009202:	bf00      	nop
 8009204:	bd80      	pop	{r7, pc}
 8009206:	bf00      	nop
 8009208:	20000a30 	.word	0x20000a30

0800920c <RadioOnDioIrq>:

static void RadioOnDioIrq( RadioIrqMasks_t radioIrq )
{
 800920c:	b580      	push	{r7, lr}
 800920e:	b082      	sub	sp, #8
 8009210:	af00      	add	r7, sp, #0
 8009212:	4603      	mov	r3, r0
 8009214:	80fb      	strh	r3, [r7, #6]
    SubgRf.RadioIrq = radioIrq;
 8009216:	4a05      	ldr	r2, [pc, #20]	; (800922c <RadioOnDioIrq+0x20>)
 8009218:	88fb      	ldrh	r3, [r7, #6]
 800921a:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54

    RADIO_IRQ_PROCESS();
 800921e:	f000 f807 	bl	8009230 <RadioIrqProcess>
}
 8009222:	bf00      	nop
 8009224:	3708      	adds	r7, #8
 8009226:	46bd      	mov	sp, r7
 8009228:	bd80      	pop	{r7, pc}
 800922a:	bf00      	nop
 800922c:	20000a34 	.word	0x20000a34

08009230 <RadioIrqProcess>:

static void RadioIrqProcess( void )
{
 8009230:	b5b0      	push	{r4, r5, r7, lr}
 8009232:	b082      	sub	sp, #8
 8009234:	af00      	add	r7, sp, #0
    uint8_t size = 0;
 8009236:	2300      	movs	r3, #0
 8009238:	71fb      	strb	r3, [r7, #7]
    int32_t cfo = 0;
 800923a:	2300      	movs	r3, #0
 800923c:	603b      	str	r3, [r7, #0]

    switch( SubgRf.RadioIrq )
 800923e:	4ba5      	ldr	r3, [pc, #660]	; (80094d4 <RadioIrqProcess+0x2a4>)
 8009240:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8009244:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009248:	f000 810d 	beq.w	8009466 <RadioIrqProcess+0x236>
 800924c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009250:	f300 81c0 	bgt.w	80095d4 <RadioIrqProcess+0x3a4>
 8009254:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009258:	f000 80f1 	beq.w	800943e <RadioIrqProcess+0x20e>
 800925c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009260:	f300 81b8 	bgt.w	80095d4 <RadioIrqProcess+0x3a4>
 8009264:	2b80      	cmp	r3, #128	; 0x80
 8009266:	f000 80d6 	beq.w	8009416 <RadioIrqProcess+0x1e6>
 800926a:	2b80      	cmp	r3, #128	; 0x80
 800926c:	f300 81b2 	bgt.w	80095d4 <RadioIrqProcess+0x3a4>
 8009270:	2b20      	cmp	r3, #32
 8009272:	dc49      	bgt.n	8009308 <RadioIrqProcess+0xd8>
 8009274:	2b00      	cmp	r3, #0
 8009276:	f340 81ad 	ble.w	80095d4 <RadioIrqProcess+0x3a4>
 800927a:	3b01      	subs	r3, #1
 800927c:	2b1f      	cmp	r3, #31
 800927e:	f200 81a9 	bhi.w	80095d4 <RadioIrqProcess+0x3a4>
 8009282:	a201      	add	r2, pc, #4	; (adr r2, 8009288 <RadioIrqProcess+0x58>)
 8009284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009288:	08009311 	.word	0x08009311
 800928c:	0800934b 	.word	0x0800934b
 8009290:	080095d5 	.word	0x080095d5
 8009294:	080094f1 	.word	0x080094f1
 8009298:	080095d5 	.word	0x080095d5
 800929c:	080095d5 	.word	0x080095d5
 80092a0:	080095d5 	.word	0x080095d5
 80092a4:	0800955f 	.word	0x0800955f
 80092a8:	080095d5 	.word	0x080095d5
 80092ac:	080095d5 	.word	0x080095d5
 80092b0:	080095d5 	.word	0x080095d5
 80092b4:	080095d5 	.word	0x080095d5
 80092b8:	080095d5 	.word	0x080095d5
 80092bc:	080095d5 	.word	0x080095d5
 80092c0:	080095d5 	.word	0x080095d5
 80092c4:	080095d5 	.word	0x080095d5
 80092c8:	080095d5 	.word	0x080095d5
 80092cc:	080095d5 	.word	0x080095d5
 80092d0:	080095d5 	.word	0x080095d5
 80092d4:	080095d5 	.word	0x080095d5
 80092d8:	080095d5 	.word	0x080095d5
 80092dc:	080095d5 	.word	0x080095d5
 80092e0:	080095d5 	.word	0x080095d5
 80092e4:	080095d5 	.word	0x080095d5
 80092e8:	080095d5 	.word	0x080095d5
 80092ec:	080095d5 	.word	0x080095d5
 80092f0:	080095d5 	.word	0x080095d5
 80092f4:	080095d5 	.word	0x080095d5
 80092f8:	080095d5 	.word	0x080095d5
 80092fc:	080095d5 	.word	0x080095d5
 8009300:	080095d5 	.word	0x080095d5
 8009304:	0800956f 	.word	0x0800956f
 8009308:	2b40      	cmp	r3, #64	; 0x40
 800930a:	f000 814b 	beq.w	80095a4 <RadioIrqProcess+0x374>
        MW_LOG( TS_ON, VLEVEL_M,  "HOP\r\n" );
        break;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    default:
        break;
 800930e:	e161      	b.n	80095d4 <RadioIrqProcess+0x3a4>
        TimerStop( &TxTimeoutTimer );
 8009310:	4871      	ldr	r0, [pc, #452]	; (80094d8 <RadioIrqProcess+0x2a8>)
 8009312:	f002 facd 	bl	800b8b0 <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 8009316:	2000      	movs	r0, #0
 8009318:	f000 ffea 	bl	800a2f0 <SUBGRF_SetStandby>
        if( RFW_Is_LongPacketModeEnabled() == 1 )
 800931c:	f002 f860 	bl	800b3e0 <RFW_Is_LongPacketModeEnabled>
 8009320:	4603      	mov	r3, r0
 8009322:	2b01      	cmp	r3, #1
 8009324:	d101      	bne.n	800932a <RadioIrqProcess+0xfa>
            RFW_DeInit_TxLongPacket( );
 8009326:	f002 f884 	bl	800b432 <RFW_DeInit_TxLongPacket>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 800932a:	4b6c      	ldr	r3, [pc, #432]	; (80094dc <RadioIrqProcess+0x2ac>)
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	2b00      	cmp	r3, #0
 8009330:	f000 8152 	beq.w	80095d8 <RadioIrqProcess+0x3a8>
 8009334:	4b69      	ldr	r3, [pc, #420]	; (80094dc <RadioIrqProcess+0x2ac>)
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	2b00      	cmp	r3, #0
 800933c:	f000 814c 	beq.w	80095d8 <RadioIrqProcess+0x3a8>
            RadioEvents->TxDone( );
 8009340:	4b66      	ldr	r3, [pc, #408]	; (80094dc <RadioIrqProcess+0x2ac>)
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	4798      	blx	r3
        break;
 8009348:	e146      	b.n	80095d8 <RadioIrqProcess+0x3a8>
        TimerStop( &RxTimeoutTimer );
 800934a:	4865      	ldr	r0, [pc, #404]	; (80094e0 <RadioIrqProcess+0x2b0>)
 800934c:	f002 fab0 	bl	800b8b0 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8009350:	4b60      	ldr	r3, [pc, #384]	; (80094d4 <RadioIrqProcess+0x2a4>)
 8009352:	785b      	ldrb	r3, [r3, #1]
 8009354:	f083 0301 	eor.w	r3, r3, #1
 8009358:	b2db      	uxtb	r3, r3
 800935a:	2b00      	cmp	r3, #0
 800935c:	d014      	beq.n	8009388 <RadioIrqProcess+0x158>
            SUBGRF_SetStandby( STDBY_RC );
 800935e:	2000      	movs	r0, #0
 8009360:	f000 ffc6 	bl	800a2f0 <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( SUBGHZ_RTCCTLR, 0x00 );
 8009364:	2100      	movs	r1, #0
 8009366:	f640 1002 	movw	r0, #2306	; 0x902
 800936a:	f001 fd45 	bl	800adf8 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( SUBGHZ_EVENTMASKR, SUBGRF_ReadRegister( SUBGHZ_EVENTMASKR ) | ( 1 << 1 ) );
 800936e:	f640 1044 	movw	r0, #2372	; 0x944
 8009372:	f001 fd55 	bl	800ae20 <SUBGRF_ReadRegister>
 8009376:	4603      	mov	r3, r0
 8009378:	f043 0302 	orr.w	r3, r3, #2
 800937c:	b2db      	uxtb	r3, r3
 800937e:	4619      	mov	r1, r3
 8009380:	f640 1044 	movw	r0, #2372	; 0x944
 8009384:	f001 fd38 	bl	800adf8 <SUBGRF_WriteRegister>
        SUBGRF_GetPayload( RadioBuffer, &size, 255 );
 8009388:	1dfb      	adds	r3, r7, #7
 800938a:	22ff      	movs	r2, #255	; 0xff
 800938c:	4619      	mov	r1, r3
 800938e:	4855      	ldr	r0, [pc, #340]	; (80094e4 <RadioIrqProcess+0x2b4>)
 8009390:	f000 fe7e 	bl	800a090 <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &( SubgRf.PacketStatus ) );
 8009394:	4854      	ldr	r0, [pc, #336]	; (80094e8 <RadioIrqProcess+0x2b8>)
 8009396:	f001 fcdd 	bl	800ad54 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 800939a:	4b50      	ldr	r3, [pc, #320]	; (80094dc <RadioIrqProcess+0x2ac>)
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	2b00      	cmp	r3, #0
 80093a0:	f000 811c 	beq.w	80095dc <RadioIrqProcess+0x3ac>
 80093a4:	4b4d      	ldr	r3, [pc, #308]	; (80094dc <RadioIrqProcess+0x2ac>)
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	689b      	ldr	r3, [r3, #8]
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	f000 8116 	beq.w	80095dc <RadioIrqProcess+0x3ac>
            switch( SubgRf.PacketStatus.packetType )
 80093b0:	4b48      	ldr	r3, [pc, #288]	; (80094d4 <RadioIrqProcess+0x2a4>)
 80093b2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80093b6:	2b01      	cmp	r3, #1
 80093b8:	d10e      	bne.n	80093d8 <RadioIrqProcess+0x1a8>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt,
 80093ba:	4b48      	ldr	r3, [pc, #288]	; (80094dc <RadioIrqProcess+0x2ac>)
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	689c      	ldr	r4, [r3, #8]
 80093c0:	79fb      	ldrb	r3, [r7, #7]
 80093c2:	b299      	uxth	r1, r3
 80093c4:	4b43      	ldr	r3, [pc, #268]	; (80094d4 <RadioIrqProcess+0x2a4>)
 80093c6:	f993 3030 	ldrsb.w	r3, [r3, #48]	; 0x30
 80093ca:	b21a      	sxth	r2, r3
 80093cc:	4b41      	ldr	r3, [pc, #260]	; (80094d4 <RadioIrqProcess+0x2a4>)
 80093ce:	f993 3031 	ldrsb.w	r3, [r3, #49]	; 0x31
 80093d2:	4844      	ldr	r0, [pc, #272]	; (80094e4 <RadioIrqProcess+0x2b4>)
 80093d4:	47a0      	blx	r4
                break;
 80093d6:	e01d      	b.n	8009414 <RadioIrqProcess+0x1e4>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 80093d8:	4b3e      	ldr	r3, [pc, #248]	; (80094d4 <RadioIrqProcess+0x2a4>)
 80093da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093dc:	463a      	mov	r2, r7
 80093de:	4611      	mov	r1, r2
 80093e0:	4618      	mov	r0, r3
 80093e2:	f001 ff4b 	bl	800b27c <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, ( int8_t ) DIVR( cfo, 1000 ) );
 80093e6:	4b3d      	ldr	r3, [pc, #244]	; (80094dc <RadioIrqProcess+0x2ac>)
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	689c      	ldr	r4, [r3, #8]
 80093ec:	79fb      	ldrb	r3, [r7, #7]
 80093ee:	b299      	uxth	r1, r3
 80093f0:	4b38      	ldr	r3, [pc, #224]	; (80094d4 <RadioIrqProcess+0x2a4>)
 80093f2:	f993 3029 	ldrsb.w	r3, [r3, #41]	; 0x29
 80093f6:	b218      	sxth	r0, r3
 80093f8:	683b      	ldr	r3, [r7, #0]
 80093fa:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80093fe:	4a3b      	ldr	r2, [pc, #236]	; (80094ec <RadioIrqProcess+0x2bc>)
 8009400:	fb82 5203 	smull	r5, r2, r2, r3
 8009404:	1192      	asrs	r2, r2, #6
 8009406:	17db      	asrs	r3, r3, #31
 8009408:	1ad3      	subs	r3, r2, r3
 800940a:	b25b      	sxtb	r3, r3
 800940c:	4602      	mov	r2, r0
 800940e:	4835      	ldr	r0, [pc, #212]	; (80094e4 <RadioIrqProcess+0x2b4>)
 8009410:	47a0      	blx	r4
                break;
 8009412:	bf00      	nop
        break;
 8009414:	e0e2      	b.n	80095dc <RadioIrqProcess+0x3ac>
        SUBGRF_SetStandby( STDBY_RC );
 8009416:	2000      	movs	r0, #0
 8009418:	f000 ff6a 	bl	800a2f0 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 800941c:	4b2f      	ldr	r3, [pc, #188]	; (80094dc <RadioIrqProcess+0x2ac>)
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	2b00      	cmp	r3, #0
 8009422:	f000 80dd 	beq.w	80095e0 <RadioIrqProcess+0x3b0>
 8009426:	4b2d      	ldr	r3, [pc, #180]	; (80094dc <RadioIrqProcess+0x2ac>)
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	699b      	ldr	r3, [r3, #24]
 800942c:	2b00      	cmp	r3, #0
 800942e:	f000 80d7 	beq.w	80095e0 <RadioIrqProcess+0x3b0>
            RadioEvents->CadDone( false );
 8009432:	4b2a      	ldr	r3, [pc, #168]	; (80094dc <RadioIrqProcess+0x2ac>)
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	699b      	ldr	r3, [r3, #24]
 8009438:	2000      	movs	r0, #0
 800943a:	4798      	blx	r3
        break;
 800943c:	e0d0      	b.n	80095e0 <RadioIrqProcess+0x3b0>
        SUBGRF_SetStandby( STDBY_RC );
 800943e:	2000      	movs	r0, #0
 8009440:	f000 ff56 	bl	800a2f0 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8009444:	4b25      	ldr	r3, [pc, #148]	; (80094dc <RadioIrqProcess+0x2ac>)
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	2b00      	cmp	r3, #0
 800944a:	f000 80cb 	beq.w	80095e4 <RadioIrqProcess+0x3b4>
 800944e:	4b23      	ldr	r3, [pc, #140]	; (80094dc <RadioIrqProcess+0x2ac>)
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	699b      	ldr	r3, [r3, #24]
 8009454:	2b00      	cmp	r3, #0
 8009456:	f000 80c5 	beq.w	80095e4 <RadioIrqProcess+0x3b4>
            RadioEvents->CadDone( true );
 800945a:	4b20      	ldr	r3, [pc, #128]	; (80094dc <RadioIrqProcess+0x2ac>)
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	699b      	ldr	r3, [r3, #24]
 8009460:	2001      	movs	r0, #1
 8009462:	4798      	blx	r3
        break;
 8009464:	e0be      	b.n	80095e4 <RadioIrqProcess+0x3b4>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 8009466:	f000 fdf9 	bl	800a05c <SUBGRF_GetOperatingMode>
 800946a:	4603      	mov	r3, r0
 800946c:	2b04      	cmp	r3, #4
 800946e:	d115      	bne.n	800949c <RadioIrqProcess+0x26c>
            TimerStop( &TxTimeoutTimer );
 8009470:	4819      	ldr	r0, [pc, #100]	; (80094d8 <RadioIrqProcess+0x2a8>)
 8009472:	f002 fa1d 	bl	800b8b0 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 8009476:	2000      	movs	r0, #0
 8009478:	f000 ff3a 	bl	800a2f0 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 800947c:	4b17      	ldr	r3, [pc, #92]	; (80094dc <RadioIrqProcess+0x2ac>)
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	2b00      	cmp	r3, #0
 8009482:	f000 80b1 	beq.w	80095e8 <RadioIrqProcess+0x3b8>
 8009486:	4b15      	ldr	r3, [pc, #84]	; (80094dc <RadioIrqProcess+0x2ac>)
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	685b      	ldr	r3, [r3, #4]
 800948c:	2b00      	cmp	r3, #0
 800948e:	f000 80ab 	beq.w	80095e8 <RadioIrqProcess+0x3b8>
                RadioEvents->TxTimeout( );
 8009492:	4b12      	ldr	r3, [pc, #72]	; (80094dc <RadioIrqProcess+0x2ac>)
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	685b      	ldr	r3, [r3, #4]
 8009498:	4798      	blx	r3
        break;
 800949a:	e0a5      	b.n	80095e8 <RadioIrqProcess+0x3b8>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 800949c:	f000 fdde 	bl	800a05c <SUBGRF_GetOperatingMode>
 80094a0:	4603      	mov	r3, r0
 80094a2:	2b05      	cmp	r3, #5
 80094a4:	f040 80a0 	bne.w	80095e8 <RadioIrqProcess+0x3b8>
            TimerStop( &RxTimeoutTimer );
 80094a8:	480d      	ldr	r0, [pc, #52]	; (80094e0 <RadioIrqProcess+0x2b0>)
 80094aa:	f002 fa01 	bl	800b8b0 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 80094ae:	2000      	movs	r0, #0
 80094b0:	f000 ff1e 	bl	800a2f0 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 80094b4:	4b09      	ldr	r3, [pc, #36]	; (80094dc <RadioIrqProcess+0x2ac>)
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	f000 8095 	beq.w	80095e8 <RadioIrqProcess+0x3b8>
 80094be:	4b07      	ldr	r3, [pc, #28]	; (80094dc <RadioIrqProcess+0x2ac>)
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	68db      	ldr	r3, [r3, #12]
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	f000 808f 	beq.w	80095e8 <RadioIrqProcess+0x3b8>
                RadioEvents->RxTimeout( );
 80094ca:	4b04      	ldr	r3, [pc, #16]	; (80094dc <RadioIrqProcess+0x2ac>)
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	68db      	ldr	r3, [r3, #12]
 80094d0:	4798      	blx	r3
        break;
 80094d2:	e089      	b.n	80095e8 <RadioIrqProcess+0x3b8>
 80094d4:	20000a34 	.word	0x20000a34
 80094d8:	20000a90 	.word	0x20000a90
 80094dc:	20000a30 	.word	0x20000a30
 80094e0:	20000aa8 	.word	0x20000aa8
 80094e4:	20000930 	.word	0x20000930
 80094e8:	20000a58 	.word	0x20000a58
 80094ec:	10624dd3 	.word	0x10624dd3
        if( SubgRf.RxDcPreambleDetectTimeout != 0 )
 80094f0:	4b44      	ldr	r3, [pc, #272]	; (8009604 <RadioIrqProcess+0x3d4>)
 80094f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d079      	beq.n	80095ec <RadioIrqProcess+0x3bc>
            Radio.Write( SUBGHZ_RTCPRDR2, ( SubgRf.RxDcPreambleDetectTimeout >> 16 ) & 0xFF ); /*Update Radio RTC Period MSB*/
 80094f8:	4a43      	ldr	r2, [pc, #268]	; (8009608 <RadioIrqProcess+0x3d8>)
 80094fa:	4b42      	ldr	r3, [pc, #264]	; (8009604 <RadioIrqProcess+0x3d4>)
 80094fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80094fe:	0c1b      	lsrs	r3, r3, #16
 8009500:	b2db      	uxtb	r3, r3
 8009502:	4619      	mov	r1, r3
 8009504:	f640 1003 	movw	r0, #2307	; 0x903
 8009508:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR1, ( SubgRf.RxDcPreambleDetectTimeout >> 8 ) & 0xFF ); /*Update Radio RTC Period MidByte*/
 800950a:	4a3f      	ldr	r2, [pc, #252]	; (8009608 <RadioIrqProcess+0x3d8>)
 800950c:	4b3d      	ldr	r3, [pc, #244]	; (8009604 <RadioIrqProcess+0x3d4>)
 800950e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009510:	0a1b      	lsrs	r3, r3, #8
 8009512:	b2db      	uxtb	r3, r3
 8009514:	4619      	mov	r1, r3
 8009516:	f640 1004 	movw	r0, #2308	; 0x904
 800951a:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR0, ( SubgRf.RxDcPreambleDetectTimeout ) & 0xFF ); /*Update Radio RTC Period lsb*/
 800951c:	4a3a      	ldr	r2, [pc, #232]	; (8009608 <RadioIrqProcess+0x3d8>)
 800951e:	4b39      	ldr	r3, [pc, #228]	; (8009604 <RadioIrqProcess+0x3d4>)
 8009520:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009522:	b2db      	uxtb	r3, r3
 8009524:	4619      	mov	r1, r3
 8009526:	f640 1005 	movw	r0, #2309	; 0x905
 800952a:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCCTLR, Radio.Read( SUBGHZ_RTCCTLR ) | 0x1 ); /*restart Radio RTC*/
 800952c:	4c36      	ldr	r4, [pc, #216]	; (8009608 <RadioIrqProcess+0x3d8>)
 800952e:	4b37      	ldr	r3, [pc, #220]	; (800960c <RadioIrqProcess+0x3dc>)
 8009530:	f640 1002 	movw	r0, #2306	; 0x902
 8009534:	4798      	blx	r3
 8009536:	4603      	mov	r3, r0
 8009538:	f043 0301 	orr.w	r3, r3, #1
 800953c:	b2db      	uxtb	r3, r3
 800953e:	4619      	mov	r1, r3
 8009540:	f640 1002 	movw	r0, #2306	; 0x902
 8009544:	47a0      	blx	r4
            SubgRf.RxDcPreambleDetectTimeout = 0;
 8009546:	4b2f      	ldr	r3, [pc, #188]	; (8009604 <RadioIrqProcess+0x3d4>)
 8009548:	2200      	movs	r2, #0
 800954a:	659a      	str	r2, [r3, #88]	; 0x58
            SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 800954c:	2300      	movs	r3, #0
 800954e:	2200      	movs	r2, #0
 8009550:	f240 2162 	movw	r1, #610	; 0x262
 8009554:	f240 2062 	movw	r0, #610	; 0x262
 8009558:	f001 f89e 	bl	800a698 <SUBGRF_SetDioIrqParams>
        break;
 800955c:	e046      	b.n	80095ec <RadioIrqProcess+0x3bc>
        if( 1UL == RFW_Is_Init( ) )
 800955e:	f001 ff38 	bl	800b3d2 <RFW_Is_Init>
 8009562:	4603      	mov	r3, r0
 8009564:	2b01      	cmp	r3, #1
 8009566:	d143      	bne.n	80095f0 <RadioIrqProcess+0x3c0>
            RFW_ReceivePayload( );
 8009568:	f001 ff69 	bl	800b43e <RFW_ReceivePayload>
        break;
 800956c:	e040      	b.n	80095f0 <RadioIrqProcess+0x3c0>
        TimerStop( &RxTimeoutTimer );
 800956e:	4828      	ldr	r0, [pc, #160]	; (8009610 <RadioIrqProcess+0x3e0>)
 8009570:	f002 f99e 	bl	800b8b0 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8009574:	4b23      	ldr	r3, [pc, #140]	; (8009604 <RadioIrqProcess+0x3d4>)
 8009576:	785b      	ldrb	r3, [r3, #1]
 8009578:	f083 0301 	eor.w	r3, r3, #1
 800957c:	b2db      	uxtb	r3, r3
 800957e:	2b00      	cmp	r3, #0
 8009580:	d002      	beq.n	8009588 <RadioIrqProcess+0x358>
            SUBGRF_SetStandby( STDBY_RC );
 8009582:	2000      	movs	r0, #0
 8009584:	f000 feb4 	bl	800a2f0 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8009588:	4b22      	ldr	r3, [pc, #136]	; (8009614 <RadioIrqProcess+0x3e4>)
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	2b00      	cmp	r3, #0
 800958e:	d031      	beq.n	80095f4 <RadioIrqProcess+0x3c4>
 8009590:	4b20      	ldr	r3, [pc, #128]	; (8009614 <RadioIrqProcess+0x3e4>)
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	68db      	ldr	r3, [r3, #12]
 8009596:	2b00      	cmp	r3, #0
 8009598:	d02c      	beq.n	80095f4 <RadioIrqProcess+0x3c4>
            RadioEvents->RxTimeout( );
 800959a:	4b1e      	ldr	r3, [pc, #120]	; (8009614 <RadioIrqProcess+0x3e4>)
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	68db      	ldr	r3, [r3, #12]
 80095a0:	4798      	blx	r3
        break;
 80095a2:	e027      	b.n	80095f4 <RadioIrqProcess+0x3c4>
        if( SubgRf.RxContinuous == false )
 80095a4:	4b17      	ldr	r3, [pc, #92]	; (8009604 <RadioIrqProcess+0x3d4>)
 80095a6:	785b      	ldrb	r3, [r3, #1]
 80095a8:	f083 0301 	eor.w	r3, r3, #1
 80095ac:	b2db      	uxtb	r3, r3
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d002      	beq.n	80095b8 <RadioIrqProcess+0x388>
            SUBGRF_SetStandby( STDBY_RC );
 80095b2:	2000      	movs	r0, #0
 80095b4:	f000 fe9c 	bl	800a2f0 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 80095b8:	4b16      	ldr	r3, [pc, #88]	; (8009614 <RadioIrqProcess+0x3e4>)
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d01b      	beq.n	80095f8 <RadioIrqProcess+0x3c8>
 80095c0:	4b14      	ldr	r3, [pc, #80]	; (8009614 <RadioIrqProcess+0x3e4>)
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	691b      	ldr	r3, [r3, #16]
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d016      	beq.n	80095f8 <RadioIrqProcess+0x3c8>
            RadioEvents->RxError( );
 80095ca:	4b12      	ldr	r3, [pc, #72]	; (8009614 <RadioIrqProcess+0x3e4>)
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	691b      	ldr	r3, [r3, #16]
 80095d0:	4798      	blx	r3
        break;
 80095d2:	e011      	b.n	80095f8 <RadioIrqProcess+0x3c8>
        break;
 80095d4:	bf00      	nop
 80095d6:	e010      	b.n	80095fa <RadioIrqProcess+0x3ca>
        break;
 80095d8:	bf00      	nop
 80095da:	e00e      	b.n	80095fa <RadioIrqProcess+0x3ca>
        break;
 80095dc:	bf00      	nop
 80095de:	e00c      	b.n	80095fa <RadioIrqProcess+0x3ca>
        break;
 80095e0:	bf00      	nop
 80095e2:	e00a      	b.n	80095fa <RadioIrqProcess+0x3ca>
        break;
 80095e4:	bf00      	nop
 80095e6:	e008      	b.n	80095fa <RadioIrqProcess+0x3ca>
        break;
 80095e8:	bf00      	nop
 80095ea:	e006      	b.n	80095fa <RadioIrqProcess+0x3ca>
        break;
 80095ec:	bf00      	nop
 80095ee:	e004      	b.n	80095fa <RadioIrqProcess+0x3ca>
        break;
 80095f0:	bf00      	nop
 80095f2:	e002      	b.n	80095fa <RadioIrqProcess+0x3ca>
        break;
 80095f4:	bf00      	nop
 80095f6:	e000      	b.n	80095fa <RadioIrqProcess+0x3ca>
        break;
 80095f8:	bf00      	nop
    }
}
 80095fa:	bf00      	nop
 80095fc:	3708      	adds	r7, #8
 80095fe:	46bd      	mov	sp, r7
 8009600:	bdb0      	pop	{r4, r5, r7, pc}
 8009602:	bf00      	nop
 8009604:	20000a34 	.word	0x20000a34
 8009608:	0800903f 	.word	0x0800903f
 800960c:	08009063 	.word	0x08009063
 8009610:	20000aa8 	.word	0x20000aa8
 8009614:	20000a30 	.word	0x20000a30

08009618 <RadioTxPrbs>:

static void RadioTxPrbs( void )
{
 8009618:	b580      	push	{r7, lr}
 800961a:	af00      	add	r7, sp, #0
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 800961c:	4b09      	ldr	r3, [pc, #36]	; (8009644 <RadioTxPrbs+0x2c>)
 800961e:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8009622:	2101      	movs	r1, #1
 8009624:	4618      	mov	r0, r3
 8009626:	f001 fcdb 	bl	800afe0 <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_GPKTCTL1AR, 0x2d );  // sel mode prbs9 instead of preamble
 800962a:	4b07      	ldr	r3, [pc, #28]	; (8009648 <RadioTxPrbs+0x30>)
 800962c:	212d      	movs	r1, #45	; 0x2d
 800962e:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8009632:	4798      	blx	r3
    SUBGRF_SetTxInfinitePreamble( );
 8009634:	f000 ff1f 	bl	800a476 <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 8009638:	4804      	ldr	r0, [pc, #16]	; (800964c <RadioTxPrbs+0x34>)
 800963a:	f000 fe75 	bl	800a328 <SUBGRF_SetTx>
}
 800963e:	bf00      	nop
 8009640:	bd80      	pop	{r7, pc}
 8009642:	bf00      	nop
 8009644:	20000a34 	.word	0x20000a34
 8009648:	0800903f 	.word	0x0800903f
 800964c:	000fffff 	.word	0x000fffff

08009650 <RadioTxCw>:

static void RadioTxCw( int8_t power )
{
 8009650:	b580      	push	{r7, lr}
 8009652:	b084      	sub	sp, #16
 8009654:	af00      	add	r7, sp, #0
 8009656:	4603      	mov	r3, r0
 8009658:	71fb      	strb	r3, [r7, #7]
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 800965a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800965e:	4618      	mov	r0, r3
 8009660:	f001 fce6 	bl	800b030 <SUBGRF_SetRfTxPower>
 8009664:	4603      	mov	r3, r0
 8009666:	73fb      	strb	r3, [r7, #15]
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8009668:	210e      	movs	r1, #14
 800966a:	f640 101f 	movw	r0, #2335	; 0x91f
 800966e:	f001 fbc3 	bl	800adf8 <SUBGRF_WriteRegister>
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 8009672:	7bfb      	ldrb	r3, [r7, #15]
 8009674:	2101      	movs	r1, #1
 8009676:	4618      	mov	r0, r3
 8009678:	f001 fcb2 	bl	800afe0 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 800967c:	f000 fef2 	bl	800a464 <SUBGRF_SetTxContinuousWave>
}
 8009680:	bf00      	nop
 8009682:	3710      	adds	r7, #16
 8009684:	46bd      	mov	sp, r7
 8009686:	bd80      	pop	{r7, pc}

08009688 <payload_integration>:

#if (RADIO_SIGFOX_ENABLE == 1)
static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 8009688:	b480      	push	{r7}
 800968a:	b089      	sub	sp, #36	; 0x24
 800968c:	af00      	add	r7, sp, #0
 800968e:	60f8      	str	r0, [r7, #12]
 8009690:	60b9      	str	r1, [r7, #8]
 8009692:	4613      	mov	r3, r2
 8009694:	71fb      	strb	r3, [r7, #7]
    uint8_t prevInt = 0;
 8009696:	2300      	movs	r3, #0
 8009698:	77fb      	strb	r3, [r7, #31]
    uint8_t currBit;
    uint8_t index_bit;
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int32_t i = 0;
 800969a:	2300      	movs	r3, #0
 800969c:	61bb      	str	r3, [r7, #24]

    for( i = 0; i < size; i++ )
 800969e:	2300      	movs	r3, #0
 80096a0:	61bb      	str	r3, [r7, #24]
 80096a2:	e011      	b.n	80096c8 <payload_integration+0x40>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 80096a4:	69bb      	ldr	r3, [r7, #24]
 80096a6:	68ba      	ldr	r2, [r7, #8]
 80096a8:	4413      	add	r3, r2
 80096aa:	781a      	ldrb	r2, [r3, #0]
 80096ac:	69bb      	ldr	r3, [r7, #24]
 80096ae:	68b9      	ldr	r1, [r7, #8]
 80096b0:	440b      	add	r3, r1
 80096b2:	43d2      	mvns	r2, r2
 80096b4:	b2d2      	uxtb	r2, r2
 80096b6:	701a      	strb	r2, [r3, #0]
        /* init outBuffer */
        outBuffer[i] = 0;
 80096b8:	69bb      	ldr	r3, [r7, #24]
 80096ba:	68fa      	ldr	r2, [r7, #12]
 80096bc:	4413      	add	r3, r2
 80096be:	2200      	movs	r2, #0
 80096c0:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < size; i++ )
 80096c2:	69bb      	ldr	r3, [r7, #24]
 80096c4:	3301      	adds	r3, #1
 80096c6:	61bb      	str	r3, [r7, #24]
 80096c8:	79fb      	ldrb	r3, [r7, #7]
 80096ca:	69ba      	ldr	r2, [r7, #24]
 80096cc:	429a      	cmp	r2, r3
 80096ce:	dbe9      	blt.n	80096a4 <payload_integration+0x1c>
    }

    for( i = 0; i < ( size * 8 ); i++ )
 80096d0:	2300      	movs	r3, #0
 80096d2:	61bb      	str	r3, [r7, #24]
 80096d4:	e049      	b.n	800976a <payload_integration+0xe2>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
 80096d6:	69bb      	ldr	r3, [r7, #24]
 80096d8:	425a      	negs	r2, r3
 80096da:	f003 0307 	and.w	r3, r3, #7
 80096de:	f002 0207 	and.w	r2, r2, #7
 80096e2:	bf58      	it	pl
 80096e4:	4253      	negpl	r3, r2
 80096e6:	b2db      	uxtb	r3, r3
 80096e8:	f1c3 0307 	rsb	r3, r3, #7
 80096ec:	75fb      	strb	r3, [r7, #23]
        index_byte = i / 8;
 80096ee:	69bb      	ldr	r3, [r7, #24]
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	da00      	bge.n	80096f6 <payload_integration+0x6e>
 80096f4:	3307      	adds	r3, #7
 80096f6:	10db      	asrs	r3, r3, #3
 80096f8:	75bb      	strb	r3, [r7, #22]
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 80096fa:	69bb      	ldr	r3, [r7, #24]
 80096fc:	3301      	adds	r3, #1
 80096fe:	425a      	negs	r2, r3
 8009700:	f003 0307 	and.w	r3, r3, #7
 8009704:	f002 0207 	and.w	r2, r2, #7
 8009708:	bf58      	it	pl
 800970a:	4253      	negpl	r3, r2
 800970c:	b2db      	uxtb	r3, r3
 800970e:	f1c3 0307 	rsb	r3, r3, #7
 8009712:	757b      	strb	r3, [r7, #21]
        index_byte_out = ( i + 1 ) / 8;
 8009714:	69bb      	ldr	r3, [r7, #24]
 8009716:	3301      	adds	r3, #1
 8009718:	2b00      	cmp	r3, #0
 800971a:	da00      	bge.n	800971e <payload_integration+0x96>
 800971c:	3307      	adds	r3, #7
 800971e:	10db      	asrs	r3, r3, #3
 8009720:	753b      	strb	r3, [r7, #20]
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 8009722:	7dbb      	ldrb	r3, [r7, #22]
 8009724:	68ba      	ldr	r2, [r7, #8]
 8009726:	4413      	add	r3, r2
 8009728:	781b      	ldrb	r3, [r3, #0]
 800972a:	461a      	mov	r2, r3
 800972c:	7dfb      	ldrb	r3, [r7, #23]
 800972e:	fa42 f303 	asr.w	r3, r2, r3
 8009732:	b2db      	uxtb	r3, r3
 8009734:	f003 0301 	and.w	r3, r3, #1
 8009738:	74fb      	strb	r3, [r7, #19]
        /* integration */
        prevInt ^= currBit;
 800973a:	7ffa      	ldrb	r2, [r7, #31]
 800973c:	7cfb      	ldrb	r3, [r7, #19]
 800973e:	4053      	eors	r3, r2
 8009740:	77fb      	strb	r3, [r7, #31]
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 8009742:	7d3b      	ldrb	r3, [r7, #20]
 8009744:	68fa      	ldr	r2, [r7, #12]
 8009746:	4413      	add	r3, r2
 8009748:	781b      	ldrb	r3, [r3, #0]
 800974a:	b25a      	sxtb	r2, r3
 800974c:	7ff9      	ldrb	r1, [r7, #31]
 800974e:	7d7b      	ldrb	r3, [r7, #21]
 8009750:	fa01 f303 	lsl.w	r3, r1, r3
 8009754:	b25b      	sxtb	r3, r3
 8009756:	4313      	orrs	r3, r2
 8009758:	b259      	sxtb	r1, r3
 800975a:	7d3b      	ldrb	r3, [r7, #20]
 800975c:	68fa      	ldr	r2, [r7, #12]
 800975e:	4413      	add	r3, r2
 8009760:	b2ca      	uxtb	r2, r1
 8009762:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < ( size * 8 ); i++ )
 8009764:	69bb      	ldr	r3, [r7, #24]
 8009766:	3301      	adds	r3, #1
 8009768:	61bb      	str	r3, [r7, #24]
 800976a:	79fb      	ldrb	r3, [r7, #7]
 800976c:	00db      	lsls	r3, r3, #3
 800976e:	69ba      	ldr	r2, [r7, #24]
 8009770:	429a      	cmp	r2, r3
 8009772:	dbb0      	blt.n	80096d6 <payload_integration+0x4e>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 8009774:	7ffb      	ldrb	r3, [r7, #31]
 8009776:	01db      	lsls	r3, r3, #7
 8009778:	b25a      	sxtb	r2, r3
 800977a:	7ffb      	ldrb	r3, [r7, #31]
 800977c:	019b      	lsls	r3, r3, #6
 800977e:	b25b      	sxtb	r3, r3
 8009780:	4313      	orrs	r3, r2
 8009782:	b25b      	sxtb	r3, r3
 8009784:	7ffa      	ldrb	r2, [r7, #31]
 8009786:	2a00      	cmp	r2, #0
 8009788:	d101      	bne.n	800978e <payload_integration+0x106>
 800978a:	2220      	movs	r2, #32
 800978c:	e000      	b.n	8009790 <payload_integration+0x108>
 800978e:	2200      	movs	r2, #0
 8009790:	4313      	orrs	r3, r2
 8009792:	b259      	sxtb	r1, r3
 8009794:	79fb      	ldrb	r3, [r7, #7]
 8009796:	68fa      	ldr	r2, [r7, #12]
 8009798:	4413      	add	r3, r2
 800979a:	b2ca      	uxtb	r2, r1
 800979c:	701a      	strb	r2, [r3, #0]
}
 800979e:	bf00      	nop
 80097a0:	3724      	adds	r7, #36	; 0x24
 80097a2:	46bd      	mov	sp, r7
 80097a4:	bc80      	pop	{r7}
 80097a6:	4770      	bx	lr

080097a8 <RadioSetRxGenericConfig>:
#endif /*RADIO_SIGFOX_ENABLE == 1*/

static int32_t RadioSetRxGenericConfig( GenericModems_t modem, RxConfigGeneric_t *config, uint32_t rxContinuous,
                                        uint32_t symbTimeout )
{
 80097a8:	b580      	push	{r7, lr}
 80097aa:	b08c      	sub	sp, #48	; 0x30
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	60b9      	str	r1, [r7, #8]
 80097b0:	607a      	str	r2, [r7, #4]
 80097b2:	603b      	str	r3, [r7, #0]
 80097b4:	4603      	mov	r3, r0
 80097b6:	73fb      	strb	r3, [r7, #15]
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    int32_t status = 0;
 80097b8:	2300      	movs	r3, #0
 80097ba:	62bb      	str	r3, [r7, #40]	; 0x28
    uint8_t syncword[8] = {0};
 80097bc:	2300      	movs	r3, #0
 80097be:	623b      	str	r3, [r7, #32]
 80097c0:	2300      	movs	r3, #0
 80097c2:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t MaxPayloadLength;

    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 80097c4:	f001 fdff 	bl	800b3c6 <RFW_DeInit>

    if( rxContinuous != 0 )
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d001      	beq.n	80097d2 <RadioSetRxGenericConfig+0x2a>
    {
        symbTimeout = 0;
 80097ce:	2300      	movs	r3, #0
 80097d0:	603b      	str	r3, [r7, #0]
    }
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	bf14      	ite	ne
 80097d8:	2301      	movne	r3, #1
 80097da:	2300      	moveq	r3, #0
 80097dc:	b2da      	uxtb	r2, r3
 80097de:	4ba3      	ldr	r3, [pc, #652]	; (8009a6c <RadioSetRxGenericConfig+0x2c4>)
 80097e0:	705a      	strb	r2, [r3, #1]

    switch( modem )
 80097e2:	7bfb      	ldrb	r3, [r7, #15]
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d003      	beq.n	80097f0 <RadioSetRxGenericConfig+0x48>
 80097e8:	2b01      	cmp	r3, #1
 80097ea:	f000 80dc 	beq.w	80099a6 <RadioSetRxGenericConfig+0x1fe>

        // Timeout Max, Timeout handled directly in SetRx function
        SubgRf.RxTimeout = 0xFFFF;
        break;
    default:
        break;
 80097ee:	e194      	b.n	8009b1a <RadioSetRxGenericConfig+0x372>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 80097f0:	68bb      	ldr	r3, [r7, #8]
 80097f2:	689b      	ldr	r3, [r3, #8]
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d003      	beq.n	8009800 <RadioSetRxGenericConfig+0x58>
 80097f8:	68bb      	ldr	r3, [r7, #8]
 80097fa:	68db      	ldr	r3, [r3, #12]
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d102      	bne.n	8009806 <RadioSetRxGenericConfig+0x5e>
            return -1;
 8009800:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009804:	e18a      	b.n	8009b1c <RadioSetRxGenericConfig+0x374>
        if( config->fsk.SyncWordLength > 8 )
 8009806:	68bb      	ldr	r3, [r7, #8]
 8009808:	7f9b      	ldrb	r3, [r3, #30]
 800980a:	2b08      	cmp	r3, #8
 800980c:	d902      	bls.n	8009814 <RadioSetRxGenericConfig+0x6c>
            return -1;
 800980e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009812:	e183      	b.n	8009b1c <RadioSetRxGenericConfig+0x374>
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 8009814:	68bb      	ldr	r3, [r7, #8]
 8009816:	6919      	ldr	r1, [r3, #16]
 8009818:	68bb      	ldr	r3, [r7, #8]
 800981a:	7f9b      	ldrb	r3, [r3, #30]
 800981c:	b29a      	uxth	r2, r3
 800981e:	f107 0320 	add.w	r3, r7, #32
 8009822:	4618      	mov	r0, r3
 8009824:	f001 ff66 	bl	800b6f4 <UTIL_MEM_cpy_8>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 8009828:	68bb      	ldr	r3, [r7, #8]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	2b00      	cmp	r3, #0
 800982e:	bf14      	ite	ne
 8009830:	2301      	movne	r3, #1
 8009832:	2300      	moveq	r3, #0
 8009834:	b2db      	uxtb	r3, r3
 8009836:	4618      	mov	r0, r3
 8009838:	f000 fe26 	bl	800a488 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800983c:	4b8b      	ldr	r3, [pc, #556]	; (8009a6c <RadioSetRxGenericConfig+0x2c4>)
 800983e:	2200      	movs	r2, #0
 8009840:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 8009844:	68bb      	ldr	r3, [r7, #8]
 8009846:	689b      	ldr	r3, [r3, #8]
 8009848:	4a88      	ldr	r2, [pc, #544]	; (8009a6c <RadioSetRxGenericConfig+0x2c4>)
 800984a:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 800984c:	68bb      	ldr	r3, [r7, #8]
 800984e:	f893 2020 	ldrb.w	r2, [r3, #32]
 8009852:	4b86      	ldr	r3, [pc, #536]	; (8009a6c <RadioSetRxGenericConfig+0x2c4>)
 8009854:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 8009858:	68bb      	ldr	r3, [r7, #8]
 800985a:	685b      	ldr	r3, [r3, #4]
 800985c:	4618      	mov	r0, r3
 800985e:	f001 fce5 	bl	800b22c <SUBGRF_GetFskBandwidthRegValue>
 8009862:	4603      	mov	r3, r0
 8009864:	461a      	mov	r2, r3
 8009866:	4b81      	ldr	r3, [pc, #516]	; (8009a6c <RadioSetRxGenericConfig+0x2c4>)
 8009868:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800986c:	4b7f      	ldr	r3, [pc, #508]	; (8009a6c <RadioSetRxGenericConfig+0x2c4>)
 800986e:	2200      	movs	r2, #0
 8009870:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 8009872:	68bb      	ldr	r3, [r7, #8]
 8009874:	68db      	ldr	r3, [r3, #12]
 8009876:	b29b      	uxth	r3, r3
 8009878:	00db      	lsls	r3, r3, #3
 800987a:	b29a      	uxth	r2, r3
 800987c:	4b7b      	ldr	r3, [pc, #492]	; (8009a6c <RadioSetRxGenericConfig+0x2c4>)
 800987e:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 8009880:	68bb      	ldr	r3, [r7, #8]
 8009882:	7fda      	ldrb	r2, [r3, #31]
 8009884:	4b79      	ldr	r3, [pc, #484]	; (8009a6c <RadioSetRxGenericConfig+0x2c4>)
 8009886:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 8009888:	68bb      	ldr	r3, [r7, #8]
 800988a:	7f9b      	ldrb	r3, [r3, #30]
 800988c:	00db      	lsls	r3, r3, #3
 800988e:	b2da      	uxtb	r2, r3
 8009890:	4b76      	ldr	r3, [pc, #472]	; (8009a6c <RadioSetRxGenericConfig+0x2c4>)
 8009892:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 8009894:	68bb      	ldr	r3, [r7, #8]
 8009896:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800989a:	4b74      	ldr	r3, [pc, #464]	; (8009a6c <RadioSetRxGenericConfig+0x2c4>)
 800989c:	751a      	strb	r2, [r3, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 800989e:	68bb      	ldr	r3, [r7, #8]
 80098a0:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d105      	bne.n	80098b4 <RadioSetRxGenericConfig+0x10c>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 80098a8:	68bb      	ldr	r3, [r7, #8]
 80098aa:	695b      	ldr	r3, [r3, #20]
 80098ac:	b2da      	uxtb	r2, r3
 80098ae:	4b6f      	ldr	r3, [pc, #444]	; (8009a6c <RadioSetRxGenericConfig+0x2c4>)
 80098b0:	759a      	strb	r2, [r3, #22]
 80098b2:	e00b      	b.n	80098cc <RadioSetRxGenericConfig+0x124>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 80098b4:	68bb      	ldr	r3, [r7, #8]
 80098b6:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80098ba:	2b02      	cmp	r3, #2
 80098bc:	d103      	bne.n	80098c6 <RadioSetRxGenericConfig+0x11e>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 80098be:	4b6b      	ldr	r3, [pc, #428]	; (8009a6c <RadioSetRxGenericConfig+0x2c4>)
 80098c0:	22ff      	movs	r2, #255	; 0xff
 80098c2:	759a      	strb	r2, [r3, #22]
 80098c4:	e002      	b.n	80098cc <RadioSetRxGenericConfig+0x124>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 80098c6:	4b69      	ldr	r3, [pc, #420]	; (8009a6c <RadioSetRxGenericConfig+0x2c4>)
 80098c8:	22ff      	movs	r2, #255	; 0xff
 80098ca:	759a      	strb	r2, [r3, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 80098cc:	68bb      	ldr	r3, [r7, #8]
 80098ce:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80098d2:	2b02      	cmp	r3, #2
 80098d4:	d004      	beq.n	80098e0 <RadioSetRxGenericConfig+0x138>
            || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 80098d6:	68bb      	ldr	r3, [r7, #8]
 80098d8:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80098dc:	2b02      	cmp	r3, #2
 80098de:	d12d      	bne.n	800993c <RadioSetRxGenericConfig+0x194>
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 80098e0:	68bb      	ldr	r3, [r7, #8]
 80098e2:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80098e6:	2bf1      	cmp	r3, #241	; 0xf1
 80098e8:	d00c      	beq.n	8009904 <RadioSetRxGenericConfig+0x15c>
 80098ea:	68bb      	ldr	r3, [r7, #8]
 80098ec:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80098f0:	2bf2      	cmp	r3, #242	; 0xf2
 80098f2:	d007      	beq.n	8009904 <RadioSetRxGenericConfig+0x15c>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 80098f4:	68bb      	ldr	r3, [r7, #8]
 80098f6:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80098fa:	2b01      	cmp	r3, #1
 80098fc:	d002      	beq.n	8009904 <RadioSetRxGenericConfig+0x15c>
                return -1;
 80098fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009902:	e10b      	b.n	8009b1c <RadioSetRxGenericConfig+0x374>
            ConfigGeneric.rtx = CONFIG_RX;
 8009904:	2300      	movs	r3, #0
 8009906:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.RxConfig = config;
 8009908:	68bb      	ldr	r3, [r7, #8]
 800990a:	61bb      	str	r3, [r7, #24]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 800990c:	4b58      	ldr	r3, [pc, #352]	; (8009a70 <RadioSetRxGenericConfig+0x2c8>)
 800990e:	6819      	ldr	r1, [r3, #0]
 8009910:	f107 0314 	add.w	r3, r7, #20
 8009914:	4a57      	ldr	r2, [pc, #348]	; (8009a74 <RadioSetRxGenericConfig+0x2cc>)
 8009916:	4618      	mov	r0, r3
 8009918:	f001 fd48 	bl	800b3ac <RFW_Init>
 800991c:	4603      	mov	r3, r0
 800991e:	2b00      	cmp	r3, #0
 8009920:	d002      	beq.n	8009928 <RadioSetRxGenericConfig+0x180>
                return -1;
 8009922:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009926:	e0f9      	b.n	8009b1c <RadioSetRxGenericConfig+0x374>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8009928:	4b50      	ldr	r3, [pc, #320]	; (8009a6c <RadioSetRxGenericConfig+0x2c4>)
 800992a:	2200      	movs	r2, #0
 800992c:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 800992e:	4b4f      	ldr	r3, [pc, #316]	; (8009a6c <RadioSetRxGenericConfig+0x2c4>)
 8009930:	2201      	movs	r2, #1
 8009932:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8009934:	4b4d      	ldr	r3, [pc, #308]	; (8009a6c <RadioSetRxGenericConfig+0x2c4>)
 8009936:	2200      	movs	r2, #0
 8009938:	755a      	strb	r2, [r3, #21]
        {
 800993a:	e00e      	b.n	800995a <RadioSetRxGenericConfig+0x1b2>
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 800993c:	68bb      	ldr	r3, [r7, #8]
 800993e:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8009942:	4b4a      	ldr	r3, [pc, #296]	; (8009a6c <RadioSetRxGenericConfig+0x2c4>)
 8009944:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 8009946:	68bb      	ldr	r3, [r7, #8]
 8009948:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800994c:	4b47      	ldr	r3, [pc, #284]	; (8009a6c <RadioSetRxGenericConfig+0x2c4>)
 800994e:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 8009950:	68bb      	ldr	r3, [r7, #8]
 8009952:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8009956:	4b45      	ldr	r3, [pc, #276]	; (8009a6c <RadioSetRxGenericConfig+0x2c4>)
 8009958:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 800995a:	f7ff fa6e 	bl	8008e3a <RadioStandby>
        RadioSetModem( MODEM_FSK );
 800995e:	2000      	movs	r0, #0
 8009960:	f7fe fc0a 	bl	8008178 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8009964:	4844      	ldr	r0, [pc, #272]	; (8009a78 <RadioSetRxGenericConfig+0x2d0>)
 8009966:	f001 f82d 	bl	800a9c4 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800996a:	4844      	ldr	r0, [pc, #272]	; (8009a7c <RadioSetRxGenericConfig+0x2d4>)
 800996c:	f001 f8fc 	bl	800ab68 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8009970:	f107 0320 	add.w	r3, r7, #32
 8009974:	4618      	mov	r0, r3
 8009976:	f000 fbc0 	bl	800a0fa <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 800997a:	68bb      	ldr	r3, [r7, #8]
 800997c:	8b9b      	ldrh	r3, [r3, #28]
 800997e:	4618      	mov	r0, r3
 8009980:	f000 fc0a 	bl	800a198 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 8009984:	68bb      	ldr	r3, [r7, #8]
 8009986:	8b1b      	ldrh	r3, [r3, #24]
 8009988:	4618      	mov	r0, r3
 800998a:	f000 fbe5 	bl	800a158 <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 800998e:	683b      	ldr	r3, [r7, #0]
 8009990:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8009994:	fb03 f202 	mul.w	r2, r3, r2
 8009998:	68bb      	ldr	r3, [r7, #8]
 800999a:	689b      	ldr	r3, [r3, #8]
 800999c:	fbb2 f3f3 	udiv	r3, r2, r3
 80099a0:	4a32      	ldr	r2, [pc, #200]	; (8009a6c <RadioSetRxGenericConfig+0x2c4>)
 80099a2:	6093      	str	r3, [r2, #8]
        break;
 80099a4:	e0b9      	b.n	8009b1a <RadioSetRxGenericConfig+0x372>
        if( config->lora.PreambleLen == 0 )
 80099a6:	68bb      	ldr	r3, [r7, #8]
 80099a8:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d102      	bne.n	80099b4 <RadioSetRxGenericConfig+0x20c>
            return -1;
 80099ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80099b2:	e0b3      	b.n	8009b1c <RadioSetRxGenericConfig+0x374>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 80099b4:	68bb      	ldr	r3, [r7, #8]
 80099b6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80099ba:	2b01      	cmp	r3, #1
 80099bc:	d104      	bne.n	80099c8 <RadioSetRxGenericConfig+0x220>
            MaxPayloadLength = config->fsk.MaxPayloadLength;
 80099be:	68bb      	ldr	r3, [r7, #8]
 80099c0:	695b      	ldr	r3, [r3, #20]
 80099c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80099c6:	e002      	b.n	80099ce <RadioSetRxGenericConfig+0x226>
            MaxPayloadLength = 0xFF;
 80099c8:	23ff      	movs	r3, #255	; 0xff
 80099ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 80099ce:	68bb      	ldr	r3, [r7, #8]
 80099d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	bf14      	ite	ne
 80099d6:	2301      	movne	r3, #1
 80099d8:	2300      	moveq	r3, #0
 80099da:	b2db      	uxtb	r3, r3
 80099dc:	4618      	mov	r0, r3
 80099de:	f000 fd53 	bl	800a488 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 80099e2:	683b      	ldr	r3, [r7, #0]
 80099e4:	b2db      	uxtb	r3, r3
 80099e6:	4618      	mov	r0, r3
 80099e8:	f000 fd5d 	bl	800a4a6 <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 80099ec:	4b1f      	ldr	r3, [pc, #124]	; (8009a6c <RadioSetRxGenericConfig+0x2c4>)
 80099ee:	2201      	movs	r2, #1
 80099f0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 80099f4:	68bb      	ldr	r3, [r7, #8]
 80099f6:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80099fa:	4b1c      	ldr	r3, [pc, #112]	; (8009a6c <RadioSetRxGenericConfig+0x2c4>)
 80099fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 8009a00:	68bb      	ldr	r3, [r7, #8]
 8009a02:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 8009a06:	4b19      	ldr	r3, [pc, #100]	; (8009a6c <RadioSetRxGenericConfig+0x2c4>)
 8009a08:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 8009a0c:	68bb      	ldr	r3, [r7, #8]
 8009a0e:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 8009a12:	4b16      	ldr	r3, [pc, #88]	; (8009a6c <RadioSetRxGenericConfig+0x2c4>)
 8009a14:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 8009a18:	68bb      	ldr	r3, [r7, #8]
 8009a1a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009a1e:	2b02      	cmp	r3, #2
 8009a20:	d010      	beq.n	8009a44 <RadioSetRxGenericConfig+0x29c>
 8009a22:	2b02      	cmp	r3, #2
 8009a24:	dc2c      	bgt.n	8009a80 <RadioSetRxGenericConfig+0x2d8>
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d002      	beq.n	8009a30 <RadioSetRxGenericConfig+0x288>
 8009a2a:	2b01      	cmp	r3, #1
 8009a2c:	d005      	beq.n	8009a3a <RadioSetRxGenericConfig+0x292>
            break;
 8009a2e:	e027      	b.n	8009a80 <RadioSetRxGenericConfig+0x2d8>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8009a30:	4b0e      	ldr	r3, [pc, #56]	; (8009a6c <RadioSetRxGenericConfig+0x2c4>)
 8009a32:	2200      	movs	r2, #0
 8009a34:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8009a38:	e023      	b.n	8009a82 <RadioSetRxGenericConfig+0x2da>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8009a3a:	4b0c      	ldr	r3, [pc, #48]	; (8009a6c <RadioSetRxGenericConfig+0x2c4>)
 8009a3c:	2201      	movs	r2, #1
 8009a3e:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8009a42:	e01e      	b.n	8009a82 <RadioSetRxGenericConfig+0x2da>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 8009a44:	68bb      	ldr	r3, [r7, #8]
 8009a46:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009a4a:	2b0b      	cmp	r3, #11
 8009a4c:	d004      	beq.n	8009a58 <RadioSetRxGenericConfig+0x2b0>
 8009a4e:	68bb      	ldr	r3, [r7, #8]
 8009a50:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009a54:	2b0c      	cmp	r3, #12
 8009a56:	d104      	bne.n	8009a62 <RadioSetRxGenericConfig+0x2ba>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8009a58:	4b04      	ldr	r3, [pc, #16]	; (8009a6c <RadioSetRxGenericConfig+0x2c4>)
 8009a5a:	2201      	movs	r2, #1
 8009a5c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8009a60:	e00f      	b.n	8009a82 <RadioSetRxGenericConfig+0x2da>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8009a62:	4b02      	ldr	r3, [pc, #8]	; (8009a6c <RadioSetRxGenericConfig+0x2c4>)
 8009a64:	2200      	movs	r2, #0
 8009a66:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8009a6a:	e00a      	b.n	8009a82 <RadioSetRxGenericConfig+0x2da>
 8009a6c:	20000a34 	.word	0x20000a34
 8009a70:	20000a30 	.word	0x20000a30
 8009a74:	20000aa8 	.word	0x20000aa8
 8009a78:	20000a6c 	.word	0x20000a6c
 8009a7c:	20000a42 	.word	0x20000a42
            break;
 8009a80:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8009a82:	4b28      	ldr	r3, [pc, #160]	; (8009b24 <RadioSetRxGenericConfig+0x37c>)
 8009a84:	2201      	movs	r2, #1
 8009a86:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 8009a88:	68bb      	ldr	r3, [r7, #8]
 8009a8a:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 8009a8c:	4b25      	ldr	r3, [pc, #148]	; (8009b24 <RadioSetRxGenericConfig+0x37c>)
 8009a8e:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 8009a90:	68bb      	ldr	r3, [r7, #8]
 8009a92:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 8009a96:	4b23      	ldr	r3, [pc, #140]	; (8009b24 <RadioSetRxGenericConfig+0x37c>)
 8009a98:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8009a9a:	4a22      	ldr	r2, [pc, #136]	; (8009b24 <RadioSetRxGenericConfig+0x37c>)
 8009a9c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009aa0:	77d3      	strb	r3, [r2, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 8009aa2:	68bb      	ldr	r3, [r7, #8]
 8009aa4:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8009aa8:	4b1e      	ldr	r3, [pc, #120]	; (8009b24 <RadioSetRxGenericConfig+0x37c>)
 8009aaa:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 8009aae:	68bb      	ldr	r3, [r7, #8]
 8009ab0:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 8009ab4:	4b1b      	ldr	r3, [pc, #108]	; (8009b24 <RadioSetRxGenericConfig+0x37c>)
 8009ab6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RadioStandby( );
 8009aba:	f7ff f9be 	bl	8008e3a <RadioStandby>
        RadioSetModem( MODEM_LORA );
 8009abe:	2001      	movs	r0, #1
 8009ac0:	f7fe fb5a 	bl	8008178 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8009ac4:	4818      	ldr	r0, [pc, #96]	; (8009b28 <RadioSetRxGenericConfig+0x380>)
 8009ac6:	f000 ff7d 	bl	800a9c4 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8009aca:	4818      	ldr	r0, [pc, #96]	; (8009b2c <RadioSetRxGenericConfig+0x384>)
 8009acc:	f001 f84c 	bl	800ab68 <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8009ad0:	4b14      	ldr	r3, [pc, #80]	; (8009b24 <RadioSetRxGenericConfig+0x37c>)
 8009ad2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8009ad6:	2b01      	cmp	r3, #1
 8009ad8:	d10d      	bne.n	8009af6 <RadioSetRxGenericConfig+0x34e>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 8009ada:	f240 7036 	movw	r0, #1846	; 0x736
 8009ade:	f001 f99f 	bl	800ae20 <SUBGRF_ReadRegister>
 8009ae2:	4603      	mov	r3, r0
 8009ae4:	f023 0304 	bic.w	r3, r3, #4
 8009ae8:	b2db      	uxtb	r3, r3
 8009aea:	4619      	mov	r1, r3
 8009aec:	f240 7036 	movw	r0, #1846	; 0x736
 8009af0:	f001 f982 	bl	800adf8 <SUBGRF_WriteRegister>
 8009af4:	e00c      	b.n	8009b10 <RadioSetRxGenericConfig+0x368>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 8009af6:	f240 7036 	movw	r0, #1846	; 0x736
 8009afa:	f001 f991 	bl	800ae20 <SUBGRF_ReadRegister>
 8009afe:	4603      	mov	r3, r0
 8009b00:	f043 0304 	orr.w	r3, r3, #4
 8009b04:	b2db      	uxtb	r3, r3
 8009b06:	4619      	mov	r1, r3
 8009b08:	f240 7036 	movw	r0, #1846	; 0x736
 8009b0c:	f001 f974 	bl	800adf8 <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 8009b10:	4b04      	ldr	r3, [pc, #16]	; (8009b24 <RadioSetRxGenericConfig+0x37c>)
 8009b12:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009b16:	609a      	str	r2, [r3, #8]
        break;
 8009b18:	bf00      	nop
    }
    return status;
 8009b1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 8009b1c:	4618      	mov	r0, r3
 8009b1e:	3730      	adds	r7, #48	; 0x30
 8009b20:	46bd      	mov	sp, r7
 8009b22:	bd80      	pop	{r7, pc}
 8009b24:	20000a34 	.word	0x20000a34
 8009b28:	20000a6c 	.word	0x20000a6c
 8009b2c:	20000a42 	.word	0x20000a42

08009b30 <RadioSetTxGenericConfig>:

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t *config, int8_t power,
                                        uint32_t timeout )
{
 8009b30:	b580      	push	{r7, lr}
 8009b32:	b08e      	sub	sp, #56	; 0x38
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	60b9      	str	r1, [r7, #8]
 8009b38:	607b      	str	r3, [r7, #4]
 8009b3a:	4603      	mov	r3, r0
 8009b3c:	73fb      	strb	r3, [r7, #15]
 8009b3e:	4613      	mov	r3, r2
 8009b40:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    uint8_t syncword[8] = {0};
 8009b42:	2300      	movs	r3, #0
 8009b44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009b46:	2300      	movs	r3, #0
 8009b48:	633b      	str	r3, [r7, #48]	; 0x30
    RadioModems_t radio_modem;
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 8009b4a:	f001 fc3c 	bl	800b3c6 <RFW_DeInit>
    switch( modem )
 8009b4e:	7bfb      	ldrb	r3, [r7, #15]
 8009b50:	2b03      	cmp	r3, #3
 8009b52:	f200 8204 	bhi.w	8009f5e <RadioSetTxGenericConfig+0x42e>
 8009b56:	a201      	add	r2, pc, #4	; (adr r2, 8009b5c <RadioSetTxGenericConfig+0x2c>)
 8009b58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b5c:	08009ce1 	.word	0x08009ce1
 8009b60:	08009e29 	.word	0x08009e29
 8009b64:	08009f21 	.word	0x08009f21
 8009b68:	08009b6d 	.word	0x08009b6d
    {
    case GENERIC_MSK:
        if( config->msk.SyncWordLength > 8 )
 8009b6c:	68bb      	ldr	r3, [r7, #8]
 8009b6e:	7c9b      	ldrb	r3, [r3, #18]
 8009b70:	2b08      	cmp	r3, #8
 8009b72:	d902      	bls.n	8009b7a <RadioSetTxGenericConfig+0x4a>
        {
            return -1;
 8009b74:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009b78:	e206      	b.n	8009f88 <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8( syncword, config->msk.SyncWord, config->msk.SyncWordLength );
 8009b7a:	68bb      	ldr	r3, [r7, #8]
 8009b7c:	6899      	ldr	r1, [r3, #8]
 8009b7e:	68bb      	ldr	r3, [r7, #8]
 8009b80:	7c9b      	ldrb	r3, [r3, #18]
 8009b82:	b29a      	uxth	r2, r3
 8009b84:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009b88:	4618      	mov	r0, r3
 8009b8a:	f001 fdb3 	bl	800b6f4 <UTIL_MEM_cpy_8>
        }
        if( ( config->msk.BitRate == 0 ) )
 8009b8e:	68bb      	ldr	r3, [r7, #8]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d102      	bne.n	8009b9c <RadioSetTxGenericConfig+0x6c>
        {
            return -1;
 8009b96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009b9a:	e1f5      	b.n	8009f88 <RadioSetTxGenericConfig+0x458>
        }
        else if( config->msk.BitRate <= 10000 )
 8009b9c:	68bb      	ldr	r3, [r7, #8]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	f242 7210 	movw	r2, #10000	; 0x2710
 8009ba4:	4293      	cmp	r3, r2
 8009ba6:	d813      	bhi.n	8009bd0 <RadioSetTxGenericConfig+0xa0>
        {
            /*max msk modulator datarate is 10kbps*/
            radio_modem = MODEM_MSK;
 8009ba8:	2302      	movs	r3, #2
 8009baa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GMSK;
 8009bae:	4b99      	ldr	r3, [pc, #612]	; (8009e14 <RadioSetTxGenericConfig+0x2e4>)
 8009bb0:	2203      	movs	r2, #3
 8009bb2:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GMSK;
 8009bb4:	4b97      	ldr	r3, [pc, #604]	; (8009e14 <RadioSetTxGenericConfig+0x2e4>)
 8009bb6:	2203      	movs	r2, #3
 8009bb8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 8009bbc:	68bb      	ldr	r3, [r7, #8]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	4a94      	ldr	r2, [pc, #592]	; (8009e14 <RadioSetTxGenericConfig+0x2e4>)
 8009bc2:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 8009bc4:	68bb      	ldr	r3, [r7, #8]
 8009bc6:	7cda      	ldrb	r2, [r3, #19]
 8009bc8:	4b92      	ldr	r3, [pc, #584]	; (8009e14 <RadioSetTxGenericConfig+0x2e4>)
 8009bca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009bce:	e017      	b.n	8009c00 <RadioSetTxGenericConfig+0xd0>
        }
        else
        {
            radio_modem = MODEM_FSK;
 8009bd0:	2300      	movs	r3, #0
 8009bd2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8009bd6:	4b8f      	ldr	r3, [pc, #572]	; (8009e14 <RadioSetTxGenericConfig+0x2e4>)
 8009bd8:	2200      	movs	r2, #0
 8009bda:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8009bdc:	4b8d      	ldr	r3, [pc, #564]	; (8009e14 <RadioSetTxGenericConfig+0x2e4>)
 8009bde:	2200      	movs	r2, #0
 8009be0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 8009be4:	68bb      	ldr	r3, [r7, #8]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	4a8a      	ldr	r2, [pc, #552]	; (8009e14 <RadioSetTxGenericConfig+0x2e4>)
 8009bea:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 8009bec:	68bb      	ldr	r3, [r7, #8]
 8009bee:	7cda      	ldrb	r2, [r3, #19]
 8009bf0:	4b88      	ldr	r3, [pc, #544]	; (8009e14 <RadioSetTxGenericConfig+0x2e4>)
 8009bf2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            /*do msk with gfsk modulator*/
            SubgRf.ModulationParams.Params.Gfsk.Fdev = config->msk.BitRate / 4;
 8009bf6:	68bb      	ldr	r3, [r7, #8]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	089b      	lsrs	r3, r3, #2
 8009bfc:	4a85      	ldr	r2, [pc, #532]	; (8009e14 <RadioSetTxGenericConfig+0x2e4>)
 8009bfe:	6413      	str	r3, [r2, #64]	; 0x40
        }

        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->msk.PreambleLen ) << 3; // convert byte into bit
 8009c00:	68bb      	ldr	r3, [r7, #8]
 8009c02:	685b      	ldr	r3, [r3, #4]
 8009c04:	b29b      	uxth	r3, r3
 8009c06:	00db      	lsls	r3, r3, #3
 8009c08:	b29a      	uxth	r2, r3
 8009c0a:	4b82      	ldr	r3, [pc, #520]	; (8009e14 <RadioSetTxGenericConfig+0x2e4>)
 8009c0c:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 8009c0e:	4b81      	ldr	r3, [pc, #516]	; (8009e14 <RadioSetTxGenericConfig+0x2e4>)
 8009c10:	2204      	movs	r2, #4
 8009c12:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->msk.SyncWordLength ) << 3; // convert byte into bit
 8009c14:	68bb      	ldr	r3, [r7, #8]
 8009c16:	7c9b      	ldrb	r3, [r3, #18]
 8009c18:	00db      	lsls	r3, r3, #3
 8009c1a:	b2da      	uxtb	r2, r3
 8009c1c:	4b7d      	ldr	r3, [pc, #500]	; (8009e14 <RadioSetTxGenericConfig+0x2e4>)
 8009c1e:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 8009c20:	4b7c      	ldr	r3, [pc, #496]	; (8009e14 <RadioSetTxGenericConfig+0x2e4>)
 8009c22:	2200      	movs	r2, #0
 8009c24:	751a      	strb	r2, [r3, #20]

        if( ( config->msk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 8009c26:	68bb      	ldr	r3, [r7, #8]
 8009c28:	7d9b      	ldrb	r3, [r3, #22]
 8009c2a:	2b02      	cmp	r3, #2
 8009c2c:	d003      	beq.n	8009c36 <RadioSetTxGenericConfig+0x106>
            || ( config->msk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8009c2e:	68bb      	ldr	r3, [r7, #8]
 8009c30:	7d1b      	ldrb	r3, [r3, #20]
 8009c32:	2b02      	cmp	r3, #2
 8009c34:	d12b      	bne.n	8009c8e <RadioSetTxGenericConfig+0x15e>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 8009c36:	68bb      	ldr	r3, [r7, #8]
 8009c38:	7d5b      	ldrb	r3, [r3, #21]
 8009c3a:	2bf1      	cmp	r3, #241	; 0xf1
 8009c3c:	d00a      	beq.n	8009c54 <RadioSetTxGenericConfig+0x124>
 8009c3e:	68bb      	ldr	r3, [r7, #8]
 8009c40:	7d5b      	ldrb	r3, [r3, #21]
 8009c42:	2bf2      	cmp	r3, #242	; 0xf2
 8009c44:	d006      	beq.n	8009c54 <RadioSetTxGenericConfig+0x124>
                && ( config->msk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8009c46:	68bb      	ldr	r3, [r7, #8]
 8009c48:	7d5b      	ldrb	r3, [r3, #21]
 8009c4a:	2b01      	cmp	r3, #1
 8009c4c:	d002      	beq.n	8009c54 <RadioSetTxGenericConfig+0x124>
            {
                return -1;
 8009c4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009c52:	e199      	b.n	8009f88 <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            /*msk and fsk are union, no need for copy as fsk/msk struct are on same address*/
            ConfigGeneric.TxConfig = config;
 8009c54:	68bb      	ldr	r3, [r7, #8]
 8009c56:	623b      	str	r3, [r7, #32]
            ConfigGeneric.rtx = CONFIG_TX;
 8009c58:	2301      	movs	r3, #1
 8009c5a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 8009c5e:	4b6e      	ldr	r3, [pc, #440]	; (8009e18 <RadioSetTxGenericConfig+0x2e8>)
 8009c60:	6819      	ldr	r1, [r3, #0]
 8009c62:	f107 0320 	add.w	r3, r7, #32
 8009c66:	4a6d      	ldr	r2, [pc, #436]	; (8009e1c <RadioSetTxGenericConfig+0x2ec>)
 8009c68:	4618      	mov	r0, r3
 8009c6a:	f001 fb9f 	bl	800b3ac <RFW_Init>
 8009c6e:	4603      	mov	r3, r0
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d002      	beq.n	8009c7a <RadioSetTxGenericConfig+0x14a>
            {
                return -1;
 8009c74:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009c78:	e186      	b.n	8009f88 <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8009c7a:	4b66      	ldr	r3, [pc, #408]	; (8009e14 <RadioSetTxGenericConfig+0x2e4>)
 8009c7c:	2200      	movs	r2, #0
 8009c7e:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 8009c80:	4b64      	ldr	r3, [pc, #400]	; (8009e14 <RadioSetTxGenericConfig+0x2e4>)
 8009c82:	2201      	movs	r2, #1
 8009c84:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8009c86:	4b63      	ldr	r3, [pc, #396]	; (8009e14 <RadioSetTxGenericConfig+0x2e4>)
 8009c88:	2200      	movs	r2, #0
 8009c8a:	755a      	strb	r2, [r3, #21]
        {
 8009c8c:	e00b      	b.n	8009ca6 <RadioSetTxGenericConfig+0x176>
        }
        else
        {
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->msk.CrcLength;
 8009c8e:	68bb      	ldr	r3, [r7, #8]
 8009c90:	7d5a      	ldrb	r2, [r3, #21]
 8009c92:	4b60      	ldr	r3, [pc, #384]	; (8009e14 <RadioSetTxGenericConfig+0x2e4>)
 8009c94:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->msk.Whitening;
 8009c96:	68bb      	ldr	r3, [r7, #8]
 8009c98:	7d9a      	ldrb	r2, [r3, #22]
 8009c9a:	4b5e      	ldr	r3, [pc, #376]	; (8009e14 <RadioSetTxGenericConfig+0x2e4>)
 8009c9c:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->msk.HeaderType;
 8009c9e:	68bb      	ldr	r3, [r7, #8]
 8009ca0:	7d1a      	ldrb	r2, [r3, #20]
 8009ca2:	4b5c      	ldr	r3, [pc, #368]	; (8009e14 <RadioSetTxGenericConfig+0x2e4>)
 8009ca4:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 8009ca6:	f7ff f8c8 	bl	8008e3a <RadioStandby>
        RadioSetModem( radio_modem );
 8009caa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009cae:	4618      	mov	r0, r3
 8009cb0:	f7fe fa62 	bl	8008178 <RadioSetModem>

        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8009cb4:	485a      	ldr	r0, [pc, #360]	; (8009e20 <RadioSetTxGenericConfig+0x2f0>)
 8009cb6:	f000 fe85 	bl	800a9c4 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8009cba:	485a      	ldr	r0, [pc, #360]	; (8009e24 <RadioSetTxGenericConfig+0x2f4>)
 8009cbc:	f000 ff54 	bl	800ab68 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8009cc0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009cc4:	4618      	mov	r0, r3
 8009cc6:	f000 fa18 	bl	800a0fa <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->msk.whiteSeed );
 8009cca:	68bb      	ldr	r3, [r7, #8]
 8009ccc:	8a1b      	ldrh	r3, [r3, #16]
 8009cce:	4618      	mov	r0, r3
 8009cd0:	f000 fa62 	bl	800a198 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->msk.CrcPolynomial );
 8009cd4:	68bb      	ldr	r3, [r7, #8]
 8009cd6:	899b      	ldrh	r3, [r3, #12]
 8009cd8:	4618      	mov	r0, r3
 8009cda:	f000 fa3d 	bl	800a158 <SUBGRF_SetCrcPolynomial>
        break;
 8009cde:	e13f      	b.n	8009f60 <RadioSetTxGenericConfig+0x430>
    case GENERIC_FSK:
        if( config->fsk.BitRate == 0 )
 8009ce0:	68bb      	ldr	r3, [r7, #8]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d102      	bne.n	8009cee <RadioSetTxGenericConfig+0x1be>
        {
            return -1;
 8009ce8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009cec:	e14c      	b.n	8009f88 <RadioSetTxGenericConfig+0x458>
        }
        if( config->fsk.SyncWordLength > 8 )
 8009cee:	68bb      	ldr	r3, [r7, #8]
 8009cf0:	7c9b      	ldrb	r3, [r3, #18]
 8009cf2:	2b08      	cmp	r3, #8
 8009cf4:	d902      	bls.n	8009cfc <RadioSetTxGenericConfig+0x1cc>
        {
            return -1;
 8009cf6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009cfa:	e145      	b.n	8009f88 <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 8009cfc:	68bb      	ldr	r3, [r7, #8]
 8009cfe:	6899      	ldr	r1, [r3, #8]
 8009d00:	68bb      	ldr	r3, [r7, #8]
 8009d02:	7c9b      	ldrb	r3, [r3, #18]
 8009d04:	b29a      	uxth	r2, r3
 8009d06:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009d0a:	4618      	mov	r0, r3
 8009d0c:	f001 fcf2 	bl	800b6f4 <UTIL_MEM_cpy_8>
        }
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8009d10:	4b40      	ldr	r3, [pc, #256]	; (8009e14 <RadioSetTxGenericConfig+0x2e4>)
 8009d12:	2200      	movs	r2, #0
 8009d14:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 8009d18:	68bb      	ldr	r3, [r7, #8]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	4a3d      	ldr	r2, [pc, #244]	; (8009e14 <RadioSetTxGenericConfig+0x2e4>)
 8009d1e:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 8009d20:	68bb      	ldr	r3, [r7, #8]
 8009d22:	7cda      	ldrb	r2, [r3, #19]
 8009d24:	4b3b      	ldr	r3, [pc, #236]	; (8009e14 <RadioSetTxGenericConfig+0x2e4>)
 8009d26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 8009d2a:	68bb      	ldr	r3, [r7, #8]
 8009d2c:	699b      	ldr	r3, [r3, #24]
 8009d2e:	4a39      	ldr	r2, [pc, #228]	; (8009e14 <RadioSetTxGenericConfig+0x2e4>)
 8009d30:	6413      	str	r3, [r2, #64]	; 0x40

        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8009d32:	4b38      	ldr	r3, [pc, #224]	; (8009e14 <RadioSetTxGenericConfig+0x2e4>)
 8009d34:	2200      	movs	r2, #0
 8009d36:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 8009d38:	68bb      	ldr	r3, [r7, #8]
 8009d3a:	685b      	ldr	r3, [r3, #4]
 8009d3c:	b29b      	uxth	r3, r3
 8009d3e:	00db      	lsls	r3, r3, #3
 8009d40:	b29a      	uxth	r2, r3
 8009d42:	4b34      	ldr	r3, [pc, #208]	; (8009e14 <RadioSetTxGenericConfig+0x2e4>)
 8009d44:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 8009d46:	4b33      	ldr	r3, [pc, #204]	; (8009e14 <RadioSetTxGenericConfig+0x2e4>)
 8009d48:	2204      	movs	r2, #4
 8009d4a:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 8009d4c:	68bb      	ldr	r3, [r7, #8]
 8009d4e:	7c9b      	ldrb	r3, [r3, #18]
 8009d50:	00db      	lsls	r3, r3, #3
 8009d52:	b2da      	uxtb	r2, r3
 8009d54:	4b2f      	ldr	r3, [pc, #188]	; (8009e14 <RadioSetTxGenericConfig+0x2e4>)
 8009d56:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 8009d58:	4b2e      	ldr	r3, [pc, #184]	; (8009e14 <RadioSetTxGenericConfig+0x2e4>)
 8009d5a:	2200      	movs	r2, #0
 8009d5c:	751a      	strb	r2, [r3, #20]

        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 8009d5e:	68bb      	ldr	r3, [r7, #8]
 8009d60:	7d9b      	ldrb	r3, [r3, #22]
 8009d62:	2b02      	cmp	r3, #2
 8009d64:	d003      	beq.n	8009d6e <RadioSetTxGenericConfig+0x23e>
            || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8009d66:	68bb      	ldr	r3, [r7, #8]
 8009d68:	7d1b      	ldrb	r3, [r3, #20]
 8009d6a:	2b02      	cmp	r3, #2
 8009d6c:	d12a      	bne.n	8009dc4 <RadioSetTxGenericConfig+0x294>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 8009d6e:	68bb      	ldr	r3, [r7, #8]
 8009d70:	7d5b      	ldrb	r3, [r3, #21]
 8009d72:	2bf1      	cmp	r3, #241	; 0xf1
 8009d74:	d00a      	beq.n	8009d8c <RadioSetTxGenericConfig+0x25c>
 8009d76:	68bb      	ldr	r3, [r7, #8]
 8009d78:	7d5b      	ldrb	r3, [r3, #21]
 8009d7a:	2bf2      	cmp	r3, #242	; 0xf2
 8009d7c:	d006      	beq.n	8009d8c <RadioSetTxGenericConfig+0x25c>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8009d7e:	68bb      	ldr	r3, [r7, #8]
 8009d80:	7d5b      	ldrb	r3, [r3, #21]
 8009d82:	2b01      	cmp	r3, #1
 8009d84:	d002      	beq.n	8009d8c <RadioSetTxGenericConfig+0x25c>
            {
                return -1;
 8009d86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009d8a:	e0fd      	b.n	8009f88 <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            ConfigGeneric.rtx = CONFIG_TX;
 8009d8c:	2301      	movs	r3, #1
 8009d8e:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.TxConfig = config;
 8009d90:	68bb      	ldr	r3, [r7, #8]
 8009d92:	617b      	str	r3, [r7, #20]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 8009d94:	4b20      	ldr	r3, [pc, #128]	; (8009e18 <RadioSetTxGenericConfig+0x2e8>)
 8009d96:	6819      	ldr	r1, [r3, #0]
 8009d98:	f107 0314 	add.w	r3, r7, #20
 8009d9c:	4a1f      	ldr	r2, [pc, #124]	; (8009e1c <RadioSetTxGenericConfig+0x2ec>)
 8009d9e:	4618      	mov	r0, r3
 8009da0:	f001 fb04 	bl	800b3ac <RFW_Init>
 8009da4:	4603      	mov	r3, r0
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d002      	beq.n	8009db0 <RadioSetTxGenericConfig+0x280>
            {
                return -1;
 8009daa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009dae:	e0eb      	b.n	8009f88 <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8009db0:	4b18      	ldr	r3, [pc, #96]	; (8009e14 <RadioSetTxGenericConfig+0x2e4>)
 8009db2:	2200      	movs	r2, #0
 8009db4:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 8009db6:	4b17      	ldr	r3, [pc, #92]	; (8009e14 <RadioSetTxGenericConfig+0x2e4>)
 8009db8:	2201      	movs	r2, #1
 8009dba:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8009dbc:	4b15      	ldr	r3, [pc, #84]	; (8009e14 <RadioSetTxGenericConfig+0x2e4>)
 8009dbe:	2200      	movs	r2, #0
 8009dc0:	755a      	strb	r2, [r3, #21]
        {
 8009dc2:	e00b      	b.n	8009ddc <RadioSetTxGenericConfig+0x2ac>
        }
        else
        {
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 8009dc4:	68bb      	ldr	r3, [r7, #8]
 8009dc6:	7d5a      	ldrb	r2, [r3, #21]
 8009dc8:	4b12      	ldr	r3, [pc, #72]	; (8009e14 <RadioSetTxGenericConfig+0x2e4>)
 8009dca:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 8009dcc:	68bb      	ldr	r3, [r7, #8]
 8009dce:	7d9a      	ldrb	r2, [r3, #22]
 8009dd0:	4b10      	ldr	r3, [pc, #64]	; (8009e14 <RadioSetTxGenericConfig+0x2e4>)
 8009dd2:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 8009dd4:	68bb      	ldr	r3, [r7, #8]
 8009dd6:	7d1a      	ldrb	r2, [r3, #20]
 8009dd8:	4b0e      	ldr	r3, [pc, #56]	; (8009e14 <RadioSetTxGenericConfig+0x2e4>)
 8009dda:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 8009ddc:	f7ff f82d 	bl	8008e3a <RadioStandby>
        RadioSetModem( MODEM_FSK );
 8009de0:	2000      	movs	r0, #0
 8009de2:	f7fe f9c9 	bl	8008178 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8009de6:	480e      	ldr	r0, [pc, #56]	; (8009e20 <RadioSetTxGenericConfig+0x2f0>)
 8009de8:	f000 fdec 	bl	800a9c4 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8009dec:	480d      	ldr	r0, [pc, #52]	; (8009e24 <RadioSetTxGenericConfig+0x2f4>)
 8009dee:	f000 febb 	bl	800ab68 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8009df2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009df6:	4618      	mov	r0, r3
 8009df8:	f000 f97f 	bl	800a0fa <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 8009dfc:	68bb      	ldr	r3, [r7, #8]
 8009dfe:	8a1b      	ldrh	r3, [r3, #16]
 8009e00:	4618      	mov	r0, r3
 8009e02:	f000 f9c9 	bl	800a198 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 8009e06:	68bb      	ldr	r3, [r7, #8]
 8009e08:	899b      	ldrh	r3, [r3, #12]
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	f000 f9a4 	bl	800a158 <SUBGRF_SetCrcPolynomial>
        break;
 8009e10:	e0a6      	b.n	8009f60 <RadioSetTxGenericConfig+0x430>
 8009e12:	bf00      	nop
 8009e14:	20000a34 	.word	0x20000a34
 8009e18:	20000a30 	.word	0x20000a30
 8009e1c:	20000a90 	.word	0x20000a90
 8009e20:	20000a6c 	.word	0x20000a6c
 8009e24:	20000a42 	.word	0x20000a42
    case GENERIC_LORA:
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8009e28:	4b59      	ldr	r3, [pc, #356]	; (8009f90 <RadioSetTxGenericConfig+0x460>)
 8009e2a:	2201      	movs	r2, #1
 8009e2c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 8009e30:	68bb      	ldr	r3, [r7, #8]
 8009e32:	781a      	ldrb	r2, [r3, #0]
 8009e34:	4b56      	ldr	r3, [pc, #344]	; (8009f90 <RadioSetTxGenericConfig+0x460>)
 8009e36:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 8009e3a:	68bb      	ldr	r3, [r7, #8]
 8009e3c:	785a      	ldrb	r2, [r3, #1]
 8009e3e:	4b54      	ldr	r3, [pc, #336]	; (8009f90 <RadioSetTxGenericConfig+0x460>)
 8009e40:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 8009e44:	68bb      	ldr	r3, [r7, #8]
 8009e46:	789a      	ldrb	r2, [r3, #2]
 8009e48:	4b51      	ldr	r3, [pc, #324]	; (8009f90 <RadioSetTxGenericConfig+0x460>)
 8009e4a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 8009e4e:	68bb      	ldr	r3, [r7, #8]
 8009e50:	78db      	ldrb	r3, [r3, #3]
 8009e52:	2b02      	cmp	r3, #2
 8009e54:	d010      	beq.n	8009e78 <RadioSetTxGenericConfig+0x348>
 8009e56:	2b02      	cmp	r3, #2
 8009e58:	dc20      	bgt.n	8009e9c <RadioSetTxGenericConfig+0x36c>
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d002      	beq.n	8009e64 <RadioSetTxGenericConfig+0x334>
 8009e5e:	2b01      	cmp	r3, #1
 8009e60:	d005      	beq.n	8009e6e <RadioSetTxGenericConfig+0x33e>
            {
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
            }
            break;
        default:
            break;
 8009e62:	e01b      	b.n	8009e9c <RadioSetTxGenericConfig+0x36c>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8009e64:	4b4a      	ldr	r3, [pc, #296]	; (8009f90 <RadioSetTxGenericConfig+0x460>)
 8009e66:	2200      	movs	r2, #0
 8009e68:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8009e6c:	e017      	b.n	8009e9e <RadioSetTxGenericConfig+0x36e>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8009e6e:	4b48      	ldr	r3, [pc, #288]	; (8009f90 <RadioSetTxGenericConfig+0x460>)
 8009e70:	2201      	movs	r2, #1
 8009e72:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8009e76:	e012      	b.n	8009e9e <RadioSetTxGenericConfig+0x36e>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 8009e78:	68bb      	ldr	r3, [r7, #8]
 8009e7a:	781b      	ldrb	r3, [r3, #0]
 8009e7c:	2b0b      	cmp	r3, #11
 8009e7e:	d003      	beq.n	8009e88 <RadioSetTxGenericConfig+0x358>
 8009e80:	68bb      	ldr	r3, [r7, #8]
 8009e82:	781b      	ldrb	r3, [r3, #0]
 8009e84:	2b0c      	cmp	r3, #12
 8009e86:	d104      	bne.n	8009e92 <RadioSetTxGenericConfig+0x362>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8009e88:	4b41      	ldr	r3, [pc, #260]	; (8009f90 <RadioSetTxGenericConfig+0x460>)
 8009e8a:	2201      	movs	r2, #1
 8009e8c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8009e90:	e005      	b.n	8009e9e <RadioSetTxGenericConfig+0x36e>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8009e92:	4b3f      	ldr	r3, [pc, #252]	; (8009f90 <RadioSetTxGenericConfig+0x460>)
 8009e94:	2200      	movs	r2, #0
 8009e96:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8009e9a:	e000      	b.n	8009e9e <RadioSetTxGenericConfig+0x36e>
            break;
 8009e9c:	bf00      	nop
        }

        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8009e9e:	4b3c      	ldr	r3, [pc, #240]	; (8009f90 <RadioSetTxGenericConfig+0x460>)
 8009ea0:	2201      	movs	r2, #1
 8009ea2:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 8009ea4:	68bb      	ldr	r3, [r7, #8]
 8009ea6:	889a      	ldrh	r2, [r3, #4]
 8009ea8:	4b39      	ldr	r3, [pc, #228]	; (8009f90 <RadioSetTxGenericConfig+0x460>)
 8009eaa:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 8009eac:	68bb      	ldr	r3, [r7, #8]
 8009eae:	799a      	ldrb	r2, [r3, #6]
 8009eb0:	4b37      	ldr	r3, [pc, #220]	; (8009f90 <RadioSetTxGenericConfig+0x460>)
 8009eb2:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 8009eb4:	68bb      	ldr	r3, [r7, #8]
 8009eb6:	79da      	ldrb	r2, [r3, #7]
 8009eb8:	4b35      	ldr	r3, [pc, #212]	; (8009f90 <RadioSetTxGenericConfig+0x460>)
 8009eba:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 8009ebe:	68bb      	ldr	r3, [r7, #8]
 8009ec0:	7a1a      	ldrb	r2, [r3, #8]
 8009ec2:	4b33      	ldr	r3, [pc, #204]	; (8009f90 <RadioSetTxGenericConfig+0x460>)
 8009ec4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        RadioStandby( );
 8009ec8:	f7fe ffb7 	bl	8008e3a <RadioStandby>
        RadioSetModem( MODEM_LORA );
 8009ecc:	2001      	movs	r0, #1
 8009ece:	f7fe f953 	bl	8008178 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8009ed2:	4830      	ldr	r0, [pc, #192]	; (8009f94 <RadioSetTxGenericConfig+0x464>)
 8009ed4:	f000 fd76 	bl	800a9c4 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8009ed8:	482f      	ldr	r0, [pc, #188]	; (8009f98 <RadioSetTxGenericConfig+0x468>)
 8009eda:	f000 fe45 	bl	800ab68 <SUBGRF_SetPacketParams>

        /* WORKAROUND - Modulation Quality with 500 kHz LoRa Bandwidth, see STM32WL Erratasheet */
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 8009ede:	4b2c      	ldr	r3, [pc, #176]	; (8009f90 <RadioSetTxGenericConfig+0x460>)
 8009ee0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009ee4:	2b06      	cmp	r3, #6
 8009ee6:	d10d      	bne.n	8009f04 <RadioSetTxGenericConfig+0x3d4>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 8009ee8:	f640 0089 	movw	r0, #2185	; 0x889
 8009eec:	f000 ff98 	bl	800ae20 <SUBGRF_ReadRegister>
 8009ef0:	4603      	mov	r3, r0
 8009ef2:	f023 0304 	bic.w	r3, r3, #4
 8009ef6:	b2db      	uxtb	r3, r3
 8009ef8:	4619      	mov	r1, r3
 8009efa:	f640 0089 	movw	r0, #2185	; 0x889
 8009efe:	f000 ff7b 	bl	800adf8 <SUBGRF_WriteRegister>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
        }
        /* WORKAROUND END */
        break;
 8009f02:	e02d      	b.n	8009f60 <RadioSetTxGenericConfig+0x430>
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 8009f04:	f640 0089 	movw	r0, #2185	; 0x889
 8009f08:	f000 ff8a 	bl	800ae20 <SUBGRF_ReadRegister>
 8009f0c:	4603      	mov	r3, r0
 8009f0e:	f043 0304 	orr.w	r3, r3, #4
 8009f12:	b2db      	uxtb	r3, r3
 8009f14:	4619      	mov	r1, r3
 8009f16:	f640 0089 	movw	r0, #2185	; 0x889
 8009f1a:	f000 ff6d 	bl	800adf8 <SUBGRF_WriteRegister>
        break;
 8009f1e:	e01f      	b.n	8009f60 <RadioSetTxGenericConfig+0x430>
    case GENERIC_BPSK:
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 8009f20:	68bb      	ldr	r3, [r7, #8]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d004      	beq.n	8009f32 <RadioSetTxGenericConfig+0x402>
 8009f28:	68bb      	ldr	r3, [r7, #8]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009f30:	d902      	bls.n	8009f38 <RadioSetTxGenericConfig+0x408>
        {
            return -1;
 8009f32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009f36:	e027      	b.n	8009f88 <RadioSetTxGenericConfig+0x458>
        }
        RadioSetModem( MODEM_BPSK );
 8009f38:	2003      	movs	r0, #3
 8009f3a:	f7fe f91d 	bl	8008178 <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 8009f3e:	4b14      	ldr	r3, [pc, #80]	; (8009f90 <RadioSetTxGenericConfig+0x460>)
 8009f40:	2202      	movs	r2, #2
 8009f42:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 8009f46:	68bb      	ldr	r3, [r7, #8]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	4a11      	ldr	r2, [pc, #68]	; (8009f90 <RadioSetTxGenericConfig+0x460>)
 8009f4c:	6493      	str	r3, [r2, #72]	; 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 8009f4e:	4b10      	ldr	r3, [pc, #64]	; (8009f90 <RadioSetTxGenericConfig+0x460>)
 8009f50:	2216      	movs	r2, #22
 8009f52:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8009f56:	480f      	ldr	r0, [pc, #60]	; (8009f94 <RadioSetTxGenericConfig+0x464>)
 8009f58:	f000 fd34 	bl	800a9c4 <SUBGRF_SetModulationParams>
        break;
 8009f5c:	e000      	b.n	8009f60 <RadioSetTxGenericConfig+0x430>
    default:
        break;
 8009f5e:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 8009f60:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009f64:	4618      	mov	r0, r3
 8009f66:	f001 f863 	bl	800b030 <SUBGRF_SetRfTxPower>
 8009f6a:	4603      	mov	r3, r0
 8009f6c:	461a      	mov	r2, r3
 8009f6e:	4b08      	ldr	r3, [pc, #32]	; (8009f90 <RadioSetTxGenericConfig+0x460>)
 8009f70:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 8009f74:	4b06      	ldr	r3, [pc, #24]	; (8009f90 <RadioSetTxGenericConfig+0x460>)
 8009f76:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8009f7a:	4618      	mov	r0, r3
 8009f7c:	f001 fa37 	bl	800b3ee <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 8009f80:	4a03      	ldr	r2, [pc, #12]	; (8009f90 <RadioSetTxGenericConfig+0x460>)
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	6053      	str	r3, [r2, #4]
    return 0;
 8009f86:	2300      	movs	r3, #0
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 8009f88:	4618      	mov	r0, r3
 8009f8a:	3738      	adds	r7, #56	; 0x38
 8009f8c:	46bd      	mov	sp, r7
 8009f8e:	bd80      	pop	{r7, pc}
 8009f90:	20000a34 	.word	0x20000a34
 8009f94:	20000a6c 	.word	0x20000a6c
 8009f98:	20000a42 	.word	0x20000a42

08009f9c <RadioLrFhssSetCfg>:
    return ( prbs31_val - 1 ) % ( max );
}
#endif /* RADIO_LR_FHSS_IS_ON == 1 */

static radio_status_t RadioLrFhssSetCfg( const radio_lr_fhss_cfg_params_t *cfg_params )
{
 8009f9c:	b480      	push	{r7}
 8009f9e:	b085      	sub	sp, #20
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	6078      	str	r0, [r7, #4]
    radio_status_t status = RADIO_STATUS_UNSUPPORTED_FEATURE;
 8009fa4:	2301      	movs	r3, #1
 8009fa6:	73fb      	strb	r3, [r7, #15]
    {
        return status;
    }
    SubgRf.lr_fhss.is_lr_fhss_on = true;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    return  status;
 8009fa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009faa:	4618      	mov	r0, r3
 8009fac:	3714      	adds	r7, #20
 8009fae:	46bd      	mov	sp, r7
 8009fb0:	bc80      	pop	{r7}
 8009fb2:	4770      	bx	lr

08009fb4 <RadioLrFhssGetTimeOnAirInMs>:

static radio_status_t RadioLrFhssGetTimeOnAirInMs( const radio_lr_fhss_time_on_air_params_t *params,
                                                    uint32_t *time_on_air_in_ms )
{
 8009fb4:	b480      	push	{r7}
 8009fb6:	b083      	sub	sp, #12
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	6078      	str	r0, [r7, #4]
 8009fbc:	6039      	str	r1, [r7, #0]
    *time_on_air_in_ms = lr_fhss_get_time_on_air_in_ms( &params->radio_lr_fhss_params.lr_fhss_params,
                                                        params->pld_len_in_bytes );

    return RADIO_STATUS_OK;
#else
    return RADIO_STATUS_UNSUPPORTED_FEATURE;
 8009fbe:	2301      	movs	r3, #1
#endif /* RADIO_LR_FHSS_IS_ON */
 8009fc0:	4618      	mov	r0, r3
 8009fc2:	370c      	adds	r7, #12
 8009fc4:	46bd      	mov	sp, r7
 8009fc6:	bc80      	pop	{r7}
 8009fc8:	4770      	bx	lr
	...

08009fcc <SUBGRF_Init>:
 */
static DioIrqHandler RadioOnDioIrqCb;

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 8009fcc:	b580      	push	{r7, lr}
 8009fce:	b084      	sub	sp, #16
 8009fd0:	af00      	add	r7, sp, #0
 8009fd2:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d002      	beq.n	8009fe0 <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 8009fda:	4a1d      	ldr	r2, [pc, #116]	; (800a050 <SUBGRF_Init+0x84>)
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 8009fe0:	f7f8 fd3a 	bl	8002a58 <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8009fe4:	2002      	movs	r0, #2
 8009fe6:	f001 f8ff 	bl	800b1e8 <Radio_SMPS_Set>

    ImageCalibrated = false;
 8009fea:	4b1a      	ldr	r3, [pc, #104]	; (800a054 <SUBGRF_Init+0x88>)
 8009fec:	2200      	movs	r2, #0
 8009fee:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 8009ff0:	2000      	movs	r0, #0
 8009ff2:	f000 f97d 	bl	800a2f0 <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 8009ff6:	f001 fb52 	bl	800b69e <RBI_IsTCXO>
 8009ffa:	4603      	mov	r3, r0
 8009ffc:	2b01      	cmp	r3, #1
 8009ffe:	d10e      	bne.n	800a01e <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 800a000:	2140      	movs	r1, #64	; 0x40
 800a002:	2001      	movs	r0, #1
 800a004:	f000 fb82 	bl	800a70c <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 800a008:	2100      	movs	r1, #0
 800a00a:	f640 1011 	movw	r0, #2321	; 0x911
 800a00e:	f000 fef3 	bl	800adf8 <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 800a012:	237f      	movs	r3, #127	; 0x7f
 800a014:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 800a016:	7b38      	ldrb	r0, [r7, #12]
 800a018:	f000 fa8b 	bl	800a532 <SUBGRF_Calibrate>
 800a01c:	e009      	b.n	800a032 <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 800a01e:	2120      	movs	r1, #32
 800a020:	f640 1011 	movw	r0, #2321	; 0x911
 800a024:	f000 fee8 	bl	800adf8 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 800a028:	2120      	movs	r1, #32
 800a02a:	f640 1012 	movw	r0, #2322	; 0x912
 800a02e:	f000 fee3 	bl	800adf8 <SUBGRF_WriteRegister>
    }

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 800a032:	210e      	movs	r1, #14
 800a034:	f640 101f 	movw	r0, #2335	; 0x91f
 800a038:	f000 fede 	bl	800adf8 <SUBGRF_WriteRegister>

    /* Init RF Switch */
    RBI_Init();
 800a03c:	f001 fa86 	bl	800b54c <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 800a040:	4b05      	ldr	r3, [pc, #20]	; (800a058 <SUBGRF_Init+0x8c>)
 800a042:	2201      	movs	r2, #1
 800a044:	701a      	strb	r2, [r3, #0]
}
 800a046:	bf00      	nop
 800a048:	3710      	adds	r7, #16
 800a04a:	46bd      	mov	sp, r7
 800a04c:	bd80      	pop	{r7, pc}
 800a04e:	bf00      	nop
 800a050:	20000acc 	.word	0x20000acc
 800a054:	20000ac8 	.word	0x20000ac8
 800a058:	20000ac0 	.word	0x20000ac0

0800a05c <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 800a05c:	b480      	push	{r7}
 800a05e:	af00      	add	r7, sp, #0
    return OperatingMode;
 800a060:	4b02      	ldr	r3, [pc, #8]	; (800a06c <SUBGRF_GetOperatingMode+0x10>)
 800a062:	781b      	ldrb	r3, [r3, #0]
}
 800a064:	4618      	mov	r0, r3
 800a066:	46bd      	mov	sp, r7
 800a068:	bc80      	pop	{r7}
 800a06a:	4770      	bx	lr
 800a06c:	20000ac0 	.word	0x20000ac0

0800a070 <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 800a070:	b580      	push	{r7, lr}
 800a072:	b082      	sub	sp, #8
 800a074:	af00      	add	r7, sp, #0
 800a076:	6078      	str	r0, [r7, #4]
 800a078:	460b      	mov	r3, r1
 800a07a:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 800a07c:	78fb      	ldrb	r3, [r7, #3]
 800a07e:	461a      	mov	r2, r3
 800a080:	6879      	ldr	r1, [r7, #4]
 800a082:	2000      	movs	r0, #0
 800a084:	f000 ff24 	bl	800aed0 <SUBGRF_WriteBuffer>
}
 800a088:	bf00      	nop
 800a08a:	3708      	adds	r7, #8
 800a08c:	46bd      	mov	sp, r7
 800a08e:	bd80      	pop	{r7, pc}

0800a090 <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 800a090:	b580      	push	{r7, lr}
 800a092:	b086      	sub	sp, #24
 800a094:	af00      	add	r7, sp, #0
 800a096:	60f8      	str	r0, [r7, #12]
 800a098:	60b9      	str	r1, [r7, #8]
 800a09a:	4613      	mov	r3, r2
 800a09c:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 800a09e:	2300      	movs	r3, #0
 800a0a0:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 800a0a2:	f107 0317 	add.w	r3, r7, #23
 800a0a6:	4619      	mov	r1, r3
 800a0a8:	68b8      	ldr	r0, [r7, #8]
 800a0aa:	f000 fe27 	bl	800acfc <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 800a0ae:	68bb      	ldr	r3, [r7, #8]
 800a0b0:	781b      	ldrb	r3, [r3, #0]
 800a0b2:	79fa      	ldrb	r2, [r7, #7]
 800a0b4:	429a      	cmp	r2, r3
 800a0b6:	d201      	bcs.n	800a0bc <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 800a0b8:	2301      	movs	r3, #1
 800a0ba:	e007      	b.n	800a0cc <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 800a0bc:	7df8      	ldrb	r0, [r7, #23]
 800a0be:	68bb      	ldr	r3, [r7, #8]
 800a0c0:	781b      	ldrb	r3, [r3, #0]
 800a0c2:	461a      	mov	r2, r3
 800a0c4:	68f9      	ldr	r1, [r7, #12]
 800a0c6:	f000 ff25 	bl	800af14 <SUBGRF_ReadBuffer>

    return 0;
 800a0ca:	2300      	movs	r3, #0
}
 800a0cc:	4618      	mov	r0, r3
 800a0ce:	3718      	adds	r7, #24
 800a0d0:	46bd      	mov	sp, r7
 800a0d2:	bd80      	pop	{r7, pc}

0800a0d4 <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 800a0d4:	b580      	push	{r7, lr}
 800a0d6:	b084      	sub	sp, #16
 800a0d8:	af00      	add	r7, sp, #0
 800a0da:	60f8      	str	r0, [r7, #12]
 800a0dc:	460b      	mov	r3, r1
 800a0de:	607a      	str	r2, [r7, #4]
 800a0e0:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 800a0e2:	7afb      	ldrb	r3, [r7, #11]
 800a0e4:	4619      	mov	r1, r3
 800a0e6:	68f8      	ldr	r0, [r7, #12]
 800a0e8:	f7ff ffc2 	bl	800a070 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 800a0ec:	6878      	ldr	r0, [r7, #4]
 800a0ee:	f000 f91b 	bl	800a328 <SUBGRF_SetTx>
}
 800a0f2:	bf00      	nop
 800a0f4:	3710      	adds	r7, #16
 800a0f6:	46bd      	mov	sp, r7
 800a0f8:	bd80      	pop	{r7, pc}

0800a0fa <SUBGRF_SetSyncWord>:

uint8_t SUBGRF_SetSyncWord( uint8_t *syncWord )
{
 800a0fa:	b580      	push	{r7, lr}
 800a0fc:	b082      	sub	sp, #8
 800a0fe:	af00      	add	r7, sp, #0
 800a100:	6078      	str	r0, [r7, #4]
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 800a102:	2208      	movs	r2, #8
 800a104:	6879      	ldr	r1, [r7, #4]
 800a106:	f44f 60d8 	mov.w	r0, #1728	; 0x6c0
 800a10a:	f000 fe9d 	bl	800ae48 <SUBGRF_WriteRegisters>
    return 0;
 800a10e:	2300      	movs	r3, #0
}
 800a110:	4618      	mov	r0, r3
 800a112:	3708      	adds	r7, #8
 800a114:	46bd      	mov	sp, r7
 800a116:	bd80      	pop	{r7, pc}

0800a118 <SUBGRF_SetCrcSeed>:

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 800a118:	b580      	push	{r7, lr}
 800a11a:	b084      	sub	sp, #16
 800a11c:	af00      	add	r7, sp, #0
 800a11e:	4603      	mov	r3, r0
 800a120:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 800a122:	88fb      	ldrh	r3, [r7, #6]
 800a124:	0a1b      	lsrs	r3, r3, #8
 800a126:	b29b      	uxth	r3, r3
 800a128:	b2db      	uxtb	r3, r3
 800a12a:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 800a12c:	88fb      	ldrh	r3, [r7, #6]
 800a12e:	b2db      	uxtb	r3, r3
 800a130:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 800a132:	f000 fb6f 	bl	800a814 <SUBGRF_GetPacketType>
 800a136:	4603      	mov	r3, r0
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d108      	bne.n	800a14e <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 800a13c:	f107 030c 	add.w	r3, r7, #12
 800a140:	2202      	movs	r2, #2
 800a142:	4619      	mov	r1, r3
 800a144:	f240 60bc 	movw	r0, #1724	; 0x6bc
 800a148:	f000 fe7e 	bl	800ae48 <SUBGRF_WriteRegisters>
            break;
 800a14c:	e000      	b.n	800a150 <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 800a14e:	bf00      	nop
    }
}
 800a150:	bf00      	nop
 800a152:	3710      	adds	r7, #16
 800a154:	46bd      	mov	sp, r7
 800a156:	bd80      	pop	{r7, pc}

0800a158 <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 800a158:	b580      	push	{r7, lr}
 800a15a:	b084      	sub	sp, #16
 800a15c:	af00      	add	r7, sp, #0
 800a15e:	4603      	mov	r3, r0
 800a160:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 800a162:	88fb      	ldrh	r3, [r7, #6]
 800a164:	0a1b      	lsrs	r3, r3, #8
 800a166:	b29b      	uxth	r3, r3
 800a168:	b2db      	uxtb	r3, r3
 800a16a:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 800a16c:	88fb      	ldrh	r3, [r7, #6]
 800a16e:	b2db      	uxtb	r3, r3
 800a170:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 800a172:	f000 fb4f 	bl	800a814 <SUBGRF_GetPacketType>
 800a176:	4603      	mov	r3, r0
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d108      	bne.n	800a18e <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 800a17c:	f107 030c 	add.w	r3, r7, #12
 800a180:	2202      	movs	r2, #2
 800a182:	4619      	mov	r1, r3
 800a184:	f240 60be 	movw	r0, #1726	; 0x6be
 800a188:	f000 fe5e 	bl	800ae48 <SUBGRF_WriteRegisters>
            break;
 800a18c:	e000      	b.n	800a190 <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 800a18e:	bf00      	nop
    }
}
 800a190:	bf00      	nop
 800a192:	3710      	adds	r7, #16
 800a194:	46bd      	mov	sp, r7
 800a196:	bd80      	pop	{r7, pc}

0800a198 <SUBGRF_SetWhiteningSeed>:

void SUBGRF_SetWhiteningSeed( uint16_t seed )
{
 800a198:	b580      	push	{r7, lr}
 800a19a:	b084      	sub	sp, #16
 800a19c:	af00      	add	r7, sp, #0
 800a19e:	4603      	mov	r3, r0
 800a1a0:	80fb      	strh	r3, [r7, #6]
    uint8_t regValue = 0;
 800a1a2:	2300      	movs	r3, #0
 800a1a4:	73fb      	strb	r3, [r7, #15]

    switch( SUBGRF_GetPacketType( ) )
 800a1a6:	f000 fb35 	bl	800a814 <SUBGRF_GetPacketType>
 800a1aa:	4603      	mov	r3, r0
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d121      	bne.n	800a1f4 <SUBGRF_SetWhiteningSeed+0x5c>
    {
        case PACKET_TYPE_GFSK:
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 800a1b0:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 800a1b4:	f000 fe34 	bl	800ae20 <SUBGRF_ReadRegister>
 800a1b8:	4603      	mov	r3, r0
 800a1ba:	f023 0301 	bic.w	r3, r3, #1
 800a1be:	73fb      	strb	r3, [r7, #15]
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 800a1c0:	88fb      	ldrh	r3, [r7, #6]
 800a1c2:	0a1b      	lsrs	r3, r3, #8
 800a1c4:	b29b      	uxth	r3, r3
 800a1c6:	b25b      	sxtb	r3, r3
 800a1c8:	f003 0301 	and.w	r3, r3, #1
 800a1cc:	b25a      	sxtb	r2, r3
 800a1ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a1d2:	4313      	orrs	r3, r2
 800a1d4:	b25b      	sxtb	r3, r3
 800a1d6:	73fb      	strb	r3, [r7, #15]
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 800a1d8:	7bfb      	ldrb	r3, [r7, #15]
 800a1da:	4619      	mov	r1, r3
 800a1dc:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 800a1e0:	f000 fe0a 	bl	800adf8 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 800a1e4:	88fb      	ldrh	r3, [r7, #6]
 800a1e6:	b2db      	uxtb	r3, r3
 800a1e8:	4619      	mov	r1, r3
 800a1ea:	f240 60b9 	movw	r0, #1721	; 0x6b9
 800a1ee:	f000 fe03 	bl	800adf8 <SUBGRF_WriteRegister>
            break;
 800a1f2:	e000      	b.n	800a1f6 <SUBGRF_SetWhiteningSeed+0x5e>

        default:
            break;
 800a1f4:	bf00      	nop
    }
}
 800a1f6:	bf00      	nop
 800a1f8:	3710      	adds	r7, #16
 800a1fa:	46bd      	mov	sp, r7
 800a1fc:	bd80      	pop	{r7, pc}

0800a1fe <SUBGRF_GetRandom>:

uint32_t SUBGRF_GetRandom( void )
{
 800a1fe:	b580      	push	{r7, lr}
 800a200:	b082      	sub	sp, #8
 800a202:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 800a204:	2300      	movs	r3, #0
 800a206:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 800a208:	2300      	movs	r3, #0
 800a20a:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 800a20c:	2300      	movs	r3, #0
 800a20e:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 800a210:	f640 00e2 	movw	r0, #2274	; 0x8e2
 800a214:	f000 fe04 	bl	800ae20 <SUBGRF_ReadRegister>
 800a218:	4603      	mov	r3, r0
 800a21a:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 800a21c:	79fb      	ldrb	r3, [r7, #7]
 800a21e:	f023 0301 	bic.w	r3, r3, #1
 800a222:	b2db      	uxtb	r3, r3
 800a224:	4619      	mov	r1, r3
 800a226:	f640 00e2 	movw	r0, #2274	; 0x8e2
 800a22a:	f000 fde5 	bl	800adf8 <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 800a22e:	f640 00e5 	movw	r0, #2277	; 0x8e5
 800a232:	f000 fdf5 	bl	800ae20 <SUBGRF_ReadRegister>
 800a236:	4603      	mov	r3, r0
 800a238:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 800a23a:	79bb      	ldrb	r3, [r7, #6]
 800a23c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a240:	b2db      	uxtb	r3, r3
 800a242:	4619      	mov	r1, r3
 800a244:	f640 00e5 	movw	r0, #2277	; 0x8e5
 800a248:	f000 fdd6 	bl	800adf8 <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 800a24c:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800a250:	f000 f88a 	bl	800a368 <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 800a254:	463b      	mov	r3, r7
 800a256:	2204      	movs	r2, #4
 800a258:	4619      	mov	r1, r3
 800a25a:	f640 0019 	movw	r0, #2073	; 0x819
 800a25e:	f000 fe15 	bl	800ae8c <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 800a262:	2000      	movs	r0, #0
 800a264:	f000 f844 	bl	800a2f0 <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 800a268:	79fb      	ldrb	r3, [r7, #7]
 800a26a:	4619      	mov	r1, r3
 800a26c:	f640 00e2 	movw	r0, #2274	; 0x8e2
 800a270:	f000 fdc2 	bl	800adf8 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 800a274:	79bb      	ldrb	r3, [r7, #6]
 800a276:	4619      	mov	r1, r3
 800a278:	f640 00e5 	movw	r0, #2277	; 0x8e5
 800a27c:	f000 fdbc 	bl	800adf8 <SUBGRF_WriteRegister>

    return number;
 800a280:	683b      	ldr	r3, [r7, #0]
}
 800a282:	4618      	mov	r0, r3
 800a284:	3708      	adds	r7, #8
 800a286:	46bd      	mov	sp, r7
 800a288:	bd80      	pop	{r7, pc}
	...

0800a28c <SUBGRF_SetSleep>:

void SUBGRF_SetSleep( SleepParams_t sleepConfig )
{
 800a28c:	b580      	push	{r7, lr}
 800a28e:	b084      	sub	sp, #16
 800a290:	af00      	add	r7, sp, #0
 800a292:	7138      	strb	r0, [r7, #4]
    /* switch the antenna OFF by SW */
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 800a294:	2000      	movs	r0, #0
 800a296:	f001 f999 	bl	800b5cc <RBI_ConfigRFSwitch>

    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 800a29a:	2002      	movs	r0, #2
 800a29c:	f000 ffa4 	bl	800b1e8 <Radio_SMPS_Set>

    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 800a2a0:	793b      	ldrb	r3, [r7, #4]
 800a2a2:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800a2a6:	b2db      	uxtb	r3, r3
 800a2a8:	009b      	lsls	r3, r3, #2
 800a2aa:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 800a2ac:	793b      	ldrb	r3, [r7, #4]
 800a2ae:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800a2b2:	b2db      	uxtb	r3, r3
 800a2b4:	005b      	lsls	r3, r3, #1
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 800a2b6:	b25b      	sxtb	r3, r3
 800a2b8:	4313      	orrs	r3, r2
 800a2ba:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 800a2bc:	793b      	ldrb	r3, [r7, #4]
 800a2be:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800a2c2:	b2db      	uxtb	r3, r3
 800a2c4:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 800a2c6:	4313      	orrs	r3, r2
 800a2c8:	b25b      	sxtb	r3, r3
 800a2ca:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 800a2cc:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 800a2ce:	f107 030f 	add.w	r3, r7, #15
 800a2d2:	2201      	movs	r2, #1
 800a2d4:	4619      	mov	r1, r3
 800a2d6:	2084      	movs	r0, #132	; 0x84
 800a2d8:	f000 fe3e 	bl	800af58 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 800a2dc:	4b03      	ldr	r3, [pc, #12]	; (800a2ec <SUBGRF_SetSleep+0x60>)
 800a2de:	2200      	movs	r2, #0
 800a2e0:	701a      	strb	r2, [r3, #0]
}
 800a2e2:	bf00      	nop
 800a2e4:	3710      	adds	r7, #16
 800a2e6:	46bd      	mov	sp, r7
 800a2e8:	bd80      	pop	{r7, pc}
 800a2ea:	bf00      	nop
 800a2ec:	20000ac0 	.word	0x20000ac0

0800a2f0 <SUBGRF_SetStandby>:

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 800a2f0:	b580      	push	{r7, lr}
 800a2f2:	b082      	sub	sp, #8
 800a2f4:	af00      	add	r7, sp, #0
 800a2f6:	4603      	mov	r3, r0
 800a2f8:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 800a2fa:	1dfb      	adds	r3, r7, #7
 800a2fc:	2201      	movs	r2, #1
 800a2fe:	4619      	mov	r1, r3
 800a300:	2080      	movs	r0, #128	; 0x80
 800a302:	f000 fe29 	bl	800af58 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 800a306:	79fb      	ldrb	r3, [r7, #7]
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d103      	bne.n	800a314 <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 800a30c:	4b05      	ldr	r3, [pc, #20]	; (800a324 <SUBGRF_SetStandby+0x34>)
 800a30e:	2201      	movs	r2, #1
 800a310:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 800a312:	e002      	b.n	800a31a <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 800a314:	4b03      	ldr	r3, [pc, #12]	; (800a324 <SUBGRF_SetStandby+0x34>)
 800a316:	2202      	movs	r2, #2
 800a318:	701a      	strb	r2, [r3, #0]
}
 800a31a:	bf00      	nop
 800a31c:	3708      	adds	r7, #8
 800a31e:	46bd      	mov	sp, r7
 800a320:	bd80      	pop	{r7, pc}
 800a322:	bf00      	nop
 800a324:	20000ac0 	.word	0x20000ac0

0800a328 <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 800a328:	b580      	push	{r7, lr}
 800a32a:	b084      	sub	sp, #16
 800a32c:	af00      	add	r7, sp, #0
 800a32e:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 800a330:	4b0c      	ldr	r3, [pc, #48]	; (800a364 <SUBGRF_SetTx+0x3c>)
 800a332:	2204      	movs	r2, #4
 800a334:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	0c1b      	lsrs	r3, r3, #16
 800a33a:	b2db      	uxtb	r3, r3
 800a33c:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	0a1b      	lsrs	r3, r3, #8
 800a342:	b2db      	uxtb	r3, r3
 800a344:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	b2db      	uxtb	r3, r3
 800a34a:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 800a34c:	f107 030c 	add.w	r3, r7, #12
 800a350:	2203      	movs	r2, #3
 800a352:	4619      	mov	r1, r3
 800a354:	2083      	movs	r0, #131	; 0x83
 800a356:	f000 fdff 	bl	800af58 <SUBGRF_WriteCommand>
}
 800a35a:	bf00      	nop
 800a35c:	3710      	adds	r7, #16
 800a35e:	46bd      	mov	sp, r7
 800a360:	bd80      	pop	{r7, pc}
 800a362:	bf00      	nop
 800a364:	20000ac0 	.word	0x20000ac0

0800a368 <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 800a368:	b580      	push	{r7, lr}
 800a36a:	b084      	sub	sp, #16
 800a36c:	af00      	add	r7, sp, #0
 800a36e:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 800a370:	4b0c      	ldr	r3, [pc, #48]	; (800a3a4 <SUBGRF_SetRx+0x3c>)
 800a372:	2205      	movs	r2, #5
 800a374:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	0c1b      	lsrs	r3, r3, #16
 800a37a:	b2db      	uxtb	r3, r3
 800a37c:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	0a1b      	lsrs	r3, r3, #8
 800a382:	b2db      	uxtb	r3, r3
 800a384:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	b2db      	uxtb	r3, r3
 800a38a:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 800a38c:	f107 030c 	add.w	r3, r7, #12
 800a390:	2203      	movs	r2, #3
 800a392:	4619      	mov	r1, r3
 800a394:	2082      	movs	r0, #130	; 0x82
 800a396:	f000 fddf 	bl	800af58 <SUBGRF_WriteCommand>
}
 800a39a:	bf00      	nop
 800a39c:	3710      	adds	r7, #16
 800a39e:	46bd      	mov	sp, r7
 800a3a0:	bd80      	pop	{r7, pc}
 800a3a2:	bf00      	nop
 800a3a4:	20000ac0 	.word	0x20000ac0

0800a3a8 <SUBGRF_SetRxBoosted>:

void SUBGRF_SetRxBoosted( uint32_t timeout )
{
 800a3a8:	b580      	push	{r7, lr}
 800a3aa:	b084      	sub	sp, #16
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 800a3b0:	4b0e      	ldr	r3, [pc, #56]	; (800a3ec <SUBGRF_SetRxBoosted+0x44>)
 800a3b2:	2205      	movs	r2, #5
 800a3b4:	701a      	strb	r2, [r3, #0]

    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 800a3b6:	2197      	movs	r1, #151	; 0x97
 800a3b8:	f640 00ac 	movw	r0, #2220	; 0x8ac
 800a3bc:	f000 fd1c 	bl	800adf8 <SUBGRF_WriteRegister>

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	0c1b      	lsrs	r3, r3, #16
 800a3c4:	b2db      	uxtb	r3, r3
 800a3c6:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	0a1b      	lsrs	r3, r3, #8
 800a3cc:	b2db      	uxtb	r3, r3
 800a3ce:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	b2db      	uxtb	r3, r3
 800a3d4:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 800a3d6:	f107 030c 	add.w	r3, r7, #12
 800a3da:	2203      	movs	r2, #3
 800a3dc:	4619      	mov	r1, r3
 800a3de:	2082      	movs	r0, #130	; 0x82
 800a3e0:	f000 fdba 	bl	800af58 <SUBGRF_WriteCommand>
}
 800a3e4:	bf00      	nop
 800a3e6:	3710      	adds	r7, #16
 800a3e8:	46bd      	mov	sp, r7
 800a3ea:	bd80      	pop	{r7, pc}
 800a3ec:	20000ac0 	.word	0x20000ac0

0800a3f0 <SUBGRF_SetRxDutyCycle>:

void SUBGRF_SetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 800a3f0:	b580      	push	{r7, lr}
 800a3f2:	b084      	sub	sp, #16
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	6078      	str	r0, [r7, #4]
 800a3f8:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];

    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	0c1b      	lsrs	r3, r3, #16
 800a3fe:	b2db      	uxtb	r3, r3
 800a400:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	0a1b      	lsrs	r3, r3, #8
 800a406:	b2db      	uxtb	r3, r3
 800a408:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	b2db      	uxtb	r3, r3
 800a40e:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 800a410:	683b      	ldr	r3, [r7, #0]
 800a412:	0c1b      	lsrs	r3, r3, #16
 800a414:	b2db      	uxtb	r3, r3
 800a416:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 800a418:	683b      	ldr	r3, [r7, #0]
 800a41a:	0a1b      	lsrs	r3, r3, #8
 800a41c:	b2db      	uxtb	r3, r3
 800a41e:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 800a420:	683b      	ldr	r3, [r7, #0]
 800a422:	b2db      	uxtb	r3, r3
 800a424:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 800a426:	f107 0308 	add.w	r3, r7, #8
 800a42a:	2206      	movs	r2, #6
 800a42c:	4619      	mov	r1, r3
 800a42e:	2094      	movs	r0, #148	; 0x94
 800a430:	f000 fd92 	bl	800af58 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 800a434:	4b03      	ldr	r3, [pc, #12]	; (800a444 <SUBGRF_SetRxDutyCycle+0x54>)
 800a436:	2206      	movs	r2, #6
 800a438:	701a      	strb	r2, [r3, #0]
}
 800a43a:	bf00      	nop
 800a43c:	3710      	adds	r7, #16
 800a43e:	46bd      	mov	sp, r7
 800a440:	bd80      	pop	{r7, pc}
 800a442:	bf00      	nop
 800a444:	20000ac0 	.word	0x20000ac0

0800a448 <SUBGRF_SetCad>:

void SUBGRF_SetCad( void )
{
 800a448:	b580      	push	{r7, lr}
 800a44a:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 800a44c:	2200      	movs	r2, #0
 800a44e:	2100      	movs	r1, #0
 800a450:	20c5      	movs	r0, #197	; 0xc5
 800a452:	f000 fd81 	bl	800af58 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 800a456:	4b02      	ldr	r3, [pc, #8]	; (800a460 <SUBGRF_SetCad+0x18>)
 800a458:	2207      	movs	r2, #7
 800a45a:	701a      	strb	r2, [r3, #0]
}
 800a45c:	bf00      	nop
 800a45e:	bd80      	pop	{r7, pc}
 800a460:	20000ac0 	.word	0x20000ac0

0800a464 <SUBGRF_SetTxContinuousWave>:

void SUBGRF_SetTxContinuousWave( void )
{
 800a464:	b580      	push	{r7, lr}
 800a466:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 800a468:	2200      	movs	r2, #0
 800a46a:	2100      	movs	r1, #0
 800a46c:	20d1      	movs	r0, #209	; 0xd1
 800a46e:	f000 fd73 	bl	800af58 <SUBGRF_WriteCommand>
}
 800a472:	bf00      	nop
 800a474:	bd80      	pop	{r7, pc}

0800a476 <SUBGRF_SetTxInfinitePreamble>:

void SUBGRF_SetTxInfinitePreamble( void )
{
 800a476:	b580      	push	{r7, lr}
 800a478:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 800a47a:	2200      	movs	r2, #0
 800a47c:	2100      	movs	r1, #0
 800a47e:	20d2      	movs	r0, #210	; 0xd2
 800a480:	f000 fd6a 	bl	800af58 <SUBGRF_WriteCommand>
}
 800a484:	bf00      	nop
 800a486:	bd80      	pop	{r7, pc}

0800a488 <SUBGRF_SetStopRxTimerOnPreambleDetect>:

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 800a488:	b580      	push	{r7, lr}
 800a48a:	b082      	sub	sp, #8
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	4603      	mov	r3, r0
 800a490:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 800a492:	1dfb      	adds	r3, r7, #7
 800a494:	2201      	movs	r2, #1
 800a496:	4619      	mov	r1, r3
 800a498:	209f      	movs	r0, #159	; 0x9f
 800a49a:	f000 fd5d 	bl	800af58 <SUBGRF_WriteCommand>
}
 800a49e:	bf00      	nop
 800a4a0:	3708      	adds	r7, #8
 800a4a2:	46bd      	mov	sp, r7
 800a4a4:	bd80      	pop	{r7, pc}

0800a4a6 <SUBGRF_SetLoRaSymbNumTimeout>:

void SUBGRF_SetLoRaSymbNumTimeout( uint8_t symbNum )
{
 800a4a6:	b580      	push	{r7, lr}
 800a4a8:	b084      	sub	sp, #16
 800a4aa:	af00      	add	r7, sp, #0
 800a4ac:	4603      	mov	r3, r0
 800a4ae:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 800a4b0:	1dfb      	adds	r3, r7, #7
 800a4b2:	2201      	movs	r2, #1
 800a4b4:	4619      	mov	r1, r3
 800a4b6:	20a0      	movs	r0, #160	; 0xa0
 800a4b8:	f000 fd4e 	bl	800af58 <SUBGRF_WriteCommand>

    if( symbNum >= 64 )
 800a4bc:	79fb      	ldrb	r3, [r7, #7]
 800a4be:	2b3f      	cmp	r3, #63	; 0x3f
 800a4c0:	d91c      	bls.n	800a4fc <SUBGRF_SetLoRaSymbNumTimeout+0x56>
    {
        uint8_t mant = symbNum >> 1;
 800a4c2:	79fb      	ldrb	r3, [r7, #7]
 800a4c4:	085b      	lsrs	r3, r3, #1
 800a4c6:	73fb      	strb	r3, [r7, #15]
        uint8_t exp  = 0;
 800a4c8:	2300      	movs	r3, #0
 800a4ca:	73bb      	strb	r3, [r7, #14]
        uint8_t reg  = 0;
 800a4cc:	2300      	movs	r3, #0
 800a4ce:	737b      	strb	r3, [r7, #13]

        while( mant > 31 )
 800a4d0:	e005      	b.n	800a4de <SUBGRF_SetLoRaSymbNumTimeout+0x38>
        {
            mant >>= 2;
 800a4d2:	7bfb      	ldrb	r3, [r7, #15]
 800a4d4:	089b      	lsrs	r3, r3, #2
 800a4d6:	73fb      	strb	r3, [r7, #15]
            exp++;
 800a4d8:	7bbb      	ldrb	r3, [r7, #14]
 800a4da:	3301      	adds	r3, #1
 800a4dc:	73bb      	strb	r3, [r7, #14]
        while( mant > 31 )
 800a4de:	7bfb      	ldrb	r3, [r7, #15]
 800a4e0:	2b1f      	cmp	r3, #31
 800a4e2:	d8f6      	bhi.n	800a4d2 <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
        }

        reg = exp + ( mant << 3 );
 800a4e4:	7bfb      	ldrb	r3, [r7, #15]
 800a4e6:	00db      	lsls	r3, r3, #3
 800a4e8:	b2da      	uxtb	r2, r3
 800a4ea:	7bbb      	ldrb	r3, [r7, #14]
 800a4ec:	4413      	add	r3, r2
 800a4ee:	737b      	strb	r3, [r7, #13]
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 800a4f0:	7b7b      	ldrb	r3, [r7, #13]
 800a4f2:	4619      	mov	r1, r3
 800a4f4:	f240 7006 	movw	r0, #1798	; 0x706
 800a4f8:	f000 fc7e 	bl	800adf8 <SUBGRF_WriteRegister>
    }
}
 800a4fc:	bf00      	nop
 800a4fe:	3710      	adds	r7, #16
 800a500:	46bd      	mov	sp, r7
 800a502:	bd80      	pop	{r7, pc}

0800a504 <SUBGRF_SetRegulatorMode>:

void SUBGRF_SetRegulatorMode( void )
{
 800a504:	b580      	push	{r7, lr}
 800a506:	b082      	sub	sp, #8
 800a508:	af00      	add	r7, sp, #0
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 800a50a:	f001 f8d3 	bl	800b6b4 <RBI_IsDCDC>
 800a50e:	4603      	mov	r3, r0
 800a510:	2b01      	cmp	r3, #1
 800a512:	d102      	bne.n	800a51a <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 800a514:	2301      	movs	r3, #1
 800a516:	71fb      	strb	r3, [r7, #7]
 800a518:	e001      	b.n	800a51e <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 800a51a:	2300      	movs	r3, #0
 800a51c:	71fb      	strb	r3, [r7, #7]
    }
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 800a51e:	1dfb      	adds	r3, r7, #7
 800a520:	2201      	movs	r2, #1
 800a522:	4619      	mov	r1, r3
 800a524:	2096      	movs	r0, #150	; 0x96
 800a526:	f000 fd17 	bl	800af58 <SUBGRF_WriteCommand>
}
 800a52a:	bf00      	nop
 800a52c:	3708      	adds	r7, #8
 800a52e:	46bd      	mov	sp, r7
 800a530:	bd80      	pop	{r7, pc}

0800a532 <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 800a532:	b580      	push	{r7, lr}
 800a534:	b084      	sub	sp, #16
 800a536:	af00      	add	r7, sp, #0
 800a538:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800a53a:	793b      	ldrb	r3, [r7, #4]
 800a53c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800a540:	b2db      	uxtb	r3, r3
 800a542:	019b      	lsls	r3, r3, #6
 800a544:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 800a546:	793b      	ldrb	r3, [r7, #4]
 800a548:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800a54c:	b2db      	uxtb	r3, r3
 800a54e:	015b      	lsls	r3, r3, #5
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800a550:	b25b      	sxtb	r3, r3
 800a552:	4313      	orrs	r3, r2
 800a554:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 800a556:	793b      	ldrb	r3, [r7, #4]
 800a558:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800a55c:	b2db      	uxtb	r3, r3
 800a55e:	011b      	lsls	r3, r3, #4
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 800a560:	b25b      	sxtb	r3, r3
 800a562:	4313      	orrs	r3, r2
 800a564:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 800a566:	793b      	ldrb	r3, [r7, #4]
 800a568:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800a56c:	b2db      	uxtb	r3, r3
 800a56e:	00db      	lsls	r3, r3, #3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 800a570:	b25b      	sxtb	r3, r3
 800a572:	4313      	orrs	r3, r2
 800a574:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 800a576:	793b      	ldrb	r3, [r7, #4]
 800a578:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800a57c:	b2db      	uxtb	r3, r3
 800a57e:	009b      	lsls	r3, r3, #2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 800a580:	b25b      	sxtb	r3, r3
 800a582:	4313      	orrs	r3, r2
 800a584:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 800a586:	793b      	ldrb	r3, [r7, #4]
 800a588:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800a58c:	b2db      	uxtb	r3, r3
 800a58e:	005b      	lsls	r3, r3, #1
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 800a590:	b25b      	sxtb	r3, r3
 800a592:	4313      	orrs	r3, r2
 800a594:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 800a596:	793b      	ldrb	r3, [r7, #4]
 800a598:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800a59c:	b2db      	uxtb	r3, r3
 800a59e:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 800a5a0:	4313      	orrs	r3, r2
 800a5a2:	b25b      	sxtb	r3, r3
 800a5a4:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800a5a6:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 800a5a8:	f107 030f 	add.w	r3, r7, #15
 800a5ac:	2201      	movs	r2, #1
 800a5ae:	4619      	mov	r1, r3
 800a5b0:	2089      	movs	r0, #137	; 0x89
 800a5b2:	f000 fcd1 	bl	800af58 <SUBGRF_WriteCommand>
}
 800a5b6:	bf00      	nop
 800a5b8:	3710      	adds	r7, #16
 800a5ba:	46bd      	mov	sp, r7
 800a5bc:	bd80      	pop	{r7, pc}
	...

0800a5c0 <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 800a5c0:	b580      	push	{r7, lr}
 800a5c2:	b084      	sub	sp, #16
 800a5c4:	af00      	add	r7, sp, #0
 800a5c6:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	4a1d      	ldr	r2, [pc, #116]	; (800a640 <SUBGRF_CalibrateImage+0x80>)
 800a5cc:	4293      	cmp	r3, r2
 800a5ce:	d904      	bls.n	800a5da <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 800a5d0:	23e1      	movs	r3, #225	; 0xe1
 800a5d2:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 800a5d4:	23e9      	movs	r3, #233	; 0xe9
 800a5d6:	737b      	strb	r3, [r7, #13]
 800a5d8:	e027      	b.n	800a62a <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 850000000 )
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	4a19      	ldr	r2, [pc, #100]	; (800a644 <SUBGRF_CalibrateImage+0x84>)
 800a5de:	4293      	cmp	r3, r2
 800a5e0:	d904      	bls.n	800a5ec <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 800a5e2:	23d7      	movs	r3, #215	; 0xd7
 800a5e4:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 800a5e6:	23db      	movs	r3, #219	; 0xdb
 800a5e8:	737b      	strb	r3, [r7, #13]
 800a5ea:	e01e      	b.n	800a62a <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 770000000 )
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	4a16      	ldr	r2, [pc, #88]	; (800a648 <SUBGRF_CalibrateImage+0x88>)
 800a5f0:	4293      	cmp	r3, r2
 800a5f2:	d904      	bls.n	800a5fe <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 800a5f4:	23c1      	movs	r3, #193	; 0xc1
 800a5f6:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 800a5f8:	23c5      	movs	r3, #197	; 0xc5
 800a5fa:	737b      	strb	r3, [r7, #13]
 800a5fc:	e015      	b.n	800a62a <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 460000000 )
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	4a12      	ldr	r2, [pc, #72]	; (800a64c <SUBGRF_CalibrateImage+0x8c>)
 800a602:	4293      	cmp	r3, r2
 800a604:	d904      	bls.n	800a610 <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 800a606:	2375      	movs	r3, #117	; 0x75
 800a608:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 800a60a:	2381      	movs	r3, #129	; 0x81
 800a60c:	737b      	strb	r3, [r7, #13]
 800a60e:	e00c      	b.n	800a62a <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 425000000 )
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	4a0f      	ldr	r2, [pc, #60]	; (800a650 <SUBGRF_CalibrateImage+0x90>)
 800a614:	4293      	cmp	r3, r2
 800a616:	d904      	bls.n	800a622 <SUBGRF_CalibrateImage+0x62>
    {
        calFreq[0] = 0x6B;
 800a618:	236b      	movs	r3, #107	; 0x6b
 800a61a:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 800a61c:	236f      	movs	r3, #111	; 0x6f
 800a61e:	737b      	strb	r3, [r7, #13]
 800a620:	e003      	b.n	800a62a <SUBGRF_CalibrateImage+0x6a>
    }
    else /* freq <= 425000000*/
    {
        /* [ 156MHz - 171MHz ] */
        calFreq[0] = 0x29;
 800a622:	2329      	movs	r3, #41	; 0x29
 800a624:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x2B ;
 800a626:	232b      	movs	r3, #43	; 0x2b
 800a628:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 800a62a:	f107 030c 	add.w	r3, r7, #12
 800a62e:	2202      	movs	r2, #2
 800a630:	4619      	mov	r1, r3
 800a632:	2098      	movs	r0, #152	; 0x98
 800a634:	f000 fc90 	bl	800af58 <SUBGRF_WriteCommand>
}
 800a638:	bf00      	nop
 800a63a:	3710      	adds	r7, #16
 800a63c:	46bd      	mov	sp, r7
 800a63e:	bd80      	pop	{r7, pc}
 800a640:	35a4e900 	.word	0x35a4e900
 800a644:	32a9f880 	.word	0x32a9f880
 800a648:	2de54480 	.word	0x2de54480
 800a64c:	1b6b0b00 	.word	0x1b6b0b00
 800a650:	1954fc40 	.word	0x1954fc40

0800a654 <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 800a654:	b590      	push	{r4, r7, lr}
 800a656:	b085      	sub	sp, #20
 800a658:	af00      	add	r7, sp, #0
 800a65a:	4604      	mov	r4, r0
 800a65c:	4608      	mov	r0, r1
 800a65e:	4611      	mov	r1, r2
 800a660:	461a      	mov	r2, r3
 800a662:	4623      	mov	r3, r4
 800a664:	71fb      	strb	r3, [r7, #7]
 800a666:	4603      	mov	r3, r0
 800a668:	71bb      	strb	r3, [r7, #6]
 800a66a:	460b      	mov	r3, r1
 800a66c:	717b      	strb	r3, [r7, #5]
 800a66e:	4613      	mov	r3, r2
 800a670:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 800a672:	79fb      	ldrb	r3, [r7, #7]
 800a674:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 800a676:	79bb      	ldrb	r3, [r7, #6]
 800a678:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 800a67a:	797b      	ldrb	r3, [r7, #5]
 800a67c:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 800a67e:	793b      	ldrb	r3, [r7, #4]
 800a680:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 800a682:	f107 030c 	add.w	r3, r7, #12
 800a686:	2204      	movs	r2, #4
 800a688:	4619      	mov	r1, r3
 800a68a:	2095      	movs	r0, #149	; 0x95
 800a68c:	f000 fc64 	bl	800af58 <SUBGRF_WriteCommand>
}
 800a690:	bf00      	nop
 800a692:	3714      	adds	r7, #20
 800a694:	46bd      	mov	sp, r7
 800a696:	bd90      	pop	{r4, r7, pc}

0800a698 <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 800a698:	b590      	push	{r4, r7, lr}
 800a69a:	b085      	sub	sp, #20
 800a69c:	af00      	add	r7, sp, #0
 800a69e:	4604      	mov	r4, r0
 800a6a0:	4608      	mov	r0, r1
 800a6a2:	4611      	mov	r1, r2
 800a6a4:	461a      	mov	r2, r3
 800a6a6:	4623      	mov	r3, r4
 800a6a8:	80fb      	strh	r3, [r7, #6]
 800a6aa:	4603      	mov	r3, r0
 800a6ac:	80bb      	strh	r3, [r7, #4]
 800a6ae:	460b      	mov	r3, r1
 800a6b0:	807b      	strh	r3, [r7, #2]
 800a6b2:	4613      	mov	r3, r2
 800a6b4:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 800a6b6:	88fb      	ldrh	r3, [r7, #6]
 800a6b8:	0a1b      	lsrs	r3, r3, #8
 800a6ba:	b29b      	uxth	r3, r3
 800a6bc:	b2db      	uxtb	r3, r3
 800a6be:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 800a6c0:	88fb      	ldrh	r3, [r7, #6]
 800a6c2:	b2db      	uxtb	r3, r3
 800a6c4:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 800a6c6:	88bb      	ldrh	r3, [r7, #4]
 800a6c8:	0a1b      	lsrs	r3, r3, #8
 800a6ca:	b29b      	uxth	r3, r3
 800a6cc:	b2db      	uxtb	r3, r3
 800a6ce:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 800a6d0:	88bb      	ldrh	r3, [r7, #4]
 800a6d2:	b2db      	uxtb	r3, r3
 800a6d4:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 800a6d6:	887b      	ldrh	r3, [r7, #2]
 800a6d8:	0a1b      	lsrs	r3, r3, #8
 800a6da:	b29b      	uxth	r3, r3
 800a6dc:	b2db      	uxtb	r3, r3
 800a6de:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 800a6e0:	887b      	ldrh	r3, [r7, #2]
 800a6e2:	b2db      	uxtb	r3, r3
 800a6e4:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 800a6e6:	883b      	ldrh	r3, [r7, #0]
 800a6e8:	0a1b      	lsrs	r3, r3, #8
 800a6ea:	b29b      	uxth	r3, r3
 800a6ec:	b2db      	uxtb	r3, r3
 800a6ee:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 800a6f0:	883b      	ldrh	r3, [r7, #0]
 800a6f2:	b2db      	uxtb	r3, r3
 800a6f4:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 800a6f6:	f107 0308 	add.w	r3, r7, #8
 800a6fa:	2208      	movs	r2, #8
 800a6fc:	4619      	mov	r1, r3
 800a6fe:	2008      	movs	r0, #8
 800a700:	f000 fc2a 	bl	800af58 <SUBGRF_WriteCommand>
}
 800a704:	bf00      	nop
 800a706:	3714      	adds	r7, #20
 800a708:	46bd      	mov	sp, r7
 800a70a:	bd90      	pop	{r4, r7, pc}

0800a70c <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 800a70c:	b580      	push	{r7, lr}
 800a70e:	b084      	sub	sp, #16
 800a710:	af00      	add	r7, sp, #0
 800a712:	4603      	mov	r3, r0
 800a714:	6039      	str	r1, [r7, #0]
 800a716:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 800a718:	79fb      	ldrb	r3, [r7, #7]
 800a71a:	f003 0307 	and.w	r3, r3, #7
 800a71e:	b2db      	uxtb	r3, r3
 800a720:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800a722:	683b      	ldr	r3, [r7, #0]
 800a724:	0c1b      	lsrs	r3, r3, #16
 800a726:	b2db      	uxtb	r3, r3
 800a728:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800a72a:	683b      	ldr	r3, [r7, #0]
 800a72c:	0a1b      	lsrs	r3, r3, #8
 800a72e:	b2db      	uxtb	r3, r3
 800a730:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 800a732:	683b      	ldr	r3, [r7, #0]
 800a734:	b2db      	uxtb	r3, r3
 800a736:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 800a738:	f107 030c 	add.w	r3, r7, #12
 800a73c:	2204      	movs	r2, #4
 800a73e:	4619      	mov	r1, r3
 800a740:	2097      	movs	r0, #151	; 0x97
 800a742:	f000 fc09 	bl	800af58 <SUBGRF_WriteCommand>
}
 800a746:	bf00      	nop
 800a748:	3710      	adds	r7, #16
 800a74a:	46bd      	mov	sp, r7
 800a74c:	bd80      	pop	{r7, pc}
	...

0800a750 <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 800a750:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800a754:	b084      	sub	sp, #16
 800a756:	af00      	add	r7, sp, #0
 800a758:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 800a75a:	2300      	movs	r3, #0
 800a75c:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 800a75e:	4b1d      	ldr	r3, [pc, #116]	; (800a7d4 <SUBGRF_SetRfFrequency+0x84>)
 800a760:	781b      	ldrb	r3, [r3, #0]
 800a762:	f083 0301 	eor.w	r3, r3, #1
 800a766:	b2db      	uxtb	r3, r3
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d005      	beq.n	800a778 <SUBGRF_SetRfFrequency+0x28>
    {
        SUBGRF_CalibrateImage( frequency );
 800a76c:	6878      	ldr	r0, [r7, #4]
 800a76e:	f7ff ff27 	bl	800a5c0 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 800a772:	4b18      	ldr	r3, [pc, #96]	; (800a7d4 <SUBGRF_SetRfFrequency+0x84>)
 800a774:	2201      	movs	r2, #1
 800a776:	701a      	strb	r2, [r3, #0]
    }
    SX_FREQ_TO_CHANNEL(chan, frequency);
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	2200      	movs	r2, #0
 800a77c:	461c      	mov	r4, r3
 800a77e:	4615      	mov	r5, r2
 800a780:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 800a784:	ea4f 6844 	mov.w	r8, r4, lsl #25
 800a788:	4a13      	ldr	r2, [pc, #76]	; (800a7d8 <SUBGRF_SetRfFrequency+0x88>)
 800a78a:	f04f 0300 	mov.w	r3, #0
 800a78e:	4640      	mov	r0, r8
 800a790:	4649      	mov	r1, r9
 800a792:	f7f5 fd45 	bl	8000220 <__aeabi_uldivmod>
 800a796:	4602      	mov	r2, r0
 800a798:	460b      	mov	r3, r1
 800a79a:	4613      	mov	r3, r2
 800a79c:	60fb      	str	r3, [r7, #12]
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	0e1b      	lsrs	r3, r3, #24
 800a7a2:	b2db      	uxtb	r3, r3
 800a7a4:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	0c1b      	lsrs	r3, r3, #16
 800a7aa:	b2db      	uxtb	r3, r3
 800a7ac:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	0a1b      	lsrs	r3, r3, #8
 800a7b2:	b2db      	uxtb	r3, r3
 800a7b4:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	b2db      	uxtb	r3, r3
 800a7ba:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 800a7bc:	f107 0308 	add.w	r3, r7, #8
 800a7c0:	2204      	movs	r2, #4
 800a7c2:	4619      	mov	r1, r3
 800a7c4:	2086      	movs	r0, #134	; 0x86
 800a7c6:	f000 fbc7 	bl	800af58 <SUBGRF_WriteCommand>
}
 800a7ca:	bf00      	nop
 800a7cc:	3710      	adds	r7, #16
 800a7ce:	46bd      	mov	sp, r7
 800a7d0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800a7d4:	20000ac8 	.word	0x20000ac8
 800a7d8:	01e84800 	.word	0x01e84800

0800a7dc <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 800a7dc:	b580      	push	{r7, lr}
 800a7de:	b082      	sub	sp, #8
 800a7e0:	af00      	add	r7, sp, #0
 800a7e2:	4603      	mov	r3, r0
 800a7e4:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 800a7e6:	79fa      	ldrb	r2, [r7, #7]
 800a7e8:	4b09      	ldr	r3, [pc, #36]	; (800a810 <SUBGRF_SetPacketType+0x34>)
 800a7ea:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 800a7ec:	79fb      	ldrb	r3, [r7, #7]
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d104      	bne.n	800a7fc <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 800a7f2:	2100      	movs	r1, #0
 800a7f4:	f240 60ac 	movw	r0, #1708	; 0x6ac
 800a7f8:	f000 fafe 	bl	800adf8 <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 800a7fc:	1dfb      	adds	r3, r7, #7
 800a7fe:	2201      	movs	r2, #1
 800a800:	4619      	mov	r1, r3
 800a802:	208a      	movs	r0, #138	; 0x8a
 800a804:	f000 fba8 	bl	800af58 <SUBGRF_WriteCommand>
}
 800a808:	bf00      	nop
 800a80a:	3708      	adds	r7, #8
 800a80c:	46bd      	mov	sp, r7
 800a80e:	bd80      	pop	{r7, pc}
 800a810:	20000ac1 	.word	0x20000ac1

0800a814 <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 800a814:	b480      	push	{r7}
 800a816:	af00      	add	r7, sp, #0
    return PacketType;
 800a818:	4b02      	ldr	r3, [pc, #8]	; (800a824 <SUBGRF_GetPacketType+0x10>)
 800a81a:	781b      	ldrb	r3, [r3, #0]
}
 800a81c:	4618      	mov	r0, r3
 800a81e:	46bd      	mov	sp, r7
 800a820:	bc80      	pop	{r7}
 800a822:	4770      	bx	lr
 800a824:	20000ac1 	.word	0x20000ac1

0800a828 <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime )
{
 800a828:	b580      	push	{r7, lr}
 800a82a:	b084      	sub	sp, #16
 800a82c:	af00      	add	r7, sp, #0
 800a82e:	4603      	mov	r3, r0
 800a830:	71fb      	strb	r3, [r7, #7]
 800a832:	460b      	mov	r3, r1
 800a834:	71bb      	strb	r3, [r7, #6]
 800a836:	4613      	mov	r3, r2
 800a838:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];
    int32_t max_power;

    if (paSelect == RFO_LP)
 800a83a:	79fb      	ldrb	r3, [r7, #7]
 800a83c:	2b01      	cmp	r3, #1
 800a83e:	d149      	bne.n	800a8d4 <SUBGRF_SetTxParams+0xac>
    {
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 800a840:	2000      	movs	r0, #0
 800a842:	f000 ff42 	bl	800b6ca <RBI_GetRFOMaxPowerConfig>
 800a846:	60f8      	str	r0, [r7, #12]
        if (power >  max_power)
 800a848:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800a84c:	68fa      	ldr	r2, [r7, #12]
 800a84e:	429a      	cmp	r2, r3
 800a850:	da01      	bge.n	800a856 <SUBGRF_SetTxParams+0x2e>
        {
          power = max_power;
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 14)
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	2b0e      	cmp	r3, #14
 800a85a:	d10e      	bne.n	800a87a <SUBGRF_SetTxParams+0x52>
        {
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 800a85c:	2301      	movs	r3, #1
 800a85e:	2201      	movs	r2, #1
 800a860:	2100      	movs	r1, #0
 800a862:	2004      	movs	r0, #4
 800a864:	f7ff fef6 	bl	800a654 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 800a868:	79ba      	ldrb	r2, [r7, #6]
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	b2db      	uxtb	r3, r3
 800a86e:	1ad3      	subs	r3, r2, r3
 800a870:	b2db      	uxtb	r3, r3
 800a872:	330e      	adds	r3, #14
 800a874:	b2db      	uxtb	r3, r3
 800a876:	71bb      	strb	r3, [r7, #6]
 800a878:	e01f      	b.n	800a8ba <SUBGRF_SetTxParams+0x92>
        }
        else if (max_power == 10)
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	2b0a      	cmp	r3, #10
 800a87e:	d10e      	bne.n	800a89e <SUBGRF_SetTxParams+0x76>
        {
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 800a880:	2301      	movs	r3, #1
 800a882:	2201      	movs	r2, #1
 800a884:	2100      	movs	r1, #0
 800a886:	2001      	movs	r0, #1
 800a888:	f7ff fee4 	bl	800a654 <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 800a88c:	79ba      	ldrb	r2, [r7, #6]
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	b2db      	uxtb	r3, r3
 800a892:	1ad3      	subs	r3, r2, r3
 800a894:	b2db      	uxtb	r3, r3
 800a896:	330d      	adds	r3, #13
 800a898:	b2db      	uxtb	r3, r3
 800a89a:	71bb      	strb	r3, [r7, #6]
 800a89c:	e00d      	b.n	800a8ba <SUBGRF_SetTxParams+0x92>
        }
        else /*default 15dBm*/
        {
            SUBGRF_SetPaConfig(0x07, 0x00, 0x01, 0x01);
 800a89e:	2301      	movs	r3, #1
 800a8a0:	2201      	movs	r2, #1
 800a8a2:	2100      	movs	r1, #0
 800a8a4:	2007      	movs	r0, #7
 800a8a6:	f7ff fed5 	bl	800a654 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 800a8aa:	79ba      	ldrb	r2, [r7, #6]
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	b2db      	uxtb	r3, r3
 800a8b0:	1ad3      	subs	r3, r2, r3
 800a8b2:	b2db      	uxtb	r3, r3
 800a8b4:	330e      	adds	r3, #14
 800a8b6:	b2db      	uxtb	r3, r3
 800a8b8:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -17)
 800a8ba:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800a8be:	f113 0f11 	cmn.w	r3, #17
 800a8c2:	da01      	bge.n	800a8c8 <SUBGRF_SetTxParams+0xa0>
        {
            power = -17;
 800a8c4:	23ef      	movs	r3, #239	; 0xef
 800a8c6:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 800a8c8:	2118      	movs	r1, #24
 800a8ca:	f640 00e7 	movw	r0, #2279	; 0x8e7
 800a8ce:	f000 fa93 	bl	800adf8 <SUBGRF_WriteRegister>
 800a8d2:	e067      	b.n	800a9a4 <SUBGRF_SetTxParams+0x17c>
    }
    else /* rfo_hp*/
    {
        /* WORKAROUND - Better Resistance of the RFO High Power Tx to Antenna Mismatch, see STM32WL Erratasheet*/
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 800a8d4:	f640 00d8 	movw	r0, #2264	; 0x8d8
 800a8d8:	f000 faa2 	bl	800ae20 <SUBGRF_ReadRegister>
 800a8dc:	4603      	mov	r3, r0
 800a8de:	f043 031e 	orr.w	r3, r3, #30
 800a8e2:	b2db      	uxtb	r3, r3
 800a8e4:	4619      	mov	r1, r3
 800a8e6:	f640 00d8 	movw	r0, #2264	; 0x8d8
 800a8ea:	f000 fa85 	bl	800adf8 <SUBGRF_WriteRegister>
        /* WORKAROUND END*/
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 800a8ee:	2001      	movs	r0, #1
 800a8f0:	f000 feeb 	bl	800b6ca <RBI_GetRFOMaxPowerConfig>
 800a8f4:	60f8      	str	r0, [r7, #12]
        if (power > max_power)
 800a8f6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800a8fa:	68fa      	ldr	r2, [r7, #12]
 800a8fc:	429a      	cmp	r2, r3
 800a8fe:	da01      	bge.n	800a904 <SUBGRF_SetTxParams+0xdc>
        {
            power = max_power;
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 20)
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	2b14      	cmp	r3, #20
 800a908:	d10e      	bne.n	800a928 <SUBGRF_SetTxParams+0x100>
        {
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 800a90a:	2301      	movs	r3, #1
 800a90c:	2200      	movs	r2, #0
 800a90e:	2105      	movs	r1, #5
 800a910:	2003      	movs	r0, #3
 800a912:	f7ff fe9f 	bl	800a654 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 800a916:	79ba      	ldrb	r2, [r7, #6]
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	b2db      	uxtb	r3, r3
 800a91c:	1ad3      	subs	r3, r2, r3
 800a91e:	b2db      	uxtb	r3, r3
 800a920:	3316      	adds	r3, #22
 800a922:	b2db      	uxtb	r3, r3
 800a924:	71bb      	strb	r3, [r7, #6]
 800a926:	e031      	b.n	800a98c <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 17)
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	2b11      	cmp	r3, #17
 800a92c:	d10e      	bne.n	800a94c <SUBGRF_SetTxParams+0x124>
        {
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 800a92e:	2301      	movs	r3, #1
 800a930:	2200      	movs	r2, #0
 800a932:	2103      	movs	r1, #3
 800a934:	2002      	movs	r0, #2
 800a936:	f7ff fe8d 	bl	800a654 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 800a93a:	79ba      	ldrb	r2, [r7, #6]
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	b2db      	uxtb	r3, r3
 800a940:	1ad3      	subs	r3, r2, r3
 800a942:	b2db      	uxtb	r3, r3
 800a944:	3316      	adds	r3, #22
 800a946:	b2db      	uxtb	r3, r3
 800a948:	71bb      	strb	r3, [r7, #6]
 800a94a:	e01f      	b.n	800a98c <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 14)
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	2b0e      	cmp	r3, #14
 800a950:	d10e      	bne.n	800a970 <SUBGRF_SetTxParams+0x148>
        {
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 800a952:	2301      	movs	r3, #1
 800a954:	2200      	movs	r2, #0
 800a956:	2102      	movs	r1, #2
 800a958:	2002      	movs	r0, #2
 800a95a:	f7ff fe7b 	bl	800a654 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 800a95e:	79ba      	ldrb	r2, [r7, #6]
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	b2db      	uxtb	r3, r3
 800a964:	1ad3      	subs	r3, r2, r3
 800a966:	b2db      	uxtb	r3, r3
 800a968:	330e      	adds	r3, #14
 800a96a:	b2db      	uxtb	r3, r3
 800a96c:	71bb      	strb	r3, [r7, #6]
 800a96e:	e00d      	b.n	800a98c <SUBGRF_SetTxParams+0x164>
        }
        else /*22dBm*/
        {
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 800a970:	2301      	movs	r3, #1
 800a972:	2200      	movs	r2, #0
 800a974:	2107      	movs	r1, #7
 800a976:	2004      	movs	r0, #4
 800a978:	f7ff fe6c 	bl	800a654 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 800a97c:	79ba      	ldrb	r2, [r7, #6]
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	b2db      	uxtb	r3, r3
 800a982:	1ad3      	subs	r3, r2, r3
 800a984:	b2db      	uxtb	r3, r3
 800a986:	3316      	adds	r3, #22
 800a988:	b2db      	uxtb	r3, r3
 800a98a:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -9)
 800a98c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800a990:	f113 0f09 	cmn.w	r3, #9
 800a994:	da01      	bge.n	800a99a <SUBGRF_SetTxParams+0x172>
        {
            power = -9;
 800a996:	23f7      	movs	r3, #247	; 0xf7
 800a998:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 800a99a:	2138      	movs	r1, #56	; 0x38
 800a99c:	f640 00e7 	movw	r0, #2279	; 0x8e7
 800a9a0:	f000 fa2a 	bl	800adf8 <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 800a9a4:	79bb      	ldrb	r3, [r7, #6]
 800a9a6:	723b      	strb	r3, [r7, #8]
    buf[1] = (uint8_t)rampTime;
 800a9a8:	797b      	ldrb	r3, [r7, #5]
 800a9aa:	727b      	strb	r3, [r7, #9]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 800a9ac:	f107 0308 	add.w	r3, r7, #8
 800a9b0:	2202      	movs	r2, #2
 800a9b2:	4619      	mov	r1, r3
 800a9b4:	208e      	movs	r0, #142	; 0x8e
 800a9b6:	f000 facf 	bl	800af58 <SUBGRF_WriteCommand>
}
 800a9ba:	bf00      	nop
 800a9bc:	3710      	adds	r7, #16
 800a9be:	46bd      	mov	sp, r7
 800a9c0:	bd80      	pop	{r7, pc}
	...

0800a9c4 <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 800a9c4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800a9c8:	b086      	sub	sp, #24
 800a9ca:	af00      	add	r7, sp, #0
 800a9cc:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 800a9ce:	2300      	movs	r3, #0
 800a9d0:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 800a9d2:	4a61      	ldr	r2, [pc, #388]	; (800ab58 <SUBGRF_SetModulationParams+0x194>)
 800a9d4:	f107 0308 	add.w	r3, r7, #8
 800a9d8:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a9dc:	e883 0003 	stmia.w	r3, {r0, r1}

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	781a      	ldrb	r2, [r3, #0]
 800a9e4:	4b5d      	ldr	r3, [pc, #372]	; (800ab5c <SUBGRF_SetModulationParams+0x198>)
 800a9e6:	781b      	ldrb	r3, [r3, #0]
 800a9e8:	429a      	cmp	r2, r3
 800a9ea:	d004      	beq.n	800a9f6 <SUBGRF_SetModulationParams+0x32>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	781b      	ldrb	r3, [r3, #0]
 800a9f0:	4618      	mov	r0, r3
 800a9f2:	f7ff fef3 	bl	800a7dc <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	781b      	ldrb	r3, [r3, #0]
 800a9fa:	2b03      	cmp	r3, #3
 800a9fc:	f200 80a5 	bhi.w	800ab4a <SUBGRF_SetModulationParams+0x186>
 800aa00:	a201      	add	r2, pc, #4	; (adr r2, 800aa08 <SUBGRF_SetModulationParams+0x44>)
 800aa02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa06:	bf00      	nop
 800aa08:	0800aa19 	.word	0x0800aa19
 800aa0c:	0800aad9 	.word	0x0800aad9
 800aa10:	0800aa9b 	.word	0x0800aa9b
 800aa14:	0800ab07 	.word	0x0800ab07
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 800aa18:	2308      	movs	r3, #8
 800aa1a:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	685b      	ldr	r3, [r3, #4]
 800aa20:	4a4f      	ldr	r2, [pc, #316]	; (800ab60 <SUBGRF_SetModulationParams+0x19c>)
 800aa22:	fbb2 f3f3 	udiv	r3, r2, r3
 800aa26:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 800aa28:	697b      	ldr	r3, [r7, #20]
 800aa2a:	0c1b      	lsrs	r3, r3, #16
 800aa2c:	b2db      	uxtb	r3, r3
 800aa2e:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 800aa30:	697b      	ldr	r3, [r7, #20]
 800aa32:	0a1b      	lsrs	r3, r3, #8
 800aa34:	b2db      	uxtb	r3, r3
 800aa36:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 800aa38:	697b      	ldr	r3, [r7, #20]
 800aa3a:	b2db      	uxtb	r3, r3
 800aa3c:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	7b1b      	ldrb	r3, [r3, #12]
 800aa42:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	7b5b      	ldrb	r3, [r3, #13]
 800aa48:	733b      	strb	r3, [r7, #12]
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	689b      	ldr	r3, [r3, #8]
 800aa4e:	2200      	movs	r2, #0
 800aa50:	461c      	mov	r4, r3
 800aa52:	4615      	mov	r5, r2
 800aa54:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 800aa58:	ea4f 6844 	mov.w	r8, r4, lsl #25
 800aa5c:	4a41      	ldr	r2, [pc, #260]	; (800ab64 <SUBGRF_SetModulationParams+0x1a0>)
 800aa5e:	f04f 0300 	mov.w	r3, #0
 800aa62:	4640      	mov	r0, r8
 800aa64:	4649      	mov	r1, r9
 800aa66:	f7f5 fbdb 	bl	8000220 <__aeabi_uldivmod>
 800aa6a:	4602      	mov	r2, r0
 800aa6c:	460b      	mov	r3, r1
 800aa6e:	4613      	mov	r3, r2
 800aa70:	617b      	str	r3, [r7, #20]
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 800aa72:	697b      	ldr	r3, [r7, #20]
 800aa74:	0c1b      	lsrs	r3, r3, #16
 800aa76:	b2db      	uxtb	r3, r3
 800aa78:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 800aa7a:	697b      	ldr	r3, [r7, #20]
 800aa7c:	0a1b      	lsrs	r3, r3, #8
 800aa7e:	b2db      	uxtb	r3, r3
 800aa80:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 800aa82:	697b      	ldr	r3, [r7, #20]
 800aa84:	b2db      	uxtb	r3, r3
 800aa86:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800aa88:	7cfb      	ldrb	r3, [r7, #19]
 800aa8a:	b29a      	uxth	r2, r3
 800aa8c:	f107 0308 	add.w	r3, r7, #8
 800aa90:	4619      	mov	r1, r3
 800aa92:	208b      	movs	r0, #139	; 0x8b
 800aa94:	f000 fa60 	bl	800af58 <SUBGRF_WriteCommand>
        break;
 800aa98:	e058      	b.n	800ab4c <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_BPSK:
        n = 4;
 800aa9a:	2304      	movs	r3, #4
 800aa9c:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	691b      	ldr	r3, [r3, #16]
 800aaa2:	4a2f      	ldr	r2, [pc, #188]	; (800ab60 <SUBGRF_SetModulationParams+0x19c>)
 800aaa4:	fbb2 f3f3 	udiv	r3, r2, r3
 800aaa8:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 800aaaa:	697b      	ldr	r3, [r7, #20]
 800aaac:	0c1b      	lsrs	r3, r3, #16
 800aaae:	b2db      	uxtb	r3, r3
 800aab0:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 800aab2:	697b      	ldr	r3, [r7, #20]
 800aab4:	0a1b      	lsrs	r3, r3, #8
 800aab6:	b2db      	uxtb	r3, r3
 800aab8:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 800aaba:	697b      	ldr	r3, [r7, #20]
 800aabc:	b2db      	uxtb	r3, r3
 800aabe:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	7d1b      	ldrb	r3, [r3, #20]
 800aac4:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800aac6:	7cfb      	ldrb	r3, [r7, #19]
 800aac8:	b29a      	uxth	r2, r3
 800aaca:	f107 0308 	add.w	r3, r7, #8
 800aace:	4619      	mov	r1, r3
 800aad0:	208b      	movs	r0, #139	; 0x8b
 800aad2:	f000 fa41 	bl	800af58 <SUBGRF_WriteCommand>
        break;
 800aad6:	e039      	b.n	800ab4c <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_LORA:
        n = 4;
 800aad8:	2304      	movs	r3, #4
 800aada:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	7e1b      	ldrb	r3, [r3, #24]
 800aae0:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	7e5b      	ldrb	r3, [r3, #25]
 800aae6:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	7e9b      	ldrb	r3, [r3, #26]
 800aaec:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	7edb      	ldrb	r3, [r3, #27]
 800aaf2:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800aaf4:	7cfb      	ldrb	r3, [r7, #19]
 800aaf6:	b29a      	uxth	r2, r3
 800aaf8:	f107 0308 	add.w	r3, r7, #8
 800aafc:	4619      	mov	r1, r3
 800aafe:	208b      	movs	r0, #139	; 0x8b
 800ab00:	f000 fa2a 	bl	800af58 <SUBGRF_WriteCommand>

        break;
 800ab04:	e022      	b.n	800ab4c <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_GMSK:
        n = 5;
 800ab06:	2305      	movs	r3, #5
 800ab08:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	685b      	ldr	r3, [r3, #4]
 800ab0e:	4a14      	ldr	r2, [pc, #80]	; (800ab60 <SUBGRF_SetModulationParams+0x19c>)
 800ab10:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab14:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 800ab16:	697b      	ldr	r3, [r7, #20]
 800ab18:	0c1b      	lsrs	r3, r3, #16
 800ab1a:	b2db      	uxtb	r3, r3
 800ab1c:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 800ab1e:	697b      	ldr	r3, [r7, #20]
 800ab20:	0a1b      	lsrs	r3, r3, #8
 800ab22:	b2db      	uxtb	r3, r3
 800ab24:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 800ab26:	697b      	ldr	r3, [r7, #20]
 800ab28:	b2db      	uxtb	r3, r3
 800ab2a:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	7b1b      	ldrb	r3, [r3, #12]
 800ab30:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	7b5b      	ldrb	r3, [r3, #13]
 800ab36:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800ab38:	7cfb      	ldrb	r3, [r7, #19]
 800ab3a:	b29a      	uxth	r2, r3
 800ab3c:	f107 0308 	add.w	r3, r7, #8
 800ab40:	4619      	mov	r1, r3
 800ab42:	208b      	movs	r0, #139	; 0x8b
 800ab44:	f000 fa08 	bl	800af58 <SUBGRF_WriteCommand>
        break;
 800ab48:	e000      	b.n	800ab4c <SUBGRF_SetModulationParams+0x188>
    default:
    case PACKET_TYPE_NONE:
      break;
 800ab4a:	bf00      	nop
    }
}
 800ab4c:	bf00      	nop
 800ab4e:	3718      	adds	r7, #24
 800ab50:	46bd      	mov	sp, r7
 800ab52:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800ab56:	bf00      	nop
 800ab58:	0800cd78 	.word	0x0800cd78
 800ab5c:	20000ac1 	.word	0x20000ac1
 800ab60:	3d090000 	.word	0x3d090000
 800ab64:	01e84800 	.word	0x01e84800

0800ab68 <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 800ab68:	b580      	push	{r7, lr}
 800ab6a:	b086      	sub	sp, #24
 800ab6c:	af00      	add	r7, sp, #0
 800ab6e:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 800ab70:	2300      	movs	r3, #0
 800ab72:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 800ab74:	4a48      	ldr	r2, [pc, #288]	; (800ac98 <SUBGRF_SetPacketParams+0x130>)
 800ab76:	f107 030c 	add.w	r3, r7, #12
 800ab7a:	ca07      	ldmia	r2, {r0, r1, r2}
 800ab7c:	c303      	stmia	r3!, {r0, r1}
 800ab7e:	701a      	strb	r2, [r3, #0]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	781a      	ldrb	r2, [r3, #0]
 800ab84:	4b45      	ldr	r3, [pc, #276]	; (800ac9c <SUBGRF_SetPacketParams+0x134>)
 800ab86:	781b      	ldrb	r3, [r3, #0]
 800ab88:	429a      	cmp	r2, r3
 800ab8a:	d004      	beq.n	800ab96 <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	781b      	ldrb	r3, [r3, #0]
 800ab90:	4618      	mov	r0, r3
 800ab92:	f7ff fe23 	bl	800a7dc <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	781b      	ldrb	r3, [r3, #0]
 800ab9a:	2b03      	cmp	r3, #3
 800ab9c:	d878      	bhi.n	800ac90 <SUBGRF_SetPacketParams+0x128>
 800ab9e:	a201      	add	r2, pc, #4	; (adr r2, 800aba4 <SUBGRF_SetPacketParams+0x3c>)
 800aba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aba4:	0800abb5 	.word	0x0800abb5
 800aba8:	0800ac45 	.word	0x0800ac45
 800abac:	0800ac39 	.word	0x0800ac39
 800abb0:	0800abb5 	.word	0x0800abb5
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	7a5b      	ldrb	r3, [r3, #9]
 800abb8:	2bf1      	cmp	r3, #241	; 0xf1
 800abba:	d10a      	bne.n	800abd2 <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 800abbc:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800abc0:	f7ff faaa 	bl	800a118 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 800abc4:	f248 0005 	movw	r0, #32773	; 0x8005
 800abc8:	f7ff fac6 	bl	800a158 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 800abcc:	2302      	movs	r3, #2
 800abce:	75bb      	strb	r3, [r7, #22]
 800abd0:	e011      	b.n	800abf6 <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	7a5b      	ldrb	r3, [r3, #9]
 800abd6:	2bf2      	cmp	r3, #242	; 0xf2
 800abd8:	d10a      	bne.n	800abf0 <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 800abda:	f641 500f 	movw	r0, #7439	; 0x1d0f
 800abde:	f7ff fa9b 	bl	800a118 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 800abe2:	f241 0021 	movw	r0, #4129	; 0x1021
 800abe6:	f7ff fab7 	bl	800a158 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 800abea:	2306      	movs	r3, #6
 800abec:	75bb      	strb	r3, [r7, #22]
 800abee:	e002      	b.n	800abf6 <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	7a5b      	ldrb	r3, [r3, #9]
 800abf4:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 800abf6:	2309      	movs	r3, #9
 800abf8:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	885b      	ldrh	r3, [r3, #2]
 800abfe:	0a1b      	lsrs	r3, r3, #8
 800ac00:	b29b      	uxth	r3, r3
 800ac02:	b2db      	uxtb	r3, r3
 800ac04:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	885b      	ldrh	r3, [r3, #2]
 800ac0a:	b2db      	uxtb	r3, r3
 800ac0c:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	791b      	ldrb	r3, [r3, #4]
 800ac12:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	795b      	ldrb	r3, [r3, #5]
 800ac18:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	799b      	ldrb	r3, [r3, #6]
 800ac1e:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	79db      	ldrb	r3, [r3, #7]
 800ac24:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	7a1b      	ldrb	r3, [r3, #8]
 800ac2a:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 800ac2c:	7dbb      	ldrb	r3, [r7, #22]
 800ac2e:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	7a9b      	ldrb	r3, [r3, #10]
 800ac34:	753b      	strb	r3, [r7, #20]
        break;
 800ac36:	e022      	b.n	800ac7e <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 800ac38:	2301      	movs	r3, #1
 800ac3a:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	7b1b      	ldrb	r3, [r3, #12]
 800ac40:	733b      	strb	r3, [r7, #12]
        break;
 800ac42:	e01c      	b.n	800ac7e <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 800ac44:	2306      	movs	r3, #6
 800ac46:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	89db      	ldrh	r3, [r3, #14]
 800ac4c:	0a1b      	lsrs	r3, r3, #8
 800ac4e:	b29b      	uxth	r3, r3
 800ac50:	b2db      	uxtb	r3, r3
 800ac52:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	89db      	ldrh	r3, [r3, #14]
 800ac58:	b2db      	uxtb	r3, r3
 800ac5a:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	7c1a      	ldrb	r2, [r3, #16]
 800ac60:	4b0f      	ldr	r3, [pc, #60]	; (800aca0 <SUBGRF_SetPacketParams+0x138>)
 800ac62:	4611      	mov	r1, r2
 800ac64:	7019      	strb	r1, [r3, #0]
 800ac66:	4613      	mov	r3, r2
 800ac68:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	7c5b      	ldrb	r3, [r3, #17]
 800ac6e:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	7c9b      	ldrb	r3, [r3, #18]
 800ac74:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	7cdb      	ldrb	r3, [r3, #19]
 800ac7a:	747b      	strb	r3, [r7, #17]
        break;
 800ac7c:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 800ac7e:	7dfb      	ldrb	r3, [r7, #23]
 800ac80:	b29a      	uxth	r2, r3
 800ac82:	f107 030c 	add.w	r3, r7, #12
 800ac86:	4619      	mov	r1, r3
 800ac88:	208c      	movs	r0, #140	; 0x8c
 800ac8a:	f000 f965 	bl	800af58 <SUBGRF_WriteCommand>
 800ac8e:	e000      	b.n	800ac92 <SUBGRF_SetPacketParams+0x12a>
        return;
 800ac90:	bf00      	nop
}
 800ac92:	3718      	adds	r7, #24
 800ac94:	46bd      	mov	sp, r7
 800ac96:	bd80      	pop	{r7, pc}
 800ac98:	0800cd80 	.word	0x0800cd80
 800ac9c:	20000ac1 	.word	0x20000ac1
 800aca0:	20000ac2 	.word	0x20000ac2

0800aca4 <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 800aca4:	b580      	push	{r7, lr}
 800aca6:	b084      	sub	sp, #16
 800aca8:	af00      	add	r7, sp, #0
 800acaa:	4603      	mov	r3, r0
 800acac:	460a      	mov	r2, r1
 800acae:	71fb      	strb	r3, [r7, #7]
 800acb0:	4613      	mov	r3, r2
 800acb2:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 800acb4:	79fb      	ldrb	r3, [r7, #7]
 800acb6:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 800acb8:	79bb      	ldrb	r3, [r7, #6]
 800acba:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 800acbc:	f107 030c 	add.w	r3, r7, #12
 800acc0:	2202      	movs	r2, #2
 800acc2:	4619      	mov	r1, r3
 800acc4:	208f      	movs	r0, #143	; 0x8f
 800acc6:	f000 f947 	bl	800af58 <SUBGRF_WriteCommand>
}
 800acca:	bf00      	nop
 800accc:	3710      	adds	r7, #16
 800acce:	46bd      	mov	sp, r7
 800acd0:	bd80      	pop	{r7, pc}

0800acd2 <SUBGRF_GetRssiInst>:
    status.Fields.ChipMode = ( stat & ( 0x07 << 4 ) ) >> 4;
    return status;
}

int8_t SUBGRF_GetRssiInst( void )
{
 800acd2:	b580      	push	{r7, lr}
 800acd4:	b082      	sub	sp, #8
 800acd6:	af00      	add	r7, sp, #0
    uint8_t buf[1];
    int8_t rssi = 0;
 800acd8:	2300      	movs	r3, #0
 800acda:	71fb      	strb	r3, [r7, #7]

    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 800acdc:	1d3b      	adds	r3, r7, #4
 800acde:	2201      	movs	r2, #1
 800ace0:	4619      	mov	r1, r3
 800ace2:	2015      	movs	r0, #21
 800ace4:	f000 f95a 	bl	800af9c <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 800ace8:	793b      	ldrb	r3, [r7, #4]
 800acea:	425b      	negs	r3, r3
 800acec:	105b      	asrs	r3, r3, #1
 800acee:	71fb      	strb	r3, [r7, #7]
    return rssi;
 800acf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 800acf4:	4618      	mov	r0, r3
 800acf6:	3708      	adds	r7, #8
 800acf8:	46bd      	mov	sp, r7
 800acfa:	bd80      	pop	{r7, pc}

0800acfc <SUBGRF_GetRxBufferStatus>:

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 800acfc:	b580      	push	{r7, lr}
 800acfe:	b084      	sub	sp, #16
 800ad00:	af00      	add	r7, sp, #0
 800ad02:	6078      	str	r0, [r7, #4]
 800ad04:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 800ad06:	f107 030c 	add.w	r3, r7, #12
 800ad0a:	2202      	movs	r2, #2
 800ad0c:	4619      	mov	r1, r3
 800ad0e:	2013      	movs	r0, #19
 800ad10:	f000 f944 	bl	800af9c <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 800ad14:	f7ff fd7e 	bl	800a814 <SUBGRF_GetPacketType>
 800ad18:	4603      	mov	r3, r0
 800ad1a:	2b01      	cmp	r3, #1
 800ad1c:	d10d      	bne.n	800ad3a <SUBGRF_GetRxBufferStatus+0x3e>
 800ad1e:	4b0c      	ldr	r3, [pc, #48]	; (800ad50 <SUBGRF_GetRxBufferStatus+0x54>)
 800ad20:	781b      	ldrb	r3, [r3, #0]
 800ad22:	b2db      	uxtb	r3, r3
 800ad24:	2b01      	cmp	r3, #1
 800ad26:	d108      	bne.n	800ad3a <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 800ad28:	f240 7002 	movw	r0, #1794	; 0x702
 800ad2c:	f000 f878 	bl	800ae20 <SUBGRF_ReadRegister>
 800ad30:	4603      	mov	r3, r0
 800ad32:	461a      	mov	r2, r3
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	701a      	strb	r2, [r3, #0]
 800ad38:	e002      	b.n	800ad40 <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 800ad3a:	7b3a      	ldrb	r2, [r7, #12]
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 800ad40:	7b7a      	ldrb	r2, [r7, #13]
 800ad42:	683b      	ldr	r3, [r7, #0]
 800ad44:	701a      	strb	r2, [r3, #0]
}
 800ad46:	bf00      	nop
 800ad48:	3710      	adds	r7, #16
 800ad4a:	46bd      	mov	sp, r7
 800ad4c:	bd80      	pop	{r7, pc}
 800ad4e:	bf00      	nop
 800ad50:	20000ac2 	.word	0x20000ac2

0800ad54 <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 800ad54:	b580      	push	{r7, lr}
 800ad56:	b084      	sub	sp, #16
 800ad58:	af00      	add	r7, sp, #0
 800ad5a:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 800ad5c:	f107 030c 	add.w	r3, r7, #12
 800ad60:	2203      	movs	r2, #3
 800ad62:	4619      	mov	r1, r3
 800ad64:	2014      	movs	r0, #20
 800ad66:	f000 f919 	bl	800af9c <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 800ad6a:	f7ff fd53 	bl	800a814 <SUBGRF_GetPacketType>
 800ad6e:	4603      	mov	r3, r0
 800ad70:	461a      	mov	r2, r3
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	781b      	ldrb	r3, [r3, #0]
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d002      	beq.n	800ad84 <SUBGRF_GetPacketStatus+0x30>
 800ad7e:	2b01      	cmp	r3, #1
 800ad80:	d013      	beq.n	800adaa <SUBGRF_GetPacketStatus+0x56>
 800ad82:	e02a      	b.n	800adda <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 800ad84:	7b3a      	ldrb	r2, [r7, #12]
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 800ad8a:	7b7b      	ldrb	r3, [r7, #13]
 800ad8c:	425b      	negs	r3, r3
 800ad8e:	105b      	asrs	r3, r3, #1
 800ad90:	b25a      	sxtb	r2, r3
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 800ad96:	7bbb      	ldrb	r3, [r7, #14]
 800ad98:	425b      	negs	r3, r3
 800ad9a:	105b      	asrs	r3, r3, #1
 800ad9c:	b25a      	sxtb	r2, r3
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	2200      	movs	r2, #0
 800ada6:	609a      	str	r2, [r3, #8]
            break;
 800ada8:	e020      	b.n	800adec <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 800adaa:	7b3b      	ldrb	r3, [r7, #12]
 800adac:	425b      	negs	r3, r3
 800adae:	105b      	asrs	r3, r3, #1
 800adb0:	b25a      	sxtb	r2, r3
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 800adb6:	7b7b      	ldrb	r3, [r7, #13]
 800adb8:	b25b      	sxtb	r3, r3
 800adba:	3302      	adds	r3, #2
 800adbc:	109b      	asrs	r3, r3, #2
 800adbe:	b25a      	sxtb	r2, r3
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 800adc4:	7bbb      	ldrb	r3, [r7, #14]
 800adc6:	425b      	negs	r3, r3
 800adc8:	105b      	asrs	r3, r3, #1
 800adca:	b25a      	sxtb	r2, r3
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 800add0:	4b08      	ldr	r3, [pc, #32]	; (800adf4 <SUBGRF_GetPacketStatus+0xa0>)
 800add2:	681a      	ldr	r2, [r3, #0]
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	611a      	str	r2, [r3, #16]
            break;
 800add8:	e008      	b.n	800adec <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 800adda:	2214      	movs	r2, #20
 800addc:	2100      	movs	r1, #0
 800adde:	6878      	ldr	r0, [r7, #4]
 800ade0:	f000 fca7 	bl	800b732 <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	220f      	movs	r2, #15
 800ade8:	701a      	strb	r2, [r3, #0]
            break;
 800adea:	bf00      	nop
    }
}
 800adec:	bf00      	nop
 800adee:	3710      	adds	r7, #16
 800adf0:	46bd      	mov	sp, r7
 800adf2:	bd80      	pop	{r7, pc}
 800adf4:	20000ac4 	.word	0x20000ac4

0800adf8 <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 800adf8:	b580      	push	{r7, lr}
 800adfa:	b082      	sub	sp, #8
 800adfc:	af00      	add	r7, sp, #0
 800adfe:	4603      	mov	r3, r0
 800ae00:	460a      	mov	r2, r1
 800ae02:	80fb      	strh	r3, [r7, #6]
 800ae04:	4613      	mov	r3, r2
 800ae06:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 800ae08:	1d7a      	adds	r2, r7, #5
 800ae0a:	88f9      	ldrh	r1, [r7, #6]
 800ae0c:	2301      	movs	r3, #1
 800ae0e:	4803      	ldr	r0, [pc, #12]	; (800ae1c <SUBGRF_WriteRegister+0x24>)
 800ae10:	f7fa fdaa 	bl	8005968 <HAL_SUBGHZ_WriteRegisters>
}
 800ae14:	bf00      	nop
 800ae16:	3708      	adds	r7, #8
 800ae18:	46bd      	mov	sp, r7
 800ae1a:	bd80      	pop	{r7, pc}
 800ae1c:	200004cc 	.word	0x200004cc

0800ae20 <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 800ae20:	b580      	push	{r7, lr}
 800ae22:	b084      	sub	sp, #16
 800ae24:	af00      	add	r7, sp, #0
 800ae26:	4603      	mov	r3, r0
 800ae28:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 800ae2a:	f107 020f 	add.w	r2, r7, #15
 800ae2e:	88f9      	ldrh	r1, [r7, #6]
 800ae30:	2301      	movs	r3, #1
 800ae32:	4804      	ldr	r0, [pc, #16]	; (800ae44 <SUBGRF_ReadRegister+0x24>)
 800ae34:	f7fa fdf7 	bl	8005a26 <HAL_SUBGHZ_ReadRegisters>
    return data;
 800ae38:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae3a:	4618      	mov	r0, r3
 800ae3c:	3710      	adds	r7, #16
 800ae3e:	46bd      	mov	sp, r7
 800ae40:	bd80      	pop	{r7, pc}
 800ae42:	bf00      	nop
 800ae44:	200004cc 	.word	0x200004cc

0800ae48 <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 800ae48:	b580      	push	{r7, lr}
 800ae4a:	b086      	sub	sp, #24
 800ae4c:	af00      	add	r7, sp, #0
 800ae4e:	4603      	mov	r3, r0
 800ae50:	6039      	str	r1, [r7, #0]
 800ae52:	80fb      	strh	r3, [r7, #6]
 800ae54:	4613      	mov	r3, r2
 800ae56:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ae58:	f3ef 8310 	mrs	r3, PRIMASK
 800ae5c:	60fb      	str	r3, [r7, #12]
  return(result);
 800ae5e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800ae60:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ae62:	b672      	cpsid	i
}
 800ae64:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 800ae66:	88bb      	ldrh	r3, [r7, #4]
 800ae68:	88f9      	ldrh	r1, [r7, #6]
 800ae6a:	683a      	ldr	r2, [r7, #0]
 800ae6c:	4806      	ldr	r0, [pc, #24]	; (800ae88 <SUBGRF_WriteRegisters+0x40>)
 800ae6e:	f7fa fd7b 	bl	8005968 <HAL_SUBGHZ_WriteRegisters>
 800ae72:	697b      	ldr	r3, [r7, #20]
 800ae74:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ae76:	693b      	ldr	r3, [r7, #16]
 800ae78:	f383 8810 	msr	PRIMASK, r3
}
 800ae7c:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800ae7e:	bf00      	nop
 800ae80:	3718      	adds	r7, #24
 800ae82:	46bd      	mov	sp, r7
 800ae84:	bd80      	pop	{r7, pc}
 800ae86:	bf00      	nop
 800ae88:	200004cc 	.word	0x200004cc

0800ae8c <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 800ae8c:	b580      	push	{r7, lr}
 800ae8e:	b086      	sub	sp, #24
 800ae90:	af00      	add	r7, sp, #0
 800ae92:	4603      	mov	r3, r0
 800ae94:	6039      	str	r1, [r7, #0]
 800ae96:	80fb      	strh	r3, [r7, #6]
 800ae98:	4613      	mov	r3, r2
 800ae9a:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ae9c:	f3ef 8310 	mrs	r3, PRIMASK
 800aea0:	60fb      	str	r3, [r7, #12]
  return(result);
 800aea2:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800aea4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800aea6:	b672      	cpsid	i
}
 800aea8:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 800aeaa:	88bb      	ldrh	r3, [r7, #4]
 800aeac:	88f9      	ldrh	r1, [r7, #6]
 800aeae:	683a      	ldr	r2, [r7, #0]
 800aeb0:	4806      	ldr	r0, [pc, #24]	; (800aecc <SUBGRF_ReadRegisters+0x40>)
 800aeb2:	f7fa fdb8 	bl	8005a26 <HAL_SUBGHZ_ReadRegisters>
 800aeb6:	697b      	ldr	r3, [r7, #20]
 800aeb8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aeba:	693b      	ldr	r3, [r7, #16]
 800aebc:	f383 8810 	msr	PRIMASK, r3
}
 800aec0:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800aec2:	bf00      	nop
 800aec4:	3718      	adds	r7, #24
 800aec6:	46bd      	mov	sp, r7
 800aec8:	bd80      	pop	{r7, pc}
 800aeca:	bf00      	nop
 800aecc:	200004cc 	.word	0x200004cc

0800aed0 <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 800aed0:	b580      	push	{r7, lr}
 800aed2:	b086      	sub	sp, #24
 800aed4:	af00      	add	r7, sp, #0
 800aed6:	4603      	mov	r3, r0
 800aed8:	6039      	str	r1, [r7, #0]
 800aeda:	71fb      	strb	r3, [r7, #7]
 800aedc:	4613      	mov	r3, r2
 800aede:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aee0:	f3ef 8310 	mrs	r3, PRIMASK
 800aee4:	60fb      	str	r3, [r7, #12]
  return(result);
 800aee6:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800aee8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800aeea:	b672      	cpsid	i
}
 800aeec:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 800aeee:	79bb      	ldrb	r3, [r7, #6]
 800aef0:	b29b      	uxth	r3, r3
 800aef2:	79f9      	ldrb	r1, [r7, #7]
 800aef4:	683a      	ldr	r2, [r7, #0]
 800aef6:	4806      	ldr	r0, [pc, #24]	; (800af10 <SUBGRF_WriteBuffer+0x40>)
 800aef8:	f7fa fea9 	bl	8005c4e <HAL_SUBGHZ_WriteBuffer>
 800aefc:	697b      	ldr	r3, [r7, #20]
 800aefe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800af00:	693b      	ldr	r3, [r7, #16]
 800af02:	f383 8810 	msr	PRIMASK, r3
}
 800af06:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800af08:	bf00      	nop
 800af0a:	3718      	adds	r7, #24
 800af0c:	46bd      	mov	sp, r7
 800af0e:	bd80      	pop	{r7, pc}
 800af10:	200004cc 	.word	0x200004cc

0800af14 <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 800af14:	b580      	push	{r7, lr}
 800af16:	b086      	sub	sp, #24
 800af18:	af00      	add	r7, sp, #0
 800af1a:	4603      	mov	r3, r0
 800af1c:	6039      	str	r1, [r7, #0]
 800af1e:	71fb      	strb	r3, [r7, #7]
 800af20:	4613      	mov	r3, r2
 800af22:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800af24:	f3ef 8310 	mrs	r3, PRIMASK
 800af28:	60fb      	str	r3, [r7, #12]
  return(result);
 800af2a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800af2c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800af2e:	b672      	cpsid	i
}
 800af30:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 800af32:	79bb      	ldrb	r3, [r7, #6]
 800af34:	b29b      	uxth	r3, r3
 800af36:	79f9      	ldrb	r1, [r7, #7]
 800af38:	683a      	ldr	r2, [r7, #0]
 800af3a:	4806      	ldr	r0, [pc, #24]	; (800af54 <SUBGRF_ReadBuffer+0x40>)
 800af3c:	f7fa feda 	bl	8005cf4 <HAL_SUBGHZ_ReadBuffer>
 800af40:	697b      	ldr	r3, [r7, #20]
 800af42:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800af44:	693b      	ldr	r3, [r7, #16]
 800af46:	f383 8810 	msr	PRIMASK, r3
}
 800af4a:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800af4c:	bf00      	nop
 800af4e:	3718      	adds	r7, #24
 800af50:	46bd      	mov	sp, r7
 800af52:	bd80      	pop	{r7, pc}
 800af54:	200004cc 	.word	0x200004cc

0800af58 <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 800af58:	b580      	push	{r7, lr}
 800af5a:	b086      	sub	sp, #24
 800af5c:	af00      	add	r7, sp, #0
 800af5e:	4603      	mov	r3, r0
 800af60:	6039      	str	r1, [r7, #0]
 800af62:	71fb      	strb	r3, [r7, #7]
 800af64:	4613      	mov	r3, r2
 800af66:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800af68:	f3ef 8310 	mrs	r3, PRIMASK
 800af6c:	60fb      	str	r3, [r7, #12]
  return(result);
 800af6e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800af70:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800af72:	b672      	cpsid	i
}
 800af74:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 800af76:	88bb      	ldrh	r3, [r7, #4]
 800af78:	79f9      	ldrb	r1, [r7, #7]
 800af7a:	683a      	ldr	r2, [r7, #0]
 800af7c:	4806      	ldr	r0, [pc, #24]	; (800af98 <SUBGRF_WriteCommand+0x40>)
 800af7e:	f7fa fdb3 	bl	8005ae8 <HAL_SUBGHZ_ExecSetCmd>
 800af82:	697b      	ldr	r3, [r7, #20]
 800af84:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800af86:	693b      	ldr	r3, [r7, #16]
 800af88:	f383 8810 	msr	PRIMASK, r3
}
 800af8c:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800af8e:	bf00      	nop
 800af90:	3718      	adds	r7, #24
 800af92:	46bd      	mov	sp, r7
 800af94:	bd80      	pop	{r7, pc}
 800af96:	bf00      	nop
 800af98:	200004cc 	.word	0x200004cc

0800af9c <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 800af9c:	b580      	push	{r7, lr}
 800af9e:	b086      	sub	sp, #24
 800afa0:	af00      	add	r7, sp, #0
 800afa2:	4603      	mov	r3, r0
 800afa4:	6039      	str	r1, [r7, #0]
 800afa6:	71fb      	strb	r3, [r7, #7]
 800afa8:	4613      	mov	r3, r2
 800afaa:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800afac:	f3ef 8310 	mrs	r3, PRIMASK
 800afb0:	60fb      	str	r3, [r7, #12]
  return(result);
 800afb2:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800afb4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800afb6:	b672      	cpsid	i
}
 800afb8:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 800afba:	88bb      	ldrh	r3, [r7, #4]
 800afbc:	79f9      	ldrb	r1, [r7, #7]
 800afbe:	683a      	ldr	r2, [r7, #0]
 800afc0:	4806      	ldr	r0, [pc, #24]	; (800afdc <SUBGRF_ReadCommand+0x40>)
 800afc2:	f7fa fdf0 	bl	8005ba6 <HAL_SUBGHZ_ExecGetCmd>
 800afc6:	697b      	ldr	r3, [r7, #20]
 800afc8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800afca:	693b      	ldr	r3, [r7, #16]
 800afcc:	f383 8810 	msr	PRIMASK, r3
}
 800afd0:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800afd2:	bf00      	nop
 800afd4:	3718      	adds	r7, #24
 800afd6:	46bd      	mov	sp, r7
 800afd8:	bd80      	pop	{r7, pc}
 800afda:	bf00      	nop
 800afdc:	200004cc 	.word	0x200004cc

0800afe0 <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 800afe0:	b580      	push	{r7, lr}
 800afe2:	b084      	sub	sp, #16
 800afe4:	af00      	add	r7, sp, #0
 800afe6:	4603      	mov	r3, r0
 800afe8:	460a      	mov	r2, r1
 800afea:	71fb      	strb	r3, [r7, #7]
 800afec:	4613      	mov	r3, r2
 800afee:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 800aff0:	2301      	movs	r3, #1
 800aff2:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 800aff4:	79bb      	ldrb	r3, [r7, #6]
 800aff6:	2b01      	cmp	r3, #1
 800aff8:	d10d      	bne.n	800b016 <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 800affa:	79fb      	ldrb	r3, [r7, #7]
 800affc:	2b01      	cmp	r3, #1
 800affe:	d104      	bne.n	800b00a <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 800b000:	2302      	movs	r3, #2
 800b002:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 800b004:	2004      	movs	r0, #4
 800b006:	f000 f8ef 	bl	800b1e8 <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 800b00a:	79fb      	ldrb	r3, [r7, #7]
 800b00c:	2b02      	cmp	r3, #2
 800b00e:	d107      	bne.n	800b020 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 800b010:	2303      	movs	r3, #3
 800b012:	73fb      	strb	r3, [r7, #15]
 800b014:	e004      	b.n	800b020 <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 800b016:	79bb      	ldrb	r3, [r7, #6]
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d101      	bne.n	800b020 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 800b01c:	2301      	movs	r3, #1
 800b01e:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 800b020:	7bfb      	ldrb	r3, [r7, #15]
 800b022:	4618      	mov	r0, r3
 800b024:	f000 fad2 	bl	800b5cc <RBI_ConfigRFSwitch>
}
 800b028:	bf00      	nop
 800b02a:	3710      	adds	r7, #16
 800b02c:	46bd      	mov	sp, r7
 800b02e:	bd80      	pop	{r7, pc}

0800b030 <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power )
{
 800b030:	b580      	push	{r7, lr}
 800b032:	b084      	sub	sp, #16
 800b034:	af00      	add	r7, sp, #0
 800b036:	4603      	mov	r3, r0
 800b038:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 800b03a:	2301      	movs	r3, #1
 800b03c:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 800b03e:	f000 fb23 	bl	800b688 <RBI_GetTxConfig>
 800b042:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 800b044:	68bb      	ldr	r3, [r7, #8]
 800b046:	2b02      	cmp	r3, #2
 800b048:	d016      	beq.n	800b078 <SUBGRF_SetRfTxPower+0x48>
 800b04a:	68bb      	ldr	r3, [r7, #8]
 800b04c:	2b02      	cmp	r3, #2
 800b04e:	dc16      	bgt.n	800b07e <SUBGRF_SetRfTxPower+0x4e>
 800b050:	68bb      	ldr	r3, [r7, #8]
 800b052:	2b00      	cmp	r3, #0
 800b054:	d003      	beq.n	800b05e <SUBGRF_SetRfTxPower+0x2e>
 800b056:	68bb      	ldr	r3, [r7, #8]
 800b058:	2b01      	cmp	r3, #1
 800b05a:	d00a      	beq.n	800b072 <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 800b05c:	e00f      	b.n	800b07e <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 800b05e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b062:	2b0f      	cmp	r3, #15
 800b064:	dd02      	ble.n	800b06c <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 800b066:	2302      	movs	r3, #2
 800b068:	73fb      	strb	r3, [r7, #15]
            break;
 800b06a:	e009      	b.n	800b080 <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 800b06c:	2301      	movs	r3, #1
 800b06e:	73fb      	strb	r3, [r7, #15]
            break;
 800b070:	e006      	b.n	800b080 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 800b072:	2301      	movs	r3, #1
 800b074:	73fb      	strb	r3, [r7, #15]
            break;
 800b076:	e003      	b.n	800b080 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 800b078:	2302      	movs	r3, #2
 800b07a:	73fb      	strb	r3, [r7, #15]
            break;
 800b07c:	e000      	b.n	800b080 <SUBGRF_SetRfTxPower+0x50>
            break;
 800b07e:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 800b080:	f997 1007 	ldrsb.w	r1, [r7, #7]
 800b084:	7bfb      	ldrb	r3, [r7, #15]
 800b086:	2202      	movs	r2, #2
 800b088:	4618      	mov	r0, r3
 800b08a:	f7ff fbcd 	bl	800a828 <SUBGRF_SetTxParams>

    return paSelect;
 800b08e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b090:	4618      	mov	r0, r3
 800b092:	3710      	adds	r7, #16
 800b094:	46bd      	mov	sp, r7
 800b096:	bd80      	pop	{r7, pc}

0800b098 <SUBGRF_GetRadioWakeUpTime>:

uint32_t SUBGRF_GetRadioWakeUpTime( void )
{
 800b098:	b480      	push	{r7}
 800b09a:	af00      	add	r7, sp, #0
    return RF_WAKEUP_TIME;
 800b09c:	2301      	movs	r3, #1
}
 800b09e:	4618      	mov	r0, r3
 800b0a0:	46bd      	mov	sp, r7
 800b0a2:	bc80      	pop	{r7}
 800b0a4:	4770      	bx	lr
	...

0800b0a8 <HAL_SUBGHZ_TxCpltCallback>:

/* HAL_SUBGHz Callbacks definitions */
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800b0a8:	b580      	push	{r7, lr}
 800b0aa:	b082      	sub	sp, #8
 800b0ac:	af00      	add	r7, sp, #0
 800b0ae:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 800b0b0:	4b03      	ldr	r3, [pc, #12]	; (800b0c0 <HAL_SUBGHZ_TxCpltCallback+0x18>)
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	2001      	movs	r0, #1
 800b0b6:	4798      	blx	r3
}
 800b0b8:	bf00      	nop
 800b0ba:	3708      	adds	r7, #8
 800b0bc:	46bd      	mov	sp, r7
 800b0be:	bd80      	pop	{r7, pc}
 800b0c0:	20000acc 	.word	0x20000acc

0800b0c4 <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800b0c4:	b580      	push	{r7, lr}
 800b0c6:	b082      	sub	sp, #8
 800b0c8:	af00      	add	r7, sp, #0
 800b0ca:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 800b0cc:	4b03      	ldr	r3, [pc, #12]	; (800b0dc <HAL_SUBGHZ_RxCpltCallback+0x18>)
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	2002      	movs	r0, #2
 800b0d2:	4798      	blx	r3
}
 800b0d4:	bf00      	nop
 800b0d6:	3708      	adds	r7, #8
 800b0d8:	46bd      	mov	sp, r7
 800b0da:	bd80      	pop	{r7, pc}
 800b0dc:	20000acc 	.word	0x20000acc

0800b0e0 <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 800b0e0:	b580      	push	{r7, lr}
 800b0e2:	b082      	sub	sp, #8
 800b0e4:	af00      	add	r7, sp, #0
 800b0e6:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 800b0e8:	4b03      	ldr	r3, [pc, #12]	; (800b0f8 <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	2040      	movs	r0, #64	; 0x40
 800b0ee:	4798      	blx	r3
}
 800b0f0:	bf00      	nop
 800b0f2:	3708      	adds	r7, #8
 800b0f4:	46bd      	mov	sp, r7
 800b0f6:	bd80      	pop	{r7, pc}
 800b0f8:	20000acc 	.word	0x20000acc

0800b0fc <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 800b0fc:	b580      	push	{r7, lr}
 800b0fe:	b082      	sub	sp, #8
 800b100:	af00      	add	r7, sp, #0
 800b102:	6078      	str	r0, [r7, #4]
 800b104:	460b      	mov	r3, r1
 800b106:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 800b108:	78fb      	ldrb	r3, [r7, #3]
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d002      	beq.n	800b114 <HAL_SUBGHZ_CADStatusCallback+0x18>
 800b10e:	2b01      	cmp	r3, #1
 800b110:	d005      	beq.n	800b11e <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 800b112:	e00a      	b.n	800b12a <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 800b114:	4b07      	ldr	r3, [pc, #28]	; (800b134 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	2080      	movs	r0, #128	; 0x80
 800b11a:	4798      	blx	r3
            break;
 800b11c:	e005      	b.n	800b12a <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 800b11e:	4b05      	ldr	r3, [pc, #20]	; (800b134 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	f44f 7080 	mov.w	r0, #256	; 0x100
 800b126:	4798      	blx	r3
            break;
 800b128:	bf00      	nop
    }
}
 800b12a:	bf00      	nop
 800b12c:	3708      	adds	r7, #8
 800b12e:	46bd      	mov	sp, r7
 800b130:	bd80      	pop	{r7, pc}
 800b132:	bf00      	nop
 800b134:	20000acc 	.word	0x20000acc

0800b138 <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800b138:	b580      	push	{r7, lr}
 800b13a:	b082      	sub	sp, #8
 800b13c:	af00      	add	r7, sp, #0
 800b13e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 800b140:	4b04      	ldr	r3, [pc, #16]	; (800b154 <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	f44f 7000 	mov.w	r0, #512	; 0x200
 800b148:	4798      	blx	r3
}
 800b14a:	bf00      	nop
 800b14c:	3708      	adds	r7, #8
 800b14e:	46bd      	mov	sp, r7
 800b150:	bd80      	pop	{r7, pc}
 800b152:	bf00      	nop
 800b154:	20000acc 	.word	0x20000acc

0800b158 <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800b158:	b580      	push	{r7, lr}
 800b15a:	b082      	sub	sp, #8
 800b15c:	af00      	add	r7, sp, #0
 800b15e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 800b160:	4b03      	ldr	r3, [pc, #12]	; (800b170 <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	2020      	movs	r0, #32
 800b166:	4798      	blx	r3
}
 800b168:	bf00      	nop
 800b16a:	3708      	adds	r7, #8
 800b16c:	46bd      	mov	sp, r7
 800b16e:	bd80      	pop	{r7, pc}
 800b170:	20000acc 	.word	0x20000acc

0800b174 <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800b174:	b580      	push	{r7, lr}
 800b176:	b082      	sub	sp, #8
 800b178:	af00      	add	r7, sp, #0
 800b17a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 800b17c:	4b03      	ldr	r3, [pc, #12]	; (800b18c <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	2004      	movs	r0, #4
 800b182:	4798      	blx	r3
}
 800b184:	bf00      	nop
 800b186:	3708      	adds	r7, #8
 800b188:	46bd      	mov	sp, r7
 800b18a:	bd80      	pop	{r7, pc}
 800b18c:	20000acc 	.word	0x20000acc

0800b190 <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800b190:	b580      	push	{r7, lr}
 800b192:	b082      	sub	sp, #8
 800b194:	af00      	add	r7, sp, #0
 800b196:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 800b198:	4b03      	ldr	r3, [pc, #12]	; (800b1a8 <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	2008      	movs	r0, #8
 800b19e:	4798      	blx	r3
}
 800b1a0:	bf00      	nop
 800b1a2:	3708      	adds	r7, #8
 800b1a4:	46bd      	mov	sp, r7
 800b1a6:	bd80      	pop	{r7, pc}
 800b1a8:	20000acc 	.word	0x20000acc

0800b1ac <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800b1ac:	b580      	push	{r7, lr}
 800b1ae:	b082      	sub	sp, #8
 800b1b0:	af00      	add	r7, sp, #0
 800b1b2:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 800b1b4:	4b03      	ldr	r3, [pc, #12]	; (800b1c4 <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	2010      	movs	r0, #16
 800b1ba:	4798      	blx	r3
}
 800b1bc:	bf00      	nop
 800b1be:	3708      	adds	r7, #8
 800b1c0:	46bd      	mov	sp, r7
 800b1c2:	bd80      	pop	{r7, pc}
 800b1c4:	20000acc 	.word	0x20000acc

0800b1c8 <HAL_SUBGHZ_LrFhssHopCallback>:

void HAL_SUBGHZ_LrFhssHopCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800b1c8:	b580      	push	{r7, lr}
 800b1ca:	b082      	sub	sp, #8
 800b1cc:	af00      	add	r7, sp, #0
 800b1ce:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
 800b1d0:	4b04      	ldr	r3, [pc, #16]	; (800b1e4 <HAL_SUBGHZ_LrFhssHopCallback+0x1c>)
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800b1d8:	4798      	blx	r3
}
 800b1da:	bf00      	nop
 800b1dc:	3708      	adds	r7, #8
 800b1de:	46bd      	mov	sp, r7
 800b1e0:	bd80      	pop	{r7, pc}
 800b1e2:	bf00      	nop
 800b1e4:	20000acc 	.word	0x20000acc

0800b1e8 <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 800b1e8:	b580      	push	{r7, lr}
 800b1ea:	b084      	sub	sp, #16
 800b1ec:	af00      	add	r7, sp, #0
 800b1ee:	4603      	mov	r3, r0
 800b1f0:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 800b1f2:	f000 fa5f 	bl	800b6b4 <RBI_IsDCDC>
 800b1f6:	4603      	mov	r3, r0
 800b1f8:	2b01      	cmp	r3, #1
 800b1fa:	d112      	bne.n	800b222 <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 800b1fc:	f640 1023 	movw	r0, #2339	; 0x923
 800b200:	f7ff fe0e 	bl	800ae20 <SUBGRF_ReadRegister>
 800b204:	4603      	mov	r3, r0
 800b206:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 800b208:	7bfb      	ldrb	r3, [r7, #15]
 800b20a:	f023 0306 	bic.w	r3, r3, #6
 800b20e:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 800b210:	7bfa      	ldrb	r2, [r7, #15]
 800b212:	79fb      	ldrb	r3, [r7, #7]
 800b214:	4313      	orrs	r3, r2
 800b216:	b2db      	uxtb	r3, r3
 800b218:	4619      	mov	r1, r3
 800b21a:	f640 1023 	movw	r0, #2339	; 0x923
 800b21e:	f7ff fdeb 	bl	800adf8 <SUBGRF_WriteRegister>
  }
}
 800b222:	bf00      	nop
 800b224:	3710      	adds	r7, #16
 800b226:	46bd      	mov	sp, r7
 800b228:	bd80      	pop	{r7, pc}
	...

0800b22c <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
 800b22c:	b480      	push	{r7}
 800b22e:	b085      	sub	sp, #20
 800b230:	af00      	add	r7, sp, #0
 800b232:	6078      	str	r0, [r7, #4]
    uint8_t i;

    if( bandwidth == 0 )
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	2b00      	cmp	r3, #0
 800b238:	d101      	bne.n	800b23e <SUBGRF_GetFskBandwidthRegValue+0x12>
    {
        return( 0x1F );
 800b23a:	231f      	movs	r3, #31
 800b23c:	e016      	b.n	800b26c <SUBGRF_GetFskBandwidthRegValue+0x40>
    }

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 800b23e:	2300      	movs	r3, #0
 800b240:	73fb      	strb	r3, [r7, #15]
 800b242:	e00f      	b.n	800b264 <SUBGRF_GetFskBandwidthRegValue+0x38>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 800b244:	7bfb      	ldrb	r3, [r7, #15]
 800b246:	4a0c      	ldr	r2, [pc, #48]	; (800b278 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 800b248:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b24c:	687a      	ldr	r2, [r7, #4]
 800b24e:	429a      	cmp	r2, r3
 800b250:	d205      	bcs.n	800b25e <SUBGRF_GetFskBandwidthRegValue+0x32>
        {
            return FskBandwidths[i].RegValue;
 800b252:	7bfb      	ldrb	r3, [r7, #15]
 800b254:	4a08      	ldr	r2, [pc, #32]	; (800b278 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 800b256:	00db      	lsls	r3, r3, #3
 800b258:	4413      	add	r3, r2
 800b25a:	791b      	ldrb	r3, [r3, #4]
 800b25c:	e006      	b.n	800b26c <SUBGRF_GetFskBandwidthRegValue+0x40>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 800b25e:	7bfb      	ldrb	r3, [r7, #15]
 800b260:	3301      	adds	r3, #1
 800b262:	73fb      	strb	r3, [r7, #15]
 800b264:	7bfb      	ldrb	r3, [r7, #15]
 800b266:	2b15      	cmp	r3, #21
 800b268:	d9ec      	bls.n	800b244 <SUBGRF_GetFskBandwidthRegValue+0x18>
        }
    }
    // ERROR: Value not found
    while( 1 );
 800b26a:	e7fe      	b.n	800b26a <SUBGRF_GetFskBandwidthRegValue+0x3e>
}
 800b26c:	4618      	mov	r0, r3
 800b26e:	3714      	adds	r7, #20
 800b270:	46bd      	mov	sp, r7
 800b272:	bc80      	pop	{r7}
 800b274:	4770      	bx	lr
 800b276:	bf00      	nop
 800b278:	0800cf10 	.word	0x0800cf10

0800b27c <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 800b27c:	b580      	push	{r7, lr}
 800b27e:	b08a      	sub	sp, #40	; 0x28
 800b280:	af00      	add	r7, sp, #0
 800b282:	6078      	str	r0, [r7, #4]
 800b284:	6039      	str	r1, [r7, #0]
  uint8_t BwMant[] = {4, 8, 10, 12};
 800b286:	4b35      	ldr	r3, [pc, #212]	; (800b35c <SUBGRF_GetCFO+0xe0>)
 800b288:	60fb      	str	r3, [r7, #12]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSELR ));
 800b28a:	f640 0007 	movw	r0, #2055	; 0x807
 800b28e:	f7ff fdc7 	bl	800ae20 <SUBGRF_ReadRegister>
 800b292:	4603      	mov	r3, r0
 800b294:	77fb      	strb	r3, [r7, #31]
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 800b296:	7ffb      	ldrb	r3, [r7, #31]
 800b298:	08db      	lsrs	r3, r3, #3
 800b29a:	b2db      	uxtb	r3, r3
 800b29c:	f003 0303 	and.w	r3, r3, #3
 800b2a0:	3328      	adds	r3, #40	; 0x28
 800b2a2:	443b      	add	r3, r7
 800b2a4:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 800b2a8:	77bb      	strb	r3, [r7, #30]
  uint8_t bandwidth_exp = reg & 0x7;
 800b2aa:	7ffb      	ldrb	r3, [r7, #31]
 800b2ac:	f003 0307 	and.w	r3, r3, #7
 800b2b0:	777b      	strb	r3, [r7, #29]
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp + 1 )));
 800b2b2:	7fba      	ldrb	r2, [r7, #30]
 800b2b4:	7f7b      	ldrb	r3, [r7, #29]
 800b2b6:	3301      	adds	r3, #1
 800b2b8:	fa02 f303 	lsl.w	r3, r2, r3
 800b2bc:	461a      	mov	r2, r3
 800b2be:	4b28      	ldr	r3, [pc, #160]	; (800b360 <SUBGRF_GetCFO+0xe4>)
 800b2c0:	fbb3 f3f2 	udiv	r3, r3, r2
 800b2c4:	61bb      	str	r3, [r7, #24]
  uint32_t cf_osr = cf_fs / bitRate;
 800b2c6:	69ba      	ldr	r2, [r7, #24]
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	fbb2 f3f3 	udiv	r3, r2, r3
 800b2ce:	617b      	str	r3, [r7, #20]
  uint8_t interp = 1;
 800b2d0:	2301      	movs	r3, #1
 800b2d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 800b2d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b2da:	697a      	ldr	r2, [r7, #20]
 800b2dc:	fb02 f303 	mul.w	r3, r2, r3
 800b2e0:	2b07      	cmp	r3, #7
 800b2e2:	d802      	bhi.n	800b2ea <SUBGRF_GetCFO+0x6e>
  {
    interp = 2;
 800b2e4:	2302      	movs	r3, #2
 800b2e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  if (cf_osr * interp < 4)
 800b2ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b2ee:	697a      	ldr	r2, [r7, #20]
 800b2f0:	fb02 f303 	mul.w	r3, r2, r3
 800b2f4:	2b03      	cmp	r3, #3
 800b2f6:	d802      	bhi.n	800b2fe <SUBGRF_GetCFO+0x82>
  {
    interp = 4;
 800b2f8:	2304      	movs	r3, #4
 800b2fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 800b2fe:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b302:	69bb      	ldr	r3, [r7, #24]
 800b304:	fb02 f303 	mul.w	r3, r2, r3
 800b308:	613b      	str	r3, [r7, #16]
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_GCFORH ) & 0xF ) << 8;
 800b30a:	f44f 60d6 	mov.w	r0, #1712	; 0x6b0
 800b30e:	f7ff fd87 	bl	800ae20 <SUBGRF_ReadRegister>
 800b312:	4603      	mov	r3, r0
 800b314:	021b      	lsls	r3, r3, #8
 800b316:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800b31a:	623b      	str	r3, [r7, #32]
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_GCFORL );
 800b31c:	f240 60b1 	movw	r0, #1713	; 0x6b1
 800b320:	f7ff fd7e 	bl	800ae20 <SUBGRF_ReadRegister>
 800b324:	4603      	mov	r3, r0
 800b326:	461a      	mov	r2, r3
 800b328:	6a3b      	ldr	r3, [r7, #32]
 800b32a:	4313      	orrs	r3, r2
 800b32c:	623b      	str	r3, [r7, #32]
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 800b32e:	6a3b      	ldr	r3, [r7, #32]
 800b330:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b334:	2b00      	cmp	r3, #0
 800b336:	d005      	beq.n	800b344 <SUBGRF_GetCFO+0xc8>
  {
    cfo_bin |= 0xFFFFF000;
 800b338:	6a3b      	ldr	r3, [r7, #32]
 800b33a:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800b33e:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800b342:	623b      	str	r3, [r7, #32]
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 800b344:	693b      	ldr	r3, [r7, #16]
 800b346:	095b      	lsrs	r3, r3, #5
 800b348:	6a3a      	ldr	r2, [r7, #32]
 800b34a:	fb02 f303 	mul.w	r3, r2, r3
 800b34e:	11da      	asrs	r2, r3, #7
 800b350:	683b      	ldr	r3, [r7, #0]
 800b352:	601a      	str	r2, [r3, #0]
}
 800b354:	bf00      	nop
 800b356:	3728      	adds	r7, #40	; 0x28
 800b358:	46bd      	mov	sp, r7
 800b35a:	bd80      	pop	{r7, pc}
 800b35c:	0c0a0804 	.word	0x0c0a0804
 800b360:	01e84800 	.word	0x01e84800

0800b364 <RFW_TransmitLongPacket>:
#endif /* RFW_ENABLE == 1 */

/* Exported functions --------------------------------------------------------*/
int32_t RFW_TransmitLongPacket( uint16_t payload_size, uint32_t timeout,
                                void ( *TxLongPacketGetNextChunkCb )( uint8_t **buffer, uint8_t buffer_size ) )
{
 800b364:	b480      	push	{r7}
 800b366:	b087      	sub	sp, #28
 800b368:	af00      	add	r7, sp, #0
 800b36a:	4603      	mov	r3, r0
 800b36c:	60b9      	str	r1, [r7, #8]
 800b36e:	607a      	str	r2, [r7, #4]
 800b370:	81fb      	strh	r3, [r7, #14]
    int32_t status = 0;
 800b372:	2300      	movs	r3, #0
 800b374:	617b      	str	r3, [r7, #20]
        default:
            break;
        }
    }
#else
    status = -1;
 800b376:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b37a:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 800b37c:	697b      	ldr	r3, [r7, #20]
}
 800b37e:	4618      	mov	r0, r3
 800b380:	371c      	adds	r7, #28
 800b382:	46bd      	mov	sp, r7
 800b384:	bc80      	pop	{r7}
 800b386:	4770      	bx	lr

0800b388 <RFW_ReceiveLongPacket>:

int32_t RFW_ReceiveLongPacket( uint8_t boosted_mode, uint32_t timeout,
                               void ( *RxLongPacketStoreChunkCb )( uint8_t *buffer, uint8_t chunk_size ) )
{
 800b388:	b480      	push	{r7}
 800b38a:	b087      	sub	sp, #28
 800b38c:	af00      	add	r7, sp, #0
 800b38e:	4603      	mov	r3, r0
 800b390:	60b9      	str	r1, [r7, #8]
 800b392:	607a      	str	r2, [r7, #4]
 800b394:	73fb      	strb	r3, [r7, #15]
    int32_t status = 0;
 800b396:	2300      	movs	r3, #0
 800b398:	617b      	str	r3, [r7, #20]
        {
            SUBGRF_SetRx( 0xFFFFFF ); /* Rx Continuous */
        }
    }
#else
    status = -1;
 800b39a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b39e:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 800b3a0:	697b      	ldr	r3, [r7, #20]
}
 800b3a2:	4618      	mov	r0, r3
 800b3a4:	371c      	adds	r7, #28
 800b3a6:	46bd      	mov	sp, r7
 800b3a8:	bc80      	pop	{r7}
 800b3aa:	4770      	bx	lr

0800b3ac <RFW_Init>:

int32_t RFW_Init( ConfigGeneric_t *config, RadioEvents_t *RadioEvents, TimerEvent_t *TimeoutTimerEvent )
{
 800b3ac:	b480      	push	{r7}
 800b3ae:	b085      	sub	sp, #20
 800b3b0:	af00      	add	r7, sp, #0
 800b3b2:	60f8      	str	r0, [r7, #12]
 800b3b4:	60b9      	str	r1, [r7, #8]
 800b3b6:	607a      	str	r2, [r7, #4]
    RFWPacket.Init.Enable = 1;
    /* Initialize Timer for end of fixed packet, started at sync*/
    TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
    return 0;
#else
    return -1;
 800b3b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
#endif /* RFW_ENABLE == 1 */
}
 800b3bc:	4618      	mov	r0, r3
 800b3be:	3714      	adds	r7, #20
 800b3c0:	46bd      	mov	sp, r7
 800b3c2:	bc80      	pop	{r7}
 800b3c4:	4770      	bx	lr

0800b3c6 <RFW_DeInit>:

void RFW_DeInit( void )
{
 800b3c6:	b480      	push	{r7}
 800b3c8:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Enable = 0; /*Disable the RFWPacket decoding*/
#endif /* RFW_ENABLE == 1 */
}
 800b3ca:	bf00      	nop
 800b3cc:	46bd      	mov	sp, r7
 800b3ce:	bc80      	pop	{r7}
 800b3d0:	4770      	bx	lr

0800b3d2 <RFW_Is_Init>:

uint8_t RFW_Is_Init( void )
{
 800b3d2:	b480      	push	{r7}
 800b3d4:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.Init.Enable;
#else
    return 0;
 800b3d6:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 800b3d8:	4618      	mov	r0, r3
 800b3da:	46bd      	mov	sp, r7
 800b3dc:	bc80      	pop	{r7}
 800b3de:	4770      	bx	lr

0800b3e0 <RFW_Is_LongPacketModeEnabled>:

uint8_t RFW_Is_LongPacketModeEnabled( void )
{
 800b3e0:	b480      	push	{r7}
 800b3e2:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.LongPacketModeEnable;
#else
    return 0;
 800b3e4:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 800b3e6:	4618      	mov	r0, r3
 800b3e8:	46bd      	mov	sp, r7
 800b3ea:	bc80      	pop	{r7}
 800b3ec:	4770      	bx	lr

0800b3ee <RFW_SetAntSwitch>:

void RFW_SetAntSwitch( uint8_t AntSwitch )
{
 800b3ee:	b480      	push	{r7}
 800b3f0:	b083      	sub	sp, #12
 800b3f2:	af00      	add	r7, sp, #0
 800b3f4:	4603      	mov	r3, r0
 800b3f6:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.AntSwitchPaSelect = AntSwitch;
#endif /* RFW_ENABLE == 1 */
}
 800b3f8:	bf00      	nop
 800b3fa:	370c      	adds	r7, #12
 800b3fc:	46bd      	mov	sp, r7
 800b3fe:	bc80      	pop	{r7}
 800b400:	4770      	bx	lr

0800b402 <RFW_TransmitInit>:

int32_t RFW_TransmitInit( uint8_t *inOutBuffer, uint8_t size, uint8_t *outSize )
{
 800b402:	b480      	push	{r7}
 800b404:	b087      	sub	sp, #28
 800b406:	af00      	add	r7, sp, #0
 800b408:	60f8      	str	r0, [r7, #12]
 800b40a:	460b      	mov	r3, r1
 800b40c:	607a      	str	r2, [r7, #4]
 800b40e:	72fb      	strb	r3, [r7, #11]
    int32_t status = -1;
 800b410:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b414:	617b      	str	r3, [r7, #20]
        RFWPacket.LongPacketModeEnable = 0;

        status = 0;
    }
#endif /* RFW_ENABLE == 1 */
    return status;
 800b416:	697b      	ldr	r3, [r7, #20]
}
 800b418:	4618      	mov	r0, r3
 800b41a:	371c      	adds	r7, #28
 800b41c:	46bd      	mov	sp, r7
 800b41e:	bc80      	pop	{r7}
 800b420:	4770      	bx	lr

0800b422 <RFW_ReceiveInit>:

int32_t RFW_ReceiveInit( void )
{
 800b422:	b480      	push	{r7}
 800b424:	af00      	add	r7, sp, #0
    RFWPacket.RxPayloadOffset = 0;

    RFWPacket.LongPacketModeEnable = 0;
    return 0;
#else
    return -1;
 800b426:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
#endif /* RFW_ENABLE == 1 */
}
 800b42a:	4618      	mov	r0, r3
 800b42c:	46bd      	mov	sp, r7
 800b42e:	bc80      	pop	{r7}
 800b430:	4770      	bx	lr

0800b432 <RFW_DeInit_TxLongPacket>:

void RFW_DeInit_TxLongPacket( void )
{
 800b432:	b480      	push	{r7}
 800b434:	af00      	add	r7, sp, #0
    /*long packet WA*/
    uint8_t reg = SUBGRF_ReadRegister( SUBGHZ_GPKTCTL1AR );
    SUBGRF_WriteRegister( SUBGHZ_GPKTCTL1AR, reg & ~0x02 ); /* clear infinite_sequence bit */
    SUBGRF_WriteRegister( SUBGHZ_GRTXPLDLEN, 0xFF ); /* RxTxPldLen: reset to 0xFF */
#endif /* RFW_LONGPACKET_ENABLE == 1 */
}
 800b436:	bf00      	nop
 800b438:	46bd      	mov	sp, r7
 800b43a:	bc80      	pop	{r7}
 800b43c:	4770      	bx	lr

0800b43e <RFW_ReceivePayload>:

void RFW_ReceivePayload( void )
{
 800b43e:	b480      	push	{r7}
 800b440:	af00      	add	r7, sp, #0
        /*timeout*/
        SUBGRF_SetStandby( STDBY_RC );
        RFWPacket.Init.RadioEvents->RxTimeout( );
    }
#endif /* RFW_ENABLE == 1 */
}
 800b442:	bf00      	nop
 800b444:	46bd      	mov	sp, r7
 800b446:	bc80      	pop	{r7}
 800b448:	4770      	bx	lr

0800b44a <RFW_SetRadioModem>:

void RFW_SetRadioModem( RadioModems_t Modem )
{
 800b44a:	b480      	push	{r7}
 800b44c:	b083      	sub	sp, #12
 800b44e:	af00      	add	r7, sp, #0
 800b450:	4603      	mov	r3, r0
 800b452:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Modem = Modem;
#endif /* RFW_ENABLE == 1 */
}
 800b454:	bf00      	nop
 800b456:	370c      	adds	r7, #12
 800b458:	46bd      	mov	sp, r7
 800b45a:	bc80      	pop	{r7}
 800b45c:	4770      	bx	lr

0800b45e <MX_SubGHz_Phy_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_SubGHz_Phy_Init(void)
{
 800b45e:	b580      	push	{r7, lr}
 800b460:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_1 */

  /* USER CODE END MX_SubGHz_Phy_Init_1 */
  SystemApp_Init();
 800b462:	f7f7 fb1e 	bl	8002aa2 <SystemApp_Init>
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_1_1 */

  /* USER CODE END MX_SubGHz_Phy_Init_1_1 */
  SubghzApp_Init();
 800b466:	f000 f809 	bl	800b47c <SubghzApp_Init>
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_2 */

  /* USER CODE END MX_SubGHz_Phy_Init_2 */
}
 800b46a:	bf00      	nop
 800b46c:	bd80      	pop	{r7, pc}

0800b46e <MX_SubGHz_Phy_Process>:

void MX_SubGHz_Phy_Process(void)
{
 800b46e:	b480      	push	{r7}
 800b470:	af00      	add	r7, sp, #0

  /* USER CODE END MX_SubGHz_Phy_Process_1 */
  /* USER CODE BEGIN MX_SubGHz_Phy_Process_OS */

  /* USER CODE END MX_SubGHz_Phy_Process_OS */
}
 800b472:	bf00      	nop
 800b474:	46bd      	mov	sp, r7
 800b476:	bc80      	pop	{r7}
 800b478:	4770      	bx	lr
	...

0800b47c <SubghzApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SubghzApp_Init(void)
{
 800b47c:	b580      	push	{r7, lr}
 800b47e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SubghzApp_Init_1 */

  /* USER CODE END SubghzApp_Init_1 */

  /* Radio initialization */
  RadioEvents.TxDone = OnTxDone;
 800b480:	4b0a      	ldr	r3, [pc, #40]	; (800b4ac <SubghzApp_Init+0x30>)
 800b482:	4a0b      	ldr	r2, [pc, #44]	; (800b4b0 <SubghzApp_Init+0x34>)
 800b484:	601a      	str	r2, [r3, #0]
  RadioEvents.RxDone = OnRxDone;
 800b486:	4b09      	ldr	r3, [pc, #36]	; (800b4ac <SubghzApp_Init+0x30>)
 800b488:	4a0a      	ldr	r2, [pc, #40]	; (800b4b4 <SubghzApp_Init+0x38>)
 800b48a:	609a      	str	r2, [r3, #8]
  RadioEvents.TxTimeout = OnTxTimeout;
 800b48c:	4b07      	ldr	r3, [pc, #28]	; (800b4ac <SubghzApp_Init+0x30>)
 800b48e:	4a0a      	ldr	r2, [pc, #40]	; (800b4b8 <SubghzApp_Init+0x3c>)
 800b490:	605a      	str	r2, [r3, #4]
  RadioEvents.RxTimeout = OnRxTimeout;
 800b492:	4b06      	ldr	r3, [pc, #24]	; (800b4ac <SubghzApp_Init+0x30>)
 800b494:	4a09      	ldr	r2, [pc, #36]	; (800b4bc <SubghzApp_Init+0x40>)
 800b496:	60da      	str	r2, [r3, #12]
  RadioEvents.RxError = OnRxError;
 800b498:	4b04      	ldr	r3, [pc, #16]	; (800b4ac <SubghzApp_Init+0x30>)
 800b49a:	4a09      	ldr	r2, [pc, #36]	; (800b4c0 <SubghzApp_Init+0x44>)
 800b49c:	611a      	str	r2, [r3, #16]

  Radio.Init(&RadioEvents);
 800b49e:	4b09      	ldr	r3, [pc, #36]	; (800b4c4 <SubghzApp_Init+0x48>)
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	4802      	ldr	r0, [pc, #8]	; (800b4ac <SubghzApp_Init+0x30>)
 800b4a4:	4798      	blx	r3

  /* USER CODE BEGIN SubghzApp_Init_2 */

  /* USER CODE END SubghzApp_Init_2 */
}
 800b4a6:	bf00      	nop
 800b4a8:	bd80      	pop	{r7, pc}
 800b4aa:	bf00      	nop
 800b4ac:	20000ad0 	.word	0x20000ad0
 800b4b0:	0800b4c9 	.word	0x0800b4c9
 800b4b4:	0800b4d5 	.word	0x0800b4d5
 800b4b8:	0800b4f9 	.word	0x0800b4f9
 800b4bc:	0800b505 	.word	0x0800b505
 800b4c0:	0800b511 	.word	0x0800b511
 800b4c4:	0800ce80 	.word	0x0800ce80

0800b4c8 <OnTxDone>:

/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/
static void OnTxDone(void)
{
 800b4c8:	b480      	push	{r7}
 800b4ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnTxDone */
  /* USER CODE END OnTxDone */
}
 800b4cc:	bf00      	nop
 800b4ce:	46bd      	mov	sp, r7
 800b4d0:	bc80      	pop	{r7}
 800b4d2:	4770      	bx	lr

0800b4d4 <OnRxDone>:

static void OnRxDone(uint8_t *payload, uint16_t size, int16_t rssi, int8_t LoraSnr_FskCfo)
{
 800b4d4:	b480      	push	{r7}
 800b4d6:	b085      	sub	sp, #20
 800b4d8:	af00      	add	r7, sp, #0
 800b4da:	60f8      	str	r0, [r7, #12]
 800b4dc:	4608      	mov	r0, r1
 800b4de:	4611      	mov	r1, r2
 800b4e0:	461a      	mov	r2, r3
 800b4e2:	4603      	mov	r3, r0
 800b4e4:	817b      	strh	r3, [r7, #10]
 800b4e6:	460b      	mov	r3, r1
 800b4e8:	813b      	strh	r3, [r7, #8]
 800b4ea:	4613      	mov	r3, r2
 800b4ec:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnRxDone */
  /* USER CODE END OnRxDone */
}
 800b4ee:	bf00      	nop
 800b4f0:	3714      	adds	r7, #20
 800b4f2:	46bd      	mov	sp, r7
 800b4f4:	bc80      	pop	{r7}
 800b4f6:	4770      	bx	lr

0800b4f8 <OnTxTimeout>:

static void OnTxTimeout(void)
{
 800b4f8:	b480      	push	{r7}
 800b4fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnTxTimeout */
  /* USER CODE END OnTxTimeout */
}
 800b4fc:	bf00      	nop
 800b4fe:	46bd      	mov	sp, r7
 800b500:	bc80      	pop	{r7}
 800b502:	4770      	bx	lr

0800b504 <OnRxTimeout>:

static void OnRxTimeout(void)
{
 800b504:	b480      	push	{r7}
 800b506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnRxTimeout */
  /* USER CODE END OnRxTimeout */
}
 800b508:	bf00      	nop
 800b50a:	46bd      	mov	sp, r7
 800b50c:	bc80      	pop	{r7}
 800b50e:	4770      	bx	lr

0800b510 <OnRxError>:

static void OnRxError(void)
{
 800b510:	b480      	push	{r7}
 800b512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnRxError */
  /* USER CODE END OnRxError */
}
 800b514:	bf00      	nop
 800b516:	46bd      	mov	sp, r7
 800b518:	bc80      	pop	{r7}
 800b51a:	4770      	bx	lr

0800b51c <LL_AHB2_GRP1_EnableClock>:
{
 800b51c:	b480      	push	{r7}
 800b51e:	b085      	sub	sp, #20
 800b520:	af00      	add	r7, sp, #0
 800b522:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800b524:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b528:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b52a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	4313      	orrs	r3, r2
 800b532:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800b534:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b538:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	4013      	ands	r3, r2
 800b53e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800b540:	68fb      	ldr	r3, [r7, #12]
}
 800b542:	bf00      	nop
 800b544:	3714      	adds	r7, #20
 800b546:	46bd      	mov	sp, r7
 800b548:	bc80      	pop	{r7}
 800b54a:	4770      	bx	lr

0800b54c <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 800b54c:	b580      	push	{r7, lr}
 800b54e:	b086      	sub	sp, #24
 800b550:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
#else
  /* 2/ Or implement RBI_Init here */
  int32_t retcode = 0;
 800b552:	2300      	movs	r3, #0
 800b554:	617b      	str	r3, [r7, #20]
  /* USER CODE BEGIN RBI_Init_2 */
	GPIO_InitTypeDef gpio_init_structure = { 0 };
 800b556:	463b      	mov	r3, r7
 800b558:	2200      	movs	r2, #0
 800b55a:	601a      	str	r2, [r3, #0]
 800b55c:	605a      	str	r2, [r3, #4]
 800b55e:	609a      	str	r2, [r3, #8]
 800b560:	60da      	str	r2, [r3, #12]
 800b562:	611a      	str	r2, [r3, #16]

	/* Enable the Radio Switch Clock */
	RF_SW_CTRL3_GPIO_CLK_ENABLE();
 800b564:	2004      	movs	r0, #4
 800b566:	f7ff ffd9 	bl	800b51c <LL_AHB2_GRP1_EnableClock>

	/* Configure the Radio Switch pin */
	gpio_init_structure.Pin = RF_SW_CTRL1_PIN;
 800b56a:	2310      	movs	r3, #16
 800b56c:	603b      	str	r3, [r7, #0]
	gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 800b56e:	2301      	movs	r3, #1
 800b570:	607b      	str	r3, [r7, #4]
	gpio_init_structure.Pull = GPIO_NOPULL;
 800b572:	2300      	movs	r3, #0
 800b574:	60bb      	str	r3, [r7, #8]
	gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b576:	2303      	movs	r3, #3
 800b578:	60fb      	str	r3, [r7, #12]

	HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 800b57a:	463b      	mov	r3, r7
 800b57c:	4619      	mov	r1, r3
 800b57e:	4812      	ldr	r0, [pc, #72]	; (800b5c8 <RBI_Init+0x7c>)
 800b580:	f7f8 fc4e 	bl	8003e20 <HAL_GPIO_Init>

	gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 800b584:	2320      	movs	r3, #32
 800b586:	603b      	str	r3, [r7, #0]
	HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 800b588:	463b      	mov	r3, r7
 800b58a:	4619      	mov	r1, r3
 800b58c:	480e      	ldr	r0, [pc, #56]	; (800b5c8 <RBI_Init+0x7c>)
 800b58e:	f7f8 fc47 	bl	8003e20 <HAL_GPIO_Init>

	gpio_init_structure.Pin = RF_SW_CTRL3_PIN;
 800b592:	2308      	movs	r3, #8
 800b594:	603b      	str	r3, [r7, #0]
	HAL_GPIO_Init(RF_SW_CTRL3_GPIO_PORT, &gpio_init_structure);
 800b596:	463b      	mov	r3, r7
 800b598:	4619      	mov	r1, r3
 800b59a:	480b      	ldr	r0, [pc, #44]	; (800b5c8 <RBI_Init+0x7c>)
 800b59c:	f7f8 fc40 	bl	8003e20 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 800b5a0:	2200      	movs	r2, #0
 800b5a2:	2120      	movs	r1, #32
 800b5a4:	4808      	ldr	r0, [pc, #32]	; (800b5c8 <RBI_Init+0x7c>)
 800b5a6:	f7f8 fd9b 	bl	80040e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 800b5aa:	2200      	movs	r2, #0
 800b5ac:	2110      	movs	r1, #16
 800b5ae:	4806      	ldr	r0, [pc, #24]	; (800b5c8 <RBI_Init+0x7c>)
 800b5b0:	f7f8 fd96 	bl	80040e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET);
 800b5b4:	2200      	movs	r2, #0
 800b5b6:	2108      	movs	r1, #8
 800b5b8:	4803      	ldr	r0, [pc, #12]	; (800b5c8 <RBI_Init+0x7c>)
 800b5ba:	f7f8 fd91 	bl	80040e0 <HAL_GPIO_WritePin>
  /* USER CODE END RBI_Init_2 */
  return retcode;
 800b5be:	697b      	ldr	r3, [r7, #20]
#endif  /* USE_BSP_DRIVER  */
}
 800b5c0:	4618      	mov	r0, r3
 800b5c2:	3718      	adds	r7, #24
 800b5c4:	46bd      	mov	sp, r7
 800b5c6:	bd80      	pop	{r7, pc}
 800b5c8:	48000800 	.word	0x48000800

0800b5cc <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 800b5cc:	b580      	push	{r7, lr}
 800b5ce:	b084      	sub	sp, #16
 800b5d0:	af00      	add	r7, sp, #0
 800b5d2:	4603      	mov	r3, r0
 800b5d4:	71fb      	strb	r3, [r7, #7]
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
#else
  /* 2/ Or implement RBI_ConfigRFSwitch here */
  int32_t retcode = 0;
 800b5d6:	2300      	movs	r3, #0
 800b5d8:	60fb      	str	r3, [r7, #12]
//		break;
//	}

	/*   NUCLEO CONFIG	*/

	switch (Config) {
 800b5da:	79fb      	ldrb	r3, [r7, #7]
 800b5dc:	2b03      	cmp	r3, #3
 800b5de:	d84b      	bhi.n	800b678 <RBI_ConfigRFSwitch+0xac>
 800b5e0:	a201      	add	r2, pc, #4	; (adr r2, 800b5e8 <RBI_ConfigRFSwitch+0x1c>)
 800b5e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5e6:	bf00      	nop
 800b5e8:	0800b5f9 	.word	0x0800b5f9
 800b5ec:	0800b619 	.word	0x0800b619
 800b5f0:	0800b639 	.word	0x0800b639
 800b5f4:	0800b659 	.word	0x0800b659
	case RADIO_SWITCH_OFF: {
		/* Turn off switch */
		HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN,
 800b5f8:	2200      	movs	r2, #0
 800b5fa:	2108      	movs	r1, #8
 800b5fc:	4821      	ldr	r0, [pc, #132]	; (800b684 <RBI_ConfigRFSwitch+0xb8>)
 800b5fe:	f7f8 fd6f 	bl	80040e0 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN,
 800b602:	2200      	movs	r2, #0
 800b604:	2110      	movs	r1, #16
 800b606:	481f      	ldr	r0, [pc, #124]	; (800b684 <RBI_ConfigRFSwitch+0xb8>)
 800b608:	f7f8 fd6a 	bl	80040e0 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN,
 800b60c:	2200      	movs	r2, #0
 800b60e:	2120      	movs	r1, #32
 800b610:	481c      	ldr	r0, [pc, #112]	; (800b684 <RBI_ConfigRFSwitch+0xb8>)
 800b612:	f7f8 fd65 	bl	80040e0 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		break;
 800b616:	e030      	b.n	800b67a <RBI_ConfigRFSwitch+0xae>
	}
	case RADIO_SWITCH_RX: {
		/*Turns On in Rx Mode the RF Switch */
		HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 800b618:	2201      	movs	r2, #1
 800b61a:	2108      	movs	r1, #8
 800b61c:	4819      	ldr	r0, [pc, #100]	; (800b684 <RBI_ConfigRFSwitch+0xb8>)
 800b61e:	f7f8 fd5f 	bl	80040e0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET);
 800b622:	2201      	movs	r2, #1
 800b624:	2110      	movs	r1, #16
 800b626:	4817      	ldr	r0, [pc, #92]	; (800b684 <RBI_ConfigRFSwitch+0xb8>)
 800b628:	f7f8 fd5a 	bl	80040e0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN,
 800b62c:	2200      	movs	r2, #0
 800b62e:	2120      	movs	r1, #32
 800b630:	4814      	ldr	r0, [pc, #80]	; (800b684 <RBI_ConfigRFSwitch+0xb8>)
 800b632:	f7f8 fd55 	bl	80040e0 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		break;
 800b636:	e020      	b.n	800b67a <RBI_ConfigRFSwitch+0xae>
	}
	case RADIO_SWITCH_RFO_LP: {
		/*Turns On in Tx Low Power the RF Switch */
		HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 800b638:	2201      	movs	r2, #1
 800b63a:	2108      	movs	r1, #8
 800b63c:	4811      	ldr	r0, [pc, #68]	; (800b684 <RBI_ConfigRFSwitch+0xb8>)
 800b63e:	f7f8 fd4f 	bl	80040e0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET);
 800b642:	2201      	movs	r2, #1
 800b644:	2110      	movs	r1, #16
 800b646:	480f      	ldr	r0, [pc, #60]	; (800b684 <RBI_ConfigRFSwitch+0xb8>)
 800b648:	f7f8 fd4a 	bl	80040e0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET);
 800b64c:	2201      	movs	r2, #1
 800b64e:	2120      	movs	r1, #32
 800b650:	480c      	ldr	r0, [pc, #48]	; (800b684 <RBI_ConfigRFSwitch+0xb8>)
 800b652:	f7f8 fd45 	bl	80040e0 <HAL_GPIO_WritePin>
		break;
 800b656:	e010      	b.n	800b67a <RBI_ConfigRFSwitch+0xae>
	}
	case RADIO_SWITCH_RFO_HP: {
		/*Turns On in Tx High Power the RF Switch */
		HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 800b658:	2201      	movs	r2, #1
 800b65a:	2108      	movs	r1, #8
 800b65c:	4809      	ldr	r0, [pc, #36]	; (800b684 <RBI_ConfigRFSwitch+0xb8>)
 800b65e:	f7f8 fd3f 	bl	80040e0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN,
 800b662:	2200      	movs	r2, #0
 800b664:	2110      	movs	r1, #16
 800b666:	4807      	ldr	r0, [pc, #28]	; (800b684 <RBI_ConfigRFSwitch+0xb8>)
 800b668:	f7f8 fd3a 	bl	80040e0 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET);
 800b66c:	2201      	movs	r2, #1
 800b66e:	2120      	movs	r1, #32
 800b670:	4804      	ldr	r0, [pc, #16]	; (800b684 <RBI_ConfigRFSwitch+0xb8>)
 800b672:	f7f8 fd35 	bl	80040e0 <HAL_GPIO_WritePin>
		break;
 800b676:	e000      	b.n	800b67a <RBI_ConfigRFSwitch+0xae>
	}
	default:
		break;
 800b678:	bf00      	nop
	}

  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
 800b67a:	68fb      	ldr	r3, [r7, #12]
#endif  /* USE_BSP_DRIVER */
}
 800b67c:	4618      	mov	r0, r3
 800b67e:	3710      	adds	r7, #16
 800b680:	46bd      	mov	sp, r7
 800b682:	bd80      	pop	{r7, pc}
 800b684:	48000800 	.word	0x48000800

0800b688 <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 800b688:	b480      	push	{r7}
 800b68a:	b083      	sub	sp, #12
 800b68c:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
#else
  /* 2/ Or implement RBI_GetTxConfig here */
  int32_t retcode = RBI_CONF_RFO;
 800b68e:	2300      	movs	r3, #0
 800b690:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
	return RADIO_CONF_RFO_LP_HP;
 800b692:	2300      	movs	r3, #0
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800b694:	4618      	mov	r0, r3
 800b696:	370c      	adds	r7, #12
 800b698:	46bd      	mov	sp, r7
 800b69a:	bc80      	pop	{r7}
 800b69c:	4770      	bx	lr

0800b69e <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 800b69e:	b480      	push	{r7}
 800b6a0:	b083      	sub	sp, #12
 800b6a2:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
#else
  /* 2/ Or implement RBI_IsTCXO here */
  int32_t retcode = IS_TCXO_SUPPORTED;
 800b6a4:	2301      	movs	r3, #1
 800b6a6:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_IsTCXO_2 */
	return IS_TCXO_SUPPORTED;
 800b6a8:	2301      	movs	r3, #1
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800b6aa:	4618      	mov	r0, r3
 800b6ac:	370c      	adds	r7, #12
 800b6ae:	46bd      	mov	sp, r7
 800b6b0:	bc80      	pop	{r7}
 800b6b2:	4770      	bx	lr

0800b6b4 <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 800b6b4:	b480      	push	{r7}
 800b6b6:	b083      	sub	sp, #12
 800b6b8:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
#else
  /* 2/ Or implement RBI_IsDCDC here */
  int32_t retcode = IS_DCDC_SUPPORTED;
 800b6ba:	2301      	movs	r3, #1
 800b6bc:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_IsDCDC_2 */
	return IS_DCDC_SUPPORTED;
 800b6be:	2301      	movs	r3, #1
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800b6c0:	4618      	mov	r0, r3
 800b6c2:	370c      	adds	r7, #12
 800b6c4:	46bd      	mov	sp, r7
 800b6c6:	bc80      	pop	{r7}
 800b6c8:	4770      	bx	lr

0800b6ca <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 800b6ca:	b480      	push	{r7}
 800b6cc:	b085      	sub	sp, #20
 800b6ce:	af00      	add	r7, sp, #0
 800b6d0:	4603      	mov	r3, r0
 800b6d2:	71fb      	strb	r3, [r7, #7]
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
#else
  /* 2/ Or implement RBI_RBI_GetRFOMaxPowerConfig here */
  int32_t ret = 0;
 800b6d4:	2300      	movs	r3, #0
 800b6d6:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN RBI_GetRFOMaxPowerConfig_2 */
// #warning user to provide its board code or to call his board driver functions
	if (Config == RBI_RFO_LP_MAXPOWER) {
 800b6d8:	79fb      	ldrb	r3, [r7, #7]
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d102      	bne.n	800b6e4 <RBI_GetRFOMaxPowerConfig+0x1a>
		ret = 15; /*dBm*/
 800b6de:	230f      	movs	r3, #15
 800b6e0:	60fb      	str	r3, [r7, #12]
 800b6e2:	e001      	b.n	800b6e8 <RBI_GetRFOMaxPowerConfig+0x1e>
	} else {
		ret = 22; /*dBm*/
 800b6e4:	2316      	movs	r3, #22
 800b6e6:	60fb      	str	r3, [r7, #12]
	}
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
 800b6e8:	68fb      	ldr	r3, [r7, #12]
#endif  /* USE_BSP_DRIVER  */
}
 800b6ea:	4618      	mov	r0, r3
 800b6ec:	3714      	adds	r7, #20
 800b6ee:	46bd      	mov	sp, r7
 800b6f0:	bc80      	pop	{r7}
 800b6f2:	4770      	bx	lr

0800b6f4 <UTIL_MEM_cpy_8>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
 800b6f4:	b480      	push	{r7}
 800b6f6:	b087      	sub	sp, #28
 800b6f8:	af00      	add	r7, sp, #0
 800b6fa:	60f8      	str	r0, [r7, #12]
 800b6fc:	60b9      	str	r1, [r7, #8]
 800b6fe:	4613      	mov	r3, r2
 800b700:	80fb      	strh	r3, [r7, #6]
  uint8_t* dst8= (uint8_t *) dst;
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	617b      	str	r3, [r7, #20]
  uint8_t* src8= (uint8_t *) src;
 800b706:	68bb      	ldr	r3, [r7, #8]
 800b708:	613b      	str	r3, [r7, #16]

  while( size-- )
 800b70a:	e007      	b.n	800b71c <UTIL_MEM_cpy_8+0x28>
    {
        *dst8++ = *src8++;
 800b70c:	693a      	ldr	r2, [r7, #16]
 800b70e:	1c53      	adds	r3, r2, #1
 800b710:	613b      	str	r3, [r7, #16]
 800b712:	697b      	ldr	r3, [r7, #20]
 800b714:	1c59      	adds	r1, r3, #1
 800b716:	6179      	str	r1, [r7, #20]
 800b718:	7812      	ldrb	r2, [r2, #0]
 800b71a:	701a      	strb	r2, [r3, #0]
  while( size-- )
 800b71c:	88fb      	ldrh	r3, [r7, #6]
 800b71e:	1e5a      	subs	r2, r3, #1
 800b720:	80fa      	strh	r2, [r7, #6]
 800b722:	2b00      	cmp	r3, #0
 800b724:	d1f2      	bne.n	800b70c <UTIL_MEM_cpy_8+0x18>
    }
}
 800b726:	bf00      	nop
 800b728:	bf00      	nop
 800b72a:	371c      	adds	r7, #28
 800b72c:	46bd      	mov	sp, r7
 800b72e:	bc80      	pop	{r7}
 800b730:	4770      	bx	lr

0800b732 <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 800b732:	b480      	push	{r7}
 800b734:	b085      	sub	sp, #20
 800b736:	af00      	add	r7, sp, #0
 800b738:	6078      	str	r0, [r7, #4]
 800b73a:	460b      	mov	r3, r1
 800b73c:	70fb      	strb	r3, [r7, #3]
 800b73e:	4613      	mov	r3, r2
 800b740:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	60fb      	str	r3, [r7, #12]
  while( size-- )
 800b746:	e004      	b.n	800b752 <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	1c5a      	adds	r2, r3, #1
 800b74c:	60fa      	str	r2, [r7, #12]
 800b74e:	78fa      	ldrb	r2, [r7, #3]
 800b750:	701a      	strb	r2, [r3, #0]
  while( size-- )
 800b752:	883b      	ldrh	r3, [r7, #0]
 800b754:	1e5a      	subs	r2, r3, #1
 800b756:	803a      	strh	r2, [r7, #0]
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d1f5      	bne.n	800b748 <UTIL_MEM_set_8+0x16>
  }
}
 800b75c:	bf00      	nop
 800b75e:	bf00      	nop
 800b760:	3714      	adds	r7, #20
 800b762:	46bd      	mov	sp, r7
 800b764:	bc80      	pop	{r7}
 800b766:	4770      	bx	lr

0800b768 <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 800b768:	b580      	push	{r7, lr}
 800b76a:	b084      	sub	sp, #16
 800b76c:	af00      	add	r7, sp, #0
 800b76e:	60f8      	str	r0, [r7, #12]
 800b770:	60b9      	str	r1, [r7, #8]
 800b772:	603b      	str	r3, [r7, #0]
 800b774:	4613      	mov	r3, r2
 800b776:	71fb      	strb	r3, [r7, #7]
  if((TimerObject != NULL) && (Callback != NULL))
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d023      	beq.n	800b7c6 <UTIL_TIMER_Create+0x5e>
 800b77e:	683b      	ldr	r3, [r7, #0]
 800b780:	2b00      	cmp	r3, #0
 800b782:	d020      	beq.n	800b7c6 <UTIL_TIMER_Create+0x5e>
  {
    TimerObject->Timestamp = 0U;
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	2200      	movs	r2, #0
 800b788:	601a      	str	r2, [r3, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 800b78a:	4b11      	ldr	r3, [pc, #68]	; (800b7d0 <UTIL_TIMER_Create+0x68>)
 800b78c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b78e:	68b8      	ldr	r0, [r7, #8]
 800b790:	4798      	blx	r3
 800b792:	4602      	mov	r2, r0
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	605a      	str	r2, [r3, #4]
    TimerObject->IsPending = 0U;
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	2200      	movs	r2, #0
 800b79c:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 0U;
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	2200      	movs	r2, #0
 800b7a2:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	2200      	movs	r2, #0
 800b7a8:	729a      	strb	r2, [r3, #10]
    TimerObject->Callback = Callback;
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	683a      	ldr	r2, [r7, #0]
 800b7ae:	60da      	str	r2, [r3, #12]
    TimerObject->argument = Argument;
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	69ba      	ldr	r2, [r7, #24]
 800b7b4:	611a      	str	r2, [r3, #16]
    TimerObject->Mode = Mode;
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	79fa      	ldrb	r2, [r7, #7]
 800b7ba:	72da      	strb	r2, [r3, #11]
    TimerObject->Next = NULL;
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	2200      	movs	r2, #0
 800b7c0:	615a      	str	r2, [r3, #20]
    return UTIL_TIMER_OK;
 800b7c2:	2300      	movs	r3, #0
 800b7c4:	e000      	b.n	800b7c8 <UTIL_TIMER_Create+0x60>
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 800b7c6:	2301      	movs	r3, #1
  }
}
 800b7c8:	4618      	mov	r0, r3
 800b7ca:	3710      	adds	r7, #16
 800b7cc:	46bd      	mov	sp, r7
 800b7ce:	bd80      	pop	{r7, pc}
 800b7d0:	0800ce2c 	.word	0x0800ce2c

0800b7d4 <UTIL_TIMER_Start>:

UTIL_TIMER_Status_t UTIL_TIMER_Start( UTIL_TIMER_Object_t *TimerObject)
{
 800b7d4:	b580      	push	{r7, lr}
 800b7d6:	b08a      	sub	sp, #40	; 0x28
 800b7d8:	af00      	add	r7, sp, #0
 800b7da:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 800b7dc:	2300      	movs	r3, #0
 800b7de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t elapsedTime;
  uint32_t minValue;
  uint32_t ticks;
    
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d056      	beq.n	800b896 <UTIL_TIMER_Start+0xc2>
 800b7e8:	6878      	ldr	r0, [r7, #4]
 800b7ea:	f000 f929 	bl	800ba40 <TimerExists>
 800b7ee:	4603      	mov	r3, r0
 800b7f0:	f083 0301 	eor.w	r3, r3, #1
 800b7f4:	b2db      	uxtb	r3, r3
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d04d      	beq.n	800b896 <UTIL_TIMER_Start+0xc2>
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	7a5b      	ldrb	r3, [r3, #9]
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d149      	bne.n	800b896 <UTIL_TIMER_Start+0xc2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b802:	f3ef 8310 	mrs	r3, PRIMASK
 800b806:	613b      	str	r3, [r7, #16]
  return(result);
 800b808:	693b      	ldr	r3, [r7, #16]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 800b80a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800b80c:	b672      	cpsid	i
}
 800b80e:	bf00      	nop
    ticks = TimerObject->ReloadValue;
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	685b      	ldr	r3, [r3, #4]
 800b814:	623b      	str	r3, [r7, #32]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 800b816:	4b24      	ldr	r3, [pc, #144]	; (800b8a8 <UTIL_TIMER_Start+0xd4>)
 800b818:	6a1b      	ldr	r3, [r3, #32]
 800b81a:	4798      	blx	r3
 800b81c:	61b8      	str	r0, [r7, #24]
    
    if( ticks < minValue )
 800b81e:	6a3a      	ldr	r2, [r7, #32]
 800b820:	69bb      	ldr	r3, [r7, #24]
 800b822:	429a      	cmp	r2, r3
 800b824:	d201      	bcs.n	800b82a <UTIL_TIMER_Start+0x56>
    {
      ticks = minValue;
 800b826:	69bb      	ldr	r3, [r7, #24]
 800b828:	623b      	str	r3, [r7, #32]
    }
    
    TimerObject->Timestamp = ticks;
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	6a3a      	ldr	r2, [r7, #32]
 800b82e:	601a      	str	r2, [r3, #0]
    TimerObject->IsPending = 0U;
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	2200      	movs	r2, #0
 800b834:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 1U;
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	2201      	movs	r2, #1
 800b83a:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	2200      	movs	r2, #0
 800b840:	729a      	strb	r2, [r3, #10]
    if( TimerListHead == NULL )
 800b842:	4b1a      	ldr	r3, [pc, #104]	; (800b8ac <UTIL_TIMER_Start+0xd8>)
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	2b00      	cmp	r3, #0
 800b848:	d106      	bne.n	800b858 <UTIL_TIMER_Start+0x84>
    {
      UTIL_TimerDriver.SetTimerContext();
 800b84a:	4b17      	ldr	r3, [pc, #92]	; (800b8a8 <UTIL_TIMER_Start+0xd4>)
 800b84c:	691b      	ldr	r3, [r3, #16]
 800b84e:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 800b850:	6878      	ldr	r0, [r7, #4]
 800b852:	f000 f96b 	bl	800bb2c <TimerInsertNewHeadTimer>
 800b856:	e017      	b.n	800b888 <UTIL_TIMER_Start+0xb4>
    }
    else 
    {
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 800b858:	4b13      	ldr	r3, [pc, #76]	; (800b8a8 <UTIL_TIMER_Start+0xd4>)
 800b85a:	699b      	ldr	r3, [r3, #24]
 800b85c:	4798      	blx	r3
 800b85e:	6178      	str	r0, [r7, #20]
      TimerObject->Timestamp += elapsedTime;
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	681a      	ldr	r2, [r3, #0]
 800b864:	697b      	ldr	r3, [r7, #20]
 800b866:	441a      	add	r2, r3
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	601a      	str	r2, [r3, #0]
      
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	681a      	ldr	r2, [r3, #0]
 800b870:	4b0e      	ldr	r3, [pc, #56]	; (800b8ac <UTIL_TIMER_Start+0xd8>)
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	429a      	cmp	r2, r3
 800b878:	d203      	bcs.n	800b882 <UTIL_TIMER_Start+0xae>
      {
        TimerInsertNewHeadTimer( TimerObject);
 800b87a:	6878      	ldr	r0, [r7, #4]
 800b87c:	f000 f956 	bl	800bb2c <TimerInsertNewHeadTimer>
 800b880:	e002      	b.n	800b888 <UTIL_TIMER_Start+0xb4>
      }
      else
      {
        TimerInsertTimer( TimerObject);
 800b882:	6878      	ldr	r0, [r7, #4]
 800b884:	f000 f922 	bl	800bacc <TimerInsertTimer>
 800b888:	69fb      	ldr	r3, [r7, #28]
 800b88a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	f383 8810 	msr	PRIMASK, r3
}
 800b892:	bf00      	nop
  {
 800b894:	e002      	b.n	800b89c <UTIL_TIMER_Start+0xc8>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret =  UTIL_TIMER_INVALID_PARAM;
 800b896:	2301      	movs	r3, #1
 800b898:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return ret;
 800b89c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800b8a0:	4618      	mov	r0, r3
 800b8a2:	3728      	adds	r7, #40	; 0x28
 800b8a4:	46bd      	mov	sp, r7
 800b8a6:	bd80      	pop	{r7, pc}
 800b8a8:	0800ce2c 	.word	0x0800ce2c
 800b8ac:	20000aec 	.word	0x20000aec

0800b8b0 <UTIL_TIMER_Stop>:
  }
  return ret;
}

UTIL_TIMER_Status_t UTIL_TIMER_Stop( UTIL_TIMER_Object_t *TimerObject )
{
 800b8b0:	b580      	push	{r7, lr}
 800b8b2:	b088      	sub	sp, #32
 800b8b4:	af00      	add	r7, sp, #0
 800b8b6:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 800b8b8:	2300      	movs	r3, #0
 800b8ba:	77fb      	strb	r3, [r7, #31]

  if (NULL != TimerObject)
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d05b      	beq.n	800b97a <UTIL_TIMER_Stop+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b8c2:	f3ef 8310 	mrs	r3, PRIMASK
 800b8c6:	60fb      	str	r3, [r7, #12]
  return(result);
 800b8c8:	68fb      	ldr	r3, [r7, #12]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 800b8ca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800b8cc:	b672      	cpsid	i
}
 800b8ce:	bf00      	nop
    UTIL_TIMER_Object_t* prev = TimerListHead;
 800b8d0:	4b2d      	ldr	r3, [pc, #180]	; (800b988 <UTIL_TIMER_Stop+0xd8>)
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	61bb      	str	r3, [r7, #24]
    UTIL_TIMER_Object_t* cur = TimerListHead;
 800b8d6:	4b2c      	ldr	r3, [pc, #176]	; (800b988 <UTIL_TIMER_Stop+0xd8>)
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	617b      	str	r3, [r7, #20]
    TimerObject->IsReloadStopped = 1U;
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	2201      	movs	r2, #1
 800b8e0:	729a      	strb	r2, [r3, #10]
    
    /* List is empty or the Obj to stop does not exist  */
    if(NULL != TimerListHead)
 800b8e2:	4b29      	ldr	r3, [pc, #164]	; (800b988 <UTIL_TIMER_Stop+0xd8>)
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d041      	beq.n	800b96e <UTIL_TIMER_Stop+0xbe>
    {
      TimerObject->IsRunning = 0U;
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	2200      	movs	r2, #0
 800b8ee:	725a      	strb	r2, [r3, #9]
      
      if( TimerListHead == TimerObject ) /* Stop the Head */
 800b8f0:	4b25      	ldr	r3, [pc, #148]	; (800b988 <UTIL_TIMER_Stop+0xd8>)
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	687a      	ldr	r2, [r7, #4]
 800b8f6:	429a      	cmp	r2, r3
 800b8f8:	d134      	bne.n	800b964 <UTIL_TIMER_Stop+0xb4>
      {
          TimerListHead->IsPending = 0;
 800b8fa:	4b23      	ldr	r3, [pc, #140]	; (800b988 <UTIL_TIMER_Stop+0xd8>)
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	2200      	movs	r2, #0
 800b900:	721a      	strb	r2, [r3, #8]
          if( TimerListHead->Next != NULL )
 800b902:	4b21      	ldr	r3, [pc, #132]	; (800b988 <UTIL_TIMER_Stop+0xd8>)
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	695b      	ldr	r3, [r3, #20]
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d00a      	beq.n	800b922 <UTIL_TIMER_Stop+0x72>
          {
            TimerListHead = TimerListHead->Next;
 800b90c:	4b1e      	ldr	r3, [pc, #120]	; (800b988 <UTIL_TIMER_Stop+0xd8>)
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	695b      	ldr	r3, [r3, #20]
 800b912:	4a1d      	ldr	r2, [pc, #116]	; (800b988 <UTIL_TIMER_Stop+0xd8>)
 800b914:	6013      	str	r3, [r2, #0]
            TimerSetTimeout( TimerListHead );
 800b916:	4b1c      	ldr	r3, [pc, #112]	; (800b988 <UTIL_TIMER_Stop+0xd8>)
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	4618      	mov	r0, r3
 800b91c:	f000 f8ac 	bl	800ba78 <TimerSetTimeout>
 800b920:	e023      	b.n	800b96a <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            UTIL_TimerDriver.StopTimerEvt( );
 800b922:	4b1a      	ldr	r3, [pc, #104]	; (800b98c <UTIL_TIMER_Stop+0xdc>)
 800b924:	68db      	ldr	r3, [r3, #12]
 800b926:	4798      	blx	r3
            TimerListHead = NULL;
 800b928:	4b17      	ldr	r3, [pc, #92]	; (800b988 <UTIL_TIMER_Stop+0xd8>)
 800b92a:	2200      	movs	r2, #0
 800b92c:	601a      	str	r2, [r3, #0]
 800b92e:	e01c      	b.n	800b96a <UTIL_TIMER_Stop+0xba>
      }
      else /* Stop an object within the list */
      {      
        while( cur != NULL )
        {
          if( cur == TimerObject )
 800b930:	697a      	ldr	r2, [r7, #20]
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	429a      	cmp	r2, r3
 800b936:	d110      	bne.n	800b95a <UTIL_TIMER_Stop+0xaa>
          {
            if( cur->Next != NULL )
 800b938:	697b      	ldr	r3, [r7, #20]
 800b93a:	695b      	ldr	r3, [r3, #20]
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d006      	beq.n	800b94e <UTIL_TIMER_Stop+0x9e>
            {
              cur = cur->Next;
 800b940:	697b      	ldr	r3, [r7, #20]
 800b942:	695b      	ldr	r3, [r3, #20]
 800b944:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 800b946:	69bb      	ldr	r3, [r7, #24]
 800b948:	697a      	ldr	r2, [r7, #20]
 800b94a:	615a      	str	r2, [r3, #20]
            else
            {
              cur = NULL;
              prev->Next = cur;
            }
            break;
 800b94c:	e00d      	b.n	800b96a <UTIL_TIMER_Stop+0xba>
              cur = NULL;
 800b94e:	2300      	movs	r3, #0
 800b950:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 800b952:	69bb      	ldr	r3, [r7, #24]
 800b954:	697a      	ldr	r2, [r7, #20]
 800b956:	615a      	str	r2, [r3, #20]
            break;
 800b958:	e007      	b.n	800b96a <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            prev = cur;
 800b95a:	697b      	ldr	r3, [r7, #20]
 800b95c:	61bb      	str	r3, [r7, #24]
            cur = cur->Next;
 800b95e:	697b      	ldr	r3, [r7, #20]
 800b960:	695b      	ldr	r3, [r3, #20]
 800b962:	617b      	str	r3, [r7, #20]
        while( cur != NULL )
 800b964:	697b      	ldr	r3, [r7, #20]
 800b966:	2b00      	cmp	r3, #0
 800b968:	d1e2      	bne.n	800b930 <UTIL_TIMER_Stop+0x80>
          }
        }   
      }
      ret = UTIL_TIMER_OK;
 800b96a:	2300      	movs	r3, #0
 800b96c:	77fb      	strb	r3, [r7, #31]
 800b96e:	693b      	ldr	r3, [r7, #16]
 800b970:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b972:	68bb      	ldr	r3, [r7, #8]
 800b974:	f383 8810 	msr	PRIMASK, r3
}
 800b978:	e001      	b.n	800b97e <UTIL_TIMER_Stop+0xce>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret = UTIL_TIMER_INVALID_PARAM;
 800b97a:	2301      	movs	r3, #1
 800b97c:	77fb      	strb	r3, [r7, #31]
  }
  return ret;
 800b97e:	7ffb      	ldrb	r3, [r7, #31]
}
 800b980:	4618      	mov	r0, r3
 800b982:	3720      	adds	r7, #32
 800b984:	46bd      	mov	sp, r7
 800b986:	bd80      	pop	{r7, pc}
 800b988:	20000aec 	.word	0x20000aec
 800b98c:	0800ce2c 	.word	0x0800ce2c

0800b990 <UTIL_TIMER_SetPeriod>:

UTIL_TIMER_Status_t UTIL_TIMER_SetPeriod(UTIL_TIMER_Object_t *TimerObject, uint32_t NewPeriodValue)
{
 800b990:	b580      	push	{r7, lr}
 800b992:	b084      	sub	sp, #16
 800b994:	af00      	add	r7, sp, #0
 800b996:	6078      	str	r0, [r7, #4]
 800b998:	6039      	str	r1, [r7, #0]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 800b99a:	2300      	movs	r3, #0
 800b99c:	73fb      	strb	r3, [r7, #15]
  
  if(NULL == TimerObject)
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d102      	bne.n	800b9aa <UTIL_TIMER_SetPeriod+0x1a>
  {
	  ret = UTIL_TIMER_INVALID_PARAM;
 800b9a4:	2301      	movs	r3, #1
 800b9a6:	73fb      	strb	r3, [r7, #15]
 800b9a8:	e014      	b.n	800b9d4 <UTIL_TIMER_SetPeriod+0x44>
  }
  else
  {
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 800b9aa:	4b0d      	ldr	r3, [pc, #52]	; (800b9e0 <UTIL_TIMER_SetPeriod+0x50>)
 800b9ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9ae:	6838      	ldr	r0, [r7, #0]
 800b9b0:	4798      	blx	r3
 800b9b2:	4602      	mov	r2, r0
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	605a      	str	r2, [r3, #4]
    if(TimerExists(TimerObject))
 800b9b8:	6878      	ldr	r0, [r7, #4]
 800b9ba:	f000 f841 	bl	800ba40 <TimerExists>
 800b9be:	4603      	mov	r3, r0
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d007      	beq.n	800b9d4 <UTIL_TIMER_SetPeriod+0x44>
    {
      (void)UTIL_TIMER_Stop(TimerObject);
 800b9c4:	6878      	ldr	r0, [r7, #4]
 800b9c6:	f7ff ff73 	bl	800b8b0 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 800b9ca:	6878      	ldr	r0, [r7, #4]
 800b9cc:	f7ff ff02 	bl	800b7d4 <UTIL_TIMER_Start>
 800b9d0:	4603      	mov	r3, r0
 800b9d2:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 800b9d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9d6:	4618      	mov	r0, r3
 800b9d8:	3710      	adds	r7, #16
 800b9da:	46bd      	mov	sp, r7
 800b9dc:	bd80      	pop	{r7, pc}
 800b9de:	bf00      	nop
 800b9e0:	0800ce2c 	.word	0x0800ce2c

0800b9e4 <UTIL_TIMER_GetCurrentTime>:
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 800b9e4:	b580      	push	{r7, lr}
 800b9e6:	b082      	sub	sp, #8
 800b9e8:	af00      	add	r7, sp, #0
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 800b9ea:	4b06      	ldr	r3, [pc, #24]	; (800ba04 <UTIL_TIMER_GetCurrentTime+0x20>)
 800b9ec:	69db      	ldr	r3, [r3, #28]
 800b9ee:	4798      	blx	r3
 800b9f0:	6078      	str	r0, [r7, #4]
  return  UTIL_TimerDriver.Tick2ms(now);
 800b9f2:	4b04      	ldr	r3, [pc, #16]	; (800ba04 <UTIL_TIMER_GetCurrentTime+0x20>)
 800b9f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9f6:	6878      	ldr	r0, [r7, #4]
 800b9f8:	4798      	blx	r3
 800b9fa:	4603      	mov	r3, r0
}
 800b9fc:	4618      	mov	r0, r3
 800b9fe:	3708      	adds	r7, #8
 800ba00:	46bd      	mov	sp, r7
 800ba02:	bd80      	pop	{r7, pc}
 800ba04:	0800ce2c 	.word	0x0800ce2c

0800ba08 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 800ba08:	b580      	push	{r7, lr}
 800ba0a:	b084      	sub	sp, #16
 800ba0c:	af00      	add	r7, sp, #0
 800ba0e:	6078      	str	r0, [r7, #4]
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 800ba10:	4b0a      	ldr	r3, [pc, #40]	; (800ba3c <UTIL_TIMER_GetElapsedTime+0x34>)
 800ba12:	69db      	ldr	r3, [r3, #28]
 800ba14:	4798      	blx	r3
 800ba16:	60f8      	str	r0, [r7, #12]
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 800ba18:	4b08      	ldr	r3, [pc, #32]	; (800ba3c <UTIL_TIMER_GetElapsedTime+0x34>)
 800ba1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba1c:	6878      	ldr	r0, [r7, #4]
 800ba1e:	4798      	blx	r3
 800ba20:	60b8      	str	r0, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 800ba22:	4b06      	ldr	r3, [pc, #24]	; (800ba3c <UTIL_TIMER_GetElapsedTime+0x34>)
 800ba24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba26:	68f9      	ldr	r1, [r7, #12]
 800ba28:	68ba      	ldr	r2, [r7, #8]
 800ba2a:	1a8a      	subs	r2, r1, r2
 800ba2c:	4610      	mov	r0, r2
 800ba2e:	4798      	blx	r3
 800ba30:	4603      	mov	r3, r0
}
 800ba32:	4618      	mov	r0, r3
 800ba34:	3710      	adds	r7, #16
 800ba36:	46bd      	mov	sp, r7
 800ba38:	bd80      	pop	{r7, pc}
 800ba3a:	bf00      	nop
 800ba3c:	0800ce2c 	.word	0x0800ce2c

0800ba40 <TimerExists>:
 *
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
 800ba40:	b480      	push	{r7}
 800ba42:	b085      	sub	sp, #20
 800ba44:	af00      	add	r7, sp, #0
 800ba46:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800ba48:	4b0a      	ldr	r3, [pc, #40]	; (800ba74 <TimerExists+0x34>)
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 800ba4e:	e008      	b.n	800ba62 <TimerExists+0x22>
  {
    if( cur == TimerObject )
 800ba50:	68fa      	ldr	r2, [r7, #12]
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	429a      	cmp	r2, r3
 800ba56:	d101      	bne.n	800ba5c <TimerExists+0x1c>
    {
      return true;
 800ba58:	2301      	movs	r3, #1
 800ba5a:	e006      	b.n	800ba6a <TimerExists+0x2a>
    }
    cur = cur->Next;
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	695b      	ldr	r3, [r3, #20]
 800ba60:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d1f3      	bne.n	800ba50 <TimerExists+0x10>
  }
  return false;
 800ba68:	2300      	movs	r3, #0
}
 800ba6a:	4618      	mov	r0, r3
 800ba6c:	3714      	adds	r7, #20
 800ba6e:	46bd      	mov	sp, r7
 800ba70:	bc80      	pop	{r7}
 800ba72:	4770      	bx	lr
 800ba74:	20000aec 	.word	0x20000aec

0800ba78 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 800ba78:	b590      	push	{r4, r7, lr}
 800ba7a:	b085      	sub	sp, #20
 800ba7c:	af00      	add	r7, sp, #0
 800ba7e:	6078      	str	r0, [r7, #4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 800ba80:	4b11      	ldr	r3, [pc, #68]	; (800bac8 <TimerSetTimeout+0x50>)
 800ba82:	6a1b      	ldr	r3, [r3, #32]
 800ba84:	4798      	blx	r3
 800ba86:	60f8      	str	r0, [r7, #12]
  TimerObject->IsPending = 1;
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	2201      	movs	r2, #1
 800ba8c:	721a      	strb	r2, [r3, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	681c      	ldr	r4, [r3, #0]
 800ba92:	4b0d      	ldr	r3, [pc, #52]	; (800bac8 <TimerSetTimeout+0x50>)
 800ba94:	699b      	ldr	r3, [r3, #24]
 800ba96:	4798      	blx	r3
 800ba98:	4602      	mov	r2, r0
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	4413      	add	r3, r2
 800ba9e:	429c      	cmp	r4, r3
 800baa0:	d207      	bcs.n	800bab2 <TimerSetTimeout+0x3a>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 800baa2:	4b09      	ldr	r3, [pc, #36]	; (800bac8 <TimerSetTimeout+0x50>)
 800baa4:	699b      	ldr	r3, [r3, #24]
 800baa6:	4798      	blx	r3
 800baa8:	4602      	mov	r2, r0
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	441a      	add	r2, r3
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	601a      	str	r2, [r3, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 800bab2:	4b05      	ldr	r3, [pc, #20]	; (800bac8 <TimerSetTimeout+0x50>)
 800bab4:	689b      	ldr	r3, [r3, #8]
 800bab6:	687a      	ldr	r2, [r7, #4]
 800bab8:	6812      	ldr	r2, [r2, #0]
 800baba:	4610      	mov	r0, r2
 800babc:	4798      	blx	r3
}
 800babe:	bf00      	nop
 800bac0:	3714      	adds	r7, #20
 800bac2:	46bd      	mov	sp, r7
 800bac4:	bd90      	pop	{r4, r7, pc}
 800bac6:	bf00      	nop
 800bac8:	0800ce2c 	.word	0x0800ce2c

0800bacc <TimerInsertTimer>:
 *     next timer to expire.
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
 800bacc:	b480      	push	{r7}
 800bace:	b085      	sub	sp, #20
 800bad0:	af00      	add	r7, sp, #0
 800bad2:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800bad4:	4b14      	ldr	r3, [pc, #80]	; (800bb28 <TimerInsertTimer+0x5c>)
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	60fb      	str	r3, [r7, #12]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 800bada:	4b13      	ldr	r3, [pc, #76]	; (800bb28 <TimerInsertTimer+0x5c>)
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	695b      	ldr	r3, [r3, #20]
 800bae0:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 800bae2:	e012      	b.n	800bb0a <TimerInsertTimer+0x3e>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	681a      	ldr	r2, [r3, #0]
 800bae8:	68bb      	ldr	r3, [r7, #8]
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	429a      	cmp	r2, r3
 800baee:	d905      	bls.n	800bafc <TimerInsertTimer+0x30>
    {
        cur = next;
 800baf0:	68bb      	ldr	r3, [r7, #8]
 800baf2:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 800baf4:	68bb      	ldr	r3, [r7, #8]
 800baf6:	695b      	ldr	r3, [r3, #20]
 800baf8:	60bb      	str	r3, [r7, #8]
 800bafa:	e006      	b.n	800bb0a <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = TimerObject;
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	687a      	ldr	r2, [r7, #4]
 800bb00:	615a      	str	r2, [r3, #20]
        TimerObject->Next = next;
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	68ba      	ldr	r2, [r7, #8]
 800bb06:	615a      	str	r2, [r3, #20]
        return;
 800bb08:	e009      	b.n	800bb1e <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	695b      	ldr	r3, [r3, #20]
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d1e8      	bne.n	800bae4 <TimerInsertTimer+0x18>

    }
  }
  cur->Next = TimerObject;
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	687a      	ldr	r2, [r7, #4]
 800bb16:	615a      	str	r2, [r3, #20]
  TimerObject->Next = NULL;
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	2200      	movs	r2, #0
 800bb1c:	615a      	str	r2, [r3, #20]
}
 800bb1e:	3714      	adds	r7, #20
 800bb20:	46bd      	mov	sp, r7
 800bb22:	bc80      	pop	{r7}
 800bb24:	4770      	bx	lr
 800bb26:	bf00      	nop
 800bb28:	20000aec 	.word	0x20000aec

0800bb2c <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 800bb2c:	b580      	push	{r7, lr}
 800bb2e:	b084      	sub	sp, #16
 800bb30:	af00      	add	r7, sp, #0
 800bb32:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800bb34:	4b0b      	ldr	r3, [pc, #44]	; (800bb64 <TimerInsertNewHeadTimer+0x38>)
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d002      	beq.n	800bb46 <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsPending = 0;
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	2200      	movs	r2, #0
 800bb44:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	68fa      	ldr	r2, [r7, #12]
 800bb4a:	615a      	str	r2, [r3, #20]
  TimerListHead = TimerObject;
 800bb4c:	4a05      	ldr	r2, [pc, #20]	; (800bb64 <TimerInsertNewHeadTimer+0x38>)
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	6013      	str	r3, [r2, #0]
  TimerSetTimeout( TimerListHead );
 800bb52:	4b04      	ldr	r3, [pc, #16]	; (800bb64 <TimerInsertNewHeadTimer+0x38>)
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	4618      	mov	r0, r3
 800bb58:	f7ff ff8e 	bl	800ba78 <TimerSetTimeout>
}
 800bb5c:	bf00      	nop
 800bb5e:	3710      	adds	r7, #16
 800bb60:	46bd      	mov	sp, r7
 800bb62:	bd80      	pop	{r7, pc}
 800bb64:	20000aec 	.word	0x20000aec

0800bb68 <_vsniprintf_r>:
 800bb68:	b530      	push	{r4, r5, lr}
 800bb6a:	4614      	mov	r4, r2
 800bb6c:	2c00      	cmp	r4, #0
 800bb6e:	b09b      	sub	sp, #108	; 0x6c
 800bb70:	4605      	mov	r5, r0
 800bb72:	461a      	mov	r2, r3
 800bb74:	da05      	bge.n	800bb82 <_vsniprintf_r+0x1a>
 800bb76:	238b      	movs	r3, #139	; 0x8b
 800bb78:	6003      	str	r3, [r0, #0]
 800bb7a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bb7e:	b01b      	add	sp, #108	; 0x6c
 800bb80:	bd30      	pop	{r4, r5, pc}
 800bb82:	f44f 7302 	mov.w	r3, #520	; 0x208
 800bb86:	f8ad 300c 	strh.w	r3, [sp, #12]
 800bb8a:	bf14      	ite	ne
 800bb8c:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800bb90:	4623      	moveq	r3, r4
 800bb92:	9302      	str	r3, [sp, #8]
 800bb94:	9305      	str	r3, [sp, #20]
 800bb96:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bb9a:	9100      	str	r1, [sp, #0]
 800bb9c:	9104      	str	r1, [sp, #16]
 800bb9e:	f8ad 300e 	strh.w	r3, [sp, #14]
 800bba2:	4669      	mov	r1, sp
 800bba4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800bba6:	f000 f8b5 	bl	800bd14 <_svfiprintf_r>
 800bbaa:	1c43      	adds	r3, r0, #1
 800bbac:	bfbc      	itt	lt
 800bbae:	238b      	movlt	r3, #139	; 0x8b
 800bbb0:	602b      	strlt	r3, [r5, #0]
 800bbb2:	2c00      	cmp	r4, #0
 800bbb4:	d0e3      	beq.n	800bb7e <_vsniprintf_r+0x16>
 800bbb6:	9b00      	ldr	r3, [sp, #0]
 800bbb8:	2200      	movs	r2, #0
 800bbba:	701a      	strb	r2, [r3, #0]
 800bbbc:	e7df      	b.n	800bb7e <_vsniprintf_r+0x16>
	...

0800bbc0 <vsniprintf>:
 800bbc0:	b507      	push	{r0, r1, r2, lr}
 800bbc2:	9300      	str	r3, [sp, #0]
 800bbc4:	4613      	mov	r3, r2
 800bbc6:	460a      	mov	r2, r1
 800bbc8:	4601      	mov	r1, r0
 800bbca:	4803      	ldr	r0, [pc, #12]	; (800bbd8 <vsniprintf+0x18>)
 800bbcc:	6800      	ldr	r0, [r0, #0]
 800bbce:	f7ff ffcb 	bl	800bb68 <_vsniprintf_r>
 800bbd2:	b003      	add	sp, #12
 800bbd4:	f85d fb04 	ldr.w	pc, [sp], #4
 800bbd8:	20000064 	.word	0x20000064

0800bbdc <memset>:
 800bbdc:	4402      	add	r2, r0
 800bbde:	4603      	mov	r3, r0
 800bbe0:	4293      	cmp	r3, r2
 800bbe2:	d100      	bne.n	800bbe6 <memset+0xa>
 800bbe4:	4770      	bx	lr
 800bbe6:	f803 1b01 	strb.w	r1, [r3], #1
 800bbea:	e7f9      	b.n	800bbe0 <memset+0x4>

0800bbec <__errno>:
 800bbec:	4b01      	ldr	r3, [pc, #4]	; (800bbf4 <__errno+0x8>)
 800bbee:	6818      	ldr	r0, [r3, #0]
 800bbf0:	4770      	bx	lr
 800bbf2:	bf00      	nop
 800bbf4:	20000064 	.word	0x20000064

0800bbf8 <__libc_init_array>:
 800bbf8:	b570      	push	{r4, r5, r6, lr}
 800bbfa:	4d0d      	ldr	r5, [pc, #52]	; (800bc30 <__libc_init_array+0x38>)
 800bbfc:	4c0d      	ldr	r4, [pc, #52]	; (800bc34 <__libc_init_array+0x3c>)
 800bbfe:	1b64      	subs	r4, r4, r5
 800bc00:	10a4      	asrs	r4, r4, #2
 800bc02:	2600      	movs	r6, #0
 800bc04:	42a6      	cmp	r6, r4
 800bc06:	d109      	bne.n	800bc1c <__libc_init_array+0x24>
 800bc08:	4d0b      	ldr	r5, [pc, #44]	; (800bc38 <__libc_init_array+0x40>)
 800bc0a:	4c0c      	ldr	r4, [pc, #48]	; (800bc3c <__libc_init_array+0x44>)
 800bc0c:	f000 fc68 	bl	800c4e0 <_init>
 800bc10:	1b64      	subs	r4, r4, r5
 800bc12:	10a4      	asrs	r4, r4, #2
 800bc14:	2600      	movs	r6, #0
 800bc16:	42a6      	cmp	r6, r4
 800bc18:	d105      	bne.n	800bc26 <__libc_init_array+0x2e>
 800bc1a:	bd70      	pop	{r4, r5, r6, pc}
 800bc1c:	f855 3b04 	ldr.w	r3, [r5], #4
 800bc20:	4798      	blx	r3
 800bc22:	3601      	adds	r6, #1
 800bc24:	e7ee      	b.n	800bc04 <__libc_init_array+0xc>
 800bc26:	f855 3b04 	ldr.w	r3, [r5], #4
 800bc2a:	4798      	blx	r3
 800bc2c:	3601      	adds	r6, #1
 800bc2e:	e7f2      	b.n	800bc16 <__libc_init_array+0x1e>
 800bc30:	0800cffc 	.word	0x0800cffc
 800bc34:	0800cffc 	.word	0x0800cffc
 800bc38:	0800cffc 	.word	0x0800cffc
 800bc3c:	0800d000 	.word	0x0800d000

0800bc40 <__retarget_lock_acquire_recursive>:
 800bc40:	4770      	bx	lr

0800bc42 <__retarget_lock_release_recursive>:
 800bc42:	4770      	bx	lr

0800bc44 <memcpy>:
 800bc44:	440a      	add	r2, r1
 800bc46:	4291      	cmp	r1, r2
 800bc48:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800bc4c:	d100      	bne.n	800bc50 <memcpy+0xc>
 800bc4e:	4770      	bx	lr
 800bc50:	b510      	push	{r4, lr}
 800bc52:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bc56:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bc5a:	4291      	cmp	r1, r2
 800bc5c:	d1f9      	bne.n	800bc52 <memcpy+0xe>
 800bc5e:	bd10      	pop	{r4, pc}

0800bc60 <__ssputs_r>:
 800bc60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc64:	688e      	ldr	r6, [r1, #8]
 800bc66:	461f      	mov	r7, r3
 800bc68:	42be      	cmp	r6, r7
 800bc6a:	680b      	ldr	r3, [r1, #0]
 800bc6c:	4682      	mov	sl, r0
 800bc6e:	460c      	mov	r4, r1
 800bc70:	4690      	mov	r8, r2
 800bc72:	d82c      	bhi.n	800bcce <__ssputs_r+0x6e>
 800bc74:	898a      	ldrh	r2, [r1, #12]
 800bc76:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bc7a:	d026      	beq.n	800bcca <__ssputs_r+0x6a>
 800bc7c:	6965      	ldr	r5, [r4, #20]
 800bc7e:	6909      	ldr	r1, [r1, #16]
 800bc80:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bc84:	eba3 0901 	sub.w	r9, r3, r1
 800bc88:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bc8c:	1c7b      	adds	r3, r7, #1
 800bc8e:	444b      	add	r3, r9
 800bc90:	106d      	asrs	r5, r5, #1
 800bc92:	429d      	cmp	r5, r3
 800bc94:	bf38      	it	cc
 800bc96:	461d      	movcc	r5, r3
 800bc98:	0553      	lsls	r3, r2, #21
 800bc9a:	d527      	bpl.n	800bcec <__ssputs_r+0x8c>
 800bc9c:	4629      	mov	r1, r5
 800bc9e:	f000 f957 	bl	800bf50 <_malloc_r>
 800bca2:	4606      	mov	r6, r0
 800bca4:	b360      	cbz	r0, 800bd00 <__ssputs_r+0xa0>
 800bca6:	6921      	ldr	r1, [r4, #16]
 800bca8:	464a      	mov	r2, r9
 800bcaa:	f7ff ffcb 	bl	800bc44 <memcpy>
 800bcae:	89a3      	ldrh	r3, [r4, #12]
 800bcb0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bcb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bcb8:	81a3      	strh	r3, [r4, #12]
 800bcba:	6126      	str	r6, [r4, #16]
 800bcbc:	6165      	str	r5, [r4, #20]
 800bcbe:	444e      	add	r6, r9
 800bcc0:	eba5 0509 	sub.w	r5, r5, r9
 800bcc4:	6026      	str	r6, [r4, #0]
 800bcc6:	60a5      	str	r5, [r4, #8]
 800bcc8:	463e      	mov	r6, r7
 800bcca:	42be      	cmp	r6, r7
 800bccc:	d900      	bls.n	800bcd0 <__ssputs_r+0x70>
 800bcce:	463e      	mov	r6, r7
 800bcd0:	6820      	ldr	r0, [r4, #0]
 800bcd2:	4632      	mov	r2, r6
 800bcd4:	4641      	mov	r1, r8
 800bcd6:	f000 fb86 	bl	800c3e6 <memmove>
 800bcda:	68a3      	ldr	r3, [r4, #8]
 800bcdc:	1b9b      	subs	r3, r3, r6
 800bcde:	60a3      	str	r3, [r4, #8]
 800bce0:	6823      	ldr	r3, [r4, #0]
 800bce2:	4433      	add	r3, r6
 800bce4:	6023      	str	r3, [r4, #0]
 800bce6:	2000      	movs	r0, #0
 800bce8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bcec:	462a      	mov	r2, r5
 800bcee:	f000 fb4b 	bl	800c388 <_realloc_r>
 800bcf2:	4606      	mov	r6, r0
 800bcf4:	2800      	cmp	r0, #0
 800bcf6:	d1e0      	bne.n	800bcba <__ssputs_r+0x5a>
 800bcf8:	6921      	ldr	r1, [r4, #16]
 800bcfa:	4650      	mov	r0, sl
 800bcfc:	f000 fb9e 	bl	800c43c <_free_r>
 800bd00:	230c      	movs	r3, #12
 800bd02:	f8ca 3000 	str.w	r3, [sl]
 800bd06:	89a3      	ldrh	r3, [r4, #12]
 800bd08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bd0c:	81a3      	strh	r3, [r4, #12]
 800bd0e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bd12:	e7e9      	b.n	800bce8 <__ssputs_r+0x88>

0800bd14 <_svfiprintf_r>:
 800bd14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd18:	4698      	mov	r8, r3
 800bd1a:	898b      	ldrh	r3, [r1, #12]
 800bd1c:	061b      	lsls	r3, r3, #24
 800bd1e:	b09d      	sub	sp, #116	; 0x74
 800bd20:	4607      	mov	r7, r0
 800bd22:	460d      	mov	r5, r1
 800bd24:	4614      	mov	r4, r2
 800bd26:	d50e      	bpl.n	800bd46 <_svfiprintf_r+0x32>
 800bd28:	690b      	ldr	r3, [r1, #16]
 800bd2a:	b963      	cbnz	r3, 800bd46 <_svfiprintf_r+0x32>
 800bd2c:	2140      	movs	r1, #64	; 0x40
 800bd2e:	f000 f90f 	bl	800bf50 <_malloc_r>
 800bd32:	6028      	str	r0, [r5, #0]
 800bd34:	6128      	str	r0, [r5, #16]
 800bd36:	b920      	cbnz	r0, 800bd42 <_svfiprintf_r+0x2e>
 800bd38:	230c      	movs	r3, #12
 800bd3a:	603b      	str	r3, [r7, #0]
 800bd3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bd40:	e0d0      	b.n	800bee4 <_svfiprintf_r+0x1d0>
 800bd42:	2340      	movs	r3, #64	; 0x40
 800bd44:	616b      	str	r3, [r5, #20]
 800bd46:	2300      	movs	r3, #0
 800bd48:	9309      	str	r3, [sp, #36]	; 0x24
 800bd4a:	2320      	movs	r3, #32
 800bd4c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bd50:	f8cd 800c 	str.w	r8, [sp, #12]
 800bd54:	2330      	movs	r3, #48	; 0x30
 800bd56:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800befc <_svfiprintf_r+0x1e8>
 800bd5a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bd5e:	f04f 0901 	mov.w	r9, #1
 800bd62:	4623      	mov	r3, r4
 800bd64:	469a      	mov	sl, r3
 800bd66:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bd6a:	b10a      	cbz	r2, 800bd70 <_svfiprintf_r+0x5c>
 800bd6c:	2a25      	cmp	r2, #37	; 0x25
 800bd6e:	d1f9      	bne.n	800bd64 <_svfiprintf_r+0x50>
 800bd70:	ebba 0b04 	subs.w	fp, sl, r4
 800bd74:	d00b      	beq.n	800bd8e <_svfiprintf_r+0x7a>
 800bd76:	465b      	mov	r3, fp
 800bd78:	4622      	mov	r2, r4
 800bd7a:	4629      	mov	r1, r5
 800bd7c:	4638      	mov	r0, r7
 800bd7e:	f7ff ff6f 	bl	800bc60 <__ssputs_r>
 800bd82:	3001      	adds	r0, #1
 800bd84:	f000 80a9 	beq.w	800beda <_svfiprintf_r+0x1c6>
 800bd88:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bd8a:	445a      	add	r2, fp
 800bd8c:	9209      	str	r2, [sp, #36]	; 0x24
 800bd8e:	f89a 3000 	ldrb.w	r3, [sl]
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	f000 80a1 	beq.w	800beda <_svfiprintf_r+0x1c6>
 800bd98:	2300      	movs	r3, #0
 800bd9a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bd9e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bda2:	f10a 0a01 	add.w	sl, sl, #1
 800bda6:	9304      	str	r3, [sp, #16]
 800bda8:	9307      	str	r3, [sp, #28]
 800bdaa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bdae:	931a      	str	r3, [sp, #104]	; 0x68
 800bdb0:	4654      	mov	r4, sl
 800bdb2:	2205      	movs	r2, #5
 800bdb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bdb8:	4850      	ldr	r0, [pc, #320]	; (800befc <_svfiprintf_r+0x1e8>)
 800bdba:	f7f4 f9e1 	bl	8000180 <memchr>
 800bdbe:	9a04      	ldr	r2, [sp, #16]
 800bdc0:	b9d8      	cbnz	r0, 800bdfa <_svfiprintf_r+0xe6>
 800bdc2:	06d0      	lsls	r0, r2, #27
 800bdc4:	bf44      	itt	mi
 800bdc6:	2320      	movmi	r3, #32
 800bdc8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bdcc:	0711      	lsls	r1, r2, #28
 800bdce:	bf44      	itt	mi
 800bdd0:	232b      	movmi	r3, #43	; 0x2b
 800bdd2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bdd6:	f89a 3000 	ldrb.w	r3, [sl]
 800bdda:	2b2a      	cmp	r3, #42	; 0x2a
 800bddc:	d015      	beq.n	800be0a <_svfiprintf_r+0xf6>
 800bdde:	9a07      	ldr	r2, [sp, #28]
 800bde0:	4654      	mov	r4, sl
 800bde2:	2000      	movs	r0, #0
 800bde4:	f04f 0c0a 	mov.w	ip, #10
 800bde8:	4621      	mov	r1, r4
 800bdea:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bdee:	3b30      	subs	r3, #48	; 0x30
 800bdf0:	2b09      	cmp	r3, #9
 800bdf2:	d94d      	bls.n	800be90 <_svfiprintf_r+0x17c>
 800bdf4:	b1b0      	cbz	r0, 800be24 <_svfiprintf_r+0x110>
 800bdf6:	9207      	str	r2, [sp, #28]
 800bdf8:	e014      	b.n	800be24 <_svfiprintf_r+0x110>
 800bdfa:	eba0 0308 	sub.w	r3, r0, r8
 800bdfe:	fa09 f303 	lsl.w	r3, r9, r3
 800be02:	4313      	orrs	r3, r2
 800be04:	9304      	str	r3, [sp, #16]
 800be06:	46a2      	mov	sl, r4
 800be08:	e7d2      	b.n	800bdb0 <_svfiprintf_r+0x9c>
 800be0a:	9b03      	ldr	r3, [sp, #12]
 800be0c:	1d19      	adds	r1, r3, #4
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	9103      	str	r1, [sp, #12]
 800be12:	2b00      	cmp	r3, #0
 800be14:	bfbb      	ittet	lt
 800be16:	425b      	neglt	r3, r3
 800be18:	f042 0202 	orrlt.w	r2, r2, #2
 800be1c:	9307      	strge	r3, [sp, #28]
 800be1e:	9307      	strlt	r3, [sp, #28]
 800be20:	bfb8      	it	lt
 800be22:	9204      	strlt	r2, [sp, #16]
 800be24:	7823      	ldrb	r3, [r4, #0]
 800be26:	2b2e      	cmp	r3, #46	; 0x2e
 800be28:	d10c      	bne.n	800be44 <_svfiprintf_r+0x130>
 800be2a:	7863      	ldrb	r3, [r4, #1]
 800be2c:	2b2a      	cmp	r3, #42	; 0x2a
 800be2e:	d134      	bne.n	800be9a <_svfiprintf_r+0x186>
 800be30:	9b03      	ldr	r3, [sp, #12]
 800be32:	1d1a      	adds	r2, r3, #4
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	9203      	str	r2, [sp, #12]
 800be38:	2b00      	cmp	r3, #0
 800be3a:	bfb8      	it	lt
 800be3c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800be40:	3402      	adds	r4, #2
 800be42:	9305      	str	r3, [sp, #20]
 800be44:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800bf00 <_svfiprintf_r+0x1ec>
 800be48:	7821      	ldrb	r1, [r4, #0]
 800be4a:	2203      	movs	r2, #3
 800be4c:	4650      	mov	r0, sl
 800be4e:	f7f4 f997 	bl	8000180 <memchr>
 800be52:	b138      	cbz	r0, 800be64 <_svfiprintf_r+0x150>
 800be54:	9b04      	ldr	r3, [sp, #16]
 800be56:	eba0 000a 	sub.w	r0, r0, sl
 800be5a:	2240      	movs	r2, #64	; 0x40
 800be5c:	4082      	lsls	r2, r0
 800be5e:	4313      	orrs	r3, r2
 800be60:	3401      	adds	r4, #1
 800be62:	9304      	str	r3, [sp, #16]
 800be64:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be68:	4826      	ldr	r0, [pc, #152]	; (800bf04 <_svfiprintf_r+0x1f0>)
 800be6a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800be6e:	2206      	movs	r2, #6
 800be70:	f7f4 f986 	bl	8000180 <memchr>
 800be74:	2800      	cmp	r0, #0
 800be76:	d038      	beq.n	800beea <_svfiprintf_r+0x1d6>
 800be78:	4b23      	ldr	r3, [pc, #140]	; (800bf08 <_svfiprintf_r+0x1f4>)
 800be7a:	bb1b      	cbnz	r3, 800bec4 <_svfiprintf_r+0x1b0>
 800be7c:	9b03      	ldr	r3, [sp, #12]
 800be7e:	3307      	adds	r3, #7
 800be80:	f023 0307 	bic.w	r3, r3, #7
 800be84:	3308      	adds	r3, #8
 800be86:	9303      	str	r3, [sp, #12]
 800be88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be8a:	4433      	add	r3, r6
 800be8c:	9309      	str	r3, [sp, #36]	; 0x24
 800be8e:	e768      	b.n	800bd62 <_svfiprintf_r+0x4e>
 800be90:	fb0c 3202 	mla	r2, ip, r2, r3
 800be94:	460c      	mov	r4, r1
 800be96:	2001      	movs	r0, #1
 800be98:	e7a6      	b.n	800bde8 <_svfiprintf_r+0xd4>
 800be9a:	2300      	movs	r3, #0
 800be9c:	3401      	adds	r4, #1
 800be9e:	9305      	str	r3, [sp, #20]
 800bea0:	4619      	mov	r1, r3
 800bea2:	f04f 0c0a 	mov.w	ip, #10
 800bea6:	4620      	mov	r0, r4
 800bea8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800beac:	3a30      	subs	r2, #48	; 0x30
 800beae:	2a09      	cmp	r2, #9
 800beb0:	d903      	bls.n	800beba <_svfiprintf_r+0x1a6>
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	d0c6      	beq.n	800be44 <_svfiprintf_r+0x130>
 800beb6:	9105      	str	r1, [sp, #20]
 800beb8:	e7c4      	b.n	800be44 <_svfiprintf_r+0x130>
 800beba:	fb0c 2101 	mla	r1, ip, r1, r2
 800bebe:	4604      	mov	r4, r0
 800bec0:	2301      	movs	r3, #1
 800bec2:	e7f0      	b.n	800bea6 <_svfiprintf_r+0x192>
 800bec4:	ab03      	add	r3, sp, #12
 800bec6:	9300      	str	r3, [sp, #0]
 800bec8:	462a      	mov	r2, r5
 800beca:	4b10      	ldr	r3, [pc, #64]	; (800bf0c <_svfiprintf_r+0x1f8>)
 800becc:	a904      	add	r1, sp, #16
 800bece:	4638      	mov	r0, r7
 800bed0:	f3af 8000 	nop.w
 800bed4:	1c42      	adds	r2, r0, #1
 800bed6:	4606      	mov	r6, r0
 800bed8:	d1d6      	bne.n	800be88 <_svfiprintf_r+0x174>
 800beda:	89ab      	ldrh	r3, [r5, #12]
 800bedc:	065b      	lsls	r3, r3, #25
 800bede:	f53f af2d 	bmi.w	800bd3c <_svfiprintf_r+0x28>
 800bee2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bee4:	b01d      	add	sp, #116	; 0x74
 800bee6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800beea:	ab03      	add	r3, sp, #12
 800beec:	9300      	str	r3, [sp, #0]
 800beee:	462a      	mov	r2, r5
 800bef0:	4b06      	ldr	r3, [pc, #24]	; (800bf0c <_svfiprintf_r+0x1f8>)
 800bef2:	a904      	add	r1, sp, #16
 800bef4:	4638      	mov	r0, r7
 800bef6:	f000 f919 	bl	800c12c <_printf_i>
 800befa:	e7eb      	b.n	800bed4 <_svfiprintf_r+0x1c0>
 800befc:	0800cfc0 	.word	0x0800cfc0
 800bf00:	0800cfc6 	.word	0x0800cfc6
 800bf04:	0800cfca 	.word	0x0800cfca
 800bf08:	00000000 	.word	0x00000000
 800bf0c:	0800bc61 	.word	0x0800bc61

0800bf10 <sbrk_aligned>:
 800bf10:	b570      	push	{r4, r5, r6, lr}
 800bf12:	4e0e      	ldr	r6, [pc, #56]	; (800bf4c <sbrk_aligned+0x3c>)
 800bf14:	460c      	mov	r4, r1
 800bf16:	6831      	ldr	r1, [r6, #0]
 800bf18:	4605      	mov	r5, r0
 800bf1a:	b911      	cbnz	r1, 800bf22 <sbrk_aligned+0x12>
 800bf1c:	f000 fa7e 	bl	800c41c <_sbrk_r>
 800bf20:	6030      	str	r0, [r6, #0]
 800bf22:	4621      	mov	r1, r4
 800bf24:	4628      	mov	r0, r5
 800bf26:	f000 fa79 	bl	800c41c <_sbrk_r>
 800bf2a:	1c43      	adds	r3, r0, #1
 800bf2c:	d00a      	beq.n	800bf44 <sbrk_aligned+0x34>
 800bf2e:	1cc4      	adds	r4, r0, #3
 800bf30:	f024 0403 	bic.w	r4, r4, #3
 800bf34:	42a0      	cmp	r0, r4
 800bf36:	d007      	beq.n	800bf48 <sbrk_aligned+0x38>
 800bf38:	1a21      	subs	r1, r4, r0
 800bf3a:	4628      	mov	r0, r5
 800bf3c:	f000 fa6e 	bl	800c41c <_sbrk_r>
 800bf40:	3001      	adds	r0, #1
 800bf42:	d101      	bne.n	800bf48 <sbrk_aligned+0x38>
 800bf44:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800bf48:	4620      	mov	r0, r4
 800bf4a:	bd70      	pop	{r4, r5, r6, pc}
 800bf4c:	20000c30 	.word	0x20000c30

0800bf50 <_malloc_r>:
 800bf50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bf54:	1ccd      	adds	r5, r1, #3
 800bf56:	f025 0503 	bic.w	r5, r5, #3
 800bf5a:	3508      	adds	r5, #8
 800bf5c:	2d0c      	cmp	r5, #12
 800bf5e:	bf38      	it	cc
 800bf60:	250c      	movcc	r5, #12
 800bf62:	2d00      	cmp	r5, #0
 800bf64:	4607      	mov	r7, r0
 800bf66:	db01      	blt.n	800bf6c <_malloc_r+0x1c>
 800bf68:	42a9      	cmp	r1, r5
 800bf6a:	d905      	bls.n	800bf78 <_malloc_r+0x28>
 800bf6c:	230c      	movs	r3, #12
 800bf6e:	603b      	str	r3, [r7, #0]
 800bf70:	2600      	movs	r6, #0
 800bf72:	4630      	mov	r0, r6
 800bf74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bf78:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c04c <_malloc_r+0xfc>
 800bf7c:	f000 f9f8 	bl	800c370 <__malloc_lock>
 800bf80:	f8d8 3000 	ldr.w	r3, [r8]
 800bf84:	461c      	mov	r4, r3
 800bf86:	bb5c      	cbnz	r4, 800bfe0 <_malloc_r+0x90>
 800bf88:	4629      	mov	r1, r5
 800bf8a:	4638      	mov	r0, r7
 800bf8c:	f7ff ffc0 	bl	800bf10 <sbrk_aligned>
 800bf90:	1c43      	adds	r3, r0, #1
 800bf92:	4604      	mov	r4, r0
 800bf94:	d155      	bne.n	800c042 <_malloc_r+0xf2>
 800bf96:	f8d8 4000 	ldr.w	r4, [r8]
 800bf9a:	4626      	mov	r6, r4
 800bf9c:	2e00      	cmp	r6, #0
 800bf9e:	d145      	bne.n	800c02c <_malloc_r+0xdc>
 800bfa0:	2c00      	cmp	r4, #0
 800bfa2:	d048      	beq.n	800c036 <_malloc_r+0xe6>
 800bfa4:	6823      	ldr	r3, [r4, #0]
 800bfa6:	4631      	mov	r1, r6
 800bfa8:	4638      	mov	r0, r7
 800bfaa:	eb04 0903 	add.w	r9, r4, r3
 800bfae:	f000 fa35 	bl	800c41c <_sbrk_r>
 800bfb2:	4581      	cmp	r9, r0
 800bfb4:	d13f      	bne.n	800c036 <_malloc_r+0xe6>
 800bfb6:	6821      	ldr	r1, [r4, #0]
 800bfb8:	1a6d      	subs	r5, r5, r1
 800bfba:	4629      	mov	r1, r5
 800bfbc:	4638      	mov	r0, r7
 800bfbe:	f7ff ffa7 	bl	800bf10 <sbrk_aligned>
 800bfc2:	3001      	adds	r0, #1
 800bfc4:	d037      	beq.n	800c036 <_malloc_r+0xe6>
 800bfc6:	6823      	ldr	r3, [r4, #0]
 800bfc8:	442b      	add	r3, r5
 800bfca:	6023      	str	r3, [r4, #0]
 800bfcc:	f8d8 3000 	ldr.w	r3, [r8]
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d038      	beq.n	800c046 <_malloc_r+0xf6>
 800bfd4:	685a      	ldr	r2, [r3, #4]
 800bfd6:	42a2      	cmp	r2, r4
 800bfd8:	d12b      	bne.n	800c032 <_malloc_r+0xe2>
 800bfda:	2200      	movs	r2, #0
 800bfdc:	605a      	str	r2, [r3, #4]
 800bfde:	e00f      	b.n	800c000 <_malloc_r+0xb0>
 800bfe0:	6822      	ldr	r2, [r4, #0]
 800bfe2:	1b52      	subs	r2, r2, r5
 800bfe4:	d41f      	bmi.n	800c026 <_malloc_r+0xd6>
 800bfe6:	2a0b      	cmp	r2, #11
 800bfe8:	d917      	bls.n	800c01a <_malloc_r+0xca>
 800bfea:	1961      	adds	r1, r4, r5
 800bfec:	42a3      	cmp	r3, r4
 800bfee:	6025      	str	r5, [r4, #0]
 800bff0:	bf18      	it	ne
 800bff2:	6059      	strne	r1, [r3, #4]
 800bff4:	6863      	ldr	r3, [r4, #4]
 800bff6:	bf08      	it	eq
 800bff8:	f8c8 1000 	streq.w	r1, [r8]
 800bffc:	5162      	str	r2, [r4, r5]
 800bffe:	604b      	str	r3, [r1, #4]
 800c000:	4638      	mov	r0, r7
 800c002:	f104 060b 	add.w	r6, r4, #11
 800c006:	f000 f9b9 	bl	800c37c <__malloc_unlock>
 800c00a:	f026 0607 	bic.w	r6, r6, #7
 800c00e:	1d23      	adds	r3, r4, #4
 800c010:	1af2      	subs	r2, r6, r3
 800c012:	d0ae      	beq.n	800bf72 <_malloc_r+0x22>
 800c014:	1b9b      	subs	r3, r3, r6
 800c016:	50a3      	str	r3, [r4, r2]
 800c018:	e7ab      	b.n	800bf72 <_malloc_r+0x22>
 800c01a:	42a3      	cmp	r3, r4
 800c01c:	6862      	ldr	r2, [r4, #4]
 800c01e:	d1dd      	bne.n	800bfdc <_malloc_r+0x8c>
 800c020:	f8c8 2000 	str.w	r2, [r8]
 800c024:	e7ec      	b.n	800c000 <_malloc_r+0xb0>
 800c026:	4623      	mov	r3, r4
 800c028:	6864      	ldr	r4, [r4, #4]
 800c02a:	e7ac      	b.n	800bf86 <_malloc_r+0x36>
 800c02c:	4634      	mov	r4, r6
 800c02e:	6876      	ldr	r6, [r6, #4]
 800c030:	e7b4      	b.n	800bf9c <_malloc_r+0x4c>
 800c032:	4613      	mov	r3, r2
 800c034:	e7cc      	b.n	800bfd0 <_malloc_r+0x80>
 800c036:	230c      	movs	r3, #12
 800c038:	603b      	str	r3, [r7, #0]
 800c03a:	4638      	mov	r0, r7
 800c03c:	f000 f99e 	bl	800c37c <__malloc_unlock>
 800c040:	e797      	b.n	800bf72 <_malloc_r+0x22>
 800c042:	6025      	str	r5, [r4, #0]
 800c044:	e7dc      	b.n	800c000 <_malloc_r+0xb0>
 800c046:	605b      	str	r3, [r3, #4]
 800c048:	deff      	udf	#255	; 0xff
 800c04a:	bf00      	nop
 800c04c:	20000c2c 	.word	0x20000c2c

0800c050 <_printf_common>:
 800c050:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c054:	4616      	mov	r6, r2
 800c056:	4699      	mov	r9, r3
 800c058:	688a      	ldr	r2, [r1, #8]
 800c05a:	690b      	ldr	r3, [r1, #16]
 800c05c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c060:	4293      	cmp	r3, r2
 800c062:	bfb8      	it	lt
 800c064:	4613      	movlt	r3, r2
 800c066:	6033      	str	r3, [r6, #0]
 800c068:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c06c:	4607      	mov	r7, r0
 800c06e:	460c      	mov	r4, r1
 800c070:	b10a      	cbz	r2, 800c076 <_printf_common+0x26>
 800c072:	3301      	adds	r3, #1
 800c074:	6033      	str	r3, [r6, #0]
 800c076:	6823      	ldr	r3, [r4, #0]
 800c078:	0699      	lsls	r1, r3, #26
 800c07a:	bf42      	ittt	mi
 800c07c:	6833      	ldrmi	r3, [r6, #0]
 800c07e:	3302      	addmi	r3, #2
 800c080:	6033      	strmi	r3, [r6, #0]
 800c082:	6825      	ldr	r5, [r4, #0]
 800c084:	f015 0506 	ands.w	r5, r5, #6
 800c088:	d106      	bne.n	800c098 <_printf_common+0x48>
 800c08a:	f104 0a19 	add.w	sl, r4, #25
 800c08e:	68e3      	ldr	r3, [r4, #12]
 800c090:	6832      	ldr	r2, [r6, #0]
 800c092:	1a9b      	subs	r3, r3, r2
 800c094:	42ab      	cmp	r3, r5
 800c096:	dc26      	bgt.n	800c0e6 <_printf_common+0x96>
 800c098:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c09c:	1e13      	subs	r3, r2, #0
 800c09e:	6822      	ldr	r2, [r4, #0]
 800c0a0:	bf18      	it	ne
 800c0a2:	2301      	movne	r3, #1
 800c0a4:	0692      	lsls	r2, r2, #26
 800c0a6:	d42b      	bmi.n	800c100 <_printf_common+0xb0>
 800c0a8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c0ac:	4649      	mov	r1, r9
 800c0ae:	4638      	mov	r0, r7
 800c0b0:	47c0      	blx	r8
 800c0b2:	3001      	adds	r0, #1
 800c0b4:	d01e      	beq.n	800c0f4 <_printf_common+0xa4>
 800c0b6:	6823      	ldr	r3, [r4, #0]
 800c0b8:	6922      	ldr	r2, [r4, #16]
 800c0ba:	f003 0306 	and.w	r3, r3, #6
 800c0be:	2b04      	cmp	r3, #4
 800c0c0:	bf02      	ittt	eq
 800c0c2:	68e5      	ldreq	r5, [r4, #12]
 800c0c4:	6833      	ldreq	r3, [r6, #0]
 800c0c6:	1aed      	subeq	r5, r5, r3
 800c0c8:	68a3      	ldr	r3, [r4, #8]
 800c0ca:	bf0c      	ite	eq
 800c0cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c0d0:	2500      	movne	r5, #0
 800c0d2:	4293      	cmp	r3, r2
 800c0d4:	bfc4      	itt	gt
 800c0d6:	1a9b      	subgt	r3, r3, r2
 800c0d8:	18ed      	addgt	r5, r5, r3
 800c0da:	2600      	movs	r6, #0
 800c0dc:	341a      	adds	r4, #26
 800c0de:	42b5      	cmp	r5, r6
 800c0e0:	d11a      	bne.n	800c118 <_printf_common+0xc8>
 800c0e2:	2000      	movs	r0, #0
 800c0e4:	e008      	b.n	800c0f8 <_printf_common+0xa8>
 800c0e6:	2301      	movs	r3, #1
 800c0e8:	4652      	mov	r2, sl
 800c0ea:	4649      	mov	r1, r9
 800c0ec:	4638      	mov	r0, r7
 800c0ee:	47c0      	blx	r8
 800c0f0:	3001      	adds	r0, #1
 800c0f2:	d103      	bne.n	800c0fc <_printf_common+0xac>
 800c0f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c0f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c0fc:	3501      	adds	r5, #1
 800c0fe:	e7c6      	b.n	800c08e <_printf_common+0x3e>
 800c100:	18e1      	adds	r1, r4, r3
 800c102:	1c5a      	adds	r2, r3, #1
 800c104:	2030      	movs	r0, #48	; 0x30
 800c106:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c10a:	4422      	add	r2, r4
 800c10c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c110:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c114:	3302      	adds	r3, #2
 800c116:	e7c7      	b.n	800c0a8 <_printf_common+0x58>
 800c118:	2301      	movs	r3, #1
 800c11a:	4622      	mov	r2, r4
 800c11c:	4649      	mov	r1, r9
 800c11e:	4638      	mov	r0, r7
 800c120:	47c0      	blx	r8
 800c122:	3001      	adds	r0, #1
 800c124:	d0e6      	beq.n	800c0f4 <_printf_common+0xa4>
 800c126:	3601      	adds	r6, #1
 800c128:	e7d9      	b.n	800c0de <_printf_common+0x8e>
	...

0800c12c <_printf_i>:
 800c12c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c130:	7e0f      	ldrb	r7, [r1, #24]
 800c132:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c134:	2f78      	cmp	r7, #120	; 0x78
 800c136:	4691      	mov	r9, r2
 800c138:	4680      	mov	r8, r0
 800c13a:	460c      	mov	r4, r1
 800c13c:	469a      	mov	sl, r3
 800c13e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c142:	d807      	bhi.n	800c154 <_printf_i+0x28>
 800c144:	2f62      	cmp	r7, #98	; 0x62
 800c146:	d80a      	bhi.n	800c15e <_printf_i+0x32>
 800c148:	2f00      	cmp	r7, #0
 800c14a:	f000 80d4 	beq.w	800c2f6 <_printf_i+0x1ca>
 800c14e:	2f58      	cmp	r7, #88	; 0x58
 800c150:	f000 80c0 	beq.w	800c2d4 <_printf_i+0x1a8>
 800c154:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c158:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c15c:	e03a      	b.n	800c1d4 <_printf_i+0xa8>
 800c15e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c162:	2b15      	cmp	r3, #21
 800c164:	d8f6      	bhi.n	800c154 <_printf_i+0x28>
 800c166:	a101      	add	r1, pc, #4	; (adr r1, 800c16c <_printf_i+0x40>)
 800c168:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c16c:	0800c1c5 	.word	0x0800c1c5
 800c170:	0800c1d9 	.word	0x0800c1d9
 800c174:	0800c155 	.word	0x0800c155
 800c178:	0800c155 	.word	0x0800c155
 800c17c:	0800c155 	.word	0x0800c155
 800c180:	0800c155 	.word	0x0800c155
 800c184:	0800c1d9 	.word	0x0800c1d9
 800c188:	0800c155 	.word	0x0800c155
 800c18c:	0800c155 	.word	0x0800c155
 800c190:	0800c155 	.word	0x0800c155
 800c194:	0800c155 	.word	0x0800c155
 800c198:	0800c2dd 	.word	0x0800c2dd
 800c19c:	0800c205 	.word	0x0800c205
 800c1a0:	0800c297 	.word	0x0800c297
 800c1a4:	0800c155 	.word	0x0800c155
 800c1a8:	0800c155 	.word	0x0800c155
 800c1ac:	0800c2ff 	.word	0x0800c2ff
 800c1b0:	0800c155 	.word	0x0800c155
 800c1b4:	0800c205 	.word	0x0800c205
 800c1b8:	0800c155 	.word	0x0800c155
 800c1bc:	0800c155 	.word	0x0800c155
 800c1c0:	0800c29f 	.word	0x0800c29f
 800c1c4:	682b      	ldr	r3, [r5, #0]
 800c1c6:	1d1a      	adds	r2, r3, #4
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	602a      	str	r2, [r5, #0]
 800c1cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c1d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c1d4:	2301      	movs	r3, #1
 800c1d6:	e09f      	b.n	800c318 <_printf_i+0x1ec>
 800c1d8:	6820      	ldr	r0, [r4, #0]
 800c1da:	682b      	ldr	r3, [r5, #0]
 800c1dc:	0607      	lsls	r7, r0, #24
 800c1de:	f103 0104 	add.w	r1, r3, #4
 800c1e2:	6029      	str	r1, [r5, #0]
 800c1e4:	d501      	bpl.n	800c1ea <_printf_i+0xbe>
 800c1e6:	681e      	ldr	r6, [r3, #0]
 800c1e8:	e003      	b.n	800c1f2 <_printf_i+0xc6>
 800c1ea:	0646      	lsls	r6, r0, #25
 800c1ec:	d5fb      	bpl.n	800c1e6 <_printf_i+0xba>
 800c1ee:	f9b3 6000 	ldrsh.w	r6, [r3]
 800c1f2:	2e00      	cmp	r6, #0
 800c1f4:	da03      	bge.n	800c1fe <_printf_i+0xd2>
 800c1f6:	232d      	movs	r3, #45	; 0x2d
 800c1f8:	4276      	negs	r6, r6
 800c1fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c1fe:	485a      	ldr	r0, [pc, #360]	; (800c368 <_printf_i+0x23c>)
 800c200:	230a      	movs	r3, #10
 800c202:	e012      	b.n	800c22a <_printf_i+0xfe>
 800c204:	682b      	ldr	r3, [r5, #0]
 800c206:	6820      	ldr	r0, [r4, #0]
 800c208:	1d19      	adds	r1, r3, #4
 800c20a:	6029      	str	r1, [r5, #0]
 800c20c:	0605      	lsls	r5, r0, #24
 800c20e:	d501      	bpl.n	800c214 <_printf_i+0xe8>
 800c210:	681e      	ldr	r6, [r3, #0]
 800c212:	e002      	b.n	800c21a <_printf_i+0xee>
 800c214:	0641      	lsls	r1, r0, #25
 800c216:	d5fb      	bpl.n	800c210 <_printf_i+0xe4>
 800c218:	881e      	ldrh	r6, [r3, #0]
 800c21a:	4853      	ldr	r0, [pc, #332]	; (800c368 <_printf_i+0x23c>)
 800c21c:	2f6f      	cmp	r7, #111	; 0x6f
 800c21e:	bf0c      	ite	eq
 800c220:	2308      	moveq	r3, #8
 800c222:	230a      	movne	r3, #10
 800c224:	2100      	movs	r1, #0
 800c226:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c22a:	6865      	ldr	r5, [r4, #4]
 800c22c:	60a5      	str	r5, [r4, #8]
 800c22e:	2d00      	cmp	r5, #0
 800c230:	bfa2      	ittt	ge
 800c232:	6821      	ldrge	r1, [r4, #0]
 800c234:	f021 0104 	bicge.w	r1, r1, #4
 800c238:	6021      	strge	r1, [r4, #0]
 800c23a:	b90e      	cbnz	r6, 800c240 <_printf_i+0x114>
 800c23c:	2d00      	cmp	r5, #0
 800c23e:	d04b      	beq.n	800c2d8 <_printf_i+0x1ac>
 800c240:	4615      	mov	r5, r2
 800c242:	fbb6 f1f3 	udiv	r1, r6, r3
 800c246:	fb03 6711 	mls	r7, r3, r1, r6
 800c24a:	5dc7      	ldrb	r7, [r0, r7]
 800c24c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c250:	4637      	mov	r7, r6
 800c252:	42bb      	cmp	r3, r7
 800c254:	460e      	mov	r6, r1
 800c256:	d9f4      	bls.n	800c242 <_printf_i+0x116>
 800c258:	2b08      	cmp	r3, #8
 800c25a:	d10b      	bne.n	800c274 <_printf_i+0x148>
 800c25c:	6823      	ldr	r3, [r4, #0]
 800c25e:	07de      	lsls	r6, r3, #31
 800c260:	d508      	bpl.n	800c274 <_printf_i+0x148>
 800c262:	6923      	ldr	r3, [r4, #16]
 800c264:	6861      	ldr	r1, [r4, #4]
 800c266:	4299      	cmp	r1, r3
 800c268:	bfde      	ittt	le
 800c26a:	2330      	movle	r3, #48	; 0x30
 800c26c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c270:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800c274:	1b52      	subs	r2, r2, r5
 800c276:	6122      	str	r2, [r4, #16]
 800c278:	f8cd a000 	str.w	sl, [sp]
 800c27c:	464b      	mov	r3, r9
 800c27e:	aa03      	add	r2, sp, #12
 800c280:	4621      	mov	r1, r4
 800c282:	4640      	mov	r0, r8
 800c284:	f7ff fee4 	bl	800c050 <_printf_common>
 800c288:	3001      	adds	r0, #1
 800c28a:	d14a      	bne.n	800c322 <_printf_i+0x1f6>
 800c28c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c290:	b004      	add	sp, #16
 800c292:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c296:	6823      	ldr	r3, [r4, #0]
 800c298:	f043 0320 	orr.w	r3, r3, #32
 800c29c:	6023      	str	r3, [r4, #0]
 800c29e:	4833      	ldr	r0, [pc, #204]	; (800c36c <_printf_i+0x240>)
 800c2a0:	2778      	movs	r7, #120	; 0x78
 800c2a2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c2a6:	6823      	ldr	r3, [r4, #0]
 800c2a8:	6829      	ldr	r1, [r5, #0]
 800c2aa:	061f      	lsls	r7, r3, #24
 800c2ac:	f851 6b04 	ldr.w	r6, [r1], #4
 800c2b0:	d402      	bmi.n	800c2b8 <_printf_i+0x18c>
 800c2b2:	065f      	lsls	r7, r3, #25
 800c2b4:	bf48      	it	mi
 800c2b6:	b2b6      	uxthmi	r6, r6
 800c2b8:	07df      	lsls	r7, r3, #31
 800c2ba:	bf48      	it	mi
 800c2bc:	f043 0320 	orrmi.w	r3, r3, #32
 800c2c0:	6029      	str	r1, [r5, #0]
 800c2c2:	bf48      	it	mi
 800c2c4:	6023      	strmi	r3, [r4, #0]
 800c2c6:	b91e      	cbnz	r6, 800c2d0 <_printf_i+0x1a4>
 800c2c8:	6823      	ldr	r3, [r4, #0]
 800c2ca:	f023 0320 	bic.w	r3, r3, #32
 800c2ce:	6023      	str	r3, [r4, #0]
 800c2d0:	2310      	movs	r3, #16
 800c2d2:	e7a7      	b.n	800c224 <_printf_i+0xf8>
 800c2d4:	4824      	ldr	r0, [pc, #144]	; (800c368 <_printf_i+0x23c>)
 800c2d6:	e7e4      	b.n	800c2a2 <_printf_i+0x176>
 800c2d8:	4615      	mov	r5, r2
 800c2da:	e7bd      	b.n	800c258 <_printf_i+0x12c>
 800c2dc:	682b      	ldr	r3, [r5, #0]
 800c2de:	6826      	ldr	r6, [r4, #0]
 800c2e0:	6961      	ldr	r1, [r4, #20]
 800c2e2:	1d18      	adds	r0, r3, #4
 800c2e4:	6028      	str	r0, [r5, #0]
 800c2e6:	0635      	lsls	r5, r6, #24
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	d501      	bpl.n	800c2f0 <_printf_i+0x1c4>
 800c2ec:	6019      	str	r1, [r3, #0]
 800c2ee:	e002      	b.n	800c2f6 <_printf_i+0x1ca>
 800c2f0:	0670      	lsls	r0, r6, #25
 800c2f2:	d5fb      	bpl.n	800c2ec <_printf_i+0x1c0>
 800c2f4:	8019      	strh	r1, [r3, #0]
 800c2f6:	2300      	movs	r3, #0
 800c2f8:	6123      	str	r3, [r4, #16]
 800c2fa:	4615      	mov	r5, r2
 800c2fc:	e7bc      	b.n	800c278 <_printf_i+0x14c>
 800c2fe:	682b      	ldr	r3, [r5, #0]
 800c300:	1d1a      	adds	r2, r3, #4
 800c302:	602a      	str	r2, [r5, #0]
 800c304:	681d      	ldr	r5, [r3, #0]
 800c306:	6862      	ldr	r2, [r4, #4]
 800c308:	2100      	movs	r1, #0
 800c30a:	4628      	mov	r0, r5
 800c30c:	f7f3 ff38 	bl	8000180 <memchr>
 800c310:	b108      	cbz	r0, 800c316 <_printf_i+0x1ea>
 800c312:	1b40      	subs	r0, r0, r5
 800c314:	6060      	str	r0, [r4, #4]
 800c316:	6863      	ldr	r3, [r4, #4]
 800c318:	6123      	str	r3, [r4, #16]
 800c31a:	2300      	movs	r3, #0
 800c31c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c320:	e7aa      	b.n	800c278 <_printf_i+0x14c>
 800c322:	6923      	ldr	r3, [r4, #16]
 800c324:	462a      	mov	r2, r5
 800c326:	4649      	mov	r1, r9
 800c328:	4640      	mov	r0, r8
 800c32a:	47d0      	blx	sl
 800c32c:	3001      	adds	r0, #1
 800c32e:	d0ad      	beq.n	800c28c <_printf_i+0x160>
 800c330:	6823      	ldr	r3, [r4, #0]
 800c332:	079b      	lsls	r3, r3, #30
 800c334:	d413      	bmi.n	800c35e <_printf_i+0x232>
 800c336:	68e0      	ldr	r0, [r4, #12]
 800c338:	9b03      	ldr	r3, [sp, #12]
 800c33a:	4298      	cmp	r0, r3
 800c33c:	bfb8      	it	lt
 800c33e:	4618      	movlt	r0, r3
 800c340:	e7a6      	b.n	800c290 <_printf_i+0x164>
 800c342:	2301      	movs	r3, #1
 800c344:	4632      	mov	r2, r6
 800c346:	4649      	mov	r1, r9
 800c348:	4640      	mov	r0, r8
 800c34a:	47d0      	blx	sl
 800c34c:	3001      	adds	r0, #1
 800c34e:	d09d      	beq.n	800c28c <_printf_i+0x160>
 800c350:	3501      	adds	r5, #1
 800c352:	68e3      	ldr	r3, [r4, #12]
 800c354:	9903      	ldr	r1, [sp, #12]
 800c356:	1a5b      	subs	r3, r3, r1
 800c358:	42ab      	cmp	r3, r5
 800c35a:	dcf2      	bgt.n	800c342 <_printf_i+0x216>
 800c35c:	e7eb      	b.n	800c336 <_printf_i+0x20a>
 800c35e:	2500      	movs	r5, #0
 800c360:	f104 0619 	add.w	r6, r4, #25
 800c364:	e7f5      	b.n	800c352 <_printf_i+0x226>
 800c366:	bf00      	nop
 800c368:	0800cfd1 	.word	0x0800cfd1
 800c36c:	0800cfe2 	.word	0x0800cfe2

0800c370 <__malloc_lock>:
 800c370:	4801      	ldr	r0, [pc, #4]	; (800c378 <__malloc_lock+0x8>)
 800c372:	f7ff bc65 	b.w	800bc40 <__retarget_lock_acquire_recursive>
 800c376:	bf00      	nop
 800c378:	20000c28 	.word	0x20000c28

0800c37c <__malloc_unlock>:
 800c37c:	4801      	ldr	r0, [pc, #4]	; (800c384 <__malloc_unlock+0x8>)
 800c37e:	f7ff bc60 	b.w	800bc42 <__retarget_lock_release_recursive>
 800c382:	bf00      	nop
 800c384:	20000c28 	.word	0x20000c28

0800c388 <_realloc_r>:
 800c388:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c38c:	4680      	mov	r8, r0
 800c38e:	4614      	mov	r4, r2
 800c390:	460e      	mov	r6, r1
 800c392:	b921      	cbnz	r1, 800c39e <_realloc_r+0x16>
 800c394:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c398:	4611      	mov	r1, r2
 800c39a:	f7ff bdd9 	b.w	800bf50 <_malloc_r>
 800c39e:	b92a      	cbnz	r2, 800c3ac <_realloc_r+0x24>
 800c3a0:	f000 f84c 	bl	800c43c <_free_r>
 800c3a4:	4625      	mov	r5, r4
 800c3a6:	4628      	mov	r0, r5
 800c3a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c3ac:	f000 f890 	bl	800c4d0 <_malloc_usable_size_r>
 800c3b0:	4284      	cmp	r4, r0
 800c3b2:	4607      	mov	r7, r0
 800c3b4:	d802      	bhi.n	800c3bc <_realloc_r+0x34>
 800c3b6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c3ba:	d812      	bhi.n	800c3e2 <_realloc_r+0x5a>
 800c3bc:	4621      	mov	r1, r4
 800c3be:	4640      	mov	r0, r8
 800c3c0:	f7ff fdc6 	bl	800bf50 <_malloc_r>
 800c3c4:	4605      	mov	r5, r0
 800c3c6:	2800      	cmp	r0, #0
 800c3c8:	d0ed      	beq.n	800c3a6 <_realloc_r+0x1e>
 800c3ca:	42bc      	cmp	r4, r7
 800c3cc:	4622      	mov	r2, r4
 800c3ce:	4631      	mov	r1, r6
 800c3d0:	bf28      	it	cs
 800c3d2:	463a      	movcs	r2, r7
 800c3d4:	f7ff fc36 	bl	800bc44 <memcpy>
 800c3d8:	4631      	mov	r1, r6
 800c3da:	4640      	mov	r0, r8
 800c3dc:	f000 f82e 	bl	800c43c <_free_r>
 800c3e0:	e7e1      	b.n	800c3a6 <_realloc_r+0x1e>
 800c3e2:	4635      	mov	r5, r6
 800c3e4:	e7df      	b.n	800c3a6 <_realloc_r+0x1e>

0800c3e6 <memmove>:
 800c3e6:	4288      	cmp	r0, r1
 800c3e8:	b510      	push	{r4, lr}
 800c3ea:	eb01 0402 	add.w	r4, r1, r2
 800c3ee:	d902      	bls.n	800c3f6 <memmove+0x10>
 800c3f0:	4284      	cmp	r4, r0
 800c3f2:	4623      	mov	r3, r4
 800c3f4:	d807      	bhi.n	800c406 <memmove+0x20>
 800c3f6:	1e43      	subs	r3, r0, #1
 800c3f8:	42a1      	cmp	r1, r4
 800c3fa:	d008      	beq.n	800c40e <memmove+0x28>
 800c3fc:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c400:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c404:	e7f8      	b.n	800c3f8 <memmove+0x12>
 800c406:	4402      	add	r2, r0
 800c408:	4601      	mov	r1, r0
 800c40a:	428a      	cmp	r2, r1
 800c40c:	d100      	bne.n	800c410 <memmove+0x2a>
 800c40e:	bd10      	pop	{r4, pc}
 800c410:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c414:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c418:	e7f7      	b.n	800c40a <memmove+0x24>
	...

0800c41c <_sbrk_r>:
 800c41c:	b538      	push	{r3, r4, r5, lr}
 800c41e:	4d06      	ldr	r5, [pc, #24]	; (800c438 <_sbrk_r+0x1c>)
 800c420:	2300      	movs	r3, #0
 800c422:	4604      	mov	r4, r0
 800c424:	4608      	mov	r0, r1
 800c426:	602b      	str	r3, [r5, #0]
 800c428:	f7f6 fb62 	bl	8002af0 <_sbrk>
 800c42c:	1c43      	adds	r3, r0, #1
 800c42e:	d102      	bne.n	800c436 <_sbrk_r+0x1a>
 800c430:	682b      	ldr	r3, [r5, #0]
 800c432:	b103      	cbz	r3, 800c436 <_sbrk_r+0x1a>
 800c434:	6023      	str	r3, [r4, #0]
 800c436:	bd38      	pop	{r3, r4, r5, pc}
 800c438:	20000c34 	.word	0x20000c34

0800c43c <_free_r>:
 800c43c:	b538      	push	{r3, r4, r5, lr}
 800c43e:	4605      	mov	r5, r0
 800c440:	2900      	cmp	r1, #0
 800c442:	d041      	beq.n	800c4c8 <_free_r+0x8c>
 800c444:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c448:	1f0c      	subs	r4, r1, #4
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	bfb8      	it	lt
 800c44e:	18e4      	addlt	r4, r4, r3
 800c450:	f7ff ff8e 	bl	800c370 <__malloc_lock>
 800c454:	4a1d      	ldr	r2, [pc, #116]	; (800c4cc <_free_r+0x90>)
 800c456:	6813      	ldr	r3, [r2, #0]
 800c458:	b933      	cbnz	r3, 800c468 <_free_r+0x2c>
 800c45a:	6063      	str	r3, [r4, #4]
 800c45c:	6014      	str	r4, [r2, #0]
 800c45e:	4628      	mov	r0, r5
 800c460:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c464:	f7ff bf8a 	b.w	800c37c <__malloc_unlock>
 800c468:	42a3      	cmp	r3, r4
 800c46a:	d908      	bls.n	800c47e <_free_r+0x42>
 800c46c:	6820      	ldr	r0, [r4, #0]
 800c46e:	1821      	adds	r1, r4, r0
 800c470:	428b      	cmp	r3, r1
 800c472:	bf01      	itttt	eq
 800c474:	6819      	ldreq	r1, [r3, #0]
 800c476:	685b      	ldreq	r3, [r3, #4]
 800c478:	1809      	addeq	r1, r1, r0
 800c47a:	6021      	streq	r1, [r4, #0]
 800c47c:	e7ed      	b.n	800c45a <_free_r+0x1e>
 800c47e:	461a      	mov	r2, r3
 800c480:	685b      	ldr	r3, [r3, #4]
 800c482:	b10b      	cbz	r3, 800c488 <_free_r+0x4c>
 800c484:	42a3      	cmp	r3, r4
 800c486:	d9fa      	bls.n	800c47e <_free_r+0x42>
 800c488:	6811      	ldr	r1, [r2, #0]
 800c48a:	1850      	adds	r0, r2, r1
 800c48c:	42a0      	cmp	r0, r4
 800c48e:	d10b      	bne.n	800c4a8 <_free_r+0x6c>
 800c490:	6820      	ldr	r0, [r4, #0]
 800c492:	4401      	add	r1, r0
 800c494:	1850      	adds	r0, r2, r1
 800c496:	4283      	cmp	r3, r0
 800c498:	6011      	str	r1, [r2, #0]
 800c49a:	d1e0      	bne.n	800c45e <_free_r+0x22>
 800c49c:	6818      	ldr	r0, [r3, #0]
 800c49e:	685b      	ldr	r3, [r3, #4]
 800c4a0:	6053      	str	r3, [r2, #4]
 800c4a2:	4408      	add	r0, r1
 800c4a4:	6010      	str	r0, [r2, #0]
 800c4a6:	e7da      	b.n	800c45e <_free_r+0x22>
 800c4a8:	d902      	bls.n	800c4b0 <_free_r+0x74>
 800c4aa:	230c      	movs	r3, #12
 800c4ac:	602b      	str	r3, [r5, #0]
 800c4ae:	e7d6      	b.n	800c45e <_free_r+0x22>
 800c4b0:	6820      	ldr	r0, [r4, #0]
 800c4b2:	1821      	adds	r1, r4, r0
 800c4b4:	428b      	cmp	r3, r1
 800c4b6:	bf04      	itt	eq
 800c4b8:	6819      	ldreq	r1, [r3, #0]
 800c4ba:	685b      	ldreq	r3, [r3, #4]
 800c4bc:	6063      	str	r3, [r4, #4]
 800c4be:	bf04      	itt	eq
 800c4c0:	1809      	addeq	r1, r1, r0
 800c4c2:	6021      	streq	r1, [r4, #0]
 800c4c4:	6054      	str	r4, [r2, #4]
 800c4c6:	e7ca      	b.n	800c45e <_free_r+0x22>
 800c4c8:	bd38      	pop	{r3, r4, r5, pc}
 800c4ca:	bf00      	nop
 800c4cc:	20000c2c 	.word	0x20000c2c

0800c4d0 <_malloc_usable_size_r>:
 800c4d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c4d4:	1f18      	subs	r0, r3, #4
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	bfbc      	itt	lt
 800c4da:	580b      	ldrlt	r3, [r1, r0]
 800c4dc:	18c0      	addlt	r0, r0, r3
 800c4de:	4770      	bx	lr

0800c4e0 <_init>:
 800c4e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4e2:	bf00      	nop
 800c4e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c4e6:	bc08      	pop	{r3}
 800c4e8:	469e      	mov	lr, r3
 800c4ea:	4770      	bx	lr

0800c4ec <_fini>:
 800c4ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4ee:	bf00      	nop
 800c4f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c4f2:	bc08      	pop	{r3}
 800c4f4:	469e      	mov	lr, r3
 800c4f6:	4770      	bx	lr
