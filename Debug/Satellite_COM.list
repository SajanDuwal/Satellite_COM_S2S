
Satellite_COM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c1c8  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a7c  0800c308  0800c308  0001c308  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cd84  0800cd84  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  0800cd84  0800cd84  0001cd84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cd8c  0800cd8c  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cd8c  0800cd8c  0001cd8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cd90  0800cd90  0001cd90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  0800cd94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000bc8  20000068  0800cdfc  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000c30  0800cdfc  00020c30  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020092  2**0
                  CONTENTS, READONLY
 13 .debug_info   00020e59  00000000  00000000  000200d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000479b  00000000  00000000  00040f2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001eb8  00000000  00000000  000456d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001790  00000000  00000000  00047588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021963  00000000  00000000  00048d18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00020cce  00000000  00000000  0006a67b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c463f  00000000  00000000  0008b349  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000084f0  00000000  00000000  0014f988  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  00157e78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000068 	.word	0x20000068
 800015c:	00000000 	.word	0x00000000
 8000160:	0800c2f0 	.word	0x0800c2f0

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000006c 	.word	0x2000006c
 800017c:	0800c2f0 	.word	0x0800c2f0

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000230:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000234:	f000 b970 	b.w	8000518 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9e08      	ldr	r6, [sp, #32]
 8000256:	460d      	mov	r5, r1
 8000258:	4604      	mov	r4, r0
 800025a:	460f      	mov	r7, r1
 800025c:	2b00      	cmp	r3, #0
 800025e:	d14a      	bne.n	80002f6 <__udivmoddi4+0xa6>
 8000260:	428a      	cmp	r2, r1
 8000262:	4694      	mov	ip, r2
 8000264:	d965      	bls.n	8000332 <__udivmoddi4+0xe2>
 8000266:	fab2 f382 	clz	r3, r2
 800026a:	b143      	cbz	r3, 800027e <__udivmoddi4+0x2e>
 800026c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000270:	f1c3 0220 	rsb	r2, r3, #32
 8000274:	409f      	lsls	r7, r3
 8000276:	fa20 f202 	lsr.w	r2, r0, r2
 800027a:	4317      	orrs	r7, r2
 800027c:	409c      	lsls	r4, r3
 800027e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000282:	fa1f f58c 	uxth.w	r5, ip
 8000286:	fbb7 f1fe 	udiv	r1, r7, lr
 800028a:	0c22      	lsrs	r2, r4, #16
 800028c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000290:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000294:	fb01 f005 	mul.w	r0, r1, r5
 8000298:	4290      	cmp	r0, r2
 800029a:	d90a      	bls.n	80002b2 <__udivmoddi4+0x62>
 800029c:	eb1c 0202 	adds.w	r2, ip, r2
 80002a0:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 80002a4:	f080 811b 	bcs.w	80004de <__udivmoddi4+0x28e>
 80002a8:	4290      	cmp	r0, r2
 80002aa:	f240 8118 	bls.w	80004de <__udivmoddi4+0x28e>
 80002ae:	3902      	subs	r1, #2
 80002b0:	4462      	add	r2, ip
 80002b2:	1a12      	subs	r2, r2, r0
 80002b4:	b2a4      	uxth	r4, r4
 80002b6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002ba:	fb0e 2210 	mls	r2, lr, r0, r2
 80002be:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002c2:	fb00 f505 	mul.w	r5, r0, r5
 80002c6:	42a5      	cmp	r5, r4
 80002c8:	d90a      	bls.n	80002e0 <__udivmoddi4+0x90>
 80002ca:	eb1c 0404 	adds.w	r4, ip, r4
 80002ce:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002d2:	f080 8106 	bcs.w	80004e2 <__udivmoddi4+0x292>
 80002d6:	42a5      	cmp	r5, r4
 80002d8:	f240 8103 	bls.w	80004e2 <__udivmoddi4+0x292>
 80002dc:	4464      	add	r4, ip
 80002de:	3802      	subs	r0, #2
 80002e0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002e4:	1b64      	subs	r4, r4, r5
 80002e6:	2100      	movs	r1, #0
 80002e8:	b11e      	cbz	r6, 80002f2 <__udivmoddi4+0xa2>
 80002ea:	40dc      	lsrs	r4, r3
 80002ec:	2300      	movs	r3, #0
 80002ee:	e9c6 4300 	strd	r4, r3, [r6]
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d908      	bls.n	800030c <__udivmoddi4+0xbc>
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	f000 80ec 	beq.w	80004d8 <__udivmoddi4+0x288>
 8000300:	2100      	movs	r1, #0
 8000302:	e9c6 0500 	strd	r0, r5, [r6]
 8000306:	4608      	mov	r0, r1
 8000308:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030c:	fab3 f183 	clz	r1, r3
 8000310:	2900      	cmp	r1, #0
 8000312:	d149      	bne.n	80003a8 <__udivmoddi4+0x158>
 8000314:	42ab      	cmp	r3, r5
 8000316:	d302      	bcc.n	800031e <__udivmoddi4+0xce>
 8000318:	4282      	cmp	r2, r0
 800031a:	f200 80f7 	bhi.w	800050c <__udivmoddi4+0x2bc>
 800031e:	1a84      	subs	r4, r0, r2
 8000320:	eb65 0203 	sbc.w	r2, r5, r3
 8000324:	2001      	movs	r0, #1
 8000326:	4617      	mov	r7, r2
 8000328:	2e00      	cmp	r6, #0
 800032a:	d0e2      	beq.n	80002f2 <__udivmoddi4+0xa2>
 800032c:	e9c6 4700 	strd	r4, r7, [r6]
 8000330:	e7df      	b.n	80002f2 <__udivmoddi4+0xa2>
 8000332:	b902      	cbnz	r2, 8000336 <__udivmoddi4+0xe6>
 8000334:	deff      	udf	#255	; 0xff
 8000336:	fab2 f382 	clz	r3, r2
 800033a:	2b00      	cmp	r3, #0
 800033c:	f040 808f 	bne.w	800045e <__udivmoddi4+0x20e>
 8000340:	1a8a      	subs	r2, r1, r2
 8000342:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000346:	fa1f fe8c 	uxth.w	lr, ip
 800034a:	2101      	movs	r1, #1
 800034c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000350:	fb07 2015 	mls	r0, r7, r5, r2
 8000354:	0c22      	lsrs	r2, r4, #16
 8000356:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800035a:	fb0e f005 	mul.w	r0, lr, r5
 800035e:	4290      	cmp	r0, r2
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x124>
 8000362:	eb1c 0202 	adds.w	r2, ip, r2
 8000366:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x122>
 800036c:	4290      	cmp	r0, r2
 800036e:	f200 80ca 	bhi.w	8000506 <__udivmoddi4+0x2b6>
 8000372:	4645      	mov	r5, r8
 8000374:	1a12      	subs	r2, r2, r0
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb2 f0f7 	udiv	r0, r2, r7
 800037c:	fb07 2210 	mls	r2, r7, r0, r2
 8000380:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000384:	fb0e fe00 	mul.w	lr, lr, r0
 8000388:	45a6      	cmp	lr, r4
 800038a:	d908      	bls.n	800039e <__udivmoddi4+0x14e>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000394:	d202      	bcs.n	800039c <__udivmoddi4+0x14c>
 8000396:	45a6      	cmp	lr, r4
 8000398:	f200 80ba 	bhi.w	8000510 <__udivmoddi4+0x2c0>
 800039c:	4610      	mov	r0, r2
 800039e:	eba4 040e 	sub.w	r4, r4, lr
 80003a2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003a6:	e79f      	b.n	80002e8 <__udivmoddi4+0x98>
 80003a8:	f1c1 0720 	rsb	r7, r1, #32
 80003ac:	408b      	lsls	r3, r1
 80003ae:	fa22 fc07 	lsr.w	ip, r2, r7
 80003b2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003b6:	fa05 f401 	lsl.w	r4, r5, r1
 80003ba:	fa20 f307 	lsr.w	r3, r0, r7
 80003be:	40fd      	lsrs	r5, r7
 80003c0:	4323      	orrs	r3, r4
 80003c2:	fa00 f901 	lsl.w	r9, r0, r1
 80003c6:	ea4f 401c 	mov.w	r0, ip, lsr #16
 80003ca:	fa1f fe8c 	uxth.w	lr, ip
 80003ce:	fbb5 f8f0 	udiv	r8, r5, r0
 80003d2:	0c1c      	lsrs	r4, r3, #16
 80003d4:	fb00 5518 	mls	r5, r0, r8, r5
 80003d8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003dc:	fb08 f50e 	mul.w	r5, r8, lr
 80003e0:	42a5      	cmp	r5, r4
 80003e2:	fa02 f201 	lsl.w	r2, r2, r1
 80003e6:	d90b      	bls.n	8000400 <__udivmoddi4+0x1b0>
 80003e8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ec:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003f0:	f080 8087 	bcs.w	8000502 <__udivmoddi4+0x2b2>
 80003f4:	42a5      	cmp	r5, r4
 80003f6:	f240 8084 	bls.w	8000502 <__udivmoddi4+0x2b2>
 80003fa:	f1a8 0802 	sub.w	r8, r8, #2
 80003fe:	4464      	add	r4, ip
 8000400:	1b64      	subs	r4, r4, r5
 8000402:	b29d      	uxth	r5, r3
 8000404:	fbb4 f3f0 	udiv	r3, r4, r0
 8000408:	fb00 4413 	mls	r4, r0, r3, r4
 800040c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000410:	fb03 fe0e 	mul.w	lr, r3, lr
 8000414:	45a6      	cmp	lr, r4
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x1da>
 8000418:	eb1c 0404 	adds.w	r4, ip, r4
 800041c:	f103 30ff 	add.w	r0, r3, #4294967295	; 0xffffffff
 8000420:	d26b      	bcs.n	80004fa <__udivmoddi4+0x2aa>
 8000422:	45a6      	cmp	lr, r4
 8000424:	d969      	bls.n	80004fa <__udivmoddi4+0x2aa>
 8000426:	3b02      	subs	r3, #2
 8000428:	4464      	add	r4, ip
 800042a:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 800042e:	fba0 8302 	umull	r8, r3, r0, r2
 8000432:	eba4 040e 	sub.w	r4, r4, lr
 8000436:	429c      	cmp	r4, r3
 8000438:	46c6      	mov	lr, r8
 800043a:	461d      	mov	r5, r3
 800043c:	d355      	bcc.n	80004ea <__udivmoddi4+0x29a>
 800043e:	d052      	beq.n	80004e6 <__udivmoddi4+0x296>
 8000440:	b156      	cbz	r6, 8000458 <__udivmoddi4+0x208>
 8000442:	ebb9 030e 	subs.w	r3, r9, lr
 8000446:	eb64 0405 	sbc.w	r4, r4, r5
 800044a:	fa04 f707 	lsl.w	r7, r4, r7
 800044e:	40cb      	lsrs	r3, r1
 8000450:	40cc      	lsrs	r4, r1
 8000452:	431f      	orrs	r7, r3
 8000454:	e9c6 7400 	strd	r7, r4, [r6]
 8000458:	2100      	movs	r1, #0
 800045a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045e:	f1c3 0120 	rsb	r1, r3, #32
 8000462:	fa02 fc03 	lsl.w	ip, r2, r3
 8000466:	fa20 f201 	lsr.w	r2, r0, r1
 800046a:	fa25 f101 	lsr.w	r1, r5, r1
 800046e:	409d      	lsls	r5, r3
 8000470:	432a      	orrs	r2, r5
 8000472:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000476:	fa1f fe8c 	uxth.w	lr, ip
 800047a:	fbb1 f0f7 	udiv	r0, r1, r7
 800047e:	fb07 1510 	mls	r5, r7, r0, r1
 8000482:	0c11      	lsrs	r1, r2, #16
 8000484:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000488:	fb00 f50e 	mul.w	r5, r0, lr
 800048c:	428d      	cmp	r5, r1
 800048e:	fa04 f403 	lsl.w	r4, r4, r3
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x256>
 8000494:	eb1c 0101 	adds.w	r1, ip, r1
 8000498:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800049c:	d22f      	bcs.n	80004fe <__udivmoddi4+0x2ae>
 800049e:	428d      	cmp	r5, r1
 80004a0:	d92d      	bls.n	80004fe <__udivmoddi4+0x2ae>
 80004a2:	3802      	subs	r0, #2
 80004a4:	4461      	add	r1, ip
 80004a6:	1b49      	subs	r1, r1, r5
 80004a8:	b292      	uxth	r2, r2
 80004aa:	fbb1 f5f7 	udiv	r5, r1, r7
 80004ae:	fb07 1115 	mls	r1, r7, r5, r1
 80004b2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b6:	fb05 f10e 	mul.w	r1, r5, lr
 80004ba:	4291      	cmp	r1, r2
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x280>
 80004be:	eb1c 0202 	adds.w	r2, ip, r2
 80004c2:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004c6:	d216      	bcs.n	80004f6 <__udivmoddi4+0x2a6>
 80004c8:	4291      	cmp	r1, r2
 80004ca:	d914      	bls.n	80004f6 <__udivmoddi4+0x2a6>
 80004cc:	3d02      	subs	r5, #2
 80004ce:	4462      	add	r2, ip
 80004d0:	1a52      	subs	r2, r2, r1
 80004d2:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d6:	e739      	b.n	800034c <__udivmoddi4+0xfc>
 80004d8:	4631      	mov	r1, r6
 80004da:	4630      	mov	r0, r6
 80004dc:	e709      	b.n	80002f2 <__udivmoddi4+0xa2>
 80004de:	4639      	mov	r1, r7
 80004e0:	e6e7      	b.n	80002b2 <__udivmoddi4+0x62>
 80004e2:	4610      	mov	r0, r2
 80004e4:	e6fc      	b.n	80002e0 <__udivmoddi4+0x90>
 80004e6:	45c1      	cmp	r9, r8
 80004e8:	d2aa      	bcs.n	8000440 <__udivmoddi4+0x1f0>
 80004ea:	ebb8 0e02 	subs.w	lr, r8, r2
 80004ee:	eb63 050c 	sbc.w	r5, r3, ip
 80004f2:	3801      	subs	r0, #1
 80004f4:	e7a4      	b.n	8000440 <__udivmoddi4+0x1f0>
 80004f6:	4645      	mov	r5, r8
 80004f8:	e7ea      	b.n	80004d0 <__udivmoddi4+0x280>
 80004fa:	4603      	mov	r3, r0
 80004fc:	e795      	b.n	800042a <__udivmoddi4+0x1da>
 80004fe:	4640      	mov	r0, r8
 8000500:	e7d1      	b.n	80004a6 <__udivmoddi4+0x256>
 8000502:	46d0      	mov	r8, sl
 8000504:	e77c      	b.n	8000400 <__udivmoddi4+0x1b0>
 8000506:	3d02      	subs	r5, #2
 8000508:	4462      	add	r2, ip
 800050a:	e733      	b.n	8000374 <__udivmoddi4+0x124>
 800050c:	4608      	mov	r0, r1
 800050e:	e70b      	b.n	8000328 <__udivmoddi4+0xd8>
 8000510:	4464      	add	r4, ip
 8000512:	3802      	subs	r0, #2
 8000514:	e743      	b.n	800039e <__udivmoddi4+0x14e>
 8000516:	bf00      	nop

08000518 <__aeabi_idiv0>:
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop

0800051c <updatePacket>:
uint8_t ax_buffer[150] = { 0 };
uint8_t ax_buff_stuffed[150] = { 0 };

uint8_t info_packet[INFO_LENGTH];

void updatePacket(uint8_t *OBC_Rx_buffer) {
 800051c:	b480      	push	{r7}
 800051e:	b087      	sub	sp, #28
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
	info_packet[0] = OBC_Rx_buffer[1];  	// Packet Type
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	785a      	ldrb	r2, [r3, #1]
 8000528:	4b14      	ldr	r3, [pc, #80]	; (800057c <updatePacket+0x60>)
 800052a:	701a      	strb	r2, [r3, #0]
	int j = 1;
 800052c:	2301      	movs	r3, #1
 800052e:	617b      	str	r3, [r7, #20]
	int k = 3;
 8000530:	2303      	movs	r3, #3
 8000532:	613b      	str	r3, [r7, #16]
	int len_of_payload = OBC_Rx_buffer[2];  // length of info_field
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	3302      	adds	r3, #2
 8000538:	781b      	ldrb	r3, [r3, #0]
 800053a:	60bb      	str	r3, [r7, #8]
//	myDebug("\nlen_of_payload: %d\r\n", len_of_payload);
	for (int i = 0; i < len_of_payload; i++) {
 800053c:	2300      	movs	r3, #0
 800053e:	60fb      	str	r3, [r7, #12]
 8000540:	e011      	b.n	8000566 <updatePacket+0x4a>
		info_packet[j] = OBC_Rx_buffer[k];
 8000542:	693b      	ldr	r3, [r7, #16]
 8000544:	687a      	ldr	r2, [r7, #4]
 8000546:	4413      	add	r3, r2
 8000548:	7819      	ldrb	r1, [r3, #0]
 800054a:	4a0c      	ldr	r2, [pc, #48]	; (800057c <updatePacket+0x60>)
 800054c:	697b      	ldr	r3, [r7, #20]
 800054e:	4413      	add	r3, r2
 8000550:	460a      	mov	r2, r1
 8000552:	701a      	strb	r2, [r3, #0]
		j++;
 8000554:	697b      	ldr	r3, [r7, #20]
 8000556:	3301      	adds	r3, #1
 8000558:	617b      	str	r3, [r7, #20]
		k++;
 800055a:	693b      	ldr	r3, [r7, #16]
 800055c:	3301      	adds	r3, #1
 800055e:	613b      	str	r3, [r7, #16]
	for (int i = 0; i < len_of_payload; i++) {
 8000560:	68fb      	ldr	r3, [r7, #12]
 8000562:	3301      	adds	r3, #1
 8000564:	60fb      	str	r3, [r7, #12]
 8000566:	68fa      	ldr	r2, [r7, #12]
 8000568:	68bb      	ldr	r3, [r7, #8]
 800056a:	429a      	cmp	r2, r3
 800056c:	dbe9      	blt.n	8000542 <updatePacket+0x26>
//	myDebug("info_packet: 0x%x\r\n", info_packet);
//	for (int i = 0; i < len_of_payload; i++) {
//		myDebug("%02x ", info_packet[i]);
//	}
//	myDebug("\r\n");
}
 800056e:	bf00      	nop
 8000570:	bf00      	nop
 8000572:	371c      	adds	r7, #28
 8000574:	46bd      	mov	sp, r7
 8000576:	bc80      	pop	{r7}
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop
 800057c:	200001b4 	.word	0x200001b4

08000580 <getHDLCPacket>:

void getHDLCPacket(uint8_t *data, uint8_t data_len) {
 8000580:	b580      	push	{r7, lr}
 8000582:	b086      	sub	sp, #24
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
 8000588:	460b      	mov	r3, r1
 800058a:	70fb      	strb	r3, [r7, #3]
//	for (int j = 0; j < data_len; j++) {
//		myDebug("%02x ", data[j]);
//	}
//	myDebug("\r\n");

	uint16_t crc = 0;
 800058c:	2300      	movs	r3, #0
 800058e:	81fb      	strh	r3, [r7, #14]
	crc = calculateCRC_CCITT_AX25(data, data_len);
 8000590:	78fb      	ldrb	r3, [r7, #3]
 8000592:	4619      	mov	r1, r3
 8000594:	6878      	ldr	r0, [r7, #4]
 8000596:	f000 f92b 	bl	80007f0 <calculateCRC_CCITT_AX25>
 800059a:	4603      	mov	r3, r0
 800059c:	81fb      	strh	r3, [r7, #14]

	temp_tx_buffer[0] = 0x7e;
 800059e:	4b22      	ldr	r3, [pc, #136]	; (8000628 <getHDLCPacket+0xa8>)
 80005a0:	227e      	movs	r2, #126	; 0x7e
 80005a2:	701a      	strb	r2, [r3, #0]

	int i = 1;
 80005a4:	2301      	movs	r3, #1
 80005a6:	617b      	str	r3, [r7, #20]
	for (int k = 0; k < data_len; k++) {
 80005a8:	2300      	movs	r3, #0
 80005aa:	613b      	str	r3, [r7, #16]
 80005ac:	e00e      	b.n	80005cc <getHDLCPacket+0x4c>
		temp_tx_buffer[i] = data[k];
 80005ae:	693b      	ldr	r3, [r7, #16]
 80005b0:	687a      	ldr	r2, [r7, #4]
 80005b2:	4413      	add	r3, r2
 80005b4:	7819      	ldrb	r1, [r3, #0]
 80005b6:	4a1c      	ldr	r2, [pc, #112]	; (8000628 <getHDLCPacket+0xa8>)
 80005b8:	697b      	ldr	r3, [r7, #20]
 80005ba:	4413      	add	r3, r2
 80005bc:	460a      	mov	r2, r1
 80005be:	701a      	strb	r2, [r3, #0]
		i++;
 80005c0:	697b      	ldr	r3, [r7, #20]
 80005c2:	3301      	adds	r3, #1
 80005c4:	617b      	str	r3, [r7, #20]
	for (int k = 0; k < data_len; k++) {
 80005c6:	693b      	ldr	r3, [r7, #16]
 80005c8:	3301      	adds	r3, #1
 80005ca:	613b      	str	r3, [r7, #16]
 80005cc:	78fb      	ldrb	r3, [r7, #3]
 80005ce:	693a      	ldr	r2, [r7, #16]
 80005d0:	429a      	cmp	r2, r3
 80005d2:	dbec      	blt.n	80005ae <getHDLCPacket+0x2e>
	}

	// Store CRC result in the packet array
	temp_tx_buffer[i] = (crc >> 8) & 0xFF; // Most significant byte
 80005d4:	89fb      	ldrh	r3, [r7, #14]
 80005d6:	0a1b      	lsrs	r3, r3, #8
 80005d8:	b29b      	uxth	r3, r3
 80005da:	b2d9      	uxtb	r1, r3
 80005dc:	4a12      	ldr	r2, [pc, #72]	; (8000628 <getHDLCPacket+0xa8>)
 80005de:	697b      	ldr	r3, [r7, #20]
 80005e0:	4413      	add	r3, r2
 80005e2:	460a      	mov	r2, r1
 80005e4:	701a      	strb	r2, [r3, #0]
	i++;
 80005e6:	697b      	ldr	r3, [r7, #20]
 80005e8:	3301      	adds	r3, #1
 80005ea:	617b      	str	r3, [r7, #20]
	temp_tx_buffer[i] = crc & 0xFF;        // Least significant byte
 80005ec:	89fb      	ldrh	r3, [r7, #14]
 80005ee:	b2d9      	uxtb	r1, r3
 80005f0:	4a0d      	ldr	r2, [pc, #52]	; (8000628 <getHDLCPacket+0xa8>)
 80005f2:	697b      	ldr	r3, [r7, #20]
 80005f4:	4413      	add	r3, r2
 80005f6:	460a      	mov	r2, r1
 80005f8:	701a      	strb	r2, [r3, #0]
	i++;
 80005fa:	697b      	ldr	r3, [r7, #20]
 80005fc:	3301      	adds	r3, #1
 80005fe:	617b      	str	r3, [r7, #20]

	temp_tx_buffer[i] = 0x7e;
 8000600:	4a09      	ldr	r2, [pc, #36]	; (8000628 <getHDLCPacket+0xa8>)
 8000602:	697b      	ldr	r3, [r7, #20]
 8000604:	4413      	add	r3, r2
 8000606:	227e      	movs	r2, #126	; 0x7e
 8000608:	701a      	strb	r2, [r3, #0]
//	for (int j = 0; j < destuffed_size - 1; j++) {
//		myDebug("%02x ", tem[j]);
//	}
//	myDebug("\r\n");

	memset(ax_buffer, '\0', sizeof(ax_buffer));
 800060a:	2296      	movs	r2, #150	; 0x96
 800060c:	2100      	movs	r1, #0
 800060e:	4807      	ldr	r0, [pc, #28]	; (800062c <getHDLCPacket+0xac>)
 8000610:	f00b f9ec 	bl	800b9ec <memset>
	memset(ax_buff_stuffed, '\0', sizeof(ax_buff_stuffed));
 8000614:	2296      	movs	r2, #150	; 0x96
 8000616:	2100      	movs	r1, #0
 8000618:	4805      	ldr	r0, [pc, #20]	; (8000630 <getHDLCPacket+0xb0>)
 800061a:	f00b f9e7 	bl	800b9ec <memset>

}
 800061e:	bf00      	nop
 8000620:	3718      	adds	r7, #24
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	200007c8 	.word	0x200007c8
 800062c:	20000084 	.word	0x20000084
 8000630:	2000011c 	.word	0x2000011c

08000634 <getAX25Packet>:

void getAX25Packet(uint8_t *OBC_data_Field, uint8_t size) {
 8000634:	b580      	push	{r7, lr}
 8000636:	b086      	sub	sp, #24
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
 800063c:	460b      	mov	r3, r1
 800063e:	70fb      	strb	r3, [r7, #3]

	updatePacket(OBC_data_Field);
 8000640:	6878      	ldr	r0, [r7, #4]
 8000642:	f7ff ff6b 	bl	800051c <updatePacket>

	//destination field   9N2SI -0
	ax_buffer[0] = 0x72; //	ASCII->9, HEX->0x39, 1 bit shifted->0b01110010, Shifted HEX->0x72
 8000646:	4b3a      	ldr	r3, [pc, #232]	; (8000730 <getAX25Packet+0xfc>)
 8000648:	2272      	movs	r2, #114	; 0x72
 800064a:	701a      	strb	r2, [r3, #0]
	ax_buffer[1] = 0x9C; //	ASCII->N, HEX->0x4E, 1 bit shifted->0b10011100, Shifted HEX->0x9C
 800064c:	4b38      	ldr	r3, [pc, #224]	; (8000730 <getAX25Packet+0xfc>)
 800064e:	229c      	movs	r2, #156	; 0x9c
 8000650:	705a      	strb	r2, [r3, #1]
	ax_buffer[2] = 0x64; //	ASCII->2, HEX->0x32, 1 bit shifted->0b01100100, Shifted HEX->0x64
 8000652:	4b37      	ldr	r3, [pc, #220]	; (8000730 <getAX25Packet+0xfc>)
 8000654:	2264      	movs	r2, #100	; 0x64
 8000656:	709a      	strb	r2, [r3, #2]
	ax_buffer[3] = 0xA6; //	ASCII->S, HEX->0x53, 1 bit shifted->0b10100110, Shifted HEX->0xA6
 8000658:	4b35      	ldr	r3, [pc, #212]	; (8000730 <getAX25Packet+0xfc>)
 800065a:	22a6      	movs	r2, #166	; 0xa6
 800065c:	70da      	strb	r2, [r3, #3]
	ax_buffer[4] = 0x64; //	ASCII->I, HEX->0x49, 1 bit shifted->0b10010010, Shifted HEX->0x92
 800065e:	4b34      	ldr	r3, [pc, #208]	; (8000730 <getAX25Packet+0xfc>)
 8000660:	2264      	movs	r2, #100	; 0x64
 8000662:	711a      	strb	r2, [r3, #4]
	ax_buffer[5] = 0x40; //	ASCII-> , HEX->0x20, 1 bit shifted->0b01000000, Shifted HEX->0x40
 8000664:	4b32      	ldr	r3, [pc, #200]	; (8000730 <getAX25Packet+0xfc>)
 8000666:	2240      	movs	r2, #64	; 0x40
 8000668:	715a      	strb	r2, [r3, #5]
	ax_buffer[6] = 0xE0; //	0b111SSID0, SSID->0000 and LSB is set to 0; if more addresses follow, HEX->0xE0
 800066a:	4b31      	ldr	r3, [pc, #196]	; (8000730 <getAX25Packet+0xfc>)
 800066c:	22e0      	movs	r2, #224	; 0xe0
 800066e:	719a      	strb	r2, [r3, #6]

	//source field   9N2SI -0
	ax_buffer[7] = 0x72; //	ASCII->9, HEX->0x39, 1 bit shifted->0b01110010, Shifted HEX->0x72
 8000670:	4b2f      	ldr	r3, [pc, #188]	; (8000730 <getAX25Packet+0xfc>)
 8000672:	2272      	movs	r2, #114	; 0x72
 8000674:	71da      	strb	r2, [r3, #7]
	ax_buffer[8] = 0x9C; //	ASCII->N, HEX->0x4E, 1 bit shifted->0b10011100, Shifted HEX->0x9C
 8000676:	4b2e      	ldr	r3, [pc, #184]	; (8000730 <getAX25Packet+0xfc>)
 8000678:	229c      	movs	r2, #156	; 0x9c
 800067a:	721a      	strb	r2, [r3, #8]
	ax_buffer[9] = 0x64; //	ASCII->2, HEX->0x32, 1 bit shifted->0b01100100, Shifted HEX->0x64
 800067c:	4b2c      	ldr	r3, [pc, #176]	; (8000730 <getAX25Packet+0xfc>)
 800067e:	2264      	movs	r2, #100	; 0x64
 8000680:	725a      	strb	r2, [r3, #9]
	ax_buffer[10] = 0xA6; //	ASCII->S, HEX->0x53, 1 bit shifted->0b10100110, Shifted HEX->0xA6
 8000682:	4b2b      	ldr	r3, [pc, #172]	; (8000730 <getAX25Packet+0xfc>)
 8000684:	22a6      	movs	r2, #166	; 0xa6
 8000686:	729a      	strb	r2, [r3, #10]
	ax_buffer[11] = 0x64; //	ASCII->I, HEX->0x49, 1 bit shifted->0b10010010, Shifted HEX->0x92
 8000688:	4b29      	ldr	r3, [pc, #164]	; (8000730 <getAX25Packet+0xfc>)
 800068a:	2264      	movs	r2, #100	; 0x64
 800068c:	72da      	strb	r2, [r3, #11]
	ax_buffer[12] = 0x40; //	ASCII-> , HEX->0x20, 1 bit shifted->0b01000000, Shifted HEX->0x40
 800068e:	4b28      	ldr	r3, [pc, #160]	; (8000730 <getAX25Packet+0xfc>)
 8000690:	2240      	movs	r2, #64	; 0x40
 8000692:	731a      	strb	r2, [r3, #12]
	ax_buffer[13] = 0x61; //	0b011SSID1, SSID->0000 and LSB is set to 1 if this is the last address, HEX->0x61
 8000694:	4b26      	ldr	r3, [pc, #152]	; (8000730 <getAX25Packet+0xfc>)
 8000696:	2261      	movs	r2, #97	; 0x61
 8000698:	735a      	strb	r2, [r3, #13]

	//control bit
	ax_buffer[14] = 0x03; //  Unnumbered Information Frame, AX.25 is always 0b00000011 i.e 0x03 in HEX
 800069a:	4b25      	ldr	r3, [pc, #148]	; (8000730 <getAX25Packet+0xfc>)
 800069c:	2203      	movs	r2, #3
 800069e:	739a      	strb	r2, [r3, #14]

	//protocol identifier
	ax_buffer[15] = 0xF0; //	No Layer-3 Implemented so, 0b11110000 i.e 0xF0 in HEX
 80006a0:	4b23      	ldr	r3, [pc, #140]	; (8000730 <getAX25Packet+0xfc>)
 80006a2:	22f0      	movs	r2, #240	; 0xf0
 80006a4:	73da      	strb	r2, [r3, #15]

	int i = 16;
 80006a6:	2310      	movs	r3, #16
 80006a8:	617b      	str	r3, [r7, #20]

	for (int k = 0; k < size; k++) {
 80006aa:	2300      	movs	r3, #0
 80006ac:	613b      	str	r3, [r7, #16]
 80006ae:	e00e      	b.n	80006ce <getAX25Packet+0x9a>
		ax_buffer[i] = info_packet[k];
 80006b0:	4a20      	ldr	r2, [pc, #128]	; (8000734 <getAX25Packet+0x100>)
 80006b2:	693b      	ldr	r3, [r7, #16]
 80006b4:	4413      	add	r3, r2
 80006b6:	7819      	ldrb	r1, [r3, #0]
 80006b8:	4a1d      	ldr	r2, [pc, #116]	; (8000730 <getAX25Packet+0xfc>)
 80006ba:	697b      	ldr	r3, [r7, #20]
 80006bc:	4413      	add	r3, r2
 80006be:	460a      	mov	r2, r1
 80006c0:	701a      	strb	r2, [r3, #0]
		i++;
 80006c2:	697b      	ldr	r3, [r7, #20]
 80006c4:	3301      	adds	r3, #1
 80006c6:	617b      	str	r3, [r7, #20]
	for (int k = 0; k < size; k++) {
 80006c8:	693b      	ldr	r3, [r7, #16]
 80006ca:	3301      	adds	r3, #1
 80006cc:	613b      	str	r3, [r7, #16]
 80006ce:	78fb      	ldrb	r3, [r7, #3]
 80006d0:	693a      	ldr	r2, [r7, #16]
 80006d2:	429a      	cmp	r2, r3
 80006d4:	dbec      	blt.n	80006b0 <getAX25Packet+0x7c>
	}

//	myDebug("Before Bit stuffing:");
	myDebug("\nReal Data, Length: %d", i);
 80006d6:	6979      	ldr	r1, [r7, #20]
 80006d8:	4817      	ldr	r0, [pc, #92]	; (8000738 <getAX25Packet+0x104>)
 80006da:	f000 f84f 	bl	800077c <myDebug>
	myDebug("\r\n");
 80006de:	4817      	ldr	r0, [pc, #92]	; (800073c <getAX25Packet+0x108>)
 80006e0:	f000 f84c 	bl	800077c <myDebug>
	for (int j = 0; j < i; j++) {
 80006e4:	2300      	movs	r3, #0
 80006e6:	60fb      	str	r3, [r7, #12]
 80006e8:	e00a      	b.n	8000700 <getAX25Packet+0xcc>
		myDebug("%02x ", ax_buffer[j]);
 80006ea:	4a11      	ldr	r2, [pc, #68]	; (8000730 <getAX25Packet+0xfc>)
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	4413      	add	r3, r2
 80006f0:	781b      	ldrb	r3, [r3, #0]
 80006f2:	4619      	mov	r1, r3
 80006f4:	4812      	ldr	r0, [pc, #72]	; (8000740 <getAX25Packet+0x10c>)
 80006f6:	f000 f841 	bl	800077c <myDebug>
	for (int j = 0; j < i; j++) {
 80006fa:	68fb      	ldr	r3, [r7, #12]
 80006fc:	3301      	adds	r3, #1
 80006fe:	60fb      	str	r3, [r7, #12]
 8000700:	68fa      	ldr	r2, [r7, #12]
 8000702:	697b      	ldr	r3, [r7, #20]
 8000704:	429a      	cmp	r2, r3
 8000706:	dbf0      	blt.n	80006ea <getAX25Packet+0xb6>
	}
	myDebug("\r\n");
 8000708:	480c      	ldr	r0, [pc, #48]	; (800073c <getAX25Packet+0x108>)
 800070a:	f000 f837 	bl	800077c <myDebug>

	// Bit Stuffing
	int stuffed_size = bit_stuffing(ax_buffer, ax_buff_stuffed, i);
 800070e:	697a      	ldr	r2, [r7, #20]
 8000710:	490c      	ldr	r1, [pc, #48]	; (8000744 <getAX25Packet+0x110>)
 8000712:	4807      	ldr	r0, [pc, #28]	; (8000730 <getAX25Packet+0xfc>)
 8000714:	f000 f8ab 	bl	800086e <bit_stuffing>
 8000718:	60b8      	str	r0, [r7, #8]

	getHDLCPacket(ax_buff_stuffed, stuffed_size);
 800071a:	68bb      	ldr	r3, [r7, #8]
 800071c:	b2db      	uxtb	r3, r3
 800071e:	4619      	mov	r1, r3
 8000720:	4808      	ldr	r0, [pc, #32]	; (8000744 <getAX25Packet+0x110>)
 8000722:	f7ff ff2d 	bl	8000580 <getHDLCPacket>
}
 8000726:	bf00      	nop
 8000728:	3718      	adds	r7, #24
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	20000084 	.word	0x20000084
 8000734:	200001b4 	.word	0x200001b4
 8000738:	0800c308 	.word	0x0800c308
 800073c:	0800c320 	.word	0x0800c320
 8000740:	0800c324 	.word	0x0800c324
 8000744:	2000011c 	.word	0x2000011c

08000748 <delay_us>:
 *      Author: sajanduwal
 */

#include "com_debug.h"

void delay_us(uint32_t us) {
 8000748:	b480      	push	{r7}
 800074a:	b085      	sub	sp, #20
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
	uint32_t delay_counter_disp;
	__HAL_TIM_SET_COUNTER(&htim2, 0);  // set the counter value a 0
 8000750:	4b09      	ldr	r3, [pc, #36]	; (8000778 <delay_us+0x30>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	2200      	movs	r2, #0
 8000756:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim2) < us)
 8000758:	e002      	b.n	8000760 <delay_us+0x18>
		delay_counter_disp++;
 800075a:	68fb      	ldr	r3, [r7, #12]
 800075c:	3301      	adds	r3, #1
 800075e:	60fb      	str	r3, [r7, #12]
	while (__HAL_TIM_GET_COUNTER(&htim2) < us)
 8000760:	4b05      	ldr	r3, [pc, #20]	; (8000778 <delay_us+0x30>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000766:	687a      	ldr	r2, [r7, #4]
 8000768:	429a      	cmp	r2, r3
 800076a:	d8f6      	bhi.n	800075a <delay_us+0x12>
	// wait for the counter to reach the us input in the parameter
}
 800076c:	bf00      	nop
 800076e:	bf00      	nop
 8000770:	3714      	adds	r7, #20
 8000772:	46bd      	mov	sp, r7
 8000774:	bc80      	pop	{r7}
 8000776:	4770      	bx	lr
 8000778:	20000684 	.word	0x20000684

0800077c <myDebug>:

void myDebug(const char *fmt, ...) {
 800077c:	b40f      	push	{r0, r1, r2, r3}
 800077e:	b580      	push	{r7, lr}
 8000780:	b082      	sub	sp, #8
 8000782:	af00      	add	r7, sp, #0
	static char temp[100];
	va_list args;
	va_start(args, fmt);
 8000784:	f107 0314 	add.w	r3, r7, #20
 8000788:	603b      	str	r3, [r7, #0]
	vsnprintf(temp, sizeof(temp), fmt, args);
 800078a:	683b      	ldr	r3, [r7, #0]
 800078c:	693a      	ldr	r2, [r7, #16]
 800078e:	2164      	movs	r1, #100	; 0x64
 8000790:	480a      	ldr	r0, [pc, #40]	; (80007bc <myDebug+0x40>)
 8000792:	f00b f91d 	bl	800b9d0 <vsniprintf>
	va_end(args);
	int len = bufferSize(temp);
 8000796:	4809      	ldr	r0, [pc, #36]	; (80007bc <myDebug+0x40>)
 8000798:	f000 f814 	bl	80007c4 <bufferSize>
 800079c:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*) temp, len, 1000);
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	b29a      	uxth	r2, r3
 80007a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007a6:	4905      	ldr	r1, [pc, #20]	; (80007bc <myDebug+0x40>)
 80007a8:	4805      	ldr	r0, [pc, #20]	; (80007c0 <myDebug+0x44>)
 80007aa:	f005 fee4 	bl	8006576 <HAL_UART_Transmit>
}
 80007ae:	bf00      	nop
 80007b0:	3708      	adds	r7, #8
 80007b2:	46bd      	mov	sp, r7
 80007b4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80007b8:	b004      	add	sp, #16
 80007ba:	4770      	bx	lr
 80007bc:	20000218 	.word	0x20000218
 80007c0:	20000310 	.word	0x20000310

080007c4 <bufferSize>:

int bufferSize(char *buffer) {
 80007c4:	b480      	push	{r7}
 80007c6:	b085      	sub	sp, #20
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
	int i = 0;
 80007cc:	2300      	movs	r3, #0
 80007ce:	60fb      	str	r3, [r7, #12]
	while (*buffer++ != '\0')
 80007d0:	e002      	b.n	80007d8 <bufferSize+0x14>
		i++;
 80007d2:	68fb      	ldr	r3, [r7, #12]
 80007d4:	3301      	adds	r3, #1
 80007d6:	60fb      	str	r3, [r7, #12]
	while (*buffer++ != '\0')
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	1c5a      	adds	r2, r3, #1
 80007dc:	607a      	str	r2, [r7, #4]
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d1f6      	bne.n	80007d2 <bufferSize+0xe>
	return i;
 80007e4:	68fb      	ldr	r3, [r7, #12]
}
 80007e6:	4618      	mov	r0, r3
 80007e8:	3714      	adds	r7, #20
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bc80      	pop	{r7}
 80007ee:	4770      	bx	lr

080007f0 <calculateCRC_CCITT_AX25>:
 */

#include "error_handler.h"

// Function to calculate CRC-CCITT for AX.25 frames
uint16_t calculateCRC_CCITT_AX25(const uint8_t *data, size_t length) {
 80007f0:	b480      	push	{r7}
 80007f2:	b087      	sub	sp, #28
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
 80007f8:	6039      	str	r1, [r7, #0]
	uint16_t crc = 0xFFFF; // Initialize CRC register with 0xFFFF
 80007fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007fe:	82fb      	strh	r3, [r7, #22]
	uint16_t CRC_POLY = 0x1021; // CRC polynomial for CCITT (0x1021)
 8000800:	f241 0321 	movw	r3, #4129	; 0x1021
 8000804:	817b      	strh	r3, [r7, #10]

	// Iterate through each byte of the input data
	for (size_t i = 0; i < length; i++) {
 8000806:	2300      	movs	r3, #0
 8000808:	613b      	str	r3, [r7, #16]
 800080a:	e026      	b.n	800085a <calculateCRC_CCITT_AX25+0x6a>
		crc ^= ((uint16_t) data[i] << 8); // XOR CRC with next byte of input data
 800080c:	687a      	ldr	r2, [r7, #4]
 800080e:	693b      	ldr	r3, [r7, #16]
 8000810:	4413      	add	r3, r2
 8000812:	781b      	ldrb	r3, [r3, #0]
 8000814:	021b      	lsls	r3, r3, #8
 8000816:	b21a      	sxth	r2, r3
 8000818:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800081c:	4053      	eors	r3, r2
 800081e:	b21b      	sxth	r3, r3
 8000820:	82fb      	strh	r3, [r7, #22]

		// Iterate through each bit of the current byte
		for (int j = 0; j < 8; j++) {
 8000822:	2300      	movs	r3, #0
 8000824:	60fb      	str	r3, [r7, #12]
 8000826:	e012      	b.n	800084e <calculateCRC_CCITT_AX25+0x5e>
			if (crc & 0x8000) { // If MSB of CRC is 1
 8000828:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800082c:	2b00      	cmp	r3, #0
 800082e:	da08      	bge.n	8000842 <calculateCRC_CCITT_AX25+0x52>
				crc = (crc << 1) ^ CRC_POLY; // Left shift CRC and XOR with polynomial
 8000830:	8afb      	ldrh	r3, [r7, #22]
 8000832:	005b      	lsls	r3, r3, #1
 8000834:	b21a      	sxth	r2, r3
 8000836:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800083a:	4053      	eors	r3, r2
 800083c:	b21b      	sxth	r3, r3
 800083e:	82fb      	strh	r3, [r7, #22]
 8000840:	e002      	b.n	8000848 <calculateCRC_CCITT_AX25+0x58>
			} else {
				crc <<= 1; // Left shift CRC
 8000842:	8afb      	ldrh	r3, [r7, #22]
 8000844:	005b      	lsls	r3, r3, #1
 8000846:	82fb      	strh	r3, [r7, #22]
		for (int j = 0; j < 8; j++) {
 8000848:	68fb      	ldr	r3, [r7, #12]
 800084a:	3301      	adds	r3, #1
 800084c:	60fb      	str	r3, [r7, #12]
 800084e:	68fb      	ldr	r3, [r7, #12]
 8000850:	2b07      	cmp	r3, #7
 8000852:	dde9      	ble.n	8000828 <calculateCRC_CCITT_AX25+0x38>
	for (size_t i = 0; i < length; i++) {
 8000854:	693b      	ldr	r3, [r7, #16]
 8000856:	3301      	adds	r3, #1
 8000858:	613b      	str	r3, [r7, #16]
 800085a:	693a      	ldr	r2, [r7, #16]
 800085c:	683b      	ldr	r3, [r7, #0]
 800085e:	429a      	cmp	r2, r3
 8000860:	d3d4      	bcc.n	800080c <calculateCRC_CCITT_AX25+0x1c>
			}
		}
	}

	return crc; // Return calculated CRC
 8000862:	8afb      	ldrh	r3, [r7, #22]
}
 8000864:	4618      	mov	r0, r3
 8000866:	371c      	adds	r7, #28
 8000868:	46bd      	mov	sp, r7
 800086a:	bc80      	pop	{r7}
 800086c:	4770      	bx	lr

0800086e <bit_stuffing>:
	}
	crcReg = crcReg ^ 0xFFFF;						// Final XOR with 0xFFFF
	return crcReg;
}

int bit_stuffing(uint8_t *data, uint8_t *output_data, int length) {
 800086e:	b480      	push	{r7}
 8000870:	b08f      	sub	sp, #60	; 0x3c
 8000872:	af00      	add	r7, sp, #0
 8000874:	60f8      	str	r0, [r7, #12]
 8000876:	60b9      	str	r1, [r7, #8]
 8000878:	607a      	str	r2, [r7, #4]
	int out_index = 0;
 800087a:	2300      	movs	r3, #0
 800087c:	637b      	str	r3, [r7, #52]	; 0x34
	int bit_count = 0; // Count of consecutive 1 bits
 800087e:	2300      	movs	r3, #0
 8000880:	633b      	str	r3, [r7, #48]	; 0x30
	uint8_t current_byte = 0;
 8000882:	2300      	movs	r3, #0
 8000884:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	int bit_pos = 7;
 8000888:	2307      	movs	r3, #7
 800088a:	62bb      	str	r3, [r7, #40]	; 0x28
	int stuffed_size = 0; // Track size of output data after bit stuffing
 800088c:	2300      	movs	r3, #0
 800088e:	627b      	str	r3, [r7, #36]	; 0x24
	int bits_stuffed = 0; // Number of bits stuffed since last size increase
 8000890:	2300      	movs	r3, #0
 8000892:	623b      	str	r3, [r7, #32]

	//myDebug("Error handler: before Bit stuffing \n");

	for (int i = 0; i < length; i++) {
 8000894:	2300      	movs	r3, #0
 8000896:	61fb      	str	r3, [r7, #28]
 8000898:	e078      	b.n	800098c <bit_stuffing+0x11e>
		for (int bit = 7; bit >= 0; bit--) {
 800089a:	2307      	movs	r3, #7
 800089c:	61bb      	str	r3, [r7, #24]
 800089e:	e06f      	b.n	8000980 <bit_stuffing+0x112>
			int bit_val = (data[i] >> bit) & 1;
 80008a0:	69fb      	ldr	r3, [r7, #28]
 80008a2:	68fa      	ldr	r2, [r7, #12]
 80008a4:	4413      	add	r3, r2
 80008a6:	781b      	ldrb	r3, [r3, #0]
 80008a8:	461a      	mov	r2, r3
 80008aa:	69bb      	ldr	r3, [r7, #24]
 80008ac:	fa42 f303 	asr.w	r3, r2, r3
 80008b0:	f003 0301 	and.w	r3, r3, #1
 80008b4:	617b      	str	r3, [r7, #20]

			//	myDebug("%d ", bit_val);

			current_byte |= (bit_val << bit_pos);
 80008b6:	697a      	ldr	r2, [r7, #20]
 80008b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008ba:	fa02 f303 	lsl.w	r3, r2, r3
 80008be:	b25a      	sxtb	r2, r3
 80008c0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80008c4:	4313      	orrs	r3, r2
 80008c6:	b25b      	sxtb	r3, r3
 80008c8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			bit_pos--;
 80008cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008ce:	3b01      	subs	r3, #1
 80008d0:	62bb      	str	r3, [r7, #40]	; 0x28

			if (bit_val) {
 80008d2:	697b      	ldr	r3, [r7, #20]
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d02f      	beq.n	8000938 <bit_stuffing+0xca>
				bit_count++;
 80008d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80008da:	3301      	adds	r3, #1
 80008dc:	633b      	str	r3, [r7, #48]	; 0x30
				if (bit_count == 5) {
 80008de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80008e0:	2b05      	cmp	r3, #5
 80008e2:	d12b      	bne.n	800093c <bit_stuffing+0xce>
					// Insert a 0 bit after five consecutive 1s
					if (bit_pos < 0) {
 80008e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	da10      	bge.n	800090c <bit_stuffing+0x9e>
						output_data[out_index++] = current_byte;
 80008ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80008ec:	1c5a      	adds	r2, r3, #1
 80008ee:	637a      	str	r2, [r7, #52]	; 0x34
 80008f0:	461a      	mov	r2, r3
 80008f2:	68bb      	ldr	r3, [r7, #8]
 80008f4:	4413      	add	r3, r2
 80008f6:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80008fa:	701a      	strb	r2, [r3, #0]
						stuffed_size++;
 80008fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008fe:	3301      	adds	r3, #1
 8000900:	627b      	str	r3, [r7, #36]	; 0x24
						current_byte = 0;
 8000902:	2300      	movs	r3, #0
 8000904:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						bit_pos = 7;
 8000908:	2307      	movs	r3, #7
 800090a:	62bb      	str	r3, [r7, #40]	; 0x28
					}
					current_byte &= ~(1 << bit_pos);
 800090c:	2201      	movs	r2, #1
 800090e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000910:	fa02 f303 	lsl.w	r3, r2, r3
 8000914:	b25b      	sxtb	r3, r3
 8000916:	43db      	mvns	r3, r3
 8000918:	b25a      	sxtb	r2, r3
 800091a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800091e:	4013      	ands	r3, r2
 8000920:	b25b      	sxtb	r3, r3
 8000922:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					bit_pos--;
 8000926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000928:	3b01      	subs	r3, #1
 800092a:	62bb      	str	r3, [r7, #40]	; 0x28
					bits_stuffed++;
 800092c:	6a3b      	ldr	r3, [r7, #32]
 800092e:	3301      	adds	r3, #1
 8000930:	623b      	str	r3, [r7, #32]
					bit_count = 0;
 8000932:	2300      	movs	r3, #0
 8000934:	633b      	str	r3, [r7, #48]	; 0x30
 8000936:	e001      	b.n	800093c <bit_stuffing+0xce>
				}
			} else {
				bit_count = 0;
 8000938:	2300      	movs	r3, #0
 800093a:	633b      	str	r3, [r7, #48]	; 0x30
			}

			if (bit_pos < 0) {
 800093c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800093e:	2b00      	cmp	r3, #0
 8000940:	da10      	bge.n	8000964 <bit_stuffing+0xf6>
				output_data[out_index++] = current_byte;
 8000942:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000944:	1c5a      	adds	r2, r3, #1
 8000946:	637a      	str	r2, [r7, #52]	; 0x34
 8000948:	461a      	mov	r2, r3
 800094a:	68bb      	ldr	r3, [r7, #8]
 800094c:	4413      	add	r3, r2
 800094e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8000952:	701a      	strb	r2, [r3, #0]
				stuffed_size++;
 8000954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000956:	3301      	adds	r3, #1
 8000958:	627b      	str	r3, [r7, #36]	; 0x24
				current_byte = 0;
 800095a:	2300      	movs	r3, #0
 800095c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				bit_pos = 7;
 8000960:	2307      	movs	r3, #7
 8000962:	62bb      	str	r3, [r7, #40]	; 0x28
			}

			// Check if we've stuffed enough bits to increase size
			if (bits_stuffed >= 9 && bit_pos >= 0) {
 8000964:	6a3b      	ldr	r3, [r7, #32]
 8000966:	2b08      	cmp	r3, #8
 8000968:	dd07      	ble.n	800097a <bit_stuffing+0x10c>
 800096a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800096c:	2b00      	cmp	r3, #0
 800096e:	db04      	blt.n	800097a <bit_stuffing+0x10c>
				stuffed_size++;
 8000970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000972:	3301      	adds	r3, #1
 8000974:	627b      	str	r3, [r7, #36]	; 0x24
				bits_stuffed = 0; // Reset bits_stuffed after increasing size
 8000976:	2300      	movs	r3, #0
 8000978:	623b      	str	r3, [r7, #32]
		for (int bit = 7; bit >= 0; bit--) {
 800097a:	69bb      	ldr	r3, [r7, #24]
 800097c:	3b01      	subs	r3, #1
 800097e:	61bb      	str	r3, [r7, #24]
 8000980:	69bb      	ldr	r3, [r7, #24]
 8000982:	2b00      	cmp	r3, #0
 8000984:	da8c      	bge.n	80008a0 <bit_stuffing+0x32>
	for (int i = 0; i < length; i++) {
 8000986:	69fb      	ldr	r3, [r7, #28]
 8000988:	3301      	adds	r3, #1
 800098a:	61fb      	str	r3, [r7, #28]
 800098c:	69fa      	ldr	r2, [r7, #28]
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	429a      	cmp	r2, r3
 8000992:	db82      	blt.n	800089a <bit_stuffing+0x2c>
			}
		}
	}
	//myDebug("\n");

	if (bit_pos < 7) {
 8000994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000996:	2b06      	cmp	r3, #6
 8000998:	dc0b      	bgt.n	80009b2 <bit_stuffing+0x144>
		output_data[out_index++] = current_byte;
 800099a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800099c:	1c5a      	adds	r2, r3, #1
 800099e:	637a      	str	r2, [r7, #52]	; 0x34
 80009a0:	461a      	mov	r2, r3
 80009a2:	68bb      	ldr	r3, [r7, #8]
 80009a4:	4413      	add	r3, r2
 80009a6:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80009aa:	701a      	strb	r2, [r3, #0]
		stuffed_size++;
 80009ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009ae:	3301      	adds	r3, #1
 80009b0:	627b      	str	r3, [r7, #36]	; 0x24
//			myDebug("%d ", bit_val);
//		}
//	}
//	myDebug("\n");

	return out_index; // Return the size of output data after bit stuffing
 80009b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80009b4:	4618      	mov	r0, r3
 80009b6:	373c      	adds	r7, #60	; 0x3c
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bc80      	pop	{r7}
 80009bc:	4770      	bx	lr

080009be <bit_destuffing>:

int bit_destuffing(uint8_t *data, uint8_t *output_data, int length) {
 80009be:	b480      	push	{r7}
 80009c0:	b08d      	sub	sp, #52	; 0x34
 80009c2:	af00      	add	r7, sp, #0
 80009c4:	60f8      	str	r0, [r7, #12]
 80009c6:	60b9      	str	r1, [r7, #8]
 80009c8:	607a      	str	r2, [r7, #4]
	int out_index = 0;
 80009ca:	2300      	movs	r3, #0
 80009cc:	62fb      	str	r3, [r7, #44]	; 0x2c
	int bit_count = 0;
 80009ce:	2300      	movs	r3, #0
 80009d0:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t current_byte = 0;
 80009d2:	2300      	movs	r3, #0
 80009d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	int bit_pos = 7;
 80009d8:	2307      	movs	r3, #7
 80009da:	623b      	str	r3, [r7, #32]

	for (int i = 0; i < length; i++) {
 80009dc:	2300      	movs	r3, #0
 80009de:	61fb      	str	r3, [r7, #28]
 80009e0:	e052      	b.n	8000a88 <bit_destuffing+0xca>
		for (int bit = 7; bit >= 0; bit--) {
 80009e2:	2307      	movs	r3, #7
 80009e4:	61bb      	str	r3, [r7, #24]
 80009e6:	e049      	b.n	8000a7c <bit_destuffing+0xbe>
			int bit_val = (data[i] >> bit) & 1;
 80009e8:	69fb      	ldr	r3, [r7, #28]
 80009ea:	68fa      	ldr	r2, [r7, #12]
 80009ec:	4413      	add	r3, r2
 80009ee:	781b      	ldrb	r3, [r3, #0]
 80009f0:	461a      	mov	r2, r3
 80009f2:	69bb      	ldr	r3, [r7, #24]
 80009f4:	fa42 f303 	asr.w	r3, r2, r3
 80009f8:	f003 0301 	and.w	r3, r3, #1
 80009fc:	617b      	str	r3, [r7, #20]

			if (bit_val) {
 80009fe:	697b      	ldr	r3, [r7, #20]
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d011      	beq.n	8000a28 <bit_destuffing+0x6a>
				bit_count++;
 8000a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a06:	3301      	adds	r3, #1
 8000a08:	62bb      	str	r3, [r7, #40]	; 0x28
				current_byte |= (bit_val << bit_pos);
 8000a0a:	697a      	ldr	r2, [r7, #20]
 8000a0c:	6a3b      	ldr	r3, [r7, #32]
 8000a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a12:	b25a      	sxtb	r2, r3
 8000a14:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8000a18:	4313      	orrs	r3, r2
 8000a1a:	b25b      	sxtb	r3, r3
 8000a1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				bit_pos--;
 8000a20:	6a3b      	ldr	r3, [r7, #32]
 8000a22:	3b01      	subs	r3, #1
 8000a24:	623b      	str	r3, [r7, #32]
 8000a26:	e015      	b.n	8000a54 <bit_destuffing+0x96>
			} else {
				if (bit_count == 5) {
 8000a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a2a:	2b05      	cmp	r3, #5
 8000a2c:	d102      	bne.n	8000a34 <bit_destuffing+0x76>
					// Skip this bit as it is a stuffed bit
					bit_count = 0;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	62bb      	str	r3, [r7, #40]	; 0x28
					continue;
 8000a32:	e020      	b.n	8000a76 <bit_destuffing+0xb8>
				} else {
					bit_count = 0;
 8000a34:	2300      	movs	r3, #0
 8000a36:	62bb      	str	r3, [r7, #40]	; 0x28
					current_byte |= (bit_val << bit_pos);
 8000a38:	697a      	ldr	r2, [r7, #20]
 8000a3a:	6a3b      	ldr	r3, [r7, #32]
 8000a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a40:	b25a      	sxtb	r2, r3
 8000a42:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8000a46:	4313      	orrs	r3, r2
 8000a48:	b25b      	sxtb	r3, r3
 8000a4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					bit_pos--;
 8000a4e:	6a3b      	ldr	r3, [r7, #32]
 8000a50:	3b01      	subs	r3, #1
 8000a52:	623b      	str	r3, [r7, #32]
				}
			}

			if (bit_pos < 0) {
 8000a54:	6a3b      	ldr	r3, [r7, #32]
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	da0d      	bge.n	8000a76 <bit_destuffing+0xb8>
				output_data[out_index++] = current_byte;
 8000a5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a5c:	1c5a      	adds	r2, r3, #1
 8000a5e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8000a60:	461a      	mov	r2, r3
 8000a62:	68bb      	ldr	r3, [r7, #8]
 8000a64:	4413      	add	r3, r2
 8000a66:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8000a6a:	701a      	strb	r2, [r3, #0]
				current_byte = 0;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				bit_pos = 7;
 8000a72:	2307      	movs	r3, #7
 8000a74:	623b      	str	r3, [r7, #32]
		for (int bit = 7; bit >= 0; bit--) {
 8000a76:	69bb      	ldr	r3, [r7, #24]
 8000a78:	3b01      	subs	r3, #1
 8000a7a:	61bb      	str	r3, [r7, #24]
 8000a7c:	69bb      	ldr	r3, [r7, #24]
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	dab2      	bge.n	80009e8 <bit_destuffing+0x2a>
	for (int i = 0; i < length; i++) {
 8000a82:	69fb      	ldr	r3, [r7, #28]
 8000a84:	3301      	adds	r3, #1
 8000a86:	61fb      	str	r3, [r7, #28]
 8000a88:	69fa      	ldr	r2, [r7, #28]
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	429a      	cmp	r2, r3
 8000a8e:	dba8      	blt.n	80009e2 <bit_destuffing+0x24>
			}
		}
	}

	// Ensure the last byte is written if it's partially filled
	if (bit_pos < 7) {
 8000a90:	6a3b      	ldr	r3, [r7, #32]
 8000a92:	2b06      	cmp	r3, #6
 8000a94:	dc08      	bgt.n	8000aa8 <bit_destuffing+0xea>
		output_data[out_index++] = current_byte;
 8000a96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a98:	1c5a      	adds	r2, r3, #1
 8000a9a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8000a9c:	461a      	mov	r2, r3
 8000a9e:	68bb      	ldr	r3, [r7, #8]
 8000aa0:	4413      	add	r3, r2
 8000aa2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8000aa6:	701a      	strb	r2, [r3, #0]
//			myDebug("%d ", bit_val);
//		}
//	}
//	myDebug("\n");

	return out_index;
 8000aa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8000aaa:	4618      	mov	r0, r3
 8000aac:	3734      	adds	r7, #52	; 0x34
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bc80      	pop	{r7}
 8000ab2:	4770      	bx	lr

08000ab4 <check_packet_type>:

int check_packet_type(uint8_t *OBC_UART) {
 8000ab4:	b480      	push	{r7}
 8000ab6:	b085      	sub	sp, #20
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
	uint8_t packet_type_true = 0;
 8000abc:	2300      	movs	r3, #0
 8000abe:	73fb      	strb	r3, [r7, #15]
	switch (OBC_UART[1]) {
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	3301      	adds	r3, #1
 8000ac4:	781b      	ldrb	r3, [r3, #0]
 8000ac6:	2bb2      	cmp	r3, #178	; 0xb2
 8000ac8:	d01e      	beq.n	8000b08 <check_packet_type+0x54>
 8000aca:	2bb2      	cmp	r3, #178	; 0xb2
 8000acc:	dc2e      	bgt.n	8000b2c <check_packet_type+0x78>
 8000ace:	2bb1      	cmp	r3, #177	; 0xb1
 8000ad0:	d017      	beq.n	8000b02 <check_packet_type+0x4e>
 8000ad2:	2bb1      	cmp	r3, #177	; 0xb1
 8000ad4:	dc2a      	bgt.n	8000b2c <check_packet_type+0x78>
 8000ad6:	2b0d      	cmp	r3, #13
 8000ad8:	dc10      	bgt.n	8000afc <check_packet_type+0x48>
 8000ada:	2b0a      	cmp	r3, #10
 8000adc:	db26      	blt.n	8000b2c <check_packet_type+0x78>
 8000ade:	3b0a      	subs	r3, #10
 8000ae0:	2b03      	cmp	r3, #3
 8000ae2:	d823      	bhi.n	8000b2c <check_packet_type+0x78>
 8000ae4:	a201      	add	r2, pc, #4	; (adr r2, 8000aec <check_packet_type+0x38>)
 8000ae6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000aea:	bf00      	nop
 8000aec:	08000b15 	.word	0x08000b15
 8000af0:	08000b1b 	.word	0x08000b1b
 8000af4:	08000b21 	.word	0x08000b21
 8000af8:	08000b27 	.word	0x08000b27
 8000afc:	2bac      	cmp	r3, #172	; 0xac
 8000afe:	d006      	beq.n	8000b0e <check_packet_type+0x5a>
 8000b00:	e014      	b.n	8000b2c <check_packet_type+0x78>

	case 0xb1:						// beacon_type_1
		packet_type_true = 1;
 8000b02:	2301      	movs	r3, #1
 8000b04:	73fb      	strb	r3, [r7, #15]
		break;
 8000b06:	e013      	b.n	8000b30 <check_packet_type+0x7c>

	case 0xb2:						// beacon_type_2
		packet_type_true = 1;
 8000b08:	2301      	movs	r3, #1
 8000b0a:	73fb      	strb	r3, [r7, #15]
		break;
 8000b0c:	e010      	b.n	8000b30 <check_packet_type+0x7c>

	case 0xac:						// ack
		packet_type_true = 1;
 8000b0e:	2301      	movs	r3, #1
 8000b10:	73fb      	strb	r3, [r7, #15]
		break;
 8000b12:	e00d      	b.n	8000b30 <check_packet_type+0x7c>

	case 0x0a:						// digipeater packet
		packet_type_true = 1;
 8000b14:	2301      	movs	r3, #1
 8000b16:	73fb      	strb	r3, [r7, #15]
		break;
 8000b18:	e00a      	b.n	8000b30 <check_packet_type+0x7c>

	case 0x0b:						// epdm
		packet_type_true = 1;
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	73fb      	strb	r3, [r7, #15]
		break;
 8000b1e:	e007      	b.n	8000b30 <check_packet_type+0x7c>

	case 0x0c:						// camera
		packet_type_true = 1;
 8000b20:	2301      	movs	r3, #1
 8000b22:	73fb      	strb	r3, [r7, #15]
		break;
 8000b24:	e004      	b.n	8000b30 <check_packet_type+0x7c>

	case 0x0d:						// adcs
		packet_type_true = 1;
 8000b26:	2301      	movs	r3, #1
 8000b28:	73fb      	strb	r3, [r7, #15]
		break;
 8000b2a:	e001      	b.n	8000b30 <check_packet_type+0x7c>

	default:
		packet_type_true = 0;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	73fb      	strb	r3, [r7, #15]
	}

	return packet_type_true;
 8000b30:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b32:	4618      	mov	r0, r3
 8000b34:	3714      	adds	r7, #20
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bc80      	pop	{r7}
 8000b3a:	4770      	bx	lr

08000b3c <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_DMAMUX1
  *         @arg @ref LL_AHB1_GRP1_PERIPH_CRC
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	b085      	sub	sp, #20
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000b44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b48:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000b4a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	4313      	orrs	r3, r2
 8000b52:	648b      	str	r3, [r1, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000b54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b58:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	4013      	ands	r3, r2
 8000b5e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b60:	68fb      	ldr	r3, [r7, #12]
}
 8000b62:	bf00      	nop
 8000b64:	3714      	adds	r7, #20
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bc80      	pop	{r7}
 8000b6a:	4770      	bx	lr

08000b6c <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b085      	sub	sp, #20
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000b74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b78:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000b7a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	4313      	orrs	r3, r2
 8000b82:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000b84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b88:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	4013      	ands	r3, r2
 8000b8e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b90:	68fb      	ldr	r3, [r7, #12]
}
 8000b92:	bf00      	nop
 8000b94:	3714      	adds	r7, #20
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bc80      	pop	{r7}
 8000b9a:	4770      	bx	lr

08000b9c <countsDataBetweenFlags>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int countsDataBetweenFlags(uint8_t *data, int data_length) {
 8000b9c:	b480      	push	{r7}
 8000b9e:	b087      	sub	sp, #28
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
 8000ba4:	6039      	str	r1, [r7, #0]
	int found_first_7e = 0;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	617b      	str	r3, [r7, #20]
	int start_index = 0, end_index = 0;
 8000baa:	2300      	movs	r3, #0
 8000bac:	613b      	str	r3, [r7, #16]
 8000bae:	2300      	movs	r3, #0
 8000bb0:	60fb      	str	r3, [r7, #12]

	for (int i = 0; i < data_length; i++) {
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	60bb      	str	r3, [r7, #8]
 8000bb6:	e013      	b.n	8000be0 <countsDataBetweenFlags+0x44>
		if (data[i] == 0x7e) {
 8000bb8:	68bb      	ldr	r3, [r7, #8]
 8000bba:	687a      	ldr	r2, [r7, #4]
 8000bbc:	4413      	add	r3, r2
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	2b7e      	cmp	r3, #126	; 0x7e
 8000bc2:	d10a      	bne.n	8000bda <countsDataBetweenFlags+0x3e>
			if (!found_first_7e) {
 8000bc4:	697b      	ldr	r3, [r7, #20]
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d104      	bne.n	8000bd4 <countsDataBetweenFlags+0x38>
				found_first_7e = 1;
 8000bca:	2301      	movs	r3, #1
 8000bcc:	617b      	str	r3, [r7, #20]
				start_index = i;
 8000bce:	68bb      	ldr	r3, [r7, #8]
 8000bd0:	613b      	str	r3, [r7, #16]
 8000bd2:	e002      	b.n	8000bda <countsDataBetweenFlags+0x3e>
			} else {
				end_index = i;
 8000bd4:	68bb      	ldr	r3, [r7, #8]
 8000bd6:	60fb      	str	r3, [r7, #12]
				break;
 8000bd8:	e006      	b.n	8000be8 <countsDataBetweenFlags+0x4c>
	for (int i = 0; i < data_length; i++) {
 8000bda:	68bb      	ldr	r3, [r7, #8]
 8000bdc:	3301      	adds	r3, #1
 8000bde:	60bb      	str	r3, [r7, #8]
 8000be0:	68ba      	ldr	r2, [r7, #8]
 8000be2:	683b      	ldr	r3, [r7, #0]
 8000be4:	429a      	cmp	r2, r3
 8000be6:	dbe7      	blt.n	8000bb8 <countsDataBetweenFlags+0x1c>
			}
		}
	}

	if (end_index > start_index) {
 8000be8:	68fa      	ldr	r2, [r7, #12]
 8000bea:	693b      	ldr	r3, [r7, #16]
 8000bec:	429a      	cmp	r2, r3
 8000bee:	dd04      	ble.n	8000bfa <countsDataBetweenFlags+0x5e>
		return end_index - start_index + 1;
 8000bf0:	68fa      	ldr	r2, [r7, #12]
 8000bf2:	693b      	ldr	r3, [r7, #16]
 8000bf4:	1ad3      	subs	r3, r2, r3
 8000bf6:	3301      	adds	r3, #1
 8000bf8:	e001      	b.n	8000bfe <countsDataBetweenFlags+0x62>
	} else {
		return -1; // Return -1 if two 0x7E flags are not found
 8000bfa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	}
}
 8000bfe:	4618      	mov	r0, r3
 8000c00:	371c      	adds	r7, #28
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bc80      	pop	{r7}
 8000c06:	4770      	bx	lr

08000c08 <setPacketParams>:

void setPacketParams(uint8_t buffer_length) {
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b082      	sub	sp, #8
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	4603      	mov	r3, r0
 8000c10:	71fb      	strb	r3, [r7, #7]
	pkt_params.PacketType = PACKET_TYPE_GFSK;
 8000c12:	4b11      	ldr	r3, [pc, #68]	; (8000c58 <setPacketParams+0x50>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	701a      	strb	r2, [r3, #0]
	pkt_params.Params.Gfsk.PayloadLength = buffer_length;
 8000c18:	4a0f      	ldr	r2, [pc, #60]	; (8000c58 <setPacketParams+0x50>)
 8000c1a:	79fb      	ldrb	r3, [r7, #7]
 8000c1c:	7213      	strb	r3, [r2, #8]
	pkt_params.Params.Gfsk.PreambleLength = 8;
 8000c1e:	4b0e      	ldr	r3, [pc, #56]	; (8000c58 <setPacketParams+0x50>)
 8000c20:	2208      	movs	r2, #8
 8000c22:	805a      	strh	r2, [r3, #2]
	pkt_params.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8000c24:	4b0c      	ldr	r3, [pc, #48]	; (8000c58 <setPacketParams+0x50>)
 8000c26:	2204      	movs	r2, #4
 8000c28:	711a      	strb	r2, [r3, #4]
	pkt_params.Params.Gfsk.SyncWordLength = 3 << 3;
 8000c2a:	4b0b      	ldr	r3, [pc, #44]	; (8000c58 <setPacketParams+0x50>)
 8000c2c:	2218      	movs	r2, #24
 8000c2e:	715a      	strb	r2, [r3, #5]
	pkt_params.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8000c30:	4b09      	ldr	r3, [pc, #36]	; (8000c58 <setPacketParams+0x50>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	719a      	strb	r2, [r3, #6]
	pkt_params.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 8000c36:	4b08      	ldr	r3, [pc, #32]	; (8000c58 <setPacketParams+0x50>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	71da      	strb	r2, [r3, #7]
	pkt_params.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8000c3c:	4b06      	ldr	r3, [pc, #24]	; (8000c58 <setPacketParams+0x50>)
 8000c3e:	22f2      	movs	r2, #242	; 0xf2
 8000c40:	725a      	strb	r2, [r3, #9]
	pkt_params.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8000c42:	4b05      	ldr	r3, [pc, #20]	; (8000c58 <setPacketParams+0x50>)
 8000c44:	2201      	movs	r2, #1
 8000c46:	729a      	strb	r2, [r3, #10]
	SUBGRF_SetPacketParams(&pkt_params);
 8000c48:	4803      	ldr	r0, [pc, #12]	; (8000c58 <setPacketParams+0x50>)
 8000c4a:	f009 fea9 	bl	800a9a0 <SUBGRF_SetPacketParams>

}
 8000c4e:	bf00      	nop
 8000c50:	3708      	adds	r7, #8
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	200006d0 	.word	0x200006d0

08000c5c <setModulationParams>:
void setModulationParams(unsigned long bitRate, unsigned long fDev) {
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
 8000c64:	6039      	str	r1, [r7, #0]
	mod_params.PacketType = PACKET_TYPE_GFSK;
 8000c66:	4b0b      	ldr	r3, [pc, #44]	; (8000c94 <setModulationParams+0x38>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	701a      	strb	r2, [r3, #0]
	mod_params.Params.Gfsk.Bandwidth = RX_BW_29300;
 8000c6c:	4b09      	ldr	r3, [pc, #36]	; (8000c94 <setModulationParams+0x38>)
 8000c6e:	220d      	movs	r2, #13
 8000c70:	735a      	strb	r2, [r3, #13]
	mod_params.Params.Gfsk.BitRate = bitRate;
 8000c72:	4a08      	ldr	r2, [pc, #32]	; (8000c94 <setModulationParams+0x38>)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	6053      	str	r3, [r2, #4]
	mod_params.Params.Gfsk.Fdev = fDev;
 8000c78:	4a06      	ldr	r2, [pc, #24]	; (8000c94 <setModulationParams+0x38>)
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	6093      	str	r3, [r2, #8]
	mod_params.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8000c7e:	4b05      	ldr	r3, [pc, #20]	; (8000c94 <setModulationParams+0x38>)
 8000c80:	220b      	movs	r2, #11
 8000c82:	731a      	strb	r2, [r3, #12]
	SUBGRF_SetModulationParams(&mod_params);
 8000c84:	4803      	ldr	r0, [pc, #12]	; (8000c94 <setModulationParams+0x38>)
 8000c86:	f009 fdb9 	bl	800a7fc <SUBGRF_SetModulationParams>

}
 8000c8a:	bf00      	nop
 8000c8c:	3708      	adds	r7, #8
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	200006e4 	.word	0x200006e4

08000c98 <radioConfig>:

void radioConfig(uint8_t *buffer, uint8_t buffer_len) {
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b084      	sub	sp, #16
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
 8000ca0:	460b      	mov	r3, r1
 8000ca2:	70fb      	strb	r3, [r7, #3]
	SUBGRF_SetBufferBaseAddress(0x00, 0x00);
 8000ca4:	2100      	movs	r1, #0
 8000ca6:	2000      	movs	r0, #0
 8000ca8:	f009 ff18 	bl	800aadc <SUBGRF_SetBufferBaseAddress>
	SUBGRF_SetPayload(buffer, buffer_len);
 8000cac:	78fb      	ldrb	r3, [r7, #3]
 8000cae:	4619      	mov	r1, r3
 8000cb0:	6878      	ldr	r0, [r7, #4]
 8000cb2:	f009 f8f9 	bl	8009ea8 <SUBGRF_SetPayload>
	SUBGRF_SetSyncWord(( uint8_t[] ) { 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00,
 8000cb6:	4a15      	ldr	r2, [pc, #84]	; (8000d0c <radioConfig+0x74>)
 8000cb8:	f107 0308 	add.w	r3, r7, #8
 8000cbc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000cc0:	e883 0003 	stmia.w	r3, {r0, r1}
 8000cc4:	f107 0308 	add.w	r3, r7, #8
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f009 f932 	bl	8009f32 <SUBGRF_SetSyncWord>
					0x00 });
	SUBGRF_SetWhiteningSeed(0x01FF);
 8000cce:	f240 10ff 	movw	r0, #511	; 0x1ff
 8000cd2:	f009 f97d 	bl	8009fd0 <SUBGRF_SetWhiteningSeed>
	SUBGRF_SetPaConfig(PA_DUTY_CYCLE, HP_MAX, PA_SEL, 0x01);
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	2201      	movs	r2, #1
 8000cda:	2100      	movs	r1, #0
 8000cdc:	2007      	movs	r0, #7
 8000cde:	f009 fbd5 	bl	800a48c <SUBGRF_SetPaConfig>
	SUBGRF_SetTxParams(RFO_LP, POWER, RAMP_TIME);
 8000ce2:	2202      	movs	r2, #2
 8000ce4:	210e      	movs	r1, #14
 8000ce6:	2001      	movs	r0, #1
 8000ce8:	f009 fcba 	bl	800a660 <SUBGRF_SetTxParams>

	SUBGRF_Init(DioIrqHndlr);
 8000cec:	4808      	ldr	r0, [pc, #32]	; (8000d10 <radioConfig+0x78>)
 8000cee:	f009 f889 	bl	8009e04 <SUBGRF_Init>
	SUBGRF_SetDioIrqParams(
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	f240 210f 	movw	r1, #527	; 0x20f
 8000cfa:	f240 200f 	movw	r0, #527	; 0x20f
 8000cfe:	f009 fbe7 	bl	800a4d0 <SUBGRF_SetDioIrqParams>
			IRQ_TX_DONE | IRQ_PREAMBLE_DETECTED | IRQ_RX_DONE
					| IRQ_RX_TX_TIMEOUT | IRQ_SYNCWORD_VALID,
			IRQ_TX_DONE | IRQ_PREAMBLE_DETECTED | IRQ_RX_DONE
					| IRQ_RX_TX_TIMEOUT | IRQ_SYNCWORD_VALID, IRQ_RADIO_NONE,
			IRQ_RADIO_NONE);
}
 8000d02:	bf00      	nop
 8000d04:	3710      	adds	r7, #16
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	0800c32c 	.word	0x0800c32c
 8000d10:	08001955 	.word	0x08001955

08000d14 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b088      	sub	sp, #32
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
	if (huart == &huart2 || huart == &hlpuart1 || huart == &huart1) {
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	4a98      	ldr	r2, [pc, #608]	; (8000f80 <HAL_UART_RxCpltCallback+0x26c>)
 8000d20:	4293      	cmp	r3, r2
 8000d22:	d008      	beq.n	8000d36 <HAL_UART_RxCpltCallback+0x22>
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	4a97      	ldr	r2, [pc, #604]	; (8000f84 <HAL_UART_RxCpltCallback+0x270>)
 8000d28:	4293      	cmp	r3, r2
 8000d2a:	d004      	beq.n	8000d36 <HAL_UART_RxCpltCallback+0x22>
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	4a96      	ldr	r2, [pc, #600]	; (8000f88 <HAL_UART_RxCpltCallback+0x274>)
 8000d30:	4293      	cmp	r3, r2
 8000d32:	f040 8217 	bne.w	8001164 <HAL_UART_RxCpltCallback+0x450>

		if (OBC_HANDSHAKE_FLAG) {
 8000d36:	4b95      	ldr	r3, [pc, #596]	; (8000f8c <HAL_UART_RxCpltCallback+0x278>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	f000 8212 	beq.w	8001164 <HAL_UART_RxCpltCallback+0x450>

			uint8_t header = 0x00;
 8000d40:	2300      	movs	r3, #0
 8000d42:	72fb      	strb	r3, [r7, #11]

			if (OBC_UART_RX[0] == header || OBC_UART_RX[0] != 0x53) {
 8000d44:	4b92      	ldr	r3, [pc, #584]	; (8000f90 <HAL_UART_RxCpltCallback+0x27c>)
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	7afa      	ldrb	r2, [r7, #11]
 8000d4a:	429a      	cmp	r2, r3
 8000d4c:	d003      	beq.n	8000d56 <HAL_UART_RxCpltCallback+0x42>
 8000d4e:	4b90      	ldr	r3, [pc, #576]	; (8000f90 <HAL_UART_RxCpltCallback+0x27c>)
 8000d50:	781b      	ldrb	r3, [r3, #0]
 8000d52:	2b53      	cmp	r3, #83	; 0x53
 8000d54:	d011      	beq.n	8000d7a <HAL_UART_RxCpltCallback+0x66>

				for (int loop1 = 0; loop1 < sizeof(OBC_UART_RX); loop1++) {
 8000d56:	2300      	movs	r3, #0
 8000d58:	61fb      	str	r3, [r7, #28]
 8000d5a:	e00b      	b.n	8000d74 <HAL_UART_RxCpltCallback+0x60>
					OBC_UART_RX[loop1] = OBC_UART_RX[loop1 + 1];
 8000d5c:	69fb      	ldr	r3, [r7, #28]
 8000d5e:	3301      	adds	r3, #1
 8000d60:	4a8b      	ldr	r2, [pc, #556]	; (8000f90 <HAL_UART_RxCpltCallback+0x27c>)
 8000d62:	5cd1      	ldrb	r1, [r2, r3]
 8000d64:	4a8a      	ldr	r2, [pc, #552]	; (8000f90 <HAL_UART_RxCpltCallback+0x27c>)
 8000d66:	69fb      	ldr	r3, [r7, #28]
 8000d68:	4413      	add	r3, r2
 8000d6a:	460a      	mov	r2, r1
 8000d6c:	701a      	strb	r2, [r3, #0]
				for (int loop1 = 0; loop1 < sizeof(OBC_UART_RX); loop1++) {
 8000d6e:	69fb      	ldr	r3, [r7, #28]
 8000d70:	3301      	adds	r3, #1
 8000d72:	61fb      	str	r3, [r7, #28]
 8000d74:	69fb      	ldr	r3, [r7, #28]
 8000d76:	2b54      	cmp	r3, #84	; 0x54
 8000d78:	d9f0      	bls.n	8000d5c <HAL_UART_RxCpltCallback+0x48>
				}
			}

			packet_type_true = check_packet_type(OBC_UART_RX);
 8000d7a:	4885      	ldr	r0, [pc, #532]	; (8000f90 <HAL_UART_RxCpltCallback+0x27c>)
 8000d7c:	f7ff fe9a 	bl	8000ab4 <check_packet_type>
 8000d80:	4603      	mov	r3, r0
 8000d82:	4a84      	ldr	r2, [pc, #528]	; (8000f94 <HAL_UART_RxCpltCallback+0x280>)
 8000d84:	6013      	str	r3, [r2, #0]

			if (packet_type_true) {
 8000d86:	4b83      	ldr	r3, [pc, #524]	; (8000f94 <HAL_UART_RxCpltCallback+0x280>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	f000 819d 	beq.w	80010ca <HAL_UART_RxCpltCallback+0x3b6>

				if (DIGIPEATER_STATUS == 1 && BEACON_COUNT == 0
 8000d90:	4b81      	ldr	r3, [pc, #516]	; (8000f98 <HAL_UART_RxCpltCallback+0x284>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	2b01      	cmp	r3, #1
 8000d96:	f040 813d 	bne.w	8001014 <HAL_UART_RxCpltCallback+0x300>
 8000d9a:	4b80      	ldr	r3, [pc, #512]	; (8000f9c <HAL_UART_RxCpltCallback+0x288>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	f040 8138 	bne.w	8001014 <HAL_UART_RxCpltCallback+0x300>
						&& DIGIPEATER_RX_FLAG == 1) {
 8000da4:	4b7e      	ldr	r3, [pc, #504]	; (8000fa0 <HAL_UART_RxCpltCallback+0x28c>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	2b01      	cmp	r3, #1
 8000daa:	f040 8133 	bne.w	8001014 <HAL_UART_RxCpltCallback+0x300>

					OBC_SUCCESS_DATA_RX_FLAG = 0;
 8000dae:	4b7d      	ldr	r3, [pc, #500]	; (8000fa4 <HAL_UART_RxCpltCallback+0x290>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	601a      	str	r2, [r3, #0]
//					for (int i = 0; i < sizeof(OBC_UART_RX); i++) {
//						myDebug("%02x ", OBC_UART_RX[i]);
//					}
//					myDebug("\r\n");

					if (OBC_UART_RX[0] == 0x53 && OBC_UART_RX[83] == 0x7E) {
 8000db4:	4b76      	ldr	r3, [pc, #472]	; (8000f90 <HAL_UART_RxCpltCallback+0x27c>)
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	2b53      	cmp	r3, #83	; 0x53
 8000dba:	f040 80a1 	bne.w	8000f00 <HAL_UART_RxCpltCallback+0x1ec>
 8000dbe:	4b74      	ldr	r3, [pc, #464]	; (8000f90 <HAL_UART_RxCpltCallback+0x27c>)
 8000dc0:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8000dc4:	2b7e      	cmp	r3, #126	; 0x7e
 8000dc6:	f040 809b 	bne.w	8000f00 <HAL_UART_RxCpltCallback+0x1ec>
						myDebug(
 8000dca:	4877      	ldr	r0, [pc, #476]	; (8000fa8 <HAL_UART_RxCpltCallback+0x294>)
 8000dcc:	f7ff fcd6 	bl	800077c <myDebug>
								"--> Correct Digipeater Data received from OBC\n");
						obc_ilen = OBC_UART_RX[2];  //len of info
 8000dd0:	4b6f      	ldr	r3, [pc, #444]	; (8000f90 <HAL_UART_RxCpltCallback+0x27c>)
 8000dd2:	789a      	ldrb	r2, [r3, #2]
 8000dd4:	4b75      	ldr	r3, [pc, #468]	; (8000fac <HAL_UART_RxCpltCallback+0x298>)
 8000dd6:	701a      	strb	r2, [r3, #0]
						PACKET_TYPE = OBC_UART_RX[1]; //packet_type
 8000dd8:	4b6d      	ldr	r3, [pc, #436]	; (8000f90 <HAL_UART_RxCpltCallback+0x27c>)
 8000dda:	785a      	ldrb	r2, [r3, #1]
 8000ddc:	4b74      	ldr	r3, [pc, #464]	; (8000fb0 <HAL_UART_RxCpltCallback+0x29c>)
 8000dde:	701a      	strb	r2, [r3, #0]
						DIGIPEATER_FLAG = 1;
 8000de0:	4b74      	ldr	r3, [pc, #464]	; (8000fb4 <HAL_UART_RxCpltCallback+0x2a0>)
 8000de2:	2201      	movs	r2, #1
 8000de4:	601a      	str	r2, [r3, #0]

						getAX25Packet(OBC_UART_RX, obc_ilen);
 8000de6:	4b71      	ldr	r3, [pc, #452]	; (8000fac <HAL_UART_RxCpltCallback+0x298>)
 8000de8:	781b      	ldrb	r3, [r3, #0]
 8000dea:	4619      	mov	r1, r3
 8000dec:	4868      	ldr	r0, [pc, #416]	; (8000f90 <HAL_UART_RxCpltCallback+0x27c>)
 8000dee:	f7ff fc21 	bl	8000634 <getAX25Packet>

						tx_buffer_len = countsDataBetweenFlags(temp_tx_buffer,
 8000df2:	2196      	movs	r1, #150	; 0x96
 8000df4:	4870      	ldr	r0, [pc, #448]	; (8000fb8 <HAL_UART_RxCpltCallback+0x2a4>)
 8000df6:	f7ff fed1 	bl	8000b9c <countsDataBetweenFlags>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	4a6f      	ldr	r2, [pc, #444]	; (8000fbc <HAL_UART_RxCpltCallback+0x2a8>)
 8000dfe:	6013      	str	r3, [r2, #0]
								sizeof(temp_tx_buffer));

//						myDebug(		"Digipeater Packet complete, ready to TX: 0x%x\r\n", temp_tx_buffer);
						for (int j = 0; j < tx_buffer_len; j++) {
 8000e00:	2300      	movs	r3, #0
 8000e02:	61bb      	str	r3, [r7, #24]
 8000e04:	e00b      	b.n	8000e1e <HAL_UART_RxCpltCallback+0x10a>
							tx_buffer[j] = temp_tx_buffer[j];
 8000e06:	4a6c      	ldr	r2, [pc, #432]	; (8000fb8 <HAL_UART_RxCpltCallback+0x2a4>)
 8000e08:	69bb      	ldr	r3, [r7, #24]
 8000e0a:	4413      	add	r3, r2
 8000e0c:	7819      	ldrb	r1, [r3, #0]
 8000e0e:	4a6c      	ldr	r2, [pc, #432]	; (8000fc0 <HAL_UART_RxCpltCallback+0x2ac>)
 8000e10:	69bb      	ldr	r3, [r7, #24]
 8000e12:	4413      	add	r3, r2
 8000e14:	460a      	mov	r2, r1
 8000e16:	701a      	strb	r2, [r3, #0]
						for (int j = 0; j < tx_buffer_len; j++) {
 8000e18:	69bb      	ldr	r3, [r7, #24]
 8000e1a:	3301      	adds	r3, #1
 8000e1c:	61bb      	str	r3, [r7, #24]
 8000e1e:	4b67      	ldr	r3, [pc, #412]	; (8000fbc <HAL_UART_RxCpltCallback+0x2a8>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	69ba      	ldr	r2, [r7, #24]
 8000e24:	429a      	cmp	r2, r3
 8000e26:	dbee      	blt.n	8000e06 <HAL_UART_RxCpltCallback+0xf2>
//							myDebug("%02x ", tx_buffer[j]);
						}
//						myDebug("\r\n");
//						myDebug("size of tx_buffer = %d\r\n", tx_buffer_len);

						memset(OBC_UART_RX, '\0', obc_ilen);
 8000e28:	4b60      	ldr	r3, [pc, #384]	; (8000fac <HAL_UART_RxCpltCallback+0x298>)
 8000e2a:	781b      	ldrb	r3, [r3, #0]
 8000e2c:	461a      	mov	r2, r3
 8000e2e:	2100      	movs	r1, #0
 8000e30:	4857      	ldr	r0, [pc, #348]	; (8000f90 <HAL_UART_RxCpltCallback+0x27c>)
 8000e32:	f00a fddb 	bl	800b9ec <memset>
						memset(temp_tx_buffer, '\0', sizeof(temp_tx_buffer));
 8000e36:	2296      	movs	r2, #150	; 0x96
 8000e38:	2100      	movs	r1, #0
 8000e3a:	485f      	ldr	r0, [pc, #380]	; (8000fb8 <HAL_UART_RxCpltCallback+0x2a4>)
 8000e3c:	f00a fdd6 	bl	800b9ec <memset>

						delay_us(500000);
 8000e40:	4860      	ldr	r0, [pc, #384]	; (8000fc4 <HAL_UART_RxCpltCallback+0x2b0>)
 8000e42:	f7ff fc81 	bl	8000748 <delay_us>

						setPacketParams(tx_buffer_len);
 8000e46:	4b5d      	ldr	r3, [pc, #372]	; (8000fbc <HAL_UART_RxCpltCallback+0x2a8>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	b2db      	uxtb	r3, r3
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f7ff fedb 	bl	8000c08 <setPacketParams>
						setModulationParams(GFSK_BR_1200, GFSK_FDEV_1200);
 8000e52:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8000e56:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8000e5a:	f7ff feff 	bl	8000c5c <setModulationParams>
						radioConfig(tx_buffer, tx_buffer_len);
 8000e5e:	4b57      	ldr	r3, [pc, #348]	; (8000fbc <HAL_UART_RxCpltCallback+0x2a8>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	b2db      	uxtb	r3, r3
 8000e64:	4619      	mov	r1, r3
 8000e66:	4856      	ldr	r0, [pc, #344]	; (8000fc0 <HAL_UART_RxCpltCallback+0x2ac>)
 8000e68:	f7ff ff16 	bl	8000c98 <radioConfig>

						myDebug("\n########## TX Configuration: ##########\n");
 8000e6c:	4856      	ldr	r0, [pc, #344]	; (8000fc8 <HAL_UART_RxCpltCallback+0x2b4>)
 8000e6e:	f7ff fc85 	bl	800077c <myDebug>

						myDebug("FREQUENCY MODS: DOWNLINK FREQ: %lu Hz\r\n",
 8000e72:	4956      	ldr	r1, [pc, #344]	; (8000fcc <HAL_UART_RxCpltCallback+0x2b8>)
 8000e74:	4856      	ldr	r0, [pc, #344]	; (8000fd0 <HAL_UART_RxCpltCallback+0x2bc>)
 8000e76:	f7ff fc81 	bl	800077c <myDebug>
						FREQ_437_MHZ);
						myDebug("Bit Rate: 	%d\n\r",
 8000e7a:	4b56      	ldr	r3, [pc, #344]	; (8000fd4 <HAL_UART_RxCpltCallback+0x2c0>)
 8000e7c:	685b      	ldr	r3, [r3, #4]
 8000e7e:	4619      	mov	r1, r3
 8000e80:	4855      	ldr	r0, [pc, #340]	; (8000fd8 <HAL_UART_RxCpltCallback+0x2c4>)
 8000e82:	f7ff fc7b 	bl	800077c <myDebug>
								mod_params.Params.Gfsk.BitRate);
						myDebug("Frequency Deviation: 	%d\n\r",
 8000e86:	4b53      	ldr	r3, [pc, #332]	; (8000fd4 <HAL_UART_RxCpltCallback+0x2c0>)
 8000e88:	689b      	ldr	r3, [r3, #8]
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	4853      	ldr	r0, [pc, #332]	; (8000fdc <HAL_UART_RxCpltCallback+0x2c8>)
 8000e8e:	f7ff fc75 	bl	800077c <myDebug>
								mod_params.Params.Gfsk.Fdev);
						myDebug("RECEVING BANDWIDTH: 	%d\n\r",
								mod_params.Params.Gfsk.Bandwidth);
 8000e92:	4b50      	ldr	r3, [pc, #320]	; (8000fd4 <HAL_UART_RxCpltCallback+0x2c0>)
 8000e94:	7b5b      	ldrb	r3, [r3, #13]
						myDebug("RECEVING BANDWIDTH: 	%d\n\r",
 8000e96:	4619      	mov	r1, r3
 8000e98:	4851      	ldr	r0, [pc, #324]	; (8000fe0 <HAL_UART_RxCpltCallback+0x2cc>)
 8000e9a:	f7ff fc6f 	bl	800077c <myDebug>
						myDebug("Packet Type 			%d\n\r", pkt_params.PacketType);
 8000e9e:	4b51      	ldr	r3, [pc, #324]	; (8000fe4 <HAL_UART_RxCpltCallback+0x2d0>)
 8000ea0:	781b      	ldrb	r3, [r3, #0]
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	4850      	ldr	r0, [pc, #320]	; (8000fe8 <HAL_UART_RxCpltCallback+0x2d4>)
 8000ea6:	f7ff fc69 	bl	800077c <myDebug>
						myDebug("PayloadLength 			%d\n\r",
								pkt_params.Params.Gfsk.PayloadLength);
 8000eaa:	4b4e      	ldr	r3, [pc, #312]	; (8000fe4 <HAL_UART_RxCpltCallback+0x2d0>)
 8000eac:	7a1b      	ldrb	r3, [r3, #8]
						myDebug("PayloadLength 			%d\n\r",
 8000eae:	4619      	mov	r1, r3
 8000eb0:	484e      	ldr	r0, [pc, #312]	; (8000fec <HAL_UART_RxCpltCallback+0x2d8>)
 8000eb2:	f7ff fc63 	bl	800077c <myDebug>
						myDebug("PreambleLength 		%d\n\r",
								pkt_params.Params.Gfsk.PreambleLength);
 8000eb6:	4b4b      	ldr	r3, [pc, #300]	; (8000fe4 <HAL_UART_RxCpltCallback+0x2d0>)
 8000eb8:	885b      	ldrh	r3, [r3, #2]
						myDebug("PreambleLength 		%d\n\r",
 8000eba:	4619      	mov	r1, r3
 8000ebc:	484c      	ldr	r0, [pc, #304]	; (8000ff0 <HAL_UART_RxCpltCallback+0x2dc>)
 8000ebe:	f7ff fc5d 	bl	800077c <myDebug>
						myDebug("PreambleMinDetect		%d\n\r",
								pkt_params.Params.Gfsk.PreambleMinDetect);
 8000ec2:	4b48      	ldr	r3, [pc, #288]	; (8000fe4 <HAL_UART_RxCpltCallback+0x2d0>)
 8000ec4:	791b      	ldrb	r3, [r3, #4]
						myDebug("PreambleMinDetect		%d\n\r",
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	484a      	ldr	r0, [pc, #296]	; (8000ff4 <HAL_UART_RxCpltCallback+0x2e0>)
 8000eca:	f7ff fc57 	bl	800077c <myDebug>
						myDebug("HeaderType 			%d\n\r",
								pkt_params.Params.Gfsk.HeaderType);
 8000ece:	4b45      	ldr	r3, [pc, #276]	; (8000fe4 <HAL_UART_RxCpltCallback+0x2d0>)
 8000ed0:	79db      	ldrb	r3, [r3, #7]
						myDebug("HeaderType 			%d\n\r",
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	4848      	ldr	r0, [pc, #288]	; (8000ff8 <HAL_UART_RxCpltCallback+0x2e4>)
 8000ed6:	f7ff fc51 	bl	800077c <myDebug>
						myDebug("__________*******************__________\r\n");
 8000eda:	4848      	ldr	r0, [pc, #288]	; (8000ffc <HAL_UART_RxCpltCallback+0x2e8>)
 8000edc:	f7ff fc4e 	bl	800077c <myDebug>

						SUBGRF_SetRfFrequency(FREQ_437_MHZ);
 8000ee0:	483a      	ldr	r0, [pc, #232]	; (8000fcc <HAL_UART_RxCpltCallback+0x2b8>)
 8000ee2:	f009 fb51 	bl	800a588 <SUBGRF_SetRfFrequency>
						SUBGRF_SetSwitch(RFO_LP, RFSWITCH_TX);
 8000ee6:	2101      	movs	r1, #1
 8000ee8:	2001      	movs	r0, #1
 8000eea:	f009 ff95 	bl	800ae18 <SUBGRF_SetSwitch>
						SUBGRF_SendPayload(tx_buffer, tx_buffer_len, 0);
 8000eee:	4b33      	ldr	r3, [pc, #204]	; (8000fbc <HAL_UART_RxCpltCallback+0x2a8>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	b2db      	uxtb	r3, r3
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	4831      	ldr	r0, [pc, #196]	; (8000fc0 <HAL_UART_RxCpltCallback+0x2ac>)
 8000efa:	f009 f807 	bl	8009f0c <SUBGRF_SendPayload>
					if (OBC_UART_RX[0] == 0x53 && OBC_UART_RX[83] == 0x7E) {
 8000efe:	e120      	b.n	8001142 <HAL_UART_RxCpltCallback+0x42e>

					} else {
						myDebug(
 8000f00:	483f      	ldr	r0, [pc, #252]	; (8001000 <HAL_UART_RxCpltCallback+0x2ec>)
 8000f02:	f7ff fc3b 	bl	800077c <myDebug>
								"*** Incorrect Digipeater Data received from OBC\n");
						if (HAL_UART_Transmit(&huart2, OBC_UART_RX, obc_plen,
 8000f06:	4b3f      	ldr	r3, [pc, #252]	; (8001004 <HAL_UART_RxCpltCallback+0x2f0>)
 8000f08:	781b      	ldrb	r3, [r3, #0]
 8000f0a:	b29a      	uxth	r2, r3
 8000f0c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000f10:	491f      	ldr	r1, [pc, #124]	; (8000f90 <HAL_UART_RxCpltCallback+0x27c>)
 8000f12:	481b      	ldr	r0, [pc, #108]	; (8000f80 <HAL_UART_RxCpltCallback+0x26c>)
 8000f14:	f005 fb2f 	bl	8006576 <HAL_UART_Transmit>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d00c      	beq.n	8000f38 <HAL_UART_RxCpltCallback+0x224>
								2000) == HAL_OK
								|| HAL_UART_Transmit(&hlpuart1, OBC_UART_RX,
 8000f1e:	4b39      	ldr	r3, [pc, #228]	; (8001004 <HAL_UART_RxCpltCallback+0x2f0>)
 8000f20:	781b      	ldrb	r3, [r3, #0]
 8000f22:	b29a      	uxth	r2, r3
 8000f24:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000f28:	4919      	ldr	r1, [pc, #100]	; (8000f90 <HAL_UART_RxCpltCallback+0x27c>)
 8000f2a:	4816      	ldr	r0, [pc, #88]	; (8000f84 <HAL_UART_RxCpltCallback+0x270>)
 8000f2c:	f005 fb23 	bl	8006576 <HAL_UART_Transmit>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	f040 8105 	bne.w	8001142 <HAL_UART_RxCpltCallback+0x42e>
										obc_plen, 2000) == HAL_OK) {
							myDebug(
 8000f38:	2155      	movs	r1, #85	; 0x55
 8000f3a:	4833      	ldr	r0, [pc, #204]	; (8001008 <HAL_UART_RxCpltCallback+0x2f4>)
 8000f3c:	f7ff fc1e 	bl	800077c <myDebug>
									"*** Incorrect Digipeater Data re-transmit to OBC, Length: %d\r\n",
									sizeof(OBC_UART_RX));

							for (int i = 0; i < sizeof(OBC_UART_RX); i++) {
 8000f40:	2300      	movs	r3, #0
 8000f42:	617b      	str	r3, [r7, #20]
 8000f44:	e00a      	b.n	8000f5c <HAL_UART_RxCpltCallback+0x248>
								myDebug("%02x ", OBC_UART_RX[i]);
 8000f46:	4a12      	ldr	r2, [pc, #72]	; (8000f90 <HAL_UART_RxCpltCallback+0x27c>)
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	4413      	add	r3, r2
 8000f4c:	781b      	ldrb	r3, [r3, #0]
 8000f4e:	4619      	mov	r1, r3
 8000f50:	482e      	ldr	r0, [pc, #184]	; (800100c <HAL_UART_RxCpltCallback+0x2f8>)
 8000f52:	f7ff fc13 	bl	800077c <myDebug>
							for (int i = 0; i < sizeof(OBC_UART_RX); i++) {
 8000f56:	697b      	ldr	r3, [r7, #20]
 8000f58:	3301      	adds	r3, #1
 8000f5a:	617b      	str	r3, [r7, #20]
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	2b54      	cmp	r3, #84	; 0x54
 8000f60:	d9f1      	bls.n	8000f46 <HAL_UART_RxCpltCallback+0x232>
							}

							myDebug("\r\n");
 8000f62:	482b      	ldr	r0, [pc, #172]	; (8001010 <HAL_UART_RxCpltCallback+0x2fc>)
 8000f64:	f7ff fc0a 	bl	800077c <myDebug>

							memset(OBC_UART_RX, '\0', sizeof(OBC_UART_RX));
 8000f68:	2255      	movs	r2, #85	; 0x55
 8000f6a:	2100      	movs	r1, #0
 8000f6c:	4808      	ldr	r0, [pc, #32]	; (8000f90 <HAL_UART_RxCpltCallback+0x27c>)
 8000f6e:	f00a fd3d 	bl	800b9ec <memset>

							OBC_SUCCESS_DATA_RX_FLAG = 0;
 8000f72:	4b0c      	ldr	r3, [pc, #48]	; (8000fa4 <HAL_UART_RxCpltCallback+0x290>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	601a      	str	r2, [r3, #0]
							DIGIPEATER_FLAG = 0;
 8000f78:	4b0e      	ldr	r3, [pc, #56]	; (8000fb4 <HAL_UART_RxCpltCallback+0x2a0>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	601a      	str	r2, [r3, #0]
					if (OBC_UART_RX[0] == 0x53 && OBC_UART_RX[83] == 0x7E) {
 8000f7e:	e0e0      	b.n	8001142 <HAL_UART_RxCpltCallback+0x42e>
 8000f80:	200003a4 	.word	0x200003a4
 8000f84:	2000027c 	.word	0x2000027c
 8000f88:	20000310 	.word	0x20000310
 8000f8c:	200008fc 	.word	0x200008fc
 8000f90:	2000076c 	.word	0x2000076c
 8000f94:	20000910 	.word	0x20000910
 8000f98:	20000900 	.word	0x20000900
 8000f9c:	20000004 	.word	0x20000004
 8000fa0:	2000090c 	.word	0x2000090c
 8000fa4:	200007c4 	.word	0x200007c4
 8000fa8:	0800c334 	.word	0x0800c334
 8000fac:	2000076a 	.word	0x2000076a
 8000fb0:	20000904 	.word	0x20000904
 8000fb4:	20000908 	.word	0x20000908
 8000fb8:	200007c8 	.word	0x200007c8
 8000fbc:	200008f8 	.word	0x200008f8
 8000fc0:	20000860 	.word	0x20000860
 8000fc4:	0007a120 	.word	0x0007a120
 8000fc8:	0800c364 	.word	0x0800c364
 8000fcc:	1a11d018 	.word	0x1a11d018
 8000fd0:	0800c390 	.word	0x0800c390
 8000fd4:	200006e4 	.word	0x200006e4
 8000fd8:	0800c3b8 	.word	0x0800c3b8
 8000fdc:	0800c3c8 	.word	0x0800c3c8
 8000fe0:	0800c3e4 	.word	0x0800c3e4
 8000fe4:	200006d0 	.word	0x200006d0
 8000fe8:	0800c400 	.word	0x0800c400
 8000fec:	0800c414 	.word	0x0800c414
 8000ff0:	0800c42c 	.word	0x0800c42c
 8000ff4:	0800c444 	.word	0x0800c444
 8000ff8:	0800c45c 	.word	0x0800c45c
 8000ffc:	0800c470 	.word	0x0800c470
 8001000:	0800c49c 	.word	0x0800c49c
 8001004:	20000001 	.word	0x20000001
 8001008:	0800c4d0 	.word	0x0800c4d0
 800100c:	0800c510 	.word	0x0800c510
 8001010:	0800c518 	.word	0x0800c518
//					for (int i = 0; i < sizeof(OBC_UART_RX); i++) {
//						myDebug("%02x ", OBC_UART_RX[i]);
//					}
//					myDebug("\r\n");

					if (OBC_UART_RX[0] == 0x53 && OBC_UART_RX[(83)] == 0x7E) {
 8001014:	4b55      	ldr	r3, [pc, #340]	; (800116c <HAL_UART_RxCpltCallback+0x458>)
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	2b53      	cmp	r3, #83	; 0x53
 800101a:	d11a      	bne.n	8001052 <HAL_UART_RxCpltCallback+0x33e>
 800101c:	4b53      	ldr	r3, [pc, #332]	; (800116c <HAL_UART_RxCpltCallback+0x458>)
 800101e:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8001022:	2b7e      	cmp	r3, #126	; 0x7e
 8001024:	d115      	bne.n	8001052 <HAL_UART_RxCpltCallback+0x33e>
//						myDebug("--> Correct command received from OBC\n");
						obc_ilen = OBC_UART_RX[2];  //len of info
 8001026:	4b51      	ldr	r3, [pc, #324]	; (800116c <HAL_UART_RxCpltCallback+0x458>)
 8001028:	789a      	ldrb	r2, [r3, #2]
 800102a:	4b51      	ldr	r3, [pc, #324]	; (8001170 <HAL_UART_RxCpltCallback+0x45c>)
 800102c:	701a      	strb	r2, [r3, #0]
						PACKET_TYPE = OBC_UART_RX[1]; //packet_type
 800102e:	4b4f      	ldr	r3, [pc, #316]	; (800116c <HAL_UART_RxCpltCallback+0x458>)
 8001030:	785a      	ldrb	r2, [r3, #1]
 8001032:	4b50      	ldr	r3, [pc, #320]	; (8001174 <HAL_UART_RxCpltCallback+0x460>)
 8001034:	701a      	strb	r2, [r3, #0]

						if (PACKET_TYPE == 0xB1) {
 8001036:	4b4f      	ldr	r3, [pc, #316]	; (8001174 <HAL_UART_RxCpltCallback+0x460>)
 8001038:	781b      	ldrb	r3, [r3, #0]
 800103a:	2bb1      	cmp	r3, #177	; 0xb1
 800103c:	d105      	bne.n	800104a <HAL_UART_RxCpltCallback+0x336>
							BEACON_COUNT = 2;
 800103e:	4b4e      	ldr	r3, [pc, #312]	; (8001178 <HAL_UART_RxCpltCallback+0x464>)
 8001040:	2202      	movs	r2, #2
 8001042:	601a      	str	r2, [r3, #0]
							COUNT_BEACON = 2;
 8001044:	4b4d      	ldr	r3, [pc, #308]	; (800117c <HAL_UART_RxCpltCallback+0x468>)
 8001046:	2202      	movs	r2, #2
 8001048:	601a      	str	r2, [r3, #0]
						}

						OBC_SUCCESS_DATA_RX_FLAG = 1;
 800104a:	4b4d      	ldr	r3, [pc, #308]	; (8001180 <HAL_UART_RxCpltCallback+0x46c>)
 800104c:	2201      	movs	r2, #1
 800104e:	601a      	str	r2, [r3, #0]
 8001050:	e078      	b.n	8001144 <HAL_UART_RxCpltCallback+0x430>
					} else {
						myDebug("*** Incorrect command received from OBC\n");
 8001052:	484c      	ldr	r0, [pc, #304]	; (8001184 <HAL_UART_RxCpltCallback+0x470>)
 8001054:	f7ff fb92 	bl	800077c <myDebug>
						if (HAL_UART_Transmit(&huart2, OBC_UART_RX, obc_plen,
 8001058:	4b4b      	ldr	r3, [pc, #300]	; (8001188 <HAL_UART_RxCpltCallback+0x474>)
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	b29a      	uxth	r2, r3
 800105e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001062:	4942      	ldr	r1, [pc, #264]	; (800116c <HAL_UART_RxCpltCallback+0x458>)
 8001064:	4849      	ldr	r0, [pc, #292]	; (800118c <HAL_UART_RxCpltCallback+0x478>)
 8001066:	f005 fa86 	bl	8006576 <HAL_UART_Transmit>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d00b      	beq.n	8001088 <HAL_UART_RxCpltCallback+0x374>
								2000) == HAL_OK
								|| HAL_UART_Transmit(&hlpuart1, OBC_UART_RX,
 8001070:	4b45      	ldr	r3, [pc, #276]	; (8001188 <HAL_UART_RxCpltCallback+0x474>)
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	b29a      	uxth	r2, r3
 8001076:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800107a:	493c      	ldr	r1, [pc, #240]	; (800116c <HAL_UART_RxCpltCallback+0x458>)
 800107c:	4844      	ldr	r0, [pc, #272]	; (8001190 <HAL_UART_RxCpltCallback+0x47c>)
 800107e:	f005 fa7a 	bl	8006576 <HAL_UART_Transmit>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d15d      	bne.n	8001144 <HAL_UART_RxCpltCallback+0x430>
										obc_plen, 2000) == HAL_OK) {
							myDebug(
 8001088:	2155      	movs	r1, #85	; 0x55
 800108a:	4842      	ldr	r0, [pc, #264]	; (8001194 <HAL_UART_RxCpltCallback+0x480>)
 800108c:	f7ff fb76 	bl	800077c <myDebug>
									"*** Incorrect command re-transmit to OBC, Length: %d\r\n",
									sizeof(OBC_UART_RX));

							for (int i = 0; i < sizeof(OBC_UART_RX); i++) {
 8001090:	2300      	movs	r3, #0
 8001092:	613b      	str	r3, [r7, #16]
 8001094:	e00a      	b.n	80010ac <HAL_UART_RxCpltCallback+0x398>
								myDebug("%02x ", OBC_UART_RX[i]);
 8001096:	4a35      	ldr	r2, [pc, #212]	; (800116c <HAL_UART_RxCpltCallback+0x458>)
 8001098:	693b      	ldr	r3, [r7, #16]
 800109a:	4413      	add	r3, r2
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	4619      	mov	r1, r3
 80010a0:	483d      	ldr	r0, [pc, #244]	; (8001198 <HAL_UART_RxCpltCallback+0x484>)
 80010a2:	f7ff fb6b 	bl	800077c <myDebug>
							for (int i = 0; i < sizeof(OBC_UART_RX); i++) {
 80010a6:	693b      	ldr	r3, [r7, #16]
 80010a8:	3301      	adds	r3, #1
 80010aa:	613b      	str	r3, [r7, #16]
 80010ac:	693b      	ldr	r3, [r7, #16]
 80010ae:	2b54      	cmp	r3, #84	; 0x54
 80010b0:	d9f1      	bls.n	8001096 <HAL_UART_RxCpltCallback+0x382>
							}

							myDebug("\r\n");
 80010b2:	483a      	ldr	r0, [pc, #232]	; (800119c <HAL_UART_RxCpltCallback+0x488>)
 80010b4:	f7ff fb62 	bl	800077c <myDebug>

							memset(OBC_UART_RX, '\0', sizeof(OBC_UART_RX));
 80010b8:	2255      	movs	r2, #85	; 0x55
 80010ba:	2100      	movs	r1, #0
 80010bc:	482b      	ldr	r0, [pc, #172]	; (800116c <HAL_UART_RxCpltCallback+0x458>)
 80010be:	f00a fc95 	bl	800b9ec <memset>

							OBC_SUCCESS_DATA_RX_FLAG = 0;
 80010c2:	4b2f      	ldr	r3, [pc, #188]	; (8001180 <HAL_UART_RxCpltCallback+0x46c>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	601a      	str	r2, [r3, #0]
 80010c8:	e03c      	b.n	8001144 <HAL_UART_RxCpltCallback+0x430>
						}
					}
				}
			} else {
				myDebug("*** Incorrect packet type received from OBC\n");
 80010ca:	4835      	ldr	r0, [pc, #212]	; (80011a0 <HAL_UART_RxCpltCallback+0x48c>)
 80010cc:	f7ff fb56 	bl	800077c <myDebug>

				if (HAL_UART_Transmit(&huart2, OBC_UART_RX, obc_plen, 1000)
 80010d0:	4b2d      	ldr	r3, [pc, #180]	; (8001188 <HAL_UART_RxCpltCallback+0x474>)
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	b29a      	uxth	r2, r3
 80010d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010da:	4924      	ldr	r1, [pc, #144]	; (800116c <HAL_UART_RxCpltCallback+0x458>)
 80010dc:	482b      	ldr	r0, [pc, #172]	; (800118c <HAL_UART_RxCpltCallback+0x478>)
 80010de:	f005 fa4a 	bl	8006576 <HAL_UART_Transmit>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d00b      	beq.n	8001100 <HAL_UART_RxCpltCallback+0x3ec>
						== HAL_OK
						|| HAL_UART_Transmit(&hlpuart1, OBC_UART_RX, obc_plen,
 80010e8:	4b27      	ldr	r3, [pc, #156]	; (8001188 <HAL_UART_RxCpltCallback+0x474>)
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	b29a      	uxth	r2, r3
 80010ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010f2:	491e      	ldr	r1, [pc, #120]	; (800116c <HAL_UART_RxCpltCallback+0x458>)
 80010f4:	4826      	ldr	r0, [pc, #152]	; (8001190 <HAL_UART_RxCpltCallback+0x47c>)
 80010f6:	f005 fa3e 	bl	8006576 <HAL_UART_Transmit>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d121      	bne.n	8001144 <HAL_UART_RxCpltCallback+0x430>
								1000) == HAL_OK) {
					myDebug(
 8001100:	2155      	movs	r1, #85	; 0x55
 8001102:	4824      	ldr	r0, [pc, #144]	; (8001194 <HAL_UART_RxCpltCallback+0x480>)
 8001104:	f7ff fb3a 	bl	800077c <myDebug>
							"*** Incorrect command re-transmit to OBC, Length: %d\r\n",
							sizeof(OBC_UART_RX));

					for (int i = 0; i < sizeof(OBC_UART_RX); i++) {
 8001108:	2300      	movs	r3, #0
 800110a:	60fb      	str	r3, [r7, #12]
 800110c:	e00a      	b.n	8001124 <HAL_UART_RxCpltCallback+0x410>
						myDebug("%02x ", OBC_UART_RX[i]);
 800110e:	4a17      	ldr	r2, [pc, #92]	; (800116c <HAL_UART_RxCpltCallback+0x458>)
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	4413      	add	r3, r2
 8001114:	781b      	ldrb	r3, [r3, #0]
 8001116:	4619      	mov	r1, r3
 8001118:	481f      	ldr	r0, [pc, #124]	; (8001198 <HAL_UART_RxCpltCallback+0x484>)
 800111a:	f7ff fb2f 	bl	800077c <myDebug>
					for (int i = 0; i < sizeof(OBC_UART_RX); i++) {
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	3301      	adds	r3, #1
 8001122:	60fb      	str	r3, [r7, #12]
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	2b54      	cmp	r3, #84	; 0x54
 8001128:	d9f1      	bls.n	800110e <HAL_UART_RxCpltCallback+0x3fa>
					}

					myDebug("\r\n");
 800112a:	481c      	ldr	r0, [pc, #112]	; (800119c <HAL_UART_RxCpltCallback+0x488>)
 800112c:	f7ff fb26 	bl	800077c <myDebug>

					memset(OBC_UART_RX, '\0', sizeof(OBC_UART_RX));
 8001130:	2255      	movs	r2, #85	; 0x55
 8001132:	2100      	movs	r1, #0
 8001134:	480d      	ldr	r0, [pc, #52]	; (800116c <HAL_UART_RxCpltCallback+0x458>)
 8001136:	f00a fc59 	bl	800b9ec <memset>

					OBC_SUCCESS_DATA_RX_FLAG = 0;
 800113a:	4b11      	ldr	r3, [pc, #68]	; (8001180 <HAL_UART_RxCpltCallback+0x46c>)
 800113c:	2200      	movs	r2, #0
 800113e:	601a      	str	r2, [r3, #0]
 8001140:	e000      	b.n	8001144 <HAL_UART_RxCpltCallback+0x430>
					if (OBC_UART_RX[0] == 0x53 && OBC_UART_RX[83] == 0x7E) {
 8001142:	bf00      	nop
				}
			}

			HAL_UART_Receive_DMA(&huart2, OBC_UART_RX, obc_plen);
 8001144:	4b10      	ldr	r3, [pc, #64]	; (8001188 <HAL_UART_RxCpltCallback+0x474>)
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	b29b      	uxth	r3, r3
 800114a:	461a      	mov	r2, r3
 800114c:	4907      	ldr	r1, [pc, #28]	; (800116c <HAL_UART_RxCpltCallback+0x458>)
 800114e:	480f      	ldr	r0, [pc, #60]	; (800118c <HAL_UART_RxCpltCallback+0x478>)
 8001150:	f005 fb5c 	bl	800680c <HAL_UART_Receive_DMA>

			HAL_UART_Receive_DMA(&hlpuart1, OBC_UART_RX, obc_plen);
 8001154:	4b0c      	ldr	r3, [pc, #48]	; (8001188 <HAL_UART_RxCpltCallback+0x474>)
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	b29b      	uxth	r3, r3
 800115a:	461a      	mov	r2, r3
 800115c:	4903      	ldr	r1, [pc, #12]	; (800116c <HAL_UART_RxCpltCallback+0x458>)
 800115e:	480c      	ldr	r0, [pc, #48]	; (8001190 <HAL_UART_RxCpltCallback+0x47c>)
 8001160:	f005 fb54 	bl	800680c <HAL_UART_Receive_DMA>
		}
	}
}
 8001164:	bf00      	nop
 8001166:	3720      	adds	r7, #32
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	2000076c 	.word	0x2000076c
 8001170:	2000076a 	.word	0x2000076a
 8001174:	20000904 	.word	0x20000904
 8001178:	20000004 	.word	0x20000004
 800117c:	20000008 	.word	0x20000008
 8001180:	200007c4 	.word	0x200007c4
 8001184:	0800c51c 	.word	0x0800c51c
 8001188:	20000001 	.word	0x20000001
 800118c:	200003a4 	.word	0x200003a4
 8001190:	2000027c 	.word	0x2000027c
 8001194:	0800c548 	.word	0x0800c548
 8001198:	0800c510 	.word	0x0800c510
 800119c:	0800c518 	.word	0x0800c518
 80011a0:	0800c580 	.word	0x0800c580

080011a4 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b084      	sub	sp, #16
 80011a8:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80011aa:	f002 f85b 	bl	8003264 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80011ae:	f000 f999 	bl	80014e4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80011b2:	f000 fb75 	bl	80018a0 <MX_GPIO_Init>
	MX_DMA_Init();
 80011b6:	f000 fb39 	bl	800182c <MX_DMA_Init>
	MX_USART2_UART_Init();
 80011ba:	f000 fa8b 	bl	80016d4 <MX_USART2_UART_Init>
	MX_LPUART1_UART_Init();
 80011be:	f000 f9f1 	bl	80015a4 <MX_LPUART1_UART_Init>
	MX_USART1_UART_Init();
 80011c2:	f000 fa3b 	bl	800163c <MX_USART1_UART_Init>
	MX_SubGHz_Phy_Init();
 80011c6:	f00a f866 	bl	800b296 <MX_SubGHz_Phy_Init>
	MX_TIM2_Init();
 80011ca:	f000 fae1 	bl	8001790 <MX_TIM2_Init>
	/* USER CODE BEGIN 2 */

	HAL_TIM_Base_Start(&htim2);
 80011ce:	489c      	ldr	r0, [pc, #624]	; (8001440 <main+0x29c>)
 80011d0:	f004 fefa 	bl	8005fc8 <HAL_TIM_Base_Start>

	myDebug("########## Slippers2Sat SATELLITE COM: BEGIN ##########\r\n");
 80011d4:	489b      	ldr	r0, [pc, #620]	; (8001444 <main+0x2a0>)
 80011d6:	f7ff fad1 	bl	800077c <myDebug>
	myDebug("########## COMMUNICATION PARAMETERS ##########\r\n");
 80011da:	489b      	ldr	r0, [pc, #620]	; (8001448 <main+0x2a4>)
 80011dc:	f7ff face 	bl	800077c <myDebug>
	myDebug("Modulation: GFSK PACKET\r\n");
 80011e0:	489a      	ldr	r0, [pc, #616]	; (800144c <main+0x2a8>)
 80011e2:	f7ff facb 	bl	800077c <myDebug>
	myDebug("FREQUENCY MODES: DOWNLINK FREQ: %luHz and UPLINK FREQ: %lu Hz\r\n",
 80011e6:	4a9a      	ldr	r2, [pc, #616]	; (8001450 <main+0x2ac>)
 80011e8:	499a      	ldr	r1, [pc, #616]	; (8001454 <main+0x2b0>)
 80011ea:	489b      	ldr	r0, [pc, #620]	; (8001458 <main+0x2b4>)
 80011ec:	f7ff fac6 	bl	800077c <myDebug>
	FREQ_437_MHZ, FREQ_435_MHZ);
	myDebug("STM32 BSP_SubGHz-WL Radio: Low Power\n");
 80011f0:	489a      	ldr	r0, [pc, #616]	; (800145c <main+0x2b8>)
 80011f2:	f7ff fac3 	bl	800077c <myDebug>
	myDebug(
 80011f6:	230e      	movs	r3, #14
 80011f8:	9300      	str	r3, [sp, #0]
 80011fa:	2301      	movs	r3, #1
 80011fc:	2200      	movs	r2, #0
 80011fe:	2107      	movs	r1, #7
 8001200:	4897      	ldr	r0, [pc, #604]	; (8001460 <main+0x2bc>)
 8001202:	f7ff fabb 	bl	800077c <myDebug>
			"POWER CONFIG:::- \n"
					"\t PA_DUTY_CYCLE: %x, HP_MAX: %x, PA_SEL: %x, POWER TX: %u dBm\r\n",
			PA_DUTY_CYCLE, HP_MAX, PA_SEL, POWER);

	myDebug("\n########## Wait for Handshake ##########\r\n");
 8001206:	4897      	ldr	r0, [pc, #604]	; (8001464 <main+0x2c0>)
 8001208:	f7ff fab8 	bl	800077c <myDebug>

	while (OBC_HANDSHAKE_FLAG == 0) {
 800120c:	e001      	b.n	8001212 <main+0x6e>
		WAIT_FOR_HANDSHAKE();
 800120e:	f001 fafd 	bl	800280c <WAIT_FOR_HANDSHAKE>
	while (OBC_HANDSHAKE_FLAG == 0) {
 8001212:	4b95      	ldr	r3, [pc, #596]	; (8001468 <main+0x2c4>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d0f9      	beq.n	800120e <main+0x6a>
	}

	setPacketParams(rx_buffer_len);
 800121a:	4b94      	ldr	r3, [pc, #592]	; (800146c <main+0x2c8>)
 800121c:	781b      	ldrb	r3, [r3, #0]
 800121e:	4618      	mov	r0, r3
 8001220:	f7ff fcf2 	bl	8000c08 <setPacketParams>
	setModulationParams(GFSK_BR_1200, GFSK_FDEV_1200);
 8001224:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8001228:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 800122c:	f7ff fd16 	bl	8000c5c <setModulationParams>
	radioConfig(rx_buffer, rx_buffer_len);
 8001230:	4b8e      	ldr	r3, [pc, #568]	; (800146c <main+0x2c8>)
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	4619      	mov	r1, r3
 8001236:	488e      	ldr	r0, [pc, #568]	; (8001470 <main+0x2cc>)
 8001238:	f7ff fd2e 	bl	8000c98 <radioConfig>

	myDebug(
 800123c:	488d      	ldr	r0, [pc, #564]	; (8001474 <main+0x2d0>)
 800123e:	f7ff fa9d 	bl	800077c <myDebug>
			"\n########## Operation Starts, Perform any one operation: ##########\r\n");
	myDebug("1. Transmit from Satellite\r\n");
 8001242:	488d      	ldr	r0, [pc, #564]	; (8001478 <main+0x2d4>)
 8001244:	f7ff fa9a 	bl	800077c <myDebug>
	myDebug("2. Wait to receive GS Command\r\n");
 8001248:	488c      	ldr	r0, [pc, #560]	; (800147c <main+0x2d8>)
 800124a:	f7ff fa97 	bl	800077c <myDebug>

	myDebug("\n########## RX Configuration: ##########\n");
 800124e:	488c      	ldr	r0, [pc, #560]	; (8001480 <main+0x2dc>)
 8001250:	f7ff fa94 	bl	800077c <myDebug>

	myDebug("FREQUENCY MODS: UPLINK FREQ: %lu Hz\r\n", FREQ_435_MHZ);
 8001254:	497e      	ldr	r1, [pc, #504]	; (8001450 <main+0x2ac>)
 8001256:	488b      	ldr	r0, [pc, #556]	; (8001484 <main+0x2e0>)
 8001258:	f7ff fa90 	bl	800077c <myDebug>
	myDebug("Bit Rate: 	%d\n\r", mod_params.Params.Gfsk.BitRate);
 800125c:	4b8a      	ldr	r3, [pc, #552]	; (8001488 <main+0x2e4>)
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	4619      	mov	r1, r3
 8001262:	488a      	ldr	r0, [pc, #552]	; (800148c <main+0x2e8>)
 8001264:	f7ff fa8a 	bl	800077c <myDebug>
	myDebug("Frequency Deviation: 	%d\n\r", mod_params.Params.Gfsk.Fdev);
 8001268:	4b87      	ldr	r3, [pc, #540]	; (8001488 <main+0x2e4>)
 800126a:	689b      	ldr	r3, [r3, #8]
 800126c:	4619      	mov	r1, r3
 800126e:	4888      	ldr	r0, [pc, #544]	; (8001490 <main+0x2ec>)
 8001270:	f7ff fa84 	bl	800077c <myDebug>
	myDebug("RECEVING BANDWIDTH: 	%d\n\r", mod_params.Params.Gfsk.Bandwidth);
 8001274:	4b84      	ldr	r3, [pc, #528]	; (8001488 <main+0x2e4>)
 8001276:	7b5b      	ldrb	r3, [r3, #13]
 8001278:	4619      	mov	r1, r3
 800127a:	4886      	ldr	r0, [pc, #536]	; (8001494 <main+0x2f0>)
 800127c:	f7ff fa7e 	bl	800077c <myDebug>
	myDebug("Packet Type 			%d\n\r", pkt_params.PacketType);
 8001280:	4b85      	ldr	r3, [pc, #532]	; (8001498 <main+0x2f4>)
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	4619      	mov	r1, r3
 8001286:	4885      	ldr	r0, [pc, #532]	; (800149c <main+0x2f8>)
 8001288:	f7ff fa78 	bl	800077c <myDebug>
	myDebug("PayloadLength 			%d\n\r", pkt_params.Params.Gfsk.PayloadLength);
 800128c:	4b82      	ldr	r3, [pc, #520]	; (8001498 <main+0x2f4>)
 800128e:	7a1b      	ldrb	r3, [r3, #8]
 8001290:	4619      	mov	r1, r3
 8001292:	4883      	ldr	r0, [pc, #524]	; (80014a0 <main+0x2fc>)
 8001294:	f7ff fa72 	bl	800077c <myDebug>
	myDebug("PreambleLength 		%d\n\r", pkt_params.Params.Gfsk.PreambleLength);
 8001298:	4b7f      	ldr	r3, [pc, #508]	; (8001498 <main+0x2f4>)
 800129a:	885b      	ldrh	r3, [r3, #2]
 800129c:	4619      	mov	r1, r3
 800129e:	4881      	ldr	r0, [pc, #516]	; (80014a4 <main+0x300>)
 80012a0:	f7ff fa6c 	bl	800077c <myDebug>
	myDebug("PreambleMinDetect		%d\n\r",
			pkt_params.Params.Gfsk.PreambleMinDetect);
 80012a4:	4b7c      	ldr	r3, [pc, #496]	; (8001498 <main+0x2f4>)
 80012a6:	791b      	ldrb	r3, [r3, #4]
	myDebug("PreambleMinDetect		%d\n\r",
 80012a8:	4619      	mov	r1, r3
 80012aa:	487f      	ldr	r0, [pc, #508]	; (80014a8 <main+0x304>)
 80012ac:	f7ff fa66 	bl	800077c <myDebug>
	myDebug("HeaderType 			%d\n\r", pkt_params.Params.Gfsk.HeaderType);
 80012b0:	4b79      	ldr	r3, [pc, #484]	; (8001498 <main+0x2f4>)
 80012b2:	79db      	ldrb	r3, [r3, #7]
 80012b4:	4619      	mov	r1, r3
 80012b6:	487d      	ldr	r0, [pc, #500]	; (80014ac <main+0x308>)
 80012b8:	f7ff fa60 	bl	800077c <myDebug>
	myDebug("__________*******************__________\r\n");
 80012bc:	487c      	ldr	r0, [pc, #496]	; (80014b0 <main+0x30c>)
 80012be:	f7ff fa5d 	bl	800077c <myDebug>

	SUBGRF_SetRfFrequency(FREQ_435_MHZ);
 80012c2:	4863      	ldr	r0, [pc, #396]	; (8001450 <main+0x2ac>)
 80012c4:	f009 f960 	bl	800a588 <SUBGRF_SetRfFrequency>
	SUBGRF_SetSwitch(RFO_LP, RFSWITCH_RX); /*Set RF switch*/
 80012c8:	2100      	movs	r1, #0
 80012ca:	2001      	movs	r0, #1
 80012cc:	f009 fda4 	bl	800ae18 <SUBGRF_SetSwitch>
	SUBGRF_SetRxBoosted(0xFFFFFF);
 80012d0:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80012d4:	f008 ff84 	bl	800a1e0 <SUBGRF_SetRxBoosted>

	HAL_UART_Receive_DMA(&huart2, OBC_UART_RX, obc_plen);
 80012d8:	4b76      	ldr	r3, [pc, #472]	; (80014b4 <main+0x310>)
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	b29b      	uxth	r3, r3
 80012de:	461a      	mov	r2, r3
 80012e0:	4975      	ldr	r1, [pc, #468]	; (80014b8 <main+0x314>)
 80012e2:	4876      	ldr	r0, [pc, #472]	; (80014bc <main+0x318>)
 80012e4:	f005 fa92 	bl	800680c <HAL_UART_Receive_DMA>

	HAL_UART_Receive_DMA(&hlpuart1, OBC_UART_RX, obc_plen);
 80012e8:	4b72      	ldr	r3, [pc, #456]	; (80014b4 <main+0x310>)
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	b29b      	uxth	r3, r3
 80012ee:	461a      	mov	r2, r3
 80012f0:	4971      	ldr	r1, [pc, #452]	; (80014b8 <main+0x314>)
 80012f2:	4873      	ldr	r0, [pc, #460]	; (80014c0 <main+0x31c>)
 80012f4:	f005 fa8a 	bl	800680c <HAL_UART_Receive_DMA>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */
		MX_SubGHz_Phy_Process();
 80012f8:	f009 ffd5 	bl	800b2a6 <MX_SubGHz_Phy_Process>

		/* USER CODE BEGIN 3 */

		delay_us(500000);
 80012fc:	4871      	ldr	r0, [pc, #452]	; (80014c4 <main+0x320>)
 80012fe:	f7ff fa23 	bl	8000748 <delay_us>

		if (OBC_SUCCESS_DATA_RX_FLAG) {
 8001302:	4b71      	ldr	r3, [pc, #452]	; (80014c8 <main+0x324>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	2b00      	cmp	r3, #0
 8001308:	f000 8089 	beq.w	800141e <main+0x27a>

			getAX25Packet(OBC_UART_RX, obc_ilen);
 800130c:	4b6f      	ldr	r3, [pc, #444]	; (80014cc <main+0x328>)
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	4619      	mov	r1, r3
 8001312:	4869      	ldr	r0, [pc, #420]	; (80014b8 <main+0x314>)
 8001314:	f7ff f98e 	bl	8000634 <getAX25Packet>

			tx_buffer_len = countsDataBetweenFlags(temp_tx_buffer,
 8001318:	2196      	movs	r1, #150	; 0x96
 800131a:	486d      	ldr	r0, [pc, #436]	; (80014d0 <main+0x32c>)
 800131c:	f7ff fc3e 	bl	8000b9c <countsDataBetweenFlags>
 8001320:	4603      	mov	r3, r0
 8001322:	4a6c      	ldr	r2, [pc, #432]	; (80014d4 <main+0x330>)
 8001324:	6013      	str	r3, [r2, #0]
					sizeof(temp_tx_buffer));

//			myDebug("AX.25 complete GS packet ready to TX: 0x%x\r\n",ntemp_tx_buffer);
			for (int j = 0; j < tx_buffer_len; j++) {
 8001326:	2300      	movs	r3, #0
 8001328:	607b      	str	r3, [r7, #4]
 800132a:	e00b      	b.n	8001344 <main+0x1a0>
				tx_buffer[j] = temp_tx_buffer[j];
 800132c:	4a68      	ldr	r2, [pc, #416]	; (80014d0 <main+0x32c>)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	4413      	add	r3, r2
 8001332:	7819      	ldrb	r1, [r3, #0]
 8001334:	4a68      	ldr	r2, [pc, #416]	; (80014d8 <main+0x334>)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	4413      	add	r3, r2
 800133a:	460a      	mov	r2, r1
 800133c:	701a      	strb	r2, [r3, #0]
			for (int j = 0; j < tx_buffer_len; j++) {
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	3301      	adds	r3, #1
 8001342:	607b      	str	r3, [r7, #4]
 8001344:	4b63      	ldr	r3, [pc, #396]	; (80014d4 <main+0x330>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	687a      	ldr	r2, [r7, #4]
 800134a:	429a      	cmp	r2, r3
 800134c:	dbee      	blt.n	800132c <main+0x188>
//				myDebug("%02x ", tx_buffer[j]);
			}
//			myDebug("\r\n");
//			myDebug("size of tx_buffer = %d\r\n", tx_buffer_len);

			memset(OBC_UART_RX, '\0', obc_ilen);
 800134e:	4b5f      	ldr	r3, [pc, #380]	; (80014cc <main+0x328>)
 8001350:	781b      	ldrb	r3, [r3, #0]
 8001352:	461a      	mov	r2, r3
 8001354:	2100      	movs	r1, #0
 8001356:	4858      	ldr	r0, [pc, #352]	; (80014b8 <main+0x314>)
 8001358:	f00a fb48 	bl	800b9ec <memset>
			memset(temp_tx_buffer, '\0', sizeof(temp_tx_buffer));
 800135c:	2296      	movs	r2, #150	; 0x96
 800135e:	2100      	movs	r1, #0
 8001360:	485b      	ldr	r0, [pc, #364]	; (80014d0 <main+0x32c>)
 8001362:	f00a fb43 	bl	800b9ec <memset>

			setPacketParams(tx_buffer_len);
 8001366:	4b5b      	ldr	r3, [pc, #364]	; (80014d4 <main+0x330>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	b2db      	uxtb	r3, r3
 800136c:	4618      	mov	r0, r3
 800136e:	f7ff fc4b 	bl	8000c08 <setPacketParams>
			setModulationParams(GFSK_BR_4800, GFSK_FDEV_4800);
 8001372:	f642 61e0 	movw	r1, #12000	; 0x2ee0
 8001376:	f44f 5096 	mov.w	r0, #4800	; 0x12c0
 800137a:	f7ff fc6f 	bl	8000c5c <setModulationParams>
			radioConfig(tx_buffer, tx_buffer_len);
 800137e:	4b55      	ldr	r3, [pc, #340]	; (80014d4 <main+0x330>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	b2db      	uxtb	r3, r3
 8001384:	4619      	mov	r1, r3
 8001386:	4854      	ldr	r0, [pc, #336]	; (80014d8 <main+0x334>)
 8001388:	f7ff fc86 	bl	8000c98 <radioConfig>

			myDebug("\n########## TX Configuration: ##########\n");
 800138c:	4853      	ldr	r0, [pc, #332]	; (80014dc <main+0x338>)
 800138e:	f7ff f9f5 	bl	800077c <myDebug>

			myDebug("FREQUENCY MODS: DOWNLINK FREQ: %lu Hz\r\n", FREQ_437_MHZ);
 8001392:	4930      	ldr	r1, [pc, #192]	; (8001454 <main+0x2b0>)
 8001394:	4852      	ldr	r0, [pc, #328]	; (80014e0 <main+0x33c>)
 8001396:	f7ff f9f1 	bl	800077c <myDebug>
			myDebug("Bit Rate: 	%d\n\r", mod_params.Params.Gfsk.BitRate);
 800139a:	4b3b      	ldr	r3, [pc, #236]	; (8001488 <main+0x2e4>)
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	4619      	mov	r1, r3
 80013a0:	483a      	ldr	r0, [pc, #232]	; (800148c <main+0x2e8>)
 80013a2:	f7ff f9eb 	bl	800077c <myDebug>
			myDebug("Frequency Deviation: 	%d\n\r",
 80013a6:	4b38      	ldr	r3, [pc, #224]	; (8001488 <main+0x2e4>)
 80013a8:	689b      	ldr	r3, [r3, #8]
 80013aa:	4619      	mov	r1, r3
 80013ac:	4838      	ldr	r0, [pc, #224]	; (8001490 <main+0x2ec>)
 80013ae:	f7ff f9e5 	bl	800077c <myDebug>
					mod_params.Params.Gfsk.Fdev);
			myDebug("RECEVING BANDWIDTH: 	%d\n\r",
					mod_params.Params.Gfsk.Bandwidth);
 80013b2:	4b35      	ldr	r3, [pc, #212]	; (8001488 <main+0x2e4>)
 80013b4:	7b5b      	ldrb	r3, [r3, #13]
			myDebug("RECEVING BANDWIDTH: 	%d\n\r",
 80013b6:	4619      	mov	r1, r3
 80013b8:	4836      	ldr	r0, [pc, #216]	; (8001494 <main+0x2f0>)
 80013ba:	f7ff f9df 	bl	800077c <myDebug>
			myDebug("Packet Type 			%d\n\r", pkt_params.PacketType);
 80013be:	4b36      	ldr	r3, [pc, #216]	; (8001498 <main+0x2f4>)
 80013c0:	781b      	ldrb	r3, [r3, #0]
 80013c2:	4619      	mov	r1, r3
 80013c4:	4835      	ldr	r0, [pc, #212]	; (800149c <main+0x2f8>)
 80013c6:	f7ff f9d9 	bl	800077c <myDebug>
			myDebug("PayloadLength 			%d\n\r",
					pkt_params.Params.Gfsk.PayloadLength);
 80013ca:	4b33      	ldr	r3, [pc, #204]	; (8001498 <main+0x2f4>)
 80013cc:	7a1b      	ldrb	r3, [r3, #8]
			myDebug("PayloadLength 			%d\n\r",
 80013ce:	4619      	mov	r1, r3
 80013d0:	4833      	ldr	r0, [pc, #204]	; (80014a0 <main+0x2fc>)
 80013d2:	f7ff f9d3 	bl	800077c <myDebug>
			myDebug("PreambleLength 		%d\n\r",
					pkt_params.Params.Gfsk.PreambleLength);
 80013d6:	4b30      	ldr	r3, [pc, #192]	; (8001498 <main+0x2f4>)
 80013d8:	885b      	ldrh	r3, [r3, #2]
			myDebug("PreambleLength 		%d\n\r",
 80013da:	4619      	mov	r1, r3
 80013dc:	4831      	ldr	r0, [pc, #196]	; (80014a4 <main+0x300>)
 80013de:	f7ff f9cd 	bl	800077c <myDebug>
			myDebug("PreambleMinDetect		%d\n\r",
					pkt_params.Params.Gfsk.PreambleMinDetect);
 80013e2:	4b2d      	ldr	r3, [pc, #180]	; (8001498 <main+0x2f4>)
 80013e4:	791b      	ldrb	r3, [r3, #4]
			myDebug("PreambleMinDetect		%d\n\r",
 80013e6:	4619      	mov	r1, r3
 80013e8:	482f      	ldr	r0, [pc, #188]	; (80014a8 <main+0x304>)
 80013ea:	f7ff f9c7 	bl	800077c <myDebug>
			myDebug("HeaderType 			%d\n\r", pkt_params.Params.Gfsk.HeaderType);
 80013ee:	4b2a      	ldr	r3, [pc, #168]	; (8001498 <main+0x2f4>)
 80013f0:	79db      	ldrb	r3, [r3, #7]
 80013f2:	4619      	mov	r1, r3
 80013f4:	482d      	ldr	r0, [pc, #180]	; (80014ac <main+0x308>)
 80013f6:	f7ff f9c1 	bl	800077c <myDebug>
			myDebug("__________*******************__________\r\n");
 80013fa:	482d      	ldr	r0, [pc, #180]	; (80014b0 <main+0x30c>)
 80013fc:	f7ff f9be 	bl	800077c <myDebug>

			SUBGRF_SetRfFrequency(FREQ_437_MHZ);
 8001400:	4814      	ldr	r0, [pc, #80]	; (8001454 <main+0x2b0>)
 8001402:	f009 f8c1 	bl	800a588 <SUBGRF_SetRfFrequency>
			SUBGRF_SetSwitch(RFO_LP, RFSWITCH_TX);
 8001406:	2101      	movs	r1, #1
 8001408:	2001      	movs	r0, #1
 800140a:	f009 fd05 	bl	800ae18 <SUBGRF_SetSwitch>
			SUBGRF_SendPayload(tx_buffer, tx_buffer_len, 0);
 800140e:	4b31      	ldr	r3, [pc, #196]	; (80014d4 <main+0x330>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	b2db      	uxtb	r3, r3
 8001414:	2200      	movs	r2, #0
 8001416:	4619      	mov	r1, r3
 8001418:	482f      	ldr	r0, [pc, #188]	; (80014d8 <main+0x334>)
 800141a:	f008 fd77 	bl	8009f0c <SUBGRF_SendPayload>

		}

		HAL_UART_Receive_DMA(&huart2, OBC_UART_RX, obc_plen);
 800141e:	4b25      	ldr	r3, [pc, #148]	; (80014b4 <main+0x310>)
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	b29b      	uxth	r3, r3
 8001424:	461a      	mov	r2, r3
 8001426:	4924      	ldr	r1, [pc, #144]	; (80014b8 <main+0x314>)
 8001428:	4824      	ldr	r0, [pc, #144]	; (80014bc <main+0x318>)
 800142a:	f005 f9ef 	bl	800680c <HAL_UART_Receive_DMA>

		HAL_UART_Receive_DMA(&hlpuart1, OBC_UART_RX, obc_plen);
 800142e:	4b21      	ldr	r3, [pc, #132]	; (80014b4 <main+0x310>)
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	b29b      	uxth	r3, r3
 8001434:	461a      	mov	r2, r3
 8001436:	4920      	ldr	r1, [pc, #128]	; (80014b8 <main+0x314>)
 8001438:	4821      	ldr	r0, [pc, #132]	; (80014c0 <main+0x31c>)
 800143a:	f005 f9e7 	bl	800680c <HAL_UART_Receive_DMA>
		MX_SubGHz_Phy_Process();
 800143e:	e75b      	b.n	80012f8 <main+0x154>
 8001440:	20000684 	.word	0x20000684
 8001444:	0800c5b0 	.word	0x0800c5b0
 8001448:	0800c5ec 	.word	0x0800c5ec
 800144c:	0800c620 	.word	0x0800c620
 8001450:	19f25968 	.word	0x19f25968
 8001454:	1a11d018 	.word	0x1a11d018
 8001458:	0800c63c 	.word	0x0800c63c
 800145c:	0800c67c 	.word	0x0800c67c
 8001460:	0800c6a4 	.word	0x0800c6a4
 8001464:	0800c6f8 	.word	0x0800c6f8
 8001468:	200008fc 	.word	0x200008fc
 800146c:	20000000 	.word	0x20000000
 8001470:	20000700 	.word	0x20000700
 8001474:	0800c724 	.word	0x0800c724
 8001478:	0800c76c 	.word	0x0800c76c
 800147c:	0800c78c 	.word	0x0800c78c
 8001480:	0800c7ac 	.word	0x0800c7ac
 8001484:	0800c7d8 	.word	0x0800c7d8
 8001488:	200006e4 	.word	0x200006e4
 800148c:	0800c3b8 	.word	0x0800c3b8
 8001490:	0800c3c8 	.word	0x0800c3c8
 8001494:	0800c3e4 	.word	0x0800c3e4
 8001498:	200006d0 	.word	0x200006d0
 800149c:	0800c400 	.word	0x0800c400
 80014a0:	0800c414 	.word	0x0800c414
 80014a4:	0800c42c 	.word	0x0800c42c
 80014a8:	0800c444 	.word	0x0800c444
 80014ac:	0800c45c 	.word	0x0800c45c
 80014b0:	0800c470 	.word	0x0800c470
 80014b4:	20000001 	.word	0x20000001
 80014b8:	2000076c 	.word	0x2000076c
 80014bc:	200003a4 	.word	0x200003a4
 80014c0:	2000027c 	.word	0x2000027c
 80014c4:	0007a120 	.word	0x0007a120
 80014c8:	200007c4 	.word	0x200007c4
 80014cc:	2000076a 	.word	0x2000076a
 80014d0:	200007c8 	.word	0x200007c8
 80014d4:	200008f8 	.word	0x200008f8
 80014d8:	20000860 	.word	0x20000860
 80014dc:	0800c364 	.word	0x0800c364
 80014e0:	0800c390 	.word	0x0800c390

080014e4 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b09a      	sub	sp, #104	; 0x68
 80014e8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80014ea:	f107 0320 	add.w	r3, r7, #32
 80014ee:	2248      	movs	r2, #72	; 0x48
 80014f0:	2100      	movs	r1, #0
 80014f2:	4618      	mov	r0, r3
 80014f4:	f00a fa7a 	bl	800b9ec <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80014f8:	1d3b      	adds	r3, r7, #4
 80014fa:	2200      	movs	r2, #0
 80014fc:	601a      	str	r2, [r3, #0]
 80014fe:	605a      	str	r2, [r3, #4]
 8001500:	609a      	str	r2, [r3, #8]
 8001502:	60da      	str	r2, [r3, #12]
 8001504:	611a      	str	r2, [r3, #16]
 8001506:	615a      	str	r2, [r3, #20]
 8001508:	619a      	str	r2, [r3, #24]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800150a:	4b25      	ldr	r3, [pc, #148]	; (80015a0 <SystemClock_Config+0xbc>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001512:	4a23      	ldr	r2, [pc, #140]	; (80015a0 <SystemClock_Config+0xbc>)
 8001514:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001518:	6013      	str	r3, [r2, #0]
 800151a:	4b21      	ldr	r3, [pc, #132]	; (80015a0 <SystemClock_Config+0xbc>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001522:	603b      	str	r3, [r7, #0]
 8001524:	683b      	ldr	r3, [r7, #0]

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001526:	2301      	movs	r3, #1
 8001528:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS_PWR;
 800152a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800152e:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.HSEDiv = RCC_HSE_DIV1;
 8001530:	2300      	movs	r3, #0
 8001532:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001534:	2302      	movs	r3, #2
 8001536:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001538:	2303      	movs	r3, #3
 800153a:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 800153c:	2310      	movs	r3, #16
 800153e:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLN = 6;
 8001540:	2306      	movs	r3, #6
 8001542:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001544:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001548:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800154a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800154e:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001550:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001554:	663b      	str	r3, [r7, #96]	; 0x60
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001556:	f107 0320 	add.w	r3, r7, #32
 800155a:	4618      	mov	r0, r3
 800155c:	f002 ffc6 	bl	80044ec <HAL_RCC_OscConfig>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d001      	beq.n	800156a <SystemClock_Config+0x86>
		Error_Handler();
 8001566:	f001 f94b 	bl	8002800 <Error_Handler>
	}

	/** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3 | RCC_CLOCKTYPE_HCLK
 800156a:	234f      	movs	r3, #79	; 0x4f
 800156c:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800156e:	2303      	movs	r3, #3
 8001570:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001572:	2300      	movs	r3, #0
 8001574:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001576:	2300      	movs	r3, #0
 8001578:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800157a:	2300      	movs	r3, #0
 800157c:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 800157e:	2300      	movs	r3, #0
 8001580:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8001582:	1d3b      	adds	r3, r7, #4
 8001584:	2102      	movs	r1, #2
 8001586:	4618      	mov	r0, r3
 8001588:	f003 fb32 	bl	8004bf0 <HAL_RCC_ClockConfig>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <SystemClock_Config+0xb2>
		Error_Handler();
 8001592:	f001 f935 	bl	8002800 <Error_Handler>
	}
}
 8001596:	bf00      	nop
 8001598:	3768      	adds	r7, #104	; 0x68
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	58000400 	.word	0x58000400

080015a4 <MX_LPUART1_UART_Init>:
/**
 * @brief LPUART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_LPUART1_UART_Init(void) {
 80015a4:	b580      	push	{r7, lr}
 80015a6:	af00      	add	r7, sp, #0
	/* USER CODE END LPUART1_Init 0 */

	/* USER CODE BEGIN LPUART1_Init 1 */

	/* USER CODE END LPUART1_Init 1 */
	hlpuart1.Instance = LPUART1;
 80015a8:	4b22      	ldr	r3, [pc, #136]	; (8001634 <MX_LPUART1_UART_Init+0x90>)
 80015aa:	4a23      	ldr	r2, [pc, #140]	; (8001638 <MX_LPUART1_UART_Init+0x94>)
 80015ac:	601a      	str	r2, [r3, #0]
	hlpuart1.Init.BaudRate = 115200;
 80015ae:	4b21      	ldr	r3, [pc, #132]	; (8001634 <MX_LPUART1_UART_Init+0x90>)
 80015b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015b4:	605a      	str	r2, [r3, #4]
	hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80015b6:	4b1f      	ldr	r3, [pc, #124]	; (8001634 <MX_LPUART1_UART_Init+0x90>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	609a      	str	r2, [r3, #8]
	hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80015bc:	4b1d      	ldr	r3, [pc, #116]	; (8001634 <MX_LPUART1_UART_Init+0x90>)
 80015be:	2200      	movs	r2, #0
 80015c0:	60da      	str	r2, [r3, #12]
	hlpuart1.Init.Parity = UART_PARITY_NONE;
 80015c2:	4b1c      	ldr	r3, [pc, #112]	; (8001634 <MX_LPUART1_UART_Init+0x90>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	611a      	str	r2, [r3, #16]
	hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80015c8:	4b1a      	ldr	r3, [pc, #104]	; (8001634 <MX_LPUART1_UART_Init+0x90>)
 80015ca:	220c      	movs	r2, #12
 80015cc:	615a      	str	r2, [r3, #20]
	hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015ce:	4b19      	ldr	r3, [pc, #100]	; (8001634 <MX_LPUART1_UART_Init+0x90>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	619a      	str	r2, [r3, #24]
	hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015d4:	4b17      	ldr	r3, [pc, #92]	; (8001634 <MX_LPUART1_UART_Init+0x90>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	621a      	str	r2, [r3, #32]
	hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80015da:	4b16      	ldr	r3, [pc, #88]	; (8001634 <MX_LPUART1_UART_Init+0x90>)
 80015dc:	2200      	movs	r2, #0
 80015de:	625a      	str	r2, [r3, #36]	; 0x24
	hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015e0:	4b14      	ldr	r3, [pc, #80]	; (8001634 <MX_LPUART1_UART_Init+0x90>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	629a      	str	r2, [r3, #40]	; 0x28
	hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 80015e6:	4b13      	ldr	r3, [pc, #76]	; (8001634 <MX_LPUART1_UART_Init+0x90>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	665a      	str	r2, [r3, #100]	; 0x64
	if (HAL_UART_Init(&hlpuart1) != HAL_OK) {
 80015ec:	4811      	ldr	r0, [pc, #68]	; (8001634 <MX_LPUART1_UART_Init+0x90>)
 80015ee:	f004 ff72 	bl	80064d6 <HAL_UART_Init>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d001      	beq.n	80015fc <MX_LPUART1_UART_Init+0x58>
		Error_Handler();
 80015f8:	f001 f902 	bl	8002800 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8)
 80015fc:	2100      	movs	r1, #0
 80015fe:	480d      	ldr	r0, [pc, #52]	; (8001634 <MX_LPUART1_UART_Init+0x90>)
 8001600:	f006 fb9a 	bl	8007d38 <HAL_UARTEx_SetTxFifoThreshold>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d001      	beq.n	800160e <MX_LPUART1_UART_Init+0x6a>
			!= HAL_OK) {
		Error_Handler();
 800160a:	f001 f8f9 	bl	8002800 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8)
 800160e:	2100      	movs	r1, #0
 8001610:	4808      	ldr	r0, [pc, #32]	; (8001634 <MX_LPUART1_UART_Init+0x90>)
 8001612:	f006 fbcf 	bl	8007db4 <HAL_UARTEx_SetRxFifoThreshold>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d001      	beq.n	8001620 <MX_LPUART1_UART_Init+0x7c>
			!= HAL_OK) {
		Error_Handler();
 800161c:	f001 f8f0 	bl	8002800 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK) {
 8001620:	4804      	ldr	r0, [pc, #16]	; (8001634 <MX_LPUART1_UART_Init+0x90>)
 8001622:	f006 fb51 	bl	8007cc8 <HAL_UARTEx_DisableFifoMode>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d001      	beq.n	8001630 <MX_LPUART1_UART_Init+0x8c>
		Error_Handler();
 800162c:	f001 f8e8 	bl	8002800 <Error_Handler>
	}
	/* USER CODE BEGIN LPUART1_Init 2 */

	/* USER CODE END LPUART1_Init 2 */

}
 8001630:	bf00      	nop
 8001632:	bd80      	pop	{r7, pc}
 8001634:	2000027c 	.word	0x2000027c
 8001638:	40008000 	.word	0x40008000

0800163c <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 800163c:	b580      	push	{r7, lr}
 800163e:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8001640:	4b22      	ldr	r3, [pc, #136]	; (80016cc <MX_USART1_UART_Init+0x90>)
 8001642:	4a23      	ldr	r2, [pc, #140]	; (80016d0 <MX_USART1_UART_Init+0x94>)
 8001644:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8001646:	4b21      	ldr	r3, [pc, #132]	; (80016cc <MX_USART1_UART_Init+0x90>)
 8001648:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800164c:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800164e:	4b1f      	ldr	r3, [pc, #124]	; (80016cc <MX_USART1_UART_Init+0x90>)
 8001650:	2200      	movs	r2, #0
 8001652:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8001654:	4b1d      	ldr	r3, [pc, #116]	; (80016cc <MX_USART1_UART_Init+0x90>)
 8001656:	2200      	movs	r2, #0
 8001658:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 800165a:	4b1c      	ldr	r3, [pc, #112]	; (80016cc <MX_USART1_UART_Init+0x90>)
 800165c:	2200      	movs	r2, #0
 800165e:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001660:	4b1a      	ldr	r3, [pc, #104]	; (80016cc <MX_USART1_UART_Init+0x90>)
 8001662:	220c      	movs	r2, #12
 8001664:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001666:	4b19      	ldr	r3, [pc, #100]	; (80016cc <MX_USART1_UART_Init+0x90>)
 8001668:	2200      	movs	r2, #0
 800166a:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800166c:	4b17      	ldr	r3, [pc, #92]	; (80016cc <MX_USART1_UART_Init+0x90>)
 800166e:	2200      	movs	r2, #0
 8001670:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001672:	4b16      	ldr	r3, [pc, #88]	; (80016cc <MX_USART1_UART_Init+0x90>)
 8001674:	2200      	movs	r2, #0
 8001676:	621a      	str	r2, [r3, #32]
	huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001678:	4b14      	ldr	r3, [pc, #80]	; (80016cc <MX_USART1_UART_Init+0x90>)
 800167a:	2200      	movs	r2, #0
 800167c:	625a      	str	r2, [r3, #36]	; 0x24
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800167e:	4b13      	ldr	r3, [pc, #76]	; (80016cc <MX_USART1_UART_Init+0x90>)
 8001680:	2200      	movs	r2, #0
 8001682:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8001684:	4811      	ldr	r0, [pc, #68]	; (80016cc <MX_USART1_UART_Init+0x90>)
 8001686:	f004 ff26 	bl	80064d6 <HAL_UART_Init>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d001      	beq.n	8001694 <MX_USART1_UART_Init+0x58>
		Error_Handler();
 8001690:	f001 f8b6 	bl	8002800 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8)
 8001694:	2100      	movs	r1, #0
 8001696:	480d      	ldr	r0, [pc, #52]	; (80016cc <MX_USART1_UART_Init+0x90>)
 8001698:	f006 fb4e 	bl	8007d38 <HAL_UARTEx_SetTxFifoThreshold>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d001      	beq.n	80016a6 <MX_USART1_UART_Init+0x6a>
			!= HAL_OK) {
		Error_Handler();
 80016a2:	f001 f8ad 	bl	8002800 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8)
 80016a6:	2100      	movs	r1, #0
 80016a8:	4808      	ldr	r0, [pc, #32]	; (80016cc <MX_USART1_UART_Init+0x90>)
 80016aa:	f006 fb83 	bl	8007db4 <HAL_UARTEx_SetRxFifoThreshold>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d001      	beq.n	80016b8 <MX_USART1_UART_Init+0x7c>
			!= HAL_OK) {
		Error_Handler();
 80016b4:	f001 f8a4 	bl	8002800 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK) {
 80016b8:	4804      	ldr	r0, [pc, #16]	; (80016cc <MX_USART1_UART_Init+0x90>)
 80016ba:	f006 fb05 	bl	8007cc8 <HAL_UARTEx_DisableFifoMode>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d001      	beq.n	80016c8 <MX_USART1_UART_Init+0x8c>
		Error_Handler();
 80016c4:	f001 f89c 	bl	8002800 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 80016c8:	bf00      	nop
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	20000310 	.word	0x20000310
 80016d0:	40013800 	.word	0x40013800

080016d4 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80016d8:	4b22      	ldr	r3, [pc, #136]	; (8001764 <MX_USART2_UART_Init+0x90>)
 80016da:	4a23      	ldr	r2, [pc, #140]	; (8001768 <MX_USART2_UART_Init+0x94>)
 80016dc:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80016de:	4b21      	ldr	r3, [pc, #132]	; (8001764 <MX_USART2_UART_Init+0x90>)
 80016e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016e4:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80016e6:	4b1f      	ldr	r3, [pc, #124]	; (8001764 <MX_USART2_UART_Init+0x90>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80016ec:	4b1d      	ldr	r3, [pc, #116]	; (8001764 <MX_USART2_UART_Init+0x90>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80016f2:	4b1c      	ldr	r3, [pc, #112]	; (8001764 <MX_USART2_UART_Init+0x90>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80016f8:	4b1a      	ldr	r3, [pc, #104]	; (8001764 <MX_USART2_UART_Init+0x90>)
 80016fa:	220c      	movs	r2, #12
 80016fc:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016fe:	4b19      	ldr	r3, [pc, #100]	; (8001764 <MX_USART2_UART_Init+0x90>)
 8001700:	2200      	movs	r2, #0
 8001702:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001704:	4b17      	ldr	r3, [pc, #92]	; (8001764 <MX_USART2_UART_Init+0x90>)
 8001706:	2200      	movs	r2, #0
 8001708:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800170a:	4b16      	ldr	r3, [pc, #88]	; (8001764 <MX_USART2_UART_Init+0x90>)
 800170c:	2200      	movs	r2, #0
 800170e:	621a      	str	r2, [r3, #32]
	huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001710:	4b14      	ldr	r3, [pc, #80]	; (8001764 <MX_USART2_UART_Init+0x90>)
 8001712:	2200      	movs	r2, #0
 8001714:	625a      	str	r2, [r3, #36]	; 0x24
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001716:	4b13      	ldr	r3, [pc, #76]	; (8001764 <MX_USART2_UART_Init+0x90>)
 8001718:	2200      	movs	r2, #0
 800171a:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 800171c:	4811      	ldr	r0, [pc, #68]	; (8001764 <MX_USART2_UART_Init+0x90>)
 800171e:	f004 feda 	bl	80064d6 <HAL_UART_Init>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d001      	beq.n	800172c <MX_USART2_UART_Init+0x58>
		Error_Handler();
 8001728:	f001 f86a 	bl	8002800 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8)
 800172c:	2100      	movs	r1, #0
 800172e:	480d      	ldr	r0, [pc, #52]	; (8001764 <MX_USART2_UART_Init+0x90>)
 8001730:	f006 fb02 	bl	8007d38 <HAL_UARTEx_SetTxFifoThreshold>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d001      	beq.n	800173e <MX_USART2_UART_Init+0x6a>
			!= HAL_OK) {
		Error_Handler();
 800173a:	f001 f861 	bl	8002800 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8)
 800173e:	2100      	movs	r1, #0
 8001740:	4808      	ldr	r0, [pc, #32]	; (8001764 <MX_USART2_UART_Init+0x90>)
 8001742:	f006 fb37 	bl	8007db4 <HAL_UARTEx_SetRxFifoThreshold>
 8001746:	4603      	mov	r3, r0
 8001748:	2b00      	cmp	r3, #0
 800174a:	d001      	beq.n	8001750 <MX_USART2_UART_Init+0x7c>
			!= HAL_OK) {
		Error_Handler();
 800174c:	f001 f858 	bl	8002800 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK) {
 8001750:	4804      	ldr	r0, [pc, #16]	; (8001764 <MX_USART2_UART_Init+0x90>)
 8001752:	f006 fab9 	bl	8007cc8 <HAL_UARTEx_DisableFifoMode>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d001      	beq.n	8001760 <MX_USART2_UART_Init+0x8c>
		Error_Handler();
 800175c:	f001 f850 	bl	8002800 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8001760:	bf00      	nop
 8001762:	bd80      	pop	{r7, pc}
 8001764:	200003a4 	.word	0x200003a4
 8001768:	40004400 	.word	0x40004400

0800176c <MX_SUBGHZ_Init>:
/**
 * @brief SUBGHZ Initialization Function
 * @param None
 * @retval None
 */
void MX_SUBGHZ_Init(void) {
 800176c:	b580      	push	{r7, lr}
 800176e:	af00      	add	r7, sp, #0
	/* USER CODE END SUBGHZ_Init 0 */

	/* USER CODE BEGIN SUBGHZ_Init 1 */

	/* USER CODE END SUBGHZ_Init 1 */
	hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 8001770:	4b06      	ldr	r3, [pc, #24]	; (800178c <MX_SUBGHZ_Init+0x20>)
 8001772:	2208      	movs	r2, #8
 8001774:	601a      	str	r2, [r3, #0]
	if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK) {
 8001776:	4805      	ldr	r0, [pc, #20]	; (800178c <MX_SUBGHZ_Init+0x20>)
 8001778:	f003 ffae 	bl	80056d8 <HAL_SUBGHZ_Init>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	d001      	beq.n	8001786 <MX_SUBGHZ_Init+0x1a>
		Error_Handler();
 8001782:	f001 f83d 	bl	8002800 <Error_Handler>
	}
	/* USER CODE BEGIN SUBGHZ_Init 2 */

	/* USER CODE END SUBGHZ_Init 2 */

}
 8001786:	bf00      	nop
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	20000678 	.word	0x20000678

08001790 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8001790:	b580      	push	{r7, lr}
 8001792:	b088      	sub	sp, #32
 8001794:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001796:	f107 0310 	add.w	r3, r7, #16
 800179a:	2200      	movs	r2, #0
 800179c:	601a      	str	r2, [r3, #0]
 800179e:	605a      	str	r2, [r3, #4]
 80017a0:	609a      	str	r2, [r3, #8]
 80017a2:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80017a4:	1d3b      	adds	r3, r7, #4
 80017a6:	2200      	movs	r2, #0
 80017a8:	601a      	str	r2, [r3, #0]
 80017aa:	605a      	str	r2, [r3, #4]
 80017ac:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 80017ae:	4b1d      	ldr	r3, [pc, #116]	; (8001824 <MX_TIM2_Init+0x94>)
 80017b0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80017b4:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 48 - 1;
 80017b6:	4b1b      	ldr	r3, [pc, #108]	; (8001824 <MX_TIM2_Init+0x94>)
 80017b8:	222f      	movs	r2, #47	; 0x2f
 80017ba:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017bc:	4b19      	ldr	r3, [pc, #100]	; (8001824 <MX_TIM2_Init+0x94>)
 80017be:	2200      	movs	r2, #0
 80017c0:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 1000001 - 1;
 80017c2:	4b18      	ldr	r3, [pc, #96]	; (8001824 <MX_TIM2_Init+0x94>)
 80017c4:	4a18      	ldr	r2, [pc, #96]	; (8001828 <MX_TIM2_Init+0x98>)
 80017c6:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017c8:	4b16      	ldr	r3, [pc, #88]	; (8001824 <MX_TIM2_Init+0x94>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80017ce:	4b15      	ldr	r3, [pc, #84]	; (8001824 <MX_TIM2_Init+0x94>)
 80017d0:	2280      	movs	r2, #128	; 0x80
 80017d2:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 80017d4:	4813      	ldr	r0, [pc, #76]	; (8001824 <MX_TIM2_Init+0x94>)
 80017d6:	f004 fb9f 	bl	8005f18 <HAL_TIM_Base_Init>
 80017da:	4603      	mov	r3, r0
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d001      	beq.n	80017e4 <MX_TIM2_Init+0x54>
		Error_Handler();
 80017e0:	f001 f80e 	bl	8002800 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017e8:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 80017ea:	f107 0310 	add.w	r3, r7, #16
 80017ee:	4619      	mov	r1, r3
 80017f0:	480c      	ldr	r0, [pc, #48]	; (8001824 <MX_TIM2_Init+0x94>)
 80017f2:	f004 fc2d 	bl	8006050 <HAL_TIM_ConfigClockSource>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d001      	beq.n	8001800 <MX_TIM2_Init+0x70>
		Error_Handler();
 80017fc:	f001 f800 	bl	8002800 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001800:	2300      	movs	r3, #0
 8001802:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001804:	2300      	movs	r3, #0
 8001806:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8001808:	1d3b      	adds	r3, r7, #4
 800180a:	4619      	mov	r1, r3
 800180c:	4805      	ldr	r0, [pc, #20]	; (8001824 <MX_TIM2_Init+0x94>)
 800180e:	f004 fde3 	bl	80063d8 <HAL_TIMEx_MasterConfigSynchronization>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d001      	beq.n	800181c <MX_TIM2_Init+0x8c>
			!= HAL_OK) {
		Error_Handler();
 8001818:	f000 fff2 	bl	8002800 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 800181c:	bf00      	nop
 800181e:	3720      	adds	r7, #32
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}
 8001824:	20000684 	.word	0x20000684
 8001828:	000f4240 	.word	0x000f4240

0800182c <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 800182c:	b580      	push	{r7, lr}
 800182e:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001830:	2004      	movs	r0, #4
 8001832:	f7ff f983 	bl	8000b3c <LL_AHB1_GRP1_EnableClock>
	__HAL_RCC_DMA1_CLK_ENABLE();
 8001836:	2001      	movs	r0, #1
 8001838:	f7ff f980 	bl	8000b3c <LL_AHB1_GRP1_EnableClock>

	/* DMA interrupt init */
	/* DMA1_Channel1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800183c:	2200      	movs	r2, #0
 800183e:	2100      	movs	r1, #0
 8001840:	200b      	movs	r0, #11
 8001842:	f001 fe52 	bl	80034ea <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001846:	200b      	movs	r0, #11
 8001848:	f001 fe69 	bl	800351e <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800184c:	2200      	movs	r2, #0
 800184e:	2100      	movs	r1, #0
 8001850:	200c      	movs	r0, #12
 8001852:	f001 fe4a 	bl	80034ea <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001856:	200c      	movs	r0, #12
 8001858:	f001 fe61 	bl	800351e <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800185c:	2200      	movs	r2, #0
 800185e:	2100      	movs	r1, #0
 8001860:	200d      	movs	r0, #13
 8001862:	f001 fe42 	bl	80034ea <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001866:	200d      	movs	r0, #13
 8001868:	f001 fe59 	bl	800351e <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel4_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800186c:	2200      	movs	r2, #0
 800186e:	2100      	movs	r1, #0
 8001870:	200e      	movs	r0, #14
 8001872:	f001 fe3a 	bl	80034ea <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001876:	200e      	movs	r0, #14
 8001878:	f001 fe51 	bl	800351e <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel5_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800187c:	2200      	movs	r2, #0
 800187e:	2100      	movs	r1, #0
 8001880:	200f      	movs	r0, #15
 8001882:	f001 fe32 	bl	80034ea <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001886:	200f      	movs	r0, #15
 8001888:	f001 fe49 	bl	800351e <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel6_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800188c:	2200      	movs	r2, #0
 800188e:	2100      	movs	r1, #0
 8001890:	2010      	movs	r0, #16
 8001892:	f001 fe2a 	bl	80034ea <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001896:	2010      	movs	r0, #16
 8001898:	f001 fe41 	bl	800351e <HAL_NVIC_EnableIRQ>

}
 800189c:	bf00      	nop
 800189e:	bd80      	pop	{r7, pc}

080018a0 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b086      	sub	sp, #24
 80018a4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80018a6:	1d3b      	adds	r3, r7, #4
 80018a8:	2200      	movs	r2, #0
 80018aa:	601a      	str	r2, [r3, #0]
 80018ac:	605a      	str	r2, [r3, #4]
 80018ae:	609a      	str	r2, [r3, #8]
 80018b0:	60da      	str	r2, [r3, #12]
 80018b2:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80018b4:	2001      	movs	r0, #1
 80018b6:	f7ff f959 	bl	8000b6c <LL_AHB2_GRP1_EnableClock>
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80018ba:	2002      	movs	r0, #2
 80018bc:	f7ff f956 	bl	8000b6c <LL_AHB2_GRP1_EnableClock>
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80018c0:	2004      	movs	r0, #4
 80018c2:	f7ff f953 	bl	8000b6c <LL_AHB2_GRP1_EnableClock>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LED1_Pin | LED2_Pin | LED3_Pin, GPIO_PIN_RESET);
 80018c6:	2200      	movs	r2, #0
 80018c8:	f44f 410a 	mov.w	r1, #35328	; 0x8a00
 80018cc:	481f      	ldr	r0, [pc, #124]	; (800194c <MX_GPIO_Init+0xac>)
 80018ce:	f002 fb23 	bl	8003f18 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, FE_CTRL3_Pin | FE_CTRL2_Pin | FE_CTRL1_Pin,
 80018d2:	2200      	movs	r2, #0
 80018d4:	2138      	movs	r1, #56	; 0x38
 80018d6:	481e      	ldr	r0, [pc, #120]	; (8001950 <MX_GPIO_Init+0xb0>)
 80018d8:	f002 fb1e 	bl	8003f18 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin */
	GPIO_InitStruct.Pin = LED1_Pin | LED2_Pin | LED3_Pin;
 80018dc:	f44f 430a 	mov.w	r3, #35328	; 0x8a00
 80018e0:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018e2:	2301      	movs	r3, #1
 80018e4:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e6:	2300      	movs	r3, #0
 80018e8:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018ea:	2302      	movs	r3, #2
 80018ec:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018ee:	1d3b      	adds	r3, r7, #4
 80018f0:	4619      	mov	r1, r3
 80018f2:	4816      	ldr	r0, [pc, #88]	; (800194c <MX_GPIO_Init+0xac>)
 80018f4:	f002 f9b0 	bl	8003c58 <HAL_GPIO_Init>

	/*Configure GPIO pins : FE_CTRL3_Pin FE_CTRL2_Pin FE_CTRL1_Pin */
	GPIO_InitStruct.Pin = FE_CTRL3_Pin | FE_CTRL2_Pin | FE_CTRL1_Pin;
 80018f8:	2338      	movs	r3, #56	; 0x38
 80018fa:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018fc:	2301      	movs	r3, #1
 80018fe:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001900:	2300      	movs	r3, #0
 8001902:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001904:	2303      	movs	r3, #3
 8001906:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001908:	1d3b      	adds	r3, r7, #4
 800190a:	4619      	mov	r1, r3
 800190c:	4810      	ldr	r0, [pc, #64]	; (8001950 <MX_GPIO_Init+0xb0>)
 800190e:	f002 f9a3 	bl	8003c58 <HAL_GPIO_Init>

	/*Configure GPIO pins : B1_Pin B2_Pin */
	GPIO_InitStruct.Pin = B1_Pin | B2_Pin;
 8001912:	2303      	movs	r3, #3
 8001914:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001916:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800191a:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800191c:	2301      	movs	r3, #1
 800191e:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001920:	1d3b      	adds	r3, r7, #4
 8001922:	4619      	mov	r1, r3
 8001924:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001928:	f002 f996 	bl	8003c58 <HAL_GPIO_Init>

	/*Configure GPIO pin : B3_Pin */
	GPIO_InitStruct.Pin = B3_Pin;
 800192c:	2340      	movs	r3, #64	; 0x40
 800192e:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001930:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001934:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001936:	2301      	movs	r3, #1
 8001938:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(B3_GPIO_Port, &GPIO_InitStruct);
 800193a:	1d3b      	adds	r3, r7, #4
 800193c:	4619      	mov	r1, r3
 800193e:	4804      	ldr	r0, [pc, #16]	; (8001950 <MX_GPIO_Init+0xb0>)
 8001940:	f002 f98a 	bl	8003c58 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8001944:	bf00      	nop
 8001946:	3718      	adds	r7, #24
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}
 800194c:	48000400 	.word	0x48000400
 8001950:	48000800 	.word	0x48000800

08001954 <DioIrqHndlr>:

/* USER CODE BEGIN 4 */
void DioIrqHndlr(RadioIrqMasks_t radioIrq) {
 8001954:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001958:	b0bb      	sub	sp, #236	; 0xec
 800195a:	af00      	add	r7, sp, #0
 800195c:	4603      	mov	r3, r0
 800195e:	84fb      	strh	r3, [r7, #38]	; 0x26
	if (radioIrq == IRQ_TX_DONE) {
 8001960:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001962:	2b01      	cmp	r3, #1
 8001964:	f040 80cb 	bne.w	8001afe <DioIrqHndlr+0x1aa>
		OBC_SUCCESS_DATA_RX_FLAG = 0;
 8001968:	4b8d      	ldr	r3, [pc, #564]	; (8001ba0 <DioIrqHndlr+0x24c>)
 800196a:	2200      	movs	r2, #0
 800196c:	601a      	str	r2, [r3, #0]

		myDebug("\nSatellite Data Transmitted Successful, Length: %d\r\n",
 800196e:	4b8d      	ldr	r3, [pc, #564]	; (8001ba4 <DioIrqHndlr+0x250>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4619      	mov	r1, r3
 8001974:	488c      	ldr	r0, [pc, #560]	; (8001ba8 <DioIrqHndlr+0x254>)
 8001976:	f7fe ff01 	bl	800077c <myDebug>
				tx_buffer_len);
		for (int i = 0; i < tx_buffer_len; i++) {
 800197a:	2300      	movs	r3, #0
 800197c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001980:	e00d      	b.n	800199e <DioIrqHndlr+0x4a>
			myDebug("%02x ", tx_buffer[i]);
 8001982:	4a8a      	ldr	r2, [pc, #552]	; (8001bac <DioIrqHndlr+0x258>)
 8001984:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001988:	4413      	add	r3, r2
 800198a:	781b      	ldrb	r3, [r3, #0]
 800198c:	4619      	mov	r1, r3
 800198e:	4888      	ldr	r0, [pc, #544]	; (8001bb0 <DioIrqHndlr+0x25c>)
 8001990:	f7fe fef4 	bl	800077c <myDebug>
		for (int i = 0; i < tx_buffer_len; i++) {
 8001994:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001998:	3301      	adds	r3, #1
 800199a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800199e:	4b81      	ldr	r3, [pc, #516]	; (8001ba4 <DioIrqHndlr+0x250>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80019a6:	429a      	cmp	r2, r3
 80019a8:	dbeb      	blt.n	8001982 <DioIrqHndlr+0x2e>
		}
		myDebug("\r\n");
 80019aa:	4882      	ldr	r0, [pc, #520]	; (8001bb4 <DioIrqHndlr+0x260>)
 80019ac:	f7fe fee6 	bl	800077c <myDebug>

		memset(tx_buffer, '\0', sizeof(tx_buffer));
 80019b0:	2296      	movs	r2, #150	; 0x96
 80019b2:	2100      	movs	r1, #0
 80019b4:	487d      	ldr	r0, [pc, #500]	; (8001bac <DioIrqHndlr+0x258>)
 80019b6:	f00a f819 	bl	800b9ec <memset>

		if (PACKET_TYPE == 0xB1 || PACKET_TYPE == 0xB2) {
 80019ba:	4b7f      	ldr	r3, [pc, #508]	; (8001bb8 <DioIrqHndlr+0x264>)
 80019bc:	781b      	ldrb	r3, [r3, #0]
 80019be:	2bb1      	cmp	r3, #177	; 0xb1
 80019c0:	d003      	beq.n	80019ca <DioIrqHndlr+0x76>
 80019c2:	4b7d      	ldr	r3, [pc, #500]	; (8001bb8 <DioIrqHndlr+0x264>)
 80019c4:	781b      	ldrb	r3, [r3, #0]
 80019c6:	2bb2      	cmp	r3, #178	; 0xb2
 80019c8:	d10c      	bne.n	80019e4 <DioIrqHndlr+0x90>
			BEACON_COUNT--;
 80019ca:	4b7c      	ldr	r3, [pc, #496]	; (8001bbc <DioIrqHndlr+0x268>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	3b01      	subs	r3, #1
 80019d0:	4a7a      	ldr	r2, [pc, #488]	; (8001bbc <DioIrqHndlr+0x268>)
 80019d2:	6013      	str	r3, [r2, #0]
			COUNT_BEACON--;
 80019d4:	4b7a      	ldr	r3, [pc, #488]	; (8001bc0 <DioIrqHndlr+0x26c>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	3b01      	subs	r3, #1
 80019da:	4a79      	ldr	r2, [pc, #484]	; (8001bc0 <DioIrqHndlr+0x26c>)
 80019dc:	6013      	str	r3, [r2, #0]
			PACKET_TYPE = 0;
 80019de:	4a76      	ldr	r2, [pc, #472]	; (8001bb8 <DioIrqHndlr+0x264>)
 80019e0:	2300      	movs	r3, #0
 80019e2:	7013      	strb	r3, [r2, #0]
		}

		if (DIGIPEATER_FLAG) {
 80019e4:	4b77      	ldr	r3, [pc, #476]	; (8001bc4 <DioIrqHndlr+0x270>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d00e      	beq.n	8001a0a <DioIrqHndlr+0xb6>
			BEACON_COUNT = 2;
 80019ec:	4b73      	ldr	r3, [pc, #460]	; (8001bbc <DioIrqHndlr+0x268>)
 80019ee:	2202      	movs	r2, #2
 80019f0:	601a      	str	r2, [r3, #0]
			OBC_SUCCESS_DATA_RX_FLAG = 0;
 80019f2:	4b6b      	ldr	r3, [pc, #428]	; (8001ba0 <DioIrqHndlr+0x24c>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	601a      	str	r2, [r3, #0]
			DIGIPEATER_STATUS = 0;
 80019f8:	4b73      	ldr	r3, [pc, #460]	; (8001bc8 <DioIrqHndlr+0x274>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	601a      	str	r2, [r3, #0]
			DIGIPEATER_FLAG = 0;
 80019fe:	4b71      	ldr	r3, [pc, #452]	; (8001bc4 <DioIrqHndlr+0x270>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	601a      	str	r2, [r3, #0]
			DIGIPEATER_RX_FLAG = 0;
 8001a04:	4b71      	ldr	r3, [pc, #452]	; (8001bcc <DioIrqHndlr+0x278>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	601a      	str	r2, [r3, #0]
		}

		if (BEACON_COUNT == 0) {
 8001a0a:	4b6c      	ldr	r3, [pc, #432]	; (8001bbc <DioIrqHndlr+0x268>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d109      	bne.n	8001a26 <DioIrqHndlr+0xd2>
			OBC_SUCCESS_DATA_RX_FLAG = 0;
 8001a12:	4b63      	ldr	r3, [pc, #396]	; (8001ba0 <DioIrqHndlr+0x24c>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	601a      	str	r2, [r3, #0]
			DIGIPEATER_STATUS = 1;
 8001a18:	4b6b      	ldr	r3, [pc, #428]	; (8001bc8 <DioIrqHndlr+0x274>)
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	601a      	str	r2, [r3, #0]
			myDebug("\n########## Digipeater Mode Configuration: ##########\n");
 8001a1e:	486c      	ldr	r0, [pc, #432]	; (8001bd0 <DioIrqHndlr+0x27c>)
 8001a20:	f7fe feac 	bl	800077c <myDebug>
 8001a24:	e002      	b.n	8001a2c <DioIrqHndlr+0xd8>
		} else {
			DIGIPEATER_STATUS = 0;
 8001a26:	4b68      	ldr	r3, [pc, #416]	; (8001bc8 <DioIrqHndlr+0x274>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	601a      	str	r2, [r3, #0]
		}

		delay_us(500000);
 8001a2c:	4869      	ldr	r0, [pc, #420]	; (8001bd4 <DioIrqHndlr+0x280>)
 8001a2e:	f7fe fe8b 	bl	8000748 <delay_us>

		setPacketParams(rx_buffer_len);
 8001a32:	4b69      	ldr	r3, [pc, #420]	; (8001bd8 <DioIrqHndlr+0x284>)
 8001a34:	781b      	ldrb	r3, [r3, #0]
 8001a36:	4618      	mov	r0, r3
 8001a38:	f7ff f8e6 	bl	8000c08 <setPacketParams>
		setModulationParams(GFSK_BR_1200, GFSK_FDEV_1200);
 8001a3c:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8001a40:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8001a44:	f7ff f90a 	bl	8000c5c <setModulationParams>
		radioConfig(rx_buffer, rx_buffer_len);
 8001a48:	4b63      	ldr	r3, [pc, #396]	; (8001bd8 <DioIrqHndlr+0x284>)
 8001a4a:	781b      	ldrb	r3, [r3, #0]
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	4863      	ldr	r0, [pc, #396]	; (8001bdc <DioIrqHndlr+0x288>)
 8001a50:	f7ff f922 	bl	8000c98 <radioConfig>

		myDebug("\n########## RX Configuration: ##########\n");
 8001a54:	4862      	ldr	r0, [pc, #392]	; (8001be0 <DioIrqHndlr+0x28c>)
 8001a56:	f7fe fe91 	bl	800077c <myDebug>

		myDebug("FREQUENCY MODS: UPLINK FREQ: %lu Hz\r\n", FREQ_435_MHZ);
 8001a5a:	4962      	ldr	r1, [pc, #392]	; (8001be4 <DioIrqHndlr+0x290>)
 8001a5c:	4862      	ldr	r0, [pc, #392]	; (8001be8 <DioIrqHndlr+0x294>)
 8001a5e:	f7fe fe8d 	bl	800077c <myDebug>
		myDebug("Bit Rate: 	%d\n\r", mod_params.Params.Gfsk.BitRate);
 8001a62:	4b62      	ldr	r3, [pc, #392]	; (8001bec <DioIrqHndlr+0x298>)
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	4619      	mov	r1, r3
 8001a68:	4861      	ldr	r0, [pc, #388]	; (8001bf0 <DioIrqHndlr+0x29c>)
 8001a6a:	f7fe fe87 	bl	800077c <myDebug>
		myDebug("Frequency Deviation: 	%d\n\r", mod_params.Params.Gfsk.Fdev);
 8001a6e:	4b5f      	ldr	r3, [pc, #380]	; (8001bec <DioIrqHndlr+0x298>)
 8001a70:	689b      	ldr	r3, [r3, #8]
 8001a72:	4619      	mov	r1, r3
 8001a74:	485f      	ldr	r0, [pc, #380]	; (8001bf4 <DioIrqHndlr+0x2a0>)
 8001a76:	f7fe fe81 	bl	800077c <myDebug>
		myDebug("RECEVING BANDWIDTH: 	%d\n\r",
				mod_params.Params.Gfsk.Bandwidth);
 8001a7a:	4b5c      	ldr	r3, [pc, #368]	; (8001bec <DioIrqHndlr+0x298>)
 8001a7c:	7b5b      	ldrb	r3, [r3, #13]
		myDebug("RECEVING BANDWIDTH: 	%d\n\r",
 8001a7e:	4619      	mov	r1, r3
 8001a80:	485d      	ldr	r0, [pc, #372]	; (8001bf8 <DioIrqHndlr+0x2a4>)
 8001a82:	f7fe fe7b 	bl	800077c <myDebug>
		myDebug("Packet Type 			%d\n\r", pkt_params.PacketType);
 8001a86:	4b5d      	ldr	r3, [pc, #372]	; (8001bfc <DioIrqHndlr+0x2a8>)
 8001a88:	781b      	ldrb	r3, [r3, #0]
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	485c      	ldr	r0, [pc, #368]	; (8001c00 <DioIrqHndlr+0x2ac>)
 8001a8e:	f7fe fe75 	bl	800077c <myDebug>
		myDebug("PayloadLength 			%d\n\r",
				pkt_params.Params.Gfsk.PayloadLength);
 8001a92:	4b5a      	ldr	r3, [pc, #360]	; (8001bfc <DioIrqHndlr+0x2a8>)
 8001a94:	7a1b      	ldrb	r3, [r3, #8]
		myDebug("PayloadLength 			%d\n\r",
 8001a96:	4619      	mov	r1, r3
 8001a98:	485a      	ldr	r0, [pc, #360]	; (8001c04 <DioIrqHndlr+0x2b0>)
 8001a9a:	f7fe fe6f 	bl	800077c <myDebug>
		myDebug("PreambleLength 		%d\n\r",
				pkt_params.Params.Gfsk.PreambleLength);
 8001a9e:	4b57      	ldr	r3, [pc, #348]	; (8001bfc <DioIrqHndlr+0x2a8>)
 8001aa0:	885b      	ldrh	r3, [r3, #2]
		myDebug("PreambleLength 		%d\n\r",
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	4858      	ldr	r0, [pc, #352]	; (8001c08 <DioIrqHndlr+0x2b4>)
 8001aa6:	f7fe fe69 	bl	800077c <myDebug>
		myDebug("PreambleMinDetect		%d\n\r",
				pkt_params.Params.Gfsk.PreambleMinDetect);
 8001aaa:	4b54      	ldr	r3, [pc, #336]	; (8001bfc <DioIrqHndlr+0x2a8>)
 8001aac:	791b      	ldrb	r3, [r3, #4]
		myDebug("PreambleMinDetect		%d\n\r",
 8001aae:	4619      	mov	r1, r3
 8001ab0:	4856      	ldr	r0, [pc, #344]	; (8001c0c <DioIrqHndlr+0x2b8>)
 8001ab2:	f7fe fe63 	bl	800077c <myDebug>
		myDebug("HeaderType 			%d\n\r", pkt_params.Params.Gfsk.HeaderType);
 8001ab6:	4b51      	ldr	r3, [pc, #324]	; (8001bfc <DioIrqHndlr+0x2a8>)
 8001ab8:	79db      	ldrb	r3, [r3, #7]
 8001aba:	4619      	mov	r1, r3
 8001abc:	4854      	ldr	r0, [pc, #336]	; (8001c10 <DioIrqHndlr+0x2bc>)
 8001abe:	f7fe fe5d 	bl	800077c <myDebug>
		myDebug("__________*******************__________\r\n");
 8001ac2:	4854      	ldr	r0, [pc, #336]	; (8001c14 <DioIrqHndlr+0x2c0>)
 8001ac4:	f7fe fe5a 	bl	800077c <myDebug>

		SUBGRF_SetRfFrequency(FREQ_435_MHZ);
 8001ac8:	4846      	ldr	r0, [pc, #280]	; (8001be4 <DioIrqHndlr+0x290>)
 8001aca:	f008 fd5d 	bl	800a588 <SUBGRF_SetRfFrequency>
		SUBGRF_SetSwitch(RFO_LP, RFSWITCH_RX); /*Set RF switch*/
 8001ace:	2100      	movs	r1, #0
 8001ad0:	2001      	movs	r0, #1
 8001ad2:	f009 f9a1 	bl	800ae18 <SUBGRF_SetSwitch>
		SUBGRF_SetRxBoosted(0xFFFFFF);
 8001ad6:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8001ada:	f008 fb81 	bl	800a1e0 <SUBGRF_SetRxBoosted>

		HAL_UART_Receive_DMA(&huart2, OBC_UART_RX, obc_plen);
 8001ade:	4b4e      	ldr	r3, [pc, #312]	; (8001c18 <DioIrqHndlr+0x2c4>)
 8001ae0:	781b      	ldrb	r3, [r3, #0]
 8001ae2:	b29b      	uxth	r3, r3
 8001ae4:	461a      	mov	r2, r3
 8001ae6:	494d      	ldr	r1, [pc, #308]	; (8001c1c <DioIrqHndlr+0x2c8>)
 8001ae8:	484d      	ldr	r0, [pc, #308]	; (8001c20 <DioIrqHndlr+0x2cc>)
 8001aea:	f004 fe8f 	bl	800680c <HAL_UART_Receive_DMA>

		HAL_UART_Receive_DMA(&hlpuart1, OBC_UART_RX, obc_plen);
 8001aee:	4b4a      	ldr	r3, [pc, #296]	; (8001c18 <DioIrqHndlr+0x2c4>)
 8001af0:	781b      	ldrb	r3, [r3, #0]
 8001af2:	b29b      	uxth	r3, r3
 8001af4:	461a      	mov	r2, r3
 8001af6:	4949      	ldr	r1, [pc, #292]	; (8001c1c <DioIrqHndlr+0x2c8>)
 8001af8:	484a      	ldr	r0, [pc, #296]	; (8001c24 <DioIrqHndlr+0x2d0>)
 8001afa:	f004 fe87 	bl	800680c <HAL_UART_Receive_DMA>

	}

	if (radioIrq == IRQ_RX_DONE) {
 8001afe:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001b00:	2b02      	cmp	r3, #2
 8001b02:	f040 865c 	bne.w	80027be <DioIrqHndlr+0xe6a>
		SUBGRF_GetPayload(rx_buffer, &rx_buffer_len, RX_BUFF_LENGTH);
 8001b06:	2269      	movs	r2, #105	; 0x69
 8001b08:	4933      	ldr	r1, [pc, #204]	; (8001bd8 <DioIrqHndlr+0x284>)
 8001b0a:	4834      	ldr	r0, [pc, #208]	; (8001bdc <DioIrqHndlr+0x288>)
 8001b0c:	f008 f9dc 	bl	8009ec8 <SUBGRF_GetPayload>
		rssi_value = SUBGRF_GetRssiInst();
 8001b10:	f008 fffb 	bl	800ab0a <SUBGRF_GetRssiInst>
 8001b14:	4603      	mov	r3, r0
 8001b16:	b2db      	uxtb	r3, r3
 8001b18:	4a43      	ldr	r2, [pc, #268]	; (8001c28 <DioIrqHndlr+0x2d4>)
 8001b1a:	7013      	strb	r3, [r2, #0]
		myDebug("\nGS Command Received: 0x%x\r\n");
 8001b1c:	4843      	ldr	r0, [pc, #268]	; (8001c2c <DioIrqHndlr+0x2d8>)
 8001b1e:	f7fe fe2d 	bl	800077c <myDebug>

		uint8_t temp_rx_buffer_len = 0;
 8001b22:	2300      	movs	r3, #0
 8001b24:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
		temp_rx_buffer_len = countsDataBetweenFlags(rx_buffer, rx_buffer_len);
 8001b28:	4b2b      	ldr	r3, [pc, #172]	; (8001bd8 <DioIrqHndlr+0x284>)
 8001b2a:	781b      	ldrb	r3, [r3, #0]
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	482b      	ldr	r0, [pc, #172]	; (8001bdc <DioIrqHndlr+0x288>)
 8001b30:	f7ff f834 	bl	8000b9c <countsDataBetweenFlags>
 8001b34:	4603      	mov	r3, r0
 8001b36:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7

		if (temp_rx_buffer_len != -1) {
 8001b3a:	466b      	mov	r3, sp
 8001b3c:	4699      	mov	r9, r3

			uint8_t temp_check_buff[temp_rx_buffer_len];
 8001b3e:	f897 80b7 	ldrb.w	r8, [r7, #183]	; 0xb7
 8001b42:	4643      	mov	r3, r8
 8001b44:	3b01      	subs	r3, #1
 8001b46:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001b4a:	fa5f f388 	uxtb.w	r3, r8
 8001b4e:	2200      	movs	r2, #0
 8001b50:	461c      	mov	r4, r3
 8001b52:	4615      	mov	r5, r2
 8001b54:	f04f 0200 	mov.w	r2, #0
 8001b58:	f04f 0300 	mov.w	r3, #0
 8001b5c:	00eb      	lsls	r3, r5, #3
 8001b5e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001b62:	00e2      	lsls	r2, r4, #3
 8001b64:	fa5f f388 	uxtb.w	r3, r8
 8001b68:	2200      	movs	r2, #0
 8001b6a:	469a      	mov	sl, r3
 8001b6c:	4693      	mov	fp, r2
 8001b6e:	f04f 0200 	mov.w	r2, #0
 8001b72:	f04f 0300 	mov.w	r3, #0
 8001b76:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001b7a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001b7e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001b82:	4643      	mov	r3, r8
 8001b84:	3307      	adds	r3, #7
 8001b86:	08db      	lsrs	r3, r3, #3
 8001b88:	00db      	lsls	r3, r3, #3
 8001b8a:	ebad 0d03 	sub.w	sp, sp, r3
 8001b8e:	466b      	mov	r3, sp
 8001b90:	3300      	adds	r3, #0
 8001b92:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			for (int i = 0; i < temp_rx_buffer_len; i++) {
 8001b96:	2300      	movs	r3, #0
 8001b98:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8001b9c:	e063      	b.n	8001c66 <DioIrqHndlr+0x312>
 8001b9e:	bf00      	nop
 8001ba0:	200007c4 	.word	0x200007c4
 8001ba4:	200008f8 	.word	0x200008f8
 8001ba8:	0800c800 	.word	0x0800c800
 8001bac:	20000860 	.word	0x20000860
 8001bb0:	0800c510 	.word	0x0800c510
 8001bb4:	0800c518 	.word	0x0800c518
 8001bb8:	20000904 	.word	0x20000904
 8001bbc:	20000004 	.word	0x20000004
 8001bc0:	20000008 	.word	0x20000008
 8001bc4:	20000908 	.word	0x20000908
 8001bc8:	20000900 	.word	0x20000900
 8001bcc:	2000090c 	.word	0x2000090c
 8001bd0:	0800c838 	.word	0x0800c838
 8001bd4:	0007a120 	.word	0x0007a120
 8001bd8:	20000000 	.word	0x20000000
 8001bdc:	20000700 	.word	0x20000700
 8001be0:	0800c7ac 	.word	0x0800c7ac
 8001be4:	19f25968 	.word	0x19f25968
 8001be8:	0800c7d8 	.word	0x0800c7d8
 8001bec:	200006e4 	.word	0x200006e4
 8001bf0:	0800c3b8 	.word	0x0800c3b8
 8001bf4:	0800c3c8 	.word	0x0800c3c8
 8001bf8:	0800c3e4 	.word	0x0800c3e4
 8001bfc:	200006d0 	.word	0x200006d0
 8001c00:	0800c400 	.word	0x0800c400
 8001c04:	0800c414 	.word	0x0800c414
 8001c08:	0800c42c 	.word	0x0800c42c
 8001c0c:	0800c444 	.word	0x0800c444
 8001c10:	0800c45c 	.word	0x0800c45c
 8001c14:	0800c470 	.word	0x0800c470
 8001c18:	20000001 	.word	0x20000001
 8001c1c:	2000076c 	.word	0x2000076c
 8001c20:	200003a4 	.word	0x200003a4
 8001c24:	2000027c 	.word	0x2000027c
 8001c28:	20000769 	.word	0x20000769
 8001c2c:	0800c870 	.word	0x0800c870
				temp_check_buff[i] = rx_buffer[i];
 8001c30:	4ab2      	ldr	r2, [pc, #712]	; (8001efc <DioIrqHndlr+0x5a8>)
 8001c32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001c36:	4413      	add	r3, r2
 8001c38:	7819      	ldrb	r1, [r3, #0]
 8001c3a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8001c3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001c42:	4413      	add	r3, r2
 8001c44:	460a      	mov	r2, r1
 8001c46:	701a      	strb	r2, [r3, #0]
				myDebug("%02x ", temp_check_buff[i]);
 8001c48:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8001c4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001c50:	4413      	add	r3, r2
 8001c52:	781b      	ldrb	r3, [r3, #0]
 8001c54:	4619      	mov	r1, r3
 8001c56:	48aa      	ldr	r0, [pc, #680]	; (8001f00 <DioIrqHndlr+0x5ac>)
 8001c58:	f7fe fd90 	bl	800077c <myDebug>
			for (int i = 0; i < temp_rx_buffer_len; i++) {
 8001c5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001c60:	3301      	adds	r3, #1
 8001c62:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8001c66:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 8001c6a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8001c6e:	429a      	cmp	r2, r3
 8001c70:	dbde      	blt.n	8001c30 <DioIrqHndlr+0x2dc>
			}
			myDebug("\r\n");
 8001c72:	48a4      	ldr	r0, [pc, #656]	; (8001f04 <DioIrqHndlr+0x5b0>)
 8001c74:	f7fe fd82 	bl	800077c <myDebug>

			memset(rx_buffer, '\0', sizeof(rx_buffer));
 8001c78:	2269      	movs	r2, #105	; 0x69
 8001c7a:	2100      	movs	r1, #0
 8001c7c:	489f      	ldr	r0, [pc, #636]	; (8001efc <DioIrqHndlr+0x5a8>)
 8001c7e:	f009 feb5 	bl	800b9ec <memset>

			uint8_t crc_buff_len = temp_rx_buffer_len - 4;
 8001c82:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 8001c86:	3b04      	subs	r3, #4
 8001c88:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab
			uint8_t crc_buff[crc_buff_len];
 8001c8c:	f897 50ab 	ldrb.w	r5, [r7, #171]	; 0xab
 8001c90:	462b      	mov	r3, r5
 8001c92:	3b01      	subs	r3, #1
 8001c94:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8001c98:	b2eb      	uxtb	r3, r5
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	61bb      	str	r3, [r7, #24]
 8001c9e:	61fa      	str	r2, [r7, #28]
 8001ca0:	f04f 0200 	mov.w	r2, #0
 8001ca4:	f04f 0300 	mov.w	r3, #0
 8001ca8:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001cac:	4659      	mov	r1, fp
 8001cae:	00cb      	lsls	r3, r1, #3
 8001cb0:	4654      	mov	r4, sl
 8001cb2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001cb6:	4651      	mov	r1, sl
 8001cb8:	00ca      	lsls	r2, r1, #3
 8001cba:	b2eb      	uxtb	r3, r5
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	613b      	str	r3, [r7, #16]
 8001cc0:	617a      	str	r2, [r7, #20]
 8001cc2:	f04f 0200 	mov.w	r2, #0
 8001cc6:	f04f 0300 	mov.w	r3, #0
 8001cca:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001cce:	4659      	mov	r1, fp
 8001cd0:	00cb      	lsls	r3, r1, #3
 8001cd2:	4654      	mov	r4, sl
 8001cd4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001cd8:	4651      	mov	r1, sl
 8001cda:	00ca      	lsls	r2, r1, #3
 8001cdc:	462b      	mov	r3, r5
 8001cde:	3307      	adds	r3, #7
 8001ce0:	08db      	lsrs	r3, r3, #3
 8001ce2:	00db      	lsls	r3, r3, #3
 8001ce4:	ebad 0d03 	sub.w	sp, sp, r3
 8001ce8:	466b      	mov	r3, sp
 8001cea:	3300      	adds	r3, #0
 8001cec:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

			//			myDebug("\nGS Command Testing: 0x%x\r\n");

			int j = 0;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
			for (int i = 1; i <= crc_buff_len; i++) {
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001cfc:	e016      	b.n	8001d2c <DioIrqHndlr+0x3d8>
				crc_buff[j] = temp_check_buff[i];
 8001cfe:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8001d02:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001d06:	4413      	add	r3, r2
 8001d08:	7819      	ldrb	r1, [r3, #0]
 8001d0a:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8001d0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001d12:	4413      	add	r3, r2
 8001d14:	460a      	mov	r2, r1
 8001d16:	701a      	strb	r2, [r3, #0]
				//				myDebug("%02x ", crc_buff[j]);
				j++;
 8001d18:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001d1c:	3301      	adds	r3, #1
 8001d1e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
			for (int i = 1; i <= crc_buff_len; i++) {
 8001d22:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001d26:	3301      	adds	r3, #1
 8001d28:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001d2c:	f897 30ab 	ldrb.w	r3, [r7, #171]	; 0xab
 8001d30:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8001d34:	429a      	cmp	r2, r3
 8001d36:	dde2      	ble.n	8001cfe <DioIrqHndlr+0x3aa>
			}
			myDebug("\r\n");
 8001d38:	4872      	ldr	r0, [pc, #456]	; (8001f04 <DioIrqHndlr+0x5b0>)
 8001d3a:	f7fe fd1f 	bl	800077c <myDebug>

			uint16_t crc = 0;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
			crc = calculateCRC_CCITT_AX25(crc_buff, crc_buff_len);
 8001d44:	f897 30ab 	ldrb.w	r3, [r7, #171]	; 0xab
 8001d48:	4619      	mov	r1, r3
 8001d4a:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8001d4e:	f7fe fd4f 	bl	80007f0 <calculateCRC_CCITT_AX25>
 8001d52:	4603      	mov	r3, r0
 8001d54:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e

			uint8_t calc_crc[2];
			calc_crc[0] = (crc >> 8) & 0xFF;
 8001d58:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8001d5c:	0a1b      	lsrs	r3, r3, #8
 8001d5e:	b29b      	uxth	r3, r3
 8001d60:	b2db      	uxtb	r3, r3
 8001d62:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
			calc_crc[1] = crc & 0xFF;
 8001d66:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8001d6a:	b2db      	uxtb	r3, r3
 8001d6c:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d

			uint8_t msb_crc = temp_check_buff[temp_rx_buffer_len - 3];
 8001d70:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 8001d74:	3b03      	subs	r3, #3
 8001d76:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8001d7a:	5cd3      	ldrb	r3, [r2, r3]
 8001d7c:	f887 309d 	strb.w	r3, [r7, #157]	; 0x9d
			uint8_t lsb_crc = temp_check_buff[temp_rx_buffer_len - 2];
 8001d80:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 8001d84:	3b02      	subs	r3, #2
 8001d86:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8001d8a:	5cd3      	ldrb	r3, [r2, r3]
 8001d8c:	f887 309c 	strb.w	r3, [r7, #156]	; 0x9c

			if (calc_crc[0] == msb_crc && calc_crc[1] == lsb_crc) {
 8001d90:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 8001d94:	f897 209d 	ldrb.w	r2, [r7, #157]	; 0x9d
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	f040 84d8 	bne.w	800274e <DioIrqHndlr+0xdfa>
 8001d9e:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 8001da2:	f897 209c 	ldrb.w	r2, [r7, #156]	; 0x9c
 8001da6:	429a      	cmp	r2, r3
 8001da8:	f040 84d1 	bne.w	800274e <DioIrqHndlr+0xdfa>
 8001dac:	466b      	mov	r3, sp
 8001dae:	461e      	mov	r6, r3
				//				myDebug("GS Command checksum correct: 0x%x\r\n");

				uint8_t gs_cmd_buff[100];
				int gs_cmd_len = bit_destuffing(crc_buff, gs_cmd_buff,
 8001db0:	f897 20ab 	ldrb.w	r2, [r7, #171]	; 0xab
 8001db4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001db8:	4619      	mov	r1, r3
 8001dba:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8001dbe:	f7fe fdfe 	bl	80009be <bit_destuffing>
 8001dc2:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
						crc_buff_len);
				gs_cmd_len--;
 8001dc6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001dca:	3b01      	subs	r3, #1
 8001dcc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

				uint8_t main_gs_cmd[gs_cmd_len];
 8001dd0:	f8d7 4098 	ldr.w	r4, [r7, #152]	; 0x98
 8001dd4:	1e63      	subs	r3, r4, #1
 8001dd6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001dda:	4622      	mov	r2, r4
 8001ddc:	2300      	movs	r3, #0
 8001dde:	60ba      	str	r2, [r7, #8]
 8001de0:	60fb      	str	r3, [r7, #12]
 8001de2:	f04f 0200 	mov.w	r2, #0
 8001de6:	f04f 0300 	mov.w	r3, #0
 8001dea:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001dee:	4659      	mov	r1, fp
 8001df0:	00cb      	lsls	r3, r1, #3
 8001df2:	46d4      	mov	ip, sl
 8001df4:	ea43 735c 	orr.w	r3, r3, ip, lsr #29
 8001df8:	4651      	mov	r1, sl
 8001dfa:	00ca      	lsls	r2, r1, #3
 8001dfc:	4622      	mov	r2, r4
 8001dfe:	2300      	movs	r3, #0
 8001e00:	603a      	str	r2, [r7, #0]
 8001e02:	607b      	str	r3, [r7, #4]
 8001e04:	f04f 0200 	mov.w	r2, #0
 8001e08:	f04f 0300 	mov.w	r3, #0
 8001e0c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8001e10:	4659      	mov	r1, fp
 8001e12:	00cb      	lsls	r3, r1, #3
 8001e14:	46d4      	mov	ip, sl
 8001e16:	ea43 735c 	orr.w	r3, r3, ip, lsr #29
 8001e1a:	4651      	mov	r1, sl
 8001e1c:	00ca      	lsls	r2, r1, #3
 8001e1e:	4623      	mov	r3, r4
 8001e20:	3307      	adds	r3, #7
 8001e22:	08db      	lsrs	r3, r3, #3
 8001e24:	00db      	lsls	r3, r3, #3
 8001e26:	ebad 0d03 	sub.w	sp, sp, r3
 8001e2a:	466b      	mov	r3, sp
 8001e2c:	3300      	adds	r3, #0
 8001e2e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
				for (int i = 0; i < gs_cmd_len; i++) {
 8001e32:	2300      	movs	r3, #0
 8001e34:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8001e38:	e011      	b.n	8001e5e <DioIrqHndlr+0x50a>
					main_gs_cmd[i] = gs_cmd_buff[i];
 8001e3a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001e3e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001e42:	4413      	add	r3, r2
 8001e44:	7819      	ldrb	r1, [r3, #0]
 8001e46:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8001e4a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001e4e:	4413      	add	r3, r2
 8001e50:	460a      	mov	r2, r1
 8001e52:	701a      	strb	r2, [r3, #0]
				for (int i = 0; i < gs_cmd_len; i++) {
 8001e54:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001e58:	3301      	adds	r3, #1
 8001e5a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8001e5e:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8001e62:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001e66:	429a      	cmp	r2, r3
 8001e68:	dbe7      	blt.n	8001e3a <DioIrqHndlr+0x4e6>
				}

				if (COUNT_BEACON == 1) {
 8001e6a:	4b27      	ldr	r3, [pc, #156]	; (8001f08 <DioIrqHndlr+0x5b4>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	f040 8141 	bne.w	80020f6 <DioIrqHndlr+0x7a2>

					if ((main_gs_cmd[18] == 0xDF && main_gs_cmd[19] == 0xAB
 8001e74:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001e78:	7c9b      	ldrb	r3, [r3, #18]
 8001e7a:	2bdf      	cmp	r3, #223	; 0xdf
 8001e7c:	d109      	bne.n	8001e92 <DioIrqHndlr+0x53e>
 8001e7e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001e82:	7cdb      	ldrb	r3, [r3, #19]
 8001e84:	2bab      	cmp	r3, #171	; 0xab
 8001e86:	d104      	bne.n	8001e92 <DioIrqHndlr+0x53e>
							&& main_gs_cmd[20] == 0xD1) // Enable Digipeater Mission
 8001e88:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001e8c:	7d1b      	ldrb	r3, [r3, #20]
 8001e8e:	2bd1      	cmp	r3, #209	; 0xd1
 8001e90:	d00e      	beq.n	8001eb0 <DioIrqHndlr+0x55c>
							|| (main_gs_cmd[18] == 0x53
 8001e92:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001e96:	7c9b      	ldrb	r3, [r3, #18]
 8001e98:	2b53      	cmp	r3, #83	; 0x53
 8001e9a:	d13f      	bne.n	8001f1c <DioIrqHndlr+0x5c8>
									&& main_gs_cmd[19] == 0x02
 8001e9c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001ea0:	7cdb      	ldrb	r3, [r3, #19]
 8001ea2:	2b02      	cmp	r3, #2
 8001ea4:	d13a      	bne.n	8001f1c <DioIrqHndlr+0x5c8>
									&& main_gs_cmd[20] == 0x53)) { // Digipeater Packet
 8001ea6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001eaa:	7d1b      	ldrb	r3, [r3, #20]
 8001eac:	2b53      	cmp	r3, #83	; 0x53
 8001eae:	d135      	bne.n	8001f1c <DioIrqHndlr+0x5c8>

						myDebug("\n********GS Command failed: 0x%x\r\n");
 8001eb0:	4816      	ldr	r0, [pc, #88]	; (8001f0c <DioIrqHndlr+0x5b8>)
 8001eb2:	f7fe fc63 	bl	800077c <myDebug>

						OBC_UART_RX[0] = 0x53;	//header
 8001eb6:	4b16      	ldr	r3, [pc, #88]	; (8001f10 <DioIrqHndlr+0x5bc>)
 8001eb8:	2253      	movs	r2, #83	; 0x53
 8001eba:	701a      	strb	r2, [r3, #0]
						OBC_UART_RX[1] = 0xac;	//packet_ type
 8001ebc:	4b14      	ldr	r3, [pc, #80]	; (8001f10 <DioIrqHndlr+0x5bc>)
 8001ebe:	22ac      	movs	r2, #172	; 0xac
 8001ec0:	705a      	strb	r2, [r3, #1]
						OBC_UART_RX[2] = 0x04;	//length of info
 8001ec2:	4b13      	ldr	r3, [pc, #76]	; (8001f10 <DioIrqHndlr+0x5bc>)
 8001ec4:	2204      	movs	r2, #4
 8001ec6:	709a      	strb	r2, [r3, #2]
						OBC_UART_RX[3] = 0x02;	//mcu_no
 8001ec8:	4b11      	ldr	r3, [pc, #68]	; (8001f10 <DioIrqHndlr+0x5bc>)
 8001eca:	2202      	movs	r2, #2
 8001ecc:	70da      	strb	r2, [r3, #3]
						OBC_UART_RX[4] = 0xfc;	//false command
 8001ece:	4b10      	ldr	r3, [pc, #64]	; (8001f10 <DioIrqHndlr+0x5bc>)
 8001ed0:	22fc      	movs	r2, #252	; 0xfc
 8001ed2:	711a      	strb	r2, [r3, #4]
						OBC_UART_RX[5] = 0xee;	//error prefix
 8001ed4:	4b0e      	ldr	r3, [pc, #56]	; (8001f10 <DioIrqHndlr+0x5bc>)
 8001ed6:	22ee      	movs	r2, #238	; 0xee
 8001ed8:	715a      	strb	r2, [r3, #5]
						obc_ilen = OBC_UART_RX[2];
 8001eda:	4b0d      	ldr	r3, [pc, #52]	; (8001f10 <DioIrqHndlr+0x5bc>)
 8001edc:	789a      	ldrb	r2, [r3, #2]
 8001ede:	4b0d      	ldr	r3, [pc, #52]	; (8001f14 <DioIrqHndlr+0x5c0>)
 8001ee0:	701a      	strb	r2, [r3, #0]

						OBC_SUCCESS_DATA_RX_FLAG = 1;
 8001ee2:	4b0d      	ldr	r3, [pc, #52]	; (8001f18 <DioIrqHndlr+0x5c4>)
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	601a      	str	r2, [r3, #0]

						memset(main_gs_cmd, '\0', sizeof(main_gs_cmd));
 8001ee8:	4623      	mov	r3, r4
 8001eea:	461a      	mov	r2, r3
 8001eec:	2100      	movs	r1, #0
 8001eee:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8001ef2:	f009 fd7b 	bl	800b9ec <memset>
 8001ef6:	f000 bc28 	b.w	800274a <DioIrqHndlr+0xdf6>
 8001efa:	bf00      	nop
 8001efc:	20000700 	.word	0x20000700
 8001f00:	0800c510 	.word	0x0800c510
 8001f04:	0800c518 	.word	0x0800c518
 8001f08:	20000008 	.word	0x20000008
 8001f0c:	0800c890 	.word	0x0800c890
 8001f10:	2000076c 	.word	0x2000076c
 8001f14:	2000076a 	.word	0x2000076a
 8001f18:	200007c4 	.word	0x200007c4

					} else if (main_gs_cmd[18] == 0xFD
 8001f1c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001f20:	7c9b      	ldrb	r3, [r3, #18]
 8001f22:	2bfd      	cmp	r3, #253	; 0xfd
 8001f24:	f040 808d 	bne.w	8002042 <DioIrqHndlr+0x6ee>
							&& main_gs_cmd[19] == 0xBA
 8001f28:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001f2c:	7cdb      	ldrb	r3, [r3, #19]
 8001f2e:	2bba      	cmp	r3, #186	; 0xba
 8001f30:	f040 8087 	bne.w	8002042 <DioIrqHndlr+0x6ee>
							&& main_gs_cmd[20] == 0xD0) {
 8001f34:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001f38:	7d1b      	ldrb	r3, [r3, #20]
 8001f3a:	2bd0      	cmp	r3, #208	; 0xd0
 8001f3c:	f040 8081 	bne.w	8002042 <DioIrqHndlr+0x6ee>

						BEACON_COUNT = 2;
 8001f40:	4bbb      	ldr	r3, [pc, #748]	; (8002230 <DioIrqHndlr+0x8dc>)
 8001f42:	2202      	movs	r2, #2
 8001f44:	601a      	str	r2, [r3, #0]
						OBC_SUCCESS_DATA_RX_FLAG = 0;
 8001f46:	4bbb      	ldr	r3, [pc, #748]	; (8002234 <DioIrqHndlr+0x8e0>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	601a      	str	r2, [r3, #0]
						DIGIPEATER_STATUS = 0;
 8001f4c:	4bba      	ldr	r3, [pc, #744]	; (8002238 <DioIrqHndlr+0x8e4>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	601a      	str	r2, [r3, #0]
						DIGIPEATER_FLAG = 0;
 8001f52:	4bba      	ldr	r3, [pc, #744]	; (800223c <DioIrqHndlr+0x8e8>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	601a      	str	r2, [r3, #0]

						myDebug("\n-------> Digipeater MODE OFF\n\n");
 8001f58:	48b9      	ldr	r0, [pc, #740]	; (8002240 <DioIrqHndlr+0x8ec>)
 8001f5a:	f7fe fc0f 	bl	800077c <myDebug>

						OBC_UART_RX[0] = 0x53;	//header
 8001f5e:	4bb9      	ldr	r3, [pc, #740]	; (8002244 <DioIrqHndlr+0x8f0>)
 8001f60:	2253      	movs	r2, #83	; 0x53
 8001f62:	701a      	strb	r2, [r3, #0]
						OBC_UART_RX[1] = 0xac;	//packet_ type
 8001f64:	4bb7      	ldr	r3, [pc, #732]	; (8002244 <DioIrqHndlr+0x8f0>)
 8001f66:	22ac      	movs	r2, #172	; 0xac
 8001f68:	705a      	strb	r2, [r3, #1]
						OBC_UART_RX[2] = 0x04;	//length of info
 8001f6a:	4bb6      	ldr	r3, [pc, #728]	; (8002244 <DioIrqHndlr+0x8f0>)
 8001f6c:	2204      	movs	r2, #4
 8001f6e:	709a      	strb	r2, [r3, #2]
						OBC_UART_RX[3] = 0x02;	//mcu_no
 8001f70:	4bb4      	ldr	r3, [pc, #720]	; (8002244 <DioIrqHndlr+0x8f0>)
 8001f72:	2202      	movs	r2, #2
 8001f74:	70da      	strb	r2, [r3, #3]
						OBC_UART_RX[4] = 0x00;	//Digipeater OFF
 8001f76:	4bb3      	ldr	r3, [pc, #716]	; (8002244 <DioIrqHndlr+0x8f0>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	711a      	strb	r2, [r3, #4]
						OBC_UART_RX[5] = 0xdd;	//Digipeater prefix
 8001f7c:	4bb1      	ldr	r3, [pc, #708]	; (8002244 <DioIrqHndlr+0x8f0>)
 8001f7e:	22dd      	movs	r2, #221	; 0xdd
 8001f80:	715a      	strb	r2, [r3, #5]
						obc_ilen = OBC_UART_RX[2];
 8001f82:	4bb0      	ldr	r3, [pc, #704]	; (8002244 <DioIrqHndlr+0x8f0>)
 8001f84:	789a      	ldrb	r2, [r3, #2]
 8001f86:	4bb0      	ldr	r3, [pc, #704]	; (8002248 <DioIrqHndlr+0x8f4>)
 8001f88:	701a      	strb	r2, [r3, #0]

						myDebug("\nCommand sent to OBC, Length: %d\r\n",
 8001f8a:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8001f8e:	48af      	ldr	r0, [pc, #700]	; (800224c <DioIrqHndlr+0x8f8>)
 8001f90:	f7fe fbf4 	bl	800077c <myDebug>
								gs_cmd_len);

						if (HAL_UART_Transmit(&huart2, main_gs_cmd,
 8001f94:	b2a2      	uxth	r2, r4
 8001f96:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001f9a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8001f9e:	48ac      	ldr	r0, [pc, #688]	; (8002250 <DioIrqHndlr+0x8fc>)
 8001fa0:	f004 fae9 	bl	8006576 <HAL_UART_Transmit>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d00a      	beq.n	8001fc0 <DioIrqHndlr+0x66c>
								sizeof(main_gs_cmd), 2000) == HAL_OK
								|| HAL_UART_Transmit(&hlpuart1, main_gs_cmd,
 8001faa:	b2a2      	uxth	r2, r4
 8001fac:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001fb0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8001fb4:	48a7      	ldr	r0, [pc, #668]	; (8002254 <DioIrqHndlr+0x900>)
 8001fb6:	f004 fade 	bl	8006576 <HAL_UART_Transmit>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d03c      	beq.n	800203a <DioIrqHndlr+0x6e6>
										sizeof(main_gs_cmd), 2000)) {

							for (int i = 0; i < gs_cmd_len; i++) {
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001fc6:	e00e      	b.n	8001fe6 <DioIrqHndlr+0x692>
								myDebug("%02x ", main_gs_cmd[i]);
 8001fc8:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8001fcc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001fd0:	4413      	add	r3, r2
 8001fd2:	781b      	ldrb	r3, [r3, #0]
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	48a0      	ldr	r0, [pc, #640]	; (8002258 <DioIrqHndlr+0x904>)
 8001fd8:	f7fe fbd0 	bl	800077c <myDebug>
							for (int i = 0; i < gs_cmd_len; i++) {
 8001fdc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001fe0:	3301      	adds	r3, #1
 8001fe2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001fe6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8001fea:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001fee:	429a      	cmp	r2, r3
 8001ff0:	dbea      	blt.n	8001fc8 <DioIrqHndlr+0x674>
							}

							myDebug("\r\n");
 8001ff2:	489a      	ldr	r0, [pc, #616]	; (800225c <DioIrqHndlr+0x908>)
 8001ff4:	f7fe fbc2 	bl	800077c <myDebug>

							memset(main_gs_cmd, '\0', sizeof(main_gs_cmd));
 8001ff8:	4623      	mov	r3, r4
 8001ffa:	461a      	mov	r2, r3
 8001ffc:	2100      	movs	r1, #0
 8001ffe:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8002002:	f009 fcf3 	bl	800b9ec <memset>
							memset(rx_buffer, '\0', sizeof(rx_buffer));
 8002006:	2269      	movs	r2, #105	; 0x69
 8002008:	2100      	movs	r1, #0
 800200a:	4895      	ldr	r0, [pc, #596]	; (8002260 <DioIrqHndlr+0x90c>)
 800200c:	f009 fcee 	bl	800b9ec <memset>
							memset(temp_check_buff, '\0',
									sizeof(temp_check_buff));
 8002010:	4643      	mov	r3, r8
							memset(temp_check_buff, '\0',
 8002012:	461a      	mov	r2, r3
 8002014:	2100      	movs	r1, #0
 8002016:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800201a:	f009 fce7 	bl	800b9ec <memset>
							memset(crc_buff, '\0', sizeof(crc_buff));
 800201e:	462b      	mov	r3, r5
 8002020:	461a      	mov	r2, r3
 8002022:	2100      	movs	r1, #0
 8002024:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8002028:	f009 fce0 	bl	800b9ec <memset>
							memset(gs_cmd_buff, '\0', sizeof(gs_cmd_buff));
 800202c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002030:	2264      	movs	r2, #100	; 0x64
 8002032:	2100      	movs	r1, #0
 8002034:	4618      	mov	r0, r3
 8002036:	f009 fcd9 	bl	800b9ec <memset>
						}

						OBC_SUCCESS_DATA_RX_FLAG = 1;
 800203a:	4b7e      	ldr	r3, [pc, #504]	; (8002234 <DioIrqHndlr+0x8e0>)
 800203c:	2201      	movs	r2, #1
 800203e:	601a      	str	r2, [r3, #0]
 8002040:	e383      	b.n	800274a <DioIrqHndlr+0xdf6>

					} else {
						myDebug("\nCommand sent to OBC, Length: %d\r\n",
 8002042:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8002046:	4881      	ldr	r0, [pc, #516]	; (800224c <DioIrqHndlr+0x8f8>)
 8002048:	f7fe fb98 	bl	800077c <myDebug>
								gs_cmd_len);
						if (HAL_UART_Transmit(&huart2, main_gs_cmd,
 800204c:	b2a2      	uxth	r2, r4
 800204e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002052:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002056:	487e      	ldr	r0, [pc, #504]	; (8002250 <DioIrqHndlr+0x8fc>)
 8002058:	f004 fa8d 	bl	8006576 <HAL_UART_Transmit>
 800205c:	4603      	mov	r3, r0
 800205e:	2b00      	cmp	r3, #0
 8002060:	d00b      	beq.n	800207a <DioIrqHndlr+0x726>
								sizeof(main_gs_cmd), 2000) == HAL_OK
								|| HAL_UART_Transmit(&hlpuart1, main_gs_cmd,
 8002062:	b2a2      	uxth	r2, r4
 8002064:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002068:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800206c:	4879      	ldr	r0, [pc, #484]	; (8002254 <DioIrqHndlr+0x900>)
 800206e:	f004 fa82 	bl	8006576 <HAL_UART_Transmit>
 8002072:	4603      	mov	r3, r0
 8002074:	2b00      	cmp	r3, #0
 8002076:	f000 8368 	beq.w	800274a <DioIrqHndlr+0xdf6>
										sizeof(main_gs_cmd), 2000)) {

							for (int i = 0; i < gs_cmd_len; i++) {
 800207a:	2300      	movs	r3, #0
 800207c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002080:	e00e      	b.n	80020a0 <DioIrqHndlr+0x74c>
								myDebug("%02x ", main_gs_cmd[i]);
 8002082:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8002086:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800208a:	4413      	add	r3, r2
 800208c:	781b      	ldrb	r3, [r3, #0]
 800208e:	4619      	mov	r1, r3
 8002090:	4871      	ldr	r0, [pc, #452]	; (8002258 <DioIrqHndlr+0x904>)
 8002092:	f7fe fb73 	bl	800077c <myDebug>
							for (int i = 0; i < gs_cmd_len; i++) {
 8002096:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800209a:	3301      	adds	r3, #1
 800209c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80020a0:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80020a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80020a8:	429a      	cmp	r2, r3
 80020aa:	dbea      	blt.n	8002082 <DioIrqHndlr+0x72e>
							}

							memset(main_gs_cmd, '\0', sizeof(main_gs_cmd));
 80020ac:	4623      	mov	r3, r4
 80020ae:	461a      	mov	r2, r3
 80020b0:	2100      	movs	r1, #0
 80020b2:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 80020b6:	f009 fc99 	bl	800b9ec <memset>
							memset(rx_buffer, '\0', sizeof(rx_buffer));
 80020ba:	2269      	movs	r2, #105	; 0x69
 80020bc:	2100      	movs	r1, #0
 80020be:	4868      	ldr	r0, [pc, #416]	; (8002260 <DioIrqHndlr+0x90c>)
 80020c0:	f009 fc94 	bl	800b9ec <memset>
							memset(temp_check_buff, '\0',
									sizeof(temp_check_buff));
 80020c4:	4643      	mov	r3, r8
							memset(temp_check_buff, '\0',
 80020c6:	461a      	mov	r2, r3
 80020c8:	2100      	movs	r1, #0
 80020ca:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 80020ce:	f009 fc8d 	bl	800b9ec <memset>
							memset(crc_buff, '\0', sizeof(crc_buff));
 80020d2:	462b      	mov	r3, r5
 80020d4:	461a      	mov	r2, r3
 80020d6:	2100      	movs	r1, #0
 80020d8:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 80020dc:	f009 fc86 	bl	800b9ec <memset>
							memset(gs_cmd_buff, '\0', sizeof(gs_cmd_buff));
 80020e0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80020e4:	2264      	movs	r2, #100	; 0x64
 80020e6:	2100      	movs	r1, #0
 80020e8:	4618      	mov	r0, r3
 80020ea:	f009 fc7f 	bl	800b9ec <memset>

							myDebug("\n\n_____OBC__RECEIVER_____\r\n");
 80020ee:	485d      	ldr	r0, [pc, #372]	; (8002264 <DioIrqHndlr+0x910>)
 80020f0:	f7fe fb44 	bl	800077c <myDebug>
 80020f4:	e329      	b.n	800274a <DioIrqHndlr+0xdf6>
						}

					}
				} else if (COUNT_BEACON == 0) {
 80020f6:	4b5c      	ldr	r3, [pc, #368]	; (8002268 <DioIrqHndlr+0x914>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	f040 8325 	bne.w	800274a <DioIrqHndlr+0xdf6>
					if (DIGIPEATER_STATUS == 1) {
 8002100:	4b4d      	ldr	r3, [pc, #308]	; (8002238 <DioIrqHndlr+0x8e4>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	2b01      	cmp	r3, #1
 8002106:	f040 8141 	bne.w	800238c <DioIrqHndlr+0xa38>
						if (main_gs_cmd[18] == 0xFD && main_gs_cmd[19] == 0xBA
 800210a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800210e:	7c9b      	ldrb	r3, [r3, #18]
 8002110:	2bfd      	cmp	r3, #253	; 0xfd
 8002112:	f040 80ab 	bne.w	800226c <DioIrqHndlr+0x918>
 8002116:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800211a:	7cdb      	ldrb	r3, [r3, #19]
 800211c:	2bba      	cmp	r3, #186	; 0xba
 800211e:	f040 80a5 	bne.w	800226c <DioIrqHndlr+0x918>
								&& main_gs_cmd[20] == 0xD0) {
 8002122:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002126:	7d1b      	ldrb	r3, [r3, #20]
 8002128:	2bd0      	cmp	r3, #208	; 0xd0
 800212a:	f040 809f 	bne.w	800226c <DioIrqHndlr+0x918>

							BEACON_COUNT = 2;
 800212e:	4b40      	ldr	r3, [pc, #256]	; (8002230 <DioIrqHndlr+0x8dc>)
 8002130:	2202      	movs	r2, #2
 8002132:	601a      	str	r2, [r3, #0]
							OBC_SUCCESS_DATA_RX_FLAG = 0;
 8002134:	4b3f      	ldr	r3, [pc, #252]	; (8002234 <DioIrqHndlr+0x8e0>)
 8002136:	2200      	movs	r2, #0
 8002138:	601a      	str	r2, [r3, #0]
							DIGIPEATER_STATUS = 0;
 800213a:	4b3f      	ldr	r3, [pc, #252]	; (8002238 <DioIrqHndlr+0x8e4>)
 800213c:	2200      	movs	r2, #0
 800213e:	601a      	str	r2, [r3, #0]
							DIGIPEATER_FLAG = 0;
 8002140:	4b3e      	ldr	r3, [pc, #248]	; (800223c <DioIrqHndlr+0x8e8>)
 8002142:	2200      	movs	r2, #0
 8002144:	601a      	str	r2, [r3, #0]

							myDebug("\n-------> Digipeater MODE OFF\n\n");
 8002146:	483e      	ldr	r0, [pc, #248]	; (8002240 <DioIrqHndlr+0x8ec>)
 8002148:	f7fe fb18 	bl	800077c <myDebug>

							OBC_UART_RX[0] = 0x53;	//header
 800214c:	4b3d      	ldr	r3, [pc, #244]	; (8002244 <DioIrqHndlr+0x8f0>)
 800214e:	2253      	movs	r2, #83	; 0x53
 8002150:	701a      	strb	r2, [r3, #0]
							OBC_UART_RX[1] = 0xac;	//packet_ type
 8002152:	4b3c      	ldr	r3, [pc, #240]	; (8002244 <DioIrqHndlr+0x8f0>)
 8002154:	22ac      	movs	r2, #172	; 0xac
 8002156:	705a      	strb	r2, [r3, #1]
							OBC_UART_RX[2] = 0x04;	//length of info
 8002158:	4b3a      	ldr	r3, [pc, #232]	; (8002244 <DioIrqHndlr+0x8f0>)
 800215a:	2204      	movs	r2, #4
 800215c:	709a      	strb	r2, [r3, #2]
							OBC_UART_RX[3] = 0x02;	//mcu_no
 800215e:	4b39      	ldr	r3, [pc, #228]	; (8002244 <DioIrqHndlr+0x8f0>)
 8002160:	2202      	movs	r2, #2
 8002162:	70da      	strb	r2, [r3, #3]
							OBC_UART_RX[4] = 0x00;	//Digipeater OFF
 8002164:	4b37      	ldr	r3, [pc, #220]	; (8002244 <DioIrqHndlr+0x8f0>)
 8002166:	2200      	movs	r2, #0
 8002168:	711a      	strb	r2, [r3, #4]
							OBC_UART_RX[5] = 0xdd;	//Digipeater prefix
 800216a:	4b36      	ldr	r3, [pc, #216]	; (8002244 <DioIrqHndlr+0x8f0>)
 800216c:	22dd      	movs	r2, #221	; 0xdd
 800216e:	715a      	strb	r2, [r3, #5]
							obc_ilen = OBC_UART_RX[2];
 8002170:	4b34      	ldr	r3, [pc, #208]	; (8002244 <DioIrqHndlr+0x8f0>)
 8002172:	789a      	ldrb	r2, [r3, #2]
 8002174:	4b34      	ldr	r3, [pc, #208]	; (8002248 <DioIrqHndlr+0x8f4>)
 8002176:	701a      	strb	r2, [r3, #0]

							myDebug("\nCommand sent to OBC, Length: %d\r\n",
 8002178:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 800217c:	4833      	ldr	r0, [pc, #204]	; (800224c <DioIrqHndlr+0x8f8>)
 800217e:	f7fe fafd 	bl	800077c <myDebug>
									gs_cmd_len);

							if (HAL_UART_Transmit(&huart2, main_gs_cmd,
 8002182:	b2a2      	uxth	r2, r4
 8002184:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002188:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800218c:	4830      	ldr	r0, [pc, #192]	; (8002250 <DioIrqHndlr+0x8fc>)
 800218e:	f004 f9f2 	bl	8006576 <HAL_UART_Transmit>
 8002192:	4603      	mov	r3, r0
 8002194:	2b00      	cmp	r3, #0
 8002196:	d00a      	beq.n	80021ae <DioIrqHndlr+0x85a>
									sizeof(main_gs_cmd), 2000) == HAL_OK
									|| HAL_UART_Transmit(&hlpuart1, main_gs_cmd,
 8002198:	b2a2      	uxth	r2, r4
 800219a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800219e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80021a2:	482c      	ldr	r0, [pc, #176]	; (8002254 <DioIrqHndlr+0x900>)
 80021a4:	f004 f9e7 	bl	8006576 <HAL_UART_Transmit>
 80021a8:	4603      	mov	r3, r0
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d03c      	beq.n	8002228 <DioIrqHndlr+0x8d4>
											sizeof(main_gs_cmd), 2000)) {

								for (int i = 0; i < gs_cmd_len; i++) {
 80021ae:	2300      	movs	r3, #0
 80021b0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80021b4:	e00e      	b.n	80021d4 <DioIrqHndlr+0x880>
									myDebug("%02x ", main_gs_cmd[i]);
 80021b6:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80021ba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80021be:	4413      	add	r3, r2
 80021c0:	781b      	ldrb	r3, [r3, #0]
 80021c2:	4619      	mov	r1, r3
 80021c4:	4824      	ldr	r0, [pc, #144]	; (8002258 <DioIrqHndlr+0x904>)
 80021c6:	f7fe fad9 	bl	800077c <myDebug>
								for (int i = 0; i < gs_cmd_len; i++) {
 80021ca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80021ce:	3301      	adds	r3, #1
 80021d0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80021d4:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80021d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80021dc:	429a      	cmp	r2, r3
 80021de:	dbea      	blt.n	80021b6 <DioIrqHndlr+0x862>
								}

								myDebug("\r\n");
 80021e0:	481e      	ldr	r0, [pc, #120]	; (800225c <DioIrqHndlr+0x908>)
 80021e2:	f7fe facb 	bl	800077c <myDebug>

								memset(main_gs_cmd, '\0', sizeof(main_gs_cmd));
 80021e6:	4623      	mov	r3, r4
 80021e8:	461a      	mov	r2, r3
 80021ea:	2100      	movs	r1, #0
 80021ec:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 80021f0:	f009 fbfc 	bl	800b9ec <memset>
								memset(rx_buffer, '\0', sizeof(rx_buffer));
 80021f4:	2269      	movs	r2, #105	; 0x69
 80021f6:	2100      	movs	r1, #0
 80021f8:	4819      	ldr	r0, [pc, #100]	; (8002260 <DioIrqHndlr+0x90c>)
 80021fa:	f009 fbf7 	bl	800b9ec <memset>
								memset(temp_check_buff, '\0',
										sizeof(temp_check_buff));
 80021fe:	4643      	mov	r3, r8
								memset(temp_check_buff, '\0',
 8002200:	461a      	mov	r2, r3
 8002202:	2100      	movs	r1, #0
 8002204:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8002208:	f009 fbf0 	bl	800b9ec <memset>
								memset(crc_buff, '\0', sizeof(crc_buff));
 800220c:	462b      	mov	r3, r5
 800220e:	461a      	mov	r2, r3
 8002210:	2100      	movs	r1, #0
 8002212:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8002216:	f009 fbe9 	bl	800b9ec <memset>
								memset(gs_cmd_buff, '\0', sizeof(gs_cmd_buff));
 800221a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800221e:	2264      	movs	r2, #100	; 0x64
 8002220:	2100      	movs	r1, #0
 8002222:	4618      	mov	r0, r3
 8002224:	f009 fbe2 	bl	800b9ec <memset>
							}

							OBC_SUCCESS_DATA_RX_FLAG = 1;
 8002228:	4b02      	ldr	r3, [pc, #8]	; (8002234 <DioIrqHndlr+0x8e0>)
 800222a:	2201      	movs	r2, #1
 800222c:	601a      	str	r2, [r3, #0]
 800222e:	e28c      	b.n	800274a <DioIrqHndlr+0xdf6>
 8002230:	20000004 	.word	0x20000004
 8002234:	200007c4 	.word	0x200007c4
 8002238:	20000900 	.word	0x20000900
 800223c:	20000908 	.word	0x20000908
 8002240:	0800c8b4 	.word	0x0800c8b4
 8002244:	2000076c 	.word	0x2000076c
 8002248:	2000076a 	.word	0x2000076a
 800224c:	0800c8d4 	.word	0x0800c8d4
 8002250:	200003a4 	.word	0x200003a4
 8002254:	2000027c 	.word	0x2000027c
 8002258:	0800c510 	.word	0x0800c510
 800225c:	0800c518 	.word	0x0800c518
 8002260:	20000700 	.word	0x20000700
 8002264:	0800c8f8 	.word	0x0800c8f8
 8002268:	20000008 	.word	0x20000008

						} else if (main_gs_cmd[18] == 0x53
 800226c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002270:	7c9b      	ldrb	r3, [r3, #18]
 8002272:	2b53      	cmp	r3, #83	; 0x53
 8002274:	d166      	bne.n	8002344 <DioIrqHndlr+0x9f0>
								&& main_gs_cmd[19] == 0x02
 8002276:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800227a:	7cdb      	ldrb	r3, [r3, #19]
 800227c:	2b02      	cmp	r3, #2
 800227e:	d161      	bne.n	8002344 <DioIrqHndlr+0x9f0>
								&& main_gs_cmd[20] == 0x53) { // if digipeater packet
 8002280:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002284:	7d1b      	ldrb	r3, [r3, #20]
 8002286:	2b53      	cmp	r3, #83	; 0x53
 8002288:	d15c      	bne.n	8002344 <DioIrqHndlr+0x9f0>
							myDebug(
 800228a:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 800228e:	48b6      	ldr	r0, [pc, #728]	; (8002568 <DioIrqHndlr+0xc14>)
 8002290:	f7fe fa74 	bl	800077c <myDebug>
									"\nDigipeater packet sent to OBC, Length: %d\r\n",
									gs_cmd_len);
							if (HAL_UART_Transmit(&huart2, main_gs_cmd,
 8002294:	b2a2      	uxth	r2, r4
 8002296:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800229a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800229e:	48b3      	ldr	r0, [pc, #716]	; (800256c <DioIrqHndlr+0xc18>)
 80022a0:	f004 f969 	bl	8006576 <HAL_UART_Transmit>
 80022a4:	4603      	mov	r3, r0
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d00b      	beq.n	80022c2 <DioIrqHndlr+0x96e>
									sizeof(main_gs_cmd), 2000) == HAL_OK
									|| HAL_UART_Transmit(&hlpuart1, main_gs_cmd,
 80022aa:	b2a2      	uxth	r2, r4
 80022ac:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80022b0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80022b4:	48ae      	ldr	r0, [pc, #696]	; (8002570 <DioIrqHndlr+0xc1c>)
 80022b6:	f004 f95e 	bl	8006576 <HAL_UART_Transmit>
 80022ba:	4603      	mov	r3, r0
 80022bc:	2b00      	cmp	r3, #0
 80022be:	f000 8243 	beq.w	8002748 <DioIrqHndlr+0xdf4>
											sizeof(main_gs_cmd), 2000)) {

								for (int i = 0; i < gs_cmd_len; i++) {
 80022c2:	2300      	movs	r3, #0
 80022c4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80022c8:	e00e      	b.n	80022e8 <DioIrqHndlr+0x994>
									myDebug("%02x ", main_gs_cmd[i]);
 80022ca:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80022ce:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80022d2:	4413      	add	r3, r2
 80022d4:	781b      	ldrb	r3, [r3, #0]
 80022d6:	4619      	mov	r1, r3
 80022d8:	48a6      	ldr	r0, [pc, #664]	; (8002574 <DioIrqHndlr+0xc20>)
 80022da:	f7fe fa4f 	bl	800077c <myDebug>
								for (int i = 0; i < gs_cmd_len; i++) {
 80022de:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80022e2:	3301      	adds	r3, #1
 80022e4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80022e8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80022ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80022f0:	429a      	cmp	r2, r3
 80022f2:	dbea      	blt.n	80022ca <DioIrqHndlr+0x976>
								}

								myDebug("\r\n");
 80022f4:	48a0      	ldr	r0, [pc, #640]	; (8002578 <DioIrqHndlr+0xc24>)
 80022f6:	f7fe fa41 	bl	800077c <myDebug>

								memset(main_gs_cmd, '\0', sizeof(main_gs_cmd));
 80022fa:	4623      	mov	r3, r4
 80022fc:	461a      	mov	r2, r3
 80022fe:	2100      	movs	r1, #0
 8002300:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8002304:	f009 fb72 	bl	800b9ec <memset>
								memset(rx_buffer, '\0', sizeof(rx_buffer));
 8002308:	2269      	movs	r2, #105	; 0x69
 800230a:	2100      	movs	r1, #0
 800230c:	489b      	ldr	r0, [pc, #620]	; (800257c <DioIrqHndlr+0xc28>)
 800230e:	f009 fb6d 	bl	800b9ec <memset>
								memset(temp_check_buff, '\0',
										sizeof(temp_check_buff));
 8002312:	4643      	mov	r3, r8
								memset(temp_check_buff, '\0',
 8002314:	461a      	mov	r2, r3
 8002316:	2100      	movs	r1, #0
 8002318:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800231c:	f009 fb66 	bl	800b9ec <memset>
								memset(crc_buff, '\0', sizeof(crc_buff));
 8002320:	462b      	mov	r3, r5
 8002322:	461a      	mov	r2, r3
 8002324:	2100      	movs	r1, #0
 8002326:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 800232a:	f009 fb5f 	bl	800b9ec <memset>
								memset(gs_cmd_buff, '\0', sizeof(gs_cmd_buff));
 800232e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002332:	2264      	movs	r2, #100	; 0x64
 8002334:	2100      	movs	r1, #0
 8002336:	4618      	mov	r0, r3
 8002338:	f009 fb58 	bl	800b9ec <memset>

								myDebug(
 800233c:	4890      	ldr	r0, [pc, #576]	; (8002580 <DioIrqHndlr+0xc2c>)
 800233e:	f7fe fa1d 	bl	800077c <myDebug>
							if (HAL_UART_Transmit(&huart2, main_gs_cmd,
 8002342:	e201      	b.n	8002748 <DioIrqHndlr+0xdf4>
										"\n\n_____DIGIPEATER_OBC__RECEIVER_____\r\n");
							}
						} else {
							myDebug("\n********GS Command failed: 0x%x\r\n");
 8002344:	488f      	ldr	r0, [pc, #572]	; (8002584 <DioIrqHndlr+0xc30>)
 8002346:	f7fe fa19 	bl	800077c <myDebug>

							OBC_UART_RX[0] = 0x53;	//header
 800234a:	4b8f      	ldr	r3, [pc, #572]	; (8002588 <DioIrqHndlr+0xc34>)
 800234c:	2253      	movs	r2, #83	; 0x53
 800234e:	701a      	strb	r2, [r3, #0]
							OBC_UART_RX[1] = 0xac;	//packet_ type
 8002350:	4b8d      	ldr	r3, [pc, #564]	; (8002588 <DioIrqHndlr+0xc34>)
 8002352:	22ac      	movs	r2, #172	; 0xac
 8002354:	705a      	strb	r2, [r3, #1]
							OBC_UART_RX[2] = 0x04;	//length of info
 8002356:	4b8c      	ldr	r3, [pc, #560]	; (8002588 <DioIrqHndlr+0xc34>)
 8002358:	2204      	movs	r2, #4
 800235a:	709a      	strb	r2, [r3, #2]
							OBC_UART_RX[3] = 0x02;	//mcu_no
 800235c:	4b8a      	ldr	r3, [pc, #552]	; (8002588 <DioIrqHndlr+0xc34>)
 800235e:	2202      	movs	r2, #2
 8002360:	70da      	strb	r2, [r3, #3]
							OBC_UART_RX[4] = 0xfc;	//false command
 8002362:	4b89      	ldr	r3, [pc, #548]	; (8002588 <DioIrqHndlr+0xc34>)
 8002364:	22fc      	movs	r2, #252	; 0xfc
 8002366:	711a      	strb	r2, [r3, #4]
							OBC_UART_RX[5] = 0xee;	//error prefix
 8002368:	4b87      	ldr	r3, [pc, #540]	; (8002588 <DioIrqHndlr+0xc34>)
 800236a:	22ee      	movs	r2, #238	; 0xee
 800236c:	715a      	strb	r2, [r3, #5]
							obc_ilen = OBC_UART_RX[2];
 800236e:	4b86      	ldr	r3, [pc, #536]	; (8002588 <DioIrqHndlr+0xc34>)
 8002370:	789a      	ldrb	r2, [r3, #2]
 8002372:	4b86      	ldr	r3, [pc, #536]	; (800258c <DioIrqHndlr+0xc38>)
 8002374:	701a      	strb	r2, [r3, #0]

							OBC_SUCCESS_DATA_RX_FLAG = 1;
 8002376:	4b86      	ldr	r3, [pc, #536]	; (8002590 <DioIrqHndlr+0xc3c>)
 8002378:	2201      	movs	r2, #1
 800237a:	601a      	str	r2, [r3, #0]

							memset(main_gs_cmd, '\0', sizeof(main_gs_cmd));
 800237c:	4623      	mov	r3, r4
 800237e:	461a      	mov	r2, r3
 8002380:	2100      	movs	r1, #0
 8002382:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8002386:	f009 fb31 	bl	800b9ec <memset>
 800238a:	e1de      	b.n	800274a <DioIrqHndlr+0xdf6>

						}
					} else if (DIGIPEATER_STATUS == 0) {
 800238c:	4b81      	ldr	r3, [pc, #516]	; (8002594 <DioIrqHndlr+0xc40>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	2b00      	cmp	r3, #0
 8002392:	f040 81da 	bne.w	800274a <DioIrqHndlr+0xdf6>
						if (main_gs_cmd[18] == 0xFD && main_gs_cmd[19] == 0xBA
 8002396:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800239a:	7c9b      	ldrb	r3, [r3, #18]
 800239c:	2bfd      	cmp	r3, #253	; 0xfd
 800239e:	f040 808d 	bne.w	80024bc <DioIrqHndlr+0xb68>
 80023a2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80023a6:	7cdb      	ldrb	r3, [r3, #19]
 80023a8:	2bba      	cmp	r3, #186	; 0xba
 80023aa:	f040 8087 	bne.w	80024bc <DioIrqHndlr+0xb68>
								&& main_gs_cmd[20] == 0xD0) {
 80023ae:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80023b2:	7d1b      	ldrb	r3, [r3, #20]
 80023b4:	2bd0      	cmp	r3, #208	; 0xd0
 80023b6:	f040 8081 	bne.w	80024bc <DioIrqHndlr+0xb68>

							BEACON_COUNT = 2;
 80023ba:	4b77      	ldr	r3, [pc, #476]	; (8002598 <DioIrqHndlr+0xc44>)
 80023bc:	2202      	movs	r2, #2
 80023be:	601a      	str	r2, [r3, #0]
							OBC_SUCCESS_DATA_RX_FLAG = 0;
 80023c0:	4b73      	ldr	r3, [pc, #460]	; (8002590 <DioIrqHndlr+0xc3c>)
 80023c2:	2200      	movs	r2, #0
 80023c4:	601a      	str	r2, [r3, #0]
							DIGIPEATER_STATUS = 0;
 80023c6:	4b73      	ldr	r3, [pc, #460]	; (8002594 <DioIrqHndlr+0xc40>)
 80023c8:	2200      	movs	r2, #0
 80023ca:	601a      	str	r2, [r3, #0]
							DIGIPEATER_FLAG = 0;
 80023cc:	4b73      	ldr	r3, [pc, #460]	; (800259c <DioIrqHndlr+0xc48>)
 80023ce:	2200      	movs	r2, #0
 80023d0:	601a      	str	r2, [r3, #0]

							myDebug("\n-------> Digipeater MODE OFF\n\n");
 80023d2:	4873      	ldr	r0, [pc, #460]	; (80025a0 <DioIrqHndlr+0xc4c>)
 80023d4:	f7fe f9d2 	bl	800077c <myDebug>

							OBC_UART_RX[0] = 0x53;	//header
 80023d8:	4b6b      	ldr	r3, [pc, #428]	; (8002588 <DioIrqHndlr+0xc34>)
 80023da:	2253      	movs	r2, #83	; 0x53
 80023dc:	701a      	strb	r2, [r3, #0]
							OBC_UART_RX[1] = 0xac;	//packet_ type
 80023de:	4b6a      	ldr	r3, [pc, #424]	; (8002588 <DioIrqHndlr+0xc34>)
 80023e0:	22ac      	movs	r2, #172	; 0xac
 80023e2:	705a      	strb	r2, [r3, #1]
							OBC_UART_RX[2] = 0x04;	//length of info
 80023e4:	4b68      	ldr	r3, [pc, #416]	; (8002588 <DioIrqHndlr+0xc34>)
 80023e6:	2204      	movs	r2, #4
 80023e8:	709a      	strb	r2, [r3, #2]
							OBC_UART_RX[3] = 0x02;	//mcu_no
 80023ea:	4b67      	ldr	r3, [pc, #412]	; (8002588 <DioIrqHndlr+0xc34>)
 80023ec:	2202      	movs	r2, #2
 80023ee:	70da      	strb	r2, [r3, #3]
							OBC_UART_RX[4] = 0x00;	//Digipeater OFF
 80023f0:	4b65      	ldr	r3, [pc, #404]	; (8002588 <DioIrqHndlr+0xc34>)
 80023f2:	2200      	movs	r2, #0
 80023f4:	711a      	strb	r2, [r3, #4]
							OBC_UART_RX[5] = 0xdd;	//Digipeater prefix
 80023f6:	4b64      	ldr	r3, [pc, #400]	; (8002588 <DioIrqHndlr+0xc34>)
 80023f8:	22dd      	movs	r2, #221	; 0xdd
 80023fa:	715a      	strb	r2, [r3, #5]
							obc_ilen = OBC_UART_RX[2];
 80023fc:	4b62      	ldr	r3, [pc, #392]	; (8002588 <DioIrqHndlr+0xc34>)
 80023fe:	789a      	ldrb	r2, [r3, #2]
 8002400:	4b62      	ldr	r3, [pc, #392]	; (800258c <DioIrqHndlr+0xc38>)
 8002402:	701a      	strb	r2, [r3, #0]

							myDebug("\nCommand sent to OBC, Length: %d\r\n",
 8002404:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8002408:	4866      	ldr	r0, [pc, #408]	; (80025a4 <DioIrqHndlr+0xc50>)
 800240a:	f7fe f9b7 	bl	800077c <myDebug>
									gs_cmd_len);

							if (HAL_UART_Transmit(&huart2, main_gs_cmd,
 800240e:	b2a2      	uxth	r2, r4
 8002410:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002414:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002418:	4854      	ldr	r0, [pc, #336]	; (800256c <DioIrqHndlr+0xc18>)
 800241a:	f004 f8ac 	bl	8006576 <HAL_UART_Transmit>
 800241e:	4603      	mov	r3, r0
 8002420:	2b00      	cmp	r3, #0
 8002422:	d00a      	beq.n	800243a <DioIrqHndlr+0xae6>
									sizeof(main_gs_cmd), 2000) == HAL_OK
									|| HAL_UART_Transmit(&hlpuart1, main_gs_cmd,
 8002424:	b2a2      	uxth	r2, r4
 8002426:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800242a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800242e:	4850      	ldr	r0, [pc, #320]	; (8002570 <DioIrqHndlr+0xc1c>)
 8002430:	f004 f8a1 	bl	8006576 <HAL_UART_Transmit>
 8002434:	4603      	mov	r3, r0
 8002436:	2b00      	cmp	r3, #0
 8002438:	d03c      	beq.n	80024b4 <DioIrqHndlr+0xb60>
											sizeof(main_gs_cmd), 2000)) {

								for (int i = 0; i < gs_cmd_len; i++) {
 800243a:	2300      	movs	r3, #0
 800243c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002440:	e00e      	b.n	8002460 <DioIrqHndlr+0xb0c>
									myDebug("%02x ", main_gs_cmd[i]);
 8002442:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8002446:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800244a:	4413      	add	r3, r2
 800244c:	781b      	ldrb	r3, [r3, #0]
 800244e:	4619      	mov	r1, r3
 8002450:	4848      	ldr	r0, [pc, #288]	; (8002574 <DioIrqHndlr+0xc20>)
 8002452:	f7fe f993 	bl	800077c <myDebug>
								for (int i = 0; i < gs_cmd_len; i++) {
 8002456:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800245a:	3301      	adds	r3, #1
 800245c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002460:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002464:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002468:	429a      	cmp	r2, r3
 800246a:	dbea      	blt.n	8002442 <DioIrqHndlr+0xaee>
								}
								myDebug("\r\n");
 800246c:	4842      	ldr	r0, [pc, #264]	; (8002578 <DioIrqHndlr+0xc24>)
 800246e:	f7fe f985 	bl	800077c <myDebug>

								memset(main_gs_cmd, '\0', sizeof(main_gs_cmd));
 8002472:	4623      	mov	r3, r4
 8002474:	461a      	mov	r2, r3
 8002476:	2100      	movs	r1, #0
 8002478:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 800247c:	f009 fab6 	bl	800b9ec <memset>
								memset(rx_buffer, '\0', sizeof(rx_buffer));
 8002480:	2269      	movs	r2, #105	; 0x69
 8002482:	2100      	movs	r1, #0
 8002484:	483d      	ldr	r0, [pc, #244]	; (800257c <DioIrqHndlr+0xc28>)
 8002486:	f009 fab1 	bl	800b9ec <memset>
								memset(temp_check_buff, '\0',
										sizeof(temp_check_buff));
 800248a:	4643      	mov	r3, r8
								memset(temp_check_buff, '\0',
 800248c:	461a      	mov	r2, r3
 800248e:	2100      	movs	r1, #0
 8002490:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8002494:	f009 faaa 	bl	800b9ec <memset>
								memset(crc_buff, '\0', sizeof(crc_buff));
 8002498:	462b      	mov	r3, r5
 800249a:	461a      	mov	r2, r3
 800249c:	2100      	movs	r1, #0
 800249e:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 80024a2:	f009 faa3 	bl	800b9ec <memset>
								memset(gs_cmd_buff, '\0', sizeof(gs_cmd_buff));
 80024a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80024aa:	2264      	movs	r2, #100	; 0x64
 80024ac:	2100      	movs	r1, #0
 80024ae:	4618      	mov	r0, r3
 80024b0:	f009 fa9c 	bl	800b9ec <memset>
							}

							OBC_SUCCESS_DATA_RX_FLAG = 1;
 80024b4:	4b36      	ldr	r3, [pc, #216]	; (8002590 <DioIrqHndlr+0xc3c>)
 80024b6:	2201      	movs	r2, #1
 80024b8:	601a      	str	r2, [r3, #0]
 80024ba:	e146      	b.n	800274a <DioIrqHndlr+0xdf6>

						} else if (main_gs_cmd[18] == 0xDF
 80024bc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80024c0:	7c9b      	ldrb	r3, [r3, #18]
 80024c2:	2bdf      	cmp	r3, #223	; 0xdf
 80024c4:	f040 80b1 	bne.w	800262a <DioIrqHndlr+0xcd6>
								&& main_gs_cmd[19] == 0xAB
 80024c8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80024cc:	7cdb      	ldrb	r3, [r3, #19]
 80024ce:	2bab      	cmp	r3, #171	; 0xab
 80024d0:	f040 80ab 	bne.w	800262a <DioIrqHndlr+0xcd6>
								&& main_gs_cmd[20] == 0xD1) {
 80024d4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80024d8:	7d1b      	ldrb	r3, [r3, #20]
 80024da:	2bd1      	cmp	r3, #209	; 0xd1
 80024dc:	f040 80a5 	bne.w	800262a <DioIrqHndlr+0xcd6>

							BEACON_COUNT = 0;
 80024e0:	4b2d      	ldr	r3, [pc, #180]	; (8002598 <DioIrqHndlr+0xc44>)
 80024e2:	2200      	movs	r2, #0
 80024e4:	601a      	str	r2, [r3, #0]
							OBC_SUCCESS_DATA_RX_FLAG = 0;
 80024e6:	4b2a      	ldr	r3, [pc, #168]	; (8002590 <DioIrqHndlr+0xc3c>)
 80024e8:	2200      	movs	r2, #0
 80024ea:	601a      	str	r2, [r3, #0]
							DIGIPEATER_STATUS = 1;
 80024ec:	4b29      	ldr	r3, [pc, #164]	; (8002594 <DioIrqHndlr+0xc40>)
 80024ee:	2201      	movs	r2, #1
 80024f0:	601a      	str	r2, [r3, #0]
							DIGIPEATER_RX_FLAG = 1;
 80024f2:	4b2d      	ldr	r3, [pc, #180]	; (80025a8 <DioIrqHndlr+0xc54>)
 80024f4:	2201      	movs	r2, #1
 80024f6:	601a      	str	r2, [r3, #0]

							myDebug("\n-------> Digipeater MODE ON\n\n");
 80024f8:	482c      	ldr	r0, [pc, #176]	; (80025ac <DioIrqHndlr+0xc58>)
 80024fa:	f7fe f93f 	bl	800077c <myDebug>

							OBC_UART_RX[0] = 0x53;	//header
 80024fe:	4b22      	ldr	r3, [pc, #136]	; (8002588 <DioIrqHndlr+0xc34>)
 8002500:	2253      	movs	r2, #83	; 0x53
 8002502:	701a      	strb	r2, [r3, #0]
							OBC_UART_RX[1] = 0xac;	//packet_ type
 8002504:	4b20      	ldr	r3, [pc, #128]	; (8002588 <DioIrqHndlr+0xc34>)
 8002506:	22ac      	movs	r2, #172	; 0xac
 8002508:	705a      	strb	r2, [r3, #1]
							OBC_UART_RX[2] = 0x04;	//length of info
 800250a:	4b1f      	ldr	r3, [pc, #124]	; (8002588 <DioIrqHndlr+0xc34>)
 800250c:	2204      	movs	r2, #4
 800250e:	709a      	strb	r2, [r3, #2]
							OBC_UART_RX[3] = 0x02;	//mcu_no
 8002510:	4b1d      	ldr	r3, [pc, #116]	; (8002588 <DioIrqHndlr+0xc34>)
 8002512:	2202      	movs	r2, #2
 8002514:	70da      	strb	r2, [r3, #3]
							OBC_UART_RX[4] = 0x01;	//Digipeater ON
 8002516:	4b1c      	ldr	r3, [pc, #112]	; (8002588 <DioIrqHndlr+0xc34>)
 8002518:	2201      	movs	r2, #1
 800251a:	711a      	strb	r2, [r3, #4]
							OBC_UART_RX[5] = 0xdd;	//Digipeater prefix
 800251c:	4b1a      	ldr	r3, [pc, #104]	; (8002588 <DioIrqHndlr+0xc34>)
 800251e:	22dd      	movs	r2, #221	; 0xdd
 8002520:	715a      	strb	r2, [r3, #5]
							obc_ilen = OBC_UART_RX[2];
 8002522:	4b19      	ldr	r3, [pc, #100]	; (8002588 <DioIrqHndlr+0xc34>)
 8002524:	789a      	ldrb	r2, [r3, #2]
 8002526:	4b19      	ldr	r3, [pc, #100]	; (800258c <DioIrqHndlr+0xc38>)
 8002528:	701a      	strb	r2, [r3, #0]

							myDebug("\nCommand sent to OBC, Length: %d\r\n",
 800252a:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 800252e:	481d      	ldr	r0, [pc, #116]	; (80025a4 <DioIrqHndlr+0xc50>)
 8002530:	f7fe f924 	bl	800077c <myDebug>
									gs_cmd_len);

							if (HAL_UART_Transmit(&huart2, main_gs_cmd,
 8002534:	b2a2      	uxth	r2, r4
 8002536:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800253a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800253e:	480b      	ldr	r0, [pc, #44]	; (800256c <DioIrqHndlr+0xc18>)
 8002540:	f004 f819 	bl	8006576 <HAL_UART_Transmit>
 8002544:	4603      	mov	r3, r0
 8002546:	2b00      	cmp	r3, #0
 8002548:	d00a      	beq.n	8002560 <DioIrqHndlr+0xc0c>
									sizeof(main_gs_cmd), 2000) == HAL_OK
									|| HAL_UART_Transmit(&hlpuart1, main_gs_cmd,
 800254a:	b2a2      	uxth	r2, r4
 800254c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002550:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002554:	4806      	ldr	r0, [pc, #24]	; (8002570 <DioIrqHndlr+0xc1c>)
 8002556:	f004 f80e 	bl	8006576 <HAL_UART_Transmit>
 800255a:	4603      	mov	r3, r0
 800255c:	2b00      	cmp	r3, #0
 800255e:	d060      	beq.n	8002622 <DioIrqHndlr+0xcce>
											sizeof(main_gs_cmd), 2000)) {

								for (int i = 0; i < gs_cmd_len; i++) {
 8002560:	2300      	movs	r3, #0
 8002562:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8002566:	e032      	b.n	80025ce <DioIrqHndlr+0xc7a>
 8002568:	0800c914 	.word	0x0800c914
 800256c:	200003a4 	.word	0x200003a4
 8002570:	2000027c 	.word	0x2000027c
 8002574:	0800c510 	.word	0x0800c510
 8002578:	0800c518 	.word	0x0800c518
 800257c:	20000700 	.word	0x20000700
 8002580:	0800c944 	.word	0x0800c944
 8002584:	0800c890 	.word	0x0800c890
 8002588:	2000076c 	.word	0x2000076c
 800258c:	2000076a 	.word	0x2000076a
 8002590:	200007c4 	.word	0x200007c4
 8002594:	20000900 	.word	0x20000900
 8002598:	20000004 	.word	0x20000004
 800259c:	20000908 	.word	0x20000908
 80025a0:	0800c8b4 	.word	0x0800c8b4
 80025a4:	0800c8d4 	.word	0x0800c8d4
 80025a8:	2000090c 	.word	0x2000090c
 80025ac:	0800c96c 	.word	0x0800c96c
									myDebug("%02x ", main_gs_cmd[i]);
 80025b0:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80025b4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80025b8:	4413      	add	r3, r2
 80025ba:	781b      	ldrb	r3, [r3, #0]
 80025bc:	4619      	mov	r1, r3
 80025be:	4882      	ldr	r0, [pc, #520]	; (80027c8 <DioIrqHndlr+0xe74>)
 80025c0:	f7fe f8dc 	bl	800077c <myDebug>
								for (int i = 0; i < gs_cmd_len; i++) {
 80025c4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80025c8:	3301      	adds	r3, #1
 80025ca:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80025ce:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80025d2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80025d6:	429a      	cmp	r2, r3
 80025d8:	dbea      	blt.n	80025b0 <DioIrqHndlr+0xc5c>
								}

								myDebug("\r\n");
 80025da:	487c      	ldr	r0, [pc, #496]	; (80027cc <DioIrqHndlr+0xe78>)
 80025dc:	f7fe f8ce 	bl	800077c <myDebug>

								memset(main_gs_cmd, '\0', sizeof(main_gs_cmd));
 80025e0:	4623      	mov	r3, r4
 80025e2:	461a      	mov	r2, r3
 80025e4:	2100      	movs	r1, #0
 80025e6:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 80025ea:	f009 f9ff 	bl	800b9ec <memset>
								memset(rx_buffer, '\0', sizeof(rx_buffer));
 80025ee:	2269      	movs	r2, #105	; 0x69
 80025f0:	2100      	movs	r1, #0
 80025f2:	4877      	ldr	r0, [pc, #476]	; (80027d0 <DioIrqHndlr+0xe7c>)
 80025f4:	f009 f9fa 	bl	800b9ec <memset>
								memset(temp_check_buff, '\0',
										sizeof(temp_check_buff));
 80025f8:	4643      	mov	r3, r8
								memset(temp_check_buff, '\0',
 80025fa:	461a      	mov	r2, r3
 80025fc:	2100      	movs	r1, #0
 80025fe:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8002602:	f009 f9f3 	bl	800b9ec <memset>
								memset(crc_buff, '\0', sizeof(crc_buff));
 8002606:	462b      	mov	r3, r5
 8002608:	461a      	mov	r2, r3
 800260a:	2100      	movs	r1, #0
 800260c:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8002610:	f009 f9ec 	bl	800b9ec <memset>
								memset(gs_cmd_buff, '\0', sizeof(gs_cmd_buff));
 8002614:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002618:	2264      	movs	r2, #100	; 0x64
 800261a:	2100      	movs	r1, #0
 800261c:	4618      	mov	r0, r3
 800261e:	f009 f9e5 	bl	800b9ec <memset>
							}

							OBC_SUCCESS_DATA_RX_FLAG = 1;
 8002622:	4b6c      	ldr	r3, [pc, #432]	; (80027d4 <DioIrqHndlr+0xe80>)
 8002624:	2201      	movs	r2, #1
 8002626:	601a      	str	r2, [r3, #0]
 8002628:	e08f      	b.n	800274a <DioIrqHndlr+0xdf6>

						} else if (main_gs_cmd[18] == 0x53
 800262a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800262e:	7c9b      	ldrb	r3, [r3, #18]
 8002630:	2b53      	cmp	r3, #83	; 0x53
 8002632:	d12d      	bne.n	8002690 <DioIrqHndlr+0xd3c>
								&& main_gs_cmd[19] == 0x02
 8002634:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002638:	7cdb      	ldrb	r3, [r3, #19]
 800263a:	2b02      	cmp	r3, #2
 800263c:	d128      	bne.n	8002690 <DioIrqHndlr+0xd3c>
								&& main_gs_cmd[20] == 0x53) { // Digipeater Packet
 800263e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002642:	7d1b      	ldrb	r3, [r3, #20]
 8002644:	2b53      	cmp	r3, #83	; 0x53
 8002646:	d123      	bne.n	8002690 <DioIrqHndlr+0xd3c>

							myDebug("\n********GS Command failed: 0x%x\r\n");
 8002648:	4863      	ldr	r0, [pc, #396]	; (80027d8 <DioIrqHndlr+0xe84>)
 800264a:	f7fe f897 	bl	800077c <myDebug>

							OBC_UART_RX[0] = 0x53;	//header
 800264e:	4b63      	ldr	r3, [pc, #396]	; (80027dc <DioIrqHndlr+0xe88>)
 8002650:	2253      	movs	r2, #83	; 0x53
 8002652:	701a      	strb	r2, [r3, #0]
							OBC_UART_RX[1] = 0xac;	//packet_ type
 8002654:	4b61      	ldr	r3, [pc, #388]	; (80027dc <DioIrqHndlr+0xe88>)
 8002656:	22ac      	movs	r2, #172	; 0xac
 8002658:	705a      	strb	r2, [r3, #1]
							OBC_UART_RX[2] = 0x04;	//length of info
 800265a:	4b60      	ldr	r3, [pc, #384]	; (80027dc <DioIrqHndlr+0xe88>)
 800265c:	2204      	movs	r2, #4
 800265e:	709a      	strb	r2, [r3, #2]
							OBC_UART_RX[3] = 0x02;	//mcu_no
 8002660:	4b5e      	ldr	r3, [pc, #376]	; (80027dc <DioIrqHndlr+0xe88>)
 8002662:	2202      	movs	r2, #2
 8002664:	70da      	strb	r2, [r3, #3]
							OBC_UART_RX[4] = 0xfc;	//false command
 8002666:	4b5d      	ldr	r3, [pc, #372]	; (80027dc <DioIrqHndlr+0xe88>)
 8002668:	22fc      	movs	r2, #252	; 0xfc
 800266a:	711a      	strb	r2, [r3, #4]
							OBC_UART_RX[5] = 0xee;	//error prefix
 800266c:	4b5b      	ldr	r3, [pc, #364]	; (80027dc <DioIrqHndlr+0xe88>)
 800266e:	22ee      	movs	r2, #238	; 0xee
 8002670:	715a      	strb	r2, [r3, #5]
							obc_ilen = OBC_UART_RX[2];
 8002672:	4b5a      	ldr	r3, [pc, #360]	; (80027dc <DioIrqHndlr+0xe88>)
 8002674:	789a      	ldrb	r2, [r3, #2]
 8002676:	4b5a      	ldr	r3, [pc, #360]	; (80027e0 <DioIrqHndlr+0xe8c>)
 8002678:	701a      	strb	r2, [r3, #0]

							OBC_SUCCESS_DATA_RX_FLAG = 1;
 800267a:	4b56      	ldr	r3, [pc, #344]	; (80027d4 <DioIrqHndlr+0xe80>)
 800267c:	2201      	movs	r2, #1
 800267e:	601a      	str	r2, [r3, #0]

							memset(main_gs_cmd, '\0', sizeof(main_gs_cmd));
 8002680:	4623      	mov	r3, r4
 8002682:	461a      	mov	r2, r3
 8002684:	2100      	movs	r1, #0
 8002686:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 800268a:	f009 f9af 	bl	800b9ec <memset>
 800268e:	e05c      	b.n	800274a <DioIrqHndlr+0xdf6>

						} else {
							myDebug("\nCommand sent to OBC, Length: %d\r\n",
 8002690:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8002694:	4853      	ldr	r0, [pc, #332]	; (80027e4 <DioIrqHndlr+0xe90>)
 8002696:	f7fe f871 	bl	800077c <myDebug>
									gs_cmd_len);

							if (HAL_UART_Transmit(&huart2, main_gs_cmd,
 800269a:	b2a2      	uxth	r2, r4
 800269c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80026a0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80026a4:	4850      	ldr	r0, [pc, #320]	; (80027e8 <DioIrqHndlr+0xe94>)
 80026a6:	f003 ff66 	bl	8006576 <HAL_UART_Transmit>
 80026aa:	4603      	mov	r3, r0
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d00a      	beq.n	80026c6 <DioIrqHndlr+0xd72>
									sizeof(main_gs_cmd), 2000) == HAL_OK
									|| HAL_UART_Transmit(&hlpuart1, main_gs_cmd,
 80026b0:	b2a2      	uxth	r2, r4
 80026b2:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80026b6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80026ba:	484c      	ldr	r0, [pc, #304]	; (80027ec <DioIrqHndlr+0xe98>)
 80026bc:	f003 ff5b 	bl	8006576 <HAL_UART_Transmit>
 80026c0:	4603      	mov	r3, r0
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d041      	beq.n	800274a <DioIrqHndlr+0xdf6>
											sizeof(main_gs_cmd), 2000)) {

								for (int i = 0; i < gs_cmd_len; i++) {
 80026c6:	2300      	movs	r3, #0
 80026c8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80026cc:	e00e      	b.n	80026ec <DioIrqHndlr+0xd98>
									myDebug("%02x ", main_gs_cmd[i]);
 80026ce:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80026d2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80026d6:	4413      	add	r3, r2
 80026d8:	781b      	ldrb	r3, [r3, #0]
 80026da:	4619      	mov	r1, r3
 80026dc:	483a      	ldr	r0, [pc, #232]	; (80027c8 <DioIrqHndlr+0xe74>)
 80026de:	f7fe f84d 	bl	800077c <myDebug>
								for (int i = 0; i < gs_cmd_len; i++) {
 80026e2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80026e6:	3301      	adds	r3, #1
 80026e8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80026ec:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80026f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80026f4:	429a      	cmp	r2, r3
 80026f6:	dbea      	blt.n	80026ce <DioIrqHndlr+0xd7a>
								}

								myDebug("\r\n");
 80026f8:	4834      	ldr	r0, [pc, #208]	; (80027cc <DioIrqHndlr+0xe78>)
 80026fa:	f7fe f83f 	bl	800077c <myDebug>

								memset(main_gs_cmd, '\0', sizeof(main_gs_cmd));
 80026fe:	4623      	mov	r3, r4
 8002700:	461a      	mov	r2, r3
 8002702:	2100      	movs	r1, #0
 8002704:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8002708:	f009 f970 	bl	800b9ec <memset>
								memset(rx_buffer, '\0', sizeof(rx_buffer));
 800270c:	2269      	movs	r2, #105	; 0x69
 800270e:	2100      	movs	r1, #0
 8002710:	482f      	ldr	r0, [pc, #188]	; (80027d0 <DioIrqHndlr+0xe7c>)
 8002712:	f009 f96b 	bl	800b9ec <memset>
								memset(temp_check_buff, '\0',
										sizeof(temp_check_buff));
 8002716:	4643      	mov	r3, r8
								memset(temp_check_buff, '\0',
 8002718:	461a      	mov	r2, r3
 800271a:	2100      	movs	r1, #0
 800271c:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8002720:	f009 f964 	bl	800b9ec <memset>
								memset(crc_buff, '\0', sizeof(crc_buff));
 8002724:	462b      	mov	r3, r5
 8002726:	461a      	mov	r2, r3
 8002728:	2100      	movs	r1, #0
 800272a:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 800272e:	f009 f95d 	bl	800b9ec <memset>
								memset(gs_cmd_buff, '\0', sizeof(gs_cmd_buff));
 8002732:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002736:	2264      	movs	r2, #100	; 0x64
 8002738:	2100      	movs	r1, #0
 800273a:	4618      	mov	r0, r3
 800273c:	f009 f956 	bl	800b9ec <memset>

								myDebug("\n\n_____OBC__RECEIVER_____\r\n");
 8002740:	482b      	ldr	r0, [pc, #172]	; (80027f0 <DioIrqHndlr+0xe9c>)
 8002742:	f7fe f81b 	bl	800077c <myDebug>
 8002746:	e000      	b.n	800274a <DioIrqHndlr+0xdf6>
							if (HAL_UART_Transmit(&huart2, main_gs_cmd,
 8002748:	bf00      	nop
 800274a:	46b5      	mov	sp, r6
			if (calc_crc[0] == msb_crc && calc_crc[1] == lsb_crc) {
 800274c:	e01b      	b.n	8002786 <DioIrqHndlr+0xe32>

						}
					}
				}
			} else {
				myDebug("\n********GS Command checksum incorrect: 0x%x\r\n");
 800274e:	4829      	ldr	r0, [pc, #164]	; (80027f4 <DioIrqHndlr+0xea0>)
 8002750:	f7fe f814 	bl	800077c <myDebug>

				OBC_UART_RX[0] = 0x53;	//header
 8002754:	4b21      	ldr	r3, [pc, #132]	; (80027dc <DioIrqHndlr+0xe88>)
 8002756:	2253      	movs	r2, #83	; 0x53
 8002758:	701a      	strb	r2, [r3, #0]
				OBC_UART_RX[1] = 0xac;	//packet_ type
 800275a:	4b20      	ldr	r3, [pc, #128]	; (80027dc <DioIrqHndlr+0xe88>)
 800275c:	22ac      	movs	r2, #172	; 0xac
 800275e:	705a      	strb	r2, [r3, #1]
				OBC_UART_RX[2] = 0x04;	//length of info
 8002760:	4b1e      	ldr	r3, [pc, #120]	; (80027dc <DioIrqHndlr+0xe88>)
 8002762:	2204      	movs	r2, #4
 8002764:	709a      	strb	r2, [r3, #2]
				OBC_UART_RX[3] = 0x02;	//mcu_no
 8002766:	4b1d      	ldr	r3, [pc, #116]	; (80027dc <DioIrqHndlr+0xe88>)
 8002768:	2202      	movs	r2, #2
 800276a:	70da      	strb	r2, [r3, #3]
				OBC_UART_RX[4] = 0xcc;	//checksum_error
 800276c:	4b1b      	ldr	r3, [pc, #108]	; (80027dc <DioIrqHndlr+0xe88>)
 800276e:	22cc      	movs	r2, #204	; 0xcc
 8002770:	711a      	strb	r2, [r3, #4]
				OBC_UART_RX[5] = 0xee;	//error prefix
 8002772:	4b1a      	ldr	r3, [pc, #104]	; (80027dc <DioIrqHndlr+0xe88>)
 8002774:	22ee      	movs	r2, #238	; 0xee
 8002776:	715a      	strb	r2, [r3, #5]
				obc_ilen = OBC_UART_RX[2];
 8002778:	4b18      	ldr	r3, [pc, #96]	; (80027dc <DioIrqHndlr+0xe88>)
 800277a:	789a      	ldrb	r2, [r3, #2]
 800277c:	4b18      	ldr	r3, [pc, #96]	; (80027e0 <DioIrqHndlr+0xe8c>)
 800277e:	701a      	strb	r2, [r3, #0]

				OBC_SUCCESS_DATA_RX_FLAG = 1;
 8002780:	4b14      	ldr	r3, [pc, #80]	; (80027d4 <DioIrqHndlr+0xe80>)
 8002782:	2201      	movs	r2, #1
 8002784:	601a      	str	r2, [r3, #0]
 8002786:	46cd      	mov	sp, r9
			obc_ilen = OBC_UART_RX[2];

			OBC_SUCCESS_DATA_RX_FLAG = 1;
		}

		SUBGRF_SetRfFrequency(FREQ_435_MHZ);
 8002788:	481b      	ldr	r0, [pc, #108]	; (80027f8 <DioIrqHndlr+0xea4>)
 800278a:	f007 fefd 	bl	800a588 <SUBGRF_SetRfFrequency>
		SUBGRF_SetSwitch(RFO_LP, RFSWITCH_RX); /*Set RF switch*/
 800278e:	2100      	movs	r1, #0
 8002790:	2001      	movs	r0, #1
 8002792:	f008 fb41 	bl	800ae18 <SUBGRF_SetSwitch>
		SUBGRF_SetRxBoosted(0xFFFFFF);
 8002796:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800279a:	f007 fd21 	bl	800a1e0 <SUBGRF_SetRxBoosted>

		HAL_UART_Receive_DMA(&huart2, OBC_UART_RX, obc_plen);
 800279e:	4b17      	ldr	r3, [pc, #92]	; (80027fc <DioIrqHndlr+0xea8>)
 80027a0:	781b      	ldrb	r3, [r3, #0]
 80027a2:	b29b      	uxth	r3, r3
 80027a4:	461a      	mov	r2, r3
 80027a6:	490d      	ldr	r1, [pc, #52]	; (80027dc <DioIrqHndlr+0xe88>)
 80027a8:	480f      	ldr	r0, [pc, #60]	; (80027e8 <DioIrqHndlr+0xe94>)
 80027aa:	f004 f82f 	bl	800680c <HAL_UART_Receive_DMA>

		HAL_UART_Receive_DMA(&hlpuart1, OBC_UART_RX, obc_plen);
 80027ae:	4b13      	ldr	r3, [pc, #76]	; (80027fc <DioIrqHndlr+0xea8>)
 80027b0:	781b      	ldrb	r3, [r3, #0]
 80027b2:	b29b      	uxth	r3, r3
 80027b4:	461a      	mov	r2, r3
 80027b6:	4909      	ldr	r1, [pc, #36]	; (80027dc <DioIrqHndlr+0xe88>)
 80027b8:	480c      	ldr	r0, [pc, #48]	; (80027ec <DioIrqHndlr+0xe98>)
 80027ba:	f004 f827 	bl	800680c <HAL_UART_Receive_DMA>

	}

}
 80027be:	bf00      	nop
 80027c0:	37ec      	adds	r7, #236	; 0xec
 80027c2:	46bd      	mov	sp, r7
 80027c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80027c8:	0800c510 	.word	0x0800c510
 80027cc:	0800c518 	.word	0x0800c518
 80027d0:	20000700 	.word	0x20000700
 80027d4:	200007c4 	.word	0x200007c4
 80027d8:	0800c890 	.word	0x0800c890
 80027dc:	2000076c 	.word	0x2000076c
 80027e0:	2000076a 	.word	0x2000076a
 80027e4:	0800c8d4 	.word	0x0800c8d4
 80027e8:	200003a4 	.word	0x200003a4
 80027ec:	2000027c 	.word	0x2000027c
 80027f0:	0800c8f8 	.word	0x0800c8f8
 80027f4:	0800c98c 	.word	0x0800c98c
 80027f8:	19f25968 	.word	0x19f25968
 80027fc:	20000001 	.word	0x20000001

08002800 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002800:	b480      	push	{r7}
 8002802:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002804:	b672      	cpsid	i
}
 8002806:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002808:	e7fe      	b.n	8002808 <Error_Handler+0x8>
	...

0800280c <WAIT_FOR_HANDSHAKE>:
#define ACK_LENGTH	(7)

extern uint8_t OBC_HANDSHAKE_FLAG;
uint8_t MainCMDHs[ACK_LENGTH];

void WAIT_FOR_HANDSHAKE() {
 800280c:	b580      	push	{r7, lr}
 800280e:	b086      	sub	sp, #24
 8002810:	af00      	add	r7, sp, #0

	memset(MainCMDHs, '\0', ACK_LENGTH);
 8002812:	2207      	movs	r2, #7
 8002814:	2100      	movs	r1, #0
 8002816:	486c      	ldr	r0, [pc, #432]	; (80029c8 <WAIT_FOR_HANDSHAKE+0x1bc>)
 8002818:	f009 f8e8 	bl	800b9ec <memset>
	OBC_HANDSHAKE_FLAG = 0;
 800281c:	4b6b      	ldr	r3, [pc, #428]	; (80029cc <WAIT_FOR_HANDSHAKE+0x1c0>)
 800281e:	2200      	movs	r2, #0
 8002820:	701a      	strb	r2, [r3, #0]
	if (HAL_UART_Receive(&huart2, MainCMDHs, ACK_LENGTH, 7000) == HAL_OK
 8002822:	f641 3358 	movw	r3, #7000	; 0x1b58
 8002826:	2207      	movs	r2, #7
 8002828:	4967      	ldr	r1, [pc, #412]	; (80029c8 <WAIT_FOR_HANDSHAKE+0x1bc>)
 800282a:	4869      	ldr	r0, [pc, #420]	; (80029d0 <WAIT_FOR_HANDSHAKE+0x1c4>)
 800282c:	f003 ff29 	bl	8006682 <HAL_UART_Receive>
 8002830:	4603      	mov	r3, r0
 8002832:	2b00      	cmp	r3, #0
 8002834:	d00a      	beq.n	800284c <WAIT_FOR_HANDSHAKE+0x40>
			|| HAL_UART_Receive(&hlpuart1, MainCMDHs, ACK_LENGTH, 7000)
 8002836:	f641 3358 	movw	r3, #7000	; 0x1b58
 800283a:	2207      	movs	r2, #7
 800283c:	4962      	ldr	r1, [pc, #392]	; (80029c8 <WAIT_FOR_HANDSHAKE+0x1bc>)
 800283e:	4865      	ldr	r0, [pc, #404]	; (80029d4 <WAIT_FOR_HANDSHAKE+0x1c8>)
 8002840:	f003 ff1f 	bl	8006682 <HAL_UART_Receive>
 8002844:	4603      	mov	r3, r0
 8002846:	2b00      	cmp	r3, #0
 8002848:	f040 80aa 	bne.w	80029a0 <WAIT_FOR_HANDSHAKE+0x194>
					== HAL_OK) {
		myDebug("--> Handshake command received from OBC: 0x%x\r\n");
 800284c:	4862      	ldr	r0, [pc, #392]	; (80029d8 <WAIT_FOR_HANDSHAKE+0x1cc>)
 800284e:	f7fd ff95 	bl	800077c <myDebug>
		for (int i = 0; i < (ACK_LENGTH); i++) {
 8002852:	2300      	movs	r3, #0
 8002854:	617b      	str	r3, [r7, #20]
 8002856:	e00a      	b.n	800286e <WAIT_FOR_HANDSHAKE+0x62>
			myDebug("%02x ", MainCMDHs[i]);
 8002858:	4a5b      	ldr	r2, [pc, #364]	; (80029c8 <WAIT_FOR_HANDSHAKE+0x1bc>)
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	4413      	add	r3, r2
 800285e:	781b      	ldrb	r3, [r3, #0]
 8002860:	4619      	mov	r1, r3
 8002862:	485e      	ldr	r0, [pc, #376]	; (80029dc <WAIT_FOR_HANDSHAKE+0x1d0>)
 8002864:	f7fd ff8a 	bl	800077c <myDebug>
		for (int i = 0; i < (ACK_LENGTH); i++) {
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	3301      	adds	r3, #1
 800286c:	617b      	str	r3, [r7, #20]
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	2b06      	cmp	r3, #6
 8002872:	ddf1      	ble.n	8002858 <WAIT_FOR_HANDSHAKE+0x4c>
		}
		myDebug("\n");
 8002874:	485a      	ldr	r0, [pc, #360]	; (80029e0 <WAIT_FOR_HANDSHAKE+0x1d4>)
 8002876:	f7fd ff81 	bl	800077c <myDebug>

		uint8_t header = 0x00;
 800287a:	2300      	movs	r3, #0
 800287c:	71fb      	strb	r3, [r7, #7]

		if (MainCMDHs[0] == header) {
 800287e:	4b52      	ldr	r3, [pc, #328]	; (80029c8 <WAIT_FOR_HANDSHAKE+0x1bc>)
 8002880:	781b      	ldrb	r3, [r3, #0]
 8002882:	79fa      	ldrb	r2, [r7, #7]
 8002884:	429a      	cmp	r2, r3
 8002886:	d111      	bne.n	80028ac <WAIT_FOR_HANDSHAKE+0xa0>

			for (int loop1 = 0; loop1 < sizeof(MainCMDHs); loop1++) {
 8002888:	2300      	movs	r3, #0
 800288a:	613b      	str	r3, [r7, #16]
 800288c:	e00b      	b.n	80028a6 <WAIT_FOR_HANDSHAKE+0x9a>
				MainCMDHs[loop1] = MainCMDHs[loop1 + 1];
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	3301      	adds	r3, #1
 8002892:	4a4d      	ldr	r2, [pc, #308]	; (80029c8 <WAIT_FOR_HANDSHAKE+0x1bc>)
 8002894:	5cd1      	ldrb	r1, [r2, r3]
 8002896:	4a4c      	ldr	r2, [pc, #304]	; (80029c8 <WAIT_FOR_HANDSHAKE+0x1bc>)
 8002898:	693b      	ldr	r3, [r7, #16]
 800289a:	4413      	add	r3, r2
 800289c:	460a      	mov	r2, r1
 800289e:	701a      	strb	r2, [r3, #0]
			for (int loop1 = 0; loop1 < sizeof(MainCMDHs); loop1++) {
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	3301      	adds	r3, #1
 80028a4:	613b      	str	r3, [r7, #16]
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	2b06      	cmp	r3, #6
 80028aa:	d9f0      	bls.n	800288e <WAIT_FOR_HANDSHAKE+0x82>
			}
		}

		if (MainCMDHs[0] == ACK_HEAD && MainCMDHs[5] == ACK_TAIL) {
 80028ac:	4b46      	ldr	r3, [pc, #280]	; (80029c8 <WAIT_FOR_HANDSHAKE+0x1bc>)
 80028ae:	781b      	ldrb	r3, [r3, #0]
 80028b0:	2b53      	cmp	r3, #83	; 0x53
 80028b2:	d13a      	bne.n	800292a <WAIT_FOR_HANDSHAKE+0x11e>
 80028b4:	4b44      	ldr	r3, [pc, #272]	; (80029c8 <WAIT_FOR_HANDSHAKE+0x1bc>)
 80028b6:	795b      	ldrb	r3, [r3, #5]
 80028b8:	2b7e      	cmp	r3, #126	; 0x7e
 80028ba:	d136      	bne.n	800292a <WAIT_FOR_HANDSHAKE+0x11e>
			myDebug("--> Command Acknowledged successful!\n");
 80028bc:	4849      	ldr	r0, [pc, #292]	; (80029e4 <WAIT_FOR_HANDSHAKE+0x1d8>)
 80028be:	f7fd ff5d 	bl	800077c <myDebug>
			if (HAL_UART_Transmit(&huart2, MainCMDHs, ACK_LENGTH, 2000)
 80028c2:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80028c6:	2207      	movs	r2, #7
 80028c8:	493f      	ldr	r1, [pc, #252]	; (80029c8 <WAIT_FOR_HANDSHAKE+0x1bc>)
 80028ca:	4841      	ldr	r0, [pc, #260]	; (80029d0 <WAIT_FOR_HANDSHAKE+0x1c4>)
 80028cc:	f003 fe53 	bl	8006576 <HAL_UART_Transmit>
 80028d0:	4603      	mov	r3, r0
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d009      	beq.n	80028ea <WAIT_FOR_HANDSHAKE+0xde>
					== HAL_OK
					|| HAL_UART_Transmit(&hlpuart1, MainCMDHs, ACK_LENGTH, 2000)
 80028d6:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80028da:	2207      	movs	r2, #7
 80028dc:	493a      	ldr	r1, [pc, #232]	; (80029c8 <WAIT_FOR_HANDSHAKE+0x1bc>)
 80028de:	483d      	ldr	r0, [pc, #244]	; (80029d4 <WAIT_FOR_HANDSHAKE+0x1c8>)
 80028e0:	f003 fe49 	bl	8006576 <HAL_UART_Transmit>
 80028e4:	4603      	mov	r3, r0
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d158      	bne.n	800299c <WAIT_FOR_HANDSHAKE+0x190>
							== HAL_OK) {
				myDebug("--> Handshake ACK, re-transmit to OBC: \n");
 80028ea:	483f      	ldr	r0, [pc, #252]	; (80029e8 <WAIT_FOR_HANDSHAKE+0x1dc>)
 80028ec:	f7fd ff46 	bl	800077c <myDebug>
				for (int i = 0; i < (ACK_LENGTH); i++) {
 80028f0:	2300      	movs	r3, #0
 80028f2:	60fb      	str	r3, [r7, #12]
 80028f4:	e00a      	b.n	800290c <WAIT_FOR_HANDSHAKE+0x100>
					myDebug("%02x ", MainCMDHs[i]);
 80028f6:	4a34      	ldr	r2, [pc, #208]	; (80029c8 <WAIT_FOR_HANDSHAKE+0x1bc>)
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	4413      	add	r3, r2
 80028fc:	781b      	ldrb	r3, [r3, #0]
 80028fe:	4619      	mov	r1, r3
 8002900:	4836      	ldr	r0, [pc, #216]	; (80029dc <WAIT_FOR_HANDSHAKE+0x1d0>)
 8002902:	f7fd ff3b 	bl	800077c <myDebug>
				for (int i = 0; i < (ACK_LENGTH); i++) {
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	3301      	adds	r3, #1
 800290a:	60fb      	str	r3, [r7, #12]
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	2b06      	cmp	r3, #6
 8002910:	ddf1      	ble.n	80028f6 <WAIT_FOR_HANDSHAKE+0xea>
				}
				myDebug("\n");
 8002912:	4833      	ldr	r0, [pc, #204]	; (80029e0 <WAIT_FOR_HANDSHAKE+0x1d4>)
 8002914:	f7fd ff32 	bl	800077c <myDebug>
				OBC_HANDSHAKE_FLAG = 1;
 8002918:	4b2c      	ldr	r3, [pc, #176]	; (80029cc <WAIT_FOR_HANDSHAKE+0x1c0>)
 800291a:	2201      	movs	r2, #1
 800291c:	701a      	strb	r2, [r3, #0]
				memset(MainCMDHs, '\0', ACK_LENGTH);
 800291e:	2207      	movs	r2, #7
 8002920:	2100      	movs	r1, #0
 8002922:	4829      	ldr	r0, [pc, #164]	; (80029c8 <WAIT_FOR_HANDSHAKE+0x1bc>)
 8002924:	f009 f862 	bl	800b9ec <memset>
			if (HAL_UART_Transmit(&huart2, MainCMDHs, ACK_LENGTH, 2000)
 8002928:	e038      	b.n	800299c <WAIT_FOR_HANDSHAKE+0x190>
			}
		} else {
			myDebug("*** Unknown Handshake command received!\n");
 800292a:	4830      	ldr	r0, [pc, #192]	; (80029ec <WAIT_FOR_HANDSHAKE+0x1e0>)
 800292c:	f7fd ff26 	bl	800077c <myDebug>
			if (HAL_UART_Transmit(&huart2, MainCMDHs, ACK_LENGTH, 2000)
 8002930:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002934:	2207      	movs	r2, #7
 8002936:	4924      	ldr	r1, [pc, #144]	; (80029c8 <WAIT_FOR_HANDSHAKE+0x1bc>)
 8002938:	4825      	ldr	r0, [pc, #148]	; (80029d0 <WAIT_FOR_HANDSHAKE+0x1c4>)
 800293a:	f003 fe1c 	bl	8006576 <HAL_UART_Transmit>
 800293e:	4603      	mov	r3, r0
 8002940:	2b00      	cmp	r3, #0
 8002942:	d009      	beq.n	8002958 <WAIT_FOR_HANDSHAKE+0x14c>
					== HAL_OK
					|| HAL_UART_Transmit(&hlpuart1, MainCMDHs, ACK_LENGTH, 7000)
 8002944:	f641 3358 	movw	r3, #7000	; 0x1b58
 8002948:	2207      	movs	r2, #7
 800294a:	491f      	ldr	r1, [pc, #124]	; (80029c8 <WAIT_FOR_HANDSHAKE+0x1bc>)
 800294c:	4821      	ldr	r0, [pc, #132]	; (80029d4 <WAIT_FOR_HANDSHAKE+0x1c8>)
 800294e:	f003 fe12 	bl	8006576 <HAL_UART_Transmit>
 8002952:	4603      	mov	r3, r0
 8002954:	2b00      	cmp	r3, #0
 8002956:	d131      	bne.n	80029bc <WAIT_FOR_HANDSHAKE+0x1b0>
							== HAL_OK) {
				myDebug("--> Unknown Handshake ACK, re-transmit to OBC.\n");
 8002958:	4825      	ldr	r0, [pc, #148]	; (80029f0 <WAIT_FOR_HANDSHAKE+0x1e4>)
 800295a:	f7fd ff0f 	bl	800077c <myDebug>
				for (int i = 0; i < (ACK_LENGTH); i++) {
 800295e:	2300      	movs	r3, #0
 8002960:	60bb      	str	r3, [r7, #8]
 8002962:	e00a      	b.n	800297a <WAIT_FOR_HANDSHAKE+0x16e>
					myDebug("%02x ", MainCMDHs[i]);
 8002964:	4a18      	ldr	r2, [pc, #96]	; (80029c8 <WAIT_FOR_HANDSHAKE+0x1bc>)
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	4413      	add	r3, r2
 800296a:	781b      	ldrb	r3, [r3, #0]
 800296c:	4619      	mov	r1, r3
 800296e:	481b      	ldr	r0, [pc, #108]	; (80029dc <WAIT_FOR_HANDSHAKE+0x1d0>)
 8002970:	f7fd ff04 	bl	800077c <myDebug>
				for (int i = 0; i < (ACK_LENGTH); i++) {
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	3301      	adds	r3, #1
 8002978:	60bb      	str	r3, [r7, #8]
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	2b06      	cmp	r3, #6
 800297e:	ddf1      	ble.n	8002964 <WAIT_FOR_HANDSHAKE+0x158>
				}
				myDebug("\n");
 8002980:	4817      	ldr	r0, [pc, #92]	; (80029e0 <WAIT_FOR_HANDSHAKE+0x1d4>)
 8002982:	f7fd fefb 	bl	800077c <myDebug>
				memset(MainCMDHs, '\0', ACK_LENGTH);
 8002986:	2207      	movs	r2, #7
 8002988:	2100      	movs	r1, #0
 800298a:	480f      	ldr	r0, [pc, #60]	; (80029c8 <WAIT_FOR_HANDSHAKE+0x1bc>)
 800298c:	f009 f82e 	bl	800b9ec <memset>
				OBC_HANDSHAKE_FLAG = 0;
 8002990:	4b0e      	ldr	r3, [pc, #56]	; (80029cc <WAIT_FOR_HANDSHAKE+0x1c0>)
 8002992:	2200      	movs	r2, #0
 8002994:	701a      	strb	r2, [r3, #0]
				WAIT_FOR_HANDSHAKE();
 8002996:	f7ff ff39 	bl	800280c <WAIT_FOR_HANDSHAKE>
					== HAL_OK) {
 800299a:	e00f      	b.n	80029bc <WAIT_FOR_HANDSHAKE+0x1b0>
			if (HAL_UART_Transmit(&huart2, MainCMDHs, ACK_LENGTH, 2000)
 800299c:	bf00      	nop
					== HAL_OK) {
 800299e:	e00d      	b.n	80029bc <WAIT_FOR_HANDSHAKE+0x1b0>
			}
		}
	} else {
		OBC_HANDSHAKE_FLAG = 0;
 80029a0:	4b0a      	ldr	r3, [pc, #40]	; (80029cc <WAIT_FOR_HANDSHAKE+0x1c0>)
 80029a2:	2200      	movs	r2, #0
 80029a4:	701a      	strb	r2, [r3, #0]
		myDebug("*** Handshake Command receive failed, try again!\n");
 80029a6:	4813      	ldr	r0, [pc, #76]	; (80029f4 <WAIT_FOR_HANDSHAKE+0x1e8>)
 80029a8:	f7fd fee8 	bl	800077c <myDebug>
		memset(MainCMDHs, '\0', ACK_LENGTH);
 80029ac:	2207      	movs	r2, #7
 80029ae:	2100      	movs	r1, #0
 80029b0:	4805      	ldr	r0, [pc, #20]	; (80029c8 <WAIT_FOR_HANDSHAKE+0x1bc>)
 80029b2:	f009 f81b 	bl	800b9ec <memset>
		WAIT_FOR_HANDSHAKE();
 80029b6:	f7ff ff29 	bl	800280c <WAIT_FOR_HANDSHAKE>
	}
}
 80029ba:	e000      	b.n	80029be <WAIT_FOR_HANDSHAKE+0x1b2>
					== HAL_OK) {
 80029bc:	bf00      	nop
}
 80029be:	bf00      	nop
 80029c0:	3718      	adds	r7, #24
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop
 80029c8:	20000914 	.word	0x20000914
 80029cc:	200008fc 	.word	0x200008fc
 80029d0:	200003a4 	.word	0x200003a4
 80029d4:	2000027c 	.word	0x2000027c
 80029d8:	0800c9bc 	.word	0x0800c9bc
 80029dc:	0800c9ec 	.word	0x0800c9ec
 80029e0:	0800c9f4 	.word	0x0800c9f4
 80029e4:	0800c9f8 	.word	0x0800c9f8
 80029e8:	0800ca20 	.word	0x0800ca20
 80029ec:	0800ca4c 	.word	0x0800ca4c
 80029f0:	0800ca78 	.word	0x0800ca78
 80029f4:	0800caa8 	.word	0x0800caa8

080029f8 <LL_AHB2_GRP1_EnableClock>:
{
 80029f8:	b480      	push	{r7}
 80029fa:	b085      	sub	sp, #20
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002a00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a04:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002a06:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002a10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a14:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	4013      	ands	r3, r2
 8002a1a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
}
 8002a1e:	bf00      	nop
 8002a20:	3714      	adds	r7, #20
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bc80      	pop	{r7}
 8002a26:	4770      	bx	lr

08002a28 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_DAC
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b085      	sub	sp, #20
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002a30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a34:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002a36:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002a40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a44:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	4013      	ands	r3, r2
 8002a4a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
}
 8002a4e:	bf00      	nop
 8002a50:	3714      	adds	r7, #20
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bc80      	pop	{r7}
 8002a56:	4770      	bx	lr

08002a58 <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_LPTIM3

  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b085      	sub	sp, #20
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8002a60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a64:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002a66:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	65cb      	str	r3, [r1, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8002a70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a74:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	4013      	ands	r3, r2
 8002a7a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
}
 8002a7e:	bf00      	nop
 8002a80:	3714      	adds	r7, #20
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bc80      	pop	{r7}
 8002a86:	4770      	bx	lr

08002a88 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b085      	sub	sp, #20
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8002a90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a94:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002a96:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002aa0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002aa4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002aac:	68fb      	ldr	r3, [r7, #12]
}
 8002aae:	bf00      	nop
 8002ab0:	3714      	adds	r7, #20
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bc80      	pop	{r7}
 8002ab6:	4770      	bx	lr

08002ab8 <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b085      	sub	sp, #20
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 8002ac0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ac4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002ac6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	4313      	orrs	r3, r2
 8002ace:	664b      	str	r3, [r1, #100]	; 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 8002ad0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ad4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	4013      	ands	r3, r2
 8002ada:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002adc:	68fb      	ldr	r3, [r7, #12]
}
 8002ade:	bf00      	nop
 8002ae0:	3714      	adds	r7, #20
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bc80      	pop	{r7}
 8002ae6:	4770      	bx	lr

08002ae8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002aec:	bf00      	nop
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bc80      	pop	{r7}
 8002af2:	4770      	bx	lr

08002af4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b096      	sub	sp, #88	; 0x58
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002afc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002b00:	2200      	movs	r2, #0
 8002b02:	601a      	str	r2, [r3, #0]
 8002b04:	605a      	str	r2, [r3, #4]
 8002b06:	609a      	str	r2, [r3, #8]
 8002b08:	60da      	str	r2, [r3, #12]
 8002b0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002b0c:	f107 030c 	add.w	r3, r7, #12
 8002b10:	2238      	movs	r2, #56	; 0x38
 8002b12:	2100      	movs	r1, #0
 8002b14:	4618      	mov	r0, r3
 8002b16:	f008 ff69 	bl	800b9ec <memset>
  if(huart->Instance==LPUART1)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a99      	ldr	r2, [pc, #612]	; (8002d84 <HAL_UART_MspInit+0x290>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	f040 8092 	bne.w	8002c4a <HAL_UART_MspInit+0x156>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8002b26:	2320      	movs	r3, #32
 8002b28:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002b2e:	f107 030c 	add.w	r3, r7, #12
 8002b32:	4618      	mov	r0, r3
 8002b34:	f002 fc1c 	bl	8005370 <HAL_RCCEx_PeriphCLKConfig>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d001      	beq.n	8002b42 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002b3e:	f7ff fe5f 	bl	8002800 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8002b42:	2001      	movs	r0, #1
 8002b44:	f7ff ff88 	bl	8002a58 <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b48:	2004      	movs	r0, #4
 8002b4a:	f7ff ff55 	bl	80029f8 <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PC1     ------> LPUART1_TX
    PC0     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 8002b4e:	2303      	movs	r3, #3
 8002b50:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b52:	2302      	movs	r3, #2
 8002b54:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b56:	2300      	movs	r3, #0
 8002b58:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8002b5e:	2308      	movs	r3, #8
 8002b60:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b62:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002b66:	4619      	mov	r1, r3
 8002b68:	4887      	ldr	r0, [pc, #540]	; (8002d88 <HAL_UART_MspInit+0x294>)
 8002b6a:	f001 f875 	bl	8003c58 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel1;
 8002b6e:	4b87      	ldr	r3, [pc, #540]	; (8002d8c <HAL_UART_MspInit+0x298>)
 8002b70:	4a87      	ldr	r2, [pc, #540]	; (8002d90 <HAL_UART_MspInit+0x29c>)
 8002b72:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8002b74:	4b85      	ldr	r3, [pc, #532]	; (8002d8c <HAL_UART_MspInit+0x298>)
 8002b76:	2215      	movs	r2, #21
 8002b78:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002b7a:	4b84      	ldr	r3, [pc, #528]	; (8002d8c <HAL_UART_MspInit+0x298>)
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b80:	4b82      	ldr	r3, [pc, #520]	; (8002d8c <HAL_UART_MspInit+0x298>)
 8002b82:	2200      	movs	r2, #0
 8002b84:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002b86:	4b81      	ldr	r3, [pc, #516]	; (8002d8c <HAL_UART_MspInit+0x298>)
 8002b88:	2280      	movs	r2, #128	; 0x80
 8002b8a:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002b8c:	4b7f      	ldr	r3, [pc, #508]	; (8002d8c <HAL_UART_MspInit+0x298>)
 8002b8e:	2200      	movs	r2, #0
 8002b90:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002b92:	4b7e      	ldr	r3, [pc, #504]	; (8002d8c <HAL_UART_MspInit+0x298>)
 8002b94:	2200      	movs	r2, #0
 8002b96:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_NORMAL;
 8002b98:	4b7c      	ldr	r3, [pc, #496]	; (8002d8c <HAL_UART_MspInit+0x298>)
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002b9e:	4b7b      	ldr	r3, [pc, #492]	; (8002d8c <HAL_UART_MspInit+0x298>)
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8002ba4:	4879      	ldr	r0, [pc, #484]	; (8002d8c <HAL_UART_MspInit+0x298>)
 8002ba6:	f000 fcd5 	bl	8003554 <HAL_DMA_Init>
 8002baa:	4603      	mov	r3, r0
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d001      	beq.n	8002bb4 <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 8002bb0:	f7ff fe26 	bl	8002800 <Error_Handler>
    }

    if (HAL_DMA_ConfigChannelAttributes(&hdma_lpuart1_rx, DMA_CHANNEL_NPRIV) != HAL_OK)
 8002bb4:	2110      	movs	r1, #16
 8002bb6:	4875      	ldr	r0, [pc, #468]	; (8002d8c <HAL_UART_MspInit+0x298>)
 8002bb8:	f000 ff76 	bl	8003aa8 <HAL_DMA_ConfigChannelAttributes>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d001      	beq.n	8002bc6 <HAL_UART_MspInit+0xd2>
    {
      Error_Handler();
 8002bc2:	f7ff fe1d 	bl	8002800 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_lpuart1_rx);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	4a70      	ldr	r2, [pc, #448]	; (8002d8c <HAL_UART_MspInit+0x298>)
 8002bca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8002bce:	4a6f      	ldr	r2, [pc, #444]	; (8002d8c <HAL_UART_MspInit+0x298>)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel2;
 8002bd4:	4b6f      	ldr	r3, [pc, #444]	; (8002d94 <HAL_UART_MspInit+0x2a0>)
 8002bd6:	4a70      	ldr	r2, [pc, #448]	; (8002d98 <HAL_UART_MspInit+0x2a4>)
 8002bd8:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 8002bda:	4b6e      	ldr	r3, [pc, #440]	; (8002d94 <HAL_UART_MspInit+0x2a0>)
 8002bdc:	2216      	movs	r2, #22
 8002bde:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002be0:	4b6c      	ldr	r3, [pc, #432]	; (8002d94 <HAL_UART_MspInit+0x2a0>)
 8002be2:	2210      	movs	r2, #16
 8002be4:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002be6:	4b6b      	ldr	r3, [pc, #428]	; (8002d94 <HAL_UART_MspInit+0x2a0>)
 8002be8:	2200      	movs	r2, #0
 8002bea:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002bec:	4b69      	ldr	r3, [pc, #420]	; (8002d94 <HAL_UART_MspInit+0x2a0>)
 8002bee:	2280      	movs	r2, #128	; 0x80
 8002bf0:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002bf2:	4b68      	ldr	r3, [pc, #416]	; (8002d94 <HAL_UART_MspInit+0x2a0>)
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002bf8:	4b66      	ldr	r3, [pc, #408]	; (8002d94 <HAL_UART_MspInit+0x2a0>)
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8002bfe:	4b65      	ldr	r3, [pc, #404]	; (8002d94 <HAL_UART_MspInit+0x2a0>)
 8002c00:	2200      	movs	r2, #0
 8002c02:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002c04:	4b63      	ldr	r3, [pc, #396]	; (8002d94 <HAL_UART_MspInit+0x2a0>)
 8002c06:	2200      	movs	r2, #0
 8002c08:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8002c0a:	4862      	ldr	r0, [pc, #392]	; (8002d94 <HAL_UART_MspInit+0x2a0>)
 8002c0c:	f000 fca2 	bl	8003554 <HAL_DMA_Init>
 8002c10:	4603      	mov	r3, r0
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d001      	beq.n	8002c1a <HAL_UART_MspInit+0x126>
    {
      Error_Handler();
 8002c16:	f7ff fdf3 	bl	8002800 <Error_Handler>
    }

    if (HAL_DMA_ConfigChannelAttributes(&hdma_lpuart1_tx, DMA_CHANNEL_NPRIV) != HAL_OK)
 8002c1a:	2110      	movs	r1, #16
 8002c1c:	485d      	ldr	r0, [pc, #372]	; (8002d94 <HAL_UART_MspInit+0x2a0>)
 8002c1e:	f000 ff43 	bl	8003aa8 <HAL_DMA_ConfigChannelAttributes>
 8002c22:	4603      	mov	r3, r0
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d001      	beq.n	8002c2c <HAL_UART_MspInit+0x138>
    {
      Error_Handler();
 8002c28:	f7ff fdea 	bl	8002800 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_lpuart1_tx);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	4a59      	ldr	r2, [pc, #356]	; (8002d94 <HAL_UART_MspInit+0x2a0>)
 8002c30:	67da      	str	r2, [r3, #124]	; 0x7c
 8002c32:	4a58      	ldr	r2, [pc, #352]	; (8002d94 <HAL_UART_MspInit+0x2a0>)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8002c38:	2200      	movs	r2, #0
 8002c3a:	2100      	movs	r1, #0
 8002c3c:	2026      	movs	r0, #38	; 0x26
 8002c3e:	f000 fc54 	bl	80034ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8002c42:	2026      	movs	r0, #38	; 0x26
 8002c44:	f000 fc6b 	bl	800351e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002c48:	e14c      	b.n	8002ee4 <HAL_UART_MspInit+0x3f0>
  else if(huart->Instance==USART1)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a53      	ldr	r2, [pc, #332]	; (8002d9c <HAL_UART_MspInit+0x2a8>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	f040 80ad 	bne.w	8002db0 <HAL_UART_MspInit+0x2bc>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002c56:	2301      	movs	r3, #1
 8002c58:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002c5a:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8002c5e:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c60:	f107 030c 	add.w	r3, r7, #12
 8002c64:	4618      	mov	r0, r3
 8002c66:	f002 fb83 	bl	8005370 <HAL_RCCEx_PeriphCLKConfig>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d001      	beq.n	8002c74 <HAL_UART_MspInit+0x180>
      Error_Handler();
 8002c70:	f7ff fdc6 	bl	8002800 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002c74:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002c78:	f7ff ff06 	bl	8002a88 <LL_APB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c7c:	2001      	movs	r0, #1
 8002c7e:	f7ff febb 	bl	80029f8 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 8002c82:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002c86:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c88:	2302      	movs	r3, #2
 8002c8a:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c90:	2300      	movs	r3, #0
 8002c92:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002c94:	2307      	movs	r3, #7
 8002c96:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c98:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002c9c:	4619      	mov	r1, r3
 8002c9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ca2:	f000 ffd9 	bl	8003c58 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel3;
 8002ca6:	4b3e      	ldr	r3, [pc, #248]	; (8002da0 <HAL_UART_MspInit+0x2ac>)
 8002ca8:	4a3e      	ldr	r2, [pc, #248]	; (8002da4 <HAL_UART_MspInit+0x2b0>)
 8002caa:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8002cac:	4b3c      	ldr	r3, [pc, #240]	; (8002da0 <HAL_UART_MspInit+0x2ac>)
 8002cae:	2211      	movs	r2, #17
 8002cb0:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002cb2:	4b3b      	ldr	r3, [pc, #236]	; (8002da0 <HAL_UART_MspInit+0x2ac>)
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002cb8:	4b39      	ldr	r3, [pc, #228]	; (8002da0 <HAL_UART_MspInit+0x2ac>)
 8002cba:	2200      	movs	r2, #0
 8002cbc:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002cbe:	4b38      	ldr	r3, [pc, #224]	; (8002da0 <HAL_UART_MspInit+0x2ac>)
 8002cc0:	2280      	movs	r2, #128	; 0x80
 8002cc2:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002cc4:	4b36      	ldr	r3, [pc, #216]	; (8002da0 <HAL_UART_MspInit+0x2ac>)
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002cca:	4b35      	ldr	r3, [pc, #212]	; (8002da0 <HAL_UART_MspInit+0x2ac>)
 8002ccc:	2200      	movs	r2, #0
 8002cce:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8002cd0:	4b33      	ldr	r3, [pc, #204]	; (8002da0 <HAL_UART_MspInit+0x2ac>)
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002cd6:	4b32      	ldr	r3, [pc, #200]	; (8002da0 <HAL_UART_MspInit+0x2ac>)
 8002cd8:	2200      	movs	r2, #0
 8002cda:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002cdc:	4830      	ldr	r0, [pc, #192]	; (8002da0 <HAL_UART_MspInit+0x2ac>)
 8002cde:	f000 fc39 	bl	8003554 <HAL_DMA_Init>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d001      	beq.n	8002cec <HAL_UART_MspInit+0x1f8>
      Error_Handler();
 8002ce8:	f7ff fd8a 	bl	8002800 <Error_Handler>
    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart1_rx, DMA_CHANNEL_NPRIV) != HAL_OK)
 8002cec:	2110      	movs	r1, #16
 8002cee:	482c      	ldr	r0, [pc, #176]	; (8002da0 <HAL_UART_MspInit+0x2ac>)
 8002cf0:	f000 feda 	bl	8003aa8 <HAL_DMA_ConfigChannelAttributes>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d001      	beq.n	8002cfe <HAL_UART_MspInit+0x20a>
      Error_Handler();
 8002cfa:	f7ff fd81 	bl	8002800 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	4a27      	ldr	r2, [pc, #156]	; (8002da0 <HAL_UART_MspInit+0x2ac>)
 8002d02:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8002d06:	4a26      	ldr	r2, [pc, #152]	; (8002da0 <HAL_UART_MspInit+0x2ac>)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6293      	str	r3, [r2, #40]	; 0x28
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8002d0c:	4b26      	ldr	r3, [pc, #152]	; (8002da8 <HAL_UART_MspInit+0x2b4>)
 8002d0e:	4a27      	ldr	r2, [pc, #156]	; (8002dac <HAL_UART_MspInit+0x2b8>)
 8002d10:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8002d12:	4b25      	ldr	r3, [pc, #148]	; (8002da8 <HAL_UART_MspInit+0x2b4>)
 8002d14:	2212      	movs	r2, #18
 8002d16:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002d18:	4b23      	ldr	r3, [pc, #140]	; (8002da8 <HAL_UART_MspInit+0x2b4>)
 8002d1a:	2210      	movs	r2, #16
 8002d1c:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d1e:	4b22      	ldr	r3, [pc, #136]	; (8002da8 <HAL_UART_MspInit+0x2b4>)
 8002d20:	2200      	movs	r2, #0
 8002d22:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002d24:	4b20      	ldr	r3, [pc, #128]	; (8002da8 <HAL_UART_MspInit+0x2b4>)
 8002d26:	2280      	movs	r2, #128	; 0x80
 8002d28:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002d2a:	4b1f      	ldr	r3, [pc, #124]	; (8002da8 <HAL_UART_MspInit+0x2b4>)
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002d30:	4b1d      	ldr	r3, [pc, #116]	; (8002da8 <HAL_UART_MspInit+0x2b4>)
 8002d32:	2200      	movs	r2, #0
 8002d34:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002d36:	4b1c      	ldr	r3, [pc, #112]	; (8002da8 <HAL_UART_MspInit+0x2b4>)
 8002d38:	2200      	movs	r2, #0
 8002d3a:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002d3c:	4b1a      	ldr	r3, [pc, #104]	; (8002da8 <HAL_UART_MspInit+0x2b4>)
 8002d3e:	2200      	movs	r2, #0
 8002d40:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002d42:	4819      	ldr	r0, [pc, #100]	; (8002da8 <HAL_UART_MspInit+0x2b4>)
 8002d44:	f000 fc06 	bl	8003554 <HAL_DMA_Init>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d001      	beq.n	8002d52 <HAL_UART_MspInit+0x25e>
      Error_Handler();
 8002d4e:	f7ff fd57 	bl	8002800 <Error_Handler>
    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart1_tx, DMA_CHANNEL_NPRIV) != HAL_OK)
 8002d52:	2110      	movs	r1, #16
 8002d54:	4814      	ldr	r0, [pc, #80]	; (8002da8 <HAL_UART_MspInit+0x2b4>)
 8002d56:	f000 fea7 	bl	8003aa8 <HAL_DMA_ConfigChannelAttributes>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d001      	beq.n	8002d64 <HAL_UART_MspInit+0x270>
      Error_Handler();
 8002d60:	f7ff fd4e 	bl	8002800 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	4a10      	ldr	r2, [pc, #64]	; (8002da8 <HAL_UART_MspInit+0x2b4>)
 8002d68:	67da      	str	r2, [r3, #124]	; 0x7c
 8002d6a:	4a0f      	ldr	r2, [pc, #60]	; (8002da8 <HAL_UART_MspInit+0x2b4>)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002d70:	2200      	movs	r2, #0
 8002d72:	2100      	movs	r1, #0
 8002d74:	2024      	movs	r0, #36	; 0x24
 8002d76:	f000 fbb8 	bl	80034ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002d7a:	2024      	movs	r0, #36	; 0x24
 8002d7c:	f000 fbcf 	bl	800351e <HAL_NVIC_EnableIRQ>
}
 8002d80:	e0b0      	b.n	8002ee4 <HAL_UART_MspInit+0x3f0>
 8002d82:	bf00      	nop
 8002d84:	40008000 	.word	0x40008000
 8002d88:	48000800 	.word	0x48000800
 8002d8c:	20000438 	.word	0x20000438
 8002d90:	40020008 	.word	0x40020008
 8002d94:	20000498 	.word	0x20000498
 8002d98:	4002001c 	.word	0x4002001c
 8002d9c:	40013800 	.word	0x40013800
 8002da0:	200004f8 	.word	0x200004f8
 8002da4:	40020030 	.word	0x40020030
 8002da8:	20000558 	.word	0x20000558
 8002dac:	40020044 	.word	0x40020044
  else if(huart->Instance==USART2)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a4d      	ldr	r2, [pc, #308]	; (8002eec <HAL_UART_MspInit+0x3f8>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	f040 8094 	bne.w	8002ee4 <HAL_UART_MspInit+0x3f0>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002dbc:	2302      	movs	r3, #2
 8002dbe:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002dc0:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8002dc4:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002dc6:	f107 030c 	add.w	r3, r7, #12
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f002 fad0 	bl	8005370 <HAL_RCCEx_PeriphCLKConfig>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d001      	beq.n	8002dda <HAL_UART_MspInit+0x2e6>
      Error_Handler();
 8002dd6:	f7ff fd13 	bl	8002800 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002dda:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002dde:	f7ff fe23 	bl	8002a28 <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002de2:	2001      	movs	r0, #1
 8002de4:	f7ff fe08 	bl	80029f8 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = T_VCP_RX_Pin|T_VCP_RXA2_Pin;
 8002de8:	230c      	movs	r3, #12
 8002dea:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dec:	2302      	movs	r3, #2
 8002dee:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002df0:	2300      	movs	r3, #0
 8002df2:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002df4:	2300      	movs	r3, #0
 8002df6:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002df8:	2307      	movs	r3, #7
 8002dfa:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dfc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002e00:	4619      	mov	r1, r3
 8002e02:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e06:	f000 ff27 	bl	8003c58 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel5;
 8002e0a:	4b39      	ldr	r3, [pc, #228]	; (8002ef0 <HAL_UART_MspInit+0x3fc>)
 8002e0c:	4a39      	ldr	r2, [pc, #228]	; (8002ef4 <HAL_UART_MspInit+0x400>)
 8002e0e:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8002e10:	4b37      	ldr	r3, [pc, #220]	; (8002ef0 <HAL_UART_MspInit+0x3fc>)
 8002e12:	2213      	movs	r2, #19
 8002e14:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002e16:	4b36      	ldr	r3, [pc, #216]	; (8002ef0 <HAL_UART_MspInit+0x3fc>)
 8002e18:	2200      	movs	r2, #0
 8002e1a:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e1c:	4b34      	ldr	r3, [pc, #208]	; (8002ef0 <HAL_UART_MspInit+0x3fc>)
 8002e1e:	2200      	movs	r2, #0
 8002e20:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002e22:	4b33      	ldr	r3, [pc, #204]	; (8002ef0 <HAL_UART_MspInit+0x3fc>)
 8002e24:	2280      	movs	r2, #128	; 0x80
 8002e26:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002e28:	4b31      	ldr	r3, [pc, #196]	; (8002ef0 <HAL_UART_MspInit+0x3fc>)
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002e2e:	4b30      	ldr	r3, [pc, #192]	; (8002ef0 <HAL_UART_MspInit+0x3fc>)
 8002e30:	2200      	movs	r2, #0
 8002e32:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8002e34:	4b2e      	ldr	r3, [pc, #184]	; (8002ef0 <HAL_UART_MspInit+0x3fc>)
 8002e36:	2200      	movs	r2, #0
 8002e38:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002e3a:	4b2d      	ldr	r3, [pc, #180]	; (8002ef0 <HAL_UART_MspInit+0x3fc>)
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002e40:	482b      	ldr	r0, [pc, #172]	; (8002ef0 <HAL_UART_MspInit+0x3fc>)
 8002e42:	f000 fb87 	bl	8003554 <HAL_DMA_Init>
 8002e46:	4603      	mov	r3, r0
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d001      	beq.n	8002e50 <HAL_UART_MspInit+0x35c>
      Error_Handler();
 8002e4c:	f7ff fcd8 	bl	8002800 <Error_Handler>
    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart2_rx, DMA_CHANNEL_NPRIV) != HAL_OK)
 8002e50:	2110      	movs	r1, #16
 8002e52:	4827      	ldr	r0, [pc, #156]	; (8002ef0 <HAL_UART_MspInit+0x3fc>)
 8002e54:	f000 fe28 	bl	8003aa8 <HAL_DMA_ConfigChannelAttributes>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d001      	beq.n	8002e62 <HAL_UART_MspInit+0x36e>
      Error_Handler();
 8002e5e:	f7ff fccf 	bl	8002800 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	4a22      	ldr	r2, [pc, #136]	; (8002ef0 <HAL_UART_MspInit+0x3fc>)
 8002e66:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8002e6a:	4a21      	ldr	r2, [pc, #132]	; (8002ef0 <HAL_UART_MspInit+0x3fc>)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6293      	str	r3, [r2, #40]	; 0x28
    hdma_usart2_tx.Instance = DMA1_Channel6;
 8002e70:	4b21      	ldr	r3, [pc, #132]	; (8002ef8 <HAL_UART_MspInit+0x404>)
 8002e72:	4a22      	ldr	r2, [pc, #136]	; (8002efc <HAL_UART_MspInit+0x408>)
 8002e74:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8002e76:	4b20      	ldr	r3, [pc, #128]	; (8002ef8 <HAL_UART_MspInit+0x404>)
 8002e78:	2214      	movs	r2, #20
 8002e7a:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002e7c:	4b1e      	ldr	r3, [pc, #120]	; (8002ef8 <HAL_UART_MspInit+0x404>)
 8002e7e:	2210      	movs	r2, #16
 8002e80:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e82:	4b1d      	ldr	r3, [pc, #116]	; (8002ef8 <HAL_UART_MspInit+0x404>)
 8002e84:	2200      	movs	r2, #0
 8002e86:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002e88:	4b1b      	ldr	r3, [pc, #108]	; (8002ef8 <HAL_UART_MspInit+0x404>)
 8002e8a:	2280      	movs	r2, #128	; 0x80
 8002e8c:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002e8e:	4b1a      	ldr	r3, [pc, #104]	; (8002ef8 <HAL_UART_MspInit+0x404>)
 8002e90:	2200      	movs	r2, #0
 8002e92:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002e94:	4b18      	ldr	r3, [pc, #96]	; (8002ef8 <HAL_UART_MspInit+0x404>)
 8002e96:	2200      	movs	r2, #0
 8002e98:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002e9a:	4b17      	ldr	r3, [pc, #92]	; (8002ef8 <HAL_UART_MspInit+0x404>)
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002ea0:	4b15      	ldr	r3, [pc, #84]	; (8002ef8 <HAL_UART_MspInit+0x404>)
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002ea6:	4814      	ldr	r0, [pc, #80]	; (8002ef8 <HAL_UART_MspInit+0x404>)
 8002ea8:	f000 fb54 	bl	8003554 <HAL_DMA_Init>
 8002eac:	4603      	mov	r3, r0
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d001      	beq.n	8002eb6 <HAL_UART_MspInit+0x3c2>
      Error_Handler();
 8002eb2:	f7ff fca5 	bl	8002800 <Error_Handler>
    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart2_tx, DMA_CHANNEL_NPRIV) != HAL_OK)
 8002eb6:	2110      	movs	r1, #16
 8002eb8:	480f      	ldr	r0, [pc, #60]	; (8002ef8 <HAL_UART_MspInit+0x404>)
 8002eba:	f000 fdf5 	bl	8003aa8 <HAL_DMA_ConfigChannelAttributes>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d001      	beq.n	8002ec8 <HAL_UART_MspInit+0x3d4>
      Error_Handler();
 8002ec4:	f7ff fc9c 	bl	8002800 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	4a0b      	ldr	r2, [pc, #44]	; (8002ef8 <HAL_UART_MspInit+0x404>)
 8002ecc:	67da      	str	r2, [r3, #124]	; 0x7c
 8002ece:	4a0a      	ldr	r2, [pc, #40]	; (8002ef8 <HAL_UART_MspInit+0x404>)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	2100      	movs	r1, #0
 8002ed8:	2025      	movs	r0, #37	; 0x25
 8002eda:	f000 fb06 	bl	80034ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002ede:	2025      	movs	r0, #37	; 0x25
 8002ee0:	f000 fb1d 	bl	800351e <HAL_NVIC_EnableIRQ>
}
 8002ee4:	bf00      	nop
 8002ee6:	3758      	adds	r7, #88	; 0x58
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}
 8002eec:	40004400 	.word	0x40004400
 8002ef0:	200005b8 	.word	0x200005b8
 8002ef4:	40020058 	.word	0x40020058
 8002ef8:	20000618 	.word	0x20000618
 8002efc:	4002006c 	.word	0x4002006c

08002f00 <HAL_SUBGHZ_MspInit>:
* This function configures the hardware resources used in this example
* @param hsubghz: SUBGHZ handle pointer
* @retval None
*/
void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* hsubghz)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b082      	sub	sp, #8
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 8002f08:	2001      	movs	r0, #1
 8002f0a:	f7ff fdd5 	bl	8002ab8 <LL_APB3_GRP1_EnableClock>
    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 8002f0e:	2200      	movs	r2, #0
 8002f10:	2100      	movs	r1, #0
 8002f12:	2032      	movs	r0, #50	; 0x32
 8002f14:	f000 fae9 	bl	80034ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 8002f18:	2032      	movs	r0, #50	; 0x32
 8002f1a:	f000 fb00 	bl	800351e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */

}
 8002f1e:	bf00      	nop
 8002f20:	3708      	adds	r7, #8
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}

08002f26 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002f26:	b580      	push	{r7, lr}
 8002f28:	b082      	sub	sp, #8
 8002f2a:	af00      	add	r7, sp, #0
 8002f2c:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f36:	d102      	bne.n	8002f3e <HAL_TIM_Base_MspInit+0x18>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002f38:	2001      	movs	r0, #1
 8002f3a:	f7ff fd75 	bl	8002a28 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002f3e:	bf00      	nop
 8002f40:	3708      	adds	r7, #8
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}

08002f46 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f46:	b480      	push	{r7}
 8002f48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002f4a:	e7fe      	b.n	8002f4a <NMI_Handler+0x4>

08002f4c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f50:	e7fe      	b.n	8002f50 <HardFault_Handler+0x4>

08002f52 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002f52:	b480      	push	{r7}
 8002f54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002f56:	e7fe      	b.n	8002f56 <MemManage_Handler+0x4>

08002f58 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002f5c:	e7fe      	b.n	8002f5c <BusFault_Handler+0x4>

08002f5e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002f5e:	b480      	push	{r7}
 8002f60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002f62:	e7fe      	b.n	8002f62 <UsageFault_Handler+0x4>

08002f64 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002f64:	b480      	push	{r7}
 8002f66:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002f68:	bf00      	nop
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bc80      	pop	{r7}
 8002f6e:	4770      	bx	lr

08002f70 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002f70:	b480      	push	{r7}
 8002f72:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002f74:	bf00      	nop
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bc80      	pop	{r7}
 8002f7a:	4770      	bx	lr

08002f7c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002f80:	bf00      	nop
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bc80      	pop	{r7}
 8002f86:	4770      	bx	lr

08002f88 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002f8c:	f000 f9c4 	bl	8003318 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002f90:	bf00      	nop
 8002f92:	bd80      	pop	{r7, pc}

08002f94 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 1 Interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8002f98:	4802      	ldr	r0, [pc, #8]	; (8002fa4 <DMA1_Channel1_IRQHandler+0x10>)
 8002f9a:	f000 fcbf 	bl	800391c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002f9e:	bf00      	nop
 8002fa0:	bd80      	pop	{r7, pc}
 8002fa2:	bf00      	nop
 8002fa4:	20000438 	.word	0x20000438

08002fa8 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 2 Interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8002fac:	4802      	ldr	r0, [pc, #8]	; (8002fb8 <DMA1_Channel2_IRQHandler+0x10>)
 8002fae:	f000 fcb5 	bl	800391c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8002fb2:	bf00      	nop
 8002fb4:	bd80      	pop	{r7, pc}
 8002fb6:	bf00      	nop
 8002fb8:	20000498 	.word	0x20000498

08002fbc <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 3 Interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002fc0:	4802      	ldr	r0, [pc, #8]	; (8002fcc <DMA1_Channel3_IRQHandler+0x10>)
 8002fc2:	f000 fcab 	bl	800391c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8002fc6:	bf00      	nop
 8002fc8:	bd80      	pop	{r7, pc}
 8002fca:	bf00      	nop
 8002fcc:	200004f8 	.word	0x200004f8

08002fd0 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 4 Interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002fd4:	4802      	ldr	r0, [pc, #8]	; (8002fe0 <DMA1_Channel4_IRQHandler+0x10>)
 8002fd6:	f000 fca1 	bl	800391c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8002fda:	bf00      	nop
 8002fdc:	bd80      	pop	{r7, pc}
 8002fde:	bf00      	nop
 8002fe0:	20000558 	.word	0x20000558

08002fe4 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 5 Interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002fe8:	4802      	ldr	r0, [pc, #8]	; (8002ff4 <DMA1_Channel5_IRQHandler+0x10>)
 8002fea:	f000 fc97 	bl	800391c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8002fee:	bf00      	nop
 8002ff0:	bd80      	pop	{r7, pc}
 8002ff2:	bf00      	nop
 8002ff4:	200005b8 	.word	0x200005b8

08002ff8 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 6 Interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002ffc:	4802      	ldr	r0, [pc, #8]	; (8003008 <DMA1_Channel6_IRQHandler+0x10>)
 8002ffe:	f000 fc8d 	bl	800391c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8003002:	bf00      	nop
 8003004:	bd80      	pop	{r7, pc}
 8003006:	bf00      	nop
 8003008:	20000618 	.word	0x20000618

0800300c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 Interrupt.
  */
void USART1_IRQHandler(void)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003010:	4802      	ldr	r0, [pc, #8]	; (800301c <USART1_IRQHandler+0x10>)
 8003012:	f003 fc47 	bl	80068a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003016:	bf00      	nop
 8003018:	bd80      	pop	{r7, pc}
 800301a:	bf00      	nop
 800301c:	20000310 	.word	0x20000310

08003020 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003024:	4802      	ldr	r0, [pc, #8]	; (8003030 <USART2_IRQHandler+0x10>)
 8003026:	f003 fc3d 	bl	80068a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800302a:	bf00      	nop
 800302c:	bd80      	pop	{r7, pc}
 800302e:	bf00      	nop
 8003030:	200003a4 	.word	0x200003a4

08003034 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 Interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8003038:	4802      	ldr	r0, [pc, #8]	; (8003044 <LPUART1_IRQHandler+0x10>)
 800303a:	f003 fc33 	bl	80068a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 800303e:	bf00      	nop
 8003040:	bd80      	pop	{r7, pc}
 8003042:	bf00      	nop
 8003044:	2000027c 	.word	0x2000027c

08003048 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 800304c:	4802      	ldr	r0, [pc, #8]	; (8003058 <SUBGHZ_Radio_IRQHandler+0x10>)
 800304e:	f002 fdc5 	bl	8005bdc <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 8003052:	bf00      	nop
 8003054:	bd80      	pop	{r7, pc}
 8003056:	bf00      	nop
 8003058:	20000678 	.word	0x20000678

0800305c <SystemApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SystemApp_Init(void)
{
 800305c:	b480      	push	{r7}
 800305e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SystemApp_Init_1 */

  /* USER CODE END SystemApp_Init_1 */

}
 8003060:	bf00      	nop
 8003062:	46bd      	mov	sp, r7
 8003064:	bc80      	pop	{r7}
 8003066:	4770      	bx	lr

08003068 <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b082      	sub	sp, #8
 800306c:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 800306e:	2300      	movs	r3, #0
 8003070:	607b      	str	r3, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  if (SYS_TimerInitialisedFlag == 0)
 8003072:	4b06      	ldr	r3, [pc, #24]	; (800308c <HAL_GetTick+0x24>)
 8003074:	781b      	ldrb	r3, [r3, #0]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d002      	beq.n	8003080 <HAL_GetTick+0x18>

    /* USER CODE END HAL_GetTick_EarlyCall */
  }
  else
  {
    ret = TIMER_IF_GetTimerValue();
 800307a:	f000 f892 	bl	80031a2 <TIMER_IF_GetTimerValue>
 800307e:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
  return ret;
 8003080:	687b      	ldr	r3, [r7, #4]
}
 8003082:	4618      	mov	r0, r3
 8003084:	3708      	adds	r7, #8
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}
 800308a:	bf00      	nop
 800308c:	2000091b 	.word	0x2000091b

08003090 <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b082      	sub	sp, #8
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	4618      	mov	r0, r3
 800309c:	f000 f8af 	bl	80031fe <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 80030a0:	bf00      	nop
 80030a2:	3708      	adds	r7, #8
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}

080030a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b086      	sub	sp, #24
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80030b0:	4a14      	ldr	r2, [pc, #80]	; (8003104 <_sbrk+0x5c>)
 80030b2:	4b15      	ldr	r3, [pc, #84]	; (8003108 <_sbrk+0x60>)
 80030b4:	1ad3      	subs	r3, r2, r3
 80030b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80030bc:	4b13      	ldr	r3, [pc, #76]	; (800310c <_sbrk+0x64>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d102      	bne.n	80030ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80030c4:	4b11      	ldr	r3, [pc, #68]	; (800310c <_sbrk+0x64>)
 80030c6:	4a12      	ldr	r2, [pc, #72]	; (8003110 <_sbrk+0x68>)
 80030c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80030ca:	4b10      	ldr	r3, [pc, #64]	; (800310c <_sbrk+0x64>)
 80030cc:	681a      	ldr	r2, [r3, #0]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	4413      	add	r3, r2
 80030d2:	693a      	ldr	r2, [r7, #16]
 80030d4:	429a      	cmp	r2, r3
 80030d6:	d207      	bcs.n	80030e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80030d8:	f008 fc90 	bl	800b9fc <__errno>
 80030dc:	4603      	mov	r3, r0
 80030de:	220c      	movs	r2, #12
 80030e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80030e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80030e6:	e009      	b.n	80030fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80030e8:	4b08      	ldr	r3, [pc, #32]	; (800310c <_sbrk+0x64>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80030ee:	4b07      	ldr	r3, [pc, #28]	; (800310c <_sbrk+0x64>)
 80030f0:	681a      	ldr	r2, [r3, #0]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	4413      	add	r3, r2
 80030f6:	4a05      	ldr	r2, [pc, #20]	; (800310c <_sbrk+0x64>)
 80030f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80030fa:	68fb      	ldr	r3, [r7, #12]
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	3718      	adds	r7, #24
 8003100:	46bd      	mov	sp, r7
 8003102:	bd80      	pop	{r7, pc}
 8003104:	20010000 	.word	0x20010000
 8003108:	00000400 	.word	0x00000400
 800310c:	2000091c 	.word	0x2000091c
 8003110:	20000c30 	.word	0x20000c30

08003114 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003114:	b480      	push	{r7}
 8003116:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8003118:	bf00      	nop
 800311a:	46bd      	mov	sp, r7
 800311c:	bc80      	pop	{r7}
 800311e:	4770      	bx	lr

08003120 <TIMER_IF_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
UTIL_TIMER_Status_t TIMER_IF_Init(void)
{
 8003120:	b480      	push	{r7}
 8003122:	b083      	sub	sp, #12
 8003124:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8003126:	2300      	movs	r3, #0
 8003128:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_Init */

  /* USER CODE END TIMER_IF_Init */
  return ret;
 800312a:	79fb      	ldrb	r3, [r7, #7]
}
 800312c:	4618      	mov	r0, r3
 800312e:	370c      	adds	r7, #12
 8003130:	46bd      	mov	sp, r7
 8003132:	bc80      	pop	{r7}
 8003134:	4770      	bx	lr

08003136 <TIMER_IF_StartTimer>:

UTIL_TIMER_Status_t TIMER_IF_StartTimer(uint32_t timeout)
{
 8003136:	b480      	push	{r7}
 8003138:	b085      	sub	sp, #20
 800313a:	af00      	add	r7, sp, #0
 800313c:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 800313e:	2300      	movs	r3, #0
 8003140:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN TIMER_IF_StartTimer */

  /* USER CODE END TIMER_IF_StartTimer */
  return ret;
 8003142:	7bfb      	ldrb	r3, [r7, #15]
}
 8003144:	4618      	mov	r0, r3
 8003146:	3714      	adds	r7, #20
 8003148:	46bd      	mov	sp, r7
 800314a:	bc80      	pop	{r7}
 800314c:	4770      	bx	lr

0800314e <TIMER_IF_StopTimer>:

UTIL_TIMER_Status_t TIMER_IF_StopTimer(void)
{
 800314e:	b480      	push	{r7}
 8003150:	b083      	sub	sp, #12
 8003152:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8003154:	2300      	movs	r3, #0
 8003156:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_StopTimer */

  /* USER CODE END TIMER_IF_StopTimer */
  return ret;
 8003158:	79fb      	ldrb	r3, [r7, #7]
}
 800315a:	4618      	mov	r0, r3
 800315c:	370c      	adds	r7, #12
 800315e:	46bd      	mov	sp, r7
 8003160:	bc80      	pop	{r7}
 8003162:	4770      	bx	lr

08003164 <TIMER_IF_SetTimerContext>:

uint32_t TIMER_IF_SetTimerContext(void)
{
 8003164:	b480      	push	{r7}
 8003166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_SetTimerContext */

  /* USER CODE END TIMER_IF_SetTimerContext */

  /*return time context*/
  return RtcTimerContext;
 8003168:	4b02      	ldr	r3, [pc, #8]	; (8003174 <TIMER_IF_SetTimerContext+0x10>)
 800316a:	681b      	ldr	r3, [r3, #0]
}
 800316c:	4618      	mov	r0, r3
 800316e:	46bd      	mov	sp, r7
 8003170:	bc80      	pop	{r7}
 8003172:	4770      	bx	lr
 8003174:	20000920 	.word	0x20000920

08003178 <TIMER_IF_GetTimerContext>:

uint32_t TIMER_IF_GetTimerContext(void)
{
 8003178:	b480      	push	{r7}
 800317a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_GetTimerContext */

  /* USER CODE END TIMER_IF_GetTimerContext */

  /*return time context*/
  return RtcTimerContext;
 800317c:	4b02      	ldr	r3, [pc, #8]	; (8003188 <TIMER_IF_GetTimerContext+0x10>)
 800317e:	681b      	ldr	r3, [r3, #0]
}
 8003180:	4618      	mov	r0, r3
 8003182:	46bd      	mov	sp, r7
 8003184:	bc80      	pop	{r7}
 8003186:	4770      	bx	lr
 8003188:	20000920 	.word	0x20000920

0800318c <TIMER_IF_GetTimerElapsedTime>:

uint32_t TIMER_IF_GetTimerElapsedTime(void)
{
 800318c:	b480      	push	{r7}
 800318e:	b083      	sub	sp, #12
 8003190:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8003192:	2300      	movs	r3, #0
 8003194:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime */
  return ret;
 8003196:	687b      	ldr	r3, [r7, #4]
}
 8003198:	4618      	mov	r0, r3
 800319a:	370c      	adds	r7, #12
 800319c:	46bd      	mov	sp, r7
 800319e:	bc80      	pop	{r7}
 80031a0:	4770      	bx	lr

080031a2 <TIMER_IF_GetTimerValue>:

uint32_t TIMER_IF_GetTimerValue(void)
{
 80031a2:	b480      	push	{r7}
 80031a4:	b083      	sub	sp, #12
 80031a6:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80031a8:	2300      	movs	r3, #0
 80031aa:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerValue */

  /* USER CODE END TIMER_IF_GetTimerValue */
  return ret;
 80031ac:	687b      	ldr	r3, [r7, #4]
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	370c      	adds	r7, #12
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bc80      	pop	{r7}
 80031b6:	4770      	bx	lr

080031b8 <TIMER_IF_GetMinimumTimeout>:

uint32_t TIMER_IF_GetMinimumTimeout(void)
{
 80031b8:	b480      	push	{r7}
 80031ba:	b083      	sub	sp, #12
 80031bc:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80031be:	2300      	movs	r3, #0
 80031c0:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout */

  /* USER CODE END TIMER_IF_GetMinimumTimeout */
  return ret;
 80031c2:	687b      	ldr	r3, [r7, #4]
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	370c      	adds	r7, #12
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bc80      	pop	{r7}
 80031cc:	4770      	bx	lr

080031ce <TIMER_IF_Convert_ms2Tick>:

uint32_t TIMER_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 80031ce:	b480      	push	{r7}
 80031d0:	b085      	sub	sp, #20
 80031d2:	af00      	add	r7, sp, #0
 80031d4:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 80031d6:	2300      	movs	r3, #0
 80031d8:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick */

  /* USER CODE END TIMER_IF_Convert_ms2Tick */
  return ret;
 80031da:	68fb      	ldr	r3, [r7, #12]
}
 80031dc:	4618      	mov	r0, r3
 80031de:	3714      	adds	r7, #20
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bc80      	pop	{r7}
 80031e4:	4770      	bx	lr

080031e6 <TIMER_IF_Convert_Tick2ms>:

uint32_t TIMER_IF_Convert_Tick2ms(uint32_t tick)
{
 80031e6:	b480      	push	{r7}
 80031e8:	b085      	sub	sp, #20
 80031ea:	af00      	add	r7, sp, #0
 80031ec:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 80031ee:	2300      	movs	r3, #0
 80031f0:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms */

  /* USER CODE END TIMER_IF_Convert_Tick2ms */
  return ret;
 80031f2:	68fb      	ldr	r3, [r7, #12]
}
 80031f4:	4618      	mov	r0, r3
 80031f6:	3714      	adds	r7, #20
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bc80      	pop	{r7}
 80031fc:	4770      	bx	lr

080031fe <TIMER_IF_DelayMs>:

void TIMER_IF_DelayMs(uint32_t delay)
{
 80031fe:	b480      	push	{r7}
 8003200:	b083      	sub	sp, #12
 8003202:	af00      	add	r7, sp, #0
 8003204:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_DelayMs */

  /* USER CODE END TIMER_IF_DelayMs */
}
 8003206:	bf00      	nop
 8003208:	370c      	adds	r7, #12
 800320a:	46bd      	mov	sp, r7
 800320c:	bc80      	pop	{r7}
 800320e:	4770      	bx	lr

08003210 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003210:	480d      	ldr	r0, [pc, #52]	; (8003248 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003212:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003214:	f7ff ff7e 	bl	8003114 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003218:	480c      	ldr	r0, [pc, #48]	; (800324c <LoopForever+0x6>)
  ldr r1, =_edata
 800321a:	490d      	ldr	r1, [pc, #52]	; (8003250 <LoopForever+0xa>)
  ldr r2, =_sidata
 800321c:	4a0d      	ldr	r2, [pc, #52]	; (8003254 <LoopForever+0xe>)
  movs r3, #0
 800321e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003220:	e002      	b.n	8003228 <LoopCopyDataInit>

08003222 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003222:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003224:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003226:	3304      	adds	r3, #4

08003228 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003228:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800322a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800322c:	d3f9      	bcc.n	8003222 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800322e:	4a0a      	ldr	r2, [pc, #40]	; (8003258 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003230:	4c0a      	ldr	r4, [pc, #40]	; (800325c <LoopForever+0x16>)
  movs r3, #0
 8003232:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003234:	e001      	b.n	800323a <LoopFillZerobss>

08003236 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003236:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003238:	3204      	adds	r2, #4

0800323a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800323a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800323c:	d3fb      	bcc.n	8003236 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800323e:	f008 fbe3 	bl	800ba08 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003242:	f7fd ffaf 	bl	80011a4 <main>

08003246 <LoopForever>:

LoopForever:
    b LoopForever
 8003246:	e7fe      	b.n	8003246 <LoopForever>
  ldr   r0, =_estack
 8003248:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800324c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003250:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8003254:	0800cd94 	.word	0x0800cd94
  ldr r2, =_sbss
 8003258:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 800325c:	20000c30 	.word	0x20000c30

08003260 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003260:	e7fe      	b.n	8003260 <ADC_IRQHandler>
	...

08003264 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b082      	sub	sp, #8
 8003268:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800326a:	2300      	movs	r3, #0
 800326c:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800326e:	2003      	movs	r0, #3
 8003270:	f000 f930 	bl	80034d4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003274:	f001 fe9e 	bl	8004fb4 <HAL_RCC_GetHCLKFreq>
 8003278:	4603      	mov	r3, r0
 800327a:	4a09      	ldr	r2, [pc, #36]	; (80032a0 <HAL_Init+0x3c>)
 800327c:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800327e:	2000      	movs	r0, #0
 8003280:	f000 f810 	bl	80032a4 <HAL_InitTick>
 8003284:	4603      	mov	r3, r0
 8003286:	2b00      	cmp	r3, #0
 8003288:	d002      	beq.n	8003290 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	71fb      	strb	r3, [r7, #7]
 800328e:	e001      	b.n	8003294 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003290:	f7ff fc2a 	bl	8002ae8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003294:	79fb      	ldrb	r3, [r7, #7]
}
 8003296:	4618      	mov	r0, r3
 8003298:	3708      	adds	r7, #8
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}
 800329e:	bf00      	nop
 80032a0:	2000000c 	.word	0x2000000c

080032a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b084      	sub	sp, #16
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80032ac:	2300      	movs	r3, #0
 80032ae:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80032b0:	4b17      	ldr	r3, [pc, #92]	; (8003310 <HAL_InitTick+0x6c>)
 80032b2:	781b      	ldrb	r3, [r3, #0]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d024      	beq.n	8003302 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80032b8:	f001 fe7c 	bl	8004fb4 <HAL_RCC_GetHCLKFreq>
 80032bc:	4602      	mov	r2, r0
 80032be:	4b14      	ldr	r3, [pc, #80]	; (8003310 <HAL_InitTick+0x6c>)
 80032c0:	781b      	ldrb	r3, [r3, #0]
 80032c2:	4619      	mov	r1, r3
 80032c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80032c8:	fbb3 f3f1 	udiv	r3, r3, r1
 80032cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80032d0:	4618      	mov	r0, r3
 80032d2:	f000 f932 	bl	800353a <HAL_SYSTICK_Config>
 80032d6:	4603      	mov	r3, r0
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d10f      	bne.n	80032fc <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2b0f      	cmp	r3, #15
 80032e0:	d809      	bhi.n	80032f6 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80032e2:	2200      	movs	r2, #0
 80032e4:	6879      	ldr	r1, [r7, #4]
 80032e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80032ea:	f000 f8fe 	bl	80034ea <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80032ee:	4a09      	ldr	r2, [pc, #36]	; (8003314 <HAL_InitTick+0x70>)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6013      	str	r3, [r2, #0]
 80032f4:	e007      	b.n	8003306 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	73fb      	strb	r3, [r7, #15]
 80032fa:	e004      	b.n	8003306 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 80032fc:	2301      	movs	r3, #1
 80032fe:	73fb      	strb	r3, [r7, #15]
 8003300:	e001      	b.n	8003306 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003306:	7bfb      	ldrb	r3, [r7, #15]
}
 8003308:	4618      	mov	r0, r3
 800330a:	3710      	adds	r7, #16
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}
 8003310:	20000014 	.word	0x20000014
 8003314:	20000010 	.word	0x20000010

08003318 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003318:	b480      	push	{r7}
 800331a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800331c:	4b05      	ldr	r3, [pc, #20]	; (8003334 <HAL_IncTick+0x1c>)
 800331e:	781b      	ldrb	r3, [r3, #0]
 8003320:	461a      	mov	r2, r3
 8003322:	4b05      	ldr	r3, [pc, #20]	; (8003338 <HAL_IncTick+0x20>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4413      	add	r3, r2
 8003328:	4a03      	ldr	r2, [pc, #12]	; (8003338 <HAL_IncTick+0x20>)
 800332a:	6013      	str	r3, [r2, #0]
}
 800332c:	bf00      	nop
 800332e:	46bd      	mov	sp, r7
 8003330:	bc80      	pop	{r7}
 8003332:	4770      	bx	lr
 8003334:	20000014 	.word	0x20000014
 8003338:	20000924 	.word	0x20000924

0800333c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800333c:	b480      	push	{r7}
 800333e:	b085      	sub	sp, #20
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	f003 0307 	and.w	r3, r3, #7
 800334a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800334c:	4b0c      	ldr	r3, [pc, #48]	; (8003380 <__NVIC_SetPriorityGrouping+0x44>)
 800334e:	68db      	ldr	r3, [r3, #12]
 8003350:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003352:	68ba      	ldr	r2, [r7, #8]
 8003354:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003358:	4013      	ands	r3, r2
 800335a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003364:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003368:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800336c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800336e:	4a04      	ldr	r2, [pc, #16]	; (8003380 <__NVIC_SetPriorityGrouping+0x44>)
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	60d3      	str	r3, [r2, #12]
}
 8003374:	bf00      	nop
 8003376:	3714      	adds	r7, #20
 8003378:	46bd      	mov	sp, r7
 800337a:	bc80      	pop	{r7}
 800337c:	4770      	bx	lr
 800337e:	bf00      	nop
 8003380:	e000ed00 	.word	0xe000ed00

08003384 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003384:	b480      	push	{r7}
 8003386:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003388:	4b04      	ldr	r3, [pc, #16]	; (800339c <__NVIC_GetPriorityGrouping+0x18>)
 800338a:	68db      	ldr	r3, [r3, #12]
 800338c:	0a1b      	lsrs	r3, r3, #8
 800338e:	f003 0307 	and.w	r3, r3, #7
}
 8003392:	4618      	mov	r0, r3
 8003394:	46bd      	mov	sp, r7
 8003396:	bc80      	pop	{r7}
 8003398:	4770      	bx	lr
 800339a:	bf00      	nop
 800339c:	e000ed00 	.word	0xe000ed00

080033a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b083      	sub	sp, #12
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	4603      	mov	r3, r0
 80033a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	db0b      	blt.n	80033ca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033b2:	79fb      	ldrb	r3, [r7, #7]
 80033b4:	f003 021f 	and.w	r2, r3, #31
 80033b8:	4906      	ldr	r1, [pc, #24]	; (80033d4 <__NVIC_EnableIRQ+0x34>)
 80033ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033be:	095b      	lsrs	r3, r3, #5
 80033c0:	2001      	movs	r0, #1
 80033c2:	fa00 f202 	lsl.w	r2, r0, r2
 80033c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80033ca:	bf00      	nop
 80033cc:	370c      	adds	r7, #12
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bc80      	pop	{r7}
 80033d2:	4770      	bx	lr
 80033d4:	e000e100 	.word	0xe000e100

080033d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80033d8:	b480      	push	{r7}
 80033da:	b083      	sub	sp, #12
 80033dc:	af00      	add	r7, sp, #0
 80033de:	4603      	mov	r3, r0
 80033e0:	6039      	str	r1, [r7, #0]
 80033e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	db0a      	blt.n	8003402 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	b2da      	uxtb	r2, r3
 80033f0:	490c      	ldr	r1, [pc, #48]	; (8003424 <__NVIC_SetPriority+0x4c>)
 80033f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033f6:	0112      	lsls	r2, r2, #4
 80033f8:	b2d2      	uxtb	r2, r2
 80033fa:	440b      	add	r3, r1
 80033fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003400:	e00a      	b.n	8003418 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	b2da      	uxtb	r2, r3
 8003406:	4908      	ldr	r1, [pc, #32]	; (8003428 <__NVIC_SetPriority+0x50>)
 8003408:	79fb      	ldrb	r3, [r7, #7]
 800340a:	f003 030f 	and.w	r3, r3, #15
 800340e:	3b04      	subs	r3, #4
 8003410:	0112      	lsls	r2, r2, #4
 8003412:	b2d2      	uxtb	r2, r2
 8003414:	440b      	add	r3, r1
 8003416:	761a      	strb	r2, [r3, #24]
}
 8003418:	bf00      	nop
 800341a:	370c      	adds	r7, #12
 800341c:	46bd      	mov	sp, r7
 800341e:	bc80      	pop	{r7}
 8003420:	4770      	bx	lr
 8003422:	bf00      	nop
 8003424:	e000e100 	.word	0xe000e100
 8003428:	e000ed00 	.word	0xe000ed00

0800342c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800342c:	b480      	push	{r7}
 800342e:	b089      	sub	sp, #36	; 0x24
 8003430:	af00      	add	r7, sp, #0
 8003432:	60f8      	str	r0, [r7, #12]
 8003434:	60b9      	str	r1, [r7, #8]
 8003436:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	f003 0307 	and.w	r3, r3, #7
 800343e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003440:	69fb      	ldr	r3, [r7, #28]
 8003442:	f1c3 0307 	rsb	r3, r3, #7
 8003446:	2b04      	cmp	r3, #4
 8003448:	bf28      	it	cs
 800344a:	2304      	movcs	r3, #4
 800344c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800344e:	69fb      	ldr	r3, [r7, #28]
 8003450:	3304      	adds	r3, #4
 8003452:	2b06      	cmp	r3, #6
 8003454:	d902      	bls.n	800345c <NVIC_EncodePriority+0x30>
 8003456:	69fb      	ldr	r3, [r7, #28]
 8003458:	3b03      	subs	r3, #3
 800345a:	e000      	b.n	800345e <NVIC_EncodePriority+0x32>
 800345c:	2300      	movs	r3, #0
 800345e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003460:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003464:	69bb      	ldr	r3, [r7, #24]
 8003466:	fa02 f303 	lsl.w	r3, r2, r3
 800346a:	43da      	mvns	r2, r3
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	401a      	ands	r2, r3
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003474:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	fa01 f303 	lsl.w	r3, r1, r3
 800347e:	43d9      	mvns	r1, r3
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003484:	4313      	orrs	r3, r2
         );
}
 8003486:	4618      	mov	r0, r3
 8003488:	3724      	adds	r7, #36	; 0x24
 800348a:	46bd      	mov	sp, r7
 800348c:	bc80      	pop	{r7}
 800348e:	4770      	bx	lr

08003490 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b082      	sub	sp, #8
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	3b01      	subs	r3, #1
 800349c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80034a0:	d301      	bcc.n	80034a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80034a2:	2301      	movs	r3, #1
 80034a4:	e00f      	b.n	80034c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80034a6:	4a0a      	ldr	r2, [pc, #40]	; (80034d0 <SysTick_Config+0x40>)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	3b01      	subs	r3, #1
 80034ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80034ae:	210f      	movs	r1, #15
 80034b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80034b4:	f7ff ff90 	bl	80033d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80034b8:	4b05      	ldr	r3, [pc, #20]	; (80034d0 <SysTick_Config+0x40>)
 80034ba:	2200      	movs	r2, #0
 80034bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80034be:	4b04      	ldr	r3, [pc, #16]	; (80034d0 <SysTick_Config+0x40>)
 80034c0:	2207      	movs	r2, #7
 80034c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80034c4:	2300      	movs	r3, #0
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	3708      	adds	r7, #8
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}
 80034ce:	bf00      	nop
 80034d0:	e000e010 	.word	0xe000e010

080034d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b082      	sub	sp, #8
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80034dc:	6878      	ldr	r0, [r7, #4]
 80034de:	f7ff ff2d 	bl	800333c <__NVIC_SetPriorityGrouping>
}
 80034e2:	bf00      	nop
 80034e4:	3708      	adds	r7, #8
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}

080034ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034ea:	b580      	push	{r7, lr}
 80034ec:	b086      	sub	sp, #24
 80034ee:	af00      	add	r7, sp, #0
 80034f0:	4603      	mov	r3, r0
 80034f2:	60b9      	str	r1, [r7, #8]
 80034f4:	607a      	str	r2, [r7, #4]
 80034f6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80034f8:	f7ff ff44 	bl	8003384 <__NVIC_GetPriorityGrouping>
 80034fc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80034fe:	687a      	ldr	r2, [r7, #4]
 8003500:	68b9      	ldr	r1, [r7, #8]
 8003502:	6978      	ldr	r0, [r7, #20]
 8003504:	f7ff ff92 	bl	800342c <NVIC_EncodePriority>
 8003508:	4602      	mov	r2, r0
 800350a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800350e:	4611      	mov	r1, r2
 8003510:	4618      	mov	r0, r3
 8003512:	f7ff ff61 	bl	80033d8 <__NVIC_SetPriority>
}
 8003516:	bf00      	nop
 8003518:	3718      	adds	r7, #24
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}

0800351e <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800351e:	b580      	push	{r7, lr}
 8003520:	b082      	sub	sp, #8
 8003522:	af00      	add	r7, sp, #0
 8003524:	4603      	mov	r3, r0
 8003526:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003528:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800352c:	4618      	mov	r0, r3
 800352e:	f7ff ff37 	bl	80033a0 <__NVIC_EnableIRQ>
}
 8003532:	bf00      	nop
 8003534:	3708      	adds	r7, #8
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}

0800353a <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800353a:	b580      	push	{r7, lr}
 800353c:	b082      	sub	sp, #8
 800353e:	af00      	add	r7, sp, #0
 8003540:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	f7ff ffa4 	bl	8003490 <SysTick_Config>
 8003548:	4603      	mov	r3, r0
}
 800354a:	4618      	mov	r0, r3
 800354c:	3708      	adds	r7, #8
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}
	...

08003554 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b082      	sub	sp, #8
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d101      	bne.n	8003566 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	e08e      	b.n	8003684 <HAL_DMA_Init+0x130>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	461a      	mov	r2, r3
 800356c:	4b47      	ldr	r3, [pc, #284]	; (800368c <HAL_DMA_Init+0x138>)
 800356e:	429a      	cmp	r2, r3
 8003570:	d80f      	bhi.n	8003592 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	461a      	mov	r2, r3
 8003578:	4b45      	ldr	r3, [pc, #276]	; (8003690 <HAL_DMA_Init+0x13c>)
 800357a:	4413      	add	r3, r2
 800357c:	4a45      	ldr	r2, [pc, #276]	; (8003694 <HAL_DMA_Init+0x140>)
 800357e:	fba2 2303 	umull	r2, r3, r2, r3
 8003582:	091b      	lsrs	r3, r3, #4
 8003584:	009a      	lsls	r2, r3, #2
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	4a42      	ldr	r2, [pc, #264]	; (8003698 <HAL_DMA_Init+0x144>)
 800358e:	641a      	str	r2, [r3, #64]	; 0x40
 8003590:	e00e      	b.n	80035b0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	461a      	mov	r2, r3
 8003598:	4b40      	ldr	r3, [pc, #256]	; (800369c <HAL_DMA_Init+0x148>)
 800359a:	4413      	add	r3, r2
 800359c:	4a3d      	ldr	r2, [pc, #244]	; (8003694 <HAL_DMA_Init+0x140>)
 800359e:	fba2 2303 	umull	r2, r3, r2, r3
 80035a2:	091b      	lsrs	r3, r3, #4
 80035a4:	009a      	lsls	r2, r3, #2
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	4a3c      	ldr	r2, [pc, #240]	; (80036a0 <HAL_DMA_Init+0x14c>)
 80035ae:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2202      	movs	r2, #2
 80035b4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	687a      	ldr	r2, [r7, #4]
 80035c0:	6812      	ldr	r2, [r2, #0]
 80035c2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80035c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035ca:	6013      	str	r3, [r2, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	6819      	ldr	r1, [r3, #0]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	689a      	ldr	r2, [r3, #8]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	68db      	ldr	r3, [r3, #12]
 80035da:	431a      	orrs	r2, r3
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	691b      	ldr	r3, [r3, #16]
 80035e0:	431a      	orrs	r2, r3
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	695b      	ldr	r3, [r3, #20]
 80035e6:	431a      	orrs	r2, r3
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	699b      	ldr	r3, [r3, #24]
 80035ec:	431a      	orrs	r2, r3
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	69db      	ldr	r3, [r3, #28]
 80035f2:	431a      	orrs	r2, r3
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6a1b      	ldr	r3, [r3, #32]
 80035f8:	431a      	orrs	r2, r3
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	430a      	orrs	r2, r1
 8003600:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	f000 fabc 	bl	8003b80 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	689b      	ldr	r3, [r3, #8]
 800360c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003610:	d102      	bne.n	8003618 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2200      	movs	r2, #0
 8003616:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	685a      	ldr	r2, [r3, #4]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003620:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003624:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800362a:	687a      	ldr	r2, [r7, #4]
 800362c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800362e:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d010      	beq.n	800365a <HAL_DMA_Init+0x106>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	2b04      	cmp	r3, #4
 800363e:	d80c      	bhi.n	800365a <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003640:	6878      	ldr	r0, [r7, #4]
 8003642:	f000 fae5 	bl	8003c10 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800364a:	2200      	movs	r2, #0
 800364c:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003652:	687a      	ldr	r2, [r7, #4]
 8003654:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003656:	605a      	str	r2, [r3, #4]
 8003658:	e008      	b.n	800366c <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = NULL;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2200      	movs	r2, #0
 800365e:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = NULL;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2200      	movs	r2, #0
 8003664:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2200      	movs	r2, #0
 800366a:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2200      	movs	r2, #0
 8003670:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2201      	movs	r2, #1
 8003676:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2200      	movs	r2, #0
 800367e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003682:	2300      	movs	r3, #0
}
 8003684:	4618      	mov	r0, r3
 8003686:	3708      	adds	r7, #8
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}
 800368c:	40020407 	.word	0x40020407
 8003690:	bffdfff8 	.word	0xbffdfff8
 8003694:	cccccccd 	.word	0xcccccccd
 8003698:	40020000 	.word	0x40020000
 800369c:	bffdfbf8 	.word	0xbffdfbf8
 80036a0:	40020400 	.word	0x40020400

080036a4 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b086      	sub	sp, #24
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	60f8      	str	r0, [r7, #12]
 80036ac:	60b9      	str	r1, [r7, #8]
 80036ae:	607a      	str	r2, [r7, #4]
 80036b0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80036b2:	2300      	movs	r3, #0
 80036b4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d101      	bne.n	80036c4 <HAL_DMA_Start_IT+0x20>
 80036c0:	2302      	movs	r3, #2
 80036c2:	e069      	b.n	8003798 <HAL_DMA_Start_IT+0xf4>
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	2201      	movs	r2, #1
 80036c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (hdma->State == HAL_DMA_STATE_READY)
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80036d2:	b2db      	uxtb	r3, r3
 80036d4:	2b01      	cmp	r3, #1
 80036d6:	d155      	bne.n	8003784 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	2202      	movs	r2, #2
 80036dc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	2200      	movs	r2, #0
 80036e4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	681a      	ldr	r2, [r3, #0]
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f022 0201 	bic.w	r2, r2, #1
 80036f4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	687a      	ldr	r2, [r7, #4]
 80036fa:	68b9      	ldr	r1, [r7, #8]
 80036fc:	68f8      	ldr	r0, [r7, #12]
 80036fe:	f000 fa02 	bl	8003b06 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003706:	2b00      	cmp	r3, #0
 8003708:	d008      	beq.n	800371c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	681a      	ldr	r2, [r3, #0]
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f042 020e 	orr.w	r2, r2, #14
 8003718:	601a      	str	r2, [r3, #0]
 800371a:	e00f      	b.n	800373c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	681a      	ldr	r2, [r3, #0]
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f022 0204 	bic.w	r2, r2, #4
 800372a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	681a      	ldr	r2, [r3, #0]
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f042 020a 	orr.w	r2, r2, #10
 800373a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003746:	2b00      	cmp	r3, #0
 8003748:	d007      	beq.n	800375a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800374e:	681a      	ldr	r2, [r3, #0]
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003754:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003758:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != NULL)
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800375e:	2b00      	cmp	r3, #0
 8003760:	d007      	beq.n	8003772 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003766:	681a      	ldr	r2, [r3, #0]
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800376c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003770:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	681a      	ldr	r2, [r3, #0]
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f042 0201 	orr.w	r2, r2, #1
 8003780:	601a      	str	r2, [r3, #0]
 8003782:	e008      	b.n	8003796 <HAL_DMA_Start_IT+0xf2>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	2280      	movs	r2, #128	; 0x80
 8003788:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	2200      	movs	r2, #0
 800378e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Return error status */
    status = HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003796:	7dfb      	ldrb	r3, [r7, #23]
}
 8003798:	4618      	mov	r0, r3
 800379a:	3718      	adds	r7, #24
 800379c:	46bd      	mov	sp, r7
 800379e:	bd80      	pop	{r7, pc}

080037a0 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80037a0:	b480      	push	{r7}
 80037a2:	b083      	sub	sp, #12
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d101      	bne.n	80037b2 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	e04f      	b.n	8003852 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80037b8:	b2db      	uxtb	r3, r3
 80037ba:	2b02      	cmp	r3, #2
 80037bc:	d008      	beq.n	80037d0 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2204      	movs	r2, #4
 80037c2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2200      	movs	r2, #0
 80037c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80037cc:	2301      	movs	r3, #1
 80037ce:	e040      	b.n	8003852 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f022 020e 	bic.w	r2, r2, #14
 80037de:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037e4:	681a      	ldr	r2, [r3, #0]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037ea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80037ee:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	681a      	ldr	r2, [r3, #0]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f022 0201 	bic.w	r2, r2, #1
 80037fe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003804:	f003 021c 	and.w	r2, r3, #28
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800380c:	2101      	movs	r1, #1
 800380e:	fa01 f202 	lsl.w	r2, r1, r2
 8003812:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003818:	687a      	ldr	r2, [r7, #4]
 800381a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800381c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003822:	2b00      	cmp	r3, #0
 8003824:	d00c      	beq.n	8003840 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800382a:	681a      	ldr	r2, [r3, #0]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003830:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003834:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800383a:	687a      	ldr	r2, [r7, #4]
 800383c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800383e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2201      	movs	r2, #1
 8003844:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2200      	movs	r2, #0
 800384c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8003850:	2300      	movs	r3, #0
}
 8003852:	4618      	mov	r0, r3
 8003854:	370c      	adds	r7, #12
 8003856:	46bd      	mov	sp, r7
 8003858:	bc80      	pop	{r7}
 800385a:	4770      	bx	lr

0800385c <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b084      	sub	sp, #16
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003864:	2300      	movs	r3, #0
 8003866:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800386e:	b2db      	uxtb	r3, r3
 8003870:	2b02      	cmp	r3, #2
 8003872:	d005      	beq.n	8003880 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2204      	movs	r2, #4
 8003878:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	73fb      	strb	r3, [r7, #15]
 800387e:	e047      	b.n	8003910 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	681a      	ldr	r2, [r3, #0]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f022 020e 	bic.w	r2, r2, #14
 800388e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	681a      	ldr	r2, [r3, #0]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f022 0201 	bic.w	r2, r2, #1
 800389e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038a4:	681a      	ldr	r2, [r3, #0]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038aa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80038ae:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038b4:	f003 021c 	and.w	r2, r3, #28
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038bc:	2101      	movs	r1, #1
 80038be:	fa01 f202 	lsl.w	r2, r1, r2
 80038c2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038c8:	687a      	ldr	r2, [r7, #4]
 80038ca:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80038cc:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d00c      	beq.n	80038f0 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038da:	681a      	ldr	r2, [r3, #0]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80038e4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038ea:	687a      	ldr	r2, [r7, #4]
 80038ec:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80038ee:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2201      	movs	r2, #1
 80038f4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2200      	movs	r2, #0
 80038fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003904:	2b00      	cmp	r3, #0
 8003906:	d003      	beq.n	8003910 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800390c:	6878      	ldr	r0, [r7, #4]
 800390e:	4798      	blx	r3
    }
  }
  return status;
 8003910:	7bfb      	ldrb	r3, [r7, #15]
}
 8003912:	4618      	mov	r0, r3
 8003914:	3710      	adds	r7, #16
 8003916:	46bd      	mov	sp, r7
 8003918:	bd80      	pop	{r7, pc}
	...

0800391c <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b084      	sub	sp, #16
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003938:	f003 031c 	and.w	r3, r3, #28
 800393c:	2204      	movs	r2, #4
 800393e:	409a      	lsls	r2, r3
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	4013      	ands	r3, r2
 8003944:	2b00      	cmp	r3, #0
 8003946:	d027      	beq.n	8003998 <HAL_DMA_IRQHandler+0x7c>
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	f003 0304 	and.w	r3, r3, #4
 800394e:	2b00      	cmp	r3, #0
 8003950:	d022      	beq.n	8003998 <HAL_DMA_IRQHandler+0x7c>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f003 0320 	and.w	r3, r3, #32
 800395c:	2b00      	cmp	r3, #0
 800395e:	d107      	bne.n	8003970 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	681a      	ldr	r2, [r3, #0]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f022 0204 	bic.w	r2, r2, #4
 800396e:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003974:	f003 021c 	and.w	r2, r3, #28
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800397c:	2104      	movs	r1, #4
 800397e:	fa01 f202 	lsl.w	r2, r1, r2
 8003982:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003988:	2b00      	cmp	r3, #0
 800398a:	f000 8081 	beq.w	8003a90 <HAL_DMA_IRQHandler+0x174>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8003996:	e07b      	b.n	8003a90 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800399c:	f003 031c 	and.w	r3, r3, #28
 80039a0:	2202      	movs	r2, #2
 80039a2:	409a      	lsls	r2, r3
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	4013      	ands	r3, r2
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d03d      	beq.n	8003a28 <HAL_DMA_IRQHandler+0x10c>
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	f003 0302 	and.w	r3, r3, #2
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d038      	beq.n	8003a28 <HAL_DMA_IRQHandler+0x10c>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f003 0320 	and.w	r3, r3, #32
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d10b      	bne.n	80039dc <HAL_DMA_IRQHandler+0xc0>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	681a      	ldr	r2, [r3, #0]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f022 020a 	bic.w	r2, r2, #10
 80039d2:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2201      	movs	r2, #1
 80039d8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	461a      	mov	r2, r3
 80039e2:	4b2e      	ldr	r3, [pc, #184]	; (8003a9c <HAL_DMA_IRQHandler+0x180>)
 80039e4:	429a      	cmp	r2, r3
 80039e6:	d909      	bls.n	80039fc <HAL_DMA_IRQHandler+0xe0>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ec:	f003 031c 	and.w	r3, r3, #28
 80039f0:	4a2b      	ldr	r2, [pc, #172]	; (8003aa0 <HAL_DMA_IRQHandler+0x184>)
 80039f2:	2102      	movs	r1, #2
 80039f4:	fa01 f303 	lsl.w	r3, r1, r3
 80039f8:	6053      	str	r3, [r2, #4]
 80039fa:	e008      	b.n	8003a0e <HAL_DMA_IRQHandler+0xf2>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a00:	f003 031c 	and.w	r3, r3, #28
 8003a04:	4a27      	ldr	r2, [pc, #156]	; (8003aa4 <HAL_DMA_IRQHandler+0x188>)
 8003a06:	2102      	movs	r1, #2
 8003a08:	fa01 f303 	lsl.w	r3, r1, r3
 8003a0c:	6053      	str	r3, [r2, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2200      	movs	r2, #0
 8003a12:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      if (hdma->XferCpltCallback != NULL)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d038      	beq.n	8003a90 <HAL_DMA_IRQHandler+0x174>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a22:	6878      	ldr	r0, [r7, #4]
 8003a24:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8003a26:	e033      	b.n	8003a90 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a2c:	f003 031c 	and.w	r3, r3, #28
 8003a30:	2208      	movs	r2, #8
 8003a32:	409a      	lsls	r2, r3
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	4013      	ands	r3, r2
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d02a      	beq.n	8003a92 <HAL_DMA_IRQHandler+0x176>
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	f003 0308 	and.w	r3, r3, #8
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d025      	beq.n	8003a92 <HAL_DMA_IRQHandler+0x176>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	681a      	ldr	r2, [r3, #0]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f022 020e 	bic.w	r2, r2, #14
 8003a54:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a5a:	f003 021c 	and.w	r2, r3, #28
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a62:	2101      	movs	r1, #1
 8003a64:	fa01 f202 	lsl.w	r2, r1, r2
 8003a68:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2201      	movs	r2, #1
 8003a6e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2201      	movs	r2, #1
 8003a74:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d004      	beq.n	8003a92 <HAL_DMA_IRQHandler+0x176>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a8c:	6878      	ldr	r0, [r7, #4]
 8003a8e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003a90:	bf00      	nop
 8003a92:	bf00      	nop
}
 8003a94:	3710      	adds	r7, #16
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}
 8003a9a:	bf00      	nop
 8003a9c:	40020080 	.word	0x40020080
 8003aa0:	40020400 	.word	0x40020400
 8003aa4:	40020000 	.word	0x40020000

08003aa8 <HAL_DMA_ConfigChannelAttributes>:
  * @param ChannelAttributes specifies the DMA channel secure/privilege attributes.
  *        This parameter can be a one or a combination of @ref DMA_Channel_Attributes
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *hdma, uint32_t ChannelAttributes)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b085      	sub	sp, #20
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
 8003ab0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	72fb      	strb	r3, [r7, #11]
#if defined (CORE_CM0PLUS)
  uint32_t ccr_SECM;
#endif /* CORE_CM0PLUS */

  /* Check the DMA peripheral handle */
  if (hdma == NULL)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d103      	bne.n	8003ac4 <HAL_DMA_ConfigChannelAttributes+0x1c>
  {
    status = HAL_ERROR;
 8003abc:	2301      	movs	r3, #1
 8003abe:	72fb      	strb	r3, [r7, #11]
    return status;
 8003ac0:	7afb      	ldrb	r3, [r7, #11]
 8003ac2:	e01b      	b.n	8003afc <HAL_DMA_ConfigChannelAttributes+0x54>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Read CCR register */
  ccr = READ_REG(hdma->Instance->CCR);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	60fb      	str	r3, [r7, #12]

  /* Apply any requested privilege/non-privilege attributes */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) != 0U)
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	f003 0310 	and.w	r3, r3, #16
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d00d      	beq.n	8003af2 <HAL_DMA_ConfigChannelAttributes+0x4a>
  {
    if ((ChannelAttributes & DMA_CCR_PRIV) != 0U)
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d004      	beq.n	8003aea <HAL_DMA_ConfigChannelAttributes+0x42>
    {
      SET_BIT(ccr, DMA_CCR_PRIV);
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ae6:	60fb      	str	r3, [r7, #12]
 8003ae8:	e003      	b.n	8003af2 <HAL_DMA_ConfigChannelAttributes+0x4a>
    }
    else
    {
      CLEAR_BIT(ccr, DMA_CCR_PRIV);
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003af0:	60fb      	str	r3, [r7, #12]
  }

#endif /* CORE_CM0PLUS */

  /* Update CCR Register: PRIV, SECM, SCEC, DSEC bits */
  WRITE_REG(hdma->Instance->CCR, ccr);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	68fa      	ldr	r2, [r7, #12]
 8003af8:	601a      	str	r2, [r3, #0]

  return status;
 8003afa:	7afb      	ldrb	r3, [r7, #11]
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	3714      	adds	r7, #20
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bc80      	pop	{r7}
 8003b04:	4770      	bx	lr

08003b06 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003b06:	b480      	push	{r7}
 8003b08:	b085      	sub	sp, #20
 8003b0a:	af00      	add	r7, sp, #0
 8003b0c:	60f8      	str	r0, [r7, #12]
 8003b0e:	60b9      	str	r1, [r7, #8]
 8003b10:	607a      	str	r2, [r7, #4]
 8003b12:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b18:	68fa      	ldr	r2, [r7, #12]
 8003b1a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003b1c:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != NULL)
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d004      	beq.n	8003b30 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b2a:	68fa      	ldr	r2, [r7, #12]
 8003b2c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003b2e:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b34:	f003 021c 	and.w	r2, r3, #28
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b3c:	2101      	movs	r1, #1
 8003b3e:	fa01 f202 	lsl.w	r2, r1, r2
 8003b42:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	683a      	ldr	r2, [r7, #0]
 8003b4a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	2b10      	cmp	r3, #16
 8003b52:	d108      	bne.n	8003b66 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	687a      	ldr	r2, [r7, #4]
 8003b5a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	68ba      	ldr	r2, [r7, #8]
 8003b62:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003b64:	e007      	b.n	8003b76 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	68ba      	ldr	r2, [r7, #8]
 8003b6c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	687a      	ldr	r2, [r7, #4]
 8003b74:	60da      	str	r2, [r3, #12]
}
 8003b76:	bf00      	nop
 8003b78:	3714      	adds	r7, #20
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bc80      	pop	{r7}
 8003b7e:	4770      	bx	lr

08003b80 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b085      	sub	sp, #20
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	461a      	mov	r2, r3
 8003b8e:	4b1c      	ldr	r3, [pc, #112]	; (8003c00 <DMA_CalcDMAMUXChannelBaseAndMask+0x80>)
 8003b90:	429a      	cmp	r2, r3
 8003b92:	d813      	bhi.n	8003bbc <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b98:	089b      	lsrs	r3, r3, #2
 8003b9a:	009b      	lsls	r3, r3, #2
 8003b9c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003ba0:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8003ba4:	687a      	ldr	r2, [r7, #4]
 8003ba6:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	b2db      	uxtb	r3, r3
 8003bae:	3b08      	subs	r3, #8
 8003bb0:	4a14      	ldr	r2, [pc, #80]	; (8003c04 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8003bb2:	fba2 2303 	umull	r2, r3, r2, r3
 8003bb6:	091b      	lsrs	r3, r3, #4
 8003bb8:	60fb      	str	r3, [r7, #12]
 8003bba:	e011      	b.n	8003be0 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bc0:	089b      	lsrs	r3, r3, #2
 8003bc2:	009a      	lsls	r2, r3, #2
 8003bc4:	4b10      	ldr	r3, [pc, #64]	; (8003c08 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 8003bc6:	4413      	add	r3, r2
 8003bc8:	687a      	ldr	r2, [r7, #4]
 8003bca:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	b2db      	uxtb	r3, r3
 8003bd2:	3b08      	subs	r3, #8
 8003bd4:	4a0b      	ldr	r2, [pc, #44]	; (8003c04 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8003bd6:	fba2 2303 	umull	r2, r3, r2, r3
 8003bda:	091b      	lsrs	r3, r3, #4
 8003bdc:	3307      	adds	r3, #7
 8003bde:	60fb      	str	r3, [r7, #12]
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	4a0a      	ldr	r2, [pc, #40]	; (8003c0c <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 8003be4:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	f003 031f 	and.w	r3, r3, #31
 8003bec:	2201      	movs	r2, #1
 8003bee:	409a      	lsls	r2, r3
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003bf4:	bf00      	nop
 8003bf6:	3714      	adds	r7, #20
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bc80      	pop	{r7}
 8003bfc:	4770      	bx	lr
 8003bfe:	bf00      	nop
 8003c00:	40020407 	.word	0x40020407
 8003c04:	cccccccd 	.word	0xcccccccd
 8003c08:	4002081c 	.word	0x4002081c
 8003c0c:	40020880 	.word	0x40020880

08003c10 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b085      	sub	sp, #20
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c20:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003c22:	68fa      	ldr	r2, [r7, #12]
 8003c24:	4b0a      	ldr	r3, [pc, #40]	; (8003c50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003c26:	4413      	add	r3, r2
 8003c28:	009b      	lsls	r3, r3, #2
 8003c2a:	461a      	mov	r2, r3
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	4a08      	ldr	r2, [pc, #32]	; (8003c54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003c34:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	3b01      	subs	r3, #1
 8003c3a:	f003 0303 	and.w	r3, r3, #3
 8003c3e:	2201      	movs	r2, #1
 8003c40:	409a      	lsls	r2, r3
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003c46:	bf00      	nop
 8003c48:	3714      	adds	r7, #20
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bc80      	pop	{r7}
 8003c4e:	4770      	bx	lr
 8003c50:	1000823f 	.word	0x1000823f
 8003c54:	40020940 	.word	0x40020940

08003c58 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b087      	sub	sp, #28
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
 8003c60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003c62:	2300      	movs	r3, #0
 8003c64:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c66:	e140      	b.n	8003eea <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	681a      	ldr	r2, [r3, #0]
 8003c6c:	2101      	movs	r1, #1
 8003c6e:	697b      	ldr	r3, [r7, #20]
 8003c70:	fa01 f303 	lsl.w	r3, r1, r3
 8003c74:	4013      	ands	r3, r2
 8003c76:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	f000 8132 	beq.w	8003ee4 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	f003 0303 	and.w	r3, r3, #3
 8003c88:	2b01      	cmp	r3, #1
 8003c8a:	d005      	beq.n	8003c98 <HAL_GPIO_Init+0x40>
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	f003 0303 	and.w	r3, r3, #3
 8003c94:	2b02      	cmp	r3, #2
 8003c96:	d130      	bne.n	8003cfa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	005b      	lsls	r3, r3, #1
 8003ca2:	2203      	movs	r2, #3
 8003ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca8:	43db      	mvns	r3, r3
 8003caa:	693a      	ldr	r2, [r7, #16]
 8003cac:	4013      	ands	r3, r2
 8003cae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	68da      	ldr	r2, [r3, #12]
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	005b      	lsls	r3, r3, #1
 8003cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cbc:	693a      	ldr	r2, [r7, #16]
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	693a      	ldr	r2, [r7, #16]
 8003cc6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003cce:	2201      	movs	r2, #1
 8003cd0:	697b      	ldr	r3, [r7, #20]
 8003cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd6:	43db      	mvns	r3, r3
 8003cd8:	693a      	ldr	r2, [r7, #16]
 8003cda:	4013      	ands	r3, r2
 8003cdc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	091b      	lsrs	r3, r3, #4
 8003ce4:	f003 0201 	and.w	r2, r3, #1
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	fa02 f303 	lsl.w	r3, r2, r3
 8003cee:	693a      	ldr	r2, [r7, #16]
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	693a      	ldr	r2, [r7, #16]
 8003cf8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	f003 0303 	and.w	r3, r3, #3
 8003d02:	2b03      	cmp	r3, #3
 8003d04:	d017      	beq.n	8003d36 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	68db      	ldr	r3, [r3, #12]
 8003d0a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	005b      	lsls	r3, r3, #1
 8003d10:	2203      	movs	r2, #3
 8003d12:	fa02 f303 	lsl.w	r3, r2, r3
 8003d16:	43db      	mvns	r3, r3
 8003d18:	693a      	ldr	r2, [r7, #16]
 8003d1a:	4013      	ands	r3, r2
 8003d1c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	689a      	ldr	r2, [r3, #8]
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	005b      	lsls	r3, r3, #1
 8003d26:	fa02 f303 	lsl.w	r3, r2, r3
 8003d2a:	693a      	ldr	r2, [r7, #16]
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	693a      	ldr	r2, [r7, #16]
 8003d34:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	f003 0303 	and.w	r3, r3, #3
 8003d3e:	2b02      	cmp	r3, #2
 8003d40:	d123      	bne.n	8003d8a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	08da      	lsrs	r2, r3, #3
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	3208      	adds	r2, #8
 8003d4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d4e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	f003 0307 	and.w	r3, r3, #7
 8003d56:	009b      	lsls	r3, r3, #2
 8003d58:	220f      	movs	r2, #15
 8003d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d5e:	43db      	mvns	r3, r3
 8003d60:	693a      	ldr	r2, [r7, #16]
 8003d62:	4013      	ands	r3, r2
 8003d64:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	691a      	ldr	r2, [r3, #16]
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	f003 0307 	and.w	r3, r3, #7
 8003d70:	009b      	lsls	r3, r3, #2
 8003d72:	fa02 f303 	lsl.w	r3, r2, r3
 8003d76:	693a      	ldr	r2, [r7, #16]
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	08da      	lsrs	r2, r3, #3
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	3208      	adds	r2, #8
 8003d84:	6939      	ldr	r1, [r7, #16]
 8003d86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003d90:	697b      	ldr	r3, [r7, #20]
 8003d92:	005b      	lsls	r3, r3, #1
 8003d94:	2203      	movs	r2, #3
 8003d96:	fa02 f303 	lsl.w	r3, r2, r3
 8003d9a:	43db      	mvns	r3, r3
 8003d9c:	693a      	ldr	r2, [r7, #16]
 8003d9e:	4013      	ands	r3, r2
 8003da0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	f003 0203 	and.w	r2, r3, #3
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	005b      	lsls	r3, r3, #1
 8003dae:	fa02 f303 	lsl.w	r3, r2, r3
 8003db2:	693a      	ldr	r2, [r7, #16]
 8003db4:	4313      	orrs	r3, r2
 8003db6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	693a      	ldr	r2, [r7, #16]
 8003dbc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	f000 808c 	beq.w	8003ee4 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8003dcc:	4a4e      	ldr	r2, [pc, #312]	; (8003f08 <HAL_GPIO_Init+0x2b0>)
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	089b      	lsrs	r3, r3, #2
 8003dd2:	3302      	adds	r3, #2
 8003dd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003dd8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	f003 0303 	and.w	r3, r3, #3
 8003de0:	009b      	lsls	r3, r3, #2
 8003de2:	2207      	movs	r2, #7
 8003de4:	fa02 f303 	lsl.w	r3, r2, r3
 8003de8:	43db      	mvns	r3, r3
 8003dea:	693a      	ldr	r2, [r7, #16]
 8003dec:	4013      	ands	r3, r2
 8003dee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003df6:	d00d      	beq.n	8003e14 <HAL_GPIO_Init+0x1bc>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	4a44      	ldr	r2, [pc, #272]	; (8003f0c <HAL_GPIO_Init+0x2b4>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d007      	beq.n	8003e10 <HAL_GPIO_Init+0x1b8>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	4a43      	ldr	r2, [pc, #268]	; (8003f10 <HAL_GPIO_Init+0x2b8>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d101      	bne.n	8003e0c <HAL_GPIO_Init+0x1b4>
 8003e08:	2302      	movs	r3, #2
 8003e0a:	e004      	b.n	8003e16 <HAL_GPIO_Init+0x1be>
 8003e0c:	2307      	movs	r3, #7
 8003e0e:	e002      	b.n	8003e16 <HAL_GPIO_Init+0x1be>
 8003e10:	2301      	movs	r3, #1
 8003e12:	e000      	b.n	8003e16 <HAL_GPIO_Init+0x1be>
 8003e14:	2300      	movs	r3, #0
 8003e16:	697a      	ldr	r2, [r7, #20]
 8003e18:	f002 0203 	and.w	r2, r2, #3
 8003e1c:	0092      	lsls	r2, r2, #2
 8003e1e:	4093      	lsls	r3, r2
 8003e20:	693a      	ldr	r2, [r7, #16]
 8003e22:	4313      	orrs	r3, r2
 8003e24:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003e26:	4938      	ldr	r1, [pc, #224]	; (8003f08 <HAL_GPIO_Init+0x2b0>)
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	089b      	lsrs	r3, r3, #2
 8003e2c:	3302      	adds	r3, #2
 8003e2e:	693a      	ldr	r2, [r7, #16]
 8003e30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003e34:	4b37      	ldr	r3, [pc, #220]	; (8003f14 <HAL_GPIO_Init+0x2bc>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	43db      	mvns	r3, r3
 8003e3e:	693a      	ldr	r2, [r7, #16]
 8003e40:	4013      	ands	r3, r2
 8003e42:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d003      	beq.n	8003e58 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8003e50:	693a      	ldr	r2, [r7, #16]
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	4313      	orrs	r3, r2
 8003e56:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003e58:	4a2e      	ldr	r2, [pc, #184]	; (8003f14 <HAL_GPIO_Init+0x2bc>)
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003e5e:	4b2d      	ldr	r3, [pc, #180]	; (8003f14 <HAL_GPIO_Init+0x2bc>)
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	43db      	mvns	r3, r3
 8003e68:	693a      	ldr	r2, [r7, #16]
 8003e6a:	4013      	ands	r3, r2
 8003e6c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d003      	beq.n	8003e82 <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8003e7a:	693a      	ldr	r2, [r7, #16]
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003e82:	4a24      	ldr	r2, [pc, #144]	; (8003f14 <HAL_GPIO_Init+0x2bc>)
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8003e88:	4b22      	ldr	r3, [pc, #136]	; (8003f14 <HAL_GPIO_Init+0x2bc>)
 8003e8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e8e:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	43db      	mvns	r3, r3
 8003e94:	693a      	ldr	r2, [r7, #16]
 8003e96:	4013      	ands	r3, r2
 8003e98:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d003      	beq.n	8003eae <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8003ea6:	693a      	ldr	r2, [r7, #16]
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8003eae:	4a19      	ldr	r2, [pc, #100]	; (8003f14 <HAL_GPIO_Init+0x2bc>)
 8003eb0:	693b      	ldr	r3, [r7, #16]
 8003eb2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8003eb6:	4b17      	ldr	r3, [pc, #92]	; (8003f14 <HAL_GPIO_Init+0x2bc>)
 8003eb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ebc:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	43db      	mvns	r3, r3
 8003ec2:	693a      	ldr	r2, [r7, #16]
 8003ec4:	4013      	ands	r3, r2
 8003ec6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d003      	beq.n	8003edc <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8003ed4:	693a      	ldr	r2, [r7, #16]
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8003edc:	4a0d      	ldr	r2, [pc, #52]	; (8003f14 <HAL_GPIO_Init+0x2bc>)
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8003ee4:	697b      	ldr	r3, [r7, #20]
 8003ee6:	3301      	adds	r3, #1
 8003ee8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	681a      	ldr	r2, [r3, #0]
 8003eee:	697b      	ldr	r3, [r7, #20]
 8003ef0:	fa22 f303 	lsr.w	r3, r2, r3
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	f47f aeb7 	bne.w	8003c68 <HAL_GPIO_Init+0x10>
  }
}
 8003efa:	bf00      	nop
 8003efc:	bf00      	nop
 8003efe:	371c      	adds	r7, #28
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bc80      	pop	{r7}
 8003f04:	4770      	bx	lr
 8003f06:	bf00      	nop
 8003f08:	40010000 	.word	0x40010000
 8003f0c:	48000400 	.word	0x48000400
 8003f10:	48000800 	.word	0x48000800
 8003f14:	58000800 	.word	0x58000800

08003f18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b083      	sub	sp, #12
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
 8003f20:	460b      	mov	r3, r1
 8003f22:	807b      	strh	r3, [r7, #2]
 8003f24:	4613      	mov	r3, r2
 8003f26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003f28:	787b      	ldrb	r3, [r7, #1]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d003      	beq.n	8003f36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003f2e:	887a      	ldrh	r2, [r7, #2]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003f34:	e002      	b.n	8003f3c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003f36:	887a      	ldrh	r2, [r7, #2]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003f3c:	bf00      	nop
 8003f3e:	370c      	adds	r7, #12
 8003f40:	46bd      	mov	sp, r7
 8003f42:	bc80      	pop	{r7}
 8003f44:	4770      	bx	lr
	...

08003f48 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003f4c:	4b04      	ldr	r3, [pc, #16]	; (8003f60 <HAL_PWR_EnableBkUpAccess+0x18>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a03      	ldr	r2, [pc, #12]	; (8003f60 <HAL_PWR_EnableBkUpAccess+0x18>)
 8003f52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f56:	6013      	str	r3, [r2, #0]
}
 8003f58:	bf00      	nop
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bc80      	pop	{r7}
 8003f5e:	4770      	bx	lr
 8003f60:	58000400 	.word	0x58000400

08003f64 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003f64:	b480      	push	{r7}
 8003f66:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8003f68:	4b03      	ldr	r3, [pc, #12]	; (8003f78 <HAL_PWREx_GetVoltageRange+0x14>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8003f70:	4618      	mov	r0, r3
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bc80      	pop	{r7}
 8003f76:	4770      	bx	lr
 8003f78:	58000400 	.word	0x58000400

08003f7c <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8003f80:	4b06      	ldr	r3, [pc, #24]	; (8003f9c <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f8c:	d101      	bne.n	8003f92 <LL_PWR_IsEnabledBkUpAccess+0x16>
 8003f8e:	2301      	movs	r3, #1
 8003f90:	e000      	b.n	8003f94 <LL_PWR_IsEnabledBkUpAccess+0x18>
 8003f92:	2300      	movs	r3, #0
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bc80      	pop	{r7}
 8003f9a:	4770      	bx	lr
 8003f9c:	58000400 	.word	0x58000400

08003fa0 <LL_RCC_HSE_EnableTcxo>:
  * @note PB0 must be configured in analog mode prior enabling VDDTCXO supply
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_EnableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableTcxo(void)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8003fa4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003fae:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003fb2:	6013      	str	r3, [r2, #0]
}
 8003fb4:	bf00      	nop
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bc80      	pop	{r7}
 8003fba:	4770      	bx	lr

08003fbc <LL_RCC_HSE_DisableTcxo>:
  * @brief  Disable HSE VDDTCXO output on package pin PB0-VDDTCXO
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_DisableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_DisableTcxo(void)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8003fc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003fca:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003fce:	6013      	str	r3, [r2, #0]
}
 8003fd0:	bf00      	nop
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bc80      	pop	{r7}
 8003fd6:	4770      	bx	lr

08003fd8 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler  division by 2
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8003fdc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003fe6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003fea:	d101      	bne.n	8003ff0 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8003fec:	2301      	movs	r3, #1
 8003fee:	e000      	b.n	8003ff2 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8003ff0:	2300      	movs	r3, #0
}
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bc80      	pop	{r7}
 8003ff8:	4770      	bx	lr

08003ffa <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8003ffa:	b480      	push	{r7}
 8003ffc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8003ffe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004008:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800400c:	6013      	str	r3, [r2, #0]
}
 800400e:	bf00      	nop
 8004010:	46bd      	mov	sp, r7
 8004012:	bc80      	pop	{r7}
 8004014:	4770      	bx	lr

08004016 <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8004016:	b480      	push	{r7}
 8004018:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800401a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004024:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004028:	6013      	str	r3, [r2, #0]
}
 800402a:	bf00      	nop
 800402c:	46bd      	mov	sp, r7
 800402e:	bc80      	pop	{r7}
 8004030:	4770      	bx	lr

08004032 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8004032:	b480      	push	{r7}
 8004034:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8004036:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004040:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004044:	d101      	bne.n	800404a <LL_RCC_HSE_IsReady+0x18>
 8004046:	2301      	movs	r3, #1
 8004048:	e000      	b.n	800404c <LL_RCC_HSE_IsReady+0x1a>
 800404a:	2300      	movs	r3, #0
}
 800404c:	4618      	mov	r0, r3
 800404e:	46bd      	mov	sp, r7
 8004050:	bc80      	pop	{r7}
 8004052:	4770      	bx	lr

08004054 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8004054:	b480      	push	{r7}
 8004056:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8004058:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004062:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004066:	6013      	str	r3, [r2, #0]
}
 8004068:	bf00      	nop
 800406a:	46bd      	mov	sp, r7
 800406c:	bc80      	pop	{r7}
 800406e:	4770      	bx	lr

08004070 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8004070:	b480      	push	{r7}
 8004072:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8004074:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800407e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004082:	6013      	str	r3, [r2, #0]
}
 8004084:	bf00      	nop
 8004086:	46bd      	mov	sp, r7
 8004088:	bc80      	pop	{r7}
 800408a:	4770      	bx	lr

0800408c <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 800408c:	b480      	push	{r7}
 800408e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8004090:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800409a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800409e:	d101      	bne.n	80040a4 <LL_RCC_HSI_IsReady+0x18>
 80040a0:	2301      	movs	r3, #1
 80040a2:	e000      	b.n	80040a6 <LL_RCC_HSI_IsReady+0x1a>
 80040a4:	2300      	movs	r3, #0
}
 80040a6:	4618      	mov	r0, r3
 80040a8:	46bd      	mov	sp, r7
 80040aa:	bc80      	pop	{r7}
 80040ac:	4770      	bx	lr

080040ae <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 80040ae:	b480      	push	{r7}
 80040b0:	b083      	sub	sp, #12
 80040b2:	af00      	add	r7, sp, #0
 80040b4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80040b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	061b      	lsls	r3, r3, #24
 80040c4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80040c8:	4313      	orrs	r3, r2
 80040ca:	604b      	str	r3, [r1, #4]
}
 80040cc:	bf00      	nop
 80040ce:	370c      	adds	r7, #12
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bc80      	pop	{r7}
 80040d4:	4770      	bx	lr

080040d6 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 80040d6:	b480      	push	{r7}
 80040d8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80040da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040e2:	f003 0302 	and.w	r3, r3, #2
 80040e6:	2b02      	cmp	r3, #2
 80040e8:	d101      	bne.n	80040ee <LL_RCC_LSE_IsReady+0x18>
 80040ea:	2301      	movs	r3, #1
 80040ec:	e000      	b.n	80040f0 <LL_RCC_LSE_IsReady+0x1a>
 80040ee:	2300      	movs	r3, #0
}
 80040f0:	4618      	mov	r0, r3
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bc80      	pop	{r7}
 80040f6:	4770      	bx	lr

080040f8 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 80040f8:	b480      	push	{r7}
 80040fa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 80040fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004100:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004104:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004108:	f043 0301 	orr.w	r3, r3, #1
 800410c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004110:	bf00      	nop
 8004112:	46bd      	mov	sp, r7
 8004114:	bc80      	pop	{r7}
 8004116:	4770      	bx	lr

08004118 <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 8004118:	b480      	push	{r7}
 800411a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 800411c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004120:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004124:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004128:	f023 0301 	bic.w	r3, r3, #1
 800412c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004130:	bf00      	nop
 8004132:	46bd      	mov	sp, r7
 8004134:	bc80      	pop	{r7}
 8004136:	4770      	bx	lr

08004138 <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 8004138:	b480      	push	{r7}
 800413a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 800413c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004140:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004144:	f003 0302 	and.w	r3, r3, #2
 8004148:	2b02      	cmp	r3, #2
 800414a:	d101      	bne.n	8004150 <LL_RCC_LSI_IsReady+0x18>
 800414c:	2301      	movs	r3, #1
 800414e:	e000      	b.n	8004152 <LL_RCC_LSI_IsReady+0x1a>
 8004150:	2300      	movs	r3, #0
}
 8004152:	4618      	mov	r0, r3
 8004154:	46bd      	mov	sp, r7
 8004156:	bc80      	pop	{r7}
 8004158:	4770      	bx	lr

0800415a <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 800415a:	b480      	push	{r7}
 800415c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800415e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004168:	f043 0301 	orr.w	r3, r3, #1
 800416c:	6013      	str	r3, [r2, #0]
}
 800416e:	bf00      	nop
 8004170:	46bd      	mov	sp, r7
 8004172:	bc80      	pop	{r7}
 8004174:	4770      	bx	lr

08004176 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8004176:	b480      	push	{r7}
 8004178:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800417a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004184:	f023 0301 	bic.w	r3, r3, #1
 8004188:	6013      	str	r3, [r2, #0]
}
 800418a:	bf00      	nop
 800418c:	46bd      	mov	sp, r7
 800418e:	bc80      	pop	{r7}
 8004190:	4770      	bx	lr

08004192 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8004192:	b480      	push	{r7}
 8004194:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8004196:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f003 0302 	and.w	r3, r3, #2
 80041a0:	2b02      	cmp	r3, #2
 80041a2:	d101      	bne.n	80041a8 <LL_RCC_MSI_IsReady+0x16>
 80041a4:	2301      	movs	r3, #1
 80041a6:	e000      	b.n	80041aa <LL_RCC_MSI_IsReady+0x18>
 80041a8:	2300      	movs	r3, #0
}
 80041aa:	4618      	mov	r0, r3
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bc80      	pop	{r7}
 80041b0:	4770      	bx	lr

080041b2 <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 80041b2:	b480      	push	{r7}
 80041b4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 80041b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f003 0308 	and.w	r3, r3, #8
 80041c0:	2b08      	cmp	r3, #8
 80041c2:	d101      	bne.n	80041c8 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 80041c4:	2301      	movs	r3, #1
 80041c6:	e000      	b.n	80041ca <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 80041c8:	2300      	movs	r3, #0
}
 80041ca:	4618      	mov	r0, r3
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bc80      	pop	{r7}
 80041d0:	4770      	bx	lr

080041d2 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 80041d2:	b480      	push	{r7}
 80041d4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 80041d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80041e0:	4618      	mov	r0, r3
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bc80      	pop	{r7}
 80041e6:	4770      	bx	lr

080041e8 <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 80041e8:	b480      	push	{r7}
 80041ea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 80041ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041f4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bc80      	pop	{r7}
 80041fe:	4770      	bx	lr

08004200 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8004200:	b480      	push	{r7}
 8004202:	b083      	sub	sp, #12
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8004208:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	021b      	lsls	r3, r3, #8
 8004216:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800421a:	4313      	orrs	r3, r2
 800421c:	604b      	str	r3, [r1, #4]
}
 800421e:	bf00      	nop
 8004220:	370c      	adds	r7, #12
 8004222:	46bd      	mov	sp, r7
 8004224:	bc80      	pop	{r7}
 8004226:	4770      	bx	lr

08004228 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8004228:	b480      	push	{r7}
 800422a:	b083      	sub	sp, #12
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8004230:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004234:	689b      	ldr	r3, [r3, #8]
 8004236:	f023 0203 	bic.w	r2, r3, #3
 800423a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	4313      	orrs	r3, r2
 8004242:	608b      	str	r3, [r1, #8]
}
 8004244:	bf00      	nop
 8004246:	370c      	adds	r7, #12
 8004248:	46bd      	mov	sp, r7
 800424a:	bc80      	pop	{r7}
 800424c:	4770      	bx	lr

0800424e <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800424e:	b480      	push	{r7}
 8004250:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004252:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004256:	689b      	ldr	r3, [r3, #8]
 8004258:	f003 030c 	and.w	r3, r3, #12
}
 800425c:	4618      	mov	r0, r3
 800425e:	46bd      	mov	sp, r7
 8004260:	bc80      	pop	{r7}
 8004262:	4770      	bx	lr

08004264 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8004264:	b480      	push	{r7}
 8004266:	b083      	sub	sp, #12
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800426c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004270:	689b      	ldr	r3, [r3, #8]
 8004272:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004276:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	4313      	orrs	r3, r2
 800427e:	608b      	str	r3, [r1, #8]
}
 8004280:	bf00      	nop
 8004282:	370c      	adds	r7, #12
 8004284:	46bd      	mov	sp, r7
 8004286:	bc80      	pop	{r7}
 8004288:	4770      	bx	lr

0800428a <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800428a:	b480      	push	{r7}
 800428c:	b083      	sub	sp, #12
 800428e:	af00      	add	r7, sp, #0
 8004290:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8004292:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004296:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800429a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800429e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	4313      	orrs	r3, r2
 80042a6:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80042aa:	bf00      	nop
 80042ac:	370c      	adds	r7, #12
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bc80      	pop	{r7}
 80042b2:	4770      	bx	lr

080042b4 <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 80042b4:	b480      	push	{r7}
 80042b6:	b083      	sub	sp, #12
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80042bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042c0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80042c4:	f023 020f 	bic.w	r2, r3, #15
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	091b      	lsrs	r3, r3, #4
 80042cc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80042d0:	4313      	orrs	r3, r2
 80042d2:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80042d6:	bf00      	nop
 80042d8:	370c      	adds	r7, #12
 80042da:	46bd      	mov	sp, r7
 80042dc:	bc80      	pop	{r7}
 80042de:	4770      	bx	lr

080042e0 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80042e0:	b480      	push	{r7}
 80042e2:	b083      	sub	sp, #12
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80042e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042ec:	689b      	ldr	r3, [r3, #8]
 80042ee:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80042f2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	4313      	orrs	r3, r2
 80042fa:	608b      	str	r3, [r1, #8]
}
 80042fc:	bf00      	nop
 80042fe:	370c      	adds	r7, #12
 8004300:	46bd      	mov	sp, r7
 8004302:	bc80      	pop	{r7}
 8004304:	4770      	bx	lr

08004306 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8004306:	b480      	push	{r7}
 8004308:	b083      	sub	sp, #12
 800430a:	af00      	add	r7, sp, #0
 800430c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800430e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004312:	689b      	ldr	r3, [r3, #8]
 8004314:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004318:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	4313      	orrs	r3, r2
 8004320:	608b      	str	r3, [r1, #8]
}
 8004322:	bf00      	nop
 8004324:	370c      	adds	r7, #12
 8004326:	46bd      	mov	sp, r7
 8004328:	bc80      	pop	{r7}
 800432a:	4770      	bx	lr

0800432c <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 800432c:	b480      	push	{r7}
 800432e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8004330:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004334:	689b      	ldr	r3, [r3, #8]
 8004336:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800433a:	4618      	mov	r0, r3
 800433c:	46bd      	mov	sp, r7
 800433e:	bc80      	pop	{r7}
 8004340:	4770      	bx	lr

08004342 <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 8004342:	b480      	push	{r7}
 8004344:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8004346:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800434a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800434e:	011b      	lsls	r3, r3, #4
 8004350:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004354:	4618      	mov	r0, r3
 8004356:	46bd      	mov	sp, r7
 8004358:	bc80      	pop	{r7}
 800435a:	4770      	bx	lr

0800435c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800435c:	b480      	push	{r7}
 800435e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8004360:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004364:	689b      	ldr	r3, [r3, #8]
 8004366:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 800436a:	4618      	mov	r0, r3
 800436c:	46bd      	mov	sp, r7
 800436e:	bc80      	pop	{r7}
 8004370:	4770      	bx	lr

08004372 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8004372:	b480      	push	{r7}
 8004374:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8004376:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800437a:	689b      	ldr	r3, [r3, #8]
 800437c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8004380:	4618      	mov	r0, r3
 8004382:	46bd      	mov	sp, r7
 8004384:	bc80      	pop	{r7}
 8004386:	4770      	bx	lr

08004388 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8004388:	b480      	push	{r7}
 800438a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800438c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004396:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800439a:	6013      	str	r3, [r2, #0]
}
 800439c:	bf00      	nop
 800439e:	46bd      	mov	sp, r7
 80043a0:	bc80      	pop	{r7}
 80043a2:	4770      	bx	lr

080043a4 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80043a4:	b480      	push	{r7}
 80043a6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80043a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80043b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80043b6:	6013      	str	r3, [r2, #0]
}
 80043b8:	bf00      	nop
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bc80      	pop	{r7}
 80043be:	4770      	bx	lr

080043c0 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80043c0:	b480      	push	{r7}
 80043c2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80043c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043ce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80043d2:	d101      	bne.n	80043d8 <LL_RCC_PLL_IsReady+0x18>
 80043d4:	2301      	movs	r3, #1
 80043d6:	e000      	b.n	80043da <LL_RCC_PLL_IsReady+0x1a>
 80043d8:	2300      	movs	r3, #0
}
 80043da:	4618      	mov	r0, r3
 80043dc:	46bd      	mov	sp, r7
 80043de:	bc80      	pop	{r7}
 80043e0:	4770      	bx	lr

080043e2 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80043e2:	b480      	push	{r7}
 80043e4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80043e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043ea:	68db      	ldr	r3, [r3, #12]
 80043ec:	0a1b      	lsrs	r3, r3, #8
 80043ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80043f2:	4618      	mov	r0, r3
 80043f4:	46bd      	mov	sp, r7
 80043f6:	bc80      	pop	{r7}
 80043f8:	4770      	bx	lr

080043fa <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80043fa:	b480      	push	{r7}
 80043fc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80043fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004402:	68db      	ldr	r3, [r3, #12]
 8004404:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8004408:	4618      	mov	r0, r3
 800440a:	46bd      	mov	sp, r7
 800440c:	bc80      	pop	{r7}
 800440e:	4770      	bx	lr

08004410 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8004410:	b480      	push	{r7}
 8004412:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8004414:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004418:	68db      	ldr	r3, [r3, #12]
 800441a:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 800441e:	4618      	mov	r0, r3
 8004420:	46bd      	mov	sp, r7
 8004422:	bc80      	pop	{r7}
 8004424:	4770      	bx	lr

08004426 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8004426:	b480      	push	{r7}
 8004428:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800442a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800442e:	68db      	ldr	r3, [r3, #12]
 8004430:	f003 0303 	and.w	r3, r3, #3
}
 8004434:	4618      	mov	r0, r3
 8004436:	46bd      	mov	sp, r7
 8004438:	bc80      	pop	{r7}
 800443a:	4770      	bx	lr

0800443c <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800443c:	b480      	push	{r7}
 800443e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8004440:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004444:	689b      	ldr	r3, [r3, #8]
 8004446:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800444a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800444e:	d101      	bne.n	8004454 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8004450:	2301      	movs	r3, #1
 8004452:	e000      	b.n	8004456 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8004454:	2300      	movs	r3, #0
}
 8004456:	4618      	mov	r0, r3
 8004458:	46bd      	mov	sp, r7
 800445a:	bc80      	pop	{r7}
 800445c:	4770      	bx	lr

0800445e <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 800445e:	b480      	push	{r7}
 8004460:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8004462:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004466:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800446a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800446e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004472:	d101      	bne.n	8004478 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8004474:	2301      	movs	r3, #1
 8004476:	e000      	b.n	800447a <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8004478:	2300      	movs	r3, #0
}
 800447a:	4618      	mov	r0, r3
 800447c:	46bd      	mov	sp, r7
 800447e:	bc80      	pop	{r7}
 8004480:	4770      	bx	lr

08004482 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8004482:	b480      	push	{r7}
 8004484:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8004486:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800448a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800448e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004492:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004496:	d101      	bne.n	800449c <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8004498:	2301      	movs	r3, #1
 800449a:	e000      	b.n	800449e <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800449c:	2300      	movs	r3, #0
}
 800449e:	4618      	mov	r0, r3
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bc80      	pop	{r7}
 80044a4:	4770      	bx	lr

080044a6 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80044a6:	b480      	push	{r7}
 80044a8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80044aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044ae:	689b      	ldr	r3, [r3, #8]
 80044b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044b4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80044b8:	d101      	bne.n	80044be <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80044ba:	2301      	movs	r3, #1
 80044bc:	e000      	b.n	80044c0 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80044be:	2300      	movs	r3, #0
}
 80044c0:	4618      	mov	r0, r3
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bc80      	pop	{r7}
 80044c6:	4770      	bx	lr

080044c8 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 80044c8:	b480      	push	{r7}
 80044ca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80044cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044d0:	689b      	ldr	r3, [r3, #8]
 80044d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80044d6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80044da:	d101      	bne.n	80044e0 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80044dc:	2301      	movs	r3, #1
 80044de:	e000      	b.n	80044e2 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80044e0:	2300      	movs	r3, #0
}
 80044e2:	4618      	mov	r0, r3
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bc80      	pop	{r7}
 80044e8:	4770      	bx	lr
	...

080044ec <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b088      	sub	sp, #32
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d101      	bne.n	80044fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80044fa:	2301      	movs	r3, #1
 80044fc:	e36f      	b.n	8004bde <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80044fe:	f7ff fea6 	bl	800424e <LL_RCC_GetSysClkSource>
 8004502:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004504:	f7ff ff8f 	bl	8004426 <LL_RCC_PLL_GetMainSource>
 8004508:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f003 0320 	and.w	r3, r3, #32
 8004512:	2b00      	cmp	r3, #0
 8004514:	f000 80c4 	beq.w	80046a0 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004518:	69fb      	ldr	r3, [r7, #28]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d005      	beq.n	800452a <HAL_RCC_OscConfig+0x3e>
 800451e:	69fb      	ldr	r3, [r7, #28]
 8004520:	2b0c      	cmp	r3, #12
 8004522:	d176      	bne.n	8004612 <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004524:	69bb      	ldr	r3, [r7, #24]
 8004526:	2b01      	cmp	r3, #1
 8004528:	d173      	bne.n	8004612 <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6a1b      	ldr	r3, [r3, #32]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d101      	bne.n	8004536 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8004532:	2301      	movs	r3, #1
 8004534:	e353      	b.n	8004bde <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800453a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f003 0308 	and.w	r3, r3, #8
 8004544:	2b00      	cmp	r3, #0
 8004546:	d005      	beq.n	8004554 <HAL_RCC_OscConfig+0x68>
 8004548:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004552:	e006      	b.n	8004562 <HAL_RCC_OscConfig+0x76>
 8004554:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004558:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800455c:	091b      	lsrs	r3, r3, #4
 800455e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004562:	4293      	cmp	r3, r2
 8004564:	d222      	bcs.n	80045ac <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800456a:	4618      	mov	r0, r3
 800456c:	f000 fd5a 	bl	8005024 <RCC_SetFlashLatencyFromMSIRange>
 8004570:	4603      	mov	r3, r0
 8004572:	2b00      	cmp	r3, #0
 8004574:	d001      	beq.n	800457a <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 8004576:	2301      	movs	r3, #1
 8004578:	e331      	b.n	8004bde <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800457a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004584:	f043 0308 	orr.w	r3, r3, #8
 8004588:	6013      	str	r3, [r2, #0]
 800458a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004598:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800459c:	4313      	orrs	r3, r2
 800459e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a4:	4618      	mov	r0, r3
 80045a6:	f7ff fe2b 	bl	8004200 <LL_RCC_MSI_SetCalibTrimming>
 80045aa:	e021      	b.n	80045f0 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80045ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80045b6:	f043 0308 	orr.w	r3, r3, #8
 80045ba:	6013      	str	r3, [r2, #0]
 80045bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045ca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80045ce:	4313      	orrs	r3, r2
 80045d0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d6:	4618      	mov	r0, r3
 80045d8:	f7ff fe12 	bl	8004200 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045e0:	4618      	mov	r0, r3
 80045e2:	f000 fd1f 	bl	8005024 <RCC_SetFlashLatencyFromMSIRange>
 80045e6:	4603      	mov	r3, r0
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d001      	beq.n	80045f0 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 80045ec:	2301      	movs	r3, #1
 80045ee:	e2f6      	b.n	8004bde <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80045f0:	f000 fce0 	bl	8004fb4 <HAL_RCC_GetHCLKFreq>
 80045f4:	4603      	mov	r3, r0
 80045f6:	4aa7      	ldr	r2, [pc, #668]	; (8004894 <HAL_RCC_OscConfig+0x3a8>)
 80045f8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 80045fa:	4ba7      	ldr	r3, [pc, #668]	; (8004898 <HAL_RCC_OscConfig+0x3ac>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4618      	mov	r0, r3
 8004600:	f7fe fe50 	bl	80032a4 <HAL_InitTick>
 8004604:	4603      	mov	r3, r0
 8004606:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8004608:	7cfb      	ldrb	r3, [r7, #19]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d047      	beq.n	800469e <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 800460e:	7cfb      	ldrb	r3, [r7, #19]
 8004610:	e2e5      	b.n	8004bde <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6a1b      	ldr	r3, [r3, #32]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d02c      	beq.n	8004674 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800461a:	f7ff fd9e 	bl	800415a <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800461e:	f7fe fd23 	bl	8003068 <HAL_GetTick>
 8004622:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8004624:	e008      	b.n	8004638 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004626:	f7fe fd1f 	bl	8003068 <HAL_GetTick>
 800462a:	4602      	mov	r2, r0
 800462c:	697b      	ldr	r3, [r7, #20]
 800462e:	1ad3      	subs	r3, r2, r3
 8004630:	2b02      	cmp	r3, #2
 8004632:	d901      	bls.n	8004638 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 8004634:	2303      	movs	r3, #3
 8004636:	e2d2      	b.n	8004bde <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 8004638:	f7ff fdab 	bl	8004192 <LL_RCC_MSI_IsReady>
 800463c:	4603      	mov	r3, r0
 800463e:	2b00      	cmp	r3, #0
 8004640:	d0f1      	beq.n	8004626 <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004642:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800464c:	f043 0308 	orr.w	r3, r3, #8
 8004650:	6013      	str	r3, [r2, #0]
 8004652:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004660:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004664:	4313      	orrs	r3, r2
 8004666:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800466c:	4618      	mov	r0, r3
 800466e:	f7ff fdc7 	bl	8004200 <LL_RCC_MSI_SetCalibTrimming>
 8004672:	e015      	b.n	80046a0 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004674:	f7ff fd7f 	bl	8004176 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004678:	f7fe fcf6 	bl	8003068 <HAL_GetTick>
 800467c:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800467e:	e008      	b.n	8004692 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004680:	f7fe fcf2 	bl	8003068 <HAL_GetTick>
 8004684:	4602      	mov	r2, r0
 8004686:	697b      	ldr	r3, [r7, #20]
 8004688:	1ad3      	subs	r3, r2, r3
 800468a:	2b02      	cmp	r3, #2
 800468c:	d901      	bls.n	8004692 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800468e:	2303      	movs	r3, #3
 8004690:	e2a5      	b.n	8004bde <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 8004692:	f7ff fd7e 	bl	8004192 <LL_RCC_MSI_IsReady>
 8004696:	4603      	mov	r3, r0
 8004698:	2b00      	cmp	r3, #0
 800469a:	d1f1      	bne.n	8004680 <HAL_RCC_OscConfig+0x194>
 800469c:	e000      	b.n	80046a0 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800469e:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f003 0301 	and.w	r3, r3, #1
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d058      	beq.n	800475e <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80046ac:	69fb      	ldr	r3, [r7, #28]
 80046ae:	2b08      	cmp	r3, #8
 80046b0:	d005      	beq.n	80046be <HAL_RCC_OscConfig+0x1d2>
 80046b2:	69fb      	ldr	r3, [r7, #28]
 80046b4:	2b0c      	cmp	r3, #12
 80046b6:	d108      	bne.n	80046ca <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80046b8:	69bb      	ldr	r3, [r7, #24]
 80046ba:	2b03      	cmp	r3, #3
 80046bc:	d105      	bne.n	80046ca <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d14b      	bne.n	800475e <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 80046c6:	2301      	movs	r3, #1
 80046c8:	e289      	b.n	8004bde <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 80046ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	689b      	ldr	r3, [r3, #8]
 80046d8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80046dc:	4313      	orrs	r3, r2
 80046de:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046e8:	d102      	bne.n	80046f0 <HAL_RCC_OscConfig+0x204>
 80046ea:	f7ff fc86 	bl	8003ffa <LL_RCC_HSE_Enable>
 80046ee:	e00d      	b.n	800470c <HAL_RCC_OscConfig+0x220>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 80046f8:	d104      	bne.n	8004704 <HAL_RCC_OscConfig+0x218>
 80046fa:	f7ff fc51 	bl	8003fa0 <LL_RCC_HSE_EnableTcxo>
 80046fe:	f7ff fc7c 	bl	8003ffa <LL_RCC_HSE_Enable>
 8004702:	e003      	b.n	800470c <HAL_RCC_OscConfig+0x220>
 8004704:	f7ff fc87 	bl	8004016 <LL_RCC_HSE_Disable>
 8004708:	f7ff fc58 	bl	8003fbc <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d012      	beq.n	800473a <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004714:	f7fe fca8 	bl	8003068 <HAL_GetTick>
 8004718:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800471a:	e008      	b.n	800472e <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800471c:	f7fe fca4 	bl	8003068 <HAL_GetTick>
 8004720:	4602      	mov	r2, r0
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	1ad3      	subs	r3, r2, r3
 8004726:	2b64      	cmp	r3, #100	; 0x64
 8004728:	d901      	bls.n	800472e <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 800472a:	2303      	movs	r3, #3
 800472c:	e257      	b.n	8004bde <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 800472e:	f7ff fc80 	bl	8004032 <LL_RCC_HSE_IsReady>
 8004732:	4603      	mov	r3, r0
 8004734:	2b00      	cmp	r3, #0
 8004736:	d0f1      	beq.n	800471c <HAL_RCC_OscConfig+0x230>
 8004738:	e011      	b.n	800475e <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800473a:	f7fe fc95 	bl	8003068 <HAL_GetTick>
 800473e:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8004740:	e008      	b.n	8004754 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004742:	f7fe fc91 	bl	8003068 <HAL_GetTick>
 8004746:	4602      	mov	r2, r0
 8004748:	697b      	ldr	r3, [r7, #20]
 800474a:	1ad3      	subs	r3, r2, r3
 800474c:	2b64      	cmp	r3, #100	; 0x64
 800474e:	d901      	bls.n	8004754 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8004750:	2303      	movs	r3, #3
 8004752:	e244      	b.n	8004bde <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 8004754:	f7ff fc6d 	bl	8004032 <LL_RCC_HSE_IsReady>
 8004758:	4603      	mov	r3, r0
 800475a:	2b00      	cmp	r3, #0
 800475c:	d1f1      	bne.n	8004742 <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f003 0302 	and.w	r3, r3, #2
 8004766:	2b00      	cmp	r3, #0
 8004768:	d046      	beq.n	80047f8 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800476a:	69fb      	ldr	r3, [r7, #28]
 800476c:	2b04      	cmp	r3, #4
 800476e:	d005      	beq.n	800477c <HAL_RCC_OscConfig+0x290>
 8004770:	69fb      	ldr	r3, [r7, #28]
 8004772:	2b0c      	cmp	r3, #12
 8004774:	d10e      	bne.n	8004794 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004776:	69bb      	ldr	r3, [r7, #24]
 8004778:	2b02      	cmp	r3, #2
 800477a:	d10b      	bne.n	8004794 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	691b      	ldr	r3, [r3, #16]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d101      	bne.n	8004788 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8004784:	2301      	movs	r3, #1
 8004786:	e22a      	b.n	8004bde <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	695b      	ldr	r3, [r3, #20]
 800478c:	4618      	mov	r0, r3
 800478e:	f7ff fc8e 	bl	80040ae <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004792:	e031      	b.n	80047f8 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	691b      	ldr	r3, [r3, #16]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d019      	beq.n	80047d0 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800479c:	f7ff fc5a 	bl	8004054 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047a0:	f7fe fc62 	bl	8003068 <HAL_GetTick>
 80047a4:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80047a6:	e008      	b.n	80047ba <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80047a8:	f7fe fc5e 	bl	8003068 <HAL_GetTick>
 80047ac:	4602      	mov	r2, r0
 80047ae:	697b      	ldr	r3, [r7, #20]
 80047b0:	1ad3      	subs	r3, r2, r3
 80047b2:	2b02      	cmp	r3, #2
 80047b4:	d901      	bls.n	80047ba <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 80047b6:	2303      	movs	r3, #3
 80047b8:	e211      	b.n	8004bde <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 80047ba:	f7ff fc67 	bl	800408c <LL_RCC_HSI_IsReady>
 80047be:	4603      	mov	r3, r0
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d0f1      	beq.n	80047a8 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	695b      	ldr	r3, [r3, #20]
 80047c8:	4618      	mov	r0, r3
 80047ca:	f7ff fc70 	bl	80040ae <LL_RCC_HSI_SetCalibTrimming>
 80047ce:	e013      	b.n	80047f8 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80047d0:	f7ff fc4e 	bl	8004070 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047d4:	f7fe fc48 	bl	8003068 <HAL_GetTick>
 80047d8:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80047da:	e008      	b.n	80047ee <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80047dc:	f7fe fc44 	bl	8003068 <HAL_GetTick>
 80047e0:	4602      	mov	r2, r0
 80047e2:	697b      	ldr	r3, [r7, #20]
 80047e4:	1ad3      	subs	r3, r2, r3
 80047e6:	2b02      	cmp	r3, #2
 80047e8:	d901      	bls.n	80047ee <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 80047ea:	2303      	movs	r3, #3
 80047ec:	e1f7      	b.n	8004bde <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 80047ee:	f7ff fc4d 	bl	800408c <LL_RCC_HSI_IsReady>
 80047f2:	4603      	mov	r3, r0
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d1f1      	bne.n	80047dc <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f003 0308 	and.w	r3, r3, #8
 8004800:	2b00      	cmp	r3, #0
 8004802:	d06e      	beq.n	80048e2 <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	699b      	ldr	r3, [r3, #24]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d056      	beq.n	80048ba <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 800480c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004810:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004814:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	69da      	ldr	r2, [r3, #28]
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	f003 0310 	and.w	r3, r3, #16
 8004820:	429a      	cmp	r2, r3
 8004822:	d031      	beq.n	8004888 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	f003 0302 	and.w	r3, r3, #2
 800482a:	2b00      	cmp	r3, #0
 800482c:	d006      	beq.n	800483c <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8004834:	2b00      	cmp	r3, #0
 8004836:	d101      	bne.n	800483c <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 8004838:	2301      	movs	r3, #1
 800483a:	e1d0      	b.n	8004bde <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	f003 0301 	and.w	r3, r3, #1
 8004842:	2b00      	cmp	r3, #0
 8004844:	d013      	beq.n	800486e <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 8004846:	f7ff fc67 	bl	8004118 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800484a:	f7fe fc0d 	bl	8003068 <HAL_GetTick>
 800484e:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8004850:	e008      	b.n	8004864 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004852:	f7fe fc09 	bl	8003068 <HAL_GetTick>
 8004856:	4602      	mov	r2, r0
 8004858:	697b      	ldr	r3, [r7, #20]
 800485a:	1ad3      	subs	r3, r2, r3
 800485c:	2b11      	cmp	r3, #17
 800485e:	d901      	bls.n	8004864 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 8004860:	2303      	movs	r3, #3
 8004862:	e1bc      	b.n	8004bde <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 8004864:	f7ff fc68 	bl	8004138 <LL_RCC_LSI_IsReady>
 8004868:	4603      	mov	r3, r0
 800486a:	2b00      	cmp	r3, #0
 800486c:	d1f1      	bne.n	8004852 <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 800486e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004872:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004876:	f023 0210 	bic.w	r2, r3, #16
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	69db      	ldr	r3, [r3, #28]
 800487e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004882:	4313      	orrs	r3, r2
 8004884:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004888:	f7ff fc36 	bl	80040f8 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800488c:	f7fe fbec 	bl	8003068 <HAL_GetTick>
 8004890:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8004892:	e00c      	b.n	80048ae <HAL_RCC_OscConfig+0x3c2>
 8004894:	2000000c 	.word	0x2000000c
 8004898:	20000010 	.word	0x20000010
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800489c:	f7fe fbe4 	bl	8003068 <HAL_GetTick>
 80048a0:	4602      	mov	r2, r0
 80048a2:	697b      	ldr	r3, [r7, #20]
 80048a4:	1ad3      	subs	r3, r2, r3
 80048a6:	2b11      	cmp	r3, #17
 80048a8:	d901      	bls.n	80048ae <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 80048aa:	2303      	movs	r3, #3
 80048ac:	e197      	b.n	8004bde <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 80048ae:	f7ff fc43 	bl	8004138 <LL_RCC_LSI_IsReady>
 80048b2:	4603      	mov	r3, r0
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d0f1      	beq.n	800489c <HAL_RCC_OscConfig+0x3b0>
 80048b8:	e013      	b.n	80048e2 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80048ba:	f7ff fc2d 	bl	8004118 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048be:	f7fe fbd3 	bl	8003068 <HAL_GetTick>
 80048c2:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 80048c4:	e008      	b.n	80048d8 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048c6:	f7fe fbcf 	bl	8003068 <HAL_GetTick>
 80048ca:	4602      	mov	r2, r0
 80048cc:	697b      	ldr	r3, [r7, #20]
 80048ce:	1ad3      	subs	r3, r2, r3
 80048d0:	2b11      	cmp	r3, #17
 80048d2:	d901      	bls.n	80048d8 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 80048d4:	2303      	movs	r3, #3
 80048d6:	e182      	b.n	8004bde <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 80048d8:	f7ff fc2e 	bl	8004138 <LL_RCC_LSI_IsReady>
 80048dc:	4603      	mov	r3, r0
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d1f1      	bne.n	80048c6 <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f003 0304 	and.w	r3, r3, #4
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	f000 80d8 	beq.w	8004aa0 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80048f0:	f7ff fb44 	bl	8003f7c <LL_PWR_IsEnabledBkUpAccess>
 80048f4:	4603      	mov	r3, r0
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d113      	bne.n	8004922 <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80048fa:	f7ff fb25 	bl	8003f48 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80048fe:	f7fe fbb3 	bl	8003068 <HAL_GetTick>
 8004902:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8004904:	e008      	b.n	8004918 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004906:	f7fe fbaf 	bl	8003068 <HAL_GetTick>
 800490a:	4602      	mov	r2, r0
 800490c:	697b      	ldr	r3, [r7, #20]
 800490e:	1ad3      	subs	r3, r2, r3
 8004910:	2b02      	cmp	r3, #2
 8004912:	d901      	bls.n	8004918 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8004914:	2303      	movs	r3, #3
 8004916:	e162      	b.n	8004bde <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8004918:	f7ff fb30 	bl	8003f7c <LL_PWR_IsEnabledBkUpAccess>
 800491c:	4603      	mov	r3, r0
 800491e:	2b00      	cmp	r3, #0
 8004920:	d0f1      	beq.n	8004906 <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	68db      	ldr	r3, [r3, #12]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d07b      	beq.n	8004a22 <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	68db      	ldr	r3, [r3, #12]
 800492e:	2b85      	cmp	r3, #133	; 0x85
 8004930:	d003      	beq.n	800493a <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	68db      	ldr	r3, [r3, #12]
 8004936:	2b05      	cmp	r3, #5
 8004938:	d109      	bne.n	800494e <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800493a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800493e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004942:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004946:	f043 0304 	orr.w	r3, r3, #4
 800494a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800494e:	f7fe fb8b 	bl	8003068 <HAL_GetTick>
 8004952:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004954:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004958:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800495c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004960:	f043 0301 	orr.w	r3, r3, #1
 8004964:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8004968:	e00a      	b.n	8004980 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800496a:	f7fe fb7d 	bl	8003068 <HAL_GetTick>
 800496e:	4602      	mov	r2, r0
 8004970:	697b      	ldr	r3, [r7, #20]
 8004972:	1ad3      	subs	r3, r2, r3
 8004974:	f241 3288 	movw	r2, #5000	; 0x1388
 8004978:	4293      	cmp	r3, r2
 800497a:	d901      	bls.n	8004980 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 800497c:	2303      	movs	r3, #3
 800497e:	e12e      	b.n	8004bde <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 8004980:	f7ff fba9 	bl	80040d6 <LL_RCC_LSE_IsReady>
 8004984:	4603      	mov	r3, r0
 8004986:	2b00      	cmp	r3, #0
 8004988:	d0ef      	beq.n	800496a <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	68db      	ldr	r3, [r3, #12]
 800498e:	2b81      	cmp	r3, #129	; 0x81
 8004990:	d003      	beq.n	800499a <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	68db      	ldr	r3, [r3, #12]
 8004996:	2b85      	cmp	r3, #133	; 0x85
 8004998:	d121      	bne.n	80049de <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800499a:	f7fe fb65 	bl	8003068 <HAL_GetTick>
 800499e:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80049a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049a8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80049ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80049b4:	e00a      	b.n	80049cc <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049b6:	f7fe fb57 	bl	8003068 <HAL_GetTick>
 80049ba:	4602      	mov	r2, r0
 80049bc:	697b      	ldr	r3, [r7, #20]
 80049be:	1ad3      	subs	r3, r2, r3
 80049c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d901      	bls.n	80049cc <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 80049c8:	2303      	movs	r3, #3
 80049ca:	e108      	b.n	8004bde <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80049cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d0ec      	beq.n	80049b6 <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80049dc:	e060      	b.n	8004aa0 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049de:	f7fe fb43 	bl	8003068 <HAL_GetTick>
 80049e2:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80049e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049ec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80049f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80049f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80049f8:	e00a      	b.n	8004a10 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049fa:	f7fe fb35 	bl	8003068 <HAL_GetTick>
 80049fe:	4602      	mov	r2, r0
 8004a00:	697b      	ldr	r3, [r7, #20]
 8004a02:	1ad3      	subs	r3, r2, r3
 8004a04:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d901      	bls.n	8004a10 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8004a0c:	2303      	movs	r3, #3
 8004a0e:	e0e6      	b.n	8004bde <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004a10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d1ec      	bne.n	80049fa <HAL_RCC_OscConfig+0x50e>
 8004a20:	e03e      	b.n	8004aa0 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a22:	f7fe fb21 	bl	8003068 <HAL_GetTick>
 8004a26:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004a28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a30:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004a34:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004a3c:	e00a      	b.n	8004a54 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a3e:	f7fe fb13 	bl	8003068 <HAL_GetTick>
 8004a42:	4602      	mov	r2, r0
 8004a44:	697b      	ldr	r3, [r7, #20]
 8004a46:	1ad3      	subs	r3, r2, r3
 8004a48:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d901      	bls.n	8004a54 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8004a50:	2303      	movs	r3, #3
 8004a52:	e0c4      	b.n	8004bde <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004a54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d1ec      	bne.n	8004a3e <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a64:	f7fe fb00 	bl	8003068 <HAL_GetTick>
 8004a68:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004a6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a72:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004a76:	f023 0301 	bic.w	r3, r3, #1
 8004a7a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8004a7e:	e00a      	b.n	8004a96 <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a80:	f7fe faf2 	bl	8003068 <HAL_GetTick>
 8004a84:	4602      	mov	r2, r0
 8004a86:	697b      	ldr	r3, [r7, #20]
 8004a88:	1ad3      	subs	r3, r2, r3
 8004a8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d901      	bls.n	8004a96 <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 8004a92:	2303      	movs	r3, #3
 8004a94:	e0a3      	b.n	8004bde <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 8004a96:	f7ff fb1e 	bl	80040d6 <LL_RCC_LSE_IsReady>
 8004a9a:	4603      	mov	r3, r0
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d1ef      	bne.n	8004a80 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	f000 8099 	beq.w	8004bdc <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004aaa:	69fb      	ldr	r3, [r7, #28]
 8004aac:	2b0c      	cmp	r3, #12
 8004aae:	d06c      	beq.n	8004b8a <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ab4:	2b02      	cmp	r3, #2
 8004ab6:	d14b      	bne.n	8004b50 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ab8:	f7ff fc74 	bl	80043a4 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004abc:	f7fe fad4 	bl	8003068 <HAL_GetTick>
 8004ac0:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8004ac2:	e008      	b.n	8004ad6 <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ac4:	f7fe fad0 	bl	8003068 <HAL_GetTick>
 8004ac8:	4602      	mov	r2, r0
 8004aca:	697b      	ldr	r3, [r7, #20]
 8004acc:	1ad3      	subs	r3, r2, r3
 8004ace:	2b0a      	cmp	r3, #10
 8004ad0:	d901      	bls.n	8004ad6 <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 8004ad2:	2303      	movs	r3, #3
 8004ad4:	e083      	b.n	8004bde <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8004ad6:	f7ff fc73 	bl	80043c0 <LL_RCC_PLL_IsReady>
 8004ada:	4603      	mov	r3, r0
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d1f1      	bne.n	8004ac4 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004ae0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ae4:	68da      	ldr	r2, [r3, #12]
 8004ae6:	4b40      	ldr	r3, [pc, #256]	; (8004be8 <HAL_RCC_OscConfig+0x6fc>)
 8004ae8:	4013      	ands	r3, r2
 8004aea:	687a      	ldr	r2, [r7, #4]
 8004aec:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8004aee:	687a      	ldr	r2, [r7, #4]
 8004af0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004af2:	4311      	orrs	r1, r2
 8004af4:	687a      	ldr	r2, [r7, #4]
 8004af6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004af8:	0212      	lsls	r2, r2, #8
 8004afa:	4311      	orrs	r1, r2
 8004afc:	687a      	ldr	r2, [r7, #4]
 8004afe:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004b00:	4311      	orrs	r1, r2
 8004b02:	687a      	ldr	r2, [r7, #4]
 8004b04:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004b06:	4311      	orrs	r1, r2
 8004b08:	687a      	ldr	r2, [r7, #4]
 8004b0a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004b0c:	430a      	orrs	r2, r1
 8004b0e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004b12:	4313      	orrs	r3, r2
 8004b14:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b16:	f7ff fc37 	bl	8004388 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004b1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b1e:	68db      	ldr	r3, [r3, #12]
 8004b20:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b28:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b2a:	f7fe fa9d 	bl	8003068 <HAL_GetTick>
 8004b2e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8004b30:	e008      	b.n	8004b44 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b32:	f7fe fa99 	bl	8003068 <HAL_GetTick>
 8004b36:	4602      	mov	r2, r0
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	1ad3      	subs	r3, r2, r3
 8004b3c:	2b0a      	cmp	r3, #10
 8004b3e:	d901      	bls.n	8004b44 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 8004b40:	2303      	movs	r3, #3
 8004b42:	e04c      	b.n	8004bde <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 8004b44:	f7ff fc3c 	bl	80043c0 <LL_RCC_PLL_IsReady>
 8004b48:	4603      	mov	r3, r0
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d0f1      	beq.n	8004b32 <HAL_RCC_OscConfig+0x646>
 8004b4e:	e045      	b.n	8004bdc <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b50:	f7ff fc28 	bl	80043a4 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b54:	f7fe fa88 	bl	8003068 <HAL_GetTick>
 8004b58:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8004b5a:	e008      	b.n	8004b6e <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b5c:	f7fe fa84 	bl	8003068 <HAL_GetTick>
 8004b60:	4602      	mov	r2, r0
 8004b62:	697b      	ldr	r3, [r7, #20]
 8004b64:	1ad3      	subs	r3, r2, r3
 8004b66:	2b0a      	cmp	r3, #10
 8004b68:	d901      	bls.n	8004b6e <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8004b6a:	2303      	movs	r3, #3
 8004b6c:	e037      	b.n	8004bde <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8004b6e:	f7ff fc27 	bl	80043c0 <LL_RCC_PLL_IsReady>
 8004b72:	4603      	mov	r3, r0
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d1f1      	bne.n	8004b5c <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8004b78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b7c:	68da      	ldr	r2, [r3, #12]
 8004b7e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004b82:	4b1a      	ldr	r3, [pc, #104]	; (8004bec <HAL_RCC_OscConfig+0x700>)
 8004b84:	4013      	ands	r3, r2
 8004b86:	60cb      	str	r3, [r1, #12]
 8004b88:	e028      	b.n	8004bdc <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b8e:	2b01      	cmp	r3, #1
 8004b90:	d101      	bne.n	8004b96 <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 8004b92:	2301      	movs	r3, #1
 8004b94:	e023      	b.n	8004bde <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004b96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b9a:	68db      	ldr	r3, [r3, #12]
 8004b9c:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8004b9e:	69bb      	ldr	r3, [r7, #24]
 8004ba0:	f003 0203 	and.w	r2, r3, #3
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ba8:	429a      	cmp	r2, r3
 8004baa:	d115      	bne.n	8004bd8 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8004bac:	69bb      	ldr	r3, [r7, #24]
 8004bae:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bb6:	429a      	cmp	r2, r3
 8004bb8:	d10e      	bne.n	8004bd8 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8004bba:	69bb      	ldr	r3, [r7, #24]
 8004bbc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bc4:	021b      	lsls	r3, r3, #8
 8004bc6:	429a      	cmp	r2, r3
 8004bc8:	d106      	bne.n	8004bd8 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8004bca:	69bb      	ldr	r3, [r7, #24]
 8004bcc:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bd4:	429a      	cmp	r2, r3
 8004bd6:	d001      	beq.n	8004bdc <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 8004bd8:	2301      	movs	r3, #1
 8004bda:	e000      	b.n	8004bde <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 8004bdc:	2300      	movs	r3, #0
}
 8004bde:	4618      	mov	r0, r3
 8004be0:	3720      	adds	r7, #32
 8004be2:	46bd      	mov	sp, r7
 8004be4:	bd80      	pop	{r7, pc}
 8004be6:	bf00      	nop
 8004be8:	11c1808c 	.word	0x11c1808c
 8004bec:	eefefffc 	.word	0xeefefffc

08004bf0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b084      	sub	sp, #16
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
 8004bf8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d101      	bne.n	8004c04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c00:	2301      	movs	r3, #1
 8004c02:	e12c      	b.n	8004e5e <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004c04:	4b98      	ldr	r3, [pc, #608]	; (8004e68 <HAL_RCC_ClockConfig+0x278>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f003 0307 	and.w	r3, r3, #7
 8004c0c:	683a      	ldr	r2, [r7, #0]
 8004c0e:	429a      	cmp	r2, r3
 8004c10:	d91b      	bls.n	8004c4a <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c12:	4b95      	ldr	r3, [pc, #596]	; (8004e68 <HAL_RCC_ClockConfig+0x278>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f023 0207 	bic.w	r2, r3, #7
 8004c1a:	4993      	ldr	r1, [pc, #588]	; (8004e68 <HAL_RCC_ClockConfig+0x278>)
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004c22:	f7fe fa21 	bl	8003068 <HAL_GetTick>
 8004c26:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c28:	e008      	b.n	8004c3c <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004c2a:	f7fe fa1d 	bl	8003068 <HAL_GetTick>
 8004c2e:	4602      	mov	r2, r0
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	1ad3      	subs	r3, r2, r3
 8004c34:	2b02      	cmp	r3, #2
 8004c36:	d901      	bls.n	8004c3c <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8004c38:	2303      	movs	r3, #3
 8004c3a:	e110      	b.n	8004e5e <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c3c:	4b8a      	ldr	r3, [pc, #552]	; (8004e68 <HAL_RCC_ClockConfig+0x278>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f003 0307 	and.w	r3, r3, #7
 8004c44:	683a      	ldr	r2, [r7, #0]
 8004c46:	429a      	cmp	r2, r3
 8004c48:	d1ef      	bne.n	8004c2a <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f003 0302 	and.w	r3, r3, #2
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d016      	beq.n	8004c84 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	689b      	ldr	r3, [r3, #8]
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	f7ff fb02 	bl	8004264 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004c60:	f7fe fa02 	bl	8003068 <HAL_GetTick>
 8004c64:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004c66:	e008      	b.n	8004c7a <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004c68:	f7fe f9fe 	bl	8003068 <HAL_GetTick>
 8004c6c:	4602      	mov	r2, r0
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	1ad3      	subs	r3, r2, r3
 8004c72:	2b02      	cmp	r3, #2
 8004c74:	d901      	bls.n	8004c7a <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8004c76:	2303      	movs	r3, #3
 8004c78:	e0f1      	b.n	8004e5e <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004c7a:	f7ff fbdf 	bl	800443c <LL_RCC_IsActiveFlag_HPRE>
 8004c7e:	4603      	mov	r3, r0
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d0f1      	beq.n	8004c68 <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f003 0320 	and.w	r3, r3, #32
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d016      	beq.n	8004cbe <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	695b      	ldr	r3, [r3, #20]
 8004c94:	4618      	mov	r0, r3
 8004c96:	f7ff faf8 	bl	800428a <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004c9a:	f7fe f9e5 	bl	8003068 <HAL_GetTick>
 8004c9e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004ca0:	e008      	b.n	8004cb4 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004ca2:	f7fe f9e1 	bl	8003068 <HAL_GetTick>
 8004ca6:	4602      	mov	r2, r0
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	1ad3      	subs	r3, r2, r3
 8004cac:	2b02      	cmp	r3, #2
 8004cae:	d901      	bls.n	8004cb4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8004cb0:	2303      	movs	r3, #3
 8004cb2:	e0d4      	b.n	8004e5e <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004cb4:	f7ff fbd3 	bl	800445e <LL_RCC_IsActiveFlag_C2HPRE>
 8004cb8:	4603      	mov	r3, r0
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d0f1      	beq.n	8004ca2 <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d016      	beq.n	8004cf8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	699b      	ldr	r3, [r3, #24]
 8004cce:	4618      	mov	r0, r3
 8004cd0:	f7ff faf0 	bl	80042b4 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004cd4:	f7fe f9c8 	bl	8003068 <HAL_GetTick>
 8004cd8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8004cda:	e008      	b.n	8004cee <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004cdc:	f7fe f9c4 	bl	8003068 <HAL_GetTick>
 8004ce0:	4602      	mov	r2, r0
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	1ad3      	subs	r3, r2, r3
 8004ce6:	2b02      	cmp	r3, #2
 8004ce8:	d901      	bls.n	8004cee <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8004cea:	2303      	movs	r3, #3
 8004cec:	e0b7      	b.n	8004e5e <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8004cee:	f7ff fbc8 	bl	8004482 <LL_RCC_IsActiveFlag_SHDHPRE>
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d0f1      	beq.n	8004cdc <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f003 0304 	and.w	r3, r3, #4
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d016      	beq.n	8004d32 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	68db      	ldr	r3, [r3, #12]
 8004d08:	4618      	mov	r0, r3
 8004d0a:	f7ff fae9 	bl	80042e0 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004d0e:	f7fe f9ab 	bl	8003068 <HAL_GetTick>
 8004d12:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004d14:	e008      	b.n	8004d28 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004d16:	f7fe f9a7 	bl	8003068 <HAL_GetTick>
 8004d1a:	4602      	mov	r2, r0
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	1ad3      	subs	r3, r2, r3
 8004d20:	2b02      	cmp	r3, #2
 8004d22:	d901      	bls.n	8004d28 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8004d24:	2303      	movs	r3, #3
 8004d26:	e09a      	b.n	8004e5e <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004d28:	f7ff fbbd 	bl	80044a6 <LL_RCC_IsActiveFlag_PPRE1>
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d0f1      	beq.n	8004d16 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f003 0308 	and.w	r3, r3, #8
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d017      	beq.n	8004d6e <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	691b      	ldr	r3, [r3, #16]
 8004d42:	00db      	lsls	r3, r3, #3
 8004d44:	4618      	mov	r0, r3
 8004d46:	f7ff fade 	bl	8004306 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004d4a:	f7fe f98d 	bl	8003068 <HAL_GetTick>
 8004d4e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004d50:	e008      	b.n	8004d64 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004d52:	f7fe f989 	bl	8003068 <HAL_GetTick>
 8004d56:	4602      	mov	r2, r0
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	1ad3      	subs	r3, r2, r3
 8004d5c:	2b02      	cmp	r3, #2
 8004d5e:	d901      	bls.n	8004d64 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8004d60:	2303      	movs	r3, #3
 8004d62:	e07c      	b.n	8004e5e <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004d64:	f7ff fbb0 	bl	80044c8 <LL_RCC_IsActiveFlag_PPRE2>
 8004d68:	4603      	mov	r3, r0
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d0f1      	beq.n	8004d52 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f003 0301 	and.w	r3, r3, #1
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d043      	beq.n	8004e02 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	685b      	ldr	r3, [r3, #4]
 8004d7e:	2b02      	cmp	r3, #2
 8004d80:	d106      	bne.n	8004d90 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8004d82:	f7ff f956 	bl	8004032 <LL_RCC_HSE_IsReady>
 8004d86:	4603      	mov	r3, r0
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d11e      	bne.n	8004dca <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	e066      	b.n	8004e5e <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	2b03      	cmp	r3, #3
 8004d96:	d106      	bne.n	8004da6 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8004d98:	f7ff fb12 	bl	80043c0 <LL_RCC_PLL_IsReady>
 8004d9c:	4603      	mov	r3, r0
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d113      	bne.n	8004dca <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004da2:	2301      	movs	r3, #1
 8004da4:	e05b      	b.n	8004e5e <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d106      	bne.n	8004dbc <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8004dae:	f7ff f9f0 	bl	8004192 <LL_RCC_MSI_IsReady>
 8004db2:	4603      	mov	r3, r0
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d108      	bne.n	8004dca <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004db8:	2301      	movs	r3, #1
 8004dba:	e050      	b.n	8004e5e <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8004dbc:	f7ff f966 	bl	800408c <LL_RCC_HSI_IsReady>
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d101      	bne.n	8004dca <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	e049      	b.n	8004e5e <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	4618      	mov	r0, r3
 8004dd0:	f7ff fa2a 	bl	8004228 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004dd4:	f7fe f948 	bl	8003068 <HAL_GetTick>
 8004dd8:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004dda:	e00a      	b.n	8004df2 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ddc:	f7fe f944 	bl	8003068 <HAL_GetTick>
 8004de0:	4602      	mov	r2, r0
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	1ad3      	subs	r3, r2, r3
 8004de6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d901      	bls.n	8004df2 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8004dee:	2303      	movs	r3, #3
 8004df0:	e035      	b.n	8004e5e <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004df2:	f7ff fa2c 	bl	800424e <LL_RCC_GetSysClkSource>
 8004df6:	4602      	mov	r2, r0
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	009b      	lsls	r3, r3, #2
 8004dfe:	429a      	cmp	r2, r3
 8004e00:	d1ec      	bne.n	8004ddc <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004e02:	4b19      	ldr	r3, [pc, #100]	; (8004e68 <HAL_RCC_ClockConfig+0x278>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f003 0307 	and.w	r3, r3, #7
 8004e0a:	683a      	ldr	r2, [r7, #0]
 8004e0c:	429a      	cmp	r2, r3
 8004e0e:	d21b      	bcs.n	8004e48 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e10:	4b15      	ldr	r3, [pc, #84]	; (8004e68 <HAL_RCC_ClockConfig+0x278>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f023 0207 	bic.w	r2, r3, #7
 8004e18:	4913      	ldr	r1, [pc, #76]	; (8004e68 <HAL_RCC_ClockConfig+0x278>)
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004e20:	f7fe f922 	bl	8003068 <HAL_GetTick>
 8004e24:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e26:	e008      	b.n	8004e3a <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004e28:	f7fe f91e 	bl	8003068 <HAL_GetTick>
 8004e2c:	4602      	mov	r2, r0
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	1ad3      	subs	r3, r2, r3
 8004e32:	2b02      	cmp	r3, #2
 8004e34:	d901      	bls.n	8004e3a <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8004e36:	2303      	movs	r3, #3
 8004e38:	e011      	b.n	8004e5e <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e3a:	4b0b      	ldr	r3, [pc, #44]	; (8004e68 <HAL_RCC_ClockConfig+0x278>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f003 0307 	and.w	r3, r3, #7
 8004e42:	683a      	ldr	r2, [r7, #0]
 8004e44:	429a      	cmp	r2, r3
 8004e46:	d1ef      	bne.n	8004e28 <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004e48:	f000 f8b4 	bl	8004fb4 <HAL_RCC_GetHCLKFreq>
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	4a07      	ldr	r2, [pc, #28]	; (8004e6c <HAL_RCC_ClockConfig+0x27c>)
 8004e50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 8004e52:	4b07      	ldr	r3, [pc, #28]	; (8004e70 <HAL_RCC_ClockConfig+0x280>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4618      	mov	r0, r3
 8004e58:	f7fe fa24 	bl	80032a4 <HAL_InitTick>
 8004e5c:	4603      	mov	r3, r0
}
 8004e5e:	4618      	mov	r0, r3
 8004e60:	3710      	adds	r7, #16
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bd80      	pop	{r7, pc}
 8004e66:	bf00      	nop
 8004e68:	58004000 	.word	0x58004000
 8004e6c:	2000000c 	.word	0x2000000c
 8004e70:	20000010 	.word	0x20000010

08004e74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e74:	b590      	push	{r4, r7, lr}
 8004e76:	b087      	sub	sp, #28
 8004e78:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8004e7e:	2300      	movs	r3, #0
 8004e80:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e82:	f7ff f9e4 	bl	800424e <LL_RCC_GetSysClkSource>
 8004e86:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004e88:	f7ff facd 	bl	8004426 <LL_RCC_PLL_GetMainSource>
 8004e8c:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d005      	beq.n	8004ea0 <HAL_RCC_GetSysClockFreq+0x2c>
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	2b0c      	cmp	r3, #12
 8004e98:	d139      	bne.n	8004f0e <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2b01      	cmp	r3, #1
 8004e9e:	d136      	bne.n	8004f0e <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8004ea0:	f7ff f987 	bl	80041b2 <LL_RCC_MSI_IsEnabledRangeSelect>
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d115      	bne.n	8004ed6 <HAL_RCC_GetSysClockFreq+0x62>
 8004eaa:	f7ff f982 	bl	80041b2 <LL_RCC_MSI_IsEnabledRangeSelect>
 8004eae:	4603      	mov	r3, r0
 8004eb0:	2b01      	cmp	r3, #1
 8004eb2:	d106      	bne.n	8004ec2 <HAL_RCC_GetSysClockFreq+0x4e>
 8004eb4:	f7ff f98d 	bl	80041d2 <LL_RCC_MSI_GetRange>
 8004eb8:	4603      	mov	r3, r0
 8004eba:	0a1b      	lsrs	r3, r3, #8
 8004ebc:	f003 030f 	and.w	r3, r3, #15
 8004ec0:	e005      	b.n	8004ece <HAL_RCC_GetSysClockFreq+0x5a>
 8004ec2:	f7ff f991 	bl	80041e8 <LL_RCC_MSI_GetRangeAfterStandby>
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	0a1b      	lsrs	r3, r3, #8
 8004eca:	f003 030f 	and.w	r3, r3, #15
 8004ece:	4a36      	ldr	r2, [pc, #216]	; (8004fa8 <HAL_RCC_GetSysClockFreq+0x134>)
 8004ed0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ed4:	e014      	b.n	8004f00 <HAL_RCC_GetSysClockFreq+0x8c>
 8004ed6:	f7ff f96c 	bl	80041b2 <LL_RCC_MSI_IsEnabledRangeSelect>
 8004eda:	4603      	mov	r3, r0
 8004edc:	2b01      	cmp	r3, #1
 8004ede:	d106      	bne.n	8004eee <HAL_RCC_GetSysClockFreq+0x7a>
 8004ee0:	f7ff f977 	bl	80041d2 <LL_RCC_MSI_GetRange>
 8004ee4:	4603      	mov	r3, r0
 8004ee6:	091b      	lsrs	r3, r3, #4
 8004ee8:	f003 030f 	and.w	r3, r3, #15
 8004eec:	e005      	b.n	8004efa <HAL_RCC_GetSysClockFreq+0x86>
 8004eee:	f7ff f97b 	bl	80041e8 <LL_RCC_MSI_GetRangeAfterStandby>
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	091b      	lsrs	r3, r3, #4
 8004ef6:	f003 030f 	and.w	r3, r3, #15
 8004efa:	4a2b      	ldr	r2, [pc, #172]	; (8004fa8 <HAL_RCC_GetSysClockFreq+0x134>)
 8004efc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f00:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004f02:	68bb      	ldr	r3, [r7, #8]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d115      	bne.n	8004f34 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8004f08:	693b      	ldr	r3, [r7, #16]
 8004f0a:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004f0c:	e012      	b.n	8004f34 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004f0e:	68bb      	ldr	r3, [r7, #8]
 8004f10:	2b04      	cmp	r3, #4
 8004f12:	d102      	bne.n	8004f1a <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004f14:	4b25      	ldr	r3, [pc, #148]	; (8004fac <HAL_RCC_GetSysClockFreq+0x138>)
 8004f16:	617b      	str	r3, [r7, #20]
 8004f18:	e00c      	b.n	8004f34 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004f1a:	68bb      	ldr	r3, [r7, #8]
 8004f1c:	2b08      	cmp	r3, #8
 8004f1e:	d109      	bne.n	8004f34 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8004f20:	f7ff f85a 	bl	8003fd8 <LL_RCC_HSE_IsEnabledDiv2>
 8004f24:	4603      	mov	r3, r0
 8004f26:	2b01      	cmp	r3, #1
 8004f28:	d102      	bne.n	8004f30 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8004f2a:	4b20      	ldr	r3, [pc, #128]	; (8004fac <HAL_RCC_GetSysClockFreq+0x138>)
 8004f2c:	617b      	str	r3, [r7, #20]
 8004f2e:	e001      	b.n	8004f34 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8004f30:	4b1f      	ldr	r3, [pc, #124]	; (8004fb0 <HAL_RCC_GetSysClockFreq+0x13c>)
 8004f32:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004f34:	f7ff f98b 	bl	800424e <LL_RCC_GetSysClkSource>
 8004f38:	4603      	mov	r3, r0
 8004f3a:	2b0c      	cmp	r3, #12
 8004f3c:	d12f      	bne.n	8004f9e <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8004f3e:	f7ff fa72 	bl	8004426 <LL_RCC_PLL_GetMainSource>
 8004f42:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2b02      	cmp	r3, #2
 8004f48:	d003      	beq.n	8004f52 <HAL_RCC_GetSysClockFreq+0xde>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2b03      	cmp	r3, #3
 8004f4e:	d003      	beq.n	8004f58 <HAL_RCC_GetSysClockFreq+0xe4>
 8004f50:	e00d      	b.n	8004f6e <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8004f52:	4b16      	ldr	r3, [pc, #88]	; (8004fac <HAL_RCC_GetSysClockFreq+0x138>)
 8004f54:	60fb      	str	r3, [r7, #12]
        break;
 8004f56:	e00d      	b.n	8004f74 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8004f58:	f7ff f83e 	bl	8003fd8 <LL_RCC_HSE_IsEnabledDiv2>
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	2b01      	cmp	r3, #1
 8004f60:	d102      	bne.n	8004f68 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8004f62:	4b12      	ldr	r3, [pc, #72]	; (8004fac <HAL_RCC_GetSysClockFreq+0x138>)
 8004f64:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8004f66:	e005      	b.n	8004f74 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8004f68:	4b11      	ldr	r3, [pc, #68]	; (8004fb0 <HAL_RCC_GetSysClockFreq+0x13c>)
 8004f6a:	60fb      	str	r3, [r7, #12]
        break;
 8004f6c:	e002      	b.n	8004f74 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8004f6e:	693b      	ldr	r3, [r7, #16]
 8004f70:	60fb      	str	r3, [r7, #12]
        break;
 8004f72:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8004f74:	f7ff fa35 	bl	80043e2 <LL_RCC_PLL_GetN>
 8004f78:	4602      	mov	r2, r0
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	fb03 f402 	mul.w	r4, r3, r2
 8004f80:	f7ff fa46 	bl	8004410 <LL_RCC_PLL_GetDivider>
 8004f84:	4603      	mov	r3, r0
 8004f86:	091b      	lsrs	r3, r3, #4
 8004f88:	3301      	adds	r3, #1
 8004f8a:	fbb4 f4f3 	udiv	r4, r4, r3
 8004f8e:	f7ff fa34 	bl	80043fa <LL_RCC_PLL_GetR>
 8004f92:	4603      	mov	r3, r0
 8004f94:	0f5b      	lsrs	r3, r3, #29
 8004f96:	3301      	adds	r3, #1
 8004f98:	fbb4 f3f3 	udiv	r3, r4, r3
 8004f9c:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8004f9e:	697b      	ldr	r3, [r7, #20]
}
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	371c      	adds	r7, #28
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bd90      	pop	{r4, r7, pc}
 8004fa8:	0800cb7c 	.word	0x0800cb7c
 8004fac:	00f42400 	.word	0x00f42400
 8004fb0:	01e84800 	.word	0x01e84800

08004fb4 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004fb4:	b598      	push	{r3, r4, r7, lr}
 8004fb6:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8004fb8:	f7ff ff5c 	bl	8004e74 <HAL_RCC_GetSysClockFreq>
 8004fbc:	4604      	mov	r4, r0
 8004fbe:	f7ff f9b5 	bl	800432c <LL_RCC_GetAHBPrescaler>
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	091b      	lsrs	r3, r3, #4
 8004fc6:	f003 030f 	and.w	r3, r3, #15
 8004fca:	4a03      	ldr	r2, [pc, #12]	; (8004fd8 <HAL_RCC_GetHCLKFreq+0x24>)
 8004fcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004fd0:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	bd98      	pop	{r3, r4, r7, pc}
 8004fd8:	0800cb1c 	.word	0x0800cb1c

08004fdc <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004fdc:	b598      	push	{r3, r4, r7, lr}
 8004fde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004fe0:	f7ff ffe8 	bl	8004fb4 <HAL_RCC_GetHCLKFreq>
 8004fe4:	4604      	mov	r4, r0
 8004fe6:	f7ff f9b9 	bl	800435c <LL_RCC_GetAPB1Prescaler>
 8004fea:	4603      	mov	r3, r0
 8004fec:	0a1b      	lsrs	r3, r3, #8
 8004fee:	4a03      	ldr	r2, [pc, #12]	; (8004ffc <HAL_RCC_GetPCLK1Freq+0x20>)
 8004ff0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ff4:	fa24 f303 	lsr.w	r3, r4, r3
}
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	bd98      	pop	{r3, r4, r7, pc}
 8004ffc:	0800cb5c 	.word	0x0800cb5c

08005000 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005000:	b598      	push	{r3, r4, r7, lr}
 8005002:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8005004:	f7ff ffd6 	bl	8004fb4 <HAL_RCC_GetHCLKFreq>
 8005008:	4604      	mov	r4, r0
 800500a:	f7ff f9b2 	bl	8004372 <LL_RCC_GetAPB2Prescaler>
 800500e:	4603      	mov	r3, r0
 8005010:	0adb      	lsrs	r3, r3, #11
 8005012:	4a03      	ldr	r2, [pc, #12]	; (8005020 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005014:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005018:	fa24 f303 	lsr.w	r3, r4, r3
}
 800501c:	4618      	mov	r0, r3
 800501e:	bd98      	pop	{r3, r4, r7, pc}
 8005020:	0800cb5c 	.word	0x0800cb5c

08005024 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8005024:	b590      	push	{r4, r7, lr}
 8005026:	b085      	sub	sp, #20
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	091b      	lsrs	r3, r3, #4
 8005030:	f003 030f 	and.w	r3, r3, #15
 8005034:	4a10      	ldr	r2, [pc, #64]	; (8005078 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8005036:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800503a:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 800503c:	f7ff f981 	bl	8004342 <LL_RCC_GetAHB3Prescaler>
 8005040:	4603      	mov	r3, r0
 8005042:	091b      	lsrs	r3, r3, #4
 8005044:	f003 030f 	and.w	r3, r3, #15
 8005048:	4a0c      	ldr	r2, [pc, #48]	; (800507c <RCC_SetFlashLatencyFromMSIRange+0x58>)
 800504a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800504e:	68fa      	ldr	r2, [r7, #12]
 8005050:	fbb2 f3f3 	udiv	r3, r2, r3
 8005054:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	4a09      	ldr	r2, [pc, #36]	; (8005080 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 800505a:	fba2 2303 	umull	r2, r3, r2, r3
 800505e:	0c9c      	lsrs	r4, r3, #18
 8005060:	f7fe ff80 	bl	8003f64 <HAL_PWREx_GetVoltageRange>
 8005064:	4603      	mov	r3, r0
 8005066:	4619      	mov	r1, r3
 8005068:	4620      	mov	r0, r4
 800506a:	f000 f80b 	bl	8005084 <RCC_SetFlashLatency>
 800506e:	4603      	mov	r3, r0
}
 8005070:	4618      	mov	r0, r3
 8005072:	3714      	adds	r7, #20
 8005074:	46bd      	mov	sp, r7
 8005076:	bd90      	pop	{r4, r7, pc}
 8005078:	0800cb7c 	.word	0x0800cb7c
 800507c:	0800cb1c 	.word	0x0800cb1c
 8005080:	431bde83 	.word	0x431bde83

08005084 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b08e      	sub	sp, #56	; 0x38
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
 800508c:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 800508e:	4a3a      	ldr	r2, [pc, #232]	; (8005178 <RCC_SetFlashLatency+0xf4>)
 8005090:	f107 0320 	add.w	r3, r7, #32
 8005094:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005098:	6018      	str	r0, [r3, #0]
 800509a:	3304      	adds	r3, #4
 800509c:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 800509e:	4a37      	ldr	r2, [pc, #220]	; (800517c <RCC_SetFlashLatency+0xf8>)
 80050a0:	f107 0318 	add.w	r3, r7, #24
 80050a4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80050a8:	6018      	str	r0, [r3, #0]
 80050aa:	3304      	adds	r3, #4
 80050ac:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 80050ae:	4a34      	ldr	r2, [pc, #208]	; (8005180 <RCC_SetFlashLatency+0xfc>)
 80050b0:	f107 030c 	add.w	r3, r7, #12
 80050b4:	ca07      	ldmia	r2, {r0, r1, r2}
 80050b6:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80050ba:	2300      	movs	r3, #0
 80050bc:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050c4:	d11b      	bne.n	80050fe <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80050c6:	2300      	movs	r3, #0
 80050c8:	633b      	str	r3, [r7, #48]	; 0x30
 80050ca:	e014      	b.n	80050f6 <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80050cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050ce:	005b      	lsls	r3, r3, #1
 80050d0:	3338      	adds	r3, #56	; 0x38
 80050d2:	443b      	add	r3, r7
 80050d4:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80050d8:	461a      	mov	r2, r3
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	4293      	cmp	r3, r2
 80050de:	d807      	bhi.n	80050f0 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80050e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050e2:	009b      	lsls	r3, r3, #2
 80050e4:	3338      	adds	r3, #56	; 0x38
 80050e6:	443b      	add	r3, r7
 80050e8:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80050ec:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80050ee:	e021      	b.n	8005134 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80050f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050f2:	3301      	adds	r3, #1
 80050f4:	633b      	str	r3, [r7, #48]	; 0x30
 80050f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050f8:	2b02      	cmp	r3, #2
 80050fa:	d9e7      	bls.n	80050cc <RCC_SetFlashLatency+0x48>
 80050fc:	e01a      	b.n	8005134 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80050fe:	2300      	movs	r3, #0
 8005100:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005102:	e014      	b.n	800512e <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8005104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005106:	005b      	lsls	r3, r3, #1
 8005108:	3338      	adds	r3, #56	; 0x38
 800510a:	443b      	add	r3, r7
 800510c:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8005110:	461a      	mov	r2, r3
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	4293      	cmp	r3, r2
 8005116:	d807      	bhi.n	8005128 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8005118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800511a:	009b      	lsls	r3, r3, #2
 800511c:	3338      	adds	r3, #56	; 0x38
 800511e:	443b      	add	r3, r7
 8005120:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8005124:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005126:	e005      	b.n	8005134 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800512a:	3301      	adds	r3, #1
 800512c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800512e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005130:	2b02      	cmp	r3, #2
 8005132:	d9e7      	bls.n	8005104 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005134:	4b13      	ldr	r3, [pc, #76]	; (8005184 <RCC_SetFlashLatency+0x100>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f023 0207 	bic.w	r2, r3, #7
 800513c:	4911      	ldr	r1, [pc, #68]	; (8005184 <RCC_SetFlashLatency+0x100>)
 800513e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005140:	4313      	orrs	r3, r2
 8005142:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005144:	f7fd ff90 	bl	8003068 <HAL_GetTick>
 8005148:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800514a:	e008      	b.n	800515e <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800514c:	f7fd ff8c 	bl	8003068 <HAL_GetTick>
 8005150:	4602      	mov	r2, r0
 8005152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005154:	1ad3      	subs	r3, r2, r3
 8005156:	2b02      	cmp	r3, #2
 8005158:	d901      	bls.n	800515e <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 800515a:	2303      	movs	r3, #3
 800515c:	e007      	b.n	800516e <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800515e:	4b09      	ldr	r3, [pc, #36]	; (8005184 <RCC_SetFlashLatency+0x100>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f003 0307 	and.w	r3, r3, #7
 8005166:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005168:	429a      	cmp	r2, r3
 800516a:	d1ef      	bne.n	800514c <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 800516c:	2300      	movs	r3, #0
}
 800516e:	4618      	mov	r0, r3
 8005170:	3738      	adds	r7, #56	; 0x38
 8005172:	46bd      	mov	sp, r7
 8005174:	bd80      	pop	{r7, pc}
 8005176:	bf00      	nop
 8005178:	0800cadc 	.word	0x0800cadc
 800517c:	0800cae4 	.word	0x0800cae4
 8005180:	0800caec 	.word	0x0800caec
 8005184:	58004000 	.word	0x58004000

08005188 <LL_RCC_LSE_IsReady>:
{
 8005188:	b480      	push	{r7}
 800518a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800518c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005190:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005194:	f003 0302 	and.w	r3, r3, #2
 8005198:	2b02      	cmp	r3, #2
 800519a:	d101      	bne.n	80051a0 <LL_RCC_LSE_IsReady+0x18>
 800519c:	2301      	movs	r3, #1
 800519e:	e000      	b.n	80051a2 <LL_RCC_LSE_IsReady+0x1a>
 80051a0:	2300      	movs	r3, #0
}
 80051a2:	4618      	mov	r0, r3
 80051a4:	46bd      	mov	sp, r7
 80051a6:	bc80      	pop	{r7}
 80051a8:	4770      	bx	lr

080051aa <LL_RCC_SetUSARTClockSource>:
{
 80051aa:	b480      	push	{r7}
 80051ac:	b083      	sub	sp, #12
 80051ae:	af00      	add	r7, sp, #0
 80051b0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 80051b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051b6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	0c1b      	lsrs	r3, r3, #16
 80051be:	43db      	mvns	r3, r3
 80051c0:	401a      	ands	r2, r3
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	b29b      	uxth	r3, r3
 80051c6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80051ca:	4313      	orrs	r3, r2
 80051cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80051d0:	bf00      	nop
 80051d2:	370c      	adds	r7, #12
 80051d4:	46bd      	mov	sp, r7
 80051d6:	bc80      	pop	{r7}
 80051d8:	4770      	bx	lr

080051da <LL_RCC_SetI2SClockSource>:
{
 80051da:	b480      	push	{r7}
 80051dc:	b083      	sub	sp, #12
 80051de:	af00      	add	r7, sp, #0
 80051e0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 80051e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051ea:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80051ee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	4313      	orrs	r3, r2
 80051f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80051fa:	bf00      	nop
 80051fc:	370c      	adds	r7, #12
 80051fe:	46bd      	mov	sp, r7
 8005200:	bc80      	pop	{r7}
 8005202:	4770      	bx	lr

08005204 <LL_RCC_SetLPUARTClockSource>:
{
 8005204:	b480      	push	{r7}
 8005206:	b083      	sub	sp, #12
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800520c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005210:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005214:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005218:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	4313      	orrs	r3, r2
 8005220:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005224:	bf00      	nop
 8005226:	370c      	adds	r7, #12
 8005228:	46bd      	mov	sp, r7
 800522a:	bc80      	pop	{r7}
 800522c:	4770      	bx	lr

0800522e <LL_RCC_SetI2CClockSource>:
{
 800522e:	b480      	push	{r7}
 8005230:	b083      	sub	sp, #12
 8005232:	af00      	add	r7, sp, #0
 8005234:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8005236:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800523a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	091b      	lsrs	r3, r3, #4
 8005242:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8005246:	43db      	mvns	r3, r3
 8005248:	401a      	ands	r2, r3
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	011b      	lsls	r3, r3, #4
 800524e:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8005252:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005256:	4313      	orrs	r3, r2
 8005258:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800525c:	bf00      	nop
 800525e:	370c      	adds	r7, #12
 8005260:	46bd      	mov	sp, r7
 8005262:	bc80      	pop	{r7}
 8005264:	4770      	bx	lr

08005266 <LL_RCC_SetLPTIMClockSource>:
{
 8005266:	b480      	push	{r7}
 8005268:	b083      	sub	sp, #12
 800526a:	af00      	add	r7, sp, #0
 800526c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800526e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005272:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	0c1b      	lsrs	r3, r3, #16
 800527a:	041b      	lsls	r3, r3, #16
 800527c:	43db      	mvns	r3, r3
 800527e:	401a      	ands	r2, r3
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	041b      	lsls	r3, r3, #16
 8005284:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005288:	4313      	orrs	r3, r2
 800528a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800528e:	bf00      	nop
 8005290:	370c      	adds	r7, #12
 8005292:	46bd      	mov	sp, r7
 8005294:	bc80      	pop	{r7}
 8005296:	4770      	bx	lr

08005298 <LL_RCC_SetRNGClockSource>:
{
 8005298:	b480      	push	{r7}
 800529a:	b083      	sub	sp, #12
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80052a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052a8:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80052ac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	4313      	orrs	r3, r2
 80052b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80052b8:	bf00      	nop
 80052ba:	370c      	adds	r7, #12
 80052bc:	46bd      	mov	sp, r7
 80052be:	bc80      	pop	{r7}
 80052c0:	4770      	bx	lr

080052c2 <LL_RCC_SetADCClockSource>:
{
 80052c2:	b480      	push	{r7}
 80052c4:	b083      	sub	sp, #12
 80052c6:	af00      	add	r7, sp, #0
 80052c8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80052ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052d2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80052d6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	4313      	orrs	r3, r2
 80052de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80052e2:	bf00      	nop
 80052e4:	370c      	adds	r7, #12
 80052e6:	46bd      	mov	sp, r7
 80052e8:	bc80      	pop	{r7}
 80052ea:	4770      	bx	lr

080052ec <LL_RCC_SetRTCClockSource>:
{
 80052ec:	b480      	push	{r7}
 80052ee:	b083      	sub	sp, #12
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80052f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005300:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	4313      	orrs	r3, r2
 8005308:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800530c:	bf00      	nop
 800530e:	370c      	adds	r7, #12
 8005310:	46bd      	mov	sp, r7
 8005312:	bc80      	pop	{r7}
 8005314:	4770      	bx	lr

08005316 <LL_RCC_GetRTCClockSource>:
{
 8005316:	b480      	push	{r7}
 8005318:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800531a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800531e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005322:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8005326:	4618      	mov	r0, r3
 8005328:	46bd      	mov	sp, r7
 800532a:	bc80      	pop	{r7}
 800532c:	4770      	bx	lr

0800532e <LL_RCC_ForceBackupDomainReset>:
{
 800532e:	b480      	push	{r7}
 8005330:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005332:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005336:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800533a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800533e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005342:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005346:	bf00      	nop
 8005348:	46bd      	mov	sp, r7
 800534a:	bc80      	pop	{r7}
 800534c:	4770      	bx	lr

0800534e <LL_RCC_ReleaseBackupDomainReset>:
{
 800534e:	b480      	push	{r7}
 8005350:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005352:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005356:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800535a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800535e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005362:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005366:	bf00      	nop
 8005368:	46bd      	mov	sp, r7
 800536a:	bc80      	pop	{r7}
 800536c:	4770      	bx	lr
	...

08005370 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b086      	sub	sp, #24
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8005378:	2300      	movs	r3, #0
 800537a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 800537c:	2300      	movs	r3, #0
 800537e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8005380:	2300      	movs	r3, #0
 8005382:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800538c:	2b00      	cmp	r3, #0
 800538e:	d058      	beq.n	8005442 <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8005390:	f7fe fdda 	bl	8003f48 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005394:	f7fd fe68 	bl	8003068 <HAL_GetTick>
 8005398:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 800539a:	e009      	b.n	80053b0 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800539c:	f7fd fe64 	bl	8003068 <HAL_GetTick>
 80053a0:	4602      	mov	r2, r0
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	1ad3      	subs	r3, r2, r3
 80053a6:	2b02      	cmp	r3, #2
 80053a8:	d902      	bls.n	80053b0 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 80053aa:	2303      	movs	r3, #3
 80053ac:	74fb      	strb	r3, [r7, #19]
        break;
 80053ae:	e006      	b.n	80053be <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 80053b0:	4b7b      	ldr	r3, [pc, #492]	; (80055a0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053bc:	d1ee      	bne.n	800539c <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 80053be:	7cfb      	ldrb	r3, [r7, #19]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d13c      	bne.n	800543e <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 80053c4:	f7ff ffa7 	bl	8005316 <LL_RCC_GetRTCClockSource>
 80053c8:	4602      	mov	r2, r0
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053ce:	429a      	cmp	r2, r3
 80053d0:	d00f      	beq.n	80053f2 <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80053d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053de:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80053e0:	f7ff ffa5 	bl	800532e <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 80053e4:	f7ff ffb3 	bl	800534e <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80053e8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80053ec:	697b      	ldr	r3, [r7, #20]
 80053ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 80053f2:	697b      	ldr	r3, [r7, #20]
 80053f4:	f003 0302 	and.w	r3, r3, #2
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d014      	beq.n	8005426 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053fc:	f7fd fe34 	bl	8003068 <HAL_GetTick>
 8005400:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8005402:	e00b      	b.n	800541c <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005404:	f7fd fe30 	bl	8003068 <HAL_GetTick>
 8005408:	4602      	mov	r2, r0
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	1ad3      	subs	r3, r2, r3
 800540e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005412:	4293      	cmp	r3, r2
 8005414:	d902      	bls.n	800541c <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8005416:	2303      	movs	r3, #3
 8005418:	74fb      	strb	r3, [r7, #19]
            break;
 800541a:	e004      	b.n	8005426 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 800541c:	f7ff feb4 	bl	8005188 <LL_RCC_LSE_IsReady>
 8005420:	4603      	mov	r3, r0
 8005422:	2b01      	cmp	r3, #1
 8005424:	d1ee      	bne.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8005426:	7cfb      	ldrb	r3, [r7, #19]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d105      	bne.n	8005438 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005430:	4618      	mov	r0, r3
 8005432:	f7ff ff5b 	bl	80052ec <LL_RCC_SetRTCClockSource>
 8005436:	e004      	b.n	8005442 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005438:	7cfb      	ldrb	r3, [r7, #19]
 800543a:	74bb      	strb	r3, [r7, #18]
 800543c:	e001      	b.n	8005442 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800543e:	7cfb      	ldrb	r3, [r7, #19]
 8005440:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f003 0301 	and.w	r3, r3, #1
 800544a:	2b00      	cmp	r3, #0
 800544c:	d004      	beq.n	8005458 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	685b      	ldr	r3, [r3, #4]
 8005452:	4618      	mov	r0, r3
 8005454:	f7ff fea9 	bl	80051aa <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f003 0302 	and.w	r3, r3, #2
 8005460:	2b00      	cmp	r3, #0
 8005462:	d004      	beq.n	800546e <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	689b      	ldr	r3, [r3, #8]
 8005468:	4618      	mov	r0, r3
 800546a:	f7ff fe9e 	bl	80051aa <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f003 0320 	and.w	r3, r3, #32
 8005476:	2b00      	cmp	r3, #0
 8005478:	d004      	beq.n	8005484 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	691b      	ldr	r3, [r3, #16]
 800547e:	4618      	mov	r0, r3
 8005480:	f7ff fec0 	bl	8005204 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800548c:	2b00      	cmp	r3, #0
 800548e:	d004      	beq.n	800549a <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6a1b      	ldr	r3, [r3, #32]
 8005494:	4618      	mov	r0, r3
 8005496:	f7ff fee6 	bl	8005266 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d004      	beq.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054aa:	4618      	mov	r0, r3
 80054ac:	f7ff fedb 	bl	8005266 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d004      	beq.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054c0:	4618      	mov	r0, r3
 80054c2:	f7ff fed0 	bl	8005266 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d004      	beq.n	80054dc <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	695b      	ldr	r3, [r3, #20]
 80054d6:	4618      	mov	r0, r3
 80054d8:	f7ff fea9 	bl	800522e <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d004      	beq.n	80054f2 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	699b      	ldr	r3, [r3, #24]
 80054ec:	4618      	mov	r0, r3
 80054ee:	f7ff fe9e 	bl	800522e <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d004      	beq.n	8005508 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	69db      	ldr	r3, [r3, #28]
 8005502:	4618      	mov	r0, r3
 8005504:	f7ff fe93 	bl	800522e <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f003 0310 	and.w	r3, r3, #16
 8005510:	2b00      	cmp	r3, #0
 8005512:	d011      	beq.n	8005538 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	68db      	ldr	r3, [r3, #12]
 8005518:	4618      	mov	r0, r3
 800551a:	f7ff fe5e 	bl	80051da <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	68db      	ldr	r3, [r3, #12]
 8005522:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005526:	d107      	bne.n	8005538 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8005528:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800552c:	68db      	ldr	r3, [r3, #12]
 800552e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005532:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005536:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005540:	2b00      	cmp	r3, #0
 8005542:	d010      	beq.n	8005566 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005548:	4618      	mov	r0, r3
 800554a:	f7ff fea5 	bl	8005298 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005552:	2b00      	cmp	r3, #0
 8005554:	d107      	bne.n	8005566 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8005556:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800555a:	68db      	ldr	r3, [r3, #12]
 800555c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005560:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005564:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800556e:	2b00      	cmp	r3, #0
 8005570:	d011      	beq.n	8005596 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005576:	4618      	mov	r0, r3
 8005578:	f7ff fea3 	bl	80052c2 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005580:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005584:	d107      	bne.n	8005596 <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005586:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800558a:	68db      	ldr	r3, [r3, #12]
 800558c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005590:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005594:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8005596:	7cbb      	ldrb	r3, [r7, #18]
}
 8005598:	4618      	mov	r0, r3
 800559a:	3718      	adds	r7, #24
 800559c:	46bd      	mov	sp, r7
 800559e:	bd80      	pop	{r7, pc}
 80055a0:	58000400 	.word	0x58000400

080055a4 <LL_PWR_SetRadioBusyTrigger>:
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_NONE
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_WU_IT
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRadioBusyTrigger(uint32_t RadioBusyTrigger)
{
 80055a4:	b480      	push	{r7}
 80055a6:	b083      	sub	sp, #12
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 80055ac:	4b06      	ldr	r3, [pc, #24]	; (80055c8 <LL_PWR_SetRadioBusyTrigger+0x24>)
 80055ae:	689b      	ldr	r3, [r3, #8]
 80055b0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80055b4:	4904      	ldr	r1, [pc, #16]	; (80055c8 <LL_PWR_SetRadioBusyTrigger+0x24>)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	4313      	orrs	r3, r2
 80055ba:	608b      	str	r3, [r1, #8]
}
 80055bc:	bf00      	nop
 80055be:	370c      	adds	r7, #12
 80055c0:	46bd      	mov	sp, r7
 80055c2:	bc80      	pop	{r7}
 80055c4:	4770      	bx	lr
 80055c6:	bf00      	nop
 80055c8:	58000400 	.word	0x58000400

080055cc <LL_PWR_UnselectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level high.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_UnselectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_UnselectSUBGHZSPI_NSS(void)
{
 80055cc:	b480      	push	{r7}
 80055ce:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80055d0:	4b05      	ldr	r3, [pc, #20]	; (80055e8 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 80055d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055d6:	4a04      	ldr	r2, [pc, #16]	; (80055e8 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 80055d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80055e0:	bf00      	nop
 80055e2:	46bd      	mov	sp, r7
 80055e4:	bc80      	pop	{r7}
 80055e6:	4770      	bx	lr
 80055e8:	58000400 	.word	0x58000400

080055ec <LL_PWR_SelectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level low.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_SelectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SelectSUBGHZSPI_NSS(void)
{
 80055ec:	b480      	push	{r7}
 80055ee:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80055f0:	4b05      	ldr	r3, [pc, #20]	; (8005608 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 80055f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055f6:	4a04      	ldr	r2, [pc, #16]	; (8005608 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 80055f8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80055fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005600:	bf00      	nop
 8005602:	46bd      	mov	sp, r7
 8005604:	bc80      	pop	{r7}
 8005606:	4770      	bx	lr
 8005608:	58000400 	.word	0x58000400

0800560c <LL_PWR_ClearFlag_RFBUSY>:
  * @brief  Clear radio busy flag
  * @rmtoll SCR          CRFBUSYF      LL_PWR_ClearFlag_RFBUSY
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_RFBUSY(void)
{
 800560c:	b480      	push	{r7}
 800560e:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8005610:	4b03      	ldr	r3, [pc, #12]	; (8005620 <LL_PWR_ClearFlag_RFBUSY+0x14>)
 8005612:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005616:	619a      	str	r2, [r3, #24]
}
 8005618:	bf00      	nop
 800561a:	46bd      	mov	sp, r7
 800561c:	bc80      	pop	{r7}
 800561e:	4770      	bx	lr
 8005620:	58000400 	.word	0x58000400

08005624 <LL_PWR_IsActiveFlag_RFBUSYS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYS       LL_PWR_IsActiveFlag_RFBUSYS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYS(void)
{
 8005624:	b480      	push	{r7}
 8005626:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8005628:	4b06      	ldr	r3, [pc, #24]	; (8005644 <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 800562a:	695b      	ldr	r3, [r3, #20]
 800562c:	f003 0302 	and.w	r3, r3, #2
 8005630:	2b02      	cmp	r3, #2
 8005632:	d101      	bne.n	8005638 <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 8005634:	2301      	movs	r3, #1
 8005636:	e000      	b.n	800563a <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 8005638:	2300      	movs	r3, #0
}
 800563a:	4618      	mov	r0, r3
 800563c:	46bd      	mov	sp, r7
 800563e:	bc80      	pop	{r7}
 8005640:	4770      	bx	lr
 8005642:	bf00      	nop
 8005644:	58000400 	.word	0x58000400

08005648 <LL_PWR_IsActiveFlag_RFBUSYMS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYMS      LL_PWR_IsActiveFlag_RFBUSYMS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYMS(void)
{
 8005648:	b480      	push	{r7}
 800564a:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 800564c:	4b06      	ldr	r3, [pc, #24]	; (8005668 <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 800564e:	695b      	ldr	r3, [r3, #20]
 8005650:	f003 0304 	and.w	r3, r3, #4
 8005654:	2b04      	cmp	r3, #4
 8005656:	d101      	bne.n	800565c <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 8005658:	2301      	movs	r3, #1
 800565a:	e000      	b.n	800565e <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 800565c:	2300      	movs	r3, #0
}
 800565e:	4618      	mov	r0, r3
 8005660:	46bd      	mov	sp, r7
 8005662:	bc80      	pop	{r7}
 8005664:	4770      	bx	lr
 8005666:	bf00      	nop
 8005668:	58000400 	.word	0x58000400

0800566c <LL_RCC_RF_DisableReset>:
{
 800566c:	b480      	push	{r7}
 800566e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8005670:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005674:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005678:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800567c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005680:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8005684:	bf00      	nop
 8005686:	46bd      	mov	sp, r7
 8005688:	bc80      	pop	{r7}
 800568a:	4770      	bx	lr

0800568c <LL_RCC_IsRFUnderReset>:
{
 800568c:	b480      	push	{r7}
 800568e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8005690:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005694:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005698:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800569c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80056a0:	d101      	bne.n	80056a6 <LL_RCC_IsRFUnderReset+0x1a>
 80056a2:	2301      	movs	r3, #1
 80056a4:	e000      	b.n	80056a8 <LL_RCC_IsRFUnderReset+0x1c>
 80056a6:	2300      	movs	r3, #0
}
 80056a8:	4618      	mov	r0, r3
 80056aa:	46bd      	mov	sp, r7
 80056ac:	bc80      	pop	{r7}
 80056ae:	4770      	bx	lr

080056b0 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 80056b0:	b480      	push	{r7}
 80056b2:	b083      	sub	sp, #12
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80056b8:	4b06      	ldr	r3, [pc, #24]	; (80056d4 <LL_EXTI_EnableIT_32_63+0x24>)
 80056ba:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80056be:	4905      	ldr	r1, [pc, #20]	; (80056d4 <LL_EXTI_EnableIT_32_63+0x24>)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	4313      	orrs	r3, r2
 80056c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80056c8:	bf00      	nop
 80056ca:	370c      	adds	r7, #12
 80056cc:	46bd      	mov	sp, r7
 80056ce:	bc80      	pop	{r7}
 80056d0:	4770      	bx	lr
 80056d2:	bf00      	nop
 80056d4:	58000800 	.word	0x58000800

080056d8 <HAL_SUBGHZ_Init>:
  *         set the state to HAL_SUBGHZ_STATE_RESET_RF_READY with __HAL_SUBGHZ_RESET_HANDLE_STATE_RF_READY
  *         to avoid the reset of Radio peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b084      	sub	sp, #16
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  HAL_SUBGHZ_StateTypeDef subghz_state;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d103      	bne.n	80056ee <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 80056e6:	2301      	movs	r3, #1
 80056e8:	73fb      	strb	r3, [r7, #15]
    return status;
 80056ea:	7bfb      	ldrb	r3, [r7, #15]
 80056ec:	e052      	b.n	8005794 <HAL_SUBGHZ_Init+0xbc>
  }
  else
  {
    status = HAL_OK;
 80056ee:	2300      	movs	r3, #0
 80056f0:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  subghz_state = hsubghz->State;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	799b      	ldrb	r3, [r3, #6]
 80056f6:	73bb      	strb	r3, [r7, #14]
  if ((subghz_state == HAL_SUBGHZ_STATE_RESET) ||
 80056f8:	7bbb      	ldrb	r3, [r7, #14]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d002      	beq.n	8005704 <HAL_SUBGHZ_Init+0x2c>
 80056fe:	7bbb      	ldrb	r3, [r7, #14]
 8005700:	2b03      	cmp	r3, #3
 8005702:	d109      	bne.n	8005718 <HAL_SUBGHZ_Init+0x40>
      (subghz_state == HAL_SUBGHZ_STATE_RESET_RF_READY))
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2200      	movs	r2, #0
 8005708:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 800570a:	6878      	ldr	r0, [r7, #4]
 800570c:	f7fd fbf8 	bl	8002f00 <HAL_SUBGHZ_MspInit>
#if defined(CM0PLUS)
    /* Enable EXTI 44 : Radio IRQ ITs for CPU2 */
    LL_C2_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
#else
    /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
    LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 8005710:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8005714:	f7ff ffcc 	bl	80056b0 <LL_EXTI_EnableIT_32_63>
#endif /* CM0PLUS */
  }

  if (subghz_state == HAL_SUBGHZ_STATE_RESET)
 8005718:	7bbb      	ldrb	r3, [r7, #14]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d126      	bne.n	800576c <HAL_SUBGHZ_Init+0x94>
  {
    /* Reinitialize Radio peripheral only if SUBGHZ is in full RESET state */
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2202      	movs	r2, #2
 8005722:	719a      	strb	r2, [r3, #6]

    /* De-asserts the reset signal of the Radio peripheral */
    LL_RCC_RF_DisableReset();
 8005724:	f7ff ffa2 	bl	800566c <LL_RCC_RF_DisableReset>

    /* Verify that Radio in reset status flag is set */
    count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8005728:	4b1c      	ldr	r3, [pc, #112]	; (800579c <HAL_SUBGHZ_Init+0xc4>)
 800572a:	681a      	ldr	r2, [r3, #0]
 800572c:	4613      	mov	r3, r2
 800572e:	00db      	lsls	r3, r3, #3
 8005730:	1a9b      	subs	r3, r3, r2
 8005732:	009b      	lsls	r3, r3, #2
 8005734:	0cdb      	lsrs	r3, r3, #19
 8005736:	2264      	movs	r2, #100	; 0x64
 8005738:	fb02 f303 	mul.w	r3, r2, r3
 800573c:	60bb      	str	r3, [r7, #8]

    do
    {
      if (count == 0U)
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d105      	bne.n	8005750 <HAL_SUBGHZ_Init+0x78>
      {
        status  = HAL_ERROR;
 8005744:	2301      	movs	r3, #1
 8005746:	73fb      	strb	r3, [r7, #15]
        hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2201      	movs	r2, #1
 800574c:	609a      	str	r2, [r3, #8]
        break;
 800574e:	e007      	b.n	8005760 <HAL_SUBGHZ_Init+0x88>
      }
      count--;
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	3b01      	subs	r3, #1
 8005754:	60bb      	str	r3, [r7, #8]
    } while (LL_RCC_IsRFUnderReset() != 0UL);
 8005756:	f7ff ff99 	bl	800568c <LL_RCC_IsRFUnderReset>
 800575a:	4603      	mov	r3, r0
 800575c:	2b00      	cmp	r3, #0
 800575e:	d1ee      	bne.n	800573e <HAL_SUBGHZ_Init+0x66>

    /* Asserts the reset signal of the Radio peripheral */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8005760:	f7ff ff34 	bl	80055cc <LL_PWR_UnselectSUBGHZSPI_NSS>
#if defined(CM0PLUS)
    /* Enable wakeup signal of the Radio peripheral */
    LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
    /* Enable wakeup signal of the Radio peripheral */
    LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 8005764:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8005768:	f7ff ff1c 	bl	80055a4 <LL_PWR_SetRadioBusyTrigger>
#endif /* CM0PLUS */
  }

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 800576c:	f7ff ff4e 	bl	800560c <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 8005770:	7bfb      	ldrb	r3, [r7, #15]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d10a      	bne.n	800578c <HAL_SUBGHZ_Init+0xb4>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4618      	mov	r0, r3
 800577c:	f000 faac 	bl	8005cd8 <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2201      	movs	r2, #1
 8005784:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2200      	movs	r2, #0
 800578a:	609a      	str	r2, [r3, #8]
  }

  hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2201      	movs	r2, #1
 8005790:	719a      	strb	r2, [r3, #6]

  return status;
 8005792:	7bfb      	ldrb	r3, [r7, #15]
}
 8005794:	4618      	mov	r0, r3
 8005796:	3710      	adds	r7, #16
 8005798:	46bd      	mov	sp, r7
 800579a:	bd80      	pop	{r7, pc}
 800579c:	2000000c 	.word	0x2000000c

080057a0 <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b086      	sub	sp, #24
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	60f8      	str	r0, [r7, #12]
 80057a8:	607a      	str	r2, [r7, #4]
 80057aa:	461a      	mov	r2, r3
 80057ac:	460b      	mov	r3, r1
 80057ae:	817b      	strh	r3, [r7, #10]
 80057b0:	4613      	mov	r3, r2
 80057b2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	799b      	ldrb	r3, [r3, #6]
 80057b8:	b2db      	uxtb	r3, r3
 80057ba:	2b01      	cmp	r3, #1
 80057bc:	d14a      	bne.n	8005854 <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	795b      	ldrb	r3, [r3, #5]
 80057c2:	2b01      	cmp	r3, #1
 80057c4:	d101      	bne.n	80057ca <HAL_SUBGHZ_WriteRegisters+0x2a>
 80057c6:	2302      	movs	r3, #2
 80057c8:	e045      	b.n	8005856 <HAL_SUBGHZ_WriteRegisters+0xb6>
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	2201      	movs	r2, #1
 80057ce:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	2202      	movs	r2, #2
 80057d4:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80057d6:	68f8      	ldr	r0, [r7, #12]
 80057d8:	f000 fb4c 	bl	8005e74 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80057dc:	f7ff ff06 	bl	80055ec <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 80057e0:	210d      	movs	r1, #13
 80057e2:	68f8      	ldr	r0, [r7, #12]
 80057e4:	f000 fa98 	bl	8005d18 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 80057e8:	897b      	ldrh	r3, [r7, #10]
 80057ea:	0a1b      	lsrs	r3, r3, #8
 80057ec:	b29b      	uxth	r3, r3
 80057ee:	b2db      	uxtb	r3, r3
 80057f0:	4619      	mov	r1, r3
 80057f2:	68f8      	ldr	r0, [r7, #12]
 80057f4:	f000 fa90 	bl	8005d18 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 80057f8:	897b      	ldrh	r3, [r7, #10]
 80057fa:	b2db      	uxtb	r3, r3
 80057fc:	4619      	mov	r1, r3
 80057fe:	68f8      	ldr	r0, [r7, #12]
 8005800:	f000 fa8a 	bl	8005d18 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8005804:	2300      	movs	r3, #0
 8005806:	82bb      	strh	r3, [r7, #20]
 8005808:	e00a      	b.n	8005820 <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 800580a:	8abb      	ldrh	r3, [r7, #20]
 800580c:	687a      	ldr	r2, [r7, #4]
 800580e:	4413      	add	r3, r2
 8005810:	781b      	ldrb	r3, [r3, #0]
 8005812:	4619      	mov	r1, r3
 8005814:	68f8      	ldr	r0, [r7, #12]
 8005816:	f000 fa7f 	bl	8005d18 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800581a:	8abb      	ldrh	r3, [r7, #20]
 800581c:	3301      	adds	r3, #1
 800581e:	82bb      	strh	r3, [r7, #20]
 8005820:	8aba      	ldrh	r2, [r7, #20]
 8005822:	893b      	ldrh	r3, [r7, #8]
 8005824:	429a      	cmp	r2, r3
 8005826:	d3f0      	bcc.n	800580a <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8005828:	f7ff fed0 	bl	80055cc <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800582c:	68f8      	ldr	r0, [r7, #12]
 800582e:	f000 fb45 	bl	8005ebc <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	689b      	ldr	r3, [r3, #8]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d002      	beq.n	8005840 <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 800583a:	2301      	movs	r3, #1
 800583c:	75fb      	strb	r3, [r7, #23]
 800583e:	e001      	b.n	8005844 <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 8005840:	2300      	movs	r3, #0
 8005842:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	2201      	movs	r2, #1
 8005848:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	2200      	movs	r2, #0
 800584e:	715a      	strb	r2, [r3, #5]

    return status;
 8005850:	7dfb      	ldrb	r3, [r7, #23]
 8005852:	e000      	b.n	8005856 <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8005854:	2302      	movs	r3, #2
  }
}
 8005856:	4618      	mov	r0, r3
 8005858:	3718      	adds	r7, #24
 800585a:	46bd      	mov	sp, r7
 800585c:	bd80      	pop	{r7, pc}

0800585e <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 800585e:	b580      	push	{r7, lr}
 8005860:	b088      	sub	sp, #32
 8005862:	af00      	add	r7, sp, #0
 8005864:	60f8      	str	r0, [r7, #12]
 8005866:	607a      	str	r2, [r7, #4]
 8005868:	461a      	mov	r2, r3
 800586a:	460b      	mov	r3, r1
 800586c:	817b      	strh	r3, [r7, #10]
 800586e:	4613      	mov	r3, r2
 8005870:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	799b      	ldrb	r3, [r3, #6]
 800587a:	b2db      	uxtb	r3, r3
 800587c:	2b01      	cmp	r3, #1
 800587e:	d14a      	bne.n	8005916 <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	795b      	ldrb	r3, [r3, #5]
 8005884:	2b01      	cmp	r3, #1
 8005886:	d101      	bne.n	800588c <HAL_SUBGHZ_ReadRegisters+0x2e>
 8005888:	2302      	movs	r3, #2
 800588a:	e045      	b.n	8005918 <HAL_SUBGHZ_ReadRegisters+0xba>
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	2201      	movs	r2, #1
 8005890:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8005892:	68f8      	ldr	r0, [r7, #12]
 8005894:	f000 faee 	bl	8005e74 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8005898:	f7ff fea8 	bl	80055ec <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 800589c:	211d      	movs	r1, #29
 800589e:	68f8      	ldr	r0, [r7, #12]
 80058a0:	f000 fa3a 	bl	8005d18 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 80058a4:	897b      	ldrh	r3, [r7, #10]
 80058a6:	0a1b      	lsrs	r3, r3, #8
 80058a8:	b29b      	uxth	r3, r3
 80058aa:	b2db      	uxtb	r3, r3
 80058ac:	4619      	mov	r1, r3
 80058ae:	68f8      	ldr	r0, [r7, #12]
 80058b0:	f000 fa32 	bl	8005d18 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 80058b4:	897b      	ldrh	r3, [r7, #10]
 80058b6:	b2db      	uxtb	r3, r3
 80058b8:	4619      	mov	r1, r3
 80058ba:	68f8      	ldr	r0, [r7, #12]
 80058bc:	f000 fa2c 	bl	8005d18 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 80058c0:	2100      	movs	r1, #0
 80058c2:	68f8      	ldr	r0, [r7, #12]
 80058c4:	f000 fa28 	bl	8005d18 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80058c8:	2300      	movs	r3, #0
 80058ca:	82fb      	strh	r3, [r7, #22]
 80058cc:	e009      	b.n	80058e2 <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 80058ce:	69b9      	ldr	r1, [r7, #24]
 80058d0:	68f8      	ldr	r0, [r7, #12]
 80058d2:	f000 fa77 	bl	8005dc4 <SUBGHZSPI_Receive>
      pData++;
 80058d6:	69bb      	ldr	r3, [r7, #24]
 80058d8:	3301      	adds	r3, #1
 80058da:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 80058dc:	8afb      	ldrh	r3, [r7, #22]
 80058de:	3301      	adds	r3, #1
 80058e0:	82fb      	strh	r3, [r7, #22]
 80058e2:	8afa      	ldrh	r2, [r7, #22]
 80058e4:	893b      	ldrh	r3, [r7, #8]
 80058e6:	429a      	cmp	r2, r3
 80058e8:	d3f1      	bcc.n	80058ce <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80058ea:	f7ff fe6f 	bl	80055cc <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80058ee:	68f8      	ldr	r0, [r7, #12]
 80058f0:	f000 fae4 	bl	8005ebc <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	689b      	ldr	r3, [r3, #8]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d002      	beq.n	8005902 <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 80058fc:	2301      	movs	r3, #1
 80058fe:	77fb      	strb	r3, [r7, #31]
 8005900:	e001      	b.n	8005906 <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 8005902:	2300      	movs	r3, #0
 8005904:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	2201      	movs	r2, #1
 800590a:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	2200      	movs	r2, #0
 8005910:	715a      	strb	r2, [r3, #5]

    return status;
 8005912:	7ffb      	ldrb	r3, [r7, #31]
 8005914:	e000      	b.n	8005918 <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 8005916:	2302      	movs	r3, #2
  }
}
 8005918:	4618      	mov	r0, r3
 800591a:	3720      	adds	r7, #32
 800591c:	46bd      	mov	sp, r7
 800591e:	bd80      	pop	{r7, pc}

08005920 <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b086      	sub	sp, #24
 8005924:	af00      	add	r7, sp, #0
 8005926:	60f8      	str	r0, [r7, #12]
 8005928:	607a      	str	r2, [r7, #4]
 800592a:	461a      	mov	r2, r3
 800592c:	460b      	mov	r3, r1
 800592e:	72fb      	strb	r3, [r7, #11]
 8005930:	4613      	mov	r3, r2
 8005932:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0U]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	799b      	ldrb	r3, [r3, #6]
 8005938:	b2db      	uxtb	r3, r3
 800593a:	2b01      	cmp	r3, #1
 800593c:	d14a      	bne.n	80059d4 <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	795b      	ldrb	r3, [r3, #5]
 8005942:	2b01      	cmp	r3, #1
 8005944:	d101      	bne.n	800594a <HAL_SUBGHZ_ExecSetCmd+0x2a>
 8005946:	2302      	movs	r3, #2
 8005948:	e045      	b.n	80059d6 <HAL_SUBGHZ_ExecSetCmd+0xb6>
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	2201      	movs	r2, #1
 800594e:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8005950:	68f8      	ldr	r0, [r7, #12]
 8005952:	f000 fa8f 	bl	8005e74 <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 8005956:	7afb      	ldrb	r3, [r7, #11]
 8005958:	2b84      	cmp	r3, #132	; 0x84
 800595a:	d002      	beq.n	8005962 <HAL_SUBGHZ_ExecSetCmd+0x42>
 800595c:	7afb      	ldrb	r3, [r7, #11]
 800595e:	2b94      	cmp	r3, #148	; 0x94
 8005960:	d103      	bne.n	800596a <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	2201      	movs	r2, #1
 8005966:	711a      	strb	r2, [r3, #4]
 8005968:	e002      	b.n	8005970 <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	2200      	movs	r2, #0
 800596e:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8005970:	f7ff fe3c 	bl	80055ec <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8005974:	7afb      	ldrb	r3, [r7, #11]
 8005976:	4619      	mov	r1, r3
 8005978:	68f8      	ldr	r0, [r7, #12]
 800597a:	f000 f9cd 	bl	8005d18 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800597e:	2300      	movs	r3, #0
 8005980:	82bb      	strh	r3, [r7, #20]
 8005982:	e00a      	b.n	800599a <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8005984:	8abb      	ldrh	r3, [r7, #20]
 8005986:	687a      	ldr	r2, [r7, #4]
 8005988:	4413      	add	r3, r2
 800598a:	781b      	ldrb	r3, [r3, #0]
 800598c:	4619      	mov	r1, r3
 800598e:	68f8      	ldr	r0, [r7, #12]
 8005990:	f000 f9c2 	bl	8005d18 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8005994:	8abb      	ldrh	r3, [r7, #20]
 8005996:	3301      	adds	r3, #1
 8005998:	82bb      	strh	r3, [r7, #20]
 800599a:	8aba      	ldrh	r2, [r7, #20]
 800599c:	893b      	ldrh	r3, [r7, #8]
 800599e:	429a      	cmp	r2, r3
 80059a0:	d3f0      	bcc.n	8005984 <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80059a2:	f7ff fe13 	bl	80055cc <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 80059a6:	7afb      	ldrb	r3, [r7, #11]
 80059a8:	2b84      	cmp	r3, #132	; 0x84
 80059aa:	d002      	beq.n	80059b2 <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 80059ac:	68f8      	ldr	r0, [r7, #12]
 80059ae:	f000 fa85 	bl	8005ebc <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	689b      	ldr	r3, [r3, #8]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d002      	beq.n	80059c0 <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 80059ba:	2301      	movs	r3, #1
 80059bc:	75fb      	strb	r3, [r7, #23]
 80059be:	e001      	b.n	80059c4 <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 80059c0:	2300      	movs	r3, #0
 80059c2:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	2201      	movs	r2, #1
 80059c8:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	2200      	movs	r2, #0
 80059ce:	715a      	strb	r2, [r3, #5]

    return status;
 80059d0:	7dfb      	ldrb	r3, [r7, #23]
 80059d2:	e000      	b.n	80059d6 <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 80059d4:	2302      	movs	r3, #2
  }
}
 80059d6:	4618      	mov	r0, r3
 80059d8:	3718      	adds	r7, #24
 80059da:	46bd      	mov	sp, r7
 80059dc:	bd80      	pop	{r7, pc}

080059de <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 80059de:	b580      	push	{r7, lr}
 80059e0:	b088      	sub	sp, #32
 80059e2:	af00      	add	r7, sp, #0
 80059e4:	60f8      	str	r0, [r7, #12]
 80059e6:	607a      	str	r2, [r7, #4]
 80059e8:	461a      	mov	r2, r3
 80059ea:	460b      	mov	r3, r1
 80059ec:	72fb      	strb	r3, [r7, #11]
 80059ee:	4613      	mov	r3, r2
 80059f0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	799b      	ldrb	r3, [r3, #6]
 80059fa:	b2db      	uxtb	r3, r3
 80059fc:	2b01      	cmp	r3, #1
 80059fe:	d13d      	bne.n	8005a7c <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	795b      	ldrb	r3, [r3, #5]
 8005a04:	2b01      	cmp	r3, #1
 8005a06:	d101      	bne.n	8005a0c <HAL_SUBGHZ_ExecGetCmd+0x2e>
 8005a08:	2302      	movs	r3, #2
 8005a0a:	e038      	b.n	8005a7e <HAL_SUBGHZ_ExecGetCmd+0xa0>
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	2201      	movs	r2, #1
 8005a10:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8005a12:	68f8      	ldr	r0, [r7, #12]
 8005a14:	f000 fa2e 	bl	8005e74 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8005a18:	f7ff fde8 	bl	80055ec <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8005a1c:	7afb      	ldrb	r3, [r7, #11]
 8005a1e:	4619      	mov	r1, r3
 8005a20:	68f8      	ldr	r0, [r7, #12]
 8005a22:	f000 f979 	bl	8005d18 <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8005a26:	2100      	movs	r1, #0
 8005a28:	68f8      	ldr	r0, [r7, #12]
 8005a2a:	f000 f975 	bl	8005d18 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8005a2e:	2300      	movs	r3, #0
 8005a30:	82fb      	strh	r3, [r7, #22]
 8005a32:	e009      	b.n	8005a48 <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8005a34:	69b9      	ldr	r1, [r7, #24]
 8005a36:	68f8      	ldr	r0, [r7, #12]
 8005a38:	f000 f9c4 	bl	8005dc4 <SUBGHZSPI_Receive>
      pData++;
 8005a3c:	69bb      	ldr	r3, [r7, #24]
 8005a3e:	3301      	adds	r3, #1
 8005a40:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8005a42:	8afb      	ldrh	r3, [r7, #22]
 8005a44:	3301      	adds	r3, #1
 8005a46:	82fb      	strh	r3, [r7, #22]
 8005a48:	8afa      	ldrh	r2, [r7, #22]
 8005a4a:	893b      	ldrh	r3, [r7, #8]
 8005a4c:	429a      	cmp	r2, r3
 8005a4e:	d3f1      	bcc.n	8005a34 <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8005a50:	f7ff fdbc 	bl	80055cc <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8005a54:	68f8      	ldr	r0, [r7, #12]
 8005a56:	f000 fa31 	bl	8005ebc <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	689b      	ldr	r3, [r3, #8]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d002      	beq.n	8005a68 <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 8005a62:	2301      	movs	r3, #1
 8005a64:	77fb      	strb	r3, [r7, #31]
 8005a66:	e001      	b.n	8005a6c <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 8005a68:	2300      	movs	r3, #0
 8005a6a:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	2201      	movs	r2, #1
 8005a70:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	2200      	movs	r2, #0
 8005a76:	715a      	strb	r2, [r3, #5]

    return status;
 8005a78:	7ffb      	ldrb	r3, [r7, #31]
 8005a7a:	e000      	b.n	8005a7e <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8005a7c:	2302      	movs	r3, #2
  }
}
 8005a7e:	4618      	mov	r0, r3
 8005a80:	3720      	adds	r7, #32
 8005a82:	46bd      	mov	sp, r7
 8005a84:	bd80      	pop	{r7, pc}

08005a86 <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 8005a86:	b580      	push	{r7, lr}
 8005a88:	b086      	sub	sp, #24
 8005a8a:	af00      	add	r7, sp, #0
 8005a8c:	60f8      	str	r0, [r7, #12]
 8005a8e:	607a      	str	r2, [r7, #4]
 8005a90:	461a      	mov	r2, r3
 8005a92:	460b      	mov	r3, r1
 8005a94:	72fb      	strb	r3, [r7, #11]
 8005a96:	4613      	mov	r3, r2
 8005a98:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	799b      	ldrb	r3, [r3, #6]
 8005a9e:	b2db      	uxtb	r3, r3
 8005aa0:	2b01      	cmp	r3, #1
 8005aa2:	d13e      	bne.n	8005b22 <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	795b      	ldrb	r3, [r3, #5]
 8005aa8:	2b01      	cmp	r3, #1
 8005aaa:	d101      	bne.n	8005ab0 <HAL_SUBGHZ_WriteBuffer+0x2a>
 8005aac:	2302      	movs	r3, #2
 8005aae:	e039      	b.n	8005b24 <HAL_SUBGHZ_WriteBuffer+0x9e>
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	2201      	movs	r2, #1
 8005ab4:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8005ab6:	68f8      	ldr	r0, [r7, #12]
 8005ab8:	f000 f9dc 	bl	8005e74 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8005abc:	f7ff fd96 	bl	80055ec <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 8005ac0:	210e      	movs	r1, #14
 8005ac2:	68f8      	ldr	r0, [r7, #12]
 8005ac4:	f000 f928 	bl	8005d18 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8005ac8:	7afb      	ldrb	r3, [r7, #11]
 8005aca:	4619      	mov	r1, r3
 8005acc:	68f8      	ldr	r0, [r7, #12]
 8005ace:	f000 f923 	bl	8005d18 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	82bb      	strh	r3, [r7, #20]
 8005ad6:	e00a      	b.n	8005aee <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8005ad8:	8abb      	ldrh	r3, [r7, #20]
 8005ada:	687a      	ldr	r2, [r7, #4]
 8005adc:	4413      	add	r3, r2
 8005ade:	781b      	ldrb	r3, [r3, #0]
 8005ae0:	4619      	mov	r1, r3
 8005ae2:	68f8      	ldr	r0, [r7, #12]
 8005ae4:	f000 f918 	bl	8005d18 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8005ae8:	8abb      	ldrh	r3, [r7, #20]
 8005aea:	3301      	adds	r3, #1
 8005aec:	82bb      	strh	r3, [r7, #20]
 8005aee:	8aba      	ldrh	r2, [r7, #20]
 8005af0:	893b      	ldrh	r3, [r7, #8]
 8005af2:	429a      	cmp	r2, r3
 8005af4:	d3f0      	bcc.n	8005ad8 <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8005af6:	f7ff fd69 	bl	80055cc <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8005afa:	68f8      	ldr	r0, [r7, #12]
 8005afc:	f000 f9de 	bl	8005ebc <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	689b      	ldr	r3, [r3, #8]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d002      	beq.n	8005b0e <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 8005b08:	2301      	movs	r3, #1
 8005b0a:	75fb      	strb	r3, [r7, #23]
 8005b0c:	e001      	b.n	8005b12 <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 8005b0e:	2300      	movs	r3, #0
 8005b10:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	2201      	movs	r2, #1
 8005b16:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	715a      	strb	r2, [r3, #5]

    return status;
 8005b1e:	7dfb      	ldrb	r3, [r7, #23]
 8005b20:	e000      	b.n	8005b24 <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8005b22:	2302      	movs	r3, #2
  }
}
 8005b24:	4618      	mov	r0, r3
 8005b26:	3718      	adds	r7, #24
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	bd80      	pop	{r7, pc}

08005b2c <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b088      	sub	sp, #32
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	60f8      	str	r0, [r7, #12]
 8005b34:	607a      	str	r2, [r7, #4]
 8005b36:	461a      	mov	r2, r3
 8005b38:	460b      	mov	r3, r1
 8005b3a:	72fb      	strb	r3, [r7, #11]
 8005b3c:	4613      	mov	r3, r2
 8005b3e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	799b      	ldrb	r3, [r3, #6]
 8005b48:	b2db      	uxtb	r3, r3
 8005b4a:	2b01      	cmp	r3, #1
 8005b4c:	d141      	bne.n	8005bd2 <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	795b      	ldrb	r3, [r3, #5]
 8005b52:	2b01      	cmp	r3, #1
 8005b54:	d101      	bne.n	8005b5a <HAL_SUBGHZ_ReadBuffer+0x2e>
 8005b56:	2302      	movs	r3, #2
 8005b58:	e03c      	b.n	8005bd4 <HAL_SUBGHZ_ReadBuffer+0xa8>
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	2201      	movs	r2, #1
 8005b5e:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8005b60:	68f8      	ldr	r0, [r7, #12]
 8005b62:	f000 f987 	bl	8005e74 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8005b66:	f7ff fd41 	bl	80055ec <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 8005b6a:	211e      	movs	r1, #30
 8005b6c:	68f8      	ldr	r0, [r7, #12]
 8005b6e:	f000 f8d3 	bl	8005d18 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8005b72:	7afb      	ldrb	r3, [r7, #11]
 8005b74:	4619      	mov	r1, r3
 8005b76:	68f8      	ldr	r0, [r7, #12]
 8005b78:	f000 f8ce 	bl	8005d18 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8005b7c:	2100      	movs	r1, #0
 8005b7e:	68f8      	ldr	r0, [r7, #12]
 8005b80:	f000 f8ca 	bl	8005d18 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8005b84:	2300      	movs	r3, #0
 8005b86:	82fb      	strh	r3, [r7, #22]
 8005b88:	e009      	b.n	8005b9e <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8005b8a:	69b9      	ldr	r1, [r7, #24]
 8005b8c:	68f8      	ldr	r0, [r7, #12]
 8005b8e:	f000 f919 	bl	8005dc4 <SUBGHZSPI_Receive>
      pData++;
 8005b92:	69bb      	ldr	r3, [r7, #24]
 8005b94:	3301      	adds	r3, #1
 8005b96:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8005b98:	8afb      	ldrh	r3, [r7, #22]
 8005b9a:	3301      	adds	r3, #1
 8005b9c:	82fb      	strh	r3, [r7, #22]
 8005b9e:	8afa      	ldrh	r2, [r7, #22]
 8005ba0:	893b      	ldrh	r3, [r7, #8]
 8005ba2:	429a      	cmp	r2, r3
 8005ba4:	d3f1      	bcc.n	8005b8a <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8005ba6:	f7ff fd11 	bl	80055cc <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8005baa:	68f8      	ldr	r0, [r7, #12]
 8005bac:	f000 f986 	bl	8005ebc <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	689b      	ldr	r3, [r3, #8]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d002      	beq.n	8005bbe <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 8005bb8:	2301      	movs	r3, #1
 8005bba:	77fb      	strb	r3, [r7, #31]
 8005bbc:	e001      	b.n	8005bc2 <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	2201      	movs	r2, #1
 8005bc6:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	2200      	movs	r2, #0
 8005bcc:	715a      	strb	r2, [r3, #5]

    return status;
 8005bce:	7ffb      	ldrb	r3, [r7, #31]
 8005bd0:	e000      	b.n	8005bd4 <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8005bd2:	2302      	movs	r3, #2
  }
}
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	3720      	adds	r7, #32
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	bd80      	pop	{r7, pc}

08005bdc <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b084      	sub	sp, #16
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2U] = {0U};
 8005be4:	2300      	movs	r3, #0
 8005be6:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 8005be8:	f107 020c 	add.w	r2, r7, #12
 8005bec:	2302      	movs	r3, #2
 8005bee:	2112      	movs	r1, #18
 8005bf0:	6878      	ldr	r0, [r7, #4]
 8005bf2:	f7ff fef4 	bl	80059de <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 8005bf6:	7b3b      	ldrb	r3, [r7, #12]
 8005bf8:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8U) | tmpisr[1U];
 8005bfa:	89fb      	ldrh	r3, [r7, #14]
 8005bfc:	021b      	lsls	r3, r3, #8
 8005bfe:	b21a      	sxth	r2, r3
 8005c00:	7b7b      	ldrb	r3, [r7, #13]
 8005c02:	b21b      	sxth	r3, r3
 8005c04:	4313      	orrs	r3, r2
 8005c06:	b21b      	sxth	r3, r3
 8005c08:	81fb      	strh	r3, [r7, #14]

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2U);
 8005c0a:	f107 020c 	add.w	r2, r7, #12
 8005c0e:	2302      	movs	r3, #2
 8005c10:	2102      	movs	r1, #2
 8005c12:	6878      	ldr	r0, [r7, #4]
 8005c14:	f7ff fe84 	bl	8005920 <HAL_SUBGHZ_ExecSetCmd>

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 8005c18:	89fb      	ldrh	r3, [r7, #14]
 8005c1a:	f003 0301 	and.w	r3, r3, #1
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d002      	beq.n	8005c28 <HAL_SUBGHZ_IRQHandler+0x4c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 8005c22:	6878      	ldr	r0, [r7, #4]
 8005c24:	f005 f95c 	bl	800aee0 <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 8005c28:	89fb      	ldrh	r3, [r7, #14]
 8005c2a:	f003 0302 	and.w	r3, r3, #2
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d002      	beq.n	8005c38 <HAL_SUBGHZ_IRQHandler+0x5c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 8005c32:	6878      	ldr	r0, [r7, #4]
 8005c34:	f005 f962 	bl	800aefc <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 8005c38:	89fb      	ldrh	r3, [r7, #14]
 8005c3a:	f003 0304 	and.w	r3, r3, #4
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d002      	beq.n	8005c48 <HAL_SUBGHZ_IRQHandler+0x6c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 8005c42:	6878      	ldr	r0, [r7, #4]
 8005c44:	f005 f9b2 	bl	800afac <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 8005c48:	89fb      	ldrh	r3, [r7, #14]
 8005c4a:	f003 0308 	and.w	r3, r3, #8
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d002      	beq.n	8005c58 <HAL_SUBGHZ_IRQHandler+0x7c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 8005c52:	6878      	ldr	r0, [r7, #4]
 8005c54:	f005 f9b8 	bl	800afc8 <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 8005c58:	89fb      	ldrh	r3, [r7, #14]
 8005c5a:	f003 0310 	and.w	r3, r3, #16
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d002      	beq.n	8005c68 <HAL_SUBGHZ_IRQHandler+0x8c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 8005c62:	6878      	ldr	r0, [r7, #4]
 8005c64:	f005 f9be 	bl	800afe4 <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 8005c68:	89fb      	ldrh	r3, [r7, #14]
 8005c6a:	f003 0320 	and.w	r3, r3, #32
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d002      	beq.n	8005c78 <HAL_SUBGHZ_IRQHandler+0x9c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 8005c72:	6878      	ldr	r0, [r7, #4]
 8005c74:	f005 f98c 	bl	800af90 <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 8005c78:	89fb      	ldrh	r3, [r7, #14]
 8005c7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d002      	beq.n	8005c88 <HAL_SUBGHZ_IRQHandler+0xac>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 8005c82:	6878      	ldr	r0, [r7, #4]
 8005c84:	f005 f948 	bl	800af18 <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 8005c88:	89fb      	ldrh	r3, [r7, #14]
 8005c8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d00d      	beq.n	8005cae <HAL_SUBGHZ_IRQHandler+0xd2>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 8005c92:	89fb      	ldrh	r3, [r7, #14]
 8005c94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d004      	beq.n	8005ca6 <HAL_SUBGHZ_IRQHandler+0xca>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 8005c9c:	2101      	movs	r1, #1
 8005c9e:	6878      	ldr	r0, [r7, #4]
 8005ca0:	f005 f948 	bl	800af34 <HAL_SUBGHZ_CADStatusCallback>
 8005ca4:	e003      	b.n	8005cae <HAL_SUBGHZ_IRQHandler+0xd2>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 8005ca6:	2100      	movs	r1, #0
 8005ca8:	6878      	ldr	r0, [r7, #4]
 8005caa:	f005 f943 	bl	800af34 <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 8005cae:	89fb      	ldrh	r3, [r7, #14]
 8005cb0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d002      	beq.n	8005cbe <HAL_SUBGHZ_IRQHandler+0xe2>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 8005cb8:	6878      	ldr	r0, [r7, #4]
 8005cba:	f005 f959 	bl	800af70 <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LR_FHSS Hop interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_LR_FHSS_HOP) != RESET)
 8005cbe:	89fb      	ldrh	r3, [r7, #14]
 8005cc0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d002      	beq.n	8005cce <HAL_SUBGHZ_IRQHandler+0xf2>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->LrFhssHopCallback(hsubghz);
#else
    HAL_SUBGHZ_LrFhssHopCallback(hsubghz);
 8005cc8:	6878      	ldr	r0, [r7, #4]
 8005cca:	f005 f999 	bl	800b000 <HAL_SUBGHZ_LrFhssHopCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }
}
 8005cce:	bf00      	nop
 8005cd0:	3710      	adds	r7, #16
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	bd80      	pop	{r7, pc}
	...

08005cd8 <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 8005cd8:	b480      	push	{r7}
 8005cda:	b083      	sub	sp, #12
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8005ce0:	4b0c      	ldr	r3, [pc, #48]	; (8005d14 <SUBGHZSPI_Init+0x3c>)
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	4a0b      	ldr	r2, [pc, #44]	; (8005d14 <SUBGHZSPI_Init+0x3c>)
 8005ce6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005cea:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 8005cec:	4a09      	ldr	r2, [pc, #36]	; (8005d14 <SUBGHZSPI_Init+0x3c>)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	f443 7341 	orr.w	r3, r3, #772	; 0x304
 8005cf4:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 8005cf6:	4b07      	ldr	r3, [pc, #28]	; (8005d14 <SUBGHZSPI_Init+0x3c>)
 8005cf8:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 8005cfc:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8005cfe:	4b05      	ldr	r3, [pc, #20]	; (8005d14 <SUBGHZSPI_Init+0x3c>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	4a04      	ldr	r2, [pc, #16]	; (8005d14 <SUBGHZSPI_Init+0x3c>)
 8005d04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d08:	6013      	str	r3, [r2, #0]
}
 8005d0a:	bf00      	nop
 8005d0c:	370c      	adds	r7, #12
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	bc80      	pop	{r7}
 8005d12:	4770      	bx	lr
 8005d14:	58010000 	.word	0x58010000

08005d18 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8005d18:	b480      	push	{r7}
 8005d1a:	b087      	sub	sp, #28
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
 8005d20:	460b      	mov	r3, r1
 8005d22:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8005d24:	2300      	movs	r3, #0
 8005d26:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8005d28:	4b23      	ldr	r3, [pc, #140]	; (8005db8 <SUBGHZSPI_Transmit+0xa0>)
 8005d2a:	681a      	ldr	r2, [r3, #0]
 8005d2c:	4613      	mov	r3, r2
 8005d2e:	00db      	lsls	r3, r3, #3
 8005d30:	1a9b      	subs	r3, r3, r2
 8005d32:	009b      	lsls	r3, r3, #2
 8005d34:	0cdb      	lsrs	r3, r3, #19
 8005d36:	2264      	movs	r2, #100	; 0x64
 8005d38:	fb02 f303 	mul.w	r3, r2, r3
 8005d3c:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d105      	bne.n	8005d50 <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 8005d44:	2301      	movs	r3, #1
 8005d46:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2201      	movs	r2, #1
 8005d4c:	609a      	str	r2, [r3, #8]
      break;
 8005d4e:	e008      	b.n	8005d62 <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	3b01      	subs	r3, #1
 8005d54:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8005d56:	4b19      	ldr	r3, [pc, #100]	; (8005dbc <SUBGHZSPI_Transmit+0xa4>)
 8005d58:	689b      	ldr	r3, [r3, #8]
 8005d5a:	f003 0302 	and.w	r3, r3, #2
 8005d5e:	2b02      	cmp	r3, #2
 8005d60:	d1ed      	bne.n	8005d3e <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8005d62:	4b17      	ldr	r3, [pc, #92]	; (8005dc0 <SUBGHZSPI_Transmit+0xa8>)
 8005d64:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 8005d66:	693b      	ldr	r3, [r7, #16]
 8005d68:	78fa      	ldrb	r2, [r7, #3]
 8005d6a:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8005d6c:	4b12      	ldr	r3, [pc, #72]	; (8005db8 <SUBGHZSPI_Transmit+0xa0>)
 8005d6e:	681a      	ldr	r2, [r3, #0]
 8005d70:	4613      	mov	r3, r2
 8005d72:	00db      	lsls	r3, r3, #3
 8005d74:	1a9b      	subs	r3, r3, r2
 8005d76:	009b      	lsls	r3, r3, #2
 8005d78:	0cdb      	lsrs	r3, r3, #19
 8005d7a:	2264      	movs	r2, #100	; 0x64
 8005d7c:	fb02 f303 	mul.w	r3, r2, r3
 8005d80:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d105      	bne.n	8005d94 <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 8005d88:	2301      	movs	r3, #1
 8005d8a:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2201      	movs	r2, #1
 8005d90:	609a      	str	r2, [r3, #8]
      break;
 8005d92:	e008      	b.n	8005da6 <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	3b01      	subs	r3, #1
 8005d98:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8005d9a:	4b08      	ldr	r3, [pc, #32]	; (8005dbc <SUBGHZSPI_Transmit+0xa4>)
 8005d9c:	689b      	ldr	r3, [r3, #8]
 8005d9e:	f003 0301 	and.w	r3, r3, #1
 8005da2:	2b01      	cmp	r3, #1
 8005da4:	d1ed      	bne.n	8005d82 <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 8005da6:	4b05      	ldr	r3, [pc, #20]	; (8005dbc <SUBGHZSPI_Transmit+0xa4>)
 8005da8:	68db      	ldr	r3, [r3, #12]

  return status;
 8005daa:	7dfb      	ldrb	r3, [r7, #23]
}
 8005dac:	4618      	mov	r0, r3
 8005dae:	371c      	adds	r7, #28
 8005db0:	46bd      	mov	sp, r7
 8005db2:	bc80      	pop	{r7}
 8005db4:	4770      	bx	lr
 8005db6:	bf00      	nop
 8005db8:	2000000c 	.word	0x2000000c
 8005dbc:	58010000 	.word	0x58010000
 8005dc0:	5801000c 	.word	0x5801000c

08005dc4 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	b087      	sub	sp, #28
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
 8005dcc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005dce:	2300      	movs	r3, #0
 8005dd0:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8005dd2:	4b25      	ldr	r3, [pc, #148]	; (8005e68 <SUBGHZSPI_Receive+0xa4>)
 8005dd4:	681a      	ldr	r2, [r3, #0]
 8005dd6:	4613      	mov	r3, r2
 8005dd8:	00db      	lsls	r3, r3, #3
 8005dda:	1a9b      	subs	r3, r3, r2
 8005ddc:	009b      	lsls	r3, r3, #2
 8005dde:	0cdb      	lsrs	r3, r3, #19
 8005de0:	2264      	movs	r2, #100	; 0x64
 8005de2:	fb02 f303 	mul.w	r3, r2, r3
 8005de6:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d105      	bne.n	8005dfa <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 8005dee:	2301      	movs	r3, #1
 8005df0:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2201      	movs	r2, #1
 8005df6:	609a      	str	r2, [r3, #8]
      break;
 8005df8:	e008      	b.n	8005e0c <SUBGHZSPI_Receive+0x48>
    }
    count--;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	3b01      	subs	r3, #1
 8005dfe:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8005e00:	4b1a      	ldr	r3, [pc, #104]	; (8005e6c <SUBGHZSPI_Receive+0xa8>)
 8005e02:	689b      	ldr	r3, [r3, #8]
 8005e04:	f003 0302 	and.w	r3, r3, #2
 8005e08:	2b02      	cmp	r3, #2
 8005e0a:	d1ed      	bne.n	8005de8 <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8005e0c:	4b18      	ldr	r3, [pc, #96]	; (8005e70 <SUBGHZSPI_Receive+0xac>)
 8005e0e:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 8005e10:	693b      	ldr	r3, [r7, #16]
 8005e12:	22ff      	movs	r2, #255	; 0xff
 8005e14:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8005e16:	4b14      	ldr	r3, [pc, #80]	; (8005e68 <SUBGHZSPI_Receive+0xa4>)
 8005e18:	681a      	ldr	r2, [r3, #0]
 8005e1a:	4613      	mov	r3, r2
 8005e1c:	00db      	lsls	r3, r3, #3
 8005e1e:	1a9b      	subs	r3, r3, r2
 8005e20:	009b      	lsls	r3, r3, #2
 8005e22:	0cdb      	lsrs	r3, r3, #19
 8005e24:	2264      	movs	r2, #100	; 0x64
 8005e26:	fb02 f303 	mul.w	r3, r2, r3
 8005e2a:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d105      	bne.n	8005e3e <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 8005e32:	2301      	movs	r3, #1
 8005e34:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	2201      	movs	r2, #1
 8005e3a:	609a      	str	r2, [r3, #8]
      break;
 8005e3c:	e008      	b.n	8005e50 <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	3b01      	subs	r3, #1
 8005e42:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8005e44:	4b09      	ldr	r3, [pc, #36]	; (8005e6c <SUBGHZSPI_Receive+0xa8>)
 8005e46:	689b      	ldr	r3, [r3, #8]
 8005e48:	f003 0301 	and.w	r3, r3, #1
 8005e4c:	2b01      	cmp	r3, #1
 8005e4e:	d1ed      	bne.n	8005e2c <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8005e50:	4b06      	ldr	r3, [pc, #24]	; (8005e6c <SUBGHZSPI_Receive+0xa8>)
 8005e52:	68db      	ldr	r3, [r3, #12]
 8005e54:	b2da      	uxtb	r2, r3
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	701a      	strb	r2, [r3, #0]

  return status;
 8005e5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	371c      	adds	r7, #28
 8005e60:	46bd      	mov	sp, r7
 8005e62:	bc80      	pop	{r7}
 8005e64:	4770      	bx	lr
 8005e66:	bf00      	nop
 8005e68:	2000000c 	.word	0x2000000c
 8005e6c:	58010000 	.word	0x58010000
 8005e70:	5801000c 	.word	0x5801000c

08005e74 <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b084      	sub	sp, #16
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	791b      	ldrb	r3, [r3, #4]
 8005e80:	2b01      	cmp	r3, #1
 8005e82:	d111      	bne.n	8005ea8 <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 8005e84:	4b0c      	ldr	r3, [pc, #48]	; (8005eb8 <SUBGHZ_CheckDeviceReady+0x44>)
 8005e86:	681a      	ldr	r2, [r3, #0]
 8005e88:	4613      	mov	r3, r2
 8005e8a:	005b      	lsls	r3, r3, #1
 8005e8c:	4413      	add	r3, r2
 8005e8e:	00db      	lsls	r3, r3, #3
 8005e90:	0c1b      	lsrs	r3, r3, #16
 8005e92:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8005e94:	f7ff fbaa 	bl	80055ec <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	3b01      	subs	r3, #1
 8005e9c:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d1f9      	bne.n	8005e98 <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8005ea4:	f7ff fb92 	bl	80055cc <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 8005ea8:	6878      	ldr	r0, [r7, #4]
 8005eaa:	f000 f807 	bl	8005ebc <SUBGHZ_WaitOnBusy>
 8005eae:	4603      	mov	r3, r0
}
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	3710      	adds	r7, #16
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	bd80      	pop	{r7, pc}
 8005eb8:	2000000c 	.word	0x2000000c

08005ebc <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b086      	sub	sp, #24
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 8005ec8:	4b12      	ldr	r3, [pc, #72]	; (8005f14 <SUBGHZ_WaitOnBusy+0x58>)
 8005eca:	681a      	ldr	r2, [r3, #0]
 8005ecc:	4613      	mov	r3, r2
 8005ece:	005b      	lsls	r3, r3, #1
 8005ed0:	4413      	add	r3, r2
 8005ed2:	00db      	lsls	r3, r3, #3
 8005ed4:	0d1b      	lsrs	r3, r3, #20
 8005ed6:	2264      	movs	r2, #100	; 0x64
 8005ed8:	fb02 f303 	mul.w	r3, r2, r3
 8005edc:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 8005ede:	f7ff fbb3 	bl	8005648 <LL_PWR_IsActiveFlag_RFBUSYMS>
 8005ee2:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d105      	bne.n	8005ef6 <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 8005eea:	2301      	movs	r3, #1
 8005eec:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2202      	movs	r2, #2
 8005ef2:	609a      	str	r2, [r3, #8]
      break;
 8005ef4:	e009      	b.n	8005f0a <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	3b01      	subs	r3, #1
 8005efa:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8005efc:	f7ff fb92 	bl	8005624 <LL_PWR_IsActiveFlag_RFBUSYS>
 8005f00:	4602      	mov	r2, r0
 8005f02:	693b      	ldr	r3, [r7, #16]
 8005f04:	4013      	ands	r3, r2
 8005f06:	2b01      	cmp	r3, #1
 8005f08:	d0e9      	beq.n	8005ede <SUBGHZ_WaitOnBusy+0x22>

  return status;
 8005f0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	3718      	adds	r7, #24
 8005f10:	46bd      	mov	sp, r7
 8005f12:	bd80      	pop	{r7, pc}
 8005f14:	2000000c 	.word	0x2000000c

08005f18 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b082      	sub	sp, #8
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d101      	bne.n	8005f2a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005f26:	2301      	movs	r3, #1
 8005f28:	e049      	b.n	8005fbe <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f30:	b2db      	uxtb	r3, r3
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d106      	bne.n	8005f44 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2200      	movs	r2, #0
 8005f3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005f3e:	6878      	ldr	r0, [r7, #4]
 8005f40:	f7fc fff1 	bl	8002f26 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2202      	movs	r2, #2
 8005f48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681a      	ldr	r2, [r3, #0]
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	3304      	adds	r3, #4
 8005f54:	4619      	mov	r1, r3
 8005f56:	4610      	mov	r0, r2
 8005f58:	f000 f944 	bl	80061e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2201      	movs	r2, #1
 8005f60:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2201      	movs	r2, #1
 8005f68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2201      	movs	r2, #1
 8005f70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2201      	movs	r2, #1
 8005f78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2201      	movs	r2, #1
 8005f80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2201      	movs	r2, #1
 8005f88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2201      	movs	r2, #1
 8005f90:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2201      	movs	r2, #1
 8005f98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2201      	movs	r2, #1
 8005fa0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2201      	movs	r2, #1
 8005fa8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2201      	movs	r2, #1
 8005fb0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2201      	movs	r2, #1
 8005fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005fbc:	2300      	movs	r3, #0
}
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	3708      	adds	r7, #8
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	bd80      	pop	{r7, pc}
	...

08005fc8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005fc8:	b480      	push	{r7}
 8005fca:	b085      	sub	sp, #20
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fd6:	b2db      	uxtb	r3, r3
 8005fd8:	2b01      	cmp	r3, #1
 8005fda:	d001      	beq.n	8005fe0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005fdc:	2301      	movs	r3, #1
 8005fde:	e02e      	b.n	800603e <HAL_TIM_Base_Start+0x76>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2202      	movs	r2, #2
 8005fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	4a16      	ldr	r2, [pc, #88]	; (8006048 <HAL_TIM_Base_Start+0x80>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d004      	beq.n	8005ffc <HAL_TIM_Base_Start+0x34>
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ffa:	d115      	bne.n	8006028 <HAL_TIM_Base_Start+0x60>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	689a      	ldr	r2, [r3, #8]
 8006002:	4b12      	ldr	r3, [pc, #72]	; (800604c <HAL_TIM_Base_Start+0x84>)
 8006004:	4013      	ands	r3, r2
 8006006:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	2b06      	cmp	r3, #6
 800600c:	d015      	beq.n	800603a <HAL_TIM_Base_Start+0x72>
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006014:	d011      	beq.n	800603a <HAL_TIM_Base_Start+0x72>
    {
      __HAL_TIM_ENABLE(htim);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	681a      	ldr	r2, [r3, #0]
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f042 0201 	orr.w	r2, r2, #1
 8006024:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006026:	e008      	b.n	800603a <HAL_TIM_Base_Start+0x72>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	681a      	ldr	r2, [r3, #0]
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f042 0201 	orr.w	r2, r2, #1
 8006036:	601a      	str	r2, [r3, #0]
 8006038:	e000      	b.n	800603c <HAL_TIM_Base_Start+0x74>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800603a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800603c:	2300      	movs	r3, #0
}
 800603e:	4618      	mov	r0, r3
 8006040:	3714      	adds	r7, #20
 8006042:	46bd      	mov	sp, r7
 8006044:	bc80      	pop	{r7}
 8006046:	4770      	bx	lr
 8006048:	40012c00 	.word	0x40012c00
 800604c:	00010007 	.word	0x00010007

08006050 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b084      	sub	sp, #16
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
 8006058:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800605a:	2300      	movs	r3, #0
 800605c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006064:	2b01      	cmp	r3, #1
 8006066:	d101      	bne.n	800606c <HAL_TIM_ConfigClockSource+0x1c>
 8006068:	2302      	movs	r3, #2
 800606a:	e0b6      	b.n	80061da <HAL_TIM_ConfigClockSource+0x18a>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2201      	movs	r2, #1
 8006070:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2202      	movs	r2, #2
 8006078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	689b      	ldr	r3, [r3, #8]
 8006082:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800608a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800608e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006090:	68bb      	ldr	r3, [r7, #8]
 8006092:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006096:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	68ba      	ldr	r2, [r7, #8]
 800609e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80060a8:	d03e      	beq.n	8006128 <HAL_TIM_ConfigClockSource+0xd8>
 80060aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80060ae:	f200 8087 	bhi.w	80061c0 <HAL_TIM_ConfigClockSource+0x170>
 80060b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060b6:	f000 8086 	beq.w	80061c6 <HAL_TIM_ConfigClockSource+0x176>
 80060ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060be:	d87f      	bhi.n	80061c0 <HAL_TIM_ConfigClockSource+0x170>
 80060c0:	2b70      	cmp	r3, #112	; 0x70
 80060c2:	d01a      	beq.n	80060fa <HAL_TIM_ConfigClockSource+0xaa>
 80060c4:	2b70      	cmp	r3, #112	; 0x70
 80060c6:	d87b      	bhi.n	80061c0 <HAL_TIM_ConfigClockSource+0x170>
 80060c8:	2b60      	cmp	r3, #96	; 0x60
 80060ca:	d050      	beq.n	800616e <HAL_TIM_ConfigClockSource+0x11e>
 80060cc:	2b60      	cmp	r3, #96	; 0x60
 80060ce:	d877      	bhi.n	80061c0 <HAL_TIM_ConfigClockSource+0x170>
 80060d0:	2b50      	cmp	r3, #80	; 0x50
 80060d2:	d03c      	beq.n	800614e <HAL_TIM_ConfigClockSource+0xfe>
 80060d4:	2b50      	cmp	r3, #80	; 0x50
 80060d6:	d873      	bhi.n	80061c0 <HAL_TIM_ConfigClockSource+0x170>
 80060d8:	2b40      	cmp	r3, #64	; 0x40
 80060da:	d058      	beq.n	800618e <HAL_TIM_ConfigClockSource+0x13e>
 80060dc:	2b40      	cmp	r3, #64	; 0x40
 80060de:	d86f      	bhi.n	80061c0 <HAL_TIM_ConfigClockSource+0x170>
 80060e0:	2b30      	cmp	r3, #48	; 0x30
 80060e2:	d064      	beq.n	80061ae <HAL_TIM_ConfigClockSource+0x15e>
 80060e4:	2b30      	cmp	r3, #48	; 0x30
 80060e6:	d86b      	bhi.n	80061c0 <HAL_TIM_ConfigClockSource+0x170>
 80060e8:	2b20      	cmp	r3, #32
 80060ea:	d060      	beq.n	80061ae <HAL_TIM_ConfigClockSource+0x15e>
 80060ec:	2b20      	cmp	r3, #32
 80060ee:	d867      	bhi.n	80061c0 <HAL_TIM_ConfigClockSource+0x170>
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d05c      	beq.n	80061ae <HAL_TIM_ConfigClockSource+0x15e>
 80060f4:	2b10      	cmp	r3, #16
 80060f6:	d05a      	beq.n	80061ae <HAL_TIM_ConfigClockSource+0x15e>
 80060f8:	e062      	b.n	80061c0 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800610a:	f000 f946 	bl	800639a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	689b      	ldr	r3, [r3, #8]
 8006114:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006116:	68bb      	ldr	r3, [r7, #8]
 8006118:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800611c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	68ba      	ldr	r2, [r7, #8]
 8006124:	609a      	str	r2, [r3, #8]
      break;
 8006126:	e04f      	b.n	80061c8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006138:	f000 f92f 	bl	800639a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	689a      	ldr	r2, [r3, #8]
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800614a:	609a      	str	r2, [r3, #8]
      break;
 800614c:	e03c      	b.n	80061c8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800615a:	461a      	mov	r2, r3
 800615c:	f000 f8a4 	bl	80062a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	2150      	movs	r1, #80	; 0x50
 8006166:	4618      	mov	r0, r3
 8006168:	f000 f8fb 	bl	8006362 <TIM_ITRx_SetConfig>
      break;
 800616c:	e02c      	b.n	80061c8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800617a:	461a      	mov	r2, r3
 800617c:	f000 f8c2 	bl	8006304 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	2160      	movs	r1, #96	; 0x60
 8006186:	4618      	mov	r0, r3
 8006188:	f000 f8eb 	bl	8006362 <TIM_ITRx_SetConfig>
      break;
 800618c:	e01c      	b.n	80061c8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800619a:	461a      	mov	r2, r3
 800619c:	f000 f884 	bl	80062a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	2140      	movs	r1, #64	; 0x40
 80061a6:	4618      	mov	r0, r3
 80061a8:	f000 f8db 	bl	8006362 <TIM_ITRx_SetConfig>
      break;
 80061ac:	e00c      	b.n	80061c8 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681a      	ldr	r2, [r3, #0]
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	4619      	mov	r1, r3
 80061b8:	4610      	mov	r0, r2
 80061ba:	f000 f8d2 	bl	8006362 <TIM_ITRx_SetConfig>
      break;
 80061be:	e003      	b.n	80061c8 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80061c0:	2301      	movs	r3, #1
 80061c2:	73fb      	strb	r3, [r7, #15]
      break;
 80061c4:	e000      	b.n	80061c8 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80061c6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2201      	movs	r2, #1
 80061cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2200      	movs	r2, #0
 80061d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80061d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80061da:	4618      	mov	r0, r3
 80061dc:	3710      	adds	r7, #16
 80061de:	46bd      	mov	sp, r7
 80061e0:	bd80      	pop	{r7, pc}
	...

080061e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80061e4:	b480      	push	{r7}
 80061e6:	b085      	sub	sp, #20
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
 80061ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	4a29      	ldr	r2, [pc, #164]	; (800629c <TIM_Base_SetConfig+0xb8>)
 80061f8:	4293      	cmp	r3, r2
 80061fa:	d003      	beq.n	8006204 <TIM_Base_SetConfig+0x20>
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006202:	d108      	bne.n	8006216 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800620a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	685b      	ldr	r3, [r3, #4]
 8006210:	68fa      	ldr	r2, [r7, #12]
 8006212:	4313      	orrs	r3, r2
 8006214:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	4a20      	ldr	r2, [pc, #128]	; (800629c <TIM_Base_SetConfig+0xb8>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d00b      	beq.n	8006236 <TIM_Base_SetConfig+0x52>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006224:	d007      	beq.n	8006236 <TIM_Base_SetConfig+0x52>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	4a1d      	ldr	r2, [pc, #116]	; (80062a0 <TIM_Base_SetConfig+0xbc>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d003      	beq.n	8006236 <TIM_Base_SetConfig+0x52>
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	4a1c      	ldr	r2, [pc, #112]	; (80062a4 <TIM_Base_SetConfig+0xc0>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d108      	bne.n	8006248 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800623c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	68db      	ldr	r3, [r3, #12]
 8006242:	68fa      	ldr	r2, [r7, #12]
 8006244:	4313      	orrs	r3, r2
 8006246:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	695b      	ldr	r3, [r3, #20]
 8006252:	4313      	orrs	r3, r2
 8006254:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	68fa      	ldr	r2, [r7, #12]
 800625a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	689a      	ldr	r2, [r3, #8]
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	681a      	ldr	r2, [r3, #0]
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	4a0b      	ldr	r2, [pc, #44]	; (800629c <TIM_Base_SetConfig+0xb8>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d007      	beq.n	8006284 <TIM_Base_SetConfig+0xa0>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	4a0a      	ldr	r2, [pc, #40]	; (80062a0 <TIM_Base_SetConfig+0xbc>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d003      	beq.n	8006284 <TIM_Base_SetConfig+0xa0>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	4a09      	ldr	r2, [pc, #36]	; (80062a4 <TIM_Base_SetConfig+0xc0>)
 8006280:	4293      	cmp	r3, r2
 8006282:	d103      	bne.n	800628c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	691a      	ldr	r2, [r3, #16]
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2201      	movs	r2, #1
 8006290:	615a      	str	r2, [r3, #20]
}
 8006292:	bf00      	nop
 8006294:	3714      	adds	r7, #20
 8006296:	46bd      	mov	sp, r7
 8006298:	bc80      	pop	{r7}
 800629a:	4770      	bx	lr
 800629c:	40012c00 	.word	0x40012c00
 80062a0:	40014400 	.word	0x40014400
 80062a4:	40014800 	.word	0x40014800

080062a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80062a8:	b480      	push	{r7}
 80062aa:	b087      	sub	sp, #28
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	60f8      	str	r0, [r7, #12]
 80062b0:	60b9      	str	r1, [r7, #8]
 80062b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	6a1b      	ldr	r3, [r3, #32]
 80062b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	6a1b      	ldr	r3, [r3, #32]
 80062be:	f023 0201 	bic.w	r2, r3, #1
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	699b      	ldr	r3, [r3, #24]
 80062ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80062cc:	693b      	ldr	r3, [r7, #16]
 80062ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80062d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	011b      	lsls	r3, r3, #4
 80062d8:	693a      	ldr	r2, [r7, #16]
 80062da:	4313      	orrs	r3, r2
 80062dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80062de:	697b      	ldr	r3, [r7, #20]
 80062e0:	f023 030a 	bic.w	r3, r3, #10
 80062e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80062e6:	697a      	ldr	r2, [r7, #20]
 80062e8:	68bb      	ldr	r3, [r7, #8]
 80062ea:	4313      	orrs	r3, r2
 80062ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	693a      	ldr	r2, [r7, #16]
 80062f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	697a      	ldr	r2, [r7, #20]
 80062f8:	621a      	str	r2, [r3, #32]
}
 80062fa:	bf00      	nop
 80062fc:	371c      	adds	r7, #28
 80062fe:	46bd      	mov	sp, r7
 8006300:	bc80      	pop	{r7}
 8006302:	4770      	bx	lr

08006304 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006304:	b480      	push	{r7}
 8006306:	b087      	sub	sp, #28
 8006308:	af00      	add	r7, sp, #0
 800630a:	60f8      	str	r0, [r7, #12]
 800630c:	60b9      	str	r1, [r7, #8]
 800630e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	6a1b      	ldr	r3, [r3, #32]
 8006314:	f023 0210 	bic.w	r2, r3, #16
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	699b      	ldr	r3, [r3, #24]
 8006320:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	6a1b      	ldr	r3, [r3, #32]
 8006326:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006328:	697b      	ldr	r3, [r7, #20]
 800632a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800632e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	031b      	lsls	r3, r3, #12
 8006334:	697a      	ldr	r2, [r7, #20]
 8006336:	4313      	orrs	r3, r2
 8006338:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800633a:	693b      	ldr	r3, [r7, #16]
 800633c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006340:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006342:	68bb      	ldr	r3, [r7, #8]
 8006344:	011b      	lsls	r3, r3, #4
 8006346:	693a      	ldr	r2, [r7, #16]
 8006348:	4313      	orrs	r3, r2
 800634a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	697a      	ldr	r2, [r7, #20]
 8006350:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	693a      	ldr	r2, [r7, #16]
 8006356:	621a      	str	r2, [r3, #32]
}
 8006358:	bf00      	nop
 800635a:	371c      	adds	r7, #28
 800635c:	46bd      	mov	sp, r7
 800635e:	bc80      	pop	{r7}
 8006360:	4770      	bx	lr

08006362 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006362:	b480      	push	{r7}
 8006364:	b085      	sub	sp, #20
 8006366:	af00      	add	r7, sp, #0
 8006368:	6078      	str	r0, [r7, #4]
 800636a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	689b      	ldr	r3, [r3, #8]
 8006370:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8006378:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800637c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800637e:	683a      	ldr	r2, [r7, #0]
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	4313      	orrs	r3, r2
 8006384:	f043 0307 	orr.w	r3, r3, #7
 8006388:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	68fa      	ldr	r2, [r7, #12]
 800638e:	609a      	str	r2, [r3, #8]
}
 8006390:	bf00      	nop
 8006392:	3714      	adds	r7, #20
 8006394:	46bd      	mov	sp, r7
 8006396:	bc80      	pop	{r7}
 8006398:	4770      	bx	lr

0800639a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800639a:	b480      	push	{r7}
 800639c:	b087      	sub	sp, #28
 800639e:	af00      	add	r7, sp, #0
 80063a0:	60f8      	str	r0, [r7, #12]
 80063a2:	60b9      	str	r1, [r7, #8]
 80063a4:	607a      	str	r2, [r7, #4]
 80063a6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	689b      	ldr	r3, [r3, #8]
 80063ac:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80063ae:	697b      	ldr	r3, [r7, #20]
 80063b0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80063b4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	021a      	lsls	r2, r3, #8
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	431a      	orrs	r2, r3
 80063be:	68bb      	ldr	r3, [r7, #8]
 80063c0:	4313      	orrs	r3, r2
 80063c2:	697a      	ldr	r2, [r7, #20]
 80063c4:	4313      	orrs	r3, r2
 80063c6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	697a      	ldr	r2, [r7, #20]
 80063cc:	609a      	str	r2, [r3, #8]
}
 80063ce:	bf00      	nop
 80063d0:	371c      	adds	r7, #28
 80063d2:	46bd      	mov	sp, r7
 80063d4:	bc80      	pop	{r7}
 80063d6:	4770      	bx	lr

080063d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80063d8:	b480      	push	{r7}
 80063da:	b085      	sub	sp, #20
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
 80063e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063e8:	2b01      	cmp	r3, #1
 80063ea:	d101      	bne.n	80063f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80063ec:	2302      	movs	r3, #2
 80063ee:	e04a      	b.n	8006486 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2201      	movs	r2, #1
 80063f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2202      	movs	r2, #2
 80063fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	685b      	ldr	r3, [r3, #4]
 8006406:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	689b      	ldr	r3, [r3, #8]
 800640e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	4a1e      	ldr	r2, [pc, #120]	; (8006490 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d108      	bne.n	800642c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006420:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	685b      	ldr	r3, [r3, #4]
 8006426:	68fa      	ldr	r2, [r7, #12]
 8006428:	4313      	orrs	r3, r2
 800642a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006432:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	68fa      	ldr	r2, [r7, #12]
 800643a:	4313      	orrs	r3, r2
 800643c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	68fa      	ldr	r2, [r7, #12]
 8006444:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	4a11      	ldr	r2, [pc, #68]	; (8006490 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d004      	beq.n	800645a <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006458:	d10c      	bne.n	8006474 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800645a:	68bb      	ldr	r3, [r7, #8]
 800645c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006460:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	689b      	ldr	r3, [r3, #8]
 8006466:	68ba      	ldr	r2, [r7, #8]
 8006468:	4313      	orrs	r3, r2
 800646a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	68ba      	ldr	r2, [r7, #8]
 8006472:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2201      	movs	r2, #1
 8006478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2200      	movs	r2, #0
 8006480:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006484:	2300      	movs	r3, #0
}
 8006486:	4618      	mov	r0, r3
 8006488:	3714      	adds	r7, #20
 800648a:	46bd      	mov	sp, r7
 800648c:	bc80      	pop	{r7}
 800648e:	4770      	bx	lr
 8006490:	40012c00 	.word	0x40012c00

08006494 <LL_RCC_GetUSARTClockSource>:
{
 8006494:	b480      	push	{r7}
 8006496:	b083      	sub	sp, #12
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 800649c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80064a0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	401a      	ands	r2, r3
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	041b      	lsls	r3, r3, #16
 80064ac:	4313      	orrs	r3, r2
}
 80064ae:	4618      	mov	r0, r3
 80064b0:	370c      	adds	r7, #12
 80064b2:	46bd      	mov	sp, r7
 80064b4:	bc80      	pop	{r7}
 80064b6:	4770      	bx	lr

080064b8 <LL_RCC_GetLPUARTClockSource>:
{
 80064b8:	b480      	push	{r7}
 80064ba:	b083      	sub	sp, #12
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80064c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80064c4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	4013      	ands	r3, r2
}
 80064cc:	4618      	mov	r0, r3
 80064ce:	370c      	adds	r7, #12
 80064d0:	46bd      	mov	sp, r7
 80064d2:	bc80      	pop	{r7}
 80064d4:	4770      	bx	lr

080064d6 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80064d6:	b580      	push	{r7, lr}
 80064d8:	b082      	sub	sp, #8
 80064da:	af00      	add	r7, sp, #0
 80064dc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d101      	bne.n	80064e8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80064e4:	2301      	movs	r3, #1
 80064e6:	e042      	b.n	800656e <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d106      	bne.n	8006500 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2200      	movs	r2, #0
 80064f6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80064fa:	6878      	ldr	r0, [r7, #4]
 80064fc:	f7fc fafa 	bl	8002af4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2224      	movs	r2, #36	; 0x24
 8006504:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	681a      	ldr	r2, [r3, #0]
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f022 0201 	bic.w	r2, r2, #1
 8006516:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006518:	6878      	ldr	r0, [r7, #4]
 800651a:	f000 fd0d 	bl	8006f38 <UART_SetConfig>
 800651e:	4603      	mov	r3, r0
 8006520:	2b01      	cmp	r3, #1
 8006522:	d101      	bne.n	8006528 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006524:	2301      	movs	r3, #1
 8006526:	e022      	b.n	800656e <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800652c:	2b00      	cmp	r3, #0
 800652e:	d002      	beq.n	8006536 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006530:	6878      	ldr	r0, [r7, #4]
 8006532:	f000 ff75 	bl	8007420 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	685a      	ldr	r2, [r3, #4]
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006544:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	689a      	ldr	r2, [r3, #8]
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006554:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	681a      	ldr	r2, [r3, #0]
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f042 0201 	orr.w	r2, r2, #1
 8006564:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006566:	6878      	ldr	r0, [r7, #4]
 8006568:	f000 fffb 	bl	8007562 <UART_CheckIdleState>
 800656c:	4603      	mov	r3, r0
}
 800656e:	4618      	mov	r0, r3
 8006570:	3708      	adds	r7, #8
 8006572:	46bd      	mov	sp, r7
 8006574:	bd80      	pop	{r7, pc}

08006576 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006576:	b580      	push	{r7, lr}
 8006578:	b08a      	sub	sp, #40	; 0x28
 800657a:	af02      	add	r7, sp, #8
 800657c:	60f8      	str	r0, [r7, #12]
 800657e:	60b9      	str	r1, [r7, #8]
 8006580:	603b      	str	r3, [r7, #0]
 8006582:	4613      	mov	r3, r2
 8006584:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800658c:	2b20      	cmp	r3, #32
 800658e:	d173      	bne.n	8006678 <HAL_UART_Transmit+0x102>
  {
    if ((pData == NULL) || (Size == 0U))
 8006590:	68bb      	ldr	r3, [r7, #8]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d002      	beq.n	800659c <HAL_UART_Transmit+0x26>
 8006596:	88fb      	ldrh	r3, [r7, #6]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d101      	bne.n	80065a0 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800659c:	2301      	movs	r3, #1
 800659e:	e06c      	b.n	800667a <HAL_UART_Transmit+0x104>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	2200      	movs	r2, #0
 80065a4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	2221      	movs	r2, #33	; 0x21
 80065ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80065b0:	f7fc fd5a 	bl	8003068 <HAL_GetTick>
 80065b4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	88fa      	ldrh	r2, [r7, #6]
 80065ba:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	88fa      	ldrh	r2, [r7, #6]
 80065c2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	689b      	ldr	r3, [r3, #8]
 80065ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065ce:	d108      	bne.n	80065e2 <HAL_UART_Transmit+0x6c>
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	691b      	ldr	r3, [r3, #16]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d104      	bne.n	80065e2 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80065d8:	2300      	movs	r3, #0
 80065da:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80065dc:	68bb      	ldr	r3, [r7, #8]
 80065de:	61bb      	str	r3, [r7, #24]
 80065e0:	e003      	b.n	80065ea <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80065e2:	68bb      	ldr	r3, [r7, #8]
 80065e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80065e6:	2300      	movs	r3, #0
 80065e8:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80065ea:	e02c      	b.n	8006646 <HAL_UART_Transmit+0xd0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	9300      	str	r3, [sp, #0]
 80065f0:	697b      	ldr	r3, [r7, #20]
 80065f2:	2200      	movs	r2, #0
 80065f4:	2180      	movs	r1, #128	; 0x80
 80065f6:	68f8      	ldr	r0, [r7, #12]
 80065f8:	f001 f801 	bl	80075fe <UART_WaitOnFlagUntilTimeout>
 80065fc:	4603      	mov	r3, r0
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d001      	beq.n	8006606 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8006602:	2303      	movs	r3, #3
 8006604:	e039      	b.n	800667a <HAL_UART_Transmit+0x104>
      }
      if (pdata8bits == NULL)
 8006606:	69fb      	ldr	r3, [r7, #28]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d10b      	bne.n	8006624 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800660c:	69bb      	ldr	r3, [r7, #24]
 800660e:	881b      	ldrh	r3, [r3, #0]
 8006610:	461a      	mov	r2, r3
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800661a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800661c:	69bb      	ldr	r3, [r7, #24]
 800661e:	3302      	adds	r3, #2
 8006620:	61bb      	str	r3, [r7, #24]
 8006622:	e007      	b.n	8006634 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006624:	69fb      	ldr	r3, [r7, #28]
 8006626:	781a      	ldrb	r2, [r3, #0]
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800662e:	69fb      	ldr	r3, [r7, #28]
 8006630:	3301      	adds	r3, #1
 8006632:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800663a:	b29b      	uxth	r3, r3
 800663c:	3b01      	subs	r3, #1
 800663e:	b29a      	uxth	r2, r3
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800664c:	b29b      	uxth	r3, r3
 800664e:	2b00      	cmp	r3, #0
 8006650:	d1cc      	bne.n	80065ec <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	9300      	str	r3, [sp, #0]
 8006656:	697b      	ldr	r3, [r7, #20]
 8006658:	2200      	movs	r2, #0
 800665a:	2140      	movs	r1, #64	; 0x40
 800665c:	68f8      	ldr	r0, [r7, #12]
 800665e:	f000 ffce 	bl	80075fe <UART_WaitOnFlagUntilTimeout>
 8006662:	4603      	mov	r3, r0
 8006664:	2b00      	cmp	r3, #0
 8006666:	d001      	beq.n	800666c <HAL_UART_Transmit+0xf6>
    {
      return HAL_TIMEOUT;
 8006668:	2303      	movs	r3, #3
 800666a:	e006      	b.n	800667a <HAL_UART_Transmit+0x104>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	2220      	movs	r2, #32
 8006670:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8006674:	2300      	movs	r3, #0
 8006676:	e000      	b.n	800667a <HAL_UART_Transmit+0x104>
  }
  else
  {
    return HAL_BUSY;
 8006678:	2302      	movs	r3, #2
  }
}
 800667a:	4618      	mov	r0, r3
 800667c:	3720      	adds	r7, #32
 800667e:	46bd      	mov	sp, r7
 8006680:	bd80      	pop	{r7, pc}

08006682 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006682:	b580      	push	{r7, lr}
 8006684:	b08a      	sub	sp, #40	; 0x28
 8006686:	af02      	add	r7, sp, #8
 8006688:	60f8      	str	r0, [r7, #12]
 800668a:	60b9      	str	r1, [r7, #8]
 800668c:	603b      	str	r3, [r7, #0]
 800668e:	4613      	mov	r3, r2
 8006690:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006698:	2b20      	cmp	r3, #32
 800669a:	f040 80b1 	bne.w	8006800 <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 800669e:	68bb      	ldr	r3, [r7, #8]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d002      	beq.n	80066aa <HAL_UART_Receive+0x28>
 80066a4:	88fb      	ldrh	r3, [r7, #6]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d101      	bne.n	80066ae <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80066aa:	2301      	movs	r3, #1
 80066ac:	e0a9      	b.n	8006802 <HAL_UART_Receive+0x180>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	2200      	movs	r2, #0
 80066b2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	2222      	movs	r2, #34	; 0x22
 80066ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	2200      	movs	r2, #0
 80066c2:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80066c4:	f7fc fcd0 	bl	8003068 <HAL_GetTick>
 80066c8:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	88fa      	ldrh	r2, [r7, #6]
 80066ce:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	88fa      	ldrh	r2, [r7, #6]
 80066d6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	689b      	ldr	r3, [r3, #8]
 80066de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066e2:	d10e      	bne.n	8006702 <HAL_UART_Receive+0x80>
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	691b      	ldr	r3, [r3, #16]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d105      	bne.n	80066f8 <HAL_UART_Receive+0x76>
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	f240 12ff 	movw	r2, #511	; 0x1ff
 80066f2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80066f6:	e02d      	b.n	8006754 <HAL_UART_Receive+0xd2>
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	22ff      	movs	r2, #255	; 0xff
 80066fc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006700:	e028      	b.n	8006754 <HAL_UART_Receive+0xd2>
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	689b      	ldr	r3, [r3, #8]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d10d      	bne.n	8006726 <HAL_UART_Receive+0xa4>
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	691b      	ldr	r3, [r3, #16]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d104      	bne.n	800671c <HAL_UART_Receive+0x9a>
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	22ff      	movs	r2, #255	; 0xff
 8006716:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800671a:	e01b      	b.n	8006754 <HAL_UART_Receive+0xd2>
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	227f      	movs	r2, #127	; 0x7f
 8006720:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006724:	e016      	b.n	8006754 <HAL_UART_Receive+0xd2>
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	689b      	ldr	r3, [r3, #8]
 800672a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800672e:	d10d      	bne.n	800674c <HAL_UART_Receive+0xca>
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	691b      	ldr	r3, [r3, #16]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d104      	bne.n	8006742 <HAL_UART_Receive+0xc0>
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	227f      	movs	r2, #127	; 0x7f
 800673c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006740:	e008      	b.n	8006754 <HAL_UART_Receive+0xd2>
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	223f      	movs	r2, #63	; 0x3f
 8006746:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800674a:	e003      	b.n	8006754 <HAL_UART_Receive+0xd2>
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	2200      	movs	r2, #0
 8006750:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800675a:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	689b      	ldr	r3, [r3, #8]
 8006760:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006764:	d108      	bne.n	8006778 <HAL_UART_Receive+0xf6>
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	691b      	ldr	r3, [r3, #16]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d104      	bne.n	8006778 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800676e:	2300      	movs	r3, #0
 8006770:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006772:	68bb      	ldr	r3, [r7, #8]
 8006774:	61bb      	str	r3, [r7, #24]
 8006776:	e003      	b.n	8006780 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8006778:	68bb      	ldr	r3, [r7, #8]
 800677a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800677c:	2300      	movs	r3, #0
 800677e:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8006780:	e032      	b.n	80067e8 <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	9300      	str	r3, [sp, #0]
 8006786:	697b      	ldr	r3, [r7, #20]
 8006788:	2200      	movs	r2, #0
 800678a:	2120      	movs	r1, #32
 800678c:	68f8      	ldr	r0, [r7, #12]
 800678e:	f000 ff36 	bl	80075fe <UART_WaitOnFlagUntilTimeout>
 8006792:	4603      	mov	r3, r0
 8006794:	2b00      	cmp	r3, #0
 8006796:	d001      	beq.n	800679c <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 8006798:	2303      	movs	r3, #3
 800679a:	e032      	b.n	8006802 <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 800679c:	69fb      	ldr	r3, [r7, #28]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d10c      	bne.n	80067bc <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067a8:	b29a      	uxth	r2, r3
 80067aa:	8a7b      	ldrh	r3, [r7, #18]
 80067ac:	4013      	ands	r3, r2
 80067ae:	b29a      	uxth	r2, r3
 80067b0:	69bb      	ldr	r3, [r7, #24]
 80067b2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80067b4:	69bb      	ldr	r3, [r7, #24]
 80067b6:	3302      	adds	r3, #2
 80067b8:	61bb      	str	r3, [r7, #24]
 80067ba:	e00c      	b.n	80067d6 <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067c2:	b2da      	uxtb	r2, r3
 80067c4:	8a7b      	ldrh	r3, [r7, #18]
 80067c6:	b2db      	uxtb	r3, r3
 80067c8:	4013      	ands	r3, r2
 80067ca:	b2da      	uxtb	r2, r3
 80067cc:	69fb      	ldr	r3, [r7, #28]
 80067ce:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80067d0:	69fb      	ldr	r3, [r7, #28]
 80067d2:	3301      	adds	r3, #1
 80067d4:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80067dc:	b29b      	uxth	r3, r3
 80067de:	3b01      	subs	r3, #1
 80067e0:	b29a      	uxth	r2, r3
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80067ee:	b29b      	uxth	r3, r3
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d1c6      	bne.n	8006782 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	2220      	movs	r2, #32
 80067f8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 80067fc:	2300      	movs	r3, #0
 80067fe:	e000      	b.n	8006802 <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 8006800:	2302      	movs	r3, #2
  }
}
 8006802:	4618      	mov	r0, r3
 8006804:	3720      	adds	r7, #32
 8006806:	46bd      	mov	sp, r7
 8006808:	bd80      	pop	{r7, pc}
	...

0800680c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b08a      	sub	sp, #40	; 0x28
 8006810:	af00      	add	r7, sp, #0
 8006812:	60f8      	str	r0, [r7, #12]
 8006814:	60b9      	str	r1, [r7, #8]
 8006816:	4613      	mov	r3, r2
 8006818:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006820:	2b20      	cmp	r3, #32
 8006822:	d137      	bne.n	8006894 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8006824:	68bb      	ldr	r3, [r7, #8]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d002      	beq.n	8006830 <HAL_UART_Receive_DMA+0x24>
 800682a:	88fb      	ldrh	r3, [r7, #6]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d101      	bne.n	8006834 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8006830:	2301      	movs	r3, #1
 8006832:	e030      	b.n	8006896 <HAL_UART_Receive_DMA+0x8a>
      }
    }

#endif /* CORE_CM0PLUS */
    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	2200      	movs	r2, #0
 8006838:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	4a18      	ldr	r2, [pc, #96]	; (80068a0 <HAL_UART_Receive_DMA+0x94>)
 8006840:	4293      	cmp	r3, r2
 8006842:	d01f      	beq.n	8006884 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	685b      	ldr	r3, [r3, #4]
 800684a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800684e:	2b00      	cmp	r3, #0
 8006850:	d018      	beq.n	8006884 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006858:	697b      	ldr	r3, [r7, #20]
 800685a:	e853 3f00 	ldrex	r3, [r3]
 800685e:	613b      	str	r3, [r7, #16]
   return(result);
 8006860:	693b      	ldr	r3, [r7, #16]
 8006862:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006866:	627b      	str	r3, [r7, #36]	; 0x24
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	461a      	mov	r2, r3
 800686e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006870:	623b      	str	r3, [r7, #32]
 8006872:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006874:	69f9      	ldr	r1, [r7, #28]
 8006876:	6a3a      	ldr	r2, [r7, #32]
 8006878:	e841 2300 	strex	r3, r2, [r1]
 800687c:	61bb      	str	r3, [r7, #24]
   return(result);
 800687e:	69bb      	ldr	r3, [r7, #24]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d1e6      	bne.n	8006852 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8006884:	88fb      	ldrh	r3, [r7, #6]
 8006886:	461a      	mov	r2, r3
 8006888:	68b9      	ldr	r1, [r7, #8]
 800688a:	68f8      	ldr	r0, [r7, #12]
 800688c:	f000 ff80 	bl	8007790 <UART_Start_Receive_DMA>
 8006890:	4603      	mov	r3, r0
 8006892:	e000      	b.n	8006896 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006894:	2302      	movs	r3, #2
  }
}
 8006896:	4618      	mov	r0, r3
 8006898:	3728      	adds	r7, #40	; 0x28
 800689a:	46bd      	mov	sp, r7
 800689c:	bd80      	pop	{r7, pc}
 800689e:	bf00      	nop
 80068a0:	40008000 	.word	0x40008000

080068a4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b0ba      	sub	sp, #232	; 0xe8
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	69db      	ldr	r3, [r3, #28]
 80068b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	689b      	ldr	r3, [r3, #8]
 80068c6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80068ca:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80068ce:	f640 030f 	movw	r3, #2063	; 0x80f
 80068d2:	4013      	ands	r3, r2
 80068d4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80068d8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d11b      	bne.n	8006918 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80068e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068e4:	f003 0320 	and.w	r3, r3, #32
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d015      	beq.n	8006918 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80068ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80068f0:	f003 0320 	and.w	r3, r3, #32
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d105      	bne.n	8006904 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80068f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80068fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006900:	2b00      	cmp	r3, #0
 8006902:	d009      	beq.n	8006918 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006908:	2b00      	cmp	r3, #0
 800690a:	f000 82e3 	beq.w	8006ed4 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006912:	6878      	ldr	r0, [r7, #4]
 8006914:	4798      	blx	r3
      }
      return;
 8006916:	e2dd      	b.n	8006ed4 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006918:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800691c:	2b00      	cmp	r3, #0
 800691e:	f000 8123 	beq.w	8006b68 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006922:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006926:	4b8d      	ldr	r3, [pc, #564]	; (8006b5c <HAL_UART_IRQHandler+0x2b8>)
 8006928:	4013      	ands	r3, r2
 800692a:	2b00      	cmp	r3, #0
 800692c:	d106      	bne.n	800693c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800692e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006932:	4b8b      	ldr	r3, [pc, #556]	; (8006b60 <HAL_UART_IRQHandler+0x2bc>)
 8006934:	4013      	ands	r3, r2
 8006936:	2b00      	cmp	r3, #0
 8006938:	f000 8116 	beq.w	8006b68 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800693c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006940:	f003 0301 	and.w	r3, r3, #1
 8006944:	2b00      	cmp	r3, #0
 8006946:	d011      	beq.n	800696c <HAL_UART_IRQHandler+0xc8>
 8006948:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800694c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006950:	2b00      	cmp	r3, #0
 8006952:	d00b      	beq.n	800696c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	2201      	movs	r2, #1
 800695a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006962:	f043 0201 	orr.w	r2, r3, #1
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800696c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006970:	f003 0302 	and.w	r3, r3, #2
 8006974:	2b00      	cmp	r3, #0
 8006976:	d011      	beq.n	800699c <HAL_UART_IRQHandler+0xf8>
 8006978:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800697c:	f003 0301 	and.w	r3, r3, #1
 8006980:	2b00      	cmp	r3, #0
 8006982:	d00b      	beq.n	800699c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	2202      	movs	r2, #2
 800698a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006992:	f043 0204 	orr.w	r2, r3, #4
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800699c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069a0:	f003 0304 	and.w	r3, r3, #4
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d011      	beq.n	80069cc <HAL_UART_IRQHandler+0x128>
 80069a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80069ac:	f003 0301 	and.w	r3, r3, #1
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d00b      	beq.n	80069cc <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	2204      	movs	r2, #4
 80069ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069c2:	f043 0202 	orr.w	r2, r3, #2
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80069cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069d0:	f003 0308 	and.w	r3, r3, #8
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d017      	beq.n	8006a08 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80069d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069dc:	f003 0320 	and.w	r3, r3, #32
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d105      	bne.n	80069f0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80069e4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80069e8:	4b5c      	ldr	r3, [pc, #368]	; (8006b5c <HAL_UART_IRQHandler+0x2b8>)
 80069ea:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d00b      	beq.n	8006a08 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	2208      	movs	r2, #8
 80069f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069fe:	f043 0208 	orr.w	r2, r3, #8
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006a08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d012      	beq.n	8006a3a <HAL_UART_IRQHandler+0x196>
 8006a14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a18:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d00c      	beq.n	8006a3a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006a28:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a30:	f043 0220 	orr.w	r2, r3, #32
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	f000 8249 	beq.w	8006ed8 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006a46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a4a:	f003 0320 	and.w	r3, r3, #32
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d013      	beq.n	8006a7a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006a52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a56:	f003 0320 	and.w	r3, r3, #32
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d105      	bne.n	8006a6a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006a5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d007      	beq.n	8006a7a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d003      	beq.n	8006a7a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a76:	6878      	ldr	r0, [r7, #4]
 8006a78:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a80:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	689b      	ldr	r3, [r3, #8]
 8006a8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a8e:	2b40      	cmp	r3, #64	; 0x40
 8006a90:	d005      	beq.n	8006a9e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006a92:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006a96:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d054      	beq.n	8006b48 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006a9e:	6878      	ldr	r0, [r7, #4]
 8006aa0:	f000 ff5c 	bl	800795c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	689b      	ldr	r3, [r3, #8]
 8006aaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006aae:	2b40      	cmp	r3, #64	; 0x40
 8006ab0:	d146      	bne.n	8006b40 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	3308      	adds	r3, #8
 8006ab8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006abc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006ac0:	e853 3f00 	ldrex	r3, [r3]
 8006ac4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006ac8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006acc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ad0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	3308      	adds	r3, #8
 8006ada:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006ade:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006ae2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ae6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006aea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006aee:	e841 2300 	strex	r3, r2, [r1]
 8006af2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006af6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d1d9      	bne.n	8006ab2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d017      	beq.n	8006b38 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b0e:	4a15      	ldr	r2, [pc, #84]	; (8006b64 <HAL_UART_IRQHandler+0x2c0>)
 8006b10:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b18:	4618      	mov	r0, r3
 8006b1a:	f7fc fe9f 	bl	800385c <HAL_DMA_Abort_IT>
 8006b1e:	4603      	mov	r3, r0
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d019      	beq.n	8006b58 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b2c:	687a      	ldr	r2, [r7, #4]
 8006b2e:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8006b32:	4610      	mov	r0, r2
 8006b34:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b36:	e00f      	b.n	8006b58 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006b38:	6878      	ldr	r0, [r7, #4]
 8006b3a:	f000 f9e9 	bl	8006f10 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b3e:	e00b      	b.n	8006b58 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006b40:	6878      	ldr	r0, [r7, #4]
 8006b42:	f000 f9e5 	bl	8006f10 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b46:	e007      	b.n	8006b58 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006b48:	6878      	ldr	r0, [r7, #4]
 8006b4a:	f000 f9e1 	bl	8006f10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2200      	movs	r2, #0
 8006b52:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8006b56:	e1bf      	b.n	8006ed8 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b58:	bf00      	nop
    return;
 8006b5a:	e1bd      	b.n	8006ed8 <HAL_UART_IRQHandler+0x634>
 8006b5c:	10000001 	.word	0x10000001
 8006b60:	04000120 	.word	0x04000120
 8006b64:	08007c11 	.word	0x08007c11

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b6c:	2b01      	cmp	r3, #1
 8006b6e:	f040 8153 	bne.w	8006e18 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006b72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b76:	f003 0310 	and.w	r3, r3, #16
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	f000 814c 	beq.w	8006e18 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006b80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b84:	f003 0310 	and.w	r3, r3, #16
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	f000 8145 	beq.w	8006e18 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	2210      	movs	r2, #16
 8006b94:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	689b      	ldr	r3, [r3, #8]
 8006b9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ba0:	2b40      	cmp	r3, #64	; 0x40
 8006ba2:	f040 80bb 	bne.w	8006d1c <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	685b      	ldr	r3, [r3, #4]
 8006bb0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006bb4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	f000 818f 	beq.w	8006edc <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006bc4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006bc8:	429a      	cmp	r2, r3
 8006bca:	f080 8187 	bcs.w	8006edc <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006bd4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f003 0320 	and.w	r3, r3, #32
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	f040 8087 	bne.w	8006cfa <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bf4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006bf8:	e853 3f00 	ldrex	r3, [r3]
 8006bfc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006c00:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006c04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006c08:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	461a      	mov	r2, r3
 8006c12:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006c16:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006c1a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c1e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006c22:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006c26:	e841 2300 	strex	r3, r2, [r1]
 8006c2a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006c2e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d1da      	bne.n	8006bec <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	3308      	adds	r3, #8
 8006c3c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006c40:	e853 3f00 	ldrex	r3, [r3]
 8006c44:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006c46:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006c48:	f023 0301 	bic.w	r3, r3, #1
 8006c4c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	3308      	adds	r3, #8
 8006c56:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006c5a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006c5e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c60:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006c62:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006c66:	e841 2300 	strex	r3, r2, [r1]
 8006c6a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006c6c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d1e1      	bne.n	8006c36 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	3308      	adds	r3, #8
 8006c78:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c7a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006c7c:	e853 3f00 	ldrex	r3, [r3]
 8006c80:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006c82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006c84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c88:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	3308      	adds	r3, #8
 8006c92:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006c96:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006c98:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c9a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006c9c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006c9e:	e841 2300 	strex	r3, r2, [r1]
 8006ca2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006ca4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d1e3      	bne.n	8006c72 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	2220      	movs	r2, #32
 8006cae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006cc0:	e853 3f00 	ldrex	r3, [r3]
 8006cc4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006cc6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006cc8:	f023 0310 	bic.w	r3, r3, #16
 8006ccc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	461a      	mov	r2, r3
 8006cd6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006cda:	65bb      	str	r3, [r7, #88]	; 0x58
 8006cdc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cde:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006ce0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006ce2:	e841 2300 	strex	r3, r2, [r1]
 8006ce6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006ce8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d1e4      	bne.n	8006cb8 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	f7fc fd53 	bl	80037a0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2202      	movs	r2, #2
 8006cfe:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006d0c:	b29b      	uxth	r3, r3
 8006d0e:	1ad3      	subs	r3, r2, r3
 8006d10:	b29b      	uxth	r3, r3
 8006d12:	4619      	mov	r1, r3
 8006d14:	6878      	ldr	r0, [r7, #4]
 8006d16:	f000 f904 	bl	8006f22 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006d1a:	e0df      	b.n	8006edc <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006d28:	b29b      	uxth	r3, r3
 8006d2a:	1ad3      	subs	r3, r2, r3
 8006d2c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006d36:	b29b      	uxth	r3, r3
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	f000 80d1 	beq.w	8006ee0 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8006d3e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	f000 80cc 	beq.w	8006ee0 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d50:	e853 3f00 	ldrex	r3, [r3]
 8006d54:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006d56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d58:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006d5c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	461a      	mov	r2, r3
 8006d66:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006d6a:	647b      	str	r3, [r7, #68]	; 0x44
 8006d6c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d6e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006d70:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006d72:	e841 2300 	strex	r3, r2, [r1]
 8006d76:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006d78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d1e4      	bne.n	8006d48 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	3308      	adds	r3, #8
 8006d84:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d88:	e853 3f00 	ldrex	r3, [r3]
 8006d8c:	623b      	str	r3, [r7, #32]
   return(result);
 8006d8e:	6a3b      	ldr	r3, [r7, #32]
 8006d90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006d94:	f023 0301 	bic.w	r3, r3, #1
 8006d98:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	3308      	adds	r3, #8
 8006da2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006da6:	633a      	str	r2, [r7, #48]	; 0x30
 8006da8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006daa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006dac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006dae:	e841 2300 	strex	r3, r2, [r1]
 8006db2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d1e1      	bne.n	8006d7e <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	2220      	movs	r2, #32
 8006dbe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2200      	movs	r2, #0
 8006dcc:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dd4:	693b      	ldr	r3, [r7, #16]
 8006dd6:	e853 3f00 	ldrex	r3, [r3]
 8006dda:	60fb      	str	r3, [r7, #12]
   return(result);
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	f023 0310 	bic.w	r3, r3, #16
 8006de2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	461a      	mov	r2, r3
 8006dec:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006df0:	61fb      	str	r3, [r7, #28]
 8006df2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006df4:	69b9      	ldr	r1, [r7, #24]
 8006df6:	69fa      	ldr	r2, [r7, #28]
 8006df8:	e841 2300 	strex	r3, r2, [r1]
 8006dfc:	617b      	str	r3, [r7, #20]
   return(result);
 8006dfe:	697b      	ldr	r3, [r7, #20]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d1e4      	bne.n	8006dce <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2202      	movs	r2, #2
 8006e08:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006e0a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006e0e:	4619      	mov	r1, r3
 8006e10:	6878      	ldr	r0, [r7, #4]
 8006e12:	f000 f886 	bl	8006f22 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006e16:	e063      	b.n	8006ee0 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006e18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e1c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d00e      	beq.n	8006e42 <HAL_UART_IRQHandler+0x59e>
 8006e24:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006e28:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d008      	beq.n	8006e42 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006e38:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006e3a:	6878      	ldr	r0, [r7, #4]
 8006e3c:	f000 ff29 	bl	8007c92 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006e40:	e051      	b.n	8006ee6 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006e42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d014      	beq.n	8006e78 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006e4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d105      	bne.n	8006e66 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006e5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006e5e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d008      	beq.n	8006e78 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d03a      	beq.n	8006ee4 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006e72:	6878      	ldr	r0, [r7, #4]
 8006e74:	4798      	blx	r3
    }
    return;
 8006e76:	e035      	b.n	8006ee4 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006e78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d009      	beq.n	8006e98 <HAL_UART_IRQHandler+0x5f4>
 8006e84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d003      	beq.n	8006e98 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8006e90:	6878      	ldr	r0, [r7, #4]
 8006e92:	f000 fed3 	bl	8007c3c <UART_EndTransmit_IT>
    return;
 8006e96:	e026      	b.n	8006ee6 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006e98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e9c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d009      	beq.n	8006eb8 <HAL_UART_IRQHandler+0x614>
 8006ea4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ea8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d003      	beq.n	8006eb8 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006eb0:	6878      	ldr	r0, [r7, #4]
 8006eb2:	f000 ff00 	bl	8007cb6 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006eb6:	e016      	b.n	8006ee6 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006eb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ebc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d010      	beq.n	8006ee6 <HAL_UART_IRQHandler+0x642>
 8006ec4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	da0c      	bge.n	8006ee6 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006ecc:	6878      	ldr	r0, [r7, #4]
 8006ece:	f000 fee9 	bl	8007ca4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006ed2:	e008      	b.n	8006ee6 <HAL_UART_IRQHandler+0x642>
      return;
 8006ed4:	bf00      	nop
 8006ed6:	e006      	b.n	8006ee6 <HAL_UART_IRQHandler+0x642>
    return;
 8006ed8:	bf00      	nop
 8006eda:	e004      	b.n	8006ee6 <HAL_UART_IRQHandler+0x642>
      return;
 8006edc:	bf00      	nop
 8006ede:	e002      	b.n	8006ee6 <HAL_UART_IRQHandler+0x642>
      return;
 8006ee0:	bf00      	nop
 8006ee2:	e000      	b.n	8006ee6 <HAL_UART_IRQHandler+0x642>
    return;
 8006ee4:	bf00      	nop
  }
}
 8006ee6:	37e8      	adds	r7, #232	; 0xe8
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	bd80      	pop	{r7, pc}

08006eec <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006eec:	b480      	push	{r7}
 8006eee:	b083      	sub	sp, #12
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006ef4:	bf00      	nop
 8006ef6:	370c      	adds	r7, #12
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	bc80      	pop	{r7}
 8006efc:	4770      	bx	lr

08006efe <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006efe:	b480      	push	{r7}
 8006f00:	b083      	sub	sp, #12
 8006f02:	af00      	add	r7, sp, #0
 8006f04:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8006f06:	bf00      	nop
 8006f08:	370c      	adds	r7, #12
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	bc80      	pop	{r7}
 8006f0e:	4770      	bx	lr

08006f10 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006f10:	b480      	push	{r7}
 8006f12:	b083      	sub	sp, #12
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006f18:	bf00      	nop
 8006f1a:	370c      	adds	r7, #12
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	bc80      	pop	{r7}
 8006f20:	4770      	bx	lr

08006f22 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006f22:	b480      	push	{r7}
 8006f24:	b083      	sub	sp, #12
 8006f26:	af00      	add	r7, sp, #0
 8006f28:	6078      	str	r0, [r7, #4]
 8006f2a:	460b      	mov	r3, r1
 8006f2c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006f2e:	bf00      	nop
 8006f30:	370c      	adds	r7, #12
 8006f32:	46bd      	mov	sp, r7
 8006f34:	bc80      	pop	{r7}
 8006f36:	4770      	bx	lr

08006f38 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006f38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006f3c:	b08c      	sub	sp, #48	; 0x30
 8006f3e:	af00      	add	r7, sp, #0
 8006f40:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006f42:	2300      	movs	r3, #0
 8006f44:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006f48:	697b      	ldr	r3, [r7, #20]
 8006f4a:	689a      	ldr	r2, [r3, #8]
 8006f4c:	697b      	ldr	r3, [r7, #20]
 8006f4e:	691b      	ldr	r3, [r3, #16]
 8006f50:	431a      	orrs	r2, r3
 8006f52:	697b      	ldr	r3, [r7, #20]
 8006f54:	695b      	ldr	r3, [r3, #20]
 8006f56:	431a      	orrs	r2, r3
 8006f58:	697b      	ldr	r3, [r7, #20]
 8006f5a:	69db      	ldr	r3, [r3, #28]
 8006f5c:	4313      	orrs	r3, r2
 8006f5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006f60:	697b      	ldr	r3, [r7, #20]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	681a      	ldr	r2, [r3, #0]
 8006f66:	4b94      	ldr	r3, [pc, #592]	; (80071b8 <UART_SetConfig+0x280>)
 8006f68:	4013      	ands	r3, r2
 8006f6a:	697a      	ldr	r2, [r7, #20]
 8006f6c:	6812      	ldr	r2, [r2, #0]
 8006f6e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006f70:	430b      	orrs	r3, r1
 8006f72:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006f74:	697b      	ldr	r3, [r7, #20]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	685b      	ldr	r3, [r3, #4]
 8006f7a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006f7e:	697b      	ldr	r3, [r7, #20]
 8006f80:	68da      	ldr	r2, [r3, #12]
 8006f82:	697b      	ldr	r3, [r7, #20]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	430a      	orrs	r2, r1
 8006f88:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006f8a:	697b      	ldr	r3, [r7, #20]
 8006f8c:	699b      	ldr	r3, [r3, #24]
 8006f8e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006f90:	697b      	ldr	r3, [r7, #20]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	4a89      	ldr	r2, [pc, #548]	; (80071bc <UART_SetConfig+0x284>)
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d004      	beq.n	8006fa4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006f9a:	697b      	ldr	r3, [r7, #20]
 8006f9c:	6a1b      	ldr	r3, [r3, #32]
 8006f9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006fa0:	4313      	orrs	r3, r2
 8006fa2:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006fa4:	697b      	ldr	r3, [r7, #20]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	689b      	ldr	r3, [r3, #8]
 8006faa:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8006fae:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8006fb2:	697a      	ldr	r2, [r7, #20]
 8006fb4:	6812      	ldr	r2, [r2, #0]
 8006fb6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006fb8:	430b      	orrs	r3, r1
 8006fba:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006fbc:	697b      	ldr	r3, [r7, #20]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fc2:	f023 010f 	bic.w	r1, r3, #15
 8006fc6:	697b      	ldr	r3, [r7, #20]
 8006fc8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006fca:	697b      	ldr	r3, [r7, #20]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	430a      	orrs	r2, r1
 8006fd0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006fd2:	697b      	ldr	r3, [r7, #20]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	4a7a      	ldr	r2, [pc, #488]	; (80071c0 <UART_SetConfig+0x288>)
 8006fd8:	4293      	cmp	r3, r2
 8006fda:	d127      	bne.n	800702c <UART_SetConfig+0xf4>
 8006fdc:	2003      	movs	r0, #3
 8006fde:	f7ff fa59 	bl	8006494 <LL_RCC_GetUSARTClockSource>
 8006fe2:	4603      	mov	r3, r0
 8006fe4:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 8006fe8:	2b03      	cmp	r3, #3
 8006fea:	d81b      	bhi.n	8007024 <UART_SetConfig+0xec>
 8006fec:	a201      	add	r2, pc, #4	; (adr r2, 8006ff4 <UART_SetConfig+0xbc>)
 8006fee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ff2:	bf00      	nop
 8006ff4:	08007005 	.word	0x08007005
 8006ff8:	08007015 	.word	0x08007015
 8006ffc:	0800700d 	.word	0x0800700d
 8007000:	0800701d 	.word	0x0800701d
 8007004:	2301      	movs	r3, #1
 8007006:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800700a:	e080      	b.n	800710e <UART_SetConfig+0x1d6>
 800700c:	2302      	movs	r3, #2
 800700e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007012:	e07c      	b.n	800710e <UART_SetConfig+0x1d6>
 8007014:	2304      	movs	r3, #4
 8007016:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800701a:	e078      	b.n	800710e <UART_SetConfig+0x1d6>
 800701c:	2308      	movs	r3, #8
 800701e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007022:	e074      	b.n	800710e <UART_SetConfig+0x1d6>
 8007024:	2310      	movs	r3, #16
 8007026:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800702a:	e070      	b.n	800710e <UART_SetConfig+0x1d6>
 800702c:	697b      	ldr	r3, [r7, #20]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	4a64      	ldr	r2, [pc, #400]	; (80071c4 <UART_SetConfig+0x28c>)
 8007032:	4293      	cmp	r3, r2
 8007034:	d138      	bne.n	80070a8 <UART_SetConfig+0x170>
 8007036:	200c      	movs	r0, #12
 8007038:	f7ff fa2c 	bl	8006494 <LL_RCC_GetUSARTClockSource>
 800703c:	4603      	mov	r3, r0
 800703e:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 8007042:	2b0c      	cmp	r3, #12
 8007044:	d82c      	bhi.n	80070a0 <UART_SetConfig+0x168>
 8007046:	a201      	add	r2, pc, #4	; (adr r2, 800704c <UART_SetConfig+0x114>)
 8007048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800704c:	08007081 	.word	0x08007081
 8007050:	080070a1 	.word	0x080070a1
 8007054:	080070a1 	.word	0x080070a1
 8007058:	080070a1 	.word	0x080070a1
 800705c:	08007091 	.word	0x08007091
 8007060:	080070a1 	.word	0x080070a1
 8007064:	080070a1 	.word	0x080070a1
 8007068:	080070a1 	.word	0x080070a1
 800706c:	08007089 	.word	0x08007089
 8007070:	080070a1 	.word	0x080070a1
 8007074:	080070a1 	.word	0x080070a1
 8007078:	080070a1 	.word	0x080070a1
 800707c:	08007099 	.word	0x08007099
 8007080:	2300      	movs	r3, #0
 8007082:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007086:	e042      	b.n	800710e <UART_SetConfig+0x1d6>
 8007088:	2302      	movs	r3, #2
 800708a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800708e:	e03e      	b.n	800710e <UART_SetConfig+0x1d6>
 8007090:	2304      	movs	r3, #4
 8007092:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007096:	e03a      	b.n	800710e <UART_SetConfig+0x1d6>
 8007098:	2308      	movs	r3, #8
 800709a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800709e:	e036      	b.n	800710e <UART_SetConfig+0x1d6>
 80070a0:	2310      	movs	r3, #16
 80070a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80070a6:	e032      	b.n	800710e <UART_SetConfig+0x1d6>
 80070a8:	697b      	ldr	r3, [r7, #20]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	4a43      	ldr	r2, [pc, #268]	; (80071bc <UART_SetConfig+0x284>)
 80070ae:	4293      	cmp	r3, r2
 80070b0:	d12a      	bne.n	8007108 <UART_SetConfig+0x1d0>
 80070b2:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80070b6:	f7ff f9ff 	bl	80064b8 <LL_RCC_GetLPUARTClockSource>
 80070ba:	4603      	mov	r3, r0
 80070bc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80070c0:	d01a      	beq.n	80070f8 <UART_SetConfig+0x1c0>
 80070c2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80070c6:	d81b      	bhi.n	8007100 <UART_SetConfig+0x1c8>
 80070c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80070cc:	d00c      	beq.n	80070e8 <UART_SetConfig+0x1b0>
 80070ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80070d2:	d815      	bhi.n	8007100 <UART_SetConfig+0x1c8>
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d003      	beq.n	80070e0 <UART_SetConfig+0x1a8>
 80070d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80070dc:	d008      	beq.n	80070f0 <UART_SetConfig+0x1b8>
 80070de:	e00f      	b.n	8007100 <UART_SetConfig+0x1c8>
 80070e0:	2300      	movs	r3, #0
 80070e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80070e6:	e012      	b.n	800710e <UART_SetConfig+0x1d6>
 80070e8:	2302      	movs	r3, #2
 80070ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80070ee:	e00e      	b.n	800710e <UART_SetConfig+0x1d6>
 80070f0:	2304      	movs	r3, #4
 80070f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80070f6:	e00a      	b.n	800710e <UART_SetConfig+0x1d6>
 80070f8:	2308      	movs	r3, #8
 80070fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80070fe:	e006      	b.n	800710e <UART_SetConfig+0x1d6>
 8007100:	2310      	movs	r3, #16
 8007102:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007106:	e002      	b.n	800710e <UART_SetConfig+0x1d6>
 8007108:	2310      	movs	r3, #16
 800710a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800710e:	697b      	ldr	r3, [r7, #20]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	4a2a      	ldr	r2, [pc, #168]	; (80071bc <UART_SetConfig+0x284>)
 8007114:	4293      	cmp	r3, r2
 8007116:	f040 80a4 	bne.w	8007262 <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800711a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800711e:	2b08      	cmp	r3, #8
 8007120:	d823      	bhi.n	800716a <UART_SetConfig+0x232>
 8007122:	a201      	add	r2, pc, #4	; (adr r2, 8007128 <UART_SetConfig+0x1f0>)
 8007124:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007128:	0800714d 	.word	0x0800714d
 800712c:	0800716b 	.word	0x0800716b
 8007130:	08007155 	.word	0x08007155
 8007134:	0800716b 	.word	0x0800716b
 8007138:	0800715b 	.word	0x0800715b
 800713c:	0800716b 	.word	0x0800716b
 8007140:	0800716b 	.word	0x0800716b
 8007144:	0800716b 	.word	0x0800716b
 8007148:	08007163 	.word	0x08007163
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800714c:	f7fd ff46 	bl	8004fdc <HAL_RCC_GetPCLK1Freq>
 8007150:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007152:	e010      	b.n	8007176 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007154:	4b1c      	ldr	r3, [pc, #112]	; (80071c8 <UART_SetConfig+0x290>)
 8007156:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007158:	e00d      	b.n	8007176 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800715a:	f7fd fe8b 	bl	8004e74 <HAL_RCC_GetSysClockFreq>
 800715e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007160:	e009      	b.n	8007176 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007162:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007166:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007168:	e005      	b.n	8007176 <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 800716a:	2300      	movs	r3, #0
 800716c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800716e:	2301      	movs	r3, #1
 8007170:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007174:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007178:	2b00      	cmp	r3, #0
 800717a:	f000 8137 	beq.w	80073ec <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800717e:	697b      	ldr	r3, [r7, #20]
 8007180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007182:	4a12      	ldr	r2, [pc, #72]	; (80071cc <UART_SetConfig+0x294>)
 8007184:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007188:	461a      	mov	r2, r3
 800718a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800718c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007190:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007192:	697b      	ldr	r3, [r7, #20]
 8007194:	685a      	ldr	r2, [r3, #4]
 8007196:	4613      	mov	r3, r2
 8007198:	005b      	lsls	r3, r3, #1
 800719a:	4413      	add	r3, r2
 800719c:	69ba      	ldr	r2, [r7, #24]
 800719e:	429a      	cmp	r2, r3
 80071a0:	d305      	bcc.n	80071ae <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80071a2:	697b      	ldr	r3, [r7, #20]
 80071a4:	685b      	ldr	r3, [r3, #4]
 80071a6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80071a8:	69ba      	ldr	r2, [r7, #24]
 80071aa:	429a      	cmp	r2, r3
 80071ac:	d910      	bls.n	80071d0 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 80071ae:	2301      	movs	r3, #1
 80071b0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80071b4:	e11a      	b.n	80073ec <UART_SetConfig+0x4b4>
 80071b6:	bf00      	nop
 80071b8:	cfff69f3 	.word	0xcfff69f3
 80071bc:	40008000 	.word	0x40008000
 80071c0:	40013800 	.word	0x40013800
 80071c4:	40004400 	.word	0x40004400
 80071c8:	00f42400 	.word	0x00f42400
 80071cc:	0800cbe8 	.word	0x0800cbe8
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80071d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071d2:	2200      	movs	r2, #0
 80071d4:	60bb      	str	r3, [r7, #8]
 80071d6:	60fa      	str	r2, [r7, #12]
 80071d8:	697b      	ldr	r3, [r7, #20]
 80071da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071dc:	4a8e      	ldr	r2, [pc, #568]	; (8007418 <UART_SetConfig+0x4e0>)
 80071de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80071e2:	b29b      	uxth	r3, r3
 80071e4:	2200      	movs	r2, #0
 80071e6:	603b      	str	r3, [r7, #0]
 80071e8:	607a      	str	r2, [r7, #4]
 80071ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 80071ee:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80071f2:	f7f9 f815 	bl	8000220 <__aeabi_uldivmod>
 80071f6:	4602      	mov	r2, r0
 80071f8:	460b      	mov	r3, r1
 80071fa:	4610      	mov	r0, r2
 80071fc:	4619      	mov	r1, r3
 80071fe:	f04f 0200 	mov.w	r2, #0
 8007202:	f04f 0300 	mov.w	r3, #0
 8007206:	020b      	lsls	r3, r1, #8
 8007208:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800720c:	0202      	lsls	r2, r0, #8
 800720e:	6979      	ldr	r1, [r7, #20]
 8007210:	6849      	ldr	r1, [r1, #4]
 8007212:	0849      	lsrs	r1, r1, #1
 8007214:	2000      	movs	r0, #0
 8007216:	460c      	mov	r4, r1
 8007218:	4605      	mov	r5, r0
 800721a:	eb12 0804 	adds.w	r8, r2, r4
 800721e:	eb43 0905 	adc.w	r9, r3, r5
 8007222:	697b      	ldr	r3, [r7, #20]
 8007224:	685b      	ldr	r3, [r3, #4]
 8007226:	2200      	movs	r2, #0
 8007228:	469a      	mov	sl, r3
 800722a:	4693      	mov	fp, r2
 800722c:	4652      	mov	r2, sl
 800722e:	465b      	mov	r3, fp
 8007230:	4640      	mov	r0, r8
 8007232:	4649      	mov	r1, r9
 8007234:	f7f8 fff4 	bl	8000220 <__aeabi_uldivmod>
 8007238:	4602      	mov	r2, r0
 800723a:	460b      	mov	r3, r1
 800723c:	4613      	mov	r3, r2
 800723e:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007240:	6a3b      	ldr	r3, [r7, #32]
 8007242:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007246:	d308      	bcc.n	800725a <UART_SetConfig+0x322>
 8007248:	6a3b      	ldr	r3, [r7, #32]
 800724a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800724e:	d204      	bcs.n	800725a <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 8007250:	697b      	ldr	r3, [r7, #20]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	6a3a      	ldr	r2, [r7, #32]
 8007256:	60da      	str	r2, [r3, #12]
 8007258:	e0c8      	b.n	80073ec <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 800725a:	2301      	movs	r3, #1
 800725c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007260:	e0c4      	b.n	80073ec <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007262:	697b      	ldr	r3, [r7, #20]
 8007264:	69db      	ldr	r3, [r3, #28]
 8007266:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800726a:	d167      	bne.n	800733c <UART_SetConfig+0x404>
  {
    switch (clocksource)
 800726c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007270:	2b08      	cmp	r3, #8
 8007272:	d828      	bhi.n	80072c6 <UART_SetConfig+0x38e>
 8007274:	a201      	add	r2, pc, #4	; (adr r2, 800727c <UART_SetConfig+0x344>)
 8007276:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800727a:	bf00      	nop
 800727c:	080072a1 	.word	0x080072a1
 8007280:	080072a9 	.word	0x080072a9
 8007284:	080072b1 	.word	0x080072b1
 8007288:	080072c7 	.word	0x080072c7
 800728c:	080072b7 	.word	0x080072b7
 8007290:	080072c7 	.word	0x080072c7
 8007294:	080072c7 	.word	0x080072c7
 8007298:	080072c7 	.word	0x080072c7
 800729c:	080072bf 	.word	0x080072bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80072a0:	f7fd fe9c 	bl	8004fdc <HAL_RCC_GetPCLK1Freq>
 80072a4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80072a6:	e014      	b.n	80072d2 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80072a8:	f7fd feaa 	bl	8005000 <HAL_RCC_GetPCLK2Freq>
 80072ac:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80072ae:	e010      	b.n	80072d2 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80072b0:	4b5a      	ldr	r3, [pc, #360]	; (800741c <UART_SetConfig+0x4e4>)
 80072b2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80072b4:	e00d      	b.n	80072d2 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80072b6:	f7fd fddd 	bl	8004e74 <HAL_RCC_GetSysClockFreq>
 80072ba:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80072bc:	e009      	b.n	80072d2 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80072be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80072c2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80072c4:	e005      	b.n	80072d2 <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 80072c6:	2300      	movs	r3, #0
 80072c8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80072ca:	2301      	movs	r3, #1
 80072cc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80072d0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80072d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	f000 8089 	beq.w	80073ec <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80072da:	697b      	ldr	r3, [r7, #20]
 80072dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072de:	4a4e      	ldr	r2, [pc, #312]	; (8007418 <UART_SetConfig+0x4e0>)
 80072e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80072e4:	461a      	mov	r2, r3
 80072e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072e8:	fbb3 f3f2 	udiv	r3, r3, r2
 80072ec:	005a      	lsls	r2, r3, #1
 80072ee:	697b      	ldr	r3, [r7, #20]
 80072f0:	685b      	ldr	r3, [r3, #4]
 80072f2:	085b      	lsrs	r3, r3, #1
 80072f4:	441a      	add	r2, r3
 80072f6:	697b      	ldr	r3, [r7, #20]
 80072f8:	685b      	ldr	r3, [r3, #4]
 80072fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80072fe:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007300:	6a3b      	ldr	r3, [r7, #32]
 8007302:	2b0f      	cmp	r3, #15
 8007304:	d916      	bls.n	8007334 <UART_SetConfig+0x3fc>
 8007306:	6a3b      	ldr	r3, [r7, #32]
 8007308:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800730c:	d212      	bcs.n	8007334 <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800730e:	6a3b      	ldr	r3, [r7, #32]
 8007310:	b29b      	uxth	r3, r3
 8007312:	f023 030f 	bic.w	r3, r3, #15
 8007316:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007318:	6a3b      	ldr	r3, [r7, #32]
 800731a:	085b      	lsrs	r3, r3, #1
 800731c:	b29b      	uxth	r3, r3
 800731e:	f003 0307 	and.w	r3, r3, #7
 8007322:	b29a      	uxth	r2, r3
 8007324:	8bfb      	ldrh	r3, [r7, #30]
 8007326:	4313      	orrs	r3, r2
 8007328:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800732a:	697b      	ldr	r3, [r7, #20]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	8bfa      	ldrh	r2, [r7, #30]
 8007330:	60da      	str	r2, [r3, #12]
 8007332:	e05b      	b.n	80073ec <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8007334:	2301      	movs	r3, #1
 8007336:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800733a:	e057      	b.n	80073ec <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800733c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007340:	2b08      	cmp	r3, #8
 8007342:	d828      	bhi.n	8007396 <UART_SetConfig+0x45e>
 8007344:	a201      	add	r2, pc, #4	; (adr r2, 800734c <UART_SetConfig+0x414>)
 8007346:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800734a:	bf00      	nop
 800734c:	08007371 	.word	0x08007371
 8007350:	08007379 	.word	0x08007379
 8007354:	08007381 	.word	0x08007381
 8007358:	08007397 	.word	0x08007397
 800735c:	08007387 	.word	0x08007387
 8007360:	08007397 	.word	0x08007397
 8007364:	08007397 	.word	0x08007397
 8007368:	08007397 	.word	0x08007397
 800736c:	0800738f 	.word	0x0800738f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007370:	f7fd fe34 	bl	8004fdc <HAL_RCC_GetPCLK1Freq>
 8007374:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007376:	e014      	b.n	80073a2 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007378:	f7fd fe42 	bl	8005000 <HAL_RCC_GetPCLK2Freq>
 800737c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800737e:	e010      	b.n	80073a2 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007380:	4b26      	ldr	r3, [pc, #152]	; (800741c <UART_SetConfig+0x4e4>)
 8007382:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007384:	e00d      	b.n	80073a2 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007386:	f7fd fd75 	bl	8004e74 <HAL_RCC_GetSysClockFreq>
 800738a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800738c:	e009      	b.n	80073a2 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800738e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007392:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007394:	e005      	b.n	80073a2 <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 8007396:	2300      	movs	r3, #0
 8007398:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800739a:	2301      	movs	r3, #1
 800739c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80073a0:	bf00      	nop
    }

    if (pclk != 0U)
 80073a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d021      	beq.n	80073ec <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80073a8:	697b      	ldr	r3, [r7, #20]
 80073aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073ac:	4a1a      	ldr	r2, [pc, #104]	; (8007418 <UART_SetConfig+0x4e0>)
 80073ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80073b2:	461a      	mov	r2, r3
 80073b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073b6:	fbb3 f2f2 	udiv	r2, r3, r2
 80073ba:	697b      	ldr	r3, [r7, #20]
 80073bc:	685b      	ldr	r3, [r3, #4]
 80073be:	085b      	lsrs	r3, r3, #1
 80073c0:	441a      	add	r2, r3
 80073c2:	697b      	ldr	r3, [r7, #20]
 80073c4:	685b      	ldr	r3, [r3, #4]
 80073c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80073ca:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80073cc:	6a3b      	ldr	r3, [r7, #32]
 80073ce:	2b0f      	cmp	r3, #15
 80073d0:	d909      	bls.n	80073e6 <UART_SetConfig+0x4ae>
 80073d2:	6a3b      	ldr	r3, [r7, #32]
 80073d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80073d8:	d205      	bcs.n	80073e6 <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80073da:	6a3b      	ldr	r3, [r7, #32]
 80073dc:	b29a      	uxth	r2, r3
 80073de:	697b      	ldr	r3, [r7, #20]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	60da      	str	r2, [r3, #12]
 80073e4:	e002      	b.n	80073ec <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 80073e6:	2301      	movs	r3, #1
 80073e8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80073ec:	697b      	ldr	r3, [r7, #20]
 80073ee:	2201      	movs	r2, #1
 80073f0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80073f4:	697b      	ldr	r3, [r7, #20]
 80073f6:	2201      	movs	r2, #1
 80073f8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80073fc:	697b      	ldr	r3, [r7, #20]
 80073fe:	2200      	movs	r2, #0
 8007400:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8007402:	697b      	ldr	r3, [r7, #20]
 8007404:	2200      	movs	r2, #0
 8007406:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8007408:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800740c:	4618      	mov	r0, r3
 800740e:	3730      	adds	r7, #48	; 0x30
 8007410:	46bd      	mov	sp, r7
 8007412:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007416:	bf00      	nop
 8007418:	0800cbe8 	.word	0x0800cbe8
 800741c:	00f42400 	.word	0x00f42400

08007420 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007420:	b480      	push	{r7}
 8007422:	b083      	sub	sp, #12
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800742c:	f003 0301 	and.w	r3, r3, #1
 8007430:	2b00      	cmp	r3, #0
 8007432:	d00a      	beq.n	800744a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	685b      	ldr	r3, [r3, #4]
 800743a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	430a      	orrs	r2, r1
 8007448:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800744e:	f003 0302 	and.w	r3, r3, #2
 8007452:	2b00      	cmp	r3, #0
 8007454:	d00a      	beq.n	800746c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	685b      	ldr	r3, [r3, #4]
 800745c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	430a      	orrs	r2, r1
 800746a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007470:	f003 0304 	and.w	r3, r3, #4
 8007474:	2b00      	cmp	r3, #0
 8007476:	d00a      	beq.n	800748e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	685b      	ldr	r3, [r3, #4]
 800747e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	430a      	orrs	r2, r1
 800748c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007492:	f003 0308 	and.w	r3, r3, #8
 8007496:	2b00      	cmp	r3, #0
 8007498:	d00a      	beq.n	80074b0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	685b      	ldr	r3, [r3, #4]
 80074a0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	430a      	orrs	r2, r1
 80074ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074b4:	f003 0310 	and.w	r3, r3, #16
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d00a      	beq.n	80074d2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	689b      	ldr	r3, [r3, #8]
 80074c2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	430a      	orrs	r2, r1
 80074d0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074d6:	f003 0320 	and.w	r3, r3, #32
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d00a      	beq.n	80074f4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	689b      	ldr	r3, [r3, #8]
 80074e4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	430a      	orrs	r2, r1
 80074f2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d01a      	beq.n	8007536 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	685b      	ldr	r3, [r3, #4]
 8007506:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	430a      	orrs	r2, r1
 8007514:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800751a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800751e:	d10a      	bne.n	8007536 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	685b      	ldr	r3, [r3, #4]
 8007526:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	430a      	orrs	r2, r1
 8007534:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800753a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800753e:	2b00      	cmp	r3, #0
 8007540:	d00a      	beq.n	8007558 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	685b      	ldr	r3, [r3, #4]
 8007548:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	430a      	orrs	r2, r1
 8007556:	605a      	str	r2, [r3, #4]
  }
}
 8007558:	bf00      	nop
 800755a:	370c      	adds	r7, #12
 800755c:	46bd      	mov	sp, r7
 800755e:	bc80      	pop	{r7}
 8007560:	4770      	bx	lr

08007562 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007562:	b580      	push	{r7, lr}
 8007564:	b086      	sub	sp, #24
 8007566:	af02      	add	r7, sp, #8
 8007568:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	2200      	movs	r2, #0
 800756e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007572:	f7fb fd79 	bl	8003068 <HAL_GetTick>
 8007576:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	f003 0308 	and.w	r3, r3, #8
 8007582:	2b08      	cmp	r3, #8
 8007584:	d10e      	bne.n	80075a4 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007586:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800758a:	9300      	str	r3, [sp, #0]
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	2200      	movs	r2, #0
 8007590:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007594:	6878      	ldr	r0, [r7, #4]
 8007596:	f000 f832 	bl	80075fe <UART_WaitOnFlagUntilTimeout>
 800759a:	4603      	mov	r3, r0
 800759c:	2b00      	cmp	r3, #0
 800759e:	d001      	beq.n	80075a4 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80075a0:	2303      	movs	r3, #3
 80075a2:	e028      	b.n	80075f6 <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	f003 0304 	and.w	r3, r3, #4
 80075ae:	2b04      	cmp	r3, #4
 80075b0:	d10e      	bne.n	80075d0 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80075b2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80075b6:	9300      	str	r3, [sp, #0]
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	2200      	movs	r2, #0
 80075bc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80075c0:	6878      	ldr	r0, [r7, #4]
 80075c2:	f000 f81c 	bl	80075fe <UART_WaitOnFlagUntilTimeout>
 80075c6:	4603      	mov	r3, r0
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d001      	beq.n	80075d0 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80075cc:	2303      	movs	r3, #3
 80075ce:	e012      	b.n	80075f6 <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2220      	movs	r2, #32
 80075d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2220      	movs	r2, #32
 80075dc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2200      	movs	r2, #0
 80075e4:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	2200      	movs	r2, #0
 80075ea:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2200      	movs	r2, #0
 80075f0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80075f4:	2300      	movs	r3, #0
}
 80075f6:	4618      	mov	r0, r3
 80075f8:	3710      	adds	r7, #16
 80075fa:	46bd      	mov	sp, r7
 80075fc:	bd80      	pop	{r7, pc}

080075fe <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80075fe:	b580      	push	{r7, lr}
 8007600:	b09c      	sub	sp, #112	; 0x70
 8007602:	af00      	add	r7, sp, #0
 8007604:	60f8      	str	r0, [r7, #12]
 8007606:	60b9      	str	r1, [r7, #8]
 8007608:	603b      	str	r3, [r7, #0]
 800760a:	4613      	mov	r3, r2
 800760c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800760e:	e0a9      	b.n	8007764 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007610:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007612:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007616:	f000 80a5 	beq.w	8007764 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800761a:	f7fb fd25 	bl	8003068 <HAL_GetTick>
 800761e:	4602      	mov	r2, r0
 8007620:	683b      	ldr	r3, [r7, #0]
 8007622:	1ad3      	subs	r3, r2, r3
 8007624:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007626:	429a      	cmp	r2, r3
 8007628:	d302      	bcc.n	8007630 <UART_WaitOnFlagUntilTimeout+0x32>
 800762a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800762c:	2b00      	cmp	r3, #0
 800762e:	d140      	bne.n	80076b2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007636:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007638:	e853 3f00 	ldrex	r3, [r3]
 800763c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800763e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007640:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007644:	667b      	str	r3, [r7, #100]	; 0x64
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	461a      	mov	r2, r3
 800764c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800764e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007650:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007652:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007654:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007656:	e841 2300 	strex	r3, r2, [r1]
 800765a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800765c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800765e:	2b00      	cmp	r3, #0
 8007660:	d1e6      	bne.n	8007630 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	3308      	adds	r3, #8
 8007668:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800766a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800766c:	e853 3f00 	ldrex	r3, [r3]
 8007670:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007674:	f023 0301 	bic.w	r3, r3, #1
 8007678:	663b      	str	r3, [r7, #96]	; 0x60
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	3308      	adds	r3, #8
 8007680:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007682:	64ba      	str	r2, [r7, #72]	; 0x48
 8007684:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007686:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007688:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800768a:	e841 2300 	strex	r3, r2, [r1]
 800768e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007690:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007692:	2b00      	cmp	r3, #0
 8007694:	d1e5      	bne.n	8007662 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	2220      	movs	r2, #32
 800769a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	2220      	movs	r2, #32
 80076a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	2200      	movs	r2, #0
 80076aa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

        return HAL_TIMEOUT;
 80076ae:	2303      	movs	r3, #3
 80076b0:	e069      	b.n	8007786 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	f003 0304 	and.w	r3, r3, #4
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d051      	beq.n	8007764 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	69db      	ldr	r3, [r3, #28]
 80076c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80076ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80076ce:	d149      	bne.n	8007764 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80076d8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076e2:	e853 3f00 	ldrex	r3, [r3]
 80076e6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80076e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ea:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80076ee:	66fb      	str	r3, [r7, #108]	; 0x6c
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	461a      	mov	r2, r3
 80076f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076f8:	637b      	str	r3, [r7, #52]	; 0x34
 80076fa:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076fc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80076fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007700:	e841 2300 	strex	r3, r2, [r1]
 8007704:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007708:	2b00      	cmp	r3, #0
 800770a:	d1e6      	bne.n	80076da <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	3308      	adds	r3, #8
 8007712:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007714:	697b      	ldr	r3, [r7, #20]
 8007716:	e853 3f00 	ldrex	r3, [r3]
 800771a:	613b      	str	r3, [r7, #16]
   return(result);
 800771c:	693b      	ldr	r3, [r7, #16]
 800771e:	f023 0301 	bic.w	r3, r3, #1
 8007722:	66bb      	str	r3, [r7, #104]	; 0x68
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	3308      	adds	r3, #8
 800772a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800772c:	623a      	str	r2, [r7, #32]
 800772e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007730:	69f9      	ldr	r1, [r7, #28]
 8007732:	6a3a      	ldr	r2, [r7, #32]
 8007734:	e841 2300 	strex	r3, r2, [r1]
 8007738:	61bb      	str	r3, [r7, #24]
   return(result);
 800773a:	69bb      	ldr	r3, [r7, #24]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d1e5      	bne.n	800770c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	2220      	movs	r2, #32
 8007744:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	2220      	movs	r2, #32
 800774c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	2220      	movs	r2, #32
 8007754:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	2200      	movs	r2, #0
 800775c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8007760:	2303      	movs	r3, #3
 8007762:	e010      	b.n	8007786 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	69da      	ldr	r2, [r3, #28]
 800776a:	68bb      	ldr	r3, [r7, #8]
 800776c:	4013      	ands	r3, r2
 800776e:	68ba      	ldr	r2, [r7, #8]
 8007770:	429a      	cmp	r2, r3
 8007772:	bf0c      	ite	eq
 8007774:	2301      	moveq	r3, #1
 8007776:	2300      	movne	r3, #0
 8007778:	b2db      	uxtb	r3, r3
 800777a:	461a      	mov	r2, r3
 800777c:	79fb      	ldrb	r3, [r7, #7]
 800777e:	429a      	cmp	r2, r3
 8007780:	f43f af46 	beq.w	8007610 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007784:	2300      	movs	r3, #0
}
 8007786:	4618      	mov	r0, r3
 8007788:	3770      	adds	r7, #112	; 0x70
 800778a:	46bd      	mov	sp, r7
 800778c:	bd80      	pop	{r7, pc}
	...

08007790 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007790:	b580      	push	{r7, lr}
 8007792:	b096      	sub	sp, #88	; 0x58
 8007794:	af00      	add	r7, sp, #0
 8007796:	60f8      	str	r0, [r7, #12]
 8007798:	60b9      	str	r1, [r7, #8]
 800779a:	4613      	mov	r3, r2
 800779c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	68ba      	ldr	r2, [r7, #8]
 80077a2:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	88fa      	ldrh	r2, [r7, #6]
 80077a8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	2200      	movs	r2, #0
 80077b0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	2222      	movs	r2, #34	; 0x22
 80077b8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if (huart->hdmarx != NULL)
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d02d      	beq.n	8007822 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80077cc:	4a40      	ldr	r2, [pc, #256]	; (80078d0 <UART_Start_Receive_DMA+0x140>)
 80077ce:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80077d6:	4a3f      	ldr	r2, [pc, #252]	; (80078d4 <UART_Start_Receive_DMA+0x144>)
 80077d8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80077e0:	4a3d      	ldr	r2, [pc, #244]	; (80078d8 <UART_Start_Receive_DMA+0x148>)
 80077e2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80077ea:	2200      	movs	r2, #0
 80077ec:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	3324      	adds	r3, #36	; 0x24
 80077fa:	4619      	mov	r1, r3
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007800:	461a      	mov	r2, r3
 8007802:	88fb      	ldrh	r3, [r7, #6]
 8007804:	f7fb ff4e 	bl	80036a4 <HAL_DMA_Start_IT>
 8007808:	4603      	mov	r3, r0
 800780a:	2b00      	cmp	r3, #0
 800780c:	d009      	beq.n	8007822 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	2210      	movs	r2, #16
 8007812:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	2220      	movs	r2, #32
 800781a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      return HAL_ERROR;
 800781e:	2301      	movs	r3, #1
 8007820:	e051      	b.n	80078c6 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	691b      	ldr	r3, [r3, #16]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d018      	beq.n	800785c <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007830:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007832:	e853 3f00 	ldrex	r3, [r3]
 8007836:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007838:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800783a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800783e:	657b      	str	r3, [r7, #84]	; 0x54
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	461a      	mov	r2, r3
 8007846:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007848:	64bb      	str	r3, [r7, #72]	; 0x48
 800784a:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800784c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800784e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007850:	e841 2300 	strex	r3, r2, [r1]
 8007854:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007856:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007858:	2b00      	cmp	r3, #0
 800785a:	d1e6      	bne.n	800782a <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	3308      	adds	r3, #8
 8007862:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007866:	e853 3f00 	ldrex	r3, [r3]
 800786a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800786c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800786e:	f043 0301 	orr.w	r3, r3, #1
 8007872:	653b      	str	r3, [r7, #80]	; 0x50
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	3308      	adds	r3, #8
 800787a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800787c:	637a      	str	r2, [r7, #52]	; 0x34
 800787e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007880:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007882:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007884:	e841 2300 	strex	r3, r2, [r1]
 8007888:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800788a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800788c:	2b00      	cmp	r3, #0
 800788e:	d1e5      	bne.n	800785c <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	3308      	adds	r3, #8
 8007896:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007898:	697b      	ldr	r3, [r7, #20]
 800789a:	e853 3f00 	ldrex	r3, [r3]
 800789e:	613b      	str	r3, [r7, #16]
   return(result);
 80078a0:	693b      	ldr	r3, [r7, #16]
 80078a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80078a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	3308      	adds	r3, #8
 80078ae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80078b0:	623a      	str	r2, [r7, #32]
 80078b2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078b4:	69f9      	ldr	r1, [r7, #28]
 80078b6:	6a3a      	ldr	r2, [r7, #32]
 80078b8:	e841 2300 	strex	r3, r2, [r1]
 80078bc:	61bb      	str	r3, [r7, #24]
   return(result);
 80078be:	69bb      	ldr	r3, [r7, #24]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d1e5      	bne.n	8007890 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 80078c4:	2300      	movs	r3, #0
}
 80078c6:	4618      	mov	r0, r3
 80078c8:	3758      	adds	r7, #88	; 0x58
 80078ca:	46bd      	mov	sp, r7
 80078cc:	bd80      	pop	{r7, pc}
 80078ce:	bf00      	nop
 80078d0:	08007a27 	.word	0x08007a27
 80078d4:	08007b53 	.word	0x08007b53
 80078d8:	08007b91 	.word	0x08007b91

080078dc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80078dc:	b480      	push	{r7}
 80078de:	b08f      	sub	sp, #60	; 0x3c
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078ea:	6a3b      	ldr	r3, [r7, #32]
 80078ec:	e853 3f00 	ldrex	r3, [r3]
 80078f0:	61fb      	str	r3, [r7, #28]
   return(result);
 80078f2:	69fb      	ldr	r3, [r7, #28]
 80078f4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80078f8:	637b      	str	r3, [r7, #52]	; 0x34
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	461a      	mov	r2, r3
 8007900:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007902:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007904:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007906:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007908:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800790a:	e841 2300 	strex	r3, r2, [r1]
 800790e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007912:	2b00      	cmp	r3, #0
 8007914:	d1e6      	bne.n	80078e4 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	3308      	adds	r3, #8
 800791c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	e853 3f00 	ldrex	r3, [r3]
 8007924:	60bb      	str	r3, [r7, #8]
   return(result);
 8007926:	68bb      	ldr	r3, [r7, #8]
 8007928:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800792c:	633b      	str	r3, [r7, #48]	; 0x30
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	3308      	adds	r3, #8
 8007934:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007936:	61ba      	str	r2, [r7, #24]
 8007938:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800793a:	6979      	ldr	r1, [r7, #20]
 800793c:	69ba      	ldr	r2, [r7, #24]
 800793e:	e841 2300 	strex	r3, r2, [r1]
 8007942:	613b      	str	r3, [r7, #16]
   return(result);
 8007944:	693b      	ldr	r3, [r7, #16]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d1e5      	bne.n	8007916 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	2220      	movs	r2, #32
 800794e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 8007952:	bf00      	nop
 8007954:	373c      	adds	r7, #60	; 0x3c
 8007956:	46bd      	mov	sp, r7
 8007958:	bc80      	pop	{r7}
 800795a:	4770      	bx	lr

0800795c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800795c:	b480      	push	{r7}
 800795e:	b095      	sub	sp, #84	; 0x54
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800796a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800796c:	e853 3f00 	ldrex	r3, [r3]
 8007970:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007974:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007978:	64fb      	str	r3, [r7, #76]	; 0x4c
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	461a      	mov	r2, r3
 8007980:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007982:	643b      	str	r3, [r7, #64]	; 0x40
 8007984:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007986:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007988:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800798a:	e841 2300 	strex	r3, r2, [r1]
 800798e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007992:	2b00      	cmp	r3, #0
 8007994:	d1e6      	bne.n	8007964 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	3308      	adds	r3, #8
 800799c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800799e:	6a3b      	ldr	r3, [r7, #32]
 80079a0:	e853 3f00 	ldrex	r3, [r3]
 80079a4:	61fb      	str	r3, [r7, #28]
   return(result);
 80079a6:	69fb      	ldr	r3, [r7, #28]
 80079a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80079ac:	f023 0301 	bic.w	r3, r3, #1
 80079b0:	64bb      	str	r3, [r7, #72]	; 0x48
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	3308      	adds	r3, #8
 80079b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80079ba:	62fa      	str	r2, [r7, #44]	; 0x2c
 80079bc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079be:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80079c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80079c2:	e841 2300 	strex	r3, r2, [r1]
 80079c6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80079c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d1e3      	bne.n	8007996 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80079d2:	2b01      	cmp	r3, #1
 80079d4:	d118      	bne.n	8007a08 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	e853 3f00 	ldrex	r3, [r3]
 80079e2:	60bb      	str	r3, [r7, #8]
   return(result);
 80079e4:	68bb      	ldr	r3, [r7, #8]
 80079e6:	f023 0310 	bic.w	r3, r3, #16
 80079ea:	647b      	str	r3, [r7, #68]	; 0x44
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	461a      	mov	r2, r3
 80079f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80079f4:	61bb      	str	r3, [r7, #24]
 80079f6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079f8:	6979      	ldr	r1, [r7, #20]
 80079fa:	69ba      	ldr	r2, [r7, #24]
 80079fc:	e841 2300 	strex	r3, r2, [r1]
 8007a00:	613b      	str	r3, [r7, #16]
   return(result);
 8007a02:	693b      	ldr	r3, [r7, #16]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d1e6      	bne.n	80079d6 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2220      	movs	r2, #32
 8007a0c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2200      	movs	r2, #0
 8007a14:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	2200      	movs	r2, #0
 8007a1a:	675a      	str	r2, [r3, #116]	; 0x74
}
 8007a1c:	bf00      	nop
 8007a1e:	3754      	adds	r7, #84	; 0x54
 8007a20:	46bd      	mov	sp, r7
 8007a22:	bc80      	pop	{r7}
 8007a24:	4770      	bx	lr

08007a26 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007a26:	b580      	push	{r7, lr}
 8007a28:	b09c      	sub	sp, #112	; 0x70
 8007a2a:	af00      	add	r7, sp, #0
 8007a2c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a32:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	f003 0320 	and.w	r3, r3, #32
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d171      	bne.n	8007b26 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8007a42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a44:	2200      	movs	r2, #0
 8007a46:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007a4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a52:	e853 3f00 	ldrex	r3, [r3]
 8007a56:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007a58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007a5a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007a5e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007a60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	461a      	mov	r2, r3
 8007a66:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007a68:	65bb      	str	r3, [r7, #88]	; 0x58
 8007a6a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a6c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007a6e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007a70:	e841 2300 	strex	r3, r2, [r1]
 8007a74:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007a76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d1e6      	bne.n	8007a4a <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	3308      	adds	r3, #8
 8007a82:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a86:	e853 3f00 	ldrex	r3, [r3]
 8007a8a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007a8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a8e:	f023 0301 	bic.w	r3, r3, #1
 8007a92:	667b      	str	r3, [r7, #100]	; 0x64
 8007a94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	3308      	adds	r3, #8
 8007a9a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007a9c:	647a      	str	r2, [r7, #68]	; 0x44
 8007a9e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aa0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007aa2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007aa4:	e841 2300 	strex	r3, r2, [r1]
 8007aa8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007aaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d1e5      	bne.n	8007a7c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007ab0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	3308      	adds	r3, #8
 8007ab6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aba:	e853 3f00 	ldrex	r3, [r3]
 8007abe:	623b      	str	r3, [r7, #32]
   return(result);
 8007ac0:	6a3b      	ldr	r3, [r7, #32]
 8007ac2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ac6:	663b      	str	r3, [r7, #96]	; 0x60
 8007ac8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	3308      	adds	r3, #8
 8007ace:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007ad0:	633a      	str	r2, [r7, #48]	; 0x30
 8007ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ad4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007ad6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ad8:	e841 2300 	strex	r3, r2, [r1]
 8007adc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d1e5      	bne.n	8007ab0 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007ae4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ae6:	2220      	movs	r2, #32
 8007ae8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007aec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007aee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007af0:	2b01      	cmp	r3, #1
 8007af2:	d118      	bne.n	8007b26 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007af4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007afa:	693b      	ldr	r3, [r7, #16]
 8007afc:	e853 3f00 	ldrex	r3, [r3]
 8007b00:	60fb      	str	r3, [r7, #12]
   return(result);
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	f023 0310 	bic.w	r3, r3, #16
 8007b08:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007b0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	461a      	mov	r2, r3
 8007b10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007b12:	61fb      	str	r3, [r7, #28]
 8007b14:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b16:	69b9      	ldr	r1, [r7, #24]
 8007b18:	69fa      	ldr	r2, [r7, #28]
 8007b1a:	e841 2300 	strex	r3, r2, [r1]
 8007b1e:	617b      	str	r3, [r7, #20]
   return(result);
 8007b20:	697b      	ldr	r3, [r7, #20]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d1e6      	bne.n	8007af4 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007b26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b28:	2200      	movs	r2, #0
 8007b2a:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b30:	2b01      	cmp	r3, #1
 8007b32:	d107      	bne.n	8007b44 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007b34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b36:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007b3a:	4619      	mov	r1, r3
 8007b3c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007b3e:	f7ff f9f0 	bl	8006f22 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007b42:	e002      	b.n	8007b4a <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8007b44:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007b46:	f7f9 f8e5 	bl	8000d14 <HAL_UART_RxCpltCallback>
}
 8007b4a:	bf00      	nop
 8007b4c:	3770      	adds	r7, #112	; 0x70
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	bd80      	pop	{r7, pc}

08007b52 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007b52:	b580      	push	{r7, lr}
 8007b54:	b084      	sub	sp, #16
 8007b56:	af00      	add	r7, sp, #0
 8007b58:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b5e:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	2201      	movs	r2, #1
 8007b64:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b6a:	2b01      	cmp	r3, #1
 8007b6c:	d109      	bne.n	8007b82 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007b74:	085b      	lsrs	r3, r3, #1
 8007b76:	b29b      	uxth	r3, r3
 8007b78:	4619      	mov	r1, r3
 8007b7a:	68f8      	ldr	r0, [r7, #12]
 8007b7c:	f7ff f9d1 	bl	8006f22 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007b80:	e002      	b.n	8007b88 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8007b82:	68f8      	ldr	r0, [r7, #12]
 8007b84:	f7ff f9bb 	bl	8006efe <HAL_UART_RxHalfCpltCallback>
}
 8007b88:	bf00      	nop
 8007b8a:	3710      	adds	r7, #16
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	bd80      	pop	{r7, pc}

08007b90 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b086      	sub	sp, #24
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b9c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8007b9e:	697b      	ldr	r3, [r7, #20]
 8007ba0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ba4:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8007ba6:	697b      	ldr	r3, [r7, #20]
 8007ba8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007bac:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8007bae:	697b      	ldr	r3, [r7, #20]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	689b      	ldr	r3, [r3, #8]
 8007bb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bb8:	2b80      	cmp	r3, #128	; 0x80
 8007bba:	d109      	bne.n	8007bd0 <UART_DMAError+0x40>
 8007bbc:	693b      	ldr	r3, [r7, #16]
 8007bbe:	2b21      	cmp	r3, #33	; 0x21
 8007bc0:	d106      	bne.n	8007bd0 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8007bc2:	697b      	ldr	r3, [r7, #20]
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8007bca:	6978      	ldr	r0, [r7, #20]
 8007bcc:	f7ff fe86 	bl	80078dc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007bd0:	697b      	ldr	r3, [r7, #20]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	689b      	ldr	r3, [r3, #8]
 8007bd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bda:	2b40      	cmp	r3, #64	; 0x40
 8007bdc:	d109      	bne.n	8007bf2 <UART_DMAError+0x62>
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	2b22      	cmp	r3, #34	; 0x22
 8007be2:	d106      	bne.n	8007bf2 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8007be4:	697b      	ldr	r3, [r7, #20]
 8007be6:	2200      	movs	r2, #0
 8007be8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8007bec:	6978      	ldr	r0, [r7, #20]
 8007bee:	f7ff feb5 	bl	800795c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007bf2:	697b      	ldr	r3, [r7, #20]
 8007bf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bf8:	f043 0210 	orr.w	r2, r3, #16
 8007bfc:	697b      	ldr	r3, [r7, #20]
 8007bfe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007c02:	6978      	ldr	r0, [r7, #20]
 8007c04:	f7ff f984 	bl	8006f10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007c08:	bf00      	nop
 8007c0a:	3718      	adds	r7, #24
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	bd80      	pop	{r7, pc}

08007c10 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b084      	sub	sp, #16
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c1c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	2200      	movs	r2, #0
 8007c22:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	2200      	movs	r2, #0
 8007c2a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007c2e:	68f8      	ldr	r0, [r7, #12]
 8007c30:	f7ff f96e 	bl	8006f10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007c34:	bf00      	nop
 8007c36:	3710      	adds	r7, #16
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	bd80      	pop	{r7, pc}

08007c3c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007c3c:	b580      	push	{r7, lr}
 8007c3e:	b088      	sub	sp, #32
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	e853 3f00 	ldrex	r3, [r3]
 8007c50:	60bb      	str	r3, [r7, #8]
   return(result);
 8007c52:	68bb      	ldr	r3, [r7, #8]
 8007c54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c58:	61fb      	str	r3, [r7, #28]
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	461a      	mov	r2, r3
 8007c60:	69fb      	ldr	r3, [r7, #28]
 8007c62:	61bb      	str	r3, [r7, #24]
 8007c64:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c66:	6979      	ldr	r1, [r7, #20]
 8007c68:	69ba      	ldr	r2, [r7, #24]
 8007c6a:	e841 2300 	strex	r3, r2, [r1]
 8007c6e:	613b      	str	r3, [r7, #16]
   return(result);
 8007c70:	693b      	ldr	r3, [r7, #16]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d1e6      	bne.n	8007c44 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	2220      	movs	r2, #32
 8007c7a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	2200      	movs	r2, #0
 8007c82:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007c84:	6878      	ldr	r0, [r7, #4]
 8007c86:	f7ff f931 	bl	8006eec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007c8a:	bf00      	nop
 8007c8c:	3720      	adds	r7, #32
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	bd80      	pop	{r7, pc}

08007c92 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007c92:	b480      	push	{r7}
 8007c94:	b083      	sub	sp, #12
 8007c96:	af00      	add	r7, sp, #0
 8007c98:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007c9a:	bf00      	nop
 8007c9c:	370c      	adds	r7, #12
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	bc80      	pop	{r7}
 8007ca2:	4770      	bx	lr

08007ca4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007ca4:	b480      	push	{r7}
 8007ca6:	b083      	sub	sp, #12
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007cac:	bf00      	nop
 8007cae:	370c      	adds	r7, #12
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	bc80      	pop	{r7}
 8007cb4:	4770      	bx	lr

08007cb6 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007cb6:	b480      	push	{r7}
 8007cb8:	b083      	sub	sp, #12
 8007cba:	af00      	add	r7, sp, #0
 8007cbc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007cbe:	bf00      	nop
 8007cc0:	370c      	adds	r7, #12
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	bc80      	pop	{r7}
 8007cc6:	4770      	bx	lr

08007cc8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007cc8:	b480      	push	{r7}
 8007cca:	b085      	sub	sp, #20
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007cd6:	2b01      	cmp	r3, #1
 8007cd8:	d101      	bne.n	8007cde <HAL_UARTEx_DisableFifoMode+0x16>
 8007cda:	2302      	movs	r3, #2
 8007cdc:	e027      	b.n	8007d2e <HAL_UARTEx_DisableFifoMode+0x66>
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	2201      	movs	r2, #1
 8007ce2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	2224      	movs	r2, #36	; 0x24
 8007cea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	681a      	ldr	r2, [r3, #0]
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	f022 0201 	bic.w	r2, r2, #1
 8007d04:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007d0c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	2200      	movs	r2, #0
 8007d12:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	68fa      	ldr	r2, [r7, #12]
 8007d1a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2220      	movs	r2, #32
 8007d20:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2200      	movs	r2, #0
 8007d28:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007d2c:	2300      	movs	r3, #0
}
 8007d2e:	4618      	mov	r0, r3
 8007d30:	3714      	adds	r7, #20
 8007d32:	46bd      	mov	sp, r7
 8007d34:	bc80      	pop	{r7}
 8007d36:	4770      	bx	lr

08007d38 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b084      	sub	sp, #16
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
 8007d40:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007d48:	2b01      	cmp	r3, #1
 8007d4a:	d101      	bne.n	8007d50 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007d4c:	2302      	movs	r3, #2
 8007d4e:	e02d      	b.n	8007dac <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	2201      	movs	r2, #1
 8007d54:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	2224      	movs	r2, #36	; 0x24
 8007d5c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	681a      	ldr	r2, [r3, #0]
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	f022 0201 	bic.w	r2, r2, #1
 8007d76:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	689b      	ldr	r3, [r3, #8]
 8007d7e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	683a      	ldr	r2, [r7, #0]
 8007d88:	430a      	orrs	r2, r1
 8007d8a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007d8c:	6878      	ldr	r0, [r7, #4]
 8007d8e:	f000 f84f 	bl	8007e30 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	68fa      	ldr	r2, [r7, #12]
 8007d98:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	2220      	movs	r2, #32
 8007d9e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	2200      	movs	r2, #0
 8007da6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007daa:	2300      	movs	r3, #0
}
 8007dac:	4618      	mov	r0, r3
 8007dae:	3710      	adds	r7, #16
 8007db0:	46bd      	mov	sp, r7
 8007db2:	bd80      	pop	{r7, pc}

08007db4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b084      	sub	sp, #16
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	6078      	str	r0, [r7, #4]
 8007dbc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007dc4:	2b01      	cmp	r3, #1
 8007dc6:	d101      	bne.n	8007dcc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007dc8:	2302      	movs	r3, #2
 8007dca:	e02d      	b.n	8007e28 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	2201      	movs	r2, #1
 8007dd0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	2224      	movs	r2, #36	; 0x24
 8007dd8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	681a      	ldr	r2, [r3, #0]
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	f022 0201 	bic.w	r2, r2, #1
 8007df2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	689b      	ldr	r3, [r3, #8]
 8007dfa:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	683a      	ldr	r2, [r7, #0]
 8007e04:	430a      	orrs	r2, r1
 8007e06:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007e08:	6878      	ldr	r0, [r7, #4]
 8007e0a:	f000 f811 	bl	8007e30 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	68fa      	ldr	r2, [r7, #12]
 8007e14:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	2220      	movs	r2, #32
 8007e1a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	2200      	movs	r2, #0
 8007e22:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007e26:	2300      	movs	r3, #0
}
 8007e28:	4618      	mov	r0, r3
 8007e2a:	3710      	adds	r7, #16
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	bd80      	pop	{r7, pc}

08007e30 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007e30:	b480      	push	{r7}
 8007e32:	b085      	sub	sp, #20
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d108      	bne.n	8007e52 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	2201      	movs	r2, #1
 8007e44:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	2201      	movs	r2, #1
 8007e4c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007e50:	e031      	b.n	8007eb6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007e52:	2308      	movs	r3, #8
 8007e54:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007e56:	2308      	movs	r3, #8
 8007e58:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	689b      	ldr	r3, [r3, #8]
 8007e60:	0e5b      	lsrs	r3, r3, #25
 8007e62:	b2db      	uxtb	r3, r3
 8007e64:	f003 0307 	and.w	r3, r3, #7
 8007e68:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	689b      	ldr	r3, [r3, #8]
 8007e70:	0f5b      	lsrs	r3, r3, #29
 8007e72:	b2db      	uxtb	r3, r3
 8007e74:	f003 0307 	and.w	r3, r3, #7
 8007e78:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007e7a:	7bbb      	ldrb	r3, [r7, #14]
 8007e7c:	7b3a      	ldrb	r2, [r7, #12]
 8007e7e:	4910      	ldr	r1, [pc, #64]	; (8007ec0 <UARTEx_SetNbDataToProcess+0x90>)
 8007e80:	5c8a      	ldrb	r2, [r1, r2]
 8007e82:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007e86:	7b3a      	ldrb	r2, [r7, #12]
 8007e88:	490e      	ldr	r1, [pc, #56]	; (8007ec4 <UARTEx_SetNbDataToProcess+0x94>)
 8007e8a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007e8c:	fb93 f3f2 	sdiv	r3, r3, r2
 8007e90:	b29a      	uxth	r2, r3
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007e98:	7bfb      	ldrb	r3, [r7, #15]
 8007e9a:	7b7a      	ldrb	r2, [r7, #13]
 8007e9c:	4908      	ldr	r1, [pc, #32]	; (8007ec0 <UARTEx_SetNbDataToProcess+0x90>)
 8007e9e:	5c8a      	ldrb	r2, [r1, r2]
 8007ea0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007ea4:	7b7a      	ldrb	r2, [r7, #13]
 8007ea6:	4907      	ldr	r1, [pc, #28]	; (8007ec4 <UARTEx_SetNbDataToProcess+0x94>)
 8007ea8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007eaa:	fb93 f3f2 	sdiv	r3, r3, r2
 8007eae:	b29a      	uxth	r2, r3
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007eb6:	bf00      	nop
 8007eb8:	3714      	adds	r7, #20
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	bc80      	pop	{r7}
 8007ebe:	4770      	bx	lr
 8007ec0:	0800cc00 	.word	0x0800cc00
 8007ec4:	0800cc08 	.word	0x0800cc08

08007ec8 <RadioInit>:
TimerEvent_t RxTimeoutTimer;

/* Private  functions ---------------------------------------------------------*/

static void RadioInit( RadioEvents_t *events )
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b084      	sub	sp, #16
 8007ecc:	af02      	add	r7, sp, #8
 8007ece:	6078      	str	r0, [r7, #4]
    RadioEvents = events;
 8007ed0:	4a24      	ldr	r2, [pc, #144]	; (8007f64 <RadioInit+0x9c>)
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	6013      	str	r3, [r2, #0]

    SubgRf.RxContinuous = false;
 8007ed6:	4b24      	ldr	r3, [pc, #144]	; (8007f68 <RadioInit+0xa0>)
 8007ed8:	2200      	movs	r2, #0
 8007eda:	705a      	strb	r2, [r3, #1]
    SubgRf.TxTimeout = 0;
 8007edc:	4b22      	ldr	r3, [pc, #136]	; (8007f68 <RadioInit+0xa0>)
 8007ede:	2200      	movs	r2, #0
 8007ee0:	605a      	str	r2, [r3, #4]
    SubgRf.RxTimeout = 0;
 8007ee2:	4b21      	ldr	r3, [pc, #132]	; (8007f68 <RadioInit+0xa0>)
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	609a      	str	r2, [r3, #8]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8007ee8:	4b1f      	ldr	r3, [pc, #124]	; (8007f68 <RadioInit+0xa0>)
 8007eea:	2200      	movs	r2, #0
 8007eec:	659a      	str	r2, [r3, #88]	; 0x58
#if( RADIO_LR_FHSS_IS_ON == 1 )
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    SUBGRF_Init( RadioOnDioIrq );
 8007eee:	481f      	ldr	r0, [pc, #124]	; (8007f6c <RadioInit+0xa4>)
 8007ef0:	f001 ff88 	bl	8009e04 <SUBGRF_Init>
    /*SubgRf.publicNetwork set to false*/
    SubgRf.PublicNetwork.Current = false;
 8007ef4:	4b1c      	ldr	r3, [pc, #112]	; (8007f68 <RadioInit+0xa0>)
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	735a      	strb	r2, [r3, #13]
    SubgRf.PublicNetwork.Previous = false;
 8007efa:	4b1b      	ldr	r3, [pc, #108]	; (8007f68 <RadioInit+0xa0>)
 8007efc:	2200      	movs	r2, #0
 8007efe:	731a      	strb	r2, [r3, #12]

    RADIO_IRQ_PROCESS_INIT();

    SUBGRF_SetRegulatorMode( );
 8007f00:	f002 fa1c 	bl	800a33c <SUBGRF_SetRegulatorMode>

    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 8007f04:	2100      	movs	r1, #0
 8007f06:	2000      	movs	r0, #0
 8007f08:	f002 fde8 	bl	800aadc <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams( RFO_LP, 0, RADIO_RAMP_200_US );
 8007f0c:	2204      	movs	r2, #4
 8007f0e:	2100      	movs	r1, #0
 8007f10:	2001      	movs	r0, #1
 8007f12:	f002 fba5 	bl	800a660 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8007f16:	2300      	movs	r3, #0
 8007f18:	2200      	movs	r2, #0
 8007f1a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8007f1e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8007f22:	f002 fad5 	bl	800a4d0 <SUBGRF_SetDioIrqParams>

    RadioSleep();
 8007f26:	f000 fe91 	bl	8008c4c <RadioSleep>
    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	9300      	str	r3, [sp, #0]
 8007f2e:	4b10      	ldr	r3, [pc, #64]	; (8007f70 <RadioInit+0xa8>)
 8007f30:	2200      	movs	r2, #0
 8007f32:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007f36:	480f      	ldr	r0, [pc, #60]	; (8007f74 <RadioInit+0xac>)
 8007f38:	f003 fb1e 	bl	800b578 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	9300      	str	r3, [sp, #0]
 8007f40:	4b0d      	ldr	r3, [pc, #52]	; (8007f78 <RadioInit+0xb0>)
 8007f42:	2200      	movs	r2, #0
 8007f44:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007f48:	480c      	ldr	r0, [pc, #48]	; (8007f7c <RadioInit+0xb4>)
 8007f4a:	f003 fb15 	bl	800b578 <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 8007f4e:	4809      	ldr	r0, [pc, #36]	; (8007f74 <RadioInit+0xac>)
 8007f50:	f003 fbb6 	bl	800b6c0 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 8007f54:	4809      	ldr	r0, [pc, #36]	; (8007f7c <RadioInit+0xb4>)
 8007f56:	f003 fbb3 	bl	800b6c0 <UTIL_TIMER_Stop>
}
 8007f5a:	bf00      	nop
 8007f5c:	3708      	adds	r7, #8
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	bd80      	pop	{r7, pc}
 8007f62:	bf00      	nop
 8007f64:	20000a28 	.word	0x20000a28
 8007f68:	20000a2c 	.word	0x20000a2c
 8007f6c:	08009045 	.word	0x08009045
 8007f70:	08008fcd 	.word	0x08008fcd
 8007f74:	20000a88 	.word	0x20000a88
 8007f78:	08008fe1 	.word	0x08008fe1
 8007f7c:	20000aa0 	.word	0x20000aa0

08007f80 <RadioGetStatus>:

static RadioState_t RadioGetStatus( void )
{
 8007f80:	b580      	push	{r7, lr}
 8007f82:	af00      	add	r7, sp, #0
    switch( SUBGRF_GetOperatingMode( ) )
 8007f84:	f001 ff86 	bl	8009e94 <SUBGRF_GetOperatingMode>
 8007f88:	4603      	mov	r3, r0
 8007f8a:	2b07      	cmp	r3, #7
 8007f8c:	d00a      	beq.n	8007fa4 <RadioGetStatus+0x24>
 8007f8e:	2b07      	cmp	r3, #7
 8007f90:	dc0a      	bgt.n	8007fa8 <RadioGetStatus+0x28>
 8007f92:	2b04      	cmp	r3, #4
 8007f94:	d002      	beq.n	8007f9c <RadioGetStatus+0x1c>
 8007f96:	2b05      	cmp	r3, #5
 8007f98:	d002      	beq.n	8007fa0 <RadioGetStatus+0x20>
 8007f9a:	e005      	b.n	8007fa8 <RadioGetStatus+0x28>
    {
        case MODE_TX:
            return RF_TX_RUNNING;
 8007f9c:	2302      	movs	r3, #2
 8007f9e:	e004      	b.n	8007faa <RadioGetStatus+0x2a>
        case MODE_RX:
            return RF_RX_RUNNING;
 8007fa0:	2301      	movs	r3, #1
 8007fa2:	e002      	b.n	8007faa <RadioGetStatus+0x2a>
        case MODE_CAD:
            return RF_CAD;
 8007fa4:	2303      	movs	r3, #3
 8007fa6:	e000      	b.n	8007faa <RadioGetStatus+0x2a>
        default:
            return RF_IDLE;
 8007fa8:	2300      	movs	r3, #0
    }
}
 8007faa:	4618      	mov	r0, r3
 8007fac:	bd80      	pop	{r7, pc}
	...

08007fb0 <RadioSetModem>:

static void RadioSetModem( RadioModems_t modem )
{
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	b082      	sub	sp, #8
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	4603      	mov	r3, r0
 8007fb8:	71fb      	strb	r3, [r7, #7]
    SubgRf.Modem = modem;
 8007fba:	4a2a      	ldr	r2, [pc, #168]	; (8008064 <RadioSetModem+0xb4>)
 8007fbc:	79fb      	ldrb	r3, [r7, #7]
 8007fbe:	7013      	strb	r3, [r2, #0]
    RFW_SetRadioModem( modem );
 8007fc0:	79fb      	ldrb	r3, [r7, #7]
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	f003 f95d 	bl	800b282 <RFW_SetRadioModem>
    switch( modem )
 8007fc8:	79fb      	ldrb	r3, [r7, #7]
 8007fca:	2b05      	cmp	r3, #5
 8007fcc:	d80e      	bhi.n	8007fec <RadioSetModem+0x3c>
 8007fce:	a201      	add	r2, pc, #4	; (adr r2, 8007fd4 <RadioSetModem+0x24>)
 8007fd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fd4:	08007ffb 	.word	0x08007ffb
 8007fd8:	08008009 	.word	0x08008009
 8007fdc:	08007fed 	.word	0x08007fed
 8007fe0:	0800802f 	.word	0x0800802f
 8007fe4:	0800803d 	.word	0x0800803d
 8007fe8:	0800804b 	.word	0x0800804b
    {
    default:
    case MODEM_MSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GMSK );
 8007fec:	2003      	movs	r0, #3
 8007fee:	f002 fb11 	bl	800a614 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8007ff2:	4b1c      	ldr	r3, [pc, #112]	; (8008064 <RadioSetModem+0xb4>)
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	735a      	strb	r2, [r3, #13]
        break;
 8007ff8:	e02f      	b.n	800805a <RadioSetModem+0xaa>
    case MODEM_FSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8007ffa:	2000      	movs	r0, #0
 8007ffc:	f002 fb0a 	bl	800a614 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8008000:	4b18      	ldr	r3, [pc, #96]	; (8008064 <RadioSetModem+0xb4>)
 8008002:	2200      	movs	r2, #0
 8008004:	735a      	strb	r2, [r3, #13]
        break;
 8008006:	e028      	b.n	800805a <RadioSetModem+0xaa>
    case MODEM_LORA:
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 8008008:	2001      	movs	r0, #1
 800800a:	f002 fb03 	bl	800a614 <SUBGRF_SetPacketType>
        // Public/Private network register is reset when switching modems
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 800800e:	4b15      	ldr	r3, [pc, #84]	; (8008064 <RadioSetModem+0xb4>)
 8008010:	7b5a      	ldrb	r2, [r3, #13]
 8008012:	4b14      	ldr	r3, [pc, #80]	; (8008064 <RadioSetModem+0xb4>)
 8008014:	7b1b      	ldrb	r3, [r3, #12]
 8008016:	429a      	cmp	r2, r3
 8008018:	d01e      	beq.n	8008058 <RadioSetModem+0xa8>
        {
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 800801a:	4b12      	ldr	r3, [pc, #72]	; (8008064 <RadioSetModem+0xb4>)
 800801c:	7b1a      	ldrb	r2, [r3, #12]
 800801e:	4b11      	ldr	r3, [pc, #68]	; (8008064 <RadioSetModem+0xb4>)
 8008020:	735a      	strb	r2, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 8008022:	4b10      	ldr	r3, [pc, #64]	; (8008064 <RadioSetModem+0xb4>)
 8008024:	7b5b      	ldrb	r3, [r3, #13]
 8008026:	4618      	mov	r0, r3
 8008028:	f000 ff9a 	bl	8008f60 <RadioSetPublicNetwork>
        }
        break;
 800802c:	e014      	b.n	8008058 <RadioSetModem+0xa8>
    case MODEM_BPSK:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 800802e:	2002      	movs	r0, #2
 8008030:	f002 faf0 	bl	800a614 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8008034:	4b0b      	ldr	r3, [pc, #44]	; (8008064 <RadioSetModem+0xb4>)
 8008036:	2200      	movs	r2, #0
 8008038:	735a      	strb	r2, [r3, #13]
        break;
 800803a:	e00e      	b.n	800805a <RadioSetModem+0xaa>
#if (RADIO_SIGFOX_ENABLE == 1)
    case MODEM_SIGFOX_TX:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 800803c:	2002      	movs	r0, #2
 800803e:	f002 fae9 	bl	800a614 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8008042:	4b08      	ldr	r3, [pc, #32]	; (8008064 <RadioSetModem+0xb4>)
 8008044:	2200      	movs	r2, #0
 8008046:	735a      	strb	r2, [r3, #13]
        break;
 8008048:	e007      	b.n	800805a <RadioSetModem+0xaa>
    case MODEM_SIGFOX_RX:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 800804a:	2000      	movs	r0, #0
 800804c:	f002 fae2 	bl	800a614 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8008050:	4b04      	ldr	r3, [pc, #16]	; (8008064 <RadioSetModem+0xb4>)
 8008052:	2200      	movs	r2, #0
 8008054:	735a      	strb	r2, [r3, #13]
        break;
 8008056:	e000      	b.n	800805a <RadioSetModem+0xaa>
        break;
 8008058:	bf00      	nop
#endif /*RADIO_SIGFOX_ENABLE == 1*/
    }
}
 800805a:	bf00      	nop
 800805c:	3708      	adds	r7, #8
 800805e:	46bd      	mov	sp, r7
 8008060:	bd80      	pop	{r7, pc}
 8008062:	bf00      	nop
 8008064:	20000a2c 	.word	0x20000a2c

08008068 <RadioSetChannel>:

static void RadioSetChannel( uint32_t freq )
{
 8008068:	b580      	push	{r7, lr}
 800806a:	b082      	sub	sp, #8
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
    SUBGRF_SetRfFrequency( freq );
 8008070:	6878      	ldr	r0, [r7, #4]
 8008072:	f002 fa89 	bl	800a588 <SUBGRF_SetRfFrequency>
}
 8008076:	bf00      	nop
 8008078:	3708      	adds	r7, #8
 800807a:	46bd      	mov	sp, r7
 800807c:	bd80      	pop	{r7, pc}

0800807e <RadioIsChannelFree>:

static bool RadioIsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 800807e:	b580      	push	{r7, lr}
 8008080:	b090      	sub	sp, #64	; 0x40
 8008082:	af0a      	add	r7, sp, #40	; 0x28
 8008084:	60f8      	str	r0, [r7, #12]
 8008086:	60b9      	str	r1, [r7, #8]
 8008088:	603b      	str	r3, [r7, #0]
 800808a:	4613      	mov	r3, r2
 800808c:	80fb      	strh	r3, [r7, #6]
    bool status = true;
 800808e:	2301      	movs	r3, #1
 8008090:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 8008092:	2300      	movs	r3, #0
 8008094:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 8008096:	2300      	movs	r3, #0
 8008098:	613b      	str	r3, [r7, #16]

    RadioStandby( );
 800809a:	f000 fdea 	bl	8008c72 <RadioStandby>

    RadioSetModem( MODEM_FSK );
 800809e:	2000      	movs	r0, #0
 80080a0:	f7ff ff86 	bl	8007fb0 <RadioSetModem>

    RadioSetChannel( freq );
 80080a4:	68f8      	ldr	r0, [r7, #12]
 80080a6:	f7ff ffdf 	bl	8008068 <RadioSetChannel>

    // Set Rx bandwidth. Other parameters are not used.
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 80080aa:	2301      	movs	r3, #1
 80080ac:	9309      	str	r3, [sp, #36]	; 0x24
 80080ae:	2300      	movs	r3, #0
 80080b0:	9308      	str	r3, [sp, #32]
 80080b2:	2300      	movs	r3, #0
 80080b4:	9307      	str	r3, [sp, #28]
 80080b6:	2300      	movs	r3, #0
 80080b8:	9306      	str	r3, [sp, #24]
 80080ba:	2300      	movs	r3, #0
 80080bc:	9305      	str	r3, [sp, #20]
 80080be:	2300      	movs	r3, #0
 80080c0:	9304      	str	r3, [sp, #16]
 80080c2:	2300      	movs	r3, #0
 80080c4:	9303      	str	r3, [sp, #12]
 80080c6:	2300      	movs	r3, #0
 80080c8:	9302      	str	r3, [sp, #8]
 80080ca:	2303      	movs	r3, #3
 80080cc:	9301      	str	r3, [sp, #4]
 80080ce:	68bb      	ldr	r3, [r7, #8]
 80080d0:	9300      	str	r3, [sp, #0]
 80080d2:	2300      	movs	r3, #0
 80080d4:	f44f 7216 	mov.w	r2, #600	; 0x258
 80080d8:	68b9      	ldr	r1, [r7, #8]
 80080da:	2000      	movs	r0, #0
 80080dc:	f000 f83c 	bl	8008158 <RadioSetRxConfig>
                      0, false, 0, 0, false, true );
    RadioRx( 0 );
 80080e0:	2000      	movs	r0, #0
 80080e2:	f000 fdcd 	bl	8008c80 <RadioRx>

    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 80080e6:	f000 ff69 	bl	8008fbc <RadioGetWakeupTime>
 80080ea:	4603      	mov	r3, r0
 80080ec:	4618      	mov	r0, r3
 80080ee:	f7fa ffcf 	bl	8003090 <HAL_Delay>

    carrierSenseTime = TimerGetCurrentTime( );
 80080f2:	f003 fb7f 	bl	800b7f4 <UTIL_TIMER_GetCurrentTime>
 80080f6:	6138      	str	r0, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 80080f8:	e00d      	b.n	8008116 <RadioIsChannelFree+0x98>
    {
        rssi = RadioRssi( MODEM_FSK );
 80080fa:	2000      	movs	r0, #0
 80080fc:	f000 feae 	bl	8008e5c <RadioRssi>
 8008100:	4603      	mov	r3, r0
 8008102:	82bb      	strh	r3, [r7, #20]

        if( rssi > rssiThresh )
 8008104:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8008108:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800810c:	429a      	cmp	r2, r3
 800810e:	dd02      	ble.n	8008116 <RadioIsChannelFree+0x98>
        {
            status = false;
 8008110:	2300      	movs	r3, #0
 8008112:	75fb      	strb	r3, [r7, #23]
            break;
 8008114:	e006      	b.n	8008124 <RadioIsChannelFree+0xa6>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8008116:	6938      	ldr	r0, [r7, #16]
 8008118:	f003 fb7e 	bl	800b818 <UTIL_TIMER_GetElapsedTime>
 800811c:	4602      	mov	r2, r0
 800811e:	683b      	ldr	r3, [r7, #0]
 8008120:	4293      	cmp	r3, r2
 8008122:	d8ea      	bhi.n	80080fa <RadioIsChannelFree+0x7c>
        }
    }
    RadioStandby( );
 8008124:	f000 fda5 	bl	8008c72 <RadioStandby>

    return status;
 8008128:	7dfb      	ldrb	r3, [r7, #23]
}
 800812a:	4618      	mov	r0, r3
 800812c:	3718      	adds	r7, #24
 800812e:	46bd      	mov	sp, r7
 8008130:	bd80      	pop	{r7, pc}

08008132 <RadioRandom>:

static uint32_t RadioRandom( void )
{
 8008132:	b580      	push	{r7, lr}
 8008134:	b082      	sub	sp, #8
 8008136:	af00      	add	r7, sp, #0
    uint32_t rnd = 0;
 8008138:	2300      	movs	r3, #0
 800813a:	607b      	str	r3, [r7, #4]

    /*
     * Radio setup for random number generation
     */
    // Disable modem interrupts
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 800813c:	2300      	movs	r3, #0
 800813e:	2200      	movs	r2, #0
 8008140:	2100      	movs	r1, #0
 8008142:	2000      	movs	r0, #0
 8008144:	f002 f9c4 	bl	800a4d0 <SUBGRF_SetDioIrqParams>

    rnd = SUBGRF_GetRandom();
 8008148:	f001 ff75 	bl	800a036 <SUBGRF_GetRandom>
 800814c:	6078      	str	r0, [r7, #4]

    return rnd;
 800814e:	687b      	ldr	r3, [r7, #4]
}
 8008150:	4618      	mov	r0, r3
 8008152:	3708      	adds	r7, #8
 8008154:	46bd      	mov	sp, r7
 8008156:	bd80      	pop	{r7, pc}

08008158 <RadioSetRxConfig>:
                              uint32_t bandwidthAfc, uint16_t preambleLen,
                              uint16_t symbTimeout, bool fixLen,
                              uint8_t payloadLen,
                              bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                              bool iqInverted, bool rxContinuous )
{
 8008158:	b580      	push	{r7, lr}
 800815a:	b08a      	sub	sp, #40	; 0x28
 800815c:	af00      	add	r7, sp, #0
 800815e:	60b9      	str	r1, [r7, #8]
 8008160:	607a      	str	r2, [r7, #4]
 8008162:	461a      	mov	r2, r3
 8008164:	4603      	mov	r3, r0
 8008166:	73fb      	strb	r3, [r7, #15]
 8008168:	4613      	mov	r3, r2
 800816a:	73bb      	strb	r3, [r7, #14]
#if (RADIO_SIGFOX_ENABLE == 1)
    uint8_t modReg;
#endif
    SubgRf.RxContinuous = rxContinuous;
 800816c:	4ab9      	ldr	r2, [pc, #740]	; (8008454 <RadioSetRxConfig+0x2fc>)
 800816e:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8008172:	7053      	strb	r3, [r2, #1]
    RFW_DeInit();
 8008174:	f003 f843 	bl	800b1fe <RFW_DeInit>
    if( rxContinuous == true )
 8008178:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800817c:	2b00      	cmp	r3, #0
 800817e:	d001      	beq.n	8008184 <RadioSetRxConfig+0x2c>
    {
        symbTimeout = 0;
 8008180:	2300      	movs	r3, #0
 8008182:	873b      	strh	r3, [r7, #56]	; 0x38
    }
    if( fixLen == true )
 8008184:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8008188:	2b00      	cmp	r3, #0
 800818a:	d004      	beq.n	8008196 <RadioSetRxConfig+0x3e>
    {
        MaxPayloadLength = payloadLen;
 800818c:	4ab2      	ldr	r2, [pc, #712]	; (8008458 <RadioSetRxConfig+0x300>)
 800818e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8008192:	7013      	strb	r3, [r2, #0]
 8008194:	e002      	b.n	800819c <RadioSetRxConfig+0x44>
    }
    else
    {
        MaxPayloadLength = 0xFF;
 8008196:	4bb0      	ldr	r3, [pc, #704]	; (8008458 <RadioSetRxConfig+0x300>)
 8008198:	22ff      	movs	r2, #255	; 0xff
 800819a:	701a      	strb	r2, [r3, #0]
    }

    switch( modem )
 800819c:	7bfb      	ldrb	r3, [r7, #15]
 800819e:	2b05      	cmp	r3, #5
 80081a0:	d009      	beq.n	80081b6 <RadioSetRxConfig+0x5e>
 80081a2:	2b05      	cmp	r3, #5
 80081a4:	f300 81d7 	bgt.w	8008556 <RadioSetRxConfig+0x3fe>
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	f000 80bf 	beq.w	800832c <RadioSetRxConfig+0x1d4>
 80081ae:	2b01      	cmp	r3, #1
 80081b0:	f000 8124 	beq.w	80083fc <RadioSetRxConfig+0x2a4>
            // Timeout Max, Timeout handled directly in SetRx function
            SubgRf.RxTimeout = 0xFFFF;

            break;
        default:
            break;
 80081b4:	e1cf      	b.n	8008556 <RadioSetRxConfig+0x3fe>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 80081b6:	2001      	movs	r0, #1
 80081b8:	f002 f882 	bl	800a2c0 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80081bc:	4ba5      	ldr	r3, [pc, #660]	; (8008454 <RadioSetRxConfig+0x2fc>)
 80081be:	2200      	movs	r2, #0
 80081c0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 80081c4:	4aa3      	ldr	r2, [pc, #652]	; (8008454 <RadioSetRxConfig+0x2fc>)
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 80081ca:	4ba2      	ldr	r3, [pc, #648]	; (8008454 <RadioSetRxConfig+0x2fc>)
 80081cc:	2209      	movs	r2, #9
 80081ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 80081d2:	4ba0      	ldr	r3, [pc, #640]	; (8008454 <RadioSetRxConfig+0x2fc>)
 80081d4:	f44f 7248 	mov.w	r2, #800	; 0x320
 80081d8:	641a      	str	r2, [r3, #64]	; 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 80081da:	68b8      	ldr	r0, [r7, #8]
 80081dc:	f002 ff42 	bl	800b064 <SUBGRF_GetFskBandwidthRegValue>
 80081e0:	4603      	mov	r3, r0
 80081e2:	461a      	mov	r2, r3
 80081e4:	4b9b      	ldr	r3, [pc, #620]	; (8008454 <RadioSetRxConfig+0x2fc>)
 80081e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80081ea:	4b9a      	ldr	r3, [pc, #616]	; (8008454 <RadioSetRxConfig+0x2fc>)
 80081ec:	2200      	movs	r2, #0
 80081ee:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 80081f0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80081f2:	00db      	lsls	r3, r3, #3
 80081f4:	b29a      	uxth	r2, r3
 80081f6:	4b97      	ldr	r3, [pc, #604]	; (8008454 <RadioSetRxConfig+0x2fc>)
 80081f8:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 80081fa:	4b96      	ldr	r3, [pc, #600]	; (8008454 <RadioSetRxConfig+0x2fc>)
 80081fc:	2200      	movs	r2, #0
 80081fe:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 8008200:	4b94      	ldr	r3, [pc, #592]	; (8008454 <RadioSetRxConfig+0x2fc>)
 8008202:	2210      	movs	r2, #16
 8008204:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8008206:	4b93      	ldr	r3, [pc, #588]	; (8008454 <RadioSetRxConfig+0x2fc>)
 8008208:	2200      	movs	r2, #0
 800820a:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 800820c:	4b91      	ldr	r3, [pc, #580]	; (8008454 <RadioSetRxConfig+0x2fc>)
 800820e:	2200      	movs	r2, #0
 8008210:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8008212:	4b91      	ldr	r3, [pc, #580]	; (8008458 <RadioSetRxConfig+0x300>)
 8008214:	781a      	ldrb	r2, [r3, #0]
 8008216:	4b8f      	ldr	r3, [pc, #572]	; (8008454 <RadioSetRxConfig+0x2fc>)
 8008218:	759a      	strb	r2, [r3, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 800821a:	4b8e      	ldr	r3, [pc, #568]	; (8008454 <RadioSetRxConfig+0x2fc>)
 800821c:	2201      	movs	r2, #1
 800821e:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 8008220:	4b8c      	ldr	r3, [pc, #560]	; (8008454 <RadioSetRxConfig+0x2fc>)
 8008222:	2200      	movs	r2, #0
 8008224:	761a      	strb	r2, [r3, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 8008226:	2005      	movs	r0, #5
 8008228:	f7ff fec2 	bl	8007fb0 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800822c:	488b      	ldr	r0, [pc, #556]	; (800845c <RadioSetRxConfig+0x304>)
 800822e:	f002 fae5 	bl	800a7fc <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008232:	488b      	ldr	r0, [pc, #556]	; (8008460 <RadioSetRxConfig+0x308>)
 8008234:	f002 fbb4 	bl	800a9a0 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8008238:	4a8a      	ldr	r2, [pc, #552]	; (8008464 <RadioSetRxConfig+0x30c>)
 800823a:	f107 031c 	add.w	r3, r7, #28
 800823e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008242:	e883 0003 	stmia.w	r3, {r0, r1}
 8008246:	f107 031c 	add.w	r3, r7, #28
 800824a:	4618      	mov	r0, r3
 800824c:	f001 fe71 	bl	8009f32 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8008250:	f240 10ff 	movw	r0, #511	; 0x1ff
 8008254:	f001 febc 	bl	8009fd0 <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(SUBGHZ_AGCGFORSTCFGR);
 8008258:	f640 00b8 	movw	r0, #2232	; 0x8b8
 800825c:	f000 fe1d 	bl	8008e9a <RadioRead>
 8008260:	4603      	mov	r3, r0
 8008262:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=RADIO_BIT_MASK(4);
 8008266:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800826a:	f023 0310 	bic.w	r3, r3, #16
 800826e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_AGCGFORSTCFGR, modReg);
 8008272:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008276:	4619      	mov	r1, r3
 8008278:	f640 00b8 	movw	r0, #2232	; 0x8b8
 800827c:	f000 fdfb 	bl	8008e76 <RadioWrite>
            RadioWrite(SUBGHZ_AGCGFORSTPOWTHR, 0x4 );
 8008280:	2104      	movs	r1, #4
 8008282:	f640 00b9 	movw	r0, #2233	; 0x8b9
 8008286:	f000 fdf6 	bl	8008e76 <RadioWrite>
            modReg= RadioRead(SUBGHZ_AGCRSSICTL0R);
 800828a:	f640 009b 	movw	r0, #2203	; 0x89b
 800828e:	f000 fe04 	bl	8008e9a <RadioRead>
 8008292:	4603      	mov	r3, r0
 8008294:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8008298:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800829c:	f023 031c 	bic.w	r3, r3, #28
 80082a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_AGCRSSICTL0R, (modReg| (0x1<<3) ) );
 80082a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80082a8:	f043 0308 	orr.w	r3, r3, #8
 80082ac:	b2db      	uxtb	r3, r3
 80082ae:	4619      	mov	r1, r3
 80082b0:	f640 009b 	movw	r0, #2203	; 0x89b
 80082b4:	f000 fddf 	bl	8008e76 <RadioWrite>
            modReg= RadioRead(SUBGHZ_GAFCR);
 80082b8:	f240 60d1 	movw	r0, #1745	; 0x6d1
 80082bc:	f000 fded 	bl	8008e9a <RadioRead>
 80082c0:	4603      	mov	r3, r0
 80082c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 80082c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80082ca:	f023 0318 	bic.w	r3, r3, #24
 80082ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_GAFCR, (modReg| (0x3<<3) ));
 80082d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80082d6:	f043 0318 	orr.w	r3, r3, #24
 80082da:	b2db      	uxtb	r3, r3
 80082dc:	4619      	mov	r1, r3
 80082de:	f240 60d1 	movw	r0, #1745	; 0x6d1
 80082e2:	f000 fdc8 	bl	8008e76 <RadioWrite>
            modReg= RadioRead(SUBGHZ_GBSYNCR);
 80082e6:	f240 60ac 	movw	r0, #1708	; 0x6ac
 80082ea:	f000 fdd6 	bl	8008e9a <RadioRead>
 80082ee:	4603      	mov	r3, r0
 80082f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 80082f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80082f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_GBSYNCR, (modReg| (0x5<<4) ));
 8008300:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008304:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8008308:	b2db      	uxtb	r3, r3
 800830a:	4619      	mov	r1, r3
 800830c:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8008310:	f000 fdb1 	bl	8008e76 <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8008314:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8008316:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800831a:	fb02 f303 	mul.w	r3, r2, r3
 800831e:	461a      	mov	r2, r3
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	fbb2 f3f3 	udiv	r3, r2, r3
 8008326:	4a4b      	ldr	r2, [pc, #300]	; (8008454 <RadioSetRxConfig+0x2fc>)
 8008328:	6093      	str	r3, [r2, #8]
            break;
 800832a:	e115      	b.n	8008558 <RadioSetRxConfig+0x400>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 800832c:	2000      	movs	r0, #0
 800832e:	f001 ffc7 	bl	800a2c0 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8008332:	4b48      	ldr	r3, [pc, #288]	; (8008454 <RadioSetRxConfig+0x2fc>)
 8008334:	2200      	movs	r2, #0
 8008336:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 800833a:	4a46      	ldr	r2, [pc, #280]	; (8008454 <RadioSetRxConfig+0x2fc>)
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8008340:	4b44      	ldr	r3, [pc, #272]	; (8008454 <RadioSetRxConfig+0x2fc>)
 8008342:	220b      	movs	r2, #11
 8008344:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8008348:	68b8      	ldr	r0, [r7, #8]
 800834a:	f002 fe8b 	bl	800b064 <SUBGRF_GetFskBandwidthRegValue>
 800834e:	4603      	mov	r3, r0
 8008350:	461a      	mov	r2, r3
 8008352:	4b40      	ldr	r3, [pc, #256]	; (8008454 <RadioSetRxConfig+0x2fc>)
 8008354:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8008358:	4b3e      	ldr	r3, [pc, #248]	; (8008454 <RadioSetRxConfig+0x2fc>)
 800835a:	2200      	movs	r2, #0
 800835c:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 800835e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8008360:	00db      	lsls	r3, r3, #3
 8008362:	b29a      	uxth	r2, r3
 8008364:	4b3b      	ldr	r3, [pc, #236]	; (8008454 <RadioSetRxConfig+0x2fc>)
 8008366:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8008368:	4b3a      	ldr	r3, [pc, #232]	; (8008454 <RadioSetRxConfig+0x2fc>)
 800836a:	2204      	movs	r2, #4
 800836c:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 800836e:	4b39      	ldr	r3, [pc, #228]	; (8008454 <RadioSetRxConfig+0x2fc>)
 8008370:	2218      	movs	r2, #24
 8008372:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8008374:	4b37      	ldr	r3, [pc, #220]	; (8008454 <RadioSetRxConfig+0x2fc>)
 8008376:	2200      	movs	r2, #0
 8008378:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 800837a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800837e:	f083 0301 	eor.w	r3, r3, #1
 8008382:	b2db      	uxtb	r3, r3
 8008384:	461a      	mov	r2, r3
 8008386:	4b33      	ldr	r3, [pc, #204]	; (8008454 <RadioSetRxConfig+0x2fc>)
 8008388:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 800838a:	4b33      	ldr	r3, [pc, #204]	; (8008458 <RadioSetRxConfig+0x300>)
 800838c:	781a      	ldrb	r2, [r3, #0]
 800838e:	4b31      	ldr	r3, [pc, #196]	; (8008454 <RadioSetRxConfig+0x2fc>)
 8008390:	759a      	strb	r2, [r3, #22]
            if( crcOn == true )
 8008392:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8008396:	2b00      	cmp	r3, #0
 8008398:	d003      	beq.n	80083a2 <RadioSetRxConfig+0x24a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 800839a:	4b2e      	ldr	r3, [pc, #184]	; (8008454 <RadioSetRxConfig+0x2fc>)
 800839c:	22f2      	movs	r2, #242	; 0xf2
 800839e:	75da      	strb	r2, [r3, #23]
 80083a0:	e002      	b.n	80083a8 <RadioSetRxConfig+0x250>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 80083a2:	4b2c      	ldr	r3, [pc, #176]	; (8008454 <RadioSetRxConfig+0x2fc>)
 80083a4:	2201      	movs	r2, #1
 80083a6:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 80083a8:	4b2a      	ldr	r3, [pc, #168]	; (8008454 <RadioSetRxConfig+0x2fc>)
 80083aa:	2201      	movs	r2, #1
 80083ac:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 80083ae:	f000 fc60 	bl	8008c72 <RadioStandby>
            RadioSetModem( MODEM_FSK );
 80083b2:	2000      	movs	r0, #0
 80083b4:	f7ff fdfc 	bl	8007fb0 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80083b8:	4828      	ldr	r0, [pc, #160]	; (800845c <RadioSetRxConfig+0x304>)
 80083ba:	f002 fa1f 	bl	800a7fc <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80083be:	4828      	ldr	r0, [pc, #160]	; (8008460 <RadioSetRxConfig+0x308>)
 80083c0:	f002 faee 	bl	800a9a0 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 80083c4:	4a28      	ldr	r2, [pc, #160]	; (8008468 <RadioSetRxConfig+0x310>)
 80083c6:	f107 0314 	add.w	r3, r7, #20
 80083ca:	e892 0003 	ldmia.w	r2, {r0, r1}
 80083ce:	e883 0003 	stmia.w	r3, {r0, r1}
 80083d2:	f107 0314 	add.w	r3, r7, #20
 80083d6:	4618      	mov	r0, r3
 80083d8:	f001 fdab 	bl	8009f32 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 80083dc:	f240 10ff 	movw	r0, #511	; 0x1ff
 80083e0:	f001 fdf6 	bl	8009fd0 <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 80083e4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80083e6:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80083ea:	fb02 f303 	mul.w	r3, r2, r3
 80083ee:	461a      	mov	r2, r3
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80083f6:	4a17      	ldr	r2, [pc, #92]	; (8008454 <RadioSetRxConfig+0x2fc>)
 80083f8:	6093      	str	r3, [r2, #8]
            break;
 80083fa:	e0ad      	b.n	8008558 <RadioSetRxConfig+0x400>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 80083fc:	2000      	movs	r0, #0
 80083fe:	f001 ff5f 	bl	800a2c0 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8008402:	4b14      	ldr	r3, [pc, #80]	; (8008454 <RadioSetRxConfig+0x2fc>)
 8008404:	2201      	movs	r2, #1
 8008406:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	b2da      	uxtb	r2, r3
 800840e:	4b11      	ldr	r3, [pc, #68]	; (8008454 <RadioSetRxConfig+0x2fc>)
 8008410:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 8008414:	4a15      	ldr	r2, [pc, #84]	; (800846c <RadioSetRxConfig+0x314>)
 8008416:	68bb      	ldr	r3, [r7, #8]
 8008418:	4413      	add	r3, r2
 800841a:	781a      	ldrb	r2, [r3, #0]
 800841c:	4b0d      	ldr	r3, [pc, #52]	; (8008454 <RadioSetRxConfig+0x2fc>)
 800841e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 8008422:	4a0c      	ldr	r2, [pc, #48]	; (8008454 <RadioSetRxConfig+0x2fc>)
 8008424:	7bbb      	ldrb	r3, [r7, #14]
 8008426:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800842a:	68bb      	ldr	r3, [r7, #8]
 800842c:	2b00      	cmp	r3, #0
 800842e:	d105      	bne.n	800843c <RadioSetRxConfig+0x2e4>
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	2b0b      	cmp	r3, #11
 8008434:	d008      	beq.n	8008448 <RadioSetRxConfig+0x2f0>
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	2b0c      	cmp	r3, #12
 800843a:	d005      	beq.n	8008448 <RadioSetRxConfig+0x2f0>
 800843c:	68bb      	ldr	r3, [r7, #8]
 800843e:	2b01      	cmp	r3, #1
 8008440:	d116      	bne.n	8008470 <RadioSetRxConfig+0x318>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	2b0c      	cmp	r3, #12
 8008446:	d113      	bne.n	8008470 <RadioSetRxConfig+0x318>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8008448:	4b02      	ldr	r3, [pc, #8]	; (8008454 <RadioSetRxConfig+0x2fc>)
 800844a:	2201      	movs	r2, #1
 800844c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8008450:	e012      	b.n	8008478 <RadioSetRxConfig+0x320>
 8008452:	bf00      	nop
 8008454:	20000a2c 	.word	0x20000a2c
 8008458:	20000015 	.word	0x20000015
 800845c:	20000a64 	.word	0x20000a64
 8008460:	20000a3a 	.word	0x20000a3a
 8008464:	0800caf8 	.word	0x0800caf8
 8008468:	0800cb00 	.word	0x0800cb00
 800846c:	0800cc9c 	.word	0x0800cc9c
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8008470:	4b3b      	ldr	r3, [pc, #236]	; (8008560 <RadioSetRxConfig+0x408>)
 8008472:	2200      	movs	r2, #0
 8008474:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8008478:	4b39      	ldr	r3, [pc, #228]	; (8008560 <RadioSetRxConfig+0x408>)
 800847a:	2201      	movs	r2, #1
 800847c:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 800847e:	4b38      	ldr	r3, [pc, #224]	; (8008560 <RadioSetRxConfig+0x408>)
 8008480:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008484:	2b05      	cmp	r3, #5
 8008486:	d004      	beq.n	8008492 <RadioSetRxConfig+0x33a>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 8008488:	4b35      	ldr	r3, [pc, #212]	; (8008560 <RadioSetRxConfig+0x408>)
 800848a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 800848e:	2b06      	cmp	r3, #6
 8008490:	d10a      	bne.n	80084a8 <RadioSetRxConfig+0x350>
                if( preambleLen < 12 )
 8008492:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8008494:	2b0b      	cmp	r3, #11
 8008496:	d803      	bhi.n	80084a0 <RadioSetRxConfig+0x348>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8008498:	4b31      	ldr	r3, [pc, #196]	; (8008560 <RadioSetRxConfig+0x408>)
 800849a:	220c      	movs	r2, #12
 800849c:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 800849e:	e006      	b.n	80084ae <RadioSetRxConfig+0x356>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 80084a0:	4a2f      	ldr	r2, [pc, #188]	; (8008560 <RadioSetRxConfig+0x408>)
 80084a2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80084a4:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 80084a6:	e002      	b.n	80084ae <RadioSetRxConfig+0x356>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 80084a8:	4a2d      	ldr	r2, [pc, #180]	; (8008560 <RadioSetRxConfig+0x408>)
 80084aa:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80084ac:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 80084ae:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 80084b2:	4b2b      	ldr	r3, [pc, #172]	; (8008560 <RadioSetRxConfig+0x408>)
 80084b4:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 80084b6:	4b2b      	ldr	r3, [pc, #172]	; (8008564 <RadioSetRxConfig+0x40c>)
 80084b8:	781a      	ldrb	r2, [r3, #0]
 80084ba:	4b29      	ldr	r3, [pc, #164]	; (8008560 <RadioSetRxConfig+0x408>)
 80084bc:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 80084be:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 80084c2:	4b27      	ldr	r3, [pc, #156]	; (8008560 <RadioSetRxConfig+0x408>)
 80084c4:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 80084c8:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 80084cc:	4b24      	ldr	r3, [pc, #144]	; (8008560 <RadioSetRxConfig+0x408>)
 80084ce:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 80084d2:	f000 fbce 	bl	8008c72 <RadioStandby>
            RadioSetModem( MODEM_LORA );
 80084d6:	2001      	movs	r0, #1
 80084d8:	f7ff fd6a 	bl	8007fb0 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80084dc:	4822      	ldr	r0, [pc, #136]	; (8008568 <RadioSetRxConfig+0x410>)
 80084de:	f002 f98d 	bl	800a7fc <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80084e2:	4822      	ldr	r0, [pc, #136]	; (800856c <RadioSetRxConfig+0x414>)
 80084e4:	f002 fa5c 	bl	800a9a0 <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 80084e8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80084ea:	b2db      	uxtb	r3, r3
 80084ec:	4618      	mov	r0, r3
 80084ee:	f001 fef6 	bl	800a2de <SUBGRF_SetLoRaSymbNumTimeout>
            SUBGRF_WriteRegister(SUBGHZ_AGCCFG,SUBGRF_ReadRegister(SUBGHZ_AGCCFG)&0x1);
 80084f2:	f640 00a3 	movw	r0, #2211	; 0x8a3
 80084f6:	f002 fbaf 	bl	800ac58 <SUBGRF_ReadRegister>
 80084fa:	4603      	mov	r3, r0
 80084fc:	f003 0301 	and.w	r3, r3, #1
 8008500:	b2db      	uxtb	r3, r3
 8008502:	4619      	mov	r1, r3
 8008504:	f640 00a3 	movw	r0, #2211	; 0x8a3
 8008508:	f002 fb92 	bl	800ac30 <SUBGRF_WriteRegister>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 800850c:	4b14      	ldr	r3, [pc, #80]	; (8008560 <RadioSetRxConfig+0x408>)
 800850e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008512:	2b01      	cmp	r3, #1
 8008514:	d10d      	bne.n	8008532 <RadioSetRxConfig+0x3da>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 8008516:	f240 7036 	movw	r0, #1846	; 0x736
 800851a:	f002 fb9d 	bl	800ac58 <SUBGRF_ReadRegister>
 800851e:	4603      	mov	r3, r0
 8008520:	f023 0304 	bic.w	r3, r3, #4
 8008524:	b2db      	uxtb	r3, r3
 8008526:	4619      	mov	r1, r3
 8008528:	f240 7036 	movw	r0, #1846	; 0x736
 800852c:	f002 fb80 	bl	800ac30 <SUBGRF_WriteRegister>
 8008530:	e00c      	b.n	800854c <RadioSetRxConfig+0x3f4>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 8008532:	f240 7036 	movw	r0, #1846	; 0x736
 8008536:	f002 fb8f 	bl	800ac58 <SUBGRF_ReadRegister>
 800853a:	4603      	mov	r3, r0
 800853c:	f043 0304 	orr.w	r3, r3, #4
 8008540:	b2db      	uxtb	r3, r3
 8008542:	4619      	mov	r1, r3
 8008544:	f240 7036 	movw	r0, #1846	; 0x736
 8008548:	f002 fb72 	bl	800ac30 <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 800854c:	4b04      	ldr	r3, [pc, #16]	; (8008560 <RadioSetRxConfig+0x408>)
 800854e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008552:	609a      	str	r2, [r3, #8]
            break;
 8008554:	e000      	b.n	8008558 <RadioSetRxConfig+0x400>
            break;
 8008556:	bf00      	nop
    }
}
 8008558:	bf00      	nop
 800855a:	3728      	adds	r7, #40	; 0x28
 800855c:	46bd      	mov	sp, r7
 800855e:	bd80      	pop	{r7, pc}
 8008560:	20000a2c 	.word	0x20000a2c
 8008564:	20000015 	.word	0x20000015
 8008568:	20000a64 	.word	0x20000a64
 800856c:	20000a3a 	.word	0x20000a3a

08008570 <RadioSetTxConfig>:
static void RadioSetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                              uint32_t bandwidth, uint32_t datarate,
                              uint8_t coderate, uint16_t preambleLen,
                              bool fixLen, bool crcOn, bool freqHopOn,
                              uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 8008570:	b580      	push	{r7, lr}
 8008572:	b086      	sub	sp, #24
 8008574:	af00      	add	r7, sp, #0
 8008576:	60ba      	str	r2, [r7, #8]
 8008578:	607b      	str	r3, [r7, #4]
 800857a:	4603      	mov	r3, r0
 800857c:	73fb      	strb	r3, [r7, #15]
 800857e:	460b      	mov	r3, r1
 8008580:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    RFW_DeInit();
 8008582:	f002 fe3c 	bl	800b1fe <RFW_DeInit>
    switch( modem )
 8008586:	7bfb      	ldrb	r3, [r7, #15]
 8008588:	2b04      	cmp	r3, #4
 800858a:	f000 80c7 	beq.w	800871c <RadioSetTxConfig+0x1ac>
 800858e:	2b04      	cmp	r3, #4
 8008590:	f300 80d6 	bgt.w	8008740 <RadioSetTxConfig+0x1d0>
 8008594:	2b00      	cmp	r3, #0
 8008596:	d002      	beq.n	800859e <RadioSetTxConfig+0x2e>
 8008598:	2b01      	cmp	r3, #1
 800859a:	d059      	beq.n	8008650 <RadioSetTxConfig+0xe0>
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
            break;
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 800859c:	e0d0      	b.n	8008740 <RadioSetTxConfig+0x1d0>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800859e:	4b77      	ldr	r3, [pc, #476]	; (800877c <RadioSetTxConfig+0x20c>)
 80085a0:	2200      	movs	r2, #0
 80085a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 80085a6:	4a75      	ldr	r2, [pc, #468]	; (800877c <RadioSetTxConfig+0x20c>)
 80085a8:	6a3b      	ldr	r3, [r7, #32]
 80085aa:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 80085ac:	4b73      	ldr	r3, [pc, #460]	; (800877c <RadioSetTxConfig+0x20c>)
 80085ae:	220b      	movs	r2, #11
 80085b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 80085b4:	6878      	ldr	r0, [r7, #4]
 80085b6:	f002 fd55 	bl	800b064 <SUBGRF_GetFskBandwidthRegValue>
 80085ba:	4603      	mov	r3, r0
 80085bc:	461a      	mov	r2, r3
 80085be:	4b6f      	ldr	r3, [pc, #444]	; (800877c <RadioSetTxConfig+0x20c>)
 80085c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 80085c4:	4a6d      	ldr	r2, [pc, #436]	; (800877c <RadioSetTxConfig+0x20c>)
 80085c6:	68bb      	ldr	r3, [r7, #8]
 80085c8:	6413      	str	r3, [r2, #64]	; 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80085ca:	4b6c      	ldr	r3, [pc, #432]	; (800877c <RadioSetTxConfig+0x20c>)
 80085cc:	2200      	movs	r2, #0
 80085ce:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 80085d0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80085d2:	00db      	lsls	r3, r3, #3
 80085d4:	b29a      	uxth	r2, r3
 80085d6:	4b69      	ldr	r3, [pc, #420]	; (800877c <RadioSetTxConfig+0x20c>)
 80085d8:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 80085da:	4b68      	ldr	r3, [pc, #416]	; (800877c <RadioSetTxConfig+0x20c>)
 80085dc:	2204      	movs	r2, #4
 80085de:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 80085e0:	4b66      	ldr	r3, [pc, #408]	; (800877c <RadioSetTxConfig+0x20c>)
 80085e2:	2218      	movs	r2, #24
 80085e4:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 80085e6:	4b65      	ldr	r3, [pc, #404]	; (800877c <RadioSetTxConfig+0x20c>)
 80085e8:	2200      	movs	r2, #0
 80085ea:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 80085ec:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80085f0:	f083 0301 	eor.w	r3, r3, #1
 80085f4:	b2db      	uxtb	r3, r3
 80085f6:	461a      	mov	r2, r3
 80085f8:	4b60      	ldr	r3, [pc, #384]	; (800877c <RadioSetTxConfig+0x20c>)
 80085fa:	755a      	strb	r2, [r3, #21]
            if( crcOn == true )
 80085fc:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8008600:	2b00      	cmp	r3, #0
 8008602:	d003      	beq.n	800860c <RadioSetTxConfig+0x9c>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8008604:	4b5d      	ldr	r3, [pc, #372]	; (800877c <RadioSetTxConfig+0x20c>)
 8008606:	22f2      	movs	r2, #242	; 0xf2
 8008608:	75da      	strb	r2, [r3, #23]
 800860a:	e002      	b.n	8008612 <RadioSetTxConfig+0xa2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 800860c:	4b5b      	ldr	r3, [pc, #364]	; (800877c <RadioSetTxConfig+0x20c>)
 800860e:	2201      	movs	r2, #1
 8008610:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8008612:	4b5a      	ldr	r3, [pc, #360]	; (800877c <RadioSetTxConfig+0x20c>)
 8008614:	2201      	movs	r2, #1
 8008616:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 8008618:	f000 fb2b 	bl	8008c72 <RadioStandby>
            RadioSetModem(  MODEM_FSK  );
 800861c:	2000      	movs	r0, #0
 800861e:	f7ff fcc7 	bl	8007fb0 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8008622:	4857      	ldr	r0, [pc, #348]	; (8008780 <RadioSetTxConfig+0x210>)
 8008624:	f002 f8ea 	bl	800a7fc <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008628:	4856      	ldr	r0, [pc, #344]	; (8008784 <RadioSetTxConfig+0x214>)
 800862a:	f002 f9b9 	bl	800a9a0 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 800862e:	4a56      	ldr	r2, [pc, #344]	; (8008788 <RadioSetTxConfig+0x218>)
 8008630:	f107 0310 	add.w	r3, r7, #16
 8008634:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008638:	e883 0003 	stmia.w	r3, {r0, r1}
 800863c:	f107 0310 	add.w	r3, r7, #16
 8008640:	4618      	mov	r0, r3
 8008642:	f001 fc76 	bl	8009f32 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8008646:	f240 10ff 	movw	r0, #511	; 0x1ff
 800864a:	f001 fcc1 	bl	8009fd0 <SUBGRF_SetWhiteningSeed>
            break;
 800864e:	e078      	b.n	8008742 <RadioSetTxConfig+0x1d2>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8008650:	4b4a      	ldr	r3, [pc, #296]	; (800877c <RadioSetTxConfig+0x20c>)
 8008652:	2201      	movs	r2, #1
 8008654:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 8008658:	6a3b      	ldr	r3, [r7, #32]
 800865a:	b2da      	uxtb	r2, r3
 800865c:	4b47      	ldr	r3, [pc, #284]	; (800877c <RadioSetTxConfig+0x20c>)
 800865e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 8008662:	4a4a      	ldr	r2, [pc, #296]	; (800878c <RadioSetTxConfig+0x21c>)
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	4413      	add	r3, r2
 8008668:	781a      	ldrb	r2, [r3, #0]
 800866a:	4b44      	ldr	r3, [pc, #272]	; (800877c <RadioSetTxConfig+0x20c>)
 800866c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 8008670:	4a42      	ldr	r2, [pc, #264]	; (800877c <RadioSetTxConfig+0x20c>)
 8008672:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008676:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	2b00      	cmp	r3, #0
 800867e:	d105      	bne.n	800868c <RadioSetTxConfig+0x11c>
 8008680:	6a3b      	ldr	r3, [r7, #32]
 8008682:	2b0b      	cmp	r3, #11
 8008684:	d008      	beq.n	8008698 <RadioSetTxConfig+0x128>
 8008686:	6a3b      	ldr	r3, [r7, #32]
 8008688:	2b0c      	cmp	r3, #12
 800868a:	d005      	beq.n	8008698 <RadioSetTxConfig+0x128>
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	2b01      	cmp	r3, #1
 8008690:	d107      	bne.n	80086a2 <RadioSetTxConfig+0x132>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8008692:	6a3b      	ldr	r3, [r7, #32]
 8008694:	2b0c      	cmp	r3, #12
 8008696:	d104      	bne.n	80086a2 <RadioSetTxConfig+0x132>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8008698:	4b38      	ldr	r3, [pc, #224]	; (800877c <RadioSetTxConfig+0x20c>)
 800869a:	2201      	movs	r2, #1
 800869c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 80086a0:	e003      	b.n	80086aa <RadioSetTxConfig+0x13a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 80086a2:	4b36      	ldr	r3, [pc, #216]	; (800877c <RadioSetTxConfig+0x20c>)
 80086a4:	2200      	movs	r2, #0
 80086a6:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 80086aa:	4b34      	ldr	r3, [pc, #208]	; (800877c <RadioSetTxConfig+0x20c>)
 80086ac:	2201      	movs	r2, #1
 80086ae:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 80086b0:	4b32      	ldr	r3, [pc, #200]	; (800877c <RadioSetTxConfig+0x20c>)
 80086b2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80086b6:	2b05      	cmp	r3, #5
 80086b8:	d004      	beq.n	80086c4 <RadioSetTxConfig+0x154>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 80086ba:	4b30      	ldr	r3, [pc, #192]	; (800877c <RadioSetTxConfig+0x20c>)
 80086bc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 80086c0:	2b06      	cmp	r3, #6
 80086c2:	d10a      	bne.n	80086da <RadioSetTxConfig+0x16a>
                if( preambleLen < 12 )
 80086c4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80086c6:	2b0b      	cmp	r3, #11
 80086c8:	d803      	bhi.n	80086d2 <RadioSetTxConfig+0x162>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 80086ca:	4b2c      	ldr	r3, [pc, #176]	; (800877c <RadioSetTxConfig+0x20c>)
 80086cc:	220c      	movs	r2, #12
 80086ce:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 80086d0:	e006      	b.n	80086e0 <RadioSetTxConfig+0x170>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 80086d2:	4a2a      	ldr	r2, [pc, #168]	; (800877c <RadioSetTxConfig+0x20c>)
 80086d4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80086d6:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 80086d8:	e002      	b.n	80086e0 <RadioSetTxConfig+0x170>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 80086da:	4a28      	ldr	r2, [pc, #160]	; (800877c <RadioSetTxConfig+0x20c>)
 80086dc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80086de:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 80086e0:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80086e4:	4b25      	ldr	r3, [pc, #148]	; (800877c <RadioSetTxConfig+0x20c>)
 80086e6:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 80086e8:	4b29      	ldr	r3, [pc, #164]	; (8008790 <RadioSetTxConfig+0x220>)
 80086ea:	781a      	ldrb	r2, [r3, #0]
 80086ec:	4b23      	ldr	r3, [pc, #140]	; (800877c <RadioSetTxConfig+0x20c>)
 80086ee:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 80086f0:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80086f4:	4b21      	ldr	r3, [pc, #132]	; (800877c <RadioSetTxConfig+0x20c>)
 80086f6:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 80086fa:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 80086fe:	4b1f      	ldr	r3, [pc, #124]	; (800877c <RadioSetTxConfig+0x20c>)
 8008700:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 8008704:	f000 fab5 	bl	8008c72 <RadioStandby>
            RadioSetModem( MODEM_LORA );
 8008708:	2001      	movs	r0, #1
 800870a:	f7ff fc51 	bl	8007fb0 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800870e:	481c      	ldr	r0, [pc, #112]	; (8008780 <RadioSetTxConfig+0x210>)
 8008710:	f002 f874 	bl	800a7fc <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008714:	481b      	ldr	r0, [pc, #108]	; (8008784 <RadioSetTxConfig+0x214>)
 8008716:	f002 f943 	bl	800a9a0 <SUBGRF_SetPacketParams>
            break;
 800871a:	e012      	b.n	8008742 <RadioSetTxConfig+0x1d2>
            RadioSetModem(MODEM_SIGFOX_TX);
 800871c:	2004      	movs	r0, #4
 800871e:	f7ff fc47 	bl	8007fb0 <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 8008722:	4b16      	ldr	r3, [pc, #88]	; (800877c <RadioSetTxConfig+0x20c>)
 8008724:	2202      	movs	r2, #2
 8008726:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 800872a:	4a14      	ldr	r2, [pc, #80]	; (800877c <RadioSetTxConfig+0x20c>)
 800872c:	6a3b      	ldr	r3, [r7, #32]
 800872e:	6493      	str	r3, [r2, #72]	; 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 8008730:	4b12      	ldr	r3, [pc, #72]	; (800877c <RadioSetTxConfig+0x20c>)
 8008732:	2216      	movs	r2, #22
 8008734:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8008738:	4811      	ldr	r0, [pc, #68]	; (8008780 <RadioSetTxConfig+0x210>)
 800873a:	f002 f85f 	bl	800a7fc <SUBGRF_SetModulationParams>
            break;
 800873e:	e000      	b.n	8008742 <RadioSetTxConfig+0x1d2>
            break;
 8008740:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 8008742:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008746:	4618      	mov	r0, r3
 8008748:	f002 fb8e 	bl	800ae68 <SUBGRF_SetRfTxPower>
 800874c:	4603      	mov	r3, r0
 800874e:	461a      	mov	r2, r3
 8008750:	4b0a      	ldr	r3, [pc, #40]	; (800877c <RadioSetTxConfig+0x20c>)
 8008752:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8008756:	210e      	movs	r1, #14
 8008758:	f640 101f 	movw	r0, #2335	; 0x91f
 800875c:	f002 fa68 	bl	800ac30 <SUBGRF_WriteRegister>
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 8008760:	4b06      	ldr	r3, [pc, #24]	; (800877c <RadioSetTxConfig+0x20c>)
 8008762:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8008766:	4618      	mov	r0, r3
 8008768:	f002 fd5d 	bl	800b226 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 800876c:	4a03      	ldr	r2, [pc, #12]	; (800877c <RadioSetTxConfig+0x20c>)
 800876e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008770:	6053      	str	r3, [r2, #4]
}
 8008772:	bf00      	nop
 8008774:	3718      	adds	r7, #24
 8008776:	46bd      	mov	sp, r7
 8008778:	bd80      	pop	{r7, pc}
 800877a:	bf00      	nop
 800877c:	20000a2c 	.word	0x20000a2c
 8008780:	20000a64 	.word	0x20000a64
 8008784:	20000a3a 	.word	0x20000a3a
 8008788:	0800cb00 	.word	0x0800cb00
 800878c:	0800cc9c 	.word	0x0800cc9c
 8008790:	20000015 	.word	0x20000015

08008794 <RadioCheckRfFrequency>:

static bool RadioCheckRfFrequency( uint32_t frequency )
{
 8008794:	b480      	push	{r7}
 8008796:	b083      	sub	sp, #12
 8008798:	af00      	add	r7, sp, #0
 800879a:	6078      	str	r0, [r7, #4]
    return true;
 800879c:	2301      	movs	r3, #1
}
 800879e:	4618      	mov	r0, r3
 80087a0:	370c      	adds	r7, #12
 80087a2:	46bd      	mov	sp, r7
 80087a4:	bc80      	pop	{r7}
 80087a6:	4770      	bx	lr

080087a8 <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
 80087a8:	b480      	push	{r7}
 80087aa:	b085      	sub	sp, #20
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	4603      	mov	r3, r0
 80087b0:	71fb      	strb	r3, [r7, #7]
    uint32_t bandwidthInHz = 0;
 80087b2:	2300      	movs	r3, #0
 80087b4:	60fb      	str	r3, [r7, #12]

    switch( bw )
 80087b6:	79fb      	ldrb	r3, [r7, #7]
 80087b8:	2b0a      	cmp	r3, #10
 80087ba:	d83e      	bhi.n	800883a <RadioGetLoRaBandwidthInHz+0x92>
 80087bc:	a201      	add	r2, pc, #4	; (adr r2, 80087c4 <RadioGetLoRaBandwidthInHz+0x1c>)
 80087be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087c2:	bf00      	nop
 80087c4:	080087f1 	.word	0x080087f1
 80087c8:	08008801 	.word	0x08008801
 80087cc:	08008811 	.word	0x08008811
 80087d0:	08008821 	.word	0x08008821
 80087d4:	08008829 	.word	0x08008829
 80087d8:	0800882f 	.word	0x0800882f
 80087dc:	08008835 	.word	0x08008835
 80087e0:	0800883b 	.word	0x0800883b
 80087e4:	080087f9 	.word	0x080087f9
 80087e8:	08008809 	.word	0x08008809
 80087ec:	08008819 	.word	0x08008819
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
 80087f0:	f641 6384 	movw	r3, #7812	; 0x1e84
 80087f4:	60fb      	str	r3, [r7, #12]
        break;
 80087f6:	e020      	b.n	800883a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 80087f8:	f642 03b1 	movw	r3, #10417	; 0x28b1
 80087fc:	60fb      	str	r3, [r7, #12]
        break;
 80087fe:	e01c      	b.n	800883a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 8008800:	f643 5309 	movw	r3, #15625	; 0x3d09
 8008804:	60fb      	str	r3, [r7, #12]
        break;
 8008806:	e018      	b.n	800883a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 8008808:	f245 1361 	movw	r3, #20833	; 0x5161
 800880c:	60fb      	str	r3, [r7, #12]
        break;
 800880e:	e014      	b.n	800883a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 8008810:	f647 2312 	movw	r3, #31250	; 0x7a12
 8008814:	60fb      	str	r3, [r7, #12]
        break;
 8008816:	e010      	b.n	800883a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 8008818:	f24a 23c3 	movw	r3, #41667	; 0xa2c3
 800881c:	60fb      	str	r3, [r7, #12]
        break;
 800881e:	e00c      	b.n	800883a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 8008820:	f24f 4324 	movw	r3, #62500	; 0xf424
 8008824:	60fb      	str	r3, [r7, #12]
        break;
 8008826:	e008      	b.n	800883a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 8008828:	4b07      	ldr	r3, [pc, #28]	; (8008848 <RadioGetLoRaBandwidthInHz+0xa0>)
 800882a:	60fb      	str	r3, [r7, #12]
        break;
 800882c:	e005      	b.n	800883a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 800882e:	4b07      	ldr	r3, [pc, #28]	; (800884c <RadioGetLoRaBandwidthInHz+0xa4>)
 8008830:	60fb      	str	r3, [r7, #12]
        break;
 8008832:	e002      	b.n	800883a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 8008834:	4b06      	ldr	r3, [pc, #24]	; (8008850 <RadioGetLoRaBandwidthInHz+0xa8>)
 8008836:	60fb      	str	r3, [r7, #12]
        break;
 8008838:	bf00      	nop
    }

    return bandwidthInHz;
 800883a:	68fb      	ldr	r3, [r7, #12]
}
 800883c:	4618      	mov	r0, r3
 800883e:	3714      	adds	r7, #20
 8008840:	46bd      	mov	sp, r7
 8008842:	bc80      	pop	{r7}
 8008844:	4770      	bx	lr
 8008846:	bf00      	nop
 8008848:	0001e848 	.word	0x0001e848
 800884c:	0003d090 	.word	0x0003d090
 8008850:	0007a120 	.word	0x0007a120

08008854 <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8008854:	b480      	push	{r7}
 8008856:	b083      	sub	sp, #12
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]
 800885c:	4608      	mov	r0, r1
 800885e:	4611      	mov	r1, r2
 8008860:	461a      	mov	r2, r3
 8008862:	4603      	mov	r3, r0
 8008864:	70fb      	strb	r3, [r7, #3]
 8008866:	460b      	mov	r3, r1
 8008868:	803b      	strh	r3, [r7, #0]
 800886a:	4613      	mov	r3, r2
 800886c:	70bb      	strb	r3, [r7, #2]
    return ( preambleLen << 3 ) +
 800886e:	883b      	ldrh	r3, [r7, #0]
 8008870:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8008872:	78ba      	ldrb	r2, [r7, #2]
 8008874:	f082 0201 	eor.w	r2, r2, #1
 8008878:	b2d2      	uxtb	r2, r2
 800887a:	2a00      	cmp	r2, #0
 800887c:	d001      	beq.n	8008882 <RadioGetGfskTimeOnAirNumerator+0x2e>
 800887e:	2208      	movs	r2, #8
 8008880:	e000      	b.n	8008884 <RadioGetGfskTimeOnAirNumerator+0x30>
 8008882:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 8008884:	4413      	add	r3, r2
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8008886:	f103 0218 	add.w	r2, r3, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 800888a:	7c3b      	ldrb	r3, [r7, #16]
 800888c:	7d39      	ldrb	r1, [r7, #20]
 800888e:	2900      	cmp	r1, #0
 8008890:	d001      	beq.n	8008896 <RadioGetGfskTimeOnAirNumerator+0x42>
 8008892:	2102      	movs	r1, #2
 8008894:	e000      	b.n	8008898 <RadioGetGfskTimeOnAirNumerator+0x44>
 8008896:	2100      	movs	r1, #0
 8008898:	440b      	add	r3, r1
 800889a:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 800889c:	4413      	add	r3, r2
}
 800889e:	4618      	mov	r0, r3
 80088a0:	370c      	adds	r7, #12
 80088a2:	46bd      	mov	sp, r7
 80088a4:	bc80      	pop	{r7}
 80088a6:	4770      	bx	lr

080088a8 <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 80088a8:	b480      	push	{r7}
 80088aa:	b08b      	sub	sp, #44	; 0x2c
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	60f8      	str	r0, [r7, #12]
 80088b0:	60b9      	str	r1, [r7, #8]
 80088b2:	4611      	mov	r1, r2
 80088b4:	461a      	mov	r2, r3
 80088b6:	460b      	mov	r3, r1
 80088b8:	71fb      	strb	r3, [r7, #7]
 80088ba:	4613      	mov	r3, r2
 80088bc:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 80088be:	79fb      	ldrb	r3, [r7, #7]
 80088c0:	3304      	adds	r3, #4
 80088c2:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 80088c4:	2300      	movs	r3, #0
 80088c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 80088ca:	68bb      	ldr	r3, [r7, #8]
 80088cc:	2b05      	cmp	r3, #5
 80088ce:	d002      	beq.n	80088d6 <RadioGetLoRaTimeOnAirNumerator+0x2e>
 80088d0:	68bb      	ldr	r3, [r7, #8]
 80088d2:	2b06      	cmp	r3, #6
 80088d4:	d104      	bne.n	80088e0 <RadioGetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 80088d6:	88bb      	ldrh	r3, [r7, #4]
 80088d8:	2b0b      	cmp	r3, #11
 80088da:	d801      	bhi.n	80088e0 <RadioGetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 80088dc:	230c      	movs	r3, #12
 80088de:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d105      	bne.n	80088f2 <RadioGetLoRaTimeOnAirNumerator+0x4a>
 80088e6:	68bb      	ldr	r3, [r7, #8]
 80088e8:	2b0b      	cmp	r3, #11
 80088ea:	d008      	beq.n	80088fe <RadioGetLoRaTimeOnAirNumerator+0x56>
 80088ec:	68bb      	ldr	r3, [r7, #8]
 80088ee:	2b0c      	cmp	r3, #12
 80088f0:	d005      	beq.n	80088fe <RadioGetLoRaTimeOnAirNumerator+0x56>
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	2b01      	cmp	r3, #1
 80088f6:	d105      	bne.n	8008904 <RadioGetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 80088f8:	68bb      	ldr	r3, [r7, #8]
 80088fa:	2b0c      	cmp	r3, #12
 80088fc:	d102      	bne.n	8008904 <RadioGetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 80088fe:	2301      	movs	r3, #1
 8008900:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8008904:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8008908:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 800890a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800890e:	2a00      	cmp	r2, #0
 8008910:	d001      	beq.n	8008916 <RadioGetLoRaTimeOnAirNumerator+0x6e>
 8008912:	2210      	movs	r2, #16
 8008914:	e000      	b.n	8008918 <RadioGetLoRaTimeOnAirNumerator+0x70>
 8008916:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8008918:	4413      	add	r3, r2
 800891a:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 800891c:	68bb      	ldr	r3, [r7, #8]
 800891e:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 8008920:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 8008922:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8008926:	2a00      	cmp	r2, #0
 8008928:	d001      	beq.n	800892e <RadioGetLoRaTimeOnAirNumerator+0x86>
 800892a:	2200      	movs	r2, #0
 800892c:	e000      	b.n	8008930 <RadioGetLoRaTimeOnAirNumerator+0x88>
 800892e:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 8008930:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8008932:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 8008934:	68bb      	ldr	r3, [r7, #8]
 8008936:	2b06      	cmp	r3, #6
 8008938:	d803      	bhi.n	8008942 <RadioGetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 800893a:	68bb      	ldr	r3, [r7, #8]
 800893c:	009b      	lsls	r3, r3, #2
 800893e:	623b      	str	r3, [r7, #32]
 8008940:	e00e      	b.n	8008960 <RadioGetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 8008942:	69fb      	ldr	r3, [r7, #28]
 8008944:	3308      	adds	r3, #8
 8008946:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 8008948:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800894c:	2b00      	cmp	r3, #0
 800894e:	d004      	beq.n	800895a <RadioGetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 8008950:	68bb      	ldr	r3, [r7, #8]
 8008952:	3b02      	subs	r3, #2
 8008954:	009b      	lsls	r3, r3, #2
 8008956:	623b      	str	r3, [r7, #32]
 8008958:	e002      	b.n	8008960 <RadioGetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 800895a:	68bb      	ldr	r3, [r7, #8]
 800895c:	009b      	lsls	r3, r3, #2
 800895e:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 8008960:	69fb      	ldr	r3, [r7, #28]
 8008962:	2b00      	cmp	r3, #0
 8008964:	da01      	bge.n	800896a <RadioGetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 8008966:	2300      	movs	r3, #0
 8008968:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 800896a:	69fa      	ldr	r2, [r7, #28]
 800896c:	6a3b      	ldr	r3, [r7, #32]
 800896e:	4413      	add	r3, r2
 8008970:	1e5a      	subs	r2, r3, #1
 8008972:	6a3b      	ldr	r3, [r7, #32]
 8008974:	fb92 f3f3 	sdiv	r3, r2, r3
 8008978:	697a      	ldr	r2, [r7, #20]
 800897a:	fb03 f202 	mul.w	r2, r3, r2
 800897e:	88bb      	ldrh	r3, [r7, #4]
 8008980:	4413      	add	r3, r2
    int32_t intermediate =
 8008982:	330c      	adds	r3, #12
 8008984:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 8008986:	68bb      	ldr	r3, [r7, #8]
 8008988:	2b06      	cmp	r3, #6
 800898a:	d802      	bhi.n	8008992 <RadioGetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 800898c:	69bb      	ldr	r3, [r7, #24]
 800898e:	3302      	adds	r3, #2
 8008990:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 8008992:	69bb      	ldr	r3, [r7, #24]
 8008994:	009b      	lsls	r3, r3, #2
 8008996:	1c5a      	adds	r2, r3, #1
 8008998:	68bb      	ldr	r3, [r7, #8]
 800899a:	3b02      	subs	r3, #2
 800899c:	fa02 f303 	lsl.w	r3, r2, r3
}
 80089a0:	4618      	mov	r0, r3
 80089a2:	372c      	adds	r7, #44	; 0x2c
 80089a4:	46bd      	mov	sp, r7
 80089a6:	bc80      	pop	{r7}
 80089a8:	4770      	bx	lr
	...

080089ac <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 80089ac:	b580      	push	{r7, lr}
 80089ae:	b08a      	sub	sp, #40	; 0x28
 80089b0:	af04      	add	r7, sp, #16
 80089b2:	60b9      	str	r1, [r7, #8]
 80089b4:	607a      	str	r2, [r7, #4]
 80089b6:	461a      	mov	r2, r3
 80089b8:	4603      	mov	r3, r0
 80089ba:	73fb      	strb	r3, [r7, #15]
 80089bc:	4613      	mov	r3, r2
 80089be:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 80089c0:	2300      	movs	r3, #0
 80089c2:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 80089c4:	2301      	movs	r3, #1
 80089c6:	613b      	str	r3, [r7, #16]

    switch( modem )
 80089c8:	7bfb      	ldrb	r3, [r7, #15]
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d002      	beq.n	80089d4 <RadioTimeOnAir+0x28>
 80089ce:	2b01      	cmp	r3, #1
 80089d0:	d017      	beq.n	8008a02 <RadioTimeOnAir+0x56>
                                                                  fixLen, payloadLen, crcOn );
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
        }
        break;
    default:
        break;
 80089d2:	e035      	b.n	8008a40 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 80089d4:	f897 0024 	ldrb.w	r0, [r7, #36]	; 0x24
 80089d8:	8c3a      	ldrh	r2, [r7, #32]
 80089da:	7bb9      	ldrb	r1, [r7, #14]
 80089dc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80089e0:	9301      	str	r3, [sp, #4]
 80089e2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80089e6:	9300      	str	r3, [sp, #0]
 80089e8:	4603      	mov	r3, r0
 80089ea:	6878      	ldr	r0, [r7, #4]
 80089ec:	f7ff ff32 	bl	8008854 <RadioGetGfskTimeOnAirNumerator>
 80089f0:	4603      	mov	r3, r0
 80089f2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80089f6:	fb02 f303 	mul.w	r3, r2, r3
 80089fa:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	613b      	str	r3, [r7, #16]
        break;
 8008a00:	e01e      	b.n	8008a40 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 8008a02:	8c39      	ldrh	r1, [r7, #32]
 8008a04:	7bba      	ldrb	r2, [r7, #14]
 8008a06:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008a0a:	9302      	str	r3, [sp, #8]
 8008a0c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008a10:	9301      	str	r3, [sp, #4]
 8008a12:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008a16:	9300      	str	r3, [sp, #0]
 8008a18:	460b      	mov	r3, r1
 8008a1a:	6879      	ldr	r1, [r7, #4]
 8008a1c:	68b8      	ldr	r0, [r7, #8]
 8008a1e:	f7ff ff43 	bl	80088a8 <RadioGetLoRaTimeOnAirNumerator>
 8008a22:	4603      	mov	r3, r0
 8008a24:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008a28:	fb02 f303 	mul.w	r3, r2, r3
 8008a2c:	617b      	str	r3, [r7, #20]
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 8008a2e:	4a0a      	ldr	r2, [pc, #40]	; (8008a58 <RadioTimeOnAir+0xac>)
 8008a30:	68bb      	ldr	r3, [r7, #8]
 8008a32:	4413      	add	r3, r2
 8008a34:	781b      	ldrb	r3, [r3, #0]
 8008a36:	4618      	mov	r0, r3
 8008a38:	f7ff feb6 	bl	80087a8 <RadioGetLoRaBandwidthInHz>
 8008a3c:	6138      	str	r0, [r7, #16]
        break;
 8008a3e:	bf00      	nop
    }
    // Perform integral ceil()
    return DIVC( numerator, denominator );
 8008a40:	697a      	ldr	r2, [r7, #20]
 8008a42:	693b      	ldr	r3, [r7, #16]
 8008a44:	4413      	add	r3, r2
 8008a46:	1e5a      	subs	r2, r3, #1
 8008a48:	693b      	ldr	r3, [r7, #16]
 8008a4a:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8008a4e:	4618      	mov	r0, r3
 8008a50:	3718      	adds	r7, #24
 8008a52:	46bd      	mov	sp, r7
 8008a54:	bd80      	pop	{r7, pc}
 8008a56:	bf00      	nop
 8008a58:	0800cc9c 	.word	0x0800cc9c

08008a5c <RadioSend>:

static radio_status_t RadioSend( uint8_t *buffer, uint8_t size )
{
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	b084      	sub	sp, #16
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	6078      	str	r0, [r7, #4]
 8008a64:	460b      	mov	r3, r1
 8008a66:	70fb      	strb	r3, [r7, #3]
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 8008a68:	2300      	movs	r3, #0
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	f240 2101 	movw	r1, #513	; 0x201
 8008a70:	f240 2001 	movw	r0, #513	; 0x201
 8008a74:	f001 fd2c 	bl	800a4d0 <SUBGRF_SetDioIrqParams>

    /* Set DBG pin */
    DBG_GPIO_RADIO_TX( SET );

    /* Set RF switch */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8008a78:	4b70      	ldr	r3, [pc, #448]	; (8008c3c <RadioSend+0x1e0>)
 8008a7a:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8008a7e:	2101      	movs	r1, #1
 8008a80:	4618      	mov	r0, r3
 8008a82:	f002 f9c9 	bl	800ae18 <SUBGRF_SetSwitch>
    /* WORKAROUND - Modulation Quality with 500 kHz LoRaTM Bandwidth*/
    /* RegTxModulation = @address 0x0889 */
    if( ( SubgRf.Modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 8008a86:	4b6d      	ldr	r3, [pc, #436]	; (8008c3c <RadioSend+0x1e0>)
 8008a88:	781b      	ldrb	r3, [r3, #0]
 8008a8a:	2b01      	cmp	r3, #1
 8008a8c:	d112      	bne.n	8008ab4 <RadioSend+0x58>
 8008a8e:	4b6b      	ldr	r3, [pc, #428]	; (8008c3c <RadioSend+0x1e0>)
 8008a90:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008a94:	2b06      	cmp	r3, #6
 8008a96:	d10d      	bne.n	8008ab4 <RadioSend+0x58>
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 8008a98:	f640 0089 	movw	r0, #2185	; 0x889
 8008a9c:	f002 f8dc 	bl	800ac58 <SUBGRF_ReadRegister>
 8008aa0:	4603      	mov	r3, r0
 8008aa2:	f023 0304 	bic.w	r3, r3, #4
 8008aa6:	b2db      	uxtb	r3, r3
 8008aa8:	4619      	mov	r1, r3
 8008aaa:	f640 0089 	movw	r0, #2185	; 0x889
 8008aae:	f002 f8bf 	bl	800ac30 <SUBGRF_WriteRegister>
 8008ab2:	e00c      	b.n	8008ace <RadioSend+0x72>
    }
    else
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 8008ab4:	f640 0089 	movw	r0, #2185	; 0x889
 8008ab8:	f002 f8ce 	bl	800ac58 <SUBGRF_ReadRegister>
 8008abc:	4603      	mov	r3, r0
 8008abe:	f043 0304 	orr.w	r3, r3, #4
 8008ac2:	b2db      	uxtb	r3, r3
 8008ac4:	4619      	mov	r1, r3
 8008ac6:	f640 0089 	movw	r0, #2185	; 0x889
 8008aca:	f002 f8b1 	bl	800ac30 <SUBGRF_WriteRegister>
    }
    else
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    {
        /* WORKAROUND END */
        switch( SubgRf.Modem )
 8008ace:	4b5b      	ldr	r3, [pc, #364]	; (8008c3c <RadioSend+0x1e0>)
 8008ad0:	781b      	ldrb	r3, [r3, #0]
 8008ad2:	2b04      	cmp	r3, #4
 8008ad4:	f200 80a2 	bhi.w	8008c1c <RadioSend+0x1c0>
 8008ad8:	a201      	add	r2, pc, #4	; (adr r2, 8008ae0 <RadioSend+0x84>)
 8008ada:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ade:	bf00      	nop
 8008ae0:	08008b0f 	.word	0x08008b0f
 8008ae4:	08008af5 	.word	0x08008af5
 8008ae8:	08008b0f 	.word	0x08008b0f
 8008aec:	08008b65 	.word	0x08008b65
 8008af0:	08008b85 	.word	0x08008b85
        {
        case MODEM_LORA:
        {
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 8008af4:	4a51      	ldr	r2, [pc, #324]	; (8008c3c <RadioSend+0x1e0>)
 8008af6:	78fb      	ldrb	r3, [r7, #3]
 8008af8:	77d3      	strb	r3, [r2, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008afa:	4851      	ldr	r0, [pc, #324]	; (8008c40 <RadioSend+0x1e4>)
 8008afc:	f001 ff50 	bl	800a9a0 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8008b00:	78fb      	ldrb	r3, [r7, #3]
 8008b02:	2200      	movs	r2, #0
 8008b04:	4619      	mov	r1, r3
 8008b06:	6878      	ldr	r0, [r7, #4]
 8008b08:	f001 fa00 	bl	8009f0c <SUBGRF_SendPayload>
            break;
 8008b0c:	e087      	b.n	8008c1e <RadioSend+0x1c2>
        }
        case MODEM_MSK:
        case MODEM_FSK:
        {
            if ( 1UL == RFW_Is_Init( ) )
 8008b0e:	f002 fb7c 	bl	800b20a <RFW_Is_Init>
 8008b12:	4603      	mov	r3, r0
 8008b14:	2b01      	cmp	r3, #1
 8008b16:	d118      	bne.n	8008b4a <RadioSend+0xee>
            {
                uint8_t outsize;
                if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 8008b18:	f107 020d 	add.w	r2, r7, #13
 8008b1c:	78fb      	ldrb	r3, [r7, #3]
 8008b1e:	4619      	mov	r1, r3
 8008b20:	6878      	ldr	r0, [r7, #4]
 8008b22:	f002 fb8a 	bl	800b23a <RFW_TransmitInit>
 8008b26:	4603      	mov	r3, r0
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d10c      	bne.n	8008b46 <RadioSend+0xea>
                {
                    SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 8008b2c:	7b7a      	ldrb	r2, [r7, #13]
 8008b2e:	4b43      	ldr	r3, [pc, #268]	; (8008c3c <RadioSend+0x1e0>)
 8008b30:	759a      	strb	r2, [r3, #22]
                    SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008b32:	4843      	ldr	r0, [pc, #268]	; (8008c40 <RadioSend+0x1e4>)
 8008b34:	f001 ff34 	bl	800a9a0 <SUBGRF_SetPacketParams>
                    SUBGRF_SendPayload( buffer, outsize, 0 );
 8008b38:	7b7b      	ldrb	r3, [r7, #13]
 8008b3a:	2200      	movs	r2, #0
 8008b3c:	4619      	mov	r1, r3
 8008b3e:	6878      	ldr	r0, [r7, #4]
 8008b40:	f001 f9e4 	bl	8009f0c <SUBGRF_SendPayload>
            {
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
                SUBGRF_SendPayload( buffer, size, 0 );
            }
            break;
 8008b44:	e06b      	b.n	8008c1e <RadioSend+0x1c2>
                    return RADIO_STATUS_ERROR;
 8008b46:	2303      	movs	r3, #3
 8008b48:	e073      	b.n	8008c32 <RadioSend+0x1d6>
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 8008b4a:	4a3c      	ldr	r2, [pc, #240]	; (8008c3c <RadioSend+0x1e0>)
 8008b4c:	78fb      	ldrb	r3, [r7, #3]
 8008b4e:	7593      	strb	r3, [r2, #22]
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008b50:	483b      	ldr	r0, [pc, #236]	; (8008c40 <RadioSend+0x1e4>)
 8008b52:	f001 ff25 	bl	800a9a0 <SUBGRF_SetPacketParams>
                SUBGRF_SendPayload( buffer, size, 0 );
 8008b56:	78fb      	ldrb	r3, [r7, #3]
 8008b58:	2200      	movs	r2, #0
 8008b5a:	4619      	mov	r1, r3
 8008b5c:	6878      	ldr	r0, [r7, #4]
 8008b5e:	f001 f9d5 	bl	8009f0c <SUBGRF_SendPayload>
            break;
 8008b62:	e05c      	b.n	8008c1e <RadioSend+0x1c2>
        }
        case MODEM_BPSK:
        {
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8008b64:	4b35      	ldr	r3, [pc, #212]	; (8008c3c <RadioSend+0x1e0>)
 8008b66:	2202      	movs	r2, #2
 8008b68:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 8008b6a:	4a34      	ldr	r2, [pc, #208]	; (8008c3c <RadioSend+0x1e0>)
 8008b6c:	78fb      	ldrb	r3, [r7, #3]
 8008b6e:	7693      	strb	r3, [r2, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008b70:	4833      	ldr	r0, [pc, #204]	; (8008c40 <RadioSend+0x1e4>)
 8008b72:	f001 ff15 	bl	800a9a0 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8008b76:	78fb      	ldrb	r3, [r7, #3]
 8008b78:	2200      	movs	r2, #0
 8008b7a:	4619      	mov	r1, r3
 8008b7c:	6878      	ldr	r0, [r7, #4]
 8008b7e:	f001 f9c5 	bl	8009f0c <SUBGRF_SendPayload>
            break;
 8008b82:	e04c      	b.n	8008c1e <RadioSend+0x1c2>
        case MODEM_SIGFOX_TX:
        {
            /* from bpsk to dbpsk */
            /* first 1 bit duplicated */
            /* RadioBuffer is 1 bytes more */
            payload_integration( RadioBuffer, buffer, size );
 8008b84:	78fb      	ldrb	r3, [r7, #3]
 8008b86:	461a      	mov	r2, r3
 8008b88:	6879      	ldr	r1, [r7, #4]
 8008b8a:	482e      	ldr	r0, [pc, #184]	; (8008c44 <RadioSend+0x1e8>)
 8008b8c:	f000 fc98 	bl	80094c0 <payload_integration>

            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8008b90:	4b2a      	ldr	r3, [pc, #168]	; (8008c3c <RadioSend+0x1e0>)
 8008b92:	2202      	movs	r2, #2
 8008b94:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 8008b96:	78fb      	ldrb	r3, [r7, #3]
 8008b98:	3301      	adds	r3, #1
 8008b9a:	b2da      	uxtb	r2, r3
 8008b9c:	4b27      	ldr	r3, [pc, #156]	; (8008c3c <RadioSend+0x1e0>)
 8008b9e:	769a      	strb	r2, [r3, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008ba0:	4827      	ldr	r0, [pc, #156]	; (8008c40 <RadioSend+0x1e4>)
 8008ba2:	f001 fefd 	bl	800a9a0 <SUBGRF_SetPacketParams>

            RadioWrite( SUBGHZ_RAM_RAMPUPL, 0 ); // clean start-up LSB
 8008ba6:	2100      	movs	r1, #0
 8008ba8:	20f1      	movs	r0, #241	; 0xf1
 8008baa:	f000 f964 	bl	8008e76 <RadioWrite>
            RadioWrite( SUBGHZ_RAM_RAMPUPH, 0 ); // clean start-up MSB
 8008bae:	2100      	movs	r1, #0
 8008bb0:	20f0      	movs	r0, #240	; 0xf0
 8008bb2:	f000 f960 	bl	8008e76 <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 8008bb6:	4b21      	ldr	r3, [pc, #132]	; (8008c3c <RadioSend+0x1e0>)
 8008bb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008bba:	2b64      	cmp	r3, #100	; 0x64
 8008bbc:	d108      	bne.n	8008bd0 <RadioSend+0x174>
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0x70 ); // clean end of frame LSB
 8008bbe:	2170      	movs	r1, #112	; 0x70
 8008bc0:	20f3      	movs	r0, #243	; 0xf3
 8008bc2:	f000 f958 	bl	8008e76 <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x1D ); // clean end of frame MSB
 8008bc6:	211d      	movs	r1, #29
 8008bc8:	20f2      	movs	r0, #242	; 0xf2
 8008bca:	f000 f954 	bl	8008e76 <RadioWrite>
 8008bce:	e007      	b.n	8008be0 <RadioSend+0x184>
            }
            else // 600 bps
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0xE1 ); // clean end of frame LSB
 8008bd0:	21e1      	movs	r1, #225	; 0xe1
 8008bd2:	20f3      	movs	r0, #243	; 0xf3
 8008bd4:	f000 f94f 	bl	8008e76 <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x04 ); // clean end of frame MSB
 8008bd8:	2104      	movs	r1, #4
 8008bda:	20f2      	movs	r0, #242	; 0xf2
 8008bdc:	f000 f94b 	bl	8008e76 <RadioWrite>
            }

            uint16_t bitNum = ( size * 8 ) + 2;
 8008be0:	78fb      	ldrb	r3, [r7, #3]
 8008be2:	b29b      	uxth	r3, r3
 8008be4:	00db      	lsls	r3, r3, #3
 8008be6:	b29b      	uxth	r3, r3
 8008be8:	3302      	adds	r3, #2
 8008bea:	81fb      	strh	r3, [r7, #14]
            RadioWrite( SUBGHZ_RAM_FRAMELIMH, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 8008bec:	89fb      	ldrh	r3, [r7, #14]
 8008bee:	0a1b      	lsrs	r3, r3, #8
 8008bf0:	b29b      	uxth	r3, r3
 8008bf2:	b2db      	uxtb	r3, r3
 8008bf4:	4619      	mov	r1, r3
 8008bf6:	20f4      	movs	r0, #244	; 0xf4
 8008bf8:	f000 f93d 	bl	8008e76 <RadioWrite>
            RadioWrite( SUBGHZ_RAM_FRAMELIML, bitNum & 0x00FF );             // limit frame
 8008bfc:	89fb      	ldrh	r3, [r7, #14]
 8008bfe:	b2db      	uxtb	r3, r3
 8008c00:	4619      	mov	r1, r3
 8008c02:	20f5      	movs	r0, #245	; 0xf5
 8008c04:	f000 f937 	bl	8008e76 <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size + 1, 0xFFFFFF );
 8008c08:	78fb      	ldrb	r3, [r7, #3]
 8008c0a:	3301      	adds	r3, #1
 8008c0c:	b2db      	uxtb	r3, r3
 8008c0e:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8008c12:	4619      	mov	r1, r3
 8008c14:	480b      	ldr	r0, [pc, #44]	; (8008c44 <RadioSend+0x1e8>)
 8008c16:	f001 f979 	bl	8009f0c <SUBGRF_SendPayload>
            break;
 8008c1a:	e000      	b.n	8008c1e <RadioSend+0x1c2>
        }
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 8008c1c:	bf00      	nop
        }

        TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 8008c1e:	4b07      	ldr	r3, [pc, #28]	; (8008c3c <RadioSend+0x1e0>)
 8008c20:	685b      	ldr	r3, [r3, #4]
 8008c22:	4619      	mov	r1, r3
 8008c24:	4808      	ldr	r0, [pc, #32]	; (8008c48 <RadioSend+0x1ec>)
 8008c26:	f002 fdbb 	bl	800b7a0 <UTIL_TIMER_SetPeriod>
        TimerStart( &TxTimeoutTimer );
 8008c2a:	4807      	ldr	r0, [pc, #28]	; (8008c48 <RadioSend+0x1ec>)
 8008c2c:	f002 fcda 	bl	800b5e4 <UTIL_TIMER_Start>
    }

    return RADIO_STATUS_OK;
 8008c30:	2300      	movs	r3, #0
}
 8008c32:	4618      	mov	r0, r3
 8008c34:	3710      	adds	r7, #16
 8008c36:	46bd      	mov	sp, r7
 8008c38:	bd80      	pop	{r7, pc}
 8008c3a:	bf00      	nop
 8008c3c:	20000a2c 	.word	0x20000a2c
 8008c40:	20000a3a 	.word	0x20000a3a
 8008c44:	20000928 	.word	0x20000928
 8008c48:	20000a88 	.word	0x20000a88

08008c4c <RadioSleep>:

static void RadioSleep( void )
{
 8008c4c:	b580      	push	{r7, lr}
 8008c4e:	b082      	sub	sp, #8
 8008c50:	af00      	add	r7, sp, #0
    SleepParams_t params = { 0 };
 8008c52:	2300      	movs	r3, #0
 8008c54:	713b      	strb	r3, [r7, #4]

    params.Fields.WarmStart = 1;
 8008c56:	793b      	ldrb	r3, [r7, #4]
 8008c58:	f043 0304 	orr.w	r3, r3, #4
 8008c5c:	713b      	strb	r3, [r7, #4]
    SUBGRF_SetSleep( params );
 8008c5e:	7938      	ldrb	r0, [r7, #4]
 8008c60:	f001 fa30 	bl	800a0c4 <SUBGRF_SetSleep>

    RADIO_DELAY_MS( 2 );
 8008c64:	2002      	movs	r0, #2
 8008c66:	f7fa fa13 	bl	8003090 <HAL_Delay>
}
 8008c6a:	bf00      	nop
 8008c6c:	3708      	adds	r7, #8
 8008c6e:	46bd      	mov	sp, r7
 8008c70:	bd80      	pop	{r7, pc}

08008c72 <RadioStandby>:

static void RadioStandby( void )
{
 8008c72:	b580      	push	{r7, lr}
 8008c74:	af00      	add	r7, sp, #0
    SUBGRF_SetStandby( STDBY_RC );
 8008c76:	2000      	movs	r0, #0
 8008c78:	f001 fa56 	bl	800a128 <SUBGRF_SetStandby>
}
 8008c7c:	bf00      	nop
 8008c7e:	bd80      	pop	{r7, pc}

08008c80 <RadioRx>:

static void RadioRx( uint32_t timeout )
{
 8008c80:	b580      	push	{r7, lr}
 8008c82:	b082      	sub	sp, #8
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init( ) )
 8008c88:	f002 fabf 	bl	800b20a <RFW_Is_Init>
 8008c8c:	4603      	mov	r3, r0
 8008c8e:	2b01      	cmp	r3, #1
 8008c90:	d102      	bne.n	8008c98 <RadioRx+0x18>
    {
        RFW_ReceiveInit( );
 8008c92:	f002 fae2 	bl	800b25a <RFW_ReceiveInit>
 8008c96:	e007      	b.n	8008ca8 <RadioRx+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8008c98:	2300      	movs	r3, #0
 8008c9a:	2200      	movs	r2, #0
 8008c9c:	f240 2162 	movw	r1, #610	; 0x262
 8008ca0:	f240 2062 	movw	r0, #610	; 0x262
 8008ca4:	f001 fc14 	bl	800a4d0 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }

    if( timeout != 0 )
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d006      	beq.n	8008cbc <RadioRx+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 8008cae:	6879      	ldr	r1, [r7, #4]
 8008cb0:	4811      	ldr	r0, [pc, #68]	; (8008cf8 <RadioRx+0x78>)
 8008cb2:	f002 fd75 	bl	800b7a0 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8008cb6:	4810      	ldr	r0, [pc, #64]	; (8008cf8 <RadioRx+0x78>)
 8008cb8:	f002 fc94 	bl	800b5e4 <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8008cbc:	4b0f      	ldr	r3, [pc, #60]	; (8008cfc <RadioRx+0x7c>)
 8008cbe:	2200      	movs	r2, #0
 8008cc0:	659a      	str	r2, [r3, #88]	; 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8008cc2:	4b0e      	ldr	r3, [pc, #56]	; (8008cfc <RadioRx+0x7c>)
 8008cc4:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8008cc8:	2100      	movs	r1, #0
 8008cca:	4618      	mov	r0, r3
 8008ccc:	f002 f8a4 	bl	800ae18 <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 8008cd0:	4b0a      	ldr	r3, [pc, #40]	; (8008cfc <RadioRx+0x7c>)
 8008cd2:	785b      	ldrb	r3, [r3, #1]
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d004      	beq.n	8008ce2 <RadioRx+0x62>
    {
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8008cd8:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8008cdc:	f001 fa60 	bl	800a1a0 <SUBGRF_SetRx>
    }
    else
    {
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
    }
}
 8008ce0:	e005      	b.n	8008cee <RadioRx+0x6e>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 8008ce2:	4b06      	ldr	r3, [pc, #24]	; (8008cfc <RadioRx+0x7c>)
 8008ce4:	689b      	ldr	r3, [r3, #8]
 8008ce6:	019b      	lsls	r3, r3, #6
 8008ce8:	4618      	mov	r0, r3
 8008cea:	f001 fa59 	bl	800a1a0 <SUBGRF_SetRx>
}
 8008cee:	bf00      	nop
 8008cf0:	3708      	adds	r7, #8
 8008cf2:	46bd      	mov	sp, r7
 8008cf4:	bd80      	pop	{r7, pc}
 8008cf6:	bf00      	nop
 8008cf8:	20000aa0 	.word	0x20000aa0
 8008cfc:	20000a2c 	.word	0x20000a2c

08008d00 <RadioRxBoosted>:

static void RadioRxBoosted( uint32_t timeout )
{
 8008d00:	b580      	push	{r7, lr}
 8008d02:	b082      	sub	sp, #8
 8008d04:	af00      	add	r7, sp, #0
 8008d06:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init() )
 8008d08:	f002 fa7f 	bl	800b20a <RFW_Is_Init>
 8008d0c:	4603      	mov	r3, r0
 8008d0e:	2b01      	cmp	r3, #1
 8008d10:	d102      	bne.n	8008d18 <RadioRxBoosted+0x18>
    {
        RFW_ReceiveInit();
 8008d12:	f002 faa2 	bl	800b25a <RFW_ReceiveInit>
 8008d16:	e007      	b.n	8008d28 <RadioRxBoosted+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8008d18:	2300      	movs	r3, #0
 8008d1a:	2200      	movs	r2, #0
 8008d1c:	f240 2162 	movw	r1, #610	; 0x262
 8008d20:	f240 2062 	movw	r0, #610	; 0x262
 8008d24:	f001 fbd4 	bl	800a4d0 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }
    if( timeout != 0 )
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d006      	beq.n	8008d3c <RadioRxBoosted+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 8008d2e:	6879      	ldr	r1, [r7, #4]
 8008d30:	4811      	ldr	r0, [pc, #68]	; (8008d78 <RadioRxBoosted+0x78>)
 8008d32:	f002 fd35 	bl	800b7a0 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8008d36:	4810      	ldr	r0, [pc, #64]	; (8008d78 <RadioRxBoosted+0x78>)
 8008d38:	f002 fc54 	bl	800b5e4 <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8008d3c:	4b0f      	ldr	r3, [pc, #60]	; (8008d7c <RadioRxBoosted+0x7c>)
 8008d3e:	2200      	movs	r2, #0
 8008d40:	659a      	str	r2, [r3, #88]	; 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8008d42:	4b0e      	ldr	r3, [pc, #56]	; (8008d7c <RadioRxBoosted+0x7c>)
 8008d44:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8008d48:	2100      	movs	r1, #0
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	f002 f864 	bl	800ae18 <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 8008d50:	4b0a      	ldr	r3, [pc, #40]	; (8008d7c <RadioRxBoosted+0x7c>)
 8008d52:	785b      	ldrb	r3, [r3, #1]
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d004      	beq.n	8008d62 <RadioRxBoosted+0x62>
    {
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 8008d58:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8008d5c:	f001 fa40 	bl	800a1e0 <SUBGRF_SetRxBoosted>
    }
    else
    {
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
    }
}
 8008d60:	e005      	b.n	8008d6e <RadioRxBoosted+0x6e>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 8008d62:	4b06      	ldr	r3, [pc, #24]	; (8008d7c <RadioRxBoosted+0x7c>)
 8008d64:	689b      	ldr	r3, [r3, #8]
 8008d66:	019b      	lsls	r3, r3, #6
 8008d68:	4618      	mov	r0, r3
 8008d6a:	f001 fa39 	bl	800a1e0 <SUBGRF_SetRxBoosted>
}
 8008d6e:	bf00      	nop
 8008d70:	3708      	adds	r7, #8
 8008d72:	46bd      	mov	sp, r7
 8008d74:	bd80      	pop	{r7, pc}
 8008d76:	bf00      	nop
 8008d78:	20000aa0 	.word	0x20000aa0
 8008d7c:	20000a2c 	.word	0x20000a2c

08008d80 <RadioSetRxDutyCycle>:

static void RadioSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 8008d80:	b580      	push	{r7, lr}
 8008d82:	b082      	sub	sp, #8
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	6078      	str	r0, [r7, #4]
 8008d88:	6039      	str	r1, [r7, #0]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 2 * rxTime + sleepTime;
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	005a      	lsls	r2, r3, #1
 8008d8e:	683b      	ldr	r3, [r7, #0]
 8008d90:	4413      	add	r3, r2
 8008d92:	4a0c      	ldr	r2, [pc, #48]	; (8008dc4 <RadioSetRxDutyCycle+0x44>)
 8008d94:	6593      	str	r3, [r2, #88]	; 0x58
    /*Enable also the IRQ_PREAMBLE_DETECTED*/
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8008d96:	2300      	movs	r3, #0
 8008d98:	2200      	movs	r2, #0
 8008d9a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8008d9e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8008da2:	f001 fb95 	bl	800a4d0 <SUBGRF_SetDioIrqParams>
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8008da6:	4b07      	ldr	r3, [pc, #28]	; (8008dc4 <RadioSetRxDutyCycle+0x44>)
 8008da8:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8008dac:	2100      	movs	r1, #0
 8008dae:	4618      	mov	r0, r3
 8008db0:	f002 f832 	bl	800ae18 <SUBGRF_SetSwitch>
    /* Start Rx DutyCycle*/
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 8008db4:	6839      	ldr	r1, [r7, #0]
 8008db6:	6878      	ldr	r0, [r7, #4]
 8008db8:	f001 fa36 	bl	800a228 <SUBGRF_SetRxDutyCycle>
}
 8008dbc:	bf00      	nop
 8008dbe:	3708      	adds	r7, #8
 8008dc0:	46bd      	mov	sp, r7
 8008dc2:	bd80      	pop	{r7, pc}
 8008dc4:	20000a2c 	.word	0x20000a2c

08008dc8 <RadioStartCad>:

static void RadioStartCad( void )
{
 8008dc8:	b580      	push	{r7, lr}
 8008dca:	af00      	add	r7, sp, #0
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8008dcc:	4b09      	ldr	r3, [pc, #36]	; (8008df4 <RadioStartCad+0x2c>)
 8008dce:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8008dd2:	2100      	movs	r1, #0
 8008dd4:	4618      	mov	r0, r3
 8008dd6:	f002 f81f 	bl	800ae18 <SUBGRF_SetSwitch>

    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 8008dda:	2300      	movs	r3, #0
 8008ddc:	2200      	movs	r2, #0
 8008dde:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8008de2:	f44f 70c0 	mov.w	r0, #384	; 0x180
 8008de6:	f001 fb73 	bl	800a4d0 <SUBGRF_SetDioIrqParams>
                            IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );
    SUBGRF_SetCad( );
 8008dea:	f001 fa49 	bl	800a280 <SUBGRF_SetCad>
}
 8008dee:	bf00      	nop
 8008df0:	bd80      	pop	{r7, pc}
 8008df2:	bf00      	nop
 8008df4:	20000a2c 	.word	0x20000a2c

08008df8 <RadioSetTxContinuousWave>:

static void RadioSetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 8008df8:	b580      	push	{r7, lr}
 8008dfa:	b084      	sub	sp, #16
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	6078      	str	r0, [r7, #4]
 8008e00:	460b      	mov	r3, r1
 8008e02:	70fb      	strb	r3, [r7, #3]
 8008e04:	4613      	mov	r3, r2
 8008e06:	803b      	strh	r3, [r7, #0]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    uint32_t timeout = ( uint32_t )time * 1000;
 8008e08:	883b      	ldrh	r3, [r7, #0]
 8008e0a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008e0e:	fb02 f303 	mul.w	r3, r2, r3
 8008e12:	60fb      	str	r3, [r7, #12]
    uint8_t antswitchpow;

    SUBGRF_SetRfFrequency( freq );
 8008e14:	6878      	ldr	r0, [r7, #4]
 8008e16:	f001 fbb7 	bl	800a588 <SUBGRF_SetRfFrequency>

    antswitchpow = SUBGRF_SetRfTxPower( power );
 8008e1a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008e1e:	4618      	mov	r0, r3
 8008e20:	f002 f822 	bl	800ae68 <SUBGRF_SetRfTxPower>
 8008e24:	4603      	mov	r3, r0
 8008e26:	72fb      	strb	r3, [r7, #11]

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8008e28:	210e      	movs	r1, #14
 8008e2a:	f640 101f 	movw	r0, #2335	; 0x91f
 8008e2e:	f001 feff 	bl	800ac30 <SUBGRF_WriteRegister>

    /* Set RF switch */
    SUBGRF_SetSwitch( antswitchpow, RFSWITCH_TX );
 8008e32:	7afb      	ldrb	r3, [r7, #11]
 8008e34:	2101      	movs	r1, #1
 8008e36:	4618      	mov	r0, r3
 8008e38:	f001 ffee 	bl	800ae18 <SUBGRF_SetSwitch>

    SUBGRF_SetTxContinuousWave( );
 8008e3c:	f001 fa2e 	bl	800a29c <SUBGRF_SetTxContinuousWave>

    TimerSetValue( &TxTimeoutTimer, timeout );
 8008e40:	68f9      	ldr	r1, [r7, #12]
 8008e42:	4805      	ldr	r0, [pc, #20]	; (8008e58 <RadioSetTxContinuousWave+0x60>)
 8008e44:	f002 fcac 	bl	800b7a0 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 8008e48:	4803      	ldr	r0, [pc, #12]	; (8008e58 <RadioSetTxContinuousWave+0x60>)
 8008e4a:	f002 fbcb 	bl	800b5e4 <UTIL_TIMER_Start>
}
 8008e4e:	bf00      	nop
 8008e50:	3710      	adds	r7, #16
 8008e52:	46bd      	mov	sp, r7
 8008e54:	bd80      	pop	{r7, pc}
 8008e56:	bf00      	nop
 8008e58:	20000a88 	.word	0x20000a88

08008e5c <RadioRssi>:

static int16_t RadioRssi( RadioModems_t modem )
{
 8008e5c:	b580      	push	{r7, lr}
 8008e5e:	b082      	sub	sp, #8
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	4603      	mov	r3, r0
 8008e64:	71fb      	strb	r3, [r7, #7]
    return SUBGRF_GetRssiInst( );
 8008e66:	f001 fe50 	bl	800ab0a <SUBGRF_GetRssiInst>
 8008e6a:	4603      	mov	r3, r0
 8008e6c:	b21b      	sxth	r3, r3
}
 8008e6e:	4618      	mov	r0, r3
 8008e70:	3708      	adds	r7, #8
 8008e72:	46bd      	mov	sp, r7
 8008e74:	bd80      	pop	{r7, pc}

08008e76 <RadioWrite>:

static void RadioWrite( uint16_t addr, uint8_t data )
{
 8008e76:	b580      	push	{r7, lr}
 8008e78:	b082      	sub	sp, #8
 8008e7a:	af00      	add	r7, sp, #0
 8008e7c:	4603      	mov	r3, r0
 8008e7e:	460a      	mov	r2, r1
 8008e80:	80fb      	strh	r3, [r7, #6]
 8008e82:	4613      	mov	r3, r2
 8008e84:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegister( addr, data );
 8008e86:	797a      	ldrb	r2, [r7, #5]
 8008e88:	88fb      	ldrh	r3, [r7, #6]
 8008e8a:	4611      	mov	r1, r2
 8008e8c:	4618      	mov	r0, r3
 8008e8e:	f001 fecf 	bl	800ac30 <SUBGRF_WriteRegister>
}
 8008e92:	bf00      	nop
 8008e94:	3708      	adds	r7, #8
 8008e96:	46bd      	mov	sp, r7
 8008e98:	bd80      	pop	{r7, pc}

08008e9a <RadioRead>:

static uint8_t RadioRead( uint16_t addr )
{
 8008e9a:	b580      	push	{r7, lr}
 8008e9c:	b082      	sub	sp, #8
 8008e9e:	af00      	add	r7, sp, #0
 8008ea0:	4603      	mov	r3, r0
 8008ea2:	80fb      	strh	r3, [r7, #6]
    return SUBGRF_ReadRegister( addr );
 8008ea4:	88fb      	ldrh	r3, [r7, #6]
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	f001 fed6 	bl	800ac58 <SUBGRF_ReadRegister>
 8008eac:	4603      	mov	r3, r0
}
 8008eae:	4618      	mov	r0, r3
 8008eb0:	3708      	adds	r7, #8
 8008eb2:	46bd      	mov	sp, r7
 8008eb4:	bd80      	pop	{r7, pc}

08008eb6 <RadioWriteRegisters>:

static void RadioWriteRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8008eb6:	b580      	push	{r7, lr}
 8008eb8:	b082      	sub	sp, #8
 8008eba:	af00      	add	r7, sp, #0
 8008ebc:	4603      	mov	r3, r0
 8008ebe:	6039      	str	r1, [r7, #0]
 8008ec0:	80fb      	strh	r3, [r7, #6]
 8008ec2:	4613      	mov	r3, r2
 8008ec4:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegisters( addr, buffer, size );
 8008ec6:	797b      	ldrb	r3, [r7, #5]
 8008ec8:	b29a      	uxth	r2, r3
 8008eca:	88fb      	ldrh	r3, [r7, #6]
 8008ecc:	6839      	ldr	r1, [r7, #0]
 8008ece:	4618      	mov	r0, r3
 8008ed0:	f001 fed6 	bl	800ac80 <SUBGRF_WriteRegisters>
}
 8008ed4:	bf00      	nop
 8008ed6:	3708      	adds	r7, #8
 8008ed8:	46bd      	mov	sp, r7
 8008eda:	bd80      	pop	{r7, pc}

08008edc <RadioReadRegisters>:

static void RadioReadRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8008edc:	b580      	push	{r7, lr}
 8008ede:	b082      	sub	sp, #8
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	4603      	mov	r3, r0
 8008ee4:	6039      	str	r1, [r7, #0]
 8008ee6:	80fb      	strh	r3, [r7, #6]
 8008ee8:	4613      	mov	r3, r2
 8008eea:	717b      	strb	r3, [r7, #5]
    SUBGRF_ReadRegisters( addr, buffer, size );
 8008eec:	797b      	ldrb	r3, [r7, #5]
 8008eee:	b29a      	uxth	r2, r3
 8008ef0:	88fb      	ldrh	r3, [r7, #6]
 8008ef2:	6839      	ldr	r1, [r7, #0]
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	f001 fee5 	bl	800acc4 <SUBGRF_ReadRegisters>
}
 8008efa:	bf00      	nop
 8008efc:	3708      	adds	r7, #8
 8008efe:	46bd      	mov	sp, r7
 8008f00:	bd80      	pop	{r7, pc}
	...

08008f04 <RadioSetMaxPayloadLength>:

static void RadioSetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 8008f04:	b580      	push	{r7, lr}
 8008f06:	b082      	sub	sp, #8
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	4603      	mov	r3, r0
 8008f0c:	460a      	mov	r2, r1
 8008f0e:	71fb      	strb	r3, [r7, #7]
 8008f10:	4613      	mov	r3, r2
 8008f12:	71bb      	strb	r3, [r7, #6]
    if( modem == MODEM_LORA )
 8008f14:	79fb      	ldrb	r3, [r7, #7]
 8008f16:	2b01      	cmp	r3, #1
 8008f18:	d10a      	bne.n	8008f30 <RadioSetMaxPayloadLength+0x2c>
    {
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 8008f1a:	4a0e      	ldr	r2, [pc, #56]	; (8008f54 <RadioSetMaxPayloadLength+0x50>)
 8008f1c:	79bb      	ldrb	r3, [r7, #6]
 8008f1e:	7013      	strb	r3, [r2, #0]
 8008f20:	4b0c      	ldr	r3, [pc, #48]	; (8008f54 <RadioSetMaxPayloadLength+0x50>)
 8008f22:	781a      	ldrb	r2, [r3, #0]
 8008f24:	4b0c      	ldr	r3, [pc, #48]	; (8008f58 <RadioSetMaxPayloadLength+0x54>)
 8008f26:	77da      	strb	r2, [r3, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008f28:	480c      	ldr	r0, [pc, #48]	; (8008f5c <RadioSetMaxPayloadLength+0x58>)
 8008f2a:	f001 fd39 	bl	800a9a0 <SUBGRF_SetPacketParams>
        {
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
        }
    }
}
 8008f2e:	e00d      	b.n	8008f4c <RadioSetMaxPayloadLength+0x48>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 8008f30:	4b09      	ldr	r3, [pc, #36]	; (8008f58 <RadioSetMaxPayloadLength+0x54>)
 8008f32:	7d5b      	ldrb	r3, [r3, #21]
 8008f34:	2b01      	cmp	r3, #1
 8008f36:	d109      	bne.n	8008f4c <RadioSetMaxPayloadLength+0x48>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 8008f38:	4a06      	ldr	r2, [pc, #24]	; (8008f54 <RadioSetMaxPayloadLength+0x50>)
 8008f3a:	79bb      	ldrb	r3, [r7, #6]
 8008f3c:	7013      	strb	r3, [r2, #0]
 8008f3e:	4b05      	ldr	r3, [pc, #20]	; (8008f54 <RadioSetMaxPayloadLength+0x50>)
 8008f40:	781a      	ldrb	r2, [r3, #0]
 8008f42:	4b05      	ldr	r3, [pc, #20]	; (8008f58 <RadioSetMaxPayloadLength+0x54>)
 8008f44:	759a      	strb	r2, [r3, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008f46:	4805      	ldr	r0, [pc, #20]	; (8008f5c <RadioSetMaxPayloadLength+0x58>)
 8008f48:	f001 fd2a 	bl	800a9a0 <SUBGRF_SetPacketParams>
}
 8008f4c:	bf00      	nop
 8008f4e:	3708      	adds	r7, #8
 8008f50:	46bd      	mov	sp, r7
 8008f52:	bd80      	pop	{r7, pc}
 8008f54:	20000015 	.word	0x20000015
 8008f58:	20000a2c 	.word	0x20000a2c
 8008f5c:	20000a3a 	.word	0x20000a3a

08008f60 <RadioSetPublicNetwork>:

static void RadioSetPublicNetwork( bool enable )
{
 8008f60:	b580      	push	{r7, lr}
 8008f62:	b082      	sub	sp, #8
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	4603      	mov	r3, r0
 8008f68:	71fb      	strb	r3, [r7, #7]
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 8008f6a:	4a13      	ldr	r2, [pc, #76]	; (8008fb8 <RadioSetPublicNetwork+0x58>)
 8008f6c:	79fb      	ldrb	r3, [r7, #7]
 8008f6e:	7313      	strb	r3, [r2, #12]
 8008f70:	4b11      	ldr	r3, [pc, #68]	; (8008fb8 <RadioSetPublicNetwork+0x58>)
 8008f72:	7b1a      	ldrb	r2, [r3, #12]
 8008f74:	4b10      	ldr	r3, [pc, #64]	; (8008fb8 <RadioSetPublicNetwork+0x58>)
 8008f76:	735a      	strb	r2, [r3, #13]

    RadioSetModem( MODEM_LORA );
 8008f78:	2001      	movs	r0, #1
 8008f7a:	f7ff f819 	bl	8007fb0 <RadioSetModem>
    if( enable == true )
 8008f7e:	79fb      	ldrb	r3, [r7, #7]
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d00a      	beq.n	8008f9a <RadioSetPublicNetwork+0x3a>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 8008f84:	2134      	movs	r1, #52	; 0x34
 8008f86:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 8008f8a:	f001 fe51 	bl	800ac30 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 8008f8e:	2144      	movs	r1, #68	; 0x44
 8008f90:	f240 7041 	movw	r0, #1857	; 0x741
 8008f94:	f001 fe4c 	bl	800ac30 <SUBGRF_WriteRegister>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
    }
}
 8008f98:	e009      	b.n	8008fae <RadioSetPublicNetwork+0x4e>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 8008f9a:	2114      	movs	r1, #20
 8008f9c:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 8008fa0:	f001 fe46 	bl	800ac30 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 8008fa4:	2124      	movs	r1, #36	; 0x24
 8008fa6:	f240 7041 	movw	r0, #1857	; 0x741
 8008faa:	f001 fe41 	bl	800ac30 <SUBGRF_WriteRegister>
}
 8008fae:	bf00      	nop
 8008fb0:	3708      	adds	r7, #8
 8008fb2:	46bd      	mov	sp, r7
 8008fb4:	bd80      	pop	{r7, pc}
 8008fb6:	bf00      	nop
 8008fb8:	20000a2c 	.word	0x20000a2c

08008fbc <RadioGetWakeupTime>:

static uint32_t RadioGetWakeupTime( void )
{
 8008fbc:	b580      	push	{r7, lr}
 8008fbe:	af00      	add	r7, sp, #0
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 8008fc0:	f001 ff86 	bl	800aed0 <SUBGRF_GetRadioWakeUpTime>
 8008fc4:	4603      	mov	r3, r0
 8008fc6:	3303      	adds	r3, #3
}
 8008fc8:	4618      	mov	r0, r3
 8008fca:	bd80      	pop	{r7, pc}

08008fcc <RadioOnTxTimeoutIrq>:

static void RadioOnTxTimeoutIrq( void *context )
{
 8008fcc:	b580      	push	{r7, lr}
 8008fce:	b082      	sub	sp, #8
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	6078      	str	r0, [r7, #4]
    RADIO_TX_TIMEOUT_PROCESS();
 8008fd4:	f000 f80e 	bl	8008ff4 <RadioOnTxTimeoutProcess>
}
 8008fd8:	bf00      	nop
 8008fda:	3708      	adds	r7, #8
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	bd80      	pop	{r7, pc}

08008fe0 <RadioOnRxTimeoutIrq>:

static void RadioOnRxTimeoutIrq( void *context )
{
 8008fe0:	b580      	push	{r7, lr}
 8008fe2:	b082      	sub	sp, #8
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	6078      	str	r0, [r7, #4]
    RADIO_RX_TIMEOUT_PROCESS();
 8008fe8:	f000 f818 	bl	800901c <RadioOnRxTimeoutProcess>
}
 8008fec:	bf00      	nop
 8008fee:	3708      	adds	r7, #8
 8008ff0:	46bd      	mov	sp, r7
 8008ff2:	bd80      	pop	{r7, pc}

08008ff4 <RadioOnTxTimeoutProcess>:

static void RadioOnTxTimeoutProcess( void )
{
 8008ff4:	b580      	push	{r7, lr}
 8008ff6:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_TX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8008ff8:	4b07      	ldr	r3, [pc, #28]	; (8009018 <RadioOnTxTimeoutProcess+0x24>)
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d008      	beq.n	8009012 <RadioOnTxTimeoutProcess+0x1e>
 8009000:	4b05      	ldr	r3, [pc, #20]	; (8009018 <RadioOnTxTimeoutProcess+0x24>)
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	685b      	ldr	r3, [r3, #4]
 8009006:	2b00      	cmp	r3, #0
 8009008:	d003      	beq.n	8009012 <RadioOnTxTimeoutProcess+0x1e>
    {
        RadioEvents->TxTimeout( );
 800900a:	4b03      	ldr	r3, [pc, #12]	; (8009018 <RadioOnTxTimeoutProcess+0x24>)
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	685b      	ldr	r3, [r3, #4]
 8009010:	4798      	blx	r3
    }
}
 8009012:	bf00      	nop
 8009014:	bd80      	pop	{r7, pc}
 8009016:	bf00      	nop
 8009018:	20000a28 	.word	0x20000a28

0800901c <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 800901c:	b580      	push	{r7, lr}
 800901e:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_RX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8009020:	4b07      	ldr	r3, [pc, #28]	; (8009040 <RadioOnRxTimeoutProcess+0x24>)
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	2b00      	cmp	r3, #0
 8009026:	d008      	beq.n	800903a <RadioOnRxTimeoutProcess+0x1e>
 8009028:	4b05      	ldr	r3, [pc, #20]	; (8009040 <RadioOnRxTimeoutProcess+0x24>)
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	68db      	ldr	r3, [r3, #12]
 800902e:	2b00      	cmp	r3, #0
 8009030:	d003      	beq.n	800903a <RadioOnRxTimeoutProcess+0x1e>
    {
        RadioEvents->RxTimeout( );
 8009032:	4b03      	ldr	r3, [pc, #12]	; (8009040 <RadioOnRxTimeoutProcess+0x24>)
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	68db      	ldr	r3, [r3, #12]
 8009038:	4798      	blx	r3
    }
}
 800903a:	bf00      	nop
 800903c:	bd80      	pop	{r7, pc}
 800903e:	bf00      	nop
 8009040:	20000a28 	.word	0x20000a28

08009044 <RadioOnDioIrq>:

static void RadioOnDioIrq( RadioIrqMasks_t radioIrq )
{
 8009044:	b580      	push	{r7, lr}
 8009046:	b082      	sub	sp, #8
 8009048:	af00      	add	r7, sp, #0
 800904a:	4603      	mov	r3, r0
 800904c:	80fb      	strh	r3, [r7, #6]
    SubgRf.RadioIrq = radioIrq;
 800904e:	4a05      	ldr	r2, [pc, #20]	; (8009064 <RadioOnDioIrq+0x20>)
 8009050:	88fb      	ldrh	r3, [r7, #6]
 8009052:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54

    RADIO_IRQ_PROCESS();
 8009056:	f000 f807 	bl	8009068 <RadioIrqProcess>
}
 800905a:	bf00      	nop
 800905c:	3708      	adds	r7, #8
 800905e:	46bd      	mov	sp, r7
 8009060:	bd80      	pop	{r7, pc}
 8009062:	bf00      	nop
 8009064:	20000a2c 	.word	0x20000a2c

08009068 <RadioIrqProcess>:

static void RadioIrqProcess( void )
{
 8009068:	b5b0      	push	{r4, r5, r7, lr}
 800906a:	b082      	sub	sp, #8
 800906c:	af00      	add	r7, sp, #0
    uint8_t size = 0;
 800906e:	2300      	movs	r3, #0
 8009070:	71fb      	strb	r3, [r7, #7]
    int32_t cfo = 0;
 8009072:	2300      	movs	r3, #0
 8009074:	603b      	str	r3, [r7, #0]

    switch( SubgRf.RadioIrq )
 8009076:	4ba5      	ldr	r3, [pc, #660]	; (800930c <RadioIrqProcess+0x2a4>)
 8009078:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800907c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009080:	f000 810d 	beq.w	800929e <RadioIrqProcess+0x236>
 8009084:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009088:	f300 81c0 	bgt.w	800940c <RadioIrqProcess+0x3a4>
 800908c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009090:	f000 80f1 	beq.w	8009276 <RadioIrqProcess+0x20e>
 8009094:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009098:	f300 81b8 	bgt.w	800940c <RadioIrqProcess+0x3a4>
 800909c:	2b80      	cmp	r3, #128	; 0x80
 800909e:	f000 80d6 	beq.w	800924e <RadioIrqProcess+0x1e6>
 80090a2:	2b80      	cmp	r3, #128	; 0x80
 80090a4:	f300 81b2 	bgt.w	800940c <RadioIrqProcess+0x3a4>
 80090a8:	2b20      	cmp	r3, #32
 80090aa:	dc49      	bgt.n	8009140 <RadioIrqProcess+0xd8>
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	f340 81ad 	ble.w	800940c <RadioIrqProcess+0x3a4>
 80090b2:	3b01      	subs	r3, #1
 80090b4:	2b1f      	cmp	r3, #31
 80090b6:	f200 81a9 	bhi.w	800940c <RadioIrqProcess+0x3a4>
 80090ba:	a201      	add	r2, pc, #4	; (adr r2, 80090c0 <RadioIrqProcess+0x58>)
 80090bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090c0:	08009149 	.word	0x08009149
 80090c4:	08009183 	.word	0x08009183
 80090c8:	0800940d 	.word	0x0800940d
 80090cc:	08009329 	.word	0x08009329
 80090d0:	0800940d 	.word	0x0800940d
 80090d4:	0800940d 	.word	0x0800940d
 80090d8:	0800940d 	.word	0x0800940d
 80090dc:	08009397 	.word	0x08009397
 80090e0:	0800940d 	.word	0x0800940d
 80090e4:	0800940d 	.word	0x0800940d
 80090e8:	0800940d 	.word	0x0800940d
 80090ec:	0800940d 	.word	0x0800940d
 80090f0:	0800940d 	.word	0x0800940d
 80090f4:	0800940d 	.word	0x0800940d
 80090f8:	0800940d 	.word	0x0800940d
 80090fc:	0800940d 	.word	0x0800940d
 8009100:	0800940d 	.word	0x0800940d
 8009104:	0800940d 	.word	0x0800940d
 8009108:	0800940d 	.word	0x0800940d
 800910c:	0800940d 	.word	0x0800940d
 8009110:	0800940d 	.word	0x0800940d
 8009114:	0800940d 	.word	0x0800940d
 8009118:	0800940d 	.word	0x0800940d
 800911c:	0800940d 	.word	0x0800940d
 8009120:	0800940d 	.word	0x0800940d
 8009124:	0800940d 	.word	0x0800940d
 8009128:	0800940d 	.word	0x0800940d
 800912c:	0800940d 	.word	0x0800940d
 8009130:	0800940d 	.word	0x0800940d
 8009134:	0800940d 	.word	0x0800940d
 8009138:	0800940d 	.word	0x0800940d
 800913c:	080093a7 	.word	0x080093a7
 8009140:	2b40      	cmp	r3, #64	; 0x40
 8009142:	f000 814b 	beq.w	80093dc <RadioIrqProcess+0x374>
        MW_LOG( TS_ON, VLEVEL_M,  "HOP\r\n" );
        break;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    default:
        break;
 8009146:	e161      	b.n	800940c <RadioIrqProcess+0x3a4>
        TimerStop( &TxTimeoutTimer );
 8009148:	4871      	ldr	r0, [pc, #452]	; (8009310 <RadioIrqProcess+0x2a8>)
 800914a:	f002 fab9 	bl	800b6c0 <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 800914e:	2000      	movs	r0, #0
 8009150:	f000 ffea 	bl	800a128 <SUBGRF_SetStandby>
        if( RFW_Is_LongPacketModeEnabled() == 1 )
 8009154:	f002 f860 	bl	800b218 <RFW_Is_LongPacketModeEnabled>
 8009158:	4603      	mov	r3, r0
 800915a:	2b01      	cmp	r3, #1
 800915c:	d101      	bne.n	8009162 <RadioIrqProcess+0xfa>
            RFW_DeInit_TxLongPacket( );
 800915e:	f002 f884 	bl	800b26a <RFW_DeInit_TxLongPacket>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 8009162:	4b6c      	ldr	r3, [pc, #432]	; (8009314 <RadioIrqProcess+0x2ac>)
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	2b00      	cmp	r3, #0
 8009168:	f000 8152 	beq.w	8009410 <RadioIrqProcess+0x3a8>
 800916c:	4b69      	ldr	r3, [pc, #420]	; (8009314 <RadioIrqProcess+0x2ac>)
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	2b00      	cmp	r3, #0
 8009174:	f000 814c 	beq.w	8009410 <RadioIrqProcess+0x3a8>
            RadioEvents->TxDone( );
 8009178:	4b66      	ldr	r3, [pc, #408]	; (8009314 <RadioIrqProcess+0x2ac>)
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	4798      	blx	r3
        break;
 8009180:	e146      	b.n	8009410 <RadioIrqProcess+0x3a8>
        TimerStop( &RxTimeoutTimer );
 8009182:	4865      	ldr	r0, [pc, #404]	; (8009318 <RadioIrqProcess+0x2b0>)
 8009184:	f002 fa9c 	bl	800b6c0 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8009188:	4b60      	ldr	r3, [pc, #384]	; (800930c <RadioIrqProcess+0x2a4>)
 800918a:	785b      	ldrb	r3, [r3, #1]
 800918c:	f083 0301 	eor.w	r3, r3, #1
 8009190:	b2db      	uxtb	r3, r3
 8009192:	2b00      	cmp	r3, #0
 8009194:	d014      	beq.n	80091c0 <RadioIrqProcess+0x158>
            SUBGRF_SetStandby( STDBY_RC );
 8009196:	2000      	movs	r0, #0
 8009198:	f000 ffc6 	bl	800a128 <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( SUBGHZ_RTCCTLR, 0x00 );
 800919c:	2100      	movs	r1, #0
 800919e:	f640 1002 	movw	r0, #2306	; 0x902
 80091a2:	f001 fd45 	bl	800ac30 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( SUBGHZ_EVENTMASKR, SUBGRF_ReadRegister( SUBGHZ_EVENTMASKR ) | ( 1 << 1 ) );
 80091a6:	f640 1044 	movw	r0, #2372	; 0x944
 80091aa:	f001 fd55 	bl	800ac58 <SUBGRF_ReadRegister>
 80091ae:	4603      	mov	r3, r0
 80091b0:	f043 0302 	orr.w	r3, r3, #2
 80091b4:	b2db      	uxtb	r3, r3
 80091b6:	4619      	mov	r1, r3
 80091b8:	f640 1044 	movw	r0, #2372	; 0x944
 80091bc:	f001 fd38 	bl	800ac30 <SUBGRF_WriteRegister>
        SUBGRF_GetPayload( RadioBuffer, &size, 255 );
 80091c0:	1dfb      	adds	r3, r7, #7
 80091c2:	22ff      	movs	r2, #255	; 0xff
 80091c4:	4619      	mov	r1, r3
 80091c6:	4855      	ldr	r0, [pc, #340]	; (800931c <RadioIrqProcess+0x2b4>)
 80091c8:	f000 fe7e 	bl	8009ec8 <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &( SubgRf.PacketStatus ) );
 80091cc:	4854      	ldr	r0, [pc, #336]	; (8009320 <RadioIrqProcess+0x2b8>)
 80091ce:	f001 fcdd 	bl	800ab8c <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 80091d2:	4b50      	ldr	r3, [pc, #320]	; (8009314 <RadioIrqProcess+0x2ac>)
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	f000 811c 	beq.w	8009414 <RadioIrqProcess+0x3ac>
 80091dc:	4b4d      	ldr	r3, [pc, #308]	; (8009314 <RadioIrqProcess+0x2ac>)
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	689b      	ldr	r3, [r3, #8]
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	f000 8116 	beq.w	8009414 <RadioIrqProcess+0x3ac>
            switch( SubgRf.PacketStatus.packetType )
 80091e8:	4b48      	ldr	r3, [pc, #288]	; (800930c <RadioIrqProcess+0x2a4>)
 80091ea:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80091ee:	2b01      	cmp	r3, #1
 80091f0:	d10e      	bne.n	8009210 <RadioIrqProcess+0x1a8>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt,
 80091f2:	4b48      	ldr	r3, [pc, #288]	; (8009314 <RadioIrqProcess+0x2ac>)
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	689c      	ldr	r4, [r3, #8]
 80091f8:	79fb      	ldrb	r3, [r7, #7]
 80091fa:	b299      	uxth	r1, r3
 80091fc:	4b43      	ldr	r3, [pc, #268]	; (800930c <RadioIrqProcess+0x2a4>)
 80091fe:	f993 3030 	ldrsb.w	r3, [r3, #48]	; 0x30
 8009202:	b21a      	sxth	r2, r3
 8009204:	4b41      	ldr	r3, [pc, #260]	; (800930c <RadioIrqProcess+0x2a4>)
 8009206:	f993 3031 	ldrsb.w	r3, [r3, #49]	; 0x31
 800920a:	4844      	ldr	r0, [pc, #272]	; (800931c <RadioIrqProcess+0x2b4>)
 800920c:	47a0      	blx	r4
                break;
 800920e:	e01d      	b.n	800924c <RadioIrqProcess+0x1e4>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 8009210:	4b3e      	ldr	r3, [pc, #248]	; (800930c <RadioIrqProcess+0x2a4>)
 8009212:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009214:	463a      	mov	r2, r7
 8009216:	4611      	mov	r1, r2
 8009218:	4618      	mov	r0, r3
 800921a:	f001 ff4b 	bl	800b0b4 <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, ( int8_t ) DIVR( cfo, 1000 ) );
 800921e:	4b3d      	ldr	r3, [pc, #244]	; (8009314 <RadioIrqProcess+0x2ac>)
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	689c      	ldr	r4, [r3, #8]
 8009224:	79fb      	ldrb	r3, [r7, #7]
 8009226:	b299      	uxth	r1, r3
 8009228:	4b38      	ldr	r3, [pc, #224]	; (800930c <RadioIrqProcess+0x2a4>)
 800922a:	f993 3029 	ldrsb.w	r3, [r3, #41]	; 0x29
 800922e:	b218      	sxth	r0, r3
 8009230:	683b      	ldr	r3, [r7, #0]
 8009232:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8009236:	4a3b      	ldr	r2, [pc, #236]	; (8009324 <RadioIrqProcess+0x2bc>)
 8009238:	fb82 5203 	smull	r5, r2, r2, r3
 800923c:	1192      	asrs	r2, r2, #6
 800923e:	17db      	asrs	r3, r3, #31
 8009240:	1ad3      	subs	r3, r2, r3
 8009242:	b25b      	sxtb	r3, r3
 8009244:	4602      	mov	r2, r0
 8009246:	4835      	ldr	r0, [pc, #212]	; (800931c <RadioIrqProcess+0x2b4>)
 8009248:	47a0      	blx	r4
                break;
 800924a:	bf00      	nop
        break;
 800924c:	e0e2      	b.n	8009414 <RadioIrqProcess+0x3ac>
        SUBGRF_SetStandby( STDBY_RC );
 800924e:	2000      	movs	r0, #0
 8009250:	f000 ff6a 	bl	800a128 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8009254:	4b2f      	ldr	r3, [pc, #188]	; (8009314 <RadioIrqProcess+0x2ac>)
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	2b00      	cmp	r3, #0
 800925a:	f000 80dd 	beq.w	8009418 <RadioIrqProcess+0x3b0>
 800925e:	4b2d      	ldr	r3, [pc, #180]	; (8009314 <RadioIrqProcess+0x2ac>)
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	699b      	ldr	r3, [r3, #24]
 8009264:	2b00      	cmp	r3, #0
 8009266:	f000 80d7 	beq.w	8009418 <RadioIrqProcess+0x3b0>
            RadioEvents->CadDone( false );
 800926a:	4b2a      	ldr	r3, [pc, #168]	; (8009314 <RadioIrqProcess+0x2ac>)
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	699b      	ldr	r3, [r3, #24]
 8009270:	2000      	movs	r0, #0
 8009272:	4798      	blx	r3
        break;
 8009274:	e0d0      	b.n	8009418 <RadioIrqProcess+0x3b0>
        SUBGRF_SetStandby( STDBY_RC );
 8009276:	2000      	movs	r0, #0
 8009278:	f000 ff56 	bl	800a128 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 800927c:	4b25      	ldr	r3, [pc, #148]	; (8009314 <RadioIrqProcess+0x2ac>)
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	2b00      	cmp	r3, #0
 8009282:	f000 80cb 	beq.w	800941c <RadioIrqProcess+0x3b4>
 8009286:	4b23      	ldr	r3, [pc, #140]	; (8009314 <RadioIrqProcess+0x2ac>)
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	699b      	ldr	r3, [r3, #24]
 800928c:	2b00      	cmp	r3, #0
 800928e:	f000 80c5 	beq.w	800941c <RadioIrqProcess+0x3b4>
            RadioEvents->CadDone( true );
 8009292:	4b20      	ldr	r3, [pc, #128]	; (8009314 <RadioIrqProcess+0x2ac>)
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	699b      	ldr	r3, [r3, #24]
 8009298:	2001      	movs	r0, #1
 800929a:	4798      	blx	r3
        break;
 800929c:	e0be      	b.n	800941c <RadioIrqProcess+0x3b4>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 800929e:	f000 fdf9 	bl	8009e94 <SUBGRF_GetOperatingMode>
 80092a2:	4603      	mov	r3, r0
 80092a4:	2b04      	cmp	r3, #4
 80092a6:	d115      	bne.n	80092d4 <RadioIrqProcess+0x26c>
            TimerStop( &TxTimeoutTimer );
 80092a8:	4819      	ldr	r0, [pc, #100]	; (8009310 <RadioIrqProcess+0x2a8>)
 80092aa:	f002 fa09 	bl	800b6c0 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 80092ae:	2000      	movs	r0, #0
 80092b0:	f000 ff3a 	bl	800a128 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 80092b4:	4b17      	ldr	r3, [pc, #92]	; (8009314 <RadioIrqProcess+0x2ac>)
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	f000 80b1 	beq.w	8009420 <RadioIrqProcess+0x3b8>
 80092be:	4b15      	ldr	r3, [pc, #84]	; (8009314 <RadioIrqProcess+0x2ac>)
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	685b      	ldr	r3, [r3, #4]
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	f000 80ab 	beq.w	8009420 <RadioIrqProcess+0x3b8>
                RadioEvents->TxTimeout( );
 80092ca:	4b12      	ldr	r3, [pc, #72]	; (8009314 <RadioIrqProcess+0x2ac>)
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	685b      	ldr	r3, [r3, #4]
 80092d0:	4798      	blx	r3
        break;
 80092d2:	e0a5      	b.n	8009420 <RadioIrqProcess+0x3b8>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 80092d4:	f000 fdde 	bl	8009e94 <SUBGRF_GetOperatingMode>
 80092d8:	4603      	mov	r3, r0
 80092da:	2b05      	cmp	r3, #5
 80092dc:	f040 80a0 	bne.w	8009420 <RadioIrqProcess+0x3b8>
            TimerStop( &RxTimeoutTimer );
 80092e0:	480d      	ldr	r0, [pc, #52]	; (8009318 <RadioIrqProcess+0x2b0>)
 80092e2:	f002 f9ed 	bl	800b6c0 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 80092e6:	2000      	movs	r0, #0
 80092e8:	f000 ff1e 	bl	800a128 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 80092ec:	4b09      	ldr	r3, [pc, #36]	; (8009314 <RadioIrqProcess+0x2ac>)
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	f000 8095 	beq.w	8009420 <RadioIrqProcess+0x3b8>
 80092f6:	4b07      	ldr	r3, [pc, #28]	; (8009314 <RadioIrqProcess+0x2ac>)
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	68db      	ldr	r3, [r3, #12]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	f000 808f 	beq.w	8009420 <RadioIrqProcess+0x3b8>
                RadioEvents->RxTimeout( );
 8009302:	4b04      	ldr	r3, [pc, #16]	; (8009314 <RadioIrqProcess+0x2ac>)
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	68db      	ldr	r3, [r3, #12]
 8009308:	4798      	blx	r3
        break;
 800930a:	e089      	b.n	8009420 <RadioIrqProcess+0x3b8>
 800930c:	20000a2c 	.word	0x20000a2c
 8009310:	20000a88 	.word	0x20000a88
 8009314:	20000a28 	.word	0x20000a28
 8009318:	20000aa0 	.word	0x20000aa0
 800931c:	20000928 	.word	0x20000928
 8009320:	20000a50 	.word	0x20000a50
 8009324:	10624dd3 	.word	0x10624dd3
        if( SubgRf.RxDcPreambleDetectTimeout != 0 )
 8009328:	4b44      	ldr	r3, [pc, #272]	; (800943c <RadioIrqProcess+0x3d4>)
 800932a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800932c:	2b00      	cmp	r3, #0
 800932e:	d079      	beq.n	8009424 <RadioIrqProcess+0x3bc>
            Radio.Write( SUBGHZ_RTCPRDR2, ( SubgRf.RxDcPreambleDetectTimeout >> 16 ) & 0xFF ); /*Update Radio RTC Period MSB*/
 8009330:	4a43      	ldr	r2, [pc, #268]	; (8009440 <RadioIrqProcess+0x3d8>)
 8009332:	4b42      	ldr	r3, [pc, #264]	; (800943c <RadioIrqProcess+0x3d4>)
 8009334:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009336:	0c1b      	lsrs	r3, r3, #16
 8009338:	b2db      	uxtb	r3, r3
 800933a:	4619      	mov	r1, r3
 800933c:	f640 1003 	movw	r0, #2307	; 0x903
 8009340:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR1, ( SubgRf.RxDcPreambleDetectTimeout >> 8 ) & 0xFF ); /*Update Radio RTC Period MidByte*/
 8009342:	4a3f      	ldr	r2, [pc, #252]	; (8009440 <RadioIrqProcess+0x3d8>)
 8009344:	4b3d      	ldr	r3, [pc, #244]	; (800943c <RadioIrqProcess+0x3d4>)
 8009346:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009348:	0a1b      	lsrs	r3, r3, #8
 800934a:	b2db      	uxtb	r3, r3
 800934c:	4619      	mov	r1, r3
 800934e:	f640 1004 	movw	r0, #2308	; 0x904
 8009352:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR0, ( SubgRf.RxDcPreambleDetectTimeout ) & 0xFF ); /*Update Radio RTC Period lsb*/
 8009354:	4a3a      	ldr	r2, [pc, #232]	; (8009440 <RadioIrqProcess+0x3d8>)
 8009356:	4b39      	ldr	r3, [pc, #228]	; (800943c <RadioIrqProcess+0x3d4>)
 8009358:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800935a:	b2db      	uxtb	r3, r3
 800935c:	4619      	mov	r1, r3
 800935e:	f640 1005 	movw	r0, #2309	; 0x905
 8009362:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCCTLR, Radio.Read( SUBGHZ_RTCCTLR ) | 0x1 ); /*restart Radio RTC*/
 8009364:	4c36      	ldr	r4, [pc, #216]	; (8009440 <RadioIrqProcess+0x3d8>)
 8009366:	4b37      	ldr	r3, [pc, #220]	; (8009444 <RadioIrqProcess+0x3dc>)
 8009368:	f640 1002 	movw	r0, #2306	; 0x902
 800936c:	4798      	blx	r3
 800936e:	4603      	mov	r3, r0
 8009370:	f043 0301 	orr.w	r3, r3, #1
 8009374:	b2db      	uxtb	r3, r3
 8009376:	4619      	mov	r1, r3
 8009378:	f640 1002 	movw	r0, #2306	; 0x902
 800937c:	47a0      	blx	r4
            SubgRf.RxDcPreambleDetectTimeout = 0;
 800937e:	4b2f      	ldr	r3, [pc, #188]	; (800943c <RadioIrqProcess+0x3d4>)
 8009380:	2200      	movs	r2, #0
 8009382:	659a      	str	r2, [r3, #88]	; 0x58
            SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8009384:	2300      	movs	r3, #0
 8009386:	2200      	movs	r2, #0
 8009388:	f240 2162 	movw	r1, #610	; 0x262
 800938c:	f240 2062 	movw	r0, #610	; 0x262
 8009390:	f001 f89e 	bl	800a4d0 <SUBGRF_SetDioIrqParams>
        break;
 8009394:	e046      	b.n	8009424 <RadioIrqProcess+0x3bc>
        if( 1UL == RFW_Is_Init( ) )
 8009396:	f001 ff38 	bl	800b20a <RFW_Is_Init>
 800939a:	4603      	mov	r3, r0
 800939c:	2b01      	cmp	r3, #1
 800939e:	d143      	bne.n	8009428 <RadioIrqProcess+0x3c0>
            RFW_ReceivePayload( );
 80093a0:	f001 ff69 	bl	800b276 <RFW_ReceivePayload>
        break;
 80093a4:	e040      	b.n	8009428 <RadioIrqProcess+0x3c0>
        TimerStop( &RxTimeoutTimer );
 80093a6:	4828      	ldr	r0, [pc, #160]	; (8009448 <RadioIrqProcess+0x3e0>)
 80093a8:	f002 f98a 	bl	800b6c0 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 80093ac:	4b23      	ldr	r3, [pc, #140]	; (800943c <RadioIrqProcess+0x3d4>)
 80093ae:	785b      	ldrb	r3, [r3, #1]
 80093b0:	f083 0301 	eor.w	r3, r3, #1
 80093b4:	b2db      	uxtb	r3, r3
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d002      	beq.n	80093c0 <RadioIrqProcess+0x358>
            SUBGRF_SetStandby( STDBY_RC );
 80093ba:	2000      	movs	r0, #0
 80093bc:	f000 feb4 	bl	800a128 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 80093c0:	4b22      	ldr	r3, [pc, #136]	; (800944c <RadioIrqProcess+0x3e4>)
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d031      	beq.n	800942c <RadioIrqProcess+0x3c4>
 80093c8:	4b20      	ldr	r3, [pc, #128]	; (800944c <RadioIrqProcess+0x3e4>)
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	68db      	ldr	r3, [r3, #12]
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d02c      	beq.n	800942c <RadioIrqProcess+0x3c4>
            RadioEvents->RxTimeout( );
 80093d2:	4b1e      	ldr	r3, [pc, #120]	; (800944c <RadioIrqProcess+0x3e4>)
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	68db      	ldr	r3, [r3, #12]
 80093d8:	4798      	blx	r3
        break;
 80093da:	e027      	b.n	800942c <RadioIrqProcess+0x3c4>
        if( SubgRf.RxContinuous == false )
 80093dc:	4b17      	ldr	r3, [pc, #92]	; (800943c <RadioIrqProcess+0x3d4>)
 80093de:	785b      	ldrb	r3, [r3, #1]
 80093e0:	f083 0301 	eor.w	r3, r3, #1
 80093e4:	b2db      	uxtb	r3, r3
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d002      	beq.n	80093f0 <RadioIrqProcess+0x388>
            SUBGRF_SetStandby( STDBY_RC );
 80093ea:	2000      	movs	r0, #0
 80093ec:	f000 fe9c 	bl	800a128 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 80093f0:	4b16      	ldr	r3, [pc, #88]	; (800944c <RadioIrqProcess+0x3e4>)
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d01b      	beq.n	8009430 <RadioIrqProcess+0x3c8>
 80093f8:	4b14      	ldr	r3, [pc, #80]	; (800944c <RadioIrqProcess+0x3e4>)
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	691b      	ldr	r3, [r3, #16]
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d016      	beq.n	8009430 <RadioIrqProcess+0x3c8>
            RadioEvents->RxError( );
 8009402:	4b12      	ldr	r3, [pc, #72]	; (800944c <RadioIrqProcess+0x3e4>)
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	691b      	ldr	r3, [r3, #16]
 8009408:	4798      	blx	r3
        break;
 800940a:	e011      	b.n	8009430 <RadioIrqProcess+0x3c8>
        break;
 800940c:	bf00      	nop
 800940e:	e010      	b.n	8009432 <RadioIrqProcess+0x3ca>
        break;
 8009410:	bf00      	nop
 8009412:	e00e      	b.n	8009432 <RadioIrqProcess+0x3ca>
        break;
 8009414:	bf00      	nop
 8009416:	e00c      	b.n	8009432 <RadioIrqProcess+0x3ca>
        break;
 8009418:	bf00      	nop
 800941a:	e00a      	b.n	8009432 <RadioIrqProcess+0x3ca>
        break;
 800941c:	bf00      	nop
 800941e:	e008      	b.n	8009432 <RadioIrqProcess+0x3ca>
        break;
 8009420:	bf00      	nop
 8009422:	e006      	b.n	8009432 <RadioIrqProcess+0x3ca>
        break;
 8009424:	bf00      	nop
 8009426:	e004      	b.n	8009432 <RadioIrqProcess+0x3ca>
        break;
 8009428:	bf00      	nop
 800942a:	e002      	b.n	8009432 <RadioIrqProcess+0x3ca>
        break;
 800942c:	bf00      	nop
 800942e:	e000      	b.n	8009432 <RadioIrqProcess+0x3ca>
        break;
 8009430:	bf00      	nop
    }
}
 8009432:	bf00      	nop
 8009434:	3708      	adds	r7, #8
 8009436:	46bd      	mov	sp, r7
 8009438:	bdb0      	pop	{r4, r5, r7, pc}
 800943a:	bf00      	nop
 800943c:	20000a2c 	.word	0x20000a2c
 8009440:	08008e77 	.word	0x08008e77
 8009444:	08008e9b 	.word	0x08008e9b
 8009448:	20000aa0 	.word	0x20000aa0
 800944c:	20000a28 	.word	0x20000a28

08009450 <RadioTxPrbs>:

static void RadioTxPrbs( void )
{
 8009450:	b580      	push	{r7, lr}
 8009452:	af00      	add	r7, sp, #0
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8009454:	4b09      	ldr	r3, [pc, #36]	; (800947c <RadioTxPrbs+0x2c>)
 8009456:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800945a:	2101      	movs	r1, #1
 800945c:	4618      	mov	r0, r3
 800945e:	f001 fcdb 	bl	800ae18 <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_GPKTCTL1AR, 0x2d );  // sel mode prbs9 instead of preamble
 8009462:	4b07      	ldr	r3, [pc, #28]	; (8009480 <RadioTxPrbs+0x30>)
 8009464:	212d      	movs	r1, #45	; 0x2d
 8009466:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 800946a:	4798      	blx	r3
    SUBGRF_SetTxInfinitePreamble( );
 800946c:	f000 ff1f 	bl	800a2ae <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 8009470:	4804      	ldr	r0, [pc, #16]	; (8009484 <RadioTxPrbs+0x34>)
 8009472:	f000 fe75 	bl	800a160 <SUBGRF_SetTx>
}
 8009476:	bf00      	nop
 8009478:	bd80      	pop	{r7, pc}
 800947a:	bf00      	nop
 800947c:	20000a2c 	.word	0x20000a2c
 8009480:	08008e77 	.word	0x08008e77
 8009484:	000fffff 	.word	0x000fffff

08009488 <RadioTxCw>:

static void RadioTxCw( int8_t power )
{
 8009488:	b580      	push	{r7, lr}
 800948a:	b084      	sub	sp, #16
 800948c:	af00      	add	r7, sp, #0
 800948e:	4603      	mov	r3, r0
 8009490:	71fb      	strb	r3, [r7, #7]
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 8009492:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009496:	4618      	mov	r0, r3
 8009498:	f001 fce6 	bl	800ae68 <SUBGRF_SetRfTxPower>
 800949c:	4603      	mov	r3, r0
 800949e:	73fb      	strb	r3, [r7, #15]
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 80094a0:	210e      	movs	r1, #14
 80094a2:	f640 101f 	movw	r0, #2335	; 0x91f
 80094a6:	f001 fbc3 	bl	800ac30 <SUBGRF_WriteRegister>
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 80094aa:	7bfb      	ldrb	r3, [r7, #15]
 80094ac:	2101      	movs	r1, #1
 80094ae:	4618      	mov	r0, r3
 80094b0:	f001 fcb2 	bl	800ae18 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 80094b4:	f000 fef2 	bl	800a29c <SUBGRF_SetTxContinuousWave>
}
 80094b8:	bf00      	nop
 80094ba:	3710      	adds	r7, #16
 80094bc:	46bd      	mov	sp, r7
 80094be:	bd80      	pop	{r7, pc}

080094c0 <payload_integration>:

#if (RADIO_SIGFOX_ENABLE == 1)
static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 80094c0:	b480      	push	{r7}
 80094c2:	b089      	sub	sp, #36	; 0x24
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	60f8      	str	r0, [r7, #12]
 80094c8:	60b9      	str	r1, [r7, #8]
 80094ca:	4613      	mov	r3, r2
 80094cc:	71fb      	strb	r3, [r7, #7]
    uint8_t prevInt = 0;
 80094ce:	2300      	movs	r3, #0
 80094d0:	77fb      	strb	r3, [r7, #31]
    uint8_t currBit;
    uint8_t index_bit;
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int32_t i = 0;
 80094d2:	2300      	movs	r3, #0
 80094d4:	61bb      	str	r3, [r7, #24]

    for( i = 0; i < size; i++ )
 80094d6:	2300      	movs	r3, #0
 80094d8:	61bb      	str	r3, [r7, #24]
 80094da:	e011      	b.n	8009500 <payload_integration+0x40>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 80094dc:	69bb      	ldr	r3, [r7, #24]
 80094de:	68ba      	ldr	r2, [r7, #8]
 80094e0:	4413      	add	r3, r2
 80094e2:	781a      	ldrb	r2, [r3, #0]
 80094e4:	69bb      	ldr	r3, [r7, #24]
 80094e6:	68b9      	ldr	r1, [r7, #8]
 80094e8:	440b      	add	r3, r1
 80094ea:	43d2      	mvns	r2, r2
 80094ec:	b2d2      	uxtb	r2, r2
 80094ee:	701a      	strb	r2, [r3, #0]
        /* init outBuffer */
        outBuffer[i] = 0;
 80094f0:	69bb      	ldr	r3, [r7, #24]
 80094f2:	68fa      	ldr	r2, [r7, #12]
 80094f4:	4413      	add	r3, r2
 80094f6:	2200      	movs	r2, #0
 80094f8:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < size; i++ )
 80094fa:	69bb      	ldr	r3, [r7, #24]
 80094fc:	3301      	adds	r3, #1
 80094fe:	61bb      	str	r3, [r7, #24]
 8009500:	79fb      	ldrb	r3, [r7, #7]
 8009502:	69ba      	ldr	r2, [r7, #24]
 8009504:	429a      	cmp	r2, r3
 8009506:	dbe9      	blt.n	80094dc <payload_integration+0x1c>
    }

    for( i = 0; i < ( size * 8 ); i++ )
 8009508:	2300      	movs	r3, #0
 800950a:	61bb      	str	r3, [r7, #24]
 800950c:	e049      	b.n	80095a2 <payload_integration+0xe2>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
 800950e:	69bb      	ldr	r3, [r7, #24]
 8009510:	425a      	negs	r2, r3
 8009512:	f003 0307 	and.w	r3, r3, #7
 8009516:	f002 0207 	and.w	r2, r2, #7
 800951a:	bf58      	it	pl
 800951c:	4253      	negpl	r3, r2
 800951e:	b2db      	uxtb	r3, r3
 8009520:	f1c3 0307 	rsb	r3, r3, #7
 8009524:	75fb      	strb	r3, [r7, #23]
        index_byte = i / 8;
 8009526:	69bb      	ldr	r3, [r7, #24]
 8009528:	2b00      	cmp	r3, #0
 800952a:	da00      	bge.n	800952e <payload_integration+0x6e>
 800952c:	3307      	adds	r3, #7
 800952e:	10db      	asrs	r3, r3, #3
 8009530:	75bb      	strb	r3, [r7, #22]
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 8009532:	69bb      	ldr	r3, [r7, #24]
 8009534:	3301      	adds	r3, #1
 8009536:	425a      	negs	r2, r3
 8009538:	f003 0307 	and.w	r3, r3, #7
 800953c:	f002 0207 	and.w	r2, r2, #7
 8009540:	bf58      	it	pl
 8009542:	4253      	negpl	r3, r2
 8009544:	b2db      	uxtb	r3, r3
 8009546:	f1c3 0307 	rsb	r3, r3, #7
 800954a:	757b      	strb	r3, [r7, #21]
        index_byte_out = ( i + 1 ) / 8;
 800954c:	69bb      	ldr	r3, [r7, #24]
 800954e:	3301      	adds	r3, #1
 8009550:	2b00      	cmp	r3, #0
 8009552:	da00      	bge.n	8009556 <payload_integration+0x96>
 8009554:	3307      	adds	r3, #7
 8009556:	10db      	asrs	r3, r3, #3
 8009558:	753b      	strb	r3, [r7, #20]
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 800955a:	7dbb      	ldrb	r3, [r7, #22]
 800955c:	68ba      	ldr	r2, [r7, #8]
 800955e:	4413      	add	r3, r2
 8009560:	781b      	ldrb	r3, [r3, #0]
 8009562:	461a      	mov	r2, r3
 8009564:	7dfb      	ldrb	r3, [r7, #23]
 8009566:	fa42 f303 	asr.w	r3, r2, r3
 800956a:	b2db      	uxtb	r3, r3
 800956c:	f003 0301 	and.w	r3, r3, #1
 8009570:	74fb      	strb	r3, [r7, #19]
        /* integration */
        prevInt ^= currBit;
 8009572:	7ffa      	ldrb	r2, [r7, #31]
 8009574:	7cfb      	ldrb	r3, [r7, #19]
 8009576:	4053      	eors	r3, r2
 8009578:	77fb      	strb	r3, [r7, #31]
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 800957a:	7d3b      	ldrb	r3, [r7, #20]
 800957c:	68fa      	ldr	r2, [r7, #12]
 800957e:	4413      	add	r3, r2
 8009580:	781b      	ldrb	r3, [r3, #0]
 8009582:	b25a      	sxtb	r2, r3
 8009584:	7ff9      	ldrb	r1, [r7, #31]
 8009586:	7d7b      	ldrb	r3, [r7, #21]
 8009588:	fa01 f303 	lsl.w	r3, r1, r3
 800958c:	b25b      	sxtb	r3, r3
 800958e:	4313      	orrs	r3, r2
 8009590:	b259      	sxtb	r1, r3
 8009592:	7d3b      	ldrb	r3, [r7, #20]
 8009594:	68fa      	ldr	r2, [r7, #12]
 8009596:	4413      	add	r3, r2
 8009598:	b2ca      	uxtb	r2, r1
 800959a:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < ( size * 8 ); i++ )
 800959c:	69bb      	ldr	r3, [r7, #24]
 800959e:	3301      	adds	r3, #1
 80095a0:	61bb      	str	r3, [r7, #24]
 80095a2:	79fb      	ldrb	r3, [r7, #7]
 80095a4:	00db      	lsls	r3, r3, #3
 80095a6:	69ba      	ldr	r2, [r7, #24]
 80095a8:	429a      	cmp	r2, r3
 80095aa:	dbb0      	blt.n	800950e <payload_integration+0x4e>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 80095ac:	7ffb      	ldrb	r3, [r7, #31]
 80095ae:	01db      	lsls	r3, r3, #7
 80095b0:	b25a      	sxtb	r2, r3
 80095b2:	7ffb      	ldrb	r3, [r7, #31]
 80095b4:	019b      	lsls	r3, r3, #6
 80095b6:	b25b      	sxtb	r3, r3
 80095b8:	4313      	orrs	r3, r2
 80095ba:	b25b      	sxtb	r3, r3
 80095bc:	7ffa      	ldrb	r2, [r7, #31]
 80095be:	2a00      	cmp	r2, #0
 80095c0:	d101      	bne.n	80095c6 <payload_integration+0x106>
 80095c2:	2220      	movs	r2, #32
 80095c4:	e000      	b.n	80095c8 <payload_integration+0x108>
 80095c6:	2200      	movs	r2, #0
 80095c8:	4313      	orrs	r3, r2
 80095ca:	b259      	sxtb	r1, r3
 80095cc:	79fb      	ldrb	r3, [r7, #7]
 80095ce:	68fa      	ldr	r2, [r7, #12]
 80095d0:	4413      	add	r3, r2
 80095d2:	b2ca      	uxtb	r2, r1
 80095d4:	701a      	strb	r2, [r3, #0]
}
 80095d6:	bf00      	nop
 80095d8:	3724      	adds	r7, #36	; 0x24
 80095da:	46bd      	mov	sp, r7
 80095dc:	bc80      	pop	{r7}
 80095de:	4770      	bx	lr

080095e0 <RadioSetRxGenericConfig>:
#endif /*RADIO_SIGFOX_ENABLE == 1*/

static int32_t RadioSetRxGenericConfig( GenericModems_t modem, RxConfigGeneric_t *config, uint32_t rxContinuous,
                                        uint32_t symbTimeout )
{
 80095e0:	b580      	push	{r7, lr}
 80095e2:	b08c      	sub	sp, #48	; 0x30
 80095e4:	af00      	add	r7, sp, #0
 80095e6:	60b9      	str	r1, [r7, #8]
 80095e8:	607a      	str	r2, [r7, #4]
 80095ea:	603b      	str	r3, [r7, #0]
 80095ec:	4603      	mov	r3, r0
 80095ee:	73fb      	strb	r3, [r7, #15]
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    int32_t status = 0;
 80095f0:	2300      	movs	r3, #0
 80095f2:	62bb      	str	r3, [r7, #40]	; 0x28
    uint8_t syncword[8] = {0};
 80095f4:	2300      	movs	r3, #0
 80095f6:	623b      	str	r3, [r7, #32]
 80095f8:	2300      	movs	r3, #0
 80095fa:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t MaxPayloadLength;

    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 80095fc:	f001 fdff 	bl	800b1fe <RFW_DeInit>

    if( rxContinuous != 0 )
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	2b00      	cmp	r3, #0
 8009604:	d001      	beq.n	800960a <RadioSetRxGenericConfig+0x2a>
    {
        symbTimeout = 0;
 8009606:	2300      	movs	r3, #0
 8009608:	603b      	str	r3, [r7, #0]
    }
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	2b00      	cmp	r3, #0
 800960e:	bf14      	ite	ne
 8009610:	2301      	movne	r3, #1
 8009612:	2300      	moveq	r3, #0
 8009614:	b2da      	uxtb	r2, r3
 8009616:	4ba3      	ldr	r3, [pc, #652]	; (80098a4 <RadioSetRxGenericConfig+0x2c4>)
 8009618:	705a      	strb	r2, [r3, #1]

    switch( modem )
 800961a:	7bfb      	ldrb	r3, [r7, #15]
 800961c:	2b00      	cmp	r3, #0
 800961e:	d003      	beq.n	8009628 <RadioSetRxGenericConfig+0x48>
 8009620:	2b01      	cmp	r3, #1
 8009622:	f000 80dc 	beq.w	80097de <RadioSetRxGenericConfig+0x1fe>

        // Timeout Max, Timeout handled directly in SetRx function
        SubgRf.RxTimeout = 0xFFFF;
        break;
    default:
        break;
 8009626:	e194      	b.n	8009952 <RadioSetRxGenericConfig+0x372>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 8009628:	68bb      	ldr	r3, [r7, #8]
 800962a:	689b      	ldr	r3, [r3, #8]
 800962c:	2b00      	cmp	r3, #0
 800962e:	d003      	beq.n	8009638 <RadioSetRxGenericConfig+0x58>
 8009630:	68bb      	ldr	r3, [r7, #8]
 8009632:	68db      	ldr	r3, [r3, #12]
 8009634:	2b00      	cmp	r3, #0
 8009636:	d102      	bne.n	800963e <RadioSetRxGenericConfig+0x5e>
            return -1;
 8009638:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800963c:	e18a      	b.n	8009954 <RadioSetRxGenericConfig+0x374>
        if( config->fsk.SyncWordLength > 8 )
 800963e:	68bb      	ldr	r3, [r7, #8]
 8009640:	7f9b      	ldrb	r3, [r3, #30]
 8009642:	2b08      	cmp	r3, #8
 8009644:	d902      	bls.n	800964c <RadioSetRxGenericConfig+0x6c>
            return -1;
 8009646:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800964a:	e183      	b.n	8009954 <RadioSetRxGenericConfig+0x374>
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 800964c:	68bb      	ldr	r3, [r7, #8]
 800964e:	6919      	ldr	r1, [r3, #16]
 8009650:	68bb      	ldr	r3, [r7, #8]
 8009652:	7f9b      	ldrb	r3, [r3, #30]
 8009654:	b29a      	uxth	r2, r3
 8009656:	f107 0320 	add.w	r3, r7, #32
 800965a:	4618      	mov	r0, r3
 800965c:	f001 ff52 	bl	800b504 <UTIL_MEM_cpy_8>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 8009660:	68bb      	ldr	r3, [r7, #8]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	2b00      	cmp	r3, #0
 8009666:	bf14      	ite	ne
 8009668:	2301      	movne	r3, #1
 800966a:	2300      	moveq	r3, #0
 800966c:	b2db      	uxtb	r3, r3
 800966e:	4618      	mov	r0, r3
 8009670:	f000 fe26 	bl	800a2c0 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8009674:	4b8b      	ldr	r3, [pc, #556]	; (80098a4 <RadioSetRxGenericConfig+0x2c4>)
 8009676:	2200      	movs	r2, #0
 8009678:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 800967c:	68bb      	ldr	r3, [r7, #8]
 800967e:	689b      	ldr	r3, [r3, #8]
 8009680:	4a88      	ldr	r2, [pc, #544]	; (80098a4 <RadioSetRxGenericConfig+0x2c4>)
 8009682:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 8009684:	68bb      	ldr	r3, [r7, #8]
 8009686:	f893 2020 	ldrb.w	r2, [r3, #32]
 800968a:	4b86      	ldr	r3, [pc, #536]	; (80098a4 <RadioSetRxGenericConfig+0x2c4>)
 800968c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 8009690:	68bb      	ldr	r3, [r7, #8]
 8009692:	685b      	ldr	r3, [r3, #4]
 8009694:	4618      	mov	r0, r3
 8009696:	f001 fce5 	bl	800b064 <SUBGRF_GetFskBandwidthRegValue>
 800969a:	4603      	mov	r3, r0
 800969c:	461a      	mov	r2, r3
 800969e:	4b81      	ldr	r3, [pc, #516]	; (80098a4 <RadioSetRxGenericConfig+0x2c4>)
 80096a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80096a4:	4b7f      	ldr	r3, [pc, #508]	; (80098a4 <RadioSetRxGenericConfig+0x2c4>)
 80096a6:	2200      	movs	r2, #0
 80096a8:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 80096aa:	68bb      	ldr	r3, [r7, #8]
 80096ac:	68db      	ldr	r3, [r3, #12]
 80096ae:	b29b      	uxth	r3, r3
 80096b0:	00db      	lsls	r3, r3, #3
 80096b2:	b29a      	uxth	r2, r3
 80096b4:	4b7b      	ldr	r3, [pc, #492]	; (80098a4 <RadioSetRxGenericConfig+0x2c4>)
 80096b6:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 80096b8:	68bb      	ldr	r3, [r7, #8]
 80096ba:	7fda      	ldrb	r2, [r3, #31]
 80096bc:	4b79      	ldr	r3, [pc, #484]	; (80098a4 <RadioSetRxGenericConfig+0x2c4>)
 80096be:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 80096c0:	68bb      	ldr	r3, [r7, #8]
 80096c2:	7f9b      	ldrb	r3, [r3, #30]
 80096c4:	00db      	lsls	r3, r3, #3
 80096c6:	b2da      	uxtb	r2, r3
 80096c8:	4b76      	ldr	r3, [pc, #472]	; (80098a4 <RadioSetRxGenericConfig+0x2c4>)
 80096ca:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 80096cc:	68bb      	ldr	r3, [r7, #8]
 80096ce:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 80096d2:	4b74      	ldr	r3, [pc, #464]	; (80098a4 <RadioSetRxGenericConfig+0x2c4>)
 80096d4:	751a      	strb	r2, [r3, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 80096d6:	68bb      	ldr	r3, [r7, #8]
 80096d8:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d105      	bne.n	80096ec <RadioSetRxGenericConfig+0x10c>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 80096e0:	68bb      	ldr	r3, [r7, #8]
 80096e2:	695b      	ldr	r3, [r3, #20]
 80096e4:	b2da      	uxtb	r2, r3
 80096e6:	4b6f      	ldr	r3, [pc, #444]	; (80098a4 <RadioSetRxGenericConfig+0x2c4>)
 80096e8:	759a      	strb	r2, [r3, #22]
 80096ea:	e00b      	b.n	8009704 <RadioSetRxGenericConfig+0x124>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 80096ec:	68bb      	ldr	r3, [r7, #8]
 80096ee:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80096f2:	2b02      	cmp	r3, #2
 80096f4:	d103      	bne.n	80096fe <RadioSetRxGenericConfig+0x11e>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 80096f6:	4b6b      	ldr	r3, [pc, #428]	; (80098a4 <RadioSetRxGenericConfig+0x2c4>)
 80096f8:	22ff      	movs	r2, #255	; 0xff
 80096fa:	759a      	strb	r2, [r3, #22]
 80096fc:	e002      	b.n	8009704 <RadioSetRxGenericConfig+0x124>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 80096fe:	4b69      	ldr	r3, [pc, #420]	; (80098a4 <RadioSetRxGenericConfig+0x2c4>)
 8009700:	22ff      	movs	r2, #255	; 0xff
 8009702:	759a      	strb	r2, [r3, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 8009704:	68bb      	ldr	r3, [r7, #8]
 8009706:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800970a:	2b02      	cmp	r3, #2
 800970c:	d004      	beq.n	8009718 <RadioSetRxGenericConfig+0x138>
            || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 800970e:	68bb      	ldr	r3, [r7, #8]
 8009710:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8009714:	2b02      	cmp	r3, #2
 8009716:	d12d      	bne.n	8009774 <RadioSetRxGenericConfig+0x194>
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 8009718:	68bb      	ldr	r3, [r7, #8]
 800971a:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800971e:	2bf1      	cmp	r3, #241	; 0xf1
 8009720:	d00c      	beq.n	800973c <RadioSetRxGenericConfig+0x15c>
 8009722:	68bb      	ldr	r3, [r7, #8]
 8009724:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8009728:	2bf2      	cmp	r3, #242	; 0xf2
 800972a:	d007      	beq.n	800973c <RadioSetRxGenericConfig+0x15c>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 800972c:	68bb      	ldr	r3, [r7, #8]
 800972e:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8009732:	2b01      	cmp	r3, #1
 8009734:	d002      	beq.n	800973c <RadioSetRxGenericConfig+0x15c>
                return -1;
 8009736:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800973a:	e10b      	b.n	8009954 <RadioSetRxGenericConfig+0x374>
            ConfigGeneric.rtx = CONFIG_RX;
 800973c:	2300      	movs	r3, #0
 800973e:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.RxConfig = config;
 8009740:	68bb      	ldr	r3, [r7, #8]
 8009742:	61bb      	str	r3, [r7, #24]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 8009744:	4b58      	ldr	r3, [pc, #352]	; (80098a8 <RadioSetRxGenericConfig+0x2c8>)
 8009746:	6819      	ldr	r1, [r3, #0]
 8009748:	f107 0314 	add.w	r3, r7, #20
 800974c:	4a57      	ldr	r2, [pc, #348]	; (80098ac <RadioSetRxGenericConfig+0x2cc>)
 800974e:	4618      	mov	r0, r3
 8009750:	f001 fd48 	bl	800b1e4 <RFW_Init>
 8009754:	4603      	mov	r3, r0
 8009756:	2b00      	cmp	r3, #0
 8009758:	d002      	beq.n	8009760 <RadioSetRxGenericConfig+0x180>
                return -1;
 800975a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800975e:	e0f9      	b.n	8009954 <RadioSetRxGenericConfig+0x374>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8009760:	4b50      	ldr	r3, [pc, #320]	; (80098a4 <RadioSetRxGenericConfig+0x2c4>)
 8009762:	2200      	movs	r2, #0
 8009764:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 8009766:	4b4f      	ldr	r3, [pc, #316]	; (80098a4 <RadioSetRxGenericConfig+0x2c4>)
 8009768:	2201      	movs	r2, #1
 800976a:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 800976c:	4b4d      	ldr	r3, [pc, #308]	; (80098a4 <RadioSetRxGenericConfig+0x2c4>)
 800976e:	2200      	movs	r2, #0
 8009770:	755a      	strb	r2, [r3, #21]
        {
 8009772:	e00e      	b.n	8009792 <RadioSetRxGenericConfig+0x1b2>
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 8009774:	68bb      	ldr	r3, [r7, #8]
 8009776:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 800977a:	4b4a      	ldr	r3, [pc, #296]	; (80098a4 <RadioSetRxGenericConfig+0x2c4>)
 800977c:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 800977e:	68bb      	ldr	r3, [r7, #8]
 8009780:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8009784:	4b47      	ldr	r3, [pc, #284]	; (80098a4 <RadioSetRxGenericConfig+0x2c4>)
 8009786:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 8009788:	68bb      	ldr	r3, [r7, #8]
 800978a:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 800978e:	4b45      	ldr	r3, [pc, #276]	; (80098a4 <RadioSetRxGenericConfig+0x2c4>)
 8009790:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 8009792:	f7ff fa6e 	bl	8008c72 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 8009796:	2000      	movs	r0, #0
 8009798:	f7fe fc0a 	bl	8007fb0 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800979c:	4844      	ldr	r0, [pc, #272]	; (80098b0 <RadioSetRxGenericConfig+0x2d0>)
 800979e:	f001 f82d 	bl	800a7fc <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80097a2:	4844      	ldr	r0, [pc, #272]	; (80098b4 <RadioSetRxGenericConfig+0x2d4>)
 80097a4:	f001 f8fc 	bl	800a9a0 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 80097a8:	f107 0320 	add.w	r3, r7, #32
 80097ac:	4618      	mov	r0, r3
 80097ae:	f000 fbc0 	bl	8009f32 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 80097b2:	68bb      	ldr	r3, [r7, #8]
 80097b4:	8b9b      	ldrh	r3, [r3, #28]
 80097b6:	4618      	mov	r0, r3
 80097b8:	f000 fc0a 	bl	8009fd0 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 80097bc:	68bb      	ldr	r3, [r7, #8]
 80097be:	8b1b      	ldrh	r3, [r3, #24]
 80097c0:	4618      	mov	r0, r3
 80097c2:	f000 fbe5 	bl	8009f90 <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 80097c6:	683b      	ldr	r3, [r7, #0]
 80097c8:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80097cc:	fb03 f202 	mul.w	r2, r3, r2
 80097d0:	68bb      	ldr	r3, [r7, #8]
 80097d2:	689b      	ldr	r3, [r3, #8]
 80097d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80097d8:	4a32      	ldr	r2, [pc, #200]	; (80098a4 <RadioSetRxGenericConfig+0x2c4>)
 80097da:	6093      	str	r3, [r2, #8]
        break;
 80097dc:	e0b9      	b.n	8009952 <RadioSetRxGenericConfig+0x372>
        if( config->lora.PreambleLen == 0 )
 80097de:	68bb      	ldr	r3, [r7, #8]
 80097e0:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d102      	bne.n	80097ec <RadioSetRxGenericConfig+0x20c>
            return -1;
 80097e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80097ea:	e0b3      	b.n	8009954 <RadioSetRxGenericConfig+0x374>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 80097ec:	68bb      	ldr	r3, [r7, #8]
 80097ee:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80097f2:	2b01      	cmp	r3, #1
 80097f4:	d104      	bne.n	8009800 <RadioSetRxGenericConfig+0x220>
            MaxPayloadLength = config->fsk.MaxPayloadLength;
 80097f6:	68bb      	ldr	r3, [r7, #8]
 80097f8:	695b      	ldr	r3, [r3, #20]
 80097fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80097fe:	e002      	b.n	8009806 <RadioSetRxGenericConfig+0x226>
            MaxPayloadLength = 0xFF;
 8009800:	23ff      	movs	r3, #255	; 0xff
 8009802:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 8009806:	68bb      	ldr	r3, [r7, #8]
 8009808:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800980a:	2b00      	cmp	r3, #0
 800980c:	bf14      	ite	ne
 800980e:	2301      	movne	r3, #1
 8009810:	2300      	moveq	r3, #0
 8009812:	b2db      	uxtb	r3, r3
 8009814:	4618      	mov	r0, r3
 8009816:	f000 fd53 	bl	800a2c0 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 800981a:	683b      	ldr	r3, [r7, #0]
 800981c:	b2db      	uxtb	r3, r3
 800981e:	4618      	mov	r0, r3
 8009820:	f000 fd5d 	bl	800a2de <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8009824:	4b1f      	ldr	r3, [pc, #124]	; (80098a4 <RadioSetRxGenericConfig+0x2c4>)
 8009826:	2201      	movs	r2, #1
 8009828:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 800982c:	68bb      	ldr	r3, [r7, #8]
 800982e:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8009832:	4b1c      	ldr	r3, [pc, #112]	; (80098a4 <RadioSetRxGenericConfig+0x2c4>)
 8009834:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 8009838:	68bb      	ldr	r3, [r7, #8]
 800983a:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 800983e:	4b19      	ldr	r3, [pc, #100]	; (80098a4 <RadioSetRxGenericConfig+0x2c4>)
 8009840:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 8009844:	68bb      	ldr	r3, [r7, #8]
 8009846:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 800984a:	4b16      	ldr	r3, [pc, #88]	; (80098a4 <RadioSetRxGenericConfig+0x2c4>)
 800984c:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 8009850:	68bb      	ldr	r3, [r7, #8]
 8009852:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009856:	2b02      	cmp	r3, #2
 8009858:	d010      	beq.n	800987c <RadioSetRxGenericConfig+0x29c>
 800985a:	2b02      	cmp	r3, #2
 800985c:	dc2c      	bgt.n	80098b8 <RadioSetRxGenericConfig+0x2d8>
 800985e:	2b00      	cmp	r3, #0
 8009860:	d002      	beq.n	8009868 <RadioSetRxGenericConfig+0x288>
 8009862:	2b01      	cmp	r3, #1
 8009864:	d005      	beq.n	8009872 <RadioSetRxGenericConfig+0x292>
            break;
 8009866:	e027      	b.n	80098b8 <RadioSetRxGenericConfig+0x2d8>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8009868:	4b0e      	ldr	r3, [pc, #56]	; (80098a4 <RadioSetRxGenericConfig+0x2c4>)
 800986a:	2200      	movs	r2, #0
 800986c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8009870:	e023      	b.n	80098ba <RadioSetRxGenericConfig+0x2da>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8009872:	4b0c      	ldr	r3, [pc, #48]	; (80098a4 <RadioSetRxGenericConfig+0x2c4>)
 8009874:	2201      	movs	r2, #1
 8009876:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800987a:	e01e      	b.n	80098ba <RadioSetRxGenericConfig+0x2da>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 800987c:	68bb      	ldr	r3, [r7, #8]
 800987e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009882:	2b0b      	cmp	r3, #11
 8009884:	d004      	beq.n	8009890 <RadioSetRxGenericConfig+0x2b0>
 8009886:	68bb      	ldr	r3, [r7, #8]
 8009888:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800988c:	2b0c      	cmp	r3, #12
 800988e:	d104      	bne.n	800989a <RadioSetRxGenericConfig+0x2ba>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8009890:	4b04      	ldr	r3, [pc, #16]	; (80098a4 <RadioSetRxGenericConfig+0x2c4>)
 8009892:	2201      	movs	r2, #1
 8009894:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8009898:	e00f      	b.n	80098ba <RadioSetRxGenericConfig+0x2da>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 800989a:	4b02      	ldr	r3, [pc, #8]	; (80098a4 <RadioSetRxGenericConfig+0x2c4>)
 800989c:	2200      	movs	r2, #0
 800989e:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 80098a2:	e00a      	b.n	80098ba <RadioSetRxGenericConfig+0x2da>
 80098a4:	20000a2c 	.word	0x20000a2c
 80098a8:	20000a28 	.word	0x20000a28
 80098ac:	20000aa0 	.word	0x20000aa0
 80098b0:	20000a64 	.word	0x20000a64
 80098b4:	20000a3a 	.word	0x20000a3a
            break;
 80098b8:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 80098ba:	4b28      	ldr	r3, [pc, #160]	; (800995c <RadioSetRxGenericConfig+0x37c>)
 80098bc:	2201      	movs	r2, #1
 80098be:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 80098c0:	68bb      	ldr	r3, [r7, #8]
 80098c2:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 80098c4:	4b25      	ldr	r3, [pc, #148]	; (800995c <RadioSetRxGenericConfig+0x37c>)
 80098c6:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 80098c8:	68bb      	ldr	r3, [r7, #8]
 80098ca:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 80098ce:	4b23      	ldr	r3, [pc, #140]	; (800995c <RadioSetRxGenericConfig+0x37c>)
 80098d0:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 80098d2:	4a22      	ldr	r2, [pc, #136]	; (800995c <RadioSetRxGenericConfig+0x37c>)
 80098d4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80098d8:	77d3      	strb	r3, [r2, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 80098da:	68bb      	ldr	r3, [r7, #8]
 80098dc:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 80098e0:	4b1e      	ldr	r3, [pc, #120]	; (800995c <RadioSetRxGenericConfig+0x37c>)
 80098e2:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 80098e6:	68bb      	ldr	r3, [r7, #8]
 80098e8:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 80098ec:	4b1b      	ldr	r3, [pc, #108]	; (800995c <RadioSetRxGenericConfig+0x37c>)
 80098ee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RadioStandby( );
 80098f2:	f7ff f9be 	bl	8008c72 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 80098f6:	2001      	movs	r0, #1
 80098f8:	f7fe fb5a 	bl	8007fb0 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80098fc:	4818      	ldr	r0, [pc, #96]	; (8009960 <RadioSetRxGenericConfig+0x380>)
 80098fe:	f000 ff7d 	bl	800a7fc <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8009902:	4818      	ldr	r0, [pc, #96]	; (8009964 <RadioSetRxGenericConfig+0x384>)
 8009904:	f001 f84c 	bl	800a9a0 <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8009908:	4b14      	ldr	r3, [pc, #80]	; (800995c <RadioSetRxGenericConfig+0x37c>)
 800990a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800990e:	2b01      	cmp	r3, #1
 8009910:	d10d      	bne.n	800992e <RadioSetRxGenericConfig+0x34e>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 8009912:	f240 7036 	movw	r0, #1846	; 0x736
 8009916:	f001 f99f 	bl	800ac58 <SUBGRF_ReadRegister>
 800991a:	4603      	mov	r3, r0
 800991c:	f023 0304 	bic.w	r3, r3, #4
 8009920:	b2db      	uxtb	r3, r3
 8009922:	4619      	mov	r1, r3
 8009924:	f240 7036 	movw	r0, #1846	; 0x736
 8009928:	f001 f982 	bl	800ac30 <SUBGRF_WriteRegister>
 800992c:	e00c      	b.n	8009948 <RadioSetRxGenericConfig+0x368>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 800992e:	f240 7036 	movw	r0, #1846	; 0x736
 8009932:	f001 f991 	bl	800ac58 <SUBGRF_ReadRegister>
 8009936:	4603      	mov	r3, r0
 8009938:	f043 0304 	orr.w	r3, r3, #4
 800993c:	b2db      	uxtb	r3, r3
 800993e:	4619      	mov	r1, r3
 8009940:	f240 7036 	movw	r0, #1846	; 0x736
 8009944:	f001 f974 	bl	800ac30 <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 8009948:	4b04      	ldr	r3, [pc, #16]	; (800995c <RadioSetRxGenericConfig+0x37c>)
 800994a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800994e:	609a      	str	r2, [r3, #8]
        break;
 8009950:	bf00      	nop
    }
    return status;
 8009952:	6abb      	ldr	r3, [r7, #40]	; 0x28
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 8009954:	4618      	mov	r0, r3
 8009956:	3730      	adds	r7, #48	; 0x30
 8009958:	46bd      	mov	sp, r7
 800995a:	bd80      	pop	{r7, pc}
 800995c:	20000a2c 	.word	0x20000a2c
 8009960:	20000a64 	.word	0x20000a64
 8009964:	20000a3a 	.word	0x20000a3a

08009968 <RadioSetTxGenericConfig>:

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t *config, int8_t power,
                                        uint32_t timeout )
{
 8009968:	b580      	push	{r7, lr}
 800996a:	b08e      	sub	sp, #56	; 0x38
 800996c:	af00      	add	r7, sp, #0
 800996e:	60b9      	str	r1, [r7, #8]
 8009970:	607b      	str	r3, [r7, #4]
 8009972:	4603      	mov	r3, r0
 8009974:	73fb      	strb	r3, [r7, #15]
 8009976:	4613      	mov	r3, r2
 8009978:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    uint8_t syncword[8] = {0};
 800997a:	2300      	movs	r3, #0
 800997c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800997e:	2300      	movs	r3, #0
 8009980:	633b      	str	r3, [r7, #48]	; 0x30
    RadioModems_t radio_modem;
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 8009982:	f001 fc3c 	bl	800b1fe <RFW_DeInit>
    switch( modem )
 8009986:	7bfb      	ldrb	r3, [r7, #15]
 8009988:	2b03      	cmp	r3, #3
 800998a:	f200 8204 	bhi.w	8009d96 <RadioSetTxGenericConfig+0x42e>
 800998e:	a201      	add	r2, pc, #4	; (adr r2, 8009994 <RadioSetTxGenericConfig+0x2c>)
 8009990:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009994:	08009b19 	.word	0x08009b19
 8009998:	08009c61 	.word	0x08009c61
 800999c:	08009d59 	.word	0x08009d59
 80099a0:	080099a5 	.word	0x080099a5
    {
    case GENERIC_MSK:
        if( config->msk.SyncWordLength > 8 )
 80099a4:	68bb      	ldr	r3, [r7, #8]
 80099a6:	7c9b      	ldrb	r3, [r3, #18]
 80099a8:	2b08      	cmp	r3, #8
 80099aa:	d902      	bls.n	80099b2 <RadioSetTxGenericConfig+0x4a>
        {
            return -1;
 80099ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80099b0:	e206      	b.n	8009dc0 <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8( syncword, config->msk.SyncWord, config->msk.SyncWordLength );
 80099b2:	68bb      	ldr	r3, [r7, #8]
 80099b4:	6899      	ldr	r1, [r3, #8]
 80099b6:	68bb      	ldr	r3, [r7, #8]
 80099b8:	7c9b      	ldrb	r3, [r3, #18]
 80099ba:	b29a      	uxth	r2, r3
 80099bc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80099c0:	4618      	mov	r0, r3
 80099c2:	f001 fd9f 	bl	800b504 <UTIL_MEM_cpy_8>
        }
        if( ( config->msk.BitRate == 0 ) )
 80099c6:	68bb      	ldr	r3, [r7, #8]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d102      	bne.n	80099d4 <RadioSetTxGenericConfig+0x6c>
        {
            return -1;
 80099ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80099d2:	e1f5      	b.n	8009dc0 <RadioSetTxGenericConfig+0x458>
        }
        else if( config->msk.BitRate <= 10000 )
 80099d4:	68bb      	ldr	r3, [r7, #8]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	f242 7210 	movw	r2, #10000	; 0x2710
 80099dc:	4293      	cmp	r3, r2
 80099de:	d813      	bhi.n	8009a08 <RadioSetTxGenericConfig+0xa0>
        {
            /*max msk modulator datarate is 10kbps*/
            radio_modem = MODEM_MSK;
 80099e0:	2302      	movs	r3, #2
 80099e2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GMSK;
 80099e6:	4b99      	ldr	r3, [pc, #612]	; (8009c4c <RadioSetTxGenericConfig+0x2e4>)
 80099e8:	2203      	movs	r2, #3
 80099ea:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GMSK;
 80099ec:	4b97      	ldr	r3, [pc, #604]	; (8009c4c <RadioSetTxGenericConfig+0x2e4>)
 80099ee:	2203      	movs	r2, #3
 80099f0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 80099f4:	68bb      	ldr	r3, [r7, #8]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	4a94      	ldr	r2, [pc, #592]	; (8009c4c <RadioSetTxGenericConfig+0x2e4>)
 80099fa:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 80099fc:	68bb      	ldr	r3, [r7, #8]
 80099fe:	7cda      	ldrb	r2, [r3, #19]
 8009a00:	4b92      	ldr	r3, [pc, #584]	; (8009c4c <RadioSetTxGenericConfig+0x2e4>)
 8009a02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009a06:	e017      	b.n	8009a38 <RadioSetTxGenericConfig+0xd0>
        }
        else
        {
            radio_modem = MODEM_FSK;
 8009a08:	2300      	movs	r3, #0
 8009a0a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8009a0e:	4b8f      	ldr	r3, [pc, #572]	; (8009c4c <RadioSetTxGenericConfig+0x2e4>)
 8009a10:	2200      	movs	r2, #0
 8009a12:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8009a14:	4b8d      	ldr	r3, [pc, #564]	; (8009c4c <RadioSetTxGenericConfig+0x2e4>)
 8009a16:	2200      	movs	r2, #0
 8009a18:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 8009a1c:	68bb      	ldr	r3, [r7, #8]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	4a8a      	ldr	r2, [pc, #552]	; (8009c4c <RadioSetTxGenericConfig+0x2e4>)
 8009a22:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 8009a24:	68bb      	ldr	r3, [r7, #8]
 8009a26:	7cda      	ldrb	r2, [r3, #19]
 8009a28:	4b88      	ldr	r3, [pc, #544]	; (8009c4c <RadioSetTxGenericConfig+0x2e4>)
 8009a2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            /*do msk with gfsk modulator*/
            SubgRf.ModulationParams.Params.Gfsk.Fdev = config->msk.BitRate / 4;
 8009a2e:	68bb      	ldr	r3, [r7, #8]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	089b      	lsrs	r3, r3, #2
 8009a34:	4a85      	ldr	r2, [pc, #532]	; (8009c4c <RadioSetTxGenericConfig+0x2e4>)
 8009a36:	6413      	str	r3, [r2, #64]	; 0x40
        }

        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->msk.PreambleLen ) << 3; // convert byte into bit
 8009a38:	68bb      	ldr	r3, [r7, #8]
 8009a3a:	685b      	ldr	r3, [r3, #4]
 8009a3c:	b29b      	uxth	r3, r3
 8009a3e:	00db      	lsls	r3, r3, #3
 8009a40:	b29a      	uxth	r2, r3
 8009a42:	4b82      	ldr	r3, [pc, #520]	; (8009c4c <RadioSetTxGenericConfig+0x2e4>)
 8009a44:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 8009a46:	4b81      	ldr	r3, [pc, #516]	; (8009c4c <RadioSetTxGenericConfig+0x2e4>)
 8009a48:	2204      	movs	r2, #4
 8009a4a:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->msk.SyncWordLength ) << 3; // convert byte into bit
 8009a4c:	68bb      	ldr	r3, [r7, #8]
 8009a4e:	7c9b      	ldrb	r3, [r3, #18]
 8009a50:	00db      	lsls	r3, r3, #3
 8009a52:	b2da      	uxtb	r2, r3
 8009a54:	4b7d      	ldr	r3, [pc, #500]	; (8009c4c <RadioSetTxGenericConfig+0x2e4>)
 8009a56:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 8009a58:	4b7c      	ldr	r3, [pc, #496]	; (8009c4c <RadioSetTxGenericConfig+0x2e4>)
 8009a5a:	2200      	movs	r2, #0
 8009a5c:	751a      	strb	r2, [r3, #20]

        if( ( config->msk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 8009a5e:	68bb      	ldr	r3, [r7, #8]
 8009a60:	7d9b      	ldrb	r3, [r3, #22]
 8009a62:	2b02      	cmp	r3, #2
 8009a64:	d003      	beq.n	8009a6e <RadioSetTxGenericConfig+0x106>
            || ( config->msk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8009a66:	68bb      	ldr	r3, [r7, #8]
 8009a68:	7d1b      	ldrb	r3, [r3, #20]
 8009a6a:	2b02      	cmp	r3, #2
 8009a6c:	d12b      	bne.n	8009ac6 <RadioSetTxGenericConfig+0x15e>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 8009a6e:	68bb      	ldr	r3, [r7, #8]
 8009a70:	7d5b      	ldrb	r3, [r3, #21]
 8009a72:	2bf1      	cmp	r3, #241	; 0xf1
 8009a74:	d00a      	beq.n	8009a8c <RadioSetTxGenericConfig+0x124>
 8009a76:	68bb      	ldr	r3, [r7, #8]
 8009a78:	7d5b      	ldrb	r3, [r3, #21]
 8009a7a:	2bf2      	cmp	r3, #242	; 0xf2
 8009a7c:	d006      	beq.n	8009a8c <RadioSetTxGenericConfig+0x124>
                && ( config->msk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8009a7e:	68bb      	ldr	r3, [r7, #8]
 8009a80:	7d5b      	ldrb	r3, [r3, #21]
 8009a82:	2b01      	cmp	r3, #1
 8009a84:	d002      	beq.n	8009a8c <RadioSetTxGenericConfig+0x124>
            {
                return -1;
 8009a86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009a8a:	e199      	b.n	8009dc0 <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            /*msk and fsk are union, no need for copy as fsk/msk struct are on same address*/
            ConfigGeneric.TxConfig = config;
 8009a8c:	68bb      	ldr	r3, [r7, #8]
 8009a8e:	623b      	str	r3, [r7, #32]
            ConfigGeneric.rtx = CONFIG_TX;
 8009a90:	2301      	movs	r3, #1
 8009a92:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 8009a96:	4b6e      	ldr	r3, [pc, #440]	; (8009c50 <RadioSetTxGenericConfig+0x2e8>)
 8009a98:	6819      	ldr	r1, [r3, #0]
 8009a9a:	f107 0320 	add.w	r3, r7, #32
 8009a9e:	4a6d      	ldr	r2, [pc, #436]	; (8009c54 <RadioSetTxGenericConfig+0x2ec>)
 8009aa0:	4618      	mov	r0, r3
 8009aa2:	f001 fb9f 	bl	800b1e4 <RFW_Init>
 8009aa6:	4603      	mov	r3, r0
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d002      	beq.n	8009ab2 <RadioSetTxGenericConfig+0x14a>
            {
                return -1;
 8009aac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009ab0:	e186      	b.n	8009dc0 <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8009ab2:	4b66      	ldr	r3, [pc, #408]	; (8009c4c <RadioSetTxGenericConfig+0x2e4>)
 8009ab4:	2200      	movs	r2, #0
 8009ab6:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 8009ab8:	4b64      	ldr	r3, [pc, #400]	; (8009c4c <RadioSetTxGenericConfig+0x2e4>)
 8009aba:	2201      	movs	r2, #1
 8009abc:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8009abe:	4b63      	ldr	r3, [pc, #396]	; (8009c4c <RadioSetTxGenericConfig+0x2e4>)
 8009ac0:	2200      	movs	r2, #0
 8009ac2:	755a      	strb	r2, [r3, #21]
        {
 8009ac4:	e00b      	b.n	8009ade <RadioSetTxGenericConfig+0x176>
        }
        else
        {
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->msk.CrcLength;
 8009ac6:	68bb      	ldr	r3, [r7, #8]
 8009ac8:	7d5a      	ldrb	r2, [r3, #21]
 8009aca:	4b60      	ldr	r3, [pc, #384]	; (8009c4c <RadioSetTxGenericConfig+0x2e4>)
 8009acc:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->msk.Whitening;
 8009ace:	68bb      	ldr	r3, [r7, #8]
 8009ad0:	7d9a      	ldrb	r2, [r3, #22]
 8009ad2:	4b5e      	ldr	r3, [pc, #376]	; (8009c4c <RadioSetTxGenericConfig+0x2e4>)
 8009ad4:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->msk.HeaderType;
 8009ad6:	68bb      	ldr	r3, [r7, #8]
 8009ad8:	7d1a      	ldrb	r2, [r3, #20]
 8009ada:	4b5c      	ldr	r3, [pc, #368]	; (8009c4c <RadioSetTxGenericConfig+0x2e4>)
 8009adc:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 8009ade:	f7ff f8c8 	bl	8008c72 <RadioStandby>
        RadioSetModem( radio_modem );
 8009ae2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009ae6:	4618      	mov	r0, r3
 8009ae8:	f7fe fa62 	bl	8007fb0 <RadioSetModem>

        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8009aec:	485a      	ldr	r0, [pc, #360]	; (8009c58 <RadioSetTxGenericConfig+0x2f0>)
 8009aee:	f000 fe85 	bl	800a7fc <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8009af2:	485a      	ldr	r0, [pc, #360]	; (8009c5c <RadioSetTxGenericConfig+0x2f4>)
 8009af4:	f000 ff54 	bl	800a9a0 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8009af8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009afc:	4618      	mov	r0, r3
 8009afe:	f000 fa18 	bl	8009f32 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->msk.whiteSeed );
 8009b02:	68bb      	ldr	r3, [r7, #8]
 8009b04:	8a1b      	ldrh	r3, [r3, #16]
 8009b06:	4618      	mov	r0, r3
 8009b08:	f000 fa62 	bl	8009fd0 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->msk.CrcPolynomial );
 8009b0c:	68bb      	ldr	r3, [r7, #8]
 8009b0e:	899b      	ldrh	r3, [r3, #12]
 8009b10:	4618      	mov	r0, r3
 8009b12:	f000 fa3d 	bl	8009f90 <SUBGRF_SetCrcPolynomial>
        break;
 8009b16:	e13f      	b.n	8009d98 <RadioSetTxGenericConfig+0x430>
    case GENERIC_FSK:
        if( config->fsk.BitRate == 0 )
 8009b18:	68bb      	ldr	r3, [r7, #8]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d102      	bne.n	8009b26 <RadioSetTxGenericConfig+0x1be>
        {
            return -1;
 8009b20:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009b24:	e14c      	b.n	8009dc0 <RadioSetTxGenericConfig+0x458>
        }
        if( config->fsk.SyncWordLength > 8 )
 8009b26:	68bb      	ldr	r3, [r7, #8]
 8009b28:	7c9b      	ldrb	r3, [r3, #18]
 8009b2a:	2b08      	cmp	r3, #8
 8009b2c:	d902      	bls.n	8009b34 <RadioSetTxGenericConfig+0x1cc>
        {
            return -1;
 8009b2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009b32:	e145      	b.n	8009dc0 <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 8009b34:	68bb      	ldr	r3, [r7, #8]
 8009b36:	6899      	ldr	r1, [r3, #8]
 8009b38:	68bb      	ldr	r3, [r7, #8]
 8009b3a:	7c9b      	ldrb	r3, [r3, #18]
 8009b3c:	b29a      	uxth	r2, r3
 8009b3e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009b42:	4618      	mov	r0, r3
 8009b44:	f001 fcde 	bl	800b504 <UTIL_MEM_cpy_8>
        }
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8009b48:	4b40      	ldr	r3, [pc, #256]	; (8009c4c <RadioSetTxGenericConfig+0x2e4>)
 8009b4a:	2200      	movs	r2, #0
 8009b4c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 8009b50:	68bb      	ldr	r3, [r7, #8]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	4a3d      	ldr	r2, [pc, #244]	; (8009c4c <RadioSetTxGenericConfig+0x2e4>)
 8009b56:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 8009b58:	68bb      	ldr	r3, [r7, #8]
 8009b5a:	7cda      	ldrb	r2, [r3, #19]
 8009b5c:	4b3b      	ldr	r3, [pc, #236]	; (8009c4c <RadioSetTxGenericConfig+0x2e4>)
 8009b5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 8009b62:	68bb      	ldr	r3, [r7, #8]
 8009b64:	699b      	ldr	r3, [r3, #24]
 8009b66:	4a39      	ldr	r2, [pc, #228]	; (8009c4c <RadioSetTxGenericConfig+0x2e4>)
 8009b68:	6413      	str	r3, [r2, #64]	; 0x40

        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8009b6a:	4b38      	ldr	r3, [pc, #224]	; (8009c4c <RadioSetTxGenericConfig+0x2e4>)
 8009b6c:	2200      	movs	r2, #0
 8009b6e:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 8009b70:	68bb      	ldr	r3, [r7, #8]
 8009b72:	685b      	ldr	r3, [r3, #4]
 8009b74:	b29b      	uxth	r3, r3
 8009b76:	00db      	lsls	r3, r3, #3
 8009b78:	b29a      	uxth	r2, r3
 8009b7a:	4b34      	ldr	r3, [pc, #208]	; (8009c4c <RadioSetTxGenericConfig+0x2e4>)
 8009b7c:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 8009b7e:	4b33      	ldr	r3, [pc, #204]	; (8009c4c <RadioSetTxGenericConfig+0x2e4>)
 8009b80:	2204      	movs	r2, #4
 8009b82:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 8009b84:	68bb      	ldr	r3, [r7, #8]
 8009b86:	7c9b      	ldrb	r3, [r3, #18]
 8009b88:	00db      	lsls	r3, r3, #3
 8009b8a:	b2da      	uxtb	r2, r3
 8009b8c:	4b2f      	ldr	r3, [pc, #188]	; (8009c4c <RadioSetTxGenericConfig+0x2e4>)
 8009b8e:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 8009b90:	4b2e      	ldr	r3, [pc, #184]	; (8009c4c <RadioSetTxGenericConfig+0x2e4>)
 8009b92:	2200      	movs	r2, #0
 8009b94:	751a      	strb	r2, [r3, #20]

        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 8009b96:	68bb      	ldr	r3, [r7, #8]
 8009b98:	7d9b      	ldrb	r3, [r3, #22]
 8009b9a:	2b02      	cmp	r3, #2
 8009b9c:	d003      	beq.n	8009ba6 <RadioSetTxGenericConfig+0x23e>
            || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8009b9e:	68bb      	ldr	r3, [r7, #8]
 8009ba0:	7d1b      	ldrb	r3, [r3, #20]
 8009ba2:	2b02      	cmp	r3, #2
 8009ba4:	d12a      	bne.n	8009bfc <RadioSetTxGenericConfig+0x294>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 8009ba6:	68bb      	ldr	r3, [r7, #8]
 8009ba8:	7d5b      	ldrb	r3, [r3, #21]
 8009baa:	2bf1      	cmp	r3, #241	; 0xf1
 8009bac:	d00a      	beq.n	8009bc4 <RadioSetTxGenericConfig+0x25c>
 8009bae:	68bb      	ldr	r3, [r7, #8]
 8009bb0:	7d5b      	ldrb	r3, [r3, #21]
 8009bb2:	2bf2      	cmp	r3, #242	; 0xf2
 8009bb4:	d006      	beq.n	8009bc4 <RadioSetTxGenericConfig+0x25c>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8009bb6:	68bb      	ldr	r3, [r7, #8]
 8009bb8:	7d5b      	ldrb	r3, [r3, #21]
 8009bba:	2b01      	cmp	r3, #1
 8009bbc:	d002      	beq.n	8009bc4 <RadioSetTxGenericConfig+0x25c>
            {
                return -1;
 8009bbe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009bc2:	e0fd      	b.n	8009dc0 <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            ConfigGeneric.rtx = CONFIG_TX;
 8009bc4:	2301      	movs	r3, #1
 8009bc6:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.TxConfig = config;
 8009bc8:	68bb      	ldr	r3, [r7, #8]
 8009bca:	617b      	str	r3, [r7, #20]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 8009bcc:	4b20      	ldr	r3, [pc, #128]	; (8009c50 <RadioSetTxGenericConfig+0x2e8>)
 8009bce:	6819      	ldr	r1, [r3, #0]
 8009bd0:	f107 0314 	add.w	r3, r7, #20
 8009bd4:	4a1f      	ldr	r2, [pc, #124]	; (8009c54 <RadioSetTxGenericConfig+0x2ec>)
 8009bd6:	4618      	mov	r0, r3
 8009bd8:	f001 fb04 	bl	800b1e4 <RFW_Init>
 8009bdc:	4603      	mov	r3, r0
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d002      	beq.n	8009be8 <RadioSetTxGenericConfig+0x280>
            {
                return -1;
 8009be2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009be6:	e0eb      	b.n	8009dc0 <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8009be8:	4b18      	ldr	r3, [pc, #96]	; (8009c4c <RadioSetTxGenericConfig+0x2e4>)
 8009bea:	2200      	movs	r2, #0
 8009bec:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 8009bee:	4b17      	ldr	r3, [pc, #92]	; (8009c4c <RadioSetTxGenericConfig+0x2e4>)
 8009bf0:	2201      	movs	r2, #1
 8009bf2:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8009bf4:	4b15      	ldr	r3, [pc, #84]	; (8009c4c <RadioSetTxGenericConfig+0x2e4>)
 8009bf6:	2200      	movs	r2, #0
 8009bf8:	755a      	strb	r2, [r3, #21]
        {
 8009bfa:	e00b      	b.n	8009c14 <RadioSetTxGenericConfig+0x2ac>
        }
        else
        {
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 8009bfc:	68bb      	ldr	r3, [r7, #8]
 8009bfe:	7d5a      	ldrb	r2, [r3, #21]
 8009c00:	4b12      	ldr	r3, [pc, #72]	; (8009c4c <RadioSetTxGenericConfig+0x2e4>)
 8009c02:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 8009c04:	68bb      	ldr	r3, [r7, #8]
 8009c06:	7d9a      	ldrb	r2, [r3, #22]
 8009c08:	4b10      	ldr	r3, [pc, #64]	; (8009c4c <RadioSetTxGenericConfig+0x2e4>)
 8009c0a:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 8009c0c:	68bb      	ldr	r3, [r7, #8]
 8009c0e:	7d1a      	ldrb	r2, [r3, #20]
 8009c10:	4b0e      	ldr	r3, [pc, #56]	; (8009c4c <RadioSetTxGenericConfig+0x2e4>)
 8009c12:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 8009c14:	f7ff f82d 	bl	8008c72 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 8009c18:	2000      	movs	r0, #0
 8009c1a:	f7fe f9c9 	bl	8007fb0 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8009c1e:	480e      	ldr	r0, [pc, #56]	; (8009c58 <RadioSetTxGenericConfig+0x2f0>)
 8009c20:	f000 fdec 	bl	800a7fc <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8009c24:	480d      	ldr	r0, [pc, #52]	; (8009c5c <RadioSetTxGenericConfig+0x2f4>)
 8009c26:	f000 febb 	bl	800a9a0 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8009c2a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009c2e:	4618      	mov	r0, r3
 8009c30:	f000 f97f 	bl	8009f32 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 8009c34:	68bb      	ldr	r3, [r7, #8]
 8009c36:	8a1b      	ldrh	r3, [r3, #16]
 8009c38:	4618      	mov	r0, r3
 8009c3a:	f000 f9c9 	bl	8009fd0 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 8009c3e:	68bb      	ldr	r3, [r7, #8]
 8009c40:	899b      	ldrh	r3, [r3, #12]
 8009c42:	4618      	mov	r0, r3
 8009c44:	f000 f9a4 	bl	8009f90 <SUBGRF_SetCrcPolynomial>
        break;
 8009c48:	e0a6      	b.n	8009d98 <RadioSetTxGenericConfig+0x430>
 8009c4a:	bf00      	nop
 8009c4c:	20000a2c 	.word	0x20000a2c
 8009c50:	20000a28 	.word	0x20000a28
 8009c54:	20000a88 	.word	0x20000a88
 8009c58:	20000a64 	.word	0x20000a64
 8009c5c:	20000a3a 	.word	0x20000a3a
    case GENERIC_LORA:
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8009c60:	4b59      	ldr	r3, [pc, #356]	; (8009dc8 <RadioSetTxGenericConfig+0x460>)
 8009c62:	2201      	movs	r2, #1
 8009c64:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 8009c68:	68bb      	ldr	r3, [r7, #8]
 8009c6a:	781a      	ldrb	r2, [r3, #0]
 8009c6c:	4b56      	ldr	r3, [pc, #344]	; (8009dc8 <RadioSetTxGenericConfig+0x460>)
 8009c6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 8009c72:	68bb      	ldr	r3, [r7, #8]
 8009c74:	785a      	ldrb	r2, [r3, #1]
 8009c76:	4b54      	ldr	r3, [pc, #336]	; (8009dc8 <RadioSetTxGenericConfig+0x460>)
 8009c78:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 8009c7c:	68bb      	ldr	r3, [r7, #8]
 8009c7e:	789a      	ldrb	r2, [r3, #2]
 8009c80:	4b51      	ldr	r3, [pc, #324]	; (8009dc8 <RadioSetTxGenericConfig+0x460>)
 8009c82:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 8009c86:	68bb      	ldr	r3, [r7, #8]
 8009c88:	78db      	ldrb	r3, [r3, #3]
 8009c8a:	2b02      	cmp	r3, #2
 8009c8c:	d010      	beq.n	8009cb0 <RadioSetTxGenericConfig+0x348>
 8009c8e:	2b02      	cmp	r3, #2
 8009c90:	dc20      	bgt.n	8009cd4 <RadioSetTxGenericConfig+0x36c>
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d002      	beq.n	8009c9c <RadioSetTxGenericConfig+0x334>
 8009c96:	2b01      	cmp	r3, #1
 8009c98:	d005      	beq.n	8009ca6 <RadioSetTxGenericConfig+0x33e>
            {
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
            }
            break;
        default:
            break;
 8009c9a:	e01b      	b.n	8009cd4 <RadioSetTxGenericConfig+0x36c>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8009c9c:	4b4a      	ldr	r3, [pc, #296]	; (8009dc8 <RadioSetTxGenericConfig+0x460>)
 8009c9e:	2200      	movs	r2, #0
 8009ca0:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8009ca4:	e017      	b.n	8009cd6 <RadioSetTxGenericConfig+0x36e>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8009ca6:	4b48      	ldr	r3, [pc, #288]	; (8009dc8 <RadioSetTxGenericConfig+0x460>)
 8009ca8:	2201      	movs	r2, #1
 8009caa:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8009cae:	e012      	b.n	8009cd6 <RadioSetTxGenericConfig+0x36e>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 8009cb0:	68bb      	ldr	r3, [r7, #8]
 8009cb2:	781b      	ldrb	r3, [r3, #0]
 8009cb4:	2b0b      	cmp	r3, #11
 8009cb6:	d003      	beq.n	8009cc0 <RadioSetTxGenericConfig+0x358>
 8009cb8:	68bb      	ldr	r3, [r7, #8]
 8009cba:	781b      	ldrb	r3, [r3, #0]
 8009cbc:	2b0c      	cmp	r3, #12
 8009cbe:	d104      	bne.n	8009cca <RadioSetTxGenericConfig+0x362>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8009cc0:	4b41      	ldr	r3, [pc, #260]	; (8009dc8 <RadioSetTxGenericConfig+0x460>)
 8009cc2:	2201      	movs	r2, #1
 8009cc4:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8009cc8:	e005      	b.n	8009cd6 <RadioSetTxGenericConfig+0x36e>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8009cca:	4b3f      	ldr	r3, [pc, #252]	; (8009dc8 <RadioSetTxGenericConfig+0x460>)
 8009ccc:	2200      	movs	r2, #0
 8009cce:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8009cd2:	e000      	b.n	8009cd6 <RadioSetTxGenericConfig+0x36e>
            break;
 8009cd4:	bf00      	nop
        }

        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8009cd6:	4b3c      	ldr	r3, [pc, #240]	; (8009dc8 <RadioSetTxGenericConfig+0x460>)
 8009cd8:	2201      	movs	r2, #1
 8009cda:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 8009cdc:	68bb      	ldr	r3, [r7, #8]
 8009cde:	889a      	ldrh	r2, [r3, #4]
 8009ce0:	4b39      	ldr	r3, [pc, #228]	; (8009dc8 <RadioSetTxGenericConfig+0x460>)
 8009ce2:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 8009ce4:	68bb      	ldr	r3, [r7, #8]
 8009ce6:	799a      	ldrb	r2, [r3, #6]
 8009ce8:	4b37      	ldr	r3, [pc, #220]	; (8009dc8 <RadioSetTxGenericConfig+0x460>)
 8009cea:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 8009cec:	68bb      	ldr	r3, [r7, #8]
 8009cee:	79da      	ldrb	r2, [r3, #7]
 8009cf0:	4b35      	ldr	r3, [pc, #212]	; (8009dc8 <RadioSetTxGenericConfig+0x460>)
 8009cf2:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 8009cf6:	68bb      	ldr	r3, [r7, #8]
 8009cf8:	7a1a      	ldrb	r2, [r3, #8]
 8009cfa:	4b33      	ldr	r3, [pc, #204]	; (8009dc8 <RadioSetTxGenericConfig+0x460>)
 8009cfc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        RadioStandby( );
 8009d00:	f7fe ffb7 	bl	8008c72 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 8009d04:	2001      	movs	r0, #1
 8009d06:	f7fe f953 	bl	8007fb0 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8009d0a:	4830      	ldr	r0, [pc, #192]	; (8009dcc <RadioSetTxGenericConfig+0x464>)
 8009d0c:	f000 fd76 	bl	800a7fc <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8009d10:	482f      	ldr	r0, [pc, #188]	; (8009dd0 <RadioSetTxGenericConfig+0x468>)
 8009d12:	f000 fe45 	bl	800a9a0 <SUBGRF_SetPacketParams>

        /* WORKAROUND - Modulation Quality with 500 kHz LoRa Bandwidth, see STM32WL Erratasheet */
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 8009d16:	4b2c      	ldr	r3, [pc, #176]	; (8009dc8 <RadioSetTxGenericConfig+0x460>)
 8009d18:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009d1c:	2b06      	cmp	r3, #6
 8009d1e:	d10d      	bne.n	8009d3c <RadioSetTxGenericConfig+0x3d4>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 8009d20:	f640 0089 	movw	r0, #2185	; 0x889
 8009d24:	f000 ff98 	bl	800ac58 <SUBGRF_ReadRegister>
 8009d28:	4603      	mov	r3, r0
 8009d2a:	f023 0304 	bic.w	r3, r3, #4
 8009d2e:	b2db      	uxtb	r3, r3
 8009d30:	4619      	mov	r1, r3
 8009d32:	f640 0089 	movw	r0, #2185	; 0x889
 8009d36:	f000 ff7b 	bl	800ac30 <SUBGRF_WriteRegister>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
        }
        /* WORKAROUND END */
        break;
 8009d3a:	e02d      	b.n	8009d98 <RadioSetTxGenericConfig+0x430>
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 8009d3c:	f640 0089 	movw	r0, #2185	; 0x889
 8009d40:	f000 ff8a 	bl	800ac58 <SUBGRF_ReadRegister>
 8009d44:	4603      	mov	r3, r0
 8009d46:	f043 0304 	orr.w	r3, r3, #4
 8009d4a:	b2db      	uxtb	r3, r3
 8009d4c:	4619      	mov	r1, r3
 8009d4e:	f640 0089 	movw	r0, #2185	; 0x889
 8009d52:	f000 ff6d 	bl	800ac30 <SUBGRF_WriteRegister>
        break;
 8009d56:	e01f      	b.n	8009d98 <RadioSetTxGenericConfig+0x430>
    case GENERIC_BPSK:
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 8009d58:	68bb      	ldr	r3, [r7, #8]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d004      	beq.n	8009d6a <RadioSetTxGenericConfig+0x402>
 8009d60:	68bb      	ldr	r3, [r7, #8]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009d68:	d902      	bls.n	8009d70 <RadioSetTxGenericConfig+0x408>
        {
            return -1;
 8009d6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009d6e:	e027      	b.n	8009dc0 <RadioSetTxGenericConfig+0x458>
        }
        RadioSetModem( MODEM_BPSK );
 8009d70:	2003      	movs	r0, #3
 8009d72:	f7fe f91d 	bl	8007fb0 <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 8009d76:	4b14      	ldr	r3, [pc, #80]	; (8009dc8 <RadioSetTxGenericConfig+0x460>)
 8009d78:	2202      	movs	r2, #2
 8009d7a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 8009d7e:	68bb      	ldr	r3, [r7, #8]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	4a11      	ldr	r2, [pc, #68]	; (8009dc8 <RadioSetTxGenericConfig+0x460>)
 8009d84:	6493      	str	r3, [r2, #72]	; 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 8009d86:	4b10      	ldr	r3, [pc, #64]	; (8009dc8 <RadioSetTxGenericConfig+0x460>)
 8009d88:	2216      	movs	r2, #22
 8009d8a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8009d8e:	480f      	ldr	r0, [pc, #60]	; (8009dcc <RadioSetTxGenericConfig+0x464>)
 8009d90:	f000 fd34 	bl	800a7fc <SUBGRF_SetModulationParams>
        break;
 8009d94:	e000      	b.n	8009d98 <RadioSetTxGenericConfig+0x430>
    default:
        break;
 8009d96:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 8009d98:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009d9c:	4618      	mov	r0, r3
 8009d9e:	f001 f863 	bl	800ae68 <SUBGRF_SetRfTxPower>
 8009da2:	4603      	mov	r3, r0
 8009da4:	461a      	mov	r2, r3
 8009da6:	4b08      	ldr	r3, [pc, #32]	; (8009dc8 <RadioSetTxGenericConfig+0x460>)
 8009da8:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 8009dac:	4b06      	ldr	r3, [pc, #24]	; (8009dc8 <RadioSetTxGenericConfig+0x460>)
 8009dae:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8009db2:	4618      	mov	r0, r3
 8009db4:	f001 fa37 	bl	800b226 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 8009db8:	4a03      	ldr	r2, [pc, #12]	; (8009dc8 <RadioSetTxGenericConfig+0x460>)
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	6053      	str	r3, [r2, #4]
    return 0;
 8009dbe:	2300      	movs	r3, #0
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 8009dc0:	4618      	mov	r0, r3
 8009dc2:	3738      	adds	r7, #56	; 0x38
 8009dc4:	46bd      	mov	sp, r7
 8009dc6:	bd80      	pop	{r7, pc}
 8009dc8:	20000a2c 	.word	0x20000a2c
 8009dcc:	20000a64 	.word	0x20000a64
 8009dd0:	20000a3a 	.word	0x20000a3a

08009dd4 <RadioLrFhssSetCfg>:
    return ( prbs31_val - 1 ) % ( max );
}
#endif /* RADIO_LR_FHSS_IS_ON == 1 */

static radio_status_t RadioLrFhssSetCfg( const radio_lr_fhss_cfg_params_t *cfg_params )
{
 8009dd4:	b480      	push	{r7}
 8009dd6:	b085      	sub	sp, #20
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	6078      	str	r0, [r7, #4]
    radio_status_t status = RADIO_STATUS_UNSUPPORTED_FEATURE;
 8009ddc:	2301      	movs	r3, #1
 8009dde:	73fb      	strb	r3, [r7, #15]
    {
        return status;
    }
    SubgRf.lr_fhss.is_lr_fhss_on = true;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    return  status;
 8009de0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009de2:	4618      	mov	r0, r3
 8009de4:	3714      	adds	r7, #20
 8009de6:	46bd      	mov	sp, r7
 8009de8:	bc80      	pop	{r7}
 8009dea:	4770      	bx	lr

08009dec <RadioLrFhssGetTimeOnAirInMs>:

static radio_status_t RadioLrFhssGetTimeOnAirInMs( const radio_lr_fhss_time_on_air_params_t *params,
                                                    uint32_t *time_on_air_in_ms )
{
 8009dec:	b480      	push	{r7}
 8009dee:	b083      	sub	sp, #12
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	6078      	str	r0, [r7, #4]
 8009df4:	6039      	str	r1, [r7, #0]
    *time_on_air_in_ms = lr_fhss_get_time_on_air_in_ms( &params->radio_lr_fhss_params.lr_fhss_params,
                                                        params->pld_len_in_bytes );

    return RADIO_STATUS_OK;
#else
    return RADIO_STATUS_UNSUPPORTED_FEATURE;
 8009df6:	2301      	movs	r3, #1
#endif /* RADIO_LR_FHSS_IS_ON */
 8009df8:	4618      	mov	r0, r3
 8009dfa:	370c      	adds	r7, #12
 8009dfc:	46bd      	mov	sp, r7
 8009dfe:	bc80      	pop	{r7}
 8009e00:	4770      	bx	lr
	...

08009e04 <SUBGRF_Init>:
 */
static DioIrqHandler RadioOnDioIrqCb;

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 8009e04:	b580      	push	{r7, lr}
 8009e06:	b084      	sub	sp, #16
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d002      	beq.n	8009e18 <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 8009e12:	4a1d      	ldr	r2, [pc, #116]	; (8009e88 <SUBGRF_Init+0x84>)
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 8009e18:	f7f7 fca8 	bl	800176c <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8009e1c:	2002      	movs	r0, #2
 8009e1e:	f001 f8ff 	bl	800b020 <Radio_SMPS_Set>

    ImageCalibrated = false;
 8009e22:	4b1a      	ldr	r3, [pc, #104]	; (8009e8c <SUBGRF_Init+0x88>)
 8009e24:	2200      	movs	r2, #0
 8009e26:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 8009e28:	2000      	movs	r0, #0
 8009e2a:	f000 f97d 	bl	800a128 <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 8009e2e:	f001 fb3e 	bl	800b4ae <RBI_IsTCXO>
 8009e32:	4603      	mov	r3, r0
 8009e34:	2b01      	cmp	r3, #1
 8009e36:	d10e      	bne.n	8009e56 <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 8009e38:	2140      	movs	r1, #64	; 0x40
 8009e3a:	2001      	movs	r0, #1
 8009e3c:	f000 fb82 	bl	800a544 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 8009e40:	2100      	movs	r1, #0
 8009e42:	f640 1011 	movw	r0, #2321	; 0x911
 8009e46:	f000 fef3 	bl	800ac30 <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 8009e4a:	237f      	movs	r3, #127	; 0x7f
 8009e4c:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 8009e4e:	7b38      	ldrb	r0, [r7, #12]
 8009e50:	f000 fa8b 	bl	800a36a <SUBGRF_Calibrate>
 8009e54:	e009      	b.n	8009e6a <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8009e56:	2120      	movs	r1, #32
 8009e58:	f640 1011 	movw	r0, #2321	; 0x911
 8009e5c:	f000 fee8 	bl	800ac30 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8009e60:	2120      	movs	r1, #32
 8009e62:	f640 1012 	movw	r0, #2322	; 0x912
 8009e66:	f000 fee3 	bl	800ac30 <SUBGRF_WriteRegister>
    }

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8009e6a:	210e      	movs	r1, #14
 8009e6c:	f640 101f 	movw	r0, #2335	; 0x91f
 8009e70:	f000 fede 	bl	800ac30 <SUBGRF_WriteRegister>

    /* Init RF Switch */
    RBI_Init();
 8009e74:	f001 fa86 	bl	800b384 <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 8009e78:	4b05      	ldr	r3, [pc, #20]	; (8009e90 <SUBGRF_Init+0x8c>)
 8009e7a:	2201      	movs	r2, #1
 8009e7c:	701a      	strb	r2, [r3, #0]
}
 8009e7e:	bf00      	nop
 8009e80:	3710      	adds	r7, #16
 8009e82:	46bd      	mov	sp, r7
 8009e84:	bd80      	pop	{r7, pc}
 8009e86:	bf00      	nop
 8009e88:	20000ac4 	.word	0x20000ac4
 8009e8c:	20000ac0 	.word	0x20000ac0
 8009e90:	20000ab8 	.word	0x20000ab8

08009e94 <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 8009e94:	b480      	push	{r7}
 8009e96:	af00      	add	r7, sp, #0
    return OperatingMode;
 8009e98:	4b02      	ldr	r3, [pc, #8]	; (8009ea4 <SUBGRF_GetOperatingMode+0x10>)
 8009e9a:	781b      	ldrb	r3, [r3, #0]
}
 8009e9c:	4618      	mov	r0, r3
 8009e9e:	46bd      	mov	sp, r7
 8009ea0:	bc80      	pop	{r7}
 8009ea2:	4770      	bx	lr
 8009ea4:	20000ab8 	.word	0x20000ab8

08009ea8 <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 8009ea8:	b580      	push	{r7, lr}
 8009eaa:	b082      	sub	sp, #8
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	6078      	str	r0, [r7, #4]
 8009eb0:	460b      	mov	r3, r1
 8009eb2:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 8009eb4:	78fb      	ldrb	r3, [r7, #3]
 8009eb6:	461a      	mov	r2, r3
 8009eb8:	6879      	ldr	r1, [r7, #4]
 8009eba:	2000      	movs	r0, #0
 8009ebc:	f000 ff24 	bl	800ad08 <SUBGRF_WriteBuffer>
}
 8009ec0:	bf00      	nop
 8009ec2:	3708      	adds	r7, #8
 8009ec4:	46bd      	mov	sp, r7
 8009ec6:	bd80      	pop	{r7, pc}

08009ec8 <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 8009ec8:	b580      	push	{r7, lr}
 8009eca:	b086      	sub	sp, #24
 8009ecc:	af00      	add	r7, sp, #0
 8009ece:	60f8      	str	r0, [r7, #12]
 8009ed0:	60b9      	str	r1, [r7, #8]
 8009ed2:	4613      	mov	r3, r2
 8009ed4:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 8009ed6:	2300      	movs	r3, #0
 8009ed8:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 8009eda:	f107 0317 	add.w	r3, r7, #23
 8009ede:	4619      	mov	r1, r3
 8009ee0:	68b8      	ldr	r0, [r7, #8]
 8009ee2:	f000 fe27 	bl	800ab34 <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 8009ee6:	68bb      	ldr	r3, [r7, #8]
 8009ee8:	781b      	ldrb	r3, [r3, #0]
 8009eea:	79fa      	ldrb	r2, [r7, #7]
 8009eec:	429a      	cmp	r2, r3
 8009eee:	d201      	bcs.n	8009ef4 <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 8009ef0:	2301      	movs	r3, #1
 8009ef2:	e007      	b.n	8009f04 <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 8009ef4:	7df8      	ldrb	r0, [r7, #23]
 8009ef6:	68bb      	ldr	r3, [r7, #8]
 8009ef8:	781b      	ldrb	r3, [r3, #0]
 8009efa:	461a      	mov	r2, r3
 8009efc:	68f9      	ldr	r1, [r7, #12]
 8009efe:	f000 ff25 	bl	800ad4c <SUBGRF_ReadBuffer>

    return 0;
 8009f02:	2300      	movs	r3, #0
}
 8009f04:	4618      	mov	r0, r3
 8009f06:	3718      	adds	r7, #24
 8009f08:	46bd      	mov	sp, r7
 8009f0a:	bd80      	pop	{r7, pc}

08009f0c <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 8009f0c:	b580      	push	{r7, lr}
 8009f0e:	b084      	sub	sp, #16
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	60f8      	str	r0, [r7, #12]
 8009f14:	460b      	mov	r3, r1
 8009f16:	607a      	str	r2, [r7, #4]
 8009f18:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 8009f1a:	7afb      	ldrb	r3, [r7, #11]
 8009f1c:	4619      	mov	r1, r3
 8009f1e:	68f8      	ldr	r0, [r7, #12]
 8009f20:	f7ff ffc2 	bl	8009ea8 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 8009f24:	6878      	ldr	r0, [r7, #4]
 8009f26:	f000 f91b 	bl	800a160 <SUBGRF_SetTx>
}
 8009f2a:	bf00      	nop
 8009f2c:	3710      	adds	r7, #16
 8009f2e:	46bd      	mov	sp, r7
 8009f30:	bd80      	pop	{r7, pc}

08009f32 <SUBGRF_SetSyncWord>:

uint8_t SUBGRF_SetSyncWord( uint8_t *syncWord )
{
 8009f32:	b580      	push	{r7, lr}
 8009f34:	b082      	sub	sp, #8
 8009f36:	af00      	add	r7, sp, #0
 8009f38:	6078      	str	r0, [r7, #4]
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 8009f3a:	2208      	movs	r2, #8
 8009f3c:	6879      	ldr	r1, [r7, #4]
 8009f3e:	f44f 60d8 	mov.w	r0, #1728	; 0x6c0
 8009f42:	f000 fe9d 	bl	800ac80 <SUBGRF_WriteRegisters>
    return 0;
 8009f46:	2300      	movs	r3, #0
}
 8009f48:	4618      	mov	r0, r3
 8009f4a:	3708      	adds	r7, #8
 8009f4c:	46bd      	mov	sp, r7
 8009f4e:	bd80      	pop	{r7, pc}

08009f50 <SUBGRF_SetCrcSeed>:

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 8009f50:	b580      	push	{r7, lr}
 8009f52:	b084      	sub	sp, #16
 8009f54:	af00      	add	r7, sp, #0
 8009f56:	4603      	mov	r3, r0
 8009f58:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 8009f5a:	88fb      	ldrh	r3, [r7, #6]
 8009f5c:	0a1b      	lsrs	r3, r3, #8
 8009f5e:	b29b      	uxth	r3, r3
 8009f60:	b2db      	uxtb	r3, r3
 8009f62:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 8009f64:	88fb      	ldrh	r3, [r7, #6]
 8009f66:	b2db      	uxtb	r3, r3
 8009f68:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 8009f6a:	f000 fb6f 	bl	800a64c <SUBGRF_GetPacketType>
 8009f6e:	4603      	mov	r3, r0
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d108      	bne.n	8009f86 <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 8009f74:	f107 030c 	add.w	r3, r7, #12
 8009f78:	2202      	movs	r2, #2
 8009f7a:	4619      	mov	r1, r3
 8009f7c:	f240 60bc 	movw	r0, #1724	; 0x6bc
 8009f80:	f000 fe7e 	bl	800ac80 <SUBGRF_WriteRegisters>
            break;
 8009f84:	e000      	b.n	8009f88 <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 8009f86:	bf00      	nop
    }
}
 8009f88:	bf00      	nop
 8009f8a:	3710      	adds	r7, #16
 8009f8c:	46bd      	mov	sp, r7
 8009f8e:	bd80      	pop	{r7, pc}

08009f90 <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 8009f90:	b580      	push	{r7, lr}
 8009f92:	b084      	sub	sp, #16
 8009f94:	af00      	add	r7, sp, #0
 8009f96:	4603      	mov	r3, r0
 8009f98:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 8009f9a:	88fb      	ldrh	r3, [r7, #6]
 8009f9c:	0a1b      	lsrs	r3, r3, #8
 8009f9e:	b29b      	uxth	r3, r3
 8009fa0:	b2db      	uxtb	r3, r3
 8009fa2:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 8009fa4:	88fb      	ldrh	r3, [r7, #6]
 8009fa6:	b2db      	uxtb	r3, r3
 8009fa8:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 8009faa:	f000 fb4f 	bl	800a64c <SUBGRF_GetPacketType>
 8009fae:	4603      	mov	r3, r0
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d108      	bne.n	8009fc6 <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 8009fb4:	f107 030c 	add.w	r3, r7, #12
 8009fb8:	2202      	movs	r2, #2
 8009fba:	4619      	mov	r1, r3
 8009fbc:	f240 60be 	movw	r0, #1726	; 0x6be
 8009fc0:	f000 fe5e 	bl	800ac80 <SUBGRF_WriteRegisters>
            break;
 8009fc4:	e000      	b.n	8009fc8 <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 8009fc6:	bf00      	nop
    }
}
 8009fc8:	bf00      	nop
 8009fca:	3710      	adds	r7, #16
 8009fcc:	46bd      	mov	sp, r7
 8009fce:	bd80      	pop	{r7, pc}

08009fd0 <SUBGRF_SetWhiteningSeed>:

void SUBGRF_SetWhiteningSeed( uint16_t seed )
{
 8009fd0:	b580      	push	{r7, lr}
 8009fd2:	b084      	sub	sp, #16
 8009fd4:	af00      	add	r7, sp, #0
 8009fd6:	4603      	mov	r3, r0
 8009fd8:	80fb      	strh	r3, [r7, #6]
    uint8_t regValue = 0;
 8009fda:	2300      	movs	r3, #0
 8009fdc:	73fb      	strb	r3, [r7, #15]

    switch( SUBGRF_GetPacketType( ) )
 8009fde:	f000 fb35 	bl	800a64c <SUBGRF_GetPacketType>
 8009fe2:	4603      	mov	r3, r0
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d121      	bne.n	800a02c <SUBGRF_SetWhiteningSeed+0x5c>
    {
        case PACKET_TYPE_GFSK:
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 8009fe8:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8009fec:	f000 fe34 	bl	800ac58 <SUBGRF_ReadRegister>
 8009ff0:	4603      	mov	r3, r0
 8009ff2:	f023 0301 	bic.w	r3, r3, #1
 8009ff6:	73fb      	strb	r3, [r7, #15]
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 8009ff8:	88fb      	ldrh	r3, [r7, #6]
 8009ffa:	0a1b      	lsrs	r3, r3, #8
 8009ffc:	b29b      	uxth	r3, r3
 8009ffe:	b25b      	sxtb	r3, r3
 800a000:	f003 0301 	and.w	r3, r3, #1
 800a004:	b25a      	sxtb	r2, r3
 800a006:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a00a:	4313      	orrs	r3, r2
 800a00c:	b25b      	sxtb	r3, r3
 800a00e:	73fb      	strb	r3, [r7, #15]
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 800a010:	7bfb      	ldrb	r3, [r7, #15]
 800a012:	4619      	mov	r1, r3
 800a014:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 800a018:	f000 fe0a 	bl	800ac30 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 800a01c:	88fb      	ldrh	r3, [r7, #6]
 800a01e:	b2db      	uxtb	r3, r3
 800a020:	4619      	mov	r1, r3
 800a022:	f240 60b9 	movw	r0, #1721	; 0x6b9
 800a026:	f000 fe03 	bl	800ac30 <SUBGRF_WriteRegister>
            break;
 800a02a:	e000      	b.n	800a02e <SUBGRF_SetWhiteningSeed+0x5e>

        default:
            break;
 800a02c:	bf00      	nop
    }
}
 800a02e:	bf00      	nop
 800a030:	3710      	adds	r7, #16
 800a032:	46bd      	mov	sp, r7
 800a034:	bd80      	pop	{r7, pc}

0800a036 <SUBGRF_GetRandom>:

uint32_t SUBGRF_GetRandom( void )
{
 800a036:	b580      	push	{r7, lr}
 800a038:	b082      	sub	sp, #8
 800a03a:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 800a03c:	2300      	movs	r3, #0
 800a03e:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 800a040:	2300      	movs	r3, #0
 800a042:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 800a044:	2300      	movs	r3, #0
 800a046:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 800a048:	f640 00e2 	movw	r0, #2274	; 0x8e2
 800a04c:	f000 fe04 	bl	800ac58 <SUBGRF_ReadRegister>
 800a050:	4603      	mov	r3, r0
 800a052:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 800a054:	79fb      	ldrb	r3, [r7, #7]
 800a056:	f023 0301 	bic.w	r3, r3, #1
 800a05a:	b2db      	uxtb	r3, r3
 800a05c:	4619      	mov	r1, r3
 800a05e:	f640 00e2 	movw	r0, #2274	; 0x8e2
 800a062:	f000 fde5 	bl	800ac30 <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 800a066:	f640 00e5 	movw	r0, #2277	; 0x8e5
 800a06a:	f000 fdf5 	bl	800ac58 <SUBGRF_ReadRegister>
 800a06e:	4603      	mov	r3, r0
 800a070:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 800a072:	79bb      	ldrb	r3, [r7, #6]
 800a074:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a078:	b2db      	uxtb	r3, r3
 800a07a:	4619      	mov	r1, r3
 800a07c:	f640 00e5 	movw	r0, #2277	; 0x8e5
 800a080:	f000 fdd6 	bl	800ac30 <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 800a084:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800a088:	f000 f88a 	bl	800a1a0 <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 800a08c:	463b      	mov	r3, r7
 800a08e:	2204      	movs	r2, #4
 800a090:	4619      	mov	r1, r3
 800a092:	f640 0019 	movw	r0, #2073	; 0x819
 800a096:	f000 fe15 	bl	800acc4 <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 800a09a:	2000      	movs	r0, #0
 800a09c:	f000 f844 	bl	800a128 <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 800a0a0:	79fb      	ldrb	r3, [r7, #7]
 800a0a2:	4619      	mov	r1, r3
 800a0a4:	f640 00e2 	movw	r0, #2274	; 0x8e2
 800a0a8:	f000 fdc2 	bl	800ac30 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 800a0ac:	79bb      	ldrb	r3, [r7, #6]
 800a0ae:	4619      	mov	r1, r3
 800a0b0:	f640 00e5 	movw	r0, #2277	; 0x8e5
 800a0b4:	f000 fdbc 	bl	800ac30 <SUBGRF_WriteRegister>

    return number;
 800a0b8:	683b      	ldr	r3, [r7, #0]
}
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	3708      	adds	r7, #8
 800a0be:	46bd      	mov	sp, r7
 800a0c0:	bd80      	pop	{r7, pc}
	...

0800a0c4 <SUBGRF_SetSleep>:

void SUBGRF_SetSleep( SleepParams_t sleepConfig )
{
 800a0c4:	b580      	push	{r7, lr}
 800a0c6:	b084      	sub	sp, #16
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	7138      	strb	r0, [r7, #4]
    /* switch the antenna OFF by SW */
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 800a0cc:	2000      	movs	r0, #0
 800a0ce:	f001 f999 	bl	800b404 <RBI_ConfigRFSwitch>

    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 800a0d2:	2002      	movs	r0, #2
 800a0d4:	f000 ffa4 	bl	800b020 <Radio_SMPS_Set>

    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 800a0d8:	793b      	ldrb	r3, [r7, #4]
 800a0da:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800a0de:	b2db      	uxtb	r3, r3
 800a0e0:	009b      	lsls	r3, r3, #2
 800a0e2:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 800a0e4:	793b      	ldrb	r3, [r7, #4]
 800a0e6:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800a0ea:	b2db      	uxtb	r3, r3
 800a0ec:	005b      	lsls	r3, r3, #1
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 800a0ee:	b25b      	sxtb	r3, r3
 800a0f0:	4313      	orrs	r3, r2
 800a0f2:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 800a0f4:	793b      	ldrb	r3, [r7, #4]
 800a0f6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800a0fa:	b2db      	uxtb	r3, r3
 800a0fc:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 800a0fe:	4313      	orrs	r3, r2
 800a100:	b25b      	sxtb	r3, r3
 800a102:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 800a104:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 800a106:	f107 030f 	add.w	r3, r7, #15
 800a10a:	2201      	movs	r2, #1
 800a10c:	4619      	mov	r1, r3
 800a10e:	2084      	movs	r0, #132	; 0x84
 800a110:	f000 fe3e 	bl	800ad90 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 800a114:	4b03      	ldr	r3, [pc, #12]	; (800a124 <SUBGRF_SetSleep+0x60>)
 800a116:	2200      	movs	r2, #0
 800a118:	701a      	strb	r2, [r3, #0]
}
 800a11a:	bf00      	nop
 800a11c:	3710      	adds	r7, #16
 800a11e:	46bd      	mov	sp, r7
 800a120:	bd80      	pop	{r7, pc}
 800a122:	bf00      	nop
 800a124:	20000ab8 	.word	0x20000ab8

0800a128 <SUBGRF_SetStandby>:

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 800a128:	b580      	push	{r7, lr}
 800a12a:	b082      	sub	sp, #8
 800a12c:	af00      	add	r7, sp, #0
 800a12e:	4603      	mov	r3, r0
 800a130:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 800a132:	1dfb      	adds	r3, r7, #7
 800a134:	2201      	movs	r2, #1
 800a136:	4619      	mov	r1, r3
 800a138:	2080      	movs	r0, #128	; 0x80
 800a13a:	f000 fe29 	bl	800ad90 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 800a13e:	79fb      	ldrb	r3, [r7, #7]
 800a140:	2b00      	cmp	r3, #0
 800a142:	d103      	bne.n	800a14c <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 800a144:	4b05      	ldr	r3, [pc, #20]	; (800a15c <SUBGRF_SetStandby+0x34>)
 800a146:	2201      	movs	r2, #1
 800a148:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 800a14a:	e002      	b.n	800a152 <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 800a14c:	4b03      	ldr	r3, [pc, #12]	; (800a15c <SUBGRF_SetStandby+0x34>)
 800a14e:	2202      	movs	r2, #2
 800a150:	701a      	strb	r2, [r3, #0]
}
 800a152:	bf00      	nop
 800a154:	3708      	adds	r7, #8
 800a156:	46bd      	mov	sp, r7
 800a158:	bd80      	pop	{r7, pc}
 800a15a:	bf00      	nop
 800a15c:	20000ab8 	.word	0x20000ab8

0800a160 <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 800a160:	b580      	push	{r7, lr}
 800a162:	b084      	sub	sp, #16
 800a164:	af00      	add	r7, sp, #0
 800a166:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 800a168:	4b0c      	ldr	r3, [pc, #48]	; (800a19c <SUBGRF_SetTx+0x3c>)
 800a16a:	2204      	movs	r2, #4
 800a16c:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	0c1b      	lsrs	r3, r3, #16
 800a172:	b2db      	uxtb	r3, r3
 800a174:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	0a1b      	lsrs	r3, r3, #8
 800a17a:	b2db      	uxtb	r3, r3
 800a17c:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	b2db      	uxtb	r3, r3
 800a182:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 800a184:	f107 030c 	add.w	r3, r7, #12
 800a188:	2203      	movs	r2, #3
 800a18a:	4619      	mov	r1, r3
 800a18c:	2083      	movs	r0, #131	; 0x83
 800a18e:	f000 fdff 	bl	800ad90 <SUBGRF_WriteCommand>
}
 800a192:	bf00      	nop
 800a194:	3710      	adds	r7, #16
 800a196:	46bd      	mov	sp, r7
 800a198:	bd80      	pop	{r7, pc}
 800a19a:	bf00      	nop
 800a19c:	20000ab8 	.word	0x20000ab8

0800a1a0 <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 800a1a0:	b580      	push	{r7, lr}
 800a1a2:	b084      	sub	sp, #16
 800a1a4:	af00      	add	r7, sp, #0
 800a1a6:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 800a1a8:	4b0c      	ldr	r3, [pc, #48]	; (800a1dc <SUBGRF_SetRx+0x3c>)
 800a1aa:	2205      	movs	r2, #5
 800a1ac:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	0c1b      	lsrs	r3, r3, #16
 800a1b2:	b2db      	uxtb	r3, r3
 800a1b4:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	0a1b      	lsrs	r3, r3, #8
 800a1ba:	b2db      	uxtb	r3, r3
 800a1bc:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	b2db      	uxtb	r3, r3
 800a1c2:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 800a1c4:	f107 030c 	add.w	r3, r7, #12
 800a1c8:	2203      	movs	r2, #3
 800a1ca:	4619      	mov	r1, r3
 800a1cc:	2082      	movs	r0, #130	; 0x82
 800a1ce:	f000 fddf 	bl	800ad90 <SUBGRF_WriteCommand>
}
 800a1d2:	bf00      	nop
 800a1d4:	3710      	adds	r7, #16
 800a1d6:	46bd      	mov	sp, r7
 800a1d8:	bd80      	pop	{r7, pc}
 800a1da:	bf00      	nop
 800a1dc:	20000ab8 	.word	0x20000ab8

0800a1e0 <SUBGRF_SetRxBoosted>:

void SUBGRF_SetRxBoosted( uint32_t timeout )
{
 800a1e0:	b580      	push	{r7, lr}
 800a1e2:	b084      	sub	sp, #16
 800a1e4:	af00      	add	r7, sp, #0
 800a1e6:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 800a1e8:	4b0e      	ldr	r3, [pc, #56]	; (800a224 <SUBGRF_SetRxBoosted+0x44>)
 800a1ea:	2205      	movs	r2, #5
 800a1ec:	701a      	strb	r2, [r3, #0]

    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 800a1ee:	2197      	movs	r1, #151	; 0x97
 800a1f0:	f640 00ac 	movw	r0, #2220	; 0x8ac
 800a1f4:	f000 fd1c 	bl	800ac30 <SUBGRF_WriteRegister>

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	0c1b      	lsrs	r3, r3, #16
 800a1fc:	b2db      	uxtb	r3, r3
 800a1fe:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	0a1b      	lsrs	r3, r3, #8
 800a204:	b2db      	uxtb	r3, r3
 800a206:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	b2db      	uxtb	r3, r3
 800a20c:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 800a20e:	f107 030c 	add.w	r3, r7, #12
 800a212:	2203      	movs	r2, #3
 800a214:	4619      	mov	r1, r3
 800a216:	2082      	movs	r0, #130	; 0x82
 800a218:	f000 fdba 	bl	800ad90 <SUBGRF_WriteCommand>
}
 800a21c:	bf00      	nop
 800a21e:	3710      	adds	r7, #16
 800a220:	46bd      	mov	sp, r7
 800a222:	bd80      	pop	{r7, pc}
 800a224:	20000ab8 	.word	0x20000ab8

0800a228 <SUBGRF_SetRxDutyCycle>:

void SUBGRF_SetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 800a228:	b580      	push	{r7, lr}
 800a22a:	b084      	sub	sp, #16
 800a22c:	af00      	add	r7, sp, #0
 800a22e:	6078      	str	r0, [r7, #4]
 800a230:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];

    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	0c1b      	lsrs	r3, r3, #16
 800a236:	b2db      	uxtb	r3, r3
 800a238:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	0a1b      	lsrs	r3, r3, #8
 800a23e:	b2db      	uxtb	r3, r3
 800a240:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	b2db      	uxtb	r3, r3
 800a246:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 800a248:	683b      	ldr	r3, [r7, #0]
 800a24a:	0c1b      	lsrs	r3, r3, #16
 800a24c:	b2db      	uxtb	r3, r3
 800a24e:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 800a250:	683b      	ldr	r3, [r7, #0]
 800a252:	0a1b      	lsrs	r3, r3, #8
 800a254:	b2db      	uxtb	r3, r3
 800a256:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 800a258:	683b      	ldr	r3, [r7, #0]
 800a25a:	b2db      	uxtb	r3, r3
 800a25c:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 800a25e:	f107 0308 	add.w	r3, r7, #8
 800a262:	2206      	movs	r2, #6
 800a264:	4619      	mov	r1, r3
 800a266:	2094      	movs	r0, #148	; 0x94
 800a268:	f000 fd92 	bl	800ad90 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 800a26c:	4b03      	ldr	r3, [pc, #12]	; (800a27c <SUBGRF_SetRxDutyCycle+0x54>)
 800a26e:	2206      	movs	r2, #6
 800a270:	701a      	strb	r2, [r3, #0]
}
 800a272:	bf00      	nop
 800a274:	3710      	adds	r7, #16
 800a276:	46bd      	mov	sp, r7
 800a278:	bd80      	pop	{r7, pc}
 800a27a:	bf00      	nop
 800a27c:	20000ab8 	.word	0x20000ab8

0800a280 <SUBGRF_SetCad>:

void SUBGRF_SetCad( void )
{
 800a280:	b580      	push	{r7, lr}
 800a282:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 800a284:	2200      	movs	r2, #0
 800a286:	2100      	movs	r1, #0
 800a288:	20c5      	movs	r0, #197	; 0xc5
 800a28a:	f000 fd81 	bl	800ad90 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 800a28e:	4b02      	ldr	r3, [pc, #8]	; (800a298 <SUBGRF_SetCad+0x18>)
 800a290:	2207      	movs	r2, #7
 800a292:	701a      	strb	r2, [r3, #0]
}
 800a294:	bf00      	nop
 800a296:	bd80      	pop	{r7, pc}
 800a298:	20000ab8 	.word	0x20000ab8

0800a29c <SUBGRF_SetTxContinuousWave>:

void SUBGRF_SetTxContinuousWave( void )
{
 800a29c:	b580      	push	{r7, lr}
 800a29e:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 800a2a0:	2200      	movs	r2, #0
 800a2a2:	2100      	movs	r1, #0
 800a2a4:	20d1      	movs	r0, #209	; 0xd1
 800a2a6:	f000 fd73 	bl	800ad90 <SUBGRF_WriteCommand>
}
 800a2aa:	bf00      	nop
 800a2ac:	bd80      	pop	{r7, pc}

0800a2ae <SUBGRF_SetTxInfinitePreamble>:

void SUBGRF_SetTxInfinitePreamble( void )
{
 800a2ae:	b580      	push	{r7, lr}
 800a2b0:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 800a2b2:	2200      	movs	r2, #0
 800a2b4:	2100      	movs	r1, #0
 800a2b6:	20d2      	movs	r0, #210	; 0xd2
 800a2b8:	f000 fd6a 	bl	800ad90 <SUBGRF_WriteCommand>
}
 800a2bc:	bf00      	nop
 800a2be:	bd80      	pop	{r7, pc}

0800a2c0 <SUBGRF_SetStopRxTimerOnPreambleDetect>:

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 800a2c0:	b580      	push	{r7, lr}
 800a2c2:	b082      	sub	sp, #8
 800a2c4:	af00      	add	r7, sp, #0
 800a2c6:	4603      	mov	r3, r0
 800a2c8:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 800a2ca:	1dfb      	adds	r3, r7, #7
 800a2cc:	2201      	movs	r2, #1
 800a2ce:	4619      	mov	r1, r3
 800a2d0:	209f      	movs	r0, #159	; 0x9f
 800a2d2:	f000 fd5d 	bl	800ad90 <SUBGRF_WriteCommand>
}
 800a2d6:	bf00      	nop
 800a2d8:	3708      	adds	r7, #8
 800a2da:	46bd      	mov	sp, r7
 800a2dc:	bd80      	pop	{r7, pc}

0800a2de <SUBGRF_SetLoRaSymbNumTimeout>:

void SUBGRF_SetLoRaSymbNumTimeout( uint8_t symbNum )
{
 800a2de:	b580      	push	{r7, lr}
 800a2e0:	b084      	sub	sp, #16
 800a2e2:	af00      	add	r7, sp, #0
 800a2e4:	4603      	mov	r3, r0
 800a2e6:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 800a2e8:	1dfb      	adds	r3, r7, #7
 800a2ea:	2201      	movs	r2, #1
 800a2ec:	4619      	mov	r1, r3
 800a2ee:	20a0      	movs	r0, #160	; 0xa0
 800a2f0:	f000 fd4e 	bl	800ad90 <SUBGRF_WriteCommand>

    if( symbNum >= 64 )
 800a2f4:	79fb      	ldrb	r3, [r7, #7]
 800a2f6:	2b3f      	cmp	r3, #63	; 0x3f
 800a2f8:	d91c      	bls.n	800a334 <SUBGRF_SetLoRaSymbNumTimeout+0x56>
    {
        uint8_t mant = symbNum >> 1;
 800a2fa:	79fb      	ldrb	r3, [r7, #7]
 800a2fc:	085b      	lsrs	r3, r3, #1
 800a2fe:	73fb      	strb	r3, [r7, #15]
        uint8_t exp  = 0;
 800a300:	2300      	movs	r3, #0
 800a302:	73bb      	strb	r3, [r7, #14]
        uint8_t reg  = 0;
 800a304:	2300      	movs	r3, #0
 800a306:	737b      	strb	r3, [r7, #13]

        while( mant > 31 )
 800a308:	e005      	b.n	800a316 <SUBGRF_SetLoRaSymbNumTimeout+0x38>
        {
            mant >>= 2;
 800a30a:	7bfb      	ldrb	r3, [r7, #15]
 800a30c:	089b      	lsrs	r3, r3, #2
 800a30e:	73fb      	strb	r3, [r7, #15]
            exp++;
 800a310:	7bbb      	ldrb	r3, [r7, #14]
 800a312:	3301      	adds	r3, #1
 800a314:	73bb      	strb	r3, [r7, #14]
        while( mant > 31 )
 800a316:	7bfb      	ldrb	r3, [r7, #15]
 800a318:	2b1f      	cmp	r3, #31
 800a31a:	d8f6      	bhi.n	800a30a <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
        }

        reg = exp + ( mant << 3 );
 800a31c:	7bfb      	ldrb	r3, [r7, #15]
 800a31e:	00db      	lsls	r3, r3, #3
 800a320:	b2da      	uxtb	r2, r3
 800a322:	7bbb      	ldrb	r3, [r7, #14]
 800a324:	4413      	add	r3, r2
 800a326:	737b      	strb	r3, [r7, #13]
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 800a328:	7b7b      	ldrb	r3, [r7, #13]
 800a32a:	4619      	mov	r1, r3
 800a32c:	f240 7006 	movw	r0, #1798	; 0x706
 800a330:	f000 fc7e 	bl	800ac30 <SUBGRF_WriteRegister>
    }
}
 800a334:	bf00      	nop
 800a336:	3710      	adds	r7, #16
 800a338:	46bd      	mov	sp, r7
 800a33a:	bd80      	pop	{r7, pc}

0800a33c <SUBGRF_SetRegulatorMode>:

void SUBGRF_SetRegulatorMode( void )
{
 800a33c:	b580      	push	{r7, lr}
 800a33e:	b082      	sub	sp, #8
 800a340:	af00      	add	r7, sp, #0
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 800a342:	f001 f8bf 	bl	800b4c4 <RBI_IsDCDC>
 800a346:	4603      	mov	r3, r0
 800a348:	2b01      	cmp	r3, #1
 800a34a:	d102      	bne.n	800a352 <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 800a34c:	2301      	movs	r3, #1
 800a34e:	71fb      	strb	r3, [r7, #7]
 800a350:	e001      	b.n	800a356 <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 800a352:	2300      	movs	r3, #0
 800a354:	71fb      	strb	r3, [r7, #7]
    }
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 800a356:	1dfb      	adds	r3, r7, #7
 800a358:	2201      	movs	r2, #1
 800a35a:	4619      	mov	r1, r3
 800a35c:	2096      	movs	r0, #150	; 0x96
 800a35e:	f000 fd17 	bl	800ad90 <SUBGRF_WriteCommand>
}
 800a362:	bf00      	nop
 800a364:	3708      	adds	r7, #8
 800a366:	46bd      	mov	sp, r7
 800a368:	bd80      	pop	{r7, pc}

0800a36a <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 800a36a:	b580      	push	{r7, lr}
 800a36c:	b084      	sub	sp, #16
 800a36e:	af00      	add	r7, sp, #0
 800a370:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800a372:	793b      	ldrb	r3, [r7, #4]
 800a374:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800a378:	b2db      	uxtb	r3, r3
 800a37a:	019b      	lsls	r3, r3, #6
 800a37c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 800a37e:	793b      	ldrb	r3, [r7, #4]
 800a380:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800a384:	b2db      	uxtb	r3, r3
 800a386:	015b      	lsls	r3, r3, #5
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800a388:	b25b      	sxtb	r3, r3
 800a38a:	4313      	orrs	r3, r2
 800a38c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 800a38e:	793b      	ldrb	r3, [r7, #4]
 800a390:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800a394:	b2db      	uxtb	r3, r3
 800a396:	011b      	lsls	r3, r3, #4
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 800a398:	b25b      	sxtb	r3, r3
 800a39a:	4313      	orrs	r3, r2
 800a39c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 800a39e:	793b      	ldrb	r3, [r7, #4]
 800a3a0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800a3a4:	b2db      	uxtb	r3, r3
 800a3a6:	00db      	lsls	r3, r3, #3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 800a3a8:	b25b      	sxtb	r3, r3
 800a3aa:	4313      	orrs	r3, r2
 800a3ac:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 800a3ae:	793b      	ldrb	r3, [r7, #4]
 800a3b0:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800a3b4:	b2db      	uxtb	r3, r3
 800a3b6:	009b      	lsls	r3, r3, #2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 800a3b8:	b25b      	sxtb	r3, r3
 800a3ba:	4313      	orrs	r3, r2
 800a3bc:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 800a3be:	793b      	ldrb	r3, [r7, #4]
 800a3c0:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800a3c4:	b2db      	uxtb	r3, r3
 800a3c6:	005b      	lsls	r3, r3, #1
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 800a3c8:	b25b      	sxtb	r3, r3
 800a3ca:	4313      	orrs	r3, r2
 800a3cc:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 800a3ce:	793b      	ldrb	r3, [r7, #4]
 800a3d0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800a3d4:	b2db      	uxtb	r3, r3
 800a3d6:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 800a3d8:	4313      	orrs	r3, r2
 800a3da:	b25b      	sxtb	r3, r3
 800a3dc:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800a3de:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 800a3e0:	f107 030f 	add.w	r3, r7, #15
 800a3e4:	2201      	movs	r2, #1
 800a3e6:	4619      	mov	r1, r3
 800a3e8:	2089      	movs	r0, #137	; 0x89
 800a3ea:	f000 fcd1 	bl	800ad90 <SUBGRF_WriteCommand>
}
 800a3ee:	bf00      	nop
 800a3f0:	3710      	adds	r7, #16
 800a3f2:	46bd      	mov	sp, r7
 800a3f4:	bd80      	pop	{r7, pc}
	...

0800a3f8 <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 800a3f8:	b580      	push	{r7, lr}
 800a3fa:	b084      	sub	sp, #16
 800a3fc:	af00      	add	r7, sp, #0
 800a3fe:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	4a1d      	ldr	r2, [pc, #116]	; (800a478 <SUBGRF_CalibrateImage+0x80>)
 800a404:	4293      	cmp	r3, r2
 800a406:	d904      	bls.n	800a412 <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 800a408:	23e1      	movs	r3, #225	; 0xe1
 800a40a:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 800a40c:	23e9      	movs	r3, #233	; 0xe9
 800a40e:	737b      	strb	r3, [r7, #13]
 800a410:	e027      	b.n	800a462 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 850000000 )
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	4a19      	ldr	r2, [pc, #100]	; (800a47c <SUBGRF_CalibrateImage+0x84>)
 800a416:	4293      	cmp	r3, r2
 800a418:	d904      	bls.n	800a424 <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 800a41a:	23d7      	movs	r3, #215	; 0xd7
 800a41c:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 800a41e:	23db      	movs	r3, #219	; 0xdb
 800a420:	737b      	strb	r3, [r7, #13]
 800a422:	e01e      	b.n	800a462 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 770000000 )
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	4a16      	ldr	r2, [pc, #88]	; (800a480 <SUBGRF_CalibrateImage+0x88>)
 800a428:	4293      	cmp	r3, r2
 800a42a:	d904      	bls.n	800a436 <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 800a42c:	23c1      	movs	r3, #193	; 0xc1
 800a42e:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 800a430:	23c5      	movs	r3, #197	; 0xc5
 800a432:	737b      	strb	r3, [r7, #13]
 800a434:	e015      	b.n	800a462 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 460000000 )
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	4a12      	ldr	r2, [pc, #72]	; (800a484 <SUBGRF_CalibrateImage+0x8c>)
 800a43a:	4293      	cmp	r3, r2
 800a43c:	d904      	bls.n	800a448 <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 800a43e:	2375      	movs	r3, #117	; 0x75
 800a440:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 800a442:	2381      	movs	r3, #129	; 0x81
 800a444:	737b      	strb	r3, [r7, #13]
 800a446:	e00c      	b.n	800a462 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 425000000 )
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	4a0f      	ldr	r2, [pc, #60]	; (800a488 <SUBGRF_CalibrateImage+0x90>)
 800a44c:	4293      	cmp	r3, r2
 800a44e:	d904      	bls.n	800a45a <SUBGRF_CalibrateImage+0x62>
    {
        calFreq[0] = 0x6B;
 800a450:	236b      	movs	r3, #107	; 0x6b
 800a452:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 800a454:	236f      	movs	r3, #111	; 0x6f
 800a456:	737b      	strb	r3, [r7, #13]
 800a458:	e003      	b.n	800a462 <SUBGRF_CalibrateImage+0x6a>
    }
    else /* freq <= 425000000*/
    {
        /* [ 156MHz - 171MHz ] */
        calFreq[0] = 0x29;
 800a45a:	2329      	movs	r3, #41	; 0x29
 800a45c:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x2B ;
 800a45e:	232b      	movs	r3, #43	; 0x2b
 800a460:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 800a462:	f107 030c 	add.w	r3, r7, #12
 800a466:	2202      	movs	r2, #2
 800a468:	4619      	mov	r1, r3
 800a46a:	2098      	movs	r0, #152	; 0x98
 800a46c:	f000 fc90 	bl	800ad90 <SUBGRF_WriteCommand>
}
 800a470:	bf00      	nop
 800a472:	3710      	adds	r7, #16
 800a474:	46bd      	mov	sp, r7
 800a476:	bd80      	pop	{r7, pc}
 800a478:	35a4e900 	.word	0x35a4e900
 800a47c:	32a9f880 	.word	0x32a9f880
 800a480:	2de54480 	.word	0x2de54480
 800a484:	1b6b0b00 	.word	0x1b6b0b00
 800a488:	1954fc40 	.word	0x1954fc40

0800a48c <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 800a48c:	b590      	push	{r4, r7, lr}
 800a48e:	b085      	sub	sp, #20
 800a490:	af00      	add	r7, sp, #0
 800a492:	4604      	mov	r4, r0
 800a494:	4608      	mov	r0, r1
 800a496:	4611      	mov	r1, r2
 800a498:	461a      	mov	r2, r3
 800a49a:	4623      	mov	r3, r4
 800a49c:	71fb      	strb	r3, [r7, #7]
 800a49e:	4603      	mov	r3, r0
 800a4a0:	71bb      	strb	r3, [r7, #6]
 800a4a2:	460b      	mov	r3, r1
 800a4a4:	717b      	strb	r3, [r7, #5]
 800a4a6:	4613      	mov	r3, r2
 800a4a8:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 800a4aa:	79fb      	ldrb	r3, [r7, #7]
 800a4ac:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 800a4ae:	79bb      	ldrb	r3, [r7, #6]
 800a4b0:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 800a4b2:	797b      	ldrb	r3, [r7, #5]
 800a4b4:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 800a4b6:	793b      	ldrb	r3, [r7, #4]
 800a4b8:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 800a4ba:	f107 030c 	add.w	r3, r7, #12
 800a4be:	2204      	movs	r2, #4
 800a4c0:	4619      	mov	r1, r3
 800a4c2:	2095      	movs	r0, #149	; 0x95
 800a4c4:	f000 fc64 	bl	800ad90 <SUBGRF_WriteCommand>
}
 800a4c8:	bf00      	nop
 800a4ca:	3714      	adds	r7, #20
 800a4cc:	46bd      	mov	sp, r7
 800a4ce:	bd90      	pop	{r4, r7, pc}

0800a4d0 <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 800a4d0:	b590      	push	{r4, r7, lr}
 800a4d2:	b085      	sub	sp, #20
 800a4d4:	af00      	add	r7, sp, #0
 800a4d6:	4604      	mov	r4, r0
 800a4d8:	4608      	mov	r0, r1
 800a4da:	4611      	mov	r1, r2
 800a4dc:	461a      	mov	r2, r3
 800a4de:	4623      	mov	r3, r4
 800a4e0:	80fb      	strh	r3, [r7, #6]
 800a4e2:	4603      	mov	r3, r0
 800a4e4:	80bb      	strh	r3, [r7, #4]
 800a4e6:	460b      	mov	r3, r1
 800a4e8:	807b      	strh	r3, [r7, #2]
 800a4ea:	4613      	mov	r3, r2
 800a4ec:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 800a4ee:	88fb      	ldrh	r3, [r7, #6]
 800a4f0:	0a1b      	lsrs	r3, r3, #8
 800a4f2:	b29b      	uxth	r3, r3
 800a4f4:	b2db      	uxtb	r3, r3
 800a4f6:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 800a4f8:	88fb      	ldrh	r3, [r7, #6]
 800a4fa:	b2db      	uxtb	r3, r3
 800a4fc:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 800a4fe:	88bb      	ldrh	r3, [r7, #4]
 800a500:	0a1b      	lsrs	r3, r3, #8
 800a502:	b29b      	uxth	r3, r3
 800a504:	b2db      	uxtb	r3, r3
 800a506:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 800a508:	88bb      	ldrh	r3, [r7, #4]
 800a50a:	b2db      	uxtb	r3, r3
 800a50c:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 800a50e:	887b      	ldrh	r3, [r7, #2]
 800a510:	0a1b      	lsrs	r3, r3, #8
 800a512:	b29b      	uxth	r3, r3
 800a514:	b2db      	uxtb	r3, r3
 800a516:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 800a518:	887b      	ldrh	r3, [r7, #2]
 800a51a:	b2db      	uxtb	r3, r3
 800a51c:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 800a51e:	883b      	ldrh	r3, [r7, #0]
 800a520:	0a1b      	lsrs	r3, r3, #8
 800a522:	b29b      	uxth	r3, r3
 800a524:	b2db      	uxtb	r3, r3
 800a526:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 800a528:	883b      	ldrh	r3, [r7, #0]
 800a52a:	b2db      	uxtb	r3, r3
 800a52c:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 800a52e:	f107 0308 	add.w	r3, r7, #8
 800a532:	2208      	movs	r2, #8
 800a534:	4619      	mov	r1, r3
 800a536:	2008      	movs	r0, #8
 800a538:	f000 fc2a 	bl	800ad90 <SUBGRF_WriteCommand>
}
 800a53c:	bf00      	nop
 800a53e:	3714      	adds	r7, #20
 800a540:	46bd      	mov	sp, r7
 800a542:	bd90      	pop	{r4, r7, pc}

0800a544 <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 800a544:	b580      	push	{r7, lr}
 800a546:	b084      	sub	sp, #16
 800a548:	af00      	add	r7, sp, #0
 800a54a:	4603      	mov	r3, r0
 800a54c:	6039      	str	r1, [r7, #0]
 800a54e:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 800a550:	79fb      	ldrb	r3, [r7, #7]
 800a552:	f003 0307 	and.w	r3, r3, #7
 800a556:	b2db      	uxtb	r3, r3
 800a558:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800a55a:	683b      	ldr	r3, [r7, #0]
 800a55c:	0c1b      	lsrs	r3, r3, #16
 800a55e:	b2db      	uxtb	r3, r3
 800a560:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800a562:	683b      	ldr	r3, [r7, #0]
 800a564:	0a1b      	lsrs	r3, r3, #8
 800a566:	b2db      	uxtb	r3, r3
 800a568:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 800a56a:	683b      	ldr	r3, [r7, #0]
 800a56c:	b2db      	uxtb	r3, r3
 800a56e:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 800a570:	f107 030c 	add.w	r3, r7, #12
 800a574:	2204      	movs	r2, #4
 800a576:	4619      	mov	r1, r3
 800a578:	2097      	movs	r0, #151	; 0x97
 800a57a:	f000 fc09 	bl	800ad90 <SUBGRF_WriteCommand>
}
 800a57e:	bf00      	nop
 800a580:	3710      	adds	r7, #16
 800a582:	46bd      	mov	sp, r7
 800a584:	bd80      	pop	{r7, pc}
	...

0800a588 <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 800a588:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800a58c:	b084      	sub	sp, #16
 800a58e:	af00      	add	r7, sp, #0
 800a590:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 800a592:	2300      	movs	r3, #0
 800a594:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 800a596:	4b1d      	ldr	r3, [pc, #116]	; (800a60c <SUBGRF_SetRfFrequency+0x84>)
 800a598:	781b      	ldrb	r3, [r3, #0]
 800a59a:	f083 0301 	eor.w	r3, r3, #1
 800a59e:	b2db      	uxtb	r3, r3
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d005      	beq.n	800a5b0 <SUBGRF_SetRfFrequency+0x28>
    {
        SUBGRF_CalibrateImage( frequency );
 800a5a4:	6878      	ldr	r0, [r7, #4]
 800a5a6:	f7ff ff27 	bl	800a3f8 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 800a5aa:	4b18      	ldr	r3, [pc, #96]	; (800a60c <SUBGRF_SetRfFrequency+0x84>)
 800a5ac:	2201      	movs	r2, #1
 800a5ae:	701a      	strb	r2, [r3, #0]
    }
    SX_FREQ_TO_CHANNEL(chan, frequency);
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	2200      	movs	r2, #0
 800a5b4:	461c      	mov	r4, r3
 800a5b6:	4615      	mov	r5, r2
 800a5b8:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 800a5bc:	ea4f 6844 	mov.w	r8, r4, lsl #25
 800a5c0:	4a13      	ldr	r2, [pc, #76]	; (800a610 <SUBGRF_SetRfFrequency+0x88>)
 800a5c2:	f04f 0300 	mov.w	r3, #0
 800a5c6:	4640      	mov	r0, r8
 800a5c8:	4649      	mov	r1, r9
 800a5ca:	f7f5 fe29 	bl	8000220 <__aeabi_uldivmod>
 800a5ce:	4602      	mov	r2, r0
 800a5d0:	460b      	mov	r3, r1
 800a5d2:	4613      	mov	r3, r2
 800a5d4:	60fb      	str	r3, [r7, #12]
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	0e1b      	lsrs	r3, r3, #24
 800a5da:	b2db      	uxtb	r3, r3
 800a5dc:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	0c1b      	lsrs	r3, r3, #16
 800a5e2:	b2db      	uxtb	r3, r3
 800a5e4:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	0a1b      	lsrs	r3, r3, #8
 800a5ea:	b2db      	uxtb	r3, r3
 800a5ec:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	b2db      	uxtb	r3, r3
 800a5f2:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 800a5f4:	f107 0308 	add.w	r3, r7, #8
 800a5f8:	2204      	movs	r2, #4
 800a5fa:	4619      	mov	r1, r3
 800a5fc:	2086      	movs	r0, #134	; 0x86
 800a5fe:	f000 fbc7 	bl	800ad90 <SUBGRF_WriteCommand>
}
 800a602:	bf00      	nop
 800a604:	3710      	adds	r7, #16
 800a606:	46bd      	mov	sp, r7
 800a608:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800a60c:	20000ac0 	.word	0x20000ac0
 800a610:	01e84800 	.word	0x01e84800

0800a614 <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 800a614:	b580      	push	{r7, lr}
 800a616:	b082      	sub	sp, #8
 800a618:	af00      	add	r7, sp, #0
 800a61a:	4603      	mov	r3, r0
 800a61c:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 800a61e:	79fa      	ldrb	r2, [r7, #7]
 800a620:	4b09      	ldr	r3, [pc, #36]	; (800a648 <SUBGRF_SetPacketType+0x34>)
 800a622:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 800a624:	79fb      	ldrb	r3, [r7, #7]
 800a626:	2b00      	cmp	r3, #0
 800a628:	d104      	bne.n	800a634 <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 800a62a:	2100      	movs	r1, #0
 800a62c:	f240 60ac 	movw	r0, #1708	; 0x6ac
 800a630:	f000 fafe 	bl	800ac30 <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 800a634:	1dfb      	adds	r3, r7, #7
 800a636:	2201      	movs	r2, #1
 800a638:	4619      	mov	r1, r3
 800a63a:	208a      	movs	r0, #138	; 0x8a
 800a63c:	f000 fba8 	bl	800ad90 <SUBGRF_WriteCommand>
}
 800a640:	bf00      	nop
 800a642:	3708      	adds	r7, #8
 800a644:	46bd      	mov	sp, r7
 800a646:	bd80      	pop	{r7, pc}
 800a648:	20000ab9 	.word	0x20000ab9

0800a64c <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 800a64c:	b480      	push	{r7}
 800a64e:	af00      	add	r7, sp, #0
    return PacketType;
 800a650:	4b02      	ldr	r3, [pc, #8]	; (800a65c <SUBGRF_GetPacketType+0x10>)
 800a652:	781b      	ldrb	r3, [r3, #0]
}
 800a654:	4618      	mov	r0, r3
 800a656:	46bd      	mov	sp, r7
 800a658:	bc80      	pop	{r7}
 800a65a:	4770      	bx	lr
 800a65c:	20000ab9 	.word	0x20000ab9

0800a660 <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime )
{
 800a660:	b580      	push	{r7, lr}
 800a662:	b084      	sub	sp, #16
 800a664:	af00      	add	r7, sp, #0
 800a666:	4603      	mov	r3, r0
 800a668:	71fb      	strb	r3, [r7, #7]
 800a66a:	460b      	mov	r3, r1
 800a66c:	71bb      	strb	r3, [r7, #6]
 800a66e:	4613      	mov	r3, r2
 800a670:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];
    int32_t max_power;

    if (paSelect == RFO_LP)
 800a672:	79fb      	ldrb	r3, [r7, #7]
 800a674:	2b01      	cmp	r3, #1
 800a676:	d149      	bne.n	800a70c <SUBGRF_SetTxParams+0xac>
    {
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 800a678:	2000      	movs	r0, #0
 800a67a:	f000 ff2e 	bl	800b4da <RBI_GetRFOMaxPowerConfig>
 800a67e:	60f8      	str	r0, [r7, #12]
        if (power >  max_power)
 800a680:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800a684:	68fa      	ldr	r2, [r7, #12]
 800a686:	429a      	cmp	r2, r3
 800a688:	da01      	bge.n	800a68e <SUBGRF_SetTxParams+0x2e>
        {
          power = max_power;
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 14)
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	2b0e      	cmp	r3, #14
 800a692:	d10e      	bne.n	800a6b2 <SUBGRF_SetTxParams+0x52>
        {
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 800a694:	2301      	movs	r3, #1
 800a696:	2201      	movs	r2, #1
 800a698:	2100      	movs	r1, #0
 800a69a:	2004      	movs	r0, #4
 800a69c:	f7ff fef6 	bl	800a48c <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 800a6a0:	79ba      	ldrb	r2, [r7, #6]
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	b2db      	uxtb	r3, r3
 800a6a6:	1ad3      	subs	r3, r2, r3
 800a6a8:	b2db      	uxtb	r3, r3
 800a6aa:	330e      	adds	r3, #14
 800a6ac:	b2db      	uxtb	r3, r3
 800a6ae:	71bb      	strb	r3, [r7, #6]
 800a6b0:	e01f      	b.n	800a6f2 <SUBGRF_SetTxParams+0x92>
        }
        else if (max_power == 10)
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	2b0a      	cmp	r3, #10
 800a6b6:	d10e      	bne.n	800a6d6 <SUBGRF_SetTxParams+0x76>
        {
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 800a6b8:	2301      	movs	r3, #1
 800a6ba:	2201      	movs	r2, #1
 800a6bc:	2100      	movs	r1, #0
 800a6be:	2001      	movs	r0, #1
 800a6c0:	f7ff fee4 	bl	800a48c <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 800a6c4:	79ba      	ldrb	r2, [r7, #6]
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	b2db      	uxtb	r3, r3
 800a6ca:	1ad3      	subs	r3, r2, r3
 800a6cc:	b2db      	uxtb	r3, r3
 800a6ce:	330d      	adds	r3, #13
 800a6d0:	b2db      	uxtb	r3, r3
 800a6d2:	71bb      	strb	r3, [r7, #6]
 800a6d4:	e00d      	b.n	800a6f2 <SUBGRF_SetTxParams+0x92>
        }
        else /*default 15dBm*/
        {
            SUBGRF_SetPaConfig(0x07, 0x00, 0x01, 0x01);
 800a6d6:	2301      	movs	r3, #1
 800a6d8:	2201      	movs	r2, #1
 800a6da:	2100      	movs	r1, #0
 800a6dc:	2007      	movs	r0, #7
 800a6de:	f7ff fed5 	bl	800a48c <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 800a6e2:	79ba      	ldrb	r2, [r7, #6]
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	b2db      	uxtb	r3, r3
 800a6e8:	1ad3      	subs	r3, r2, r3
 800a6ea:	b2db      	uxtb	r3, r3
 800a6ec:	330e      	adds	r3, #14
 800a6ee:	b2db      	uxtb	r3, r3
 800a6f0:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -17)
 800a6f2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800a6f6:	f113 0f11 	cmn.w	r3, #17
 800a6fa:	da01      	bge.n	800a700 <SUBGRF_SetTxParams+0xa0>
        {
            power = -17;
 800a6fc:	23ef      	movs	r3, #239	; 0xef
 800a6fe:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 800a700:	2118      	movs	r1, #24
 800a702:	f640 00e7 	movw	r0, #2279	; 0x8e7
 800a706:	f000 fa93 	bl	800ac30 <SUBGRF_WriteRegister>
 800a70a:	e067      	b.n	800a7dc <SUBGRF_SetTxParams+0x17c>
    }
    else /* rfo_hp*/
    {
        /* WORKAROUND - Better Resistance of the RFO High Power Tx to Antenna Mismatch, see STM32WL Erratasheet*/
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 800a70c:	f640 00d8 	movw	r0, #2264	; 0x8d8
 800a710:	f000 faa2 	bl	800ac58 <SUBGRF_ReadRegister>
 800a714:	4603      	mov	r3, r0
 800a716:	f043 031e 	orr.w	r3, r3, #30
 800a71a:	b2db      	uxtb	r3, r3
 800a71c:	4619      	mov	r1, r3
 800a71e:	f640 00d8 	movw	r0, #2264	; 0x8d8
 800a722:	f000 fa85 	bl	800ac30 <SUBGRF_WriteRegister>
        /* WORKAROUND END*/
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 800a726:	2001      	movs	r0, #1
 800a728:	f000 fed7 	bl	800b4da <RBI_GetRFOMaxPowerConfig>
 800a72c:	60f8      	str	r0, [r7, #12]
        if (power > max_power)
 800a72e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800a732:	68fa      	ldr	r2, [r7, #12]
 800a734:	429a      	cmp	r2, r3
 800a736:	da01      	bge.n	800a73c <SUBGRF_SetTxParams+0xdc>
        {
            power = max_power;
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 20)
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	2b14      	cmp	r3, #20
 800a740:	d10e      	bne.n	800a760 <SUBGRF_SetTxParams+0x100>
        {
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 800a742:	2301      	movs	r3, #1
 800a744:	2200      	movs	r2, #0
 800a746:	2105      	movs	r1, #5
 800a748:	2003      	movs	r0, #3
 800a74a:	f7ff fe9f 	bl	800a48c <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 800a74e:	79ba      	ldrb	r2, [r7, #6]
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	b2db      	uxtb	r3, r3
 800a754:	1ad3      	subs	r3, r2, r3
 800a756:	b2db      	uxtb	r3, r3
 800a758:	3316      	adds	r3, #22
 800a75a:	b2db      	uxtb	r3, r3
 800a75c:	71bb      	strb	r3, [r7, #6]
 800a75e:	e031      	b.n	800a7c4 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 17)
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	2b11      	cmp	r3, #17
 800a764:	d10e      	bne.n	800a784 <SUBGRF_SetTxParams+0x124>
        {
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 800a766:	2301      	movs	r3, #1
 800a768:	2200      	movs	r2, #0
 800a76a:	2103      	movs	r1, #3
 800a76c:	2002      	movs	r0, #2
 800a76e:	f7ff fe8d 	bl	800a48c <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 800a772:	79ba      	ldrb	r2, [r7, #6]
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	b2db      	uxtb	r3, r3
 800a778:	1ad3      	subs	r3, r2, r3
 800a77a:	b2db      	uxtb	r3, r3
 800a77c:	3316      	adds	r3, #22
 800a77e:	b2db      	uxtb	r3, r3
 800a780:	71bb      	strb	r3, [r7, #6]
 800a782:	e01f      	b.n	800a7c4 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 14)
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	2b0e      	cmp	r3, #14
 800a788:	d10e      	bne.n	800a7a8 <SUBGRF_SetTxParams+0x148>
        {
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 800a78a:	2301      	movs	r3, #1
 800a78c:	2200      	movs	r2, #0
 800a78e:	2102      	movs	r1, #2
 800a790:	2002      	movs	r0, #2
 800a792:	f7ff fe7b 	bl	800a48c <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 800a796:	79ba      	ldrb	r2, [r7, #6]
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	b2db      	uxtb	r3, r3
 800a79c:	1ad3      	subs	r3, r2, r3
 800a79e:	b2db      	uxtb	r3, r3
 800a7a0:	330e      	adds	r3, #14
 800a7a2:	b2db      	uxtb	r3, r3
 800a7a4:	71bb      	strb	r3, [r7, #6]
 800a7a6:	e00d      	b.n	800a7c4 <SUBGRF_SetTxParams+0x164>
        }
        else /*22dBm*/
        {
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 800a7a8:	2301      	movs	r3, #1
 800a7aa:	2200      	movs	r2, #0
 800a7ac:	2107      	movs	r1, #7
 800a7ae:	2004      	movs	r0, #4
 800a7b0:	f7ff fe6c 	bl	800a48c <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 800a7b4:	79ba      	ldrb	r2, [r7, #6]
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	b2db      	uxtb	r3, r3
 800a7ba:	1ad3      	subs	r3, r2, r3
 800a7bc:	b2db      	uxtb	r3, r3
 800a7be:	3316      	adds	r3, #22
 800a7c0:	b2db      	uxtb	r3, r3
 800a7c2:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -9)
 800a7c4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800a7c8:	f113 0f09 	cmn.w	r3, #9
 800a7cc:	da01      	bge.n	800a7d2 <SUBGRF_SetTxParams+0x172>
        {
            power = -9;
 800a7ce:	23f7      	movs	r3, #247	; 0xf7
 800a7d0:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 800a7d2:	2138      	movs	r1, #56	; 0x38
 800a7d4:	f640 00e7 	movw	r0, #2279	; 0x8e7
 800a7d8:	f000 fa2a 	bl	800ac30 <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 800a7dc:	79bb      	ldrb	r3, [r7, #6]
 800a7de:	723b      	strb	r3, [r7, #8]
    buf[1] = (uint8_t)rampTime;
 800a7e0:	797b      	ldrb	r3, [r7, #5]
 800a7e2:	727b      	strb	r3, [r7, #9]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 800a7e4:	f107 0308 	add.w	r3, r7, #8
 800a7e8:	2202      	movs	r2, #2
 800a7ea:	4619      	mov	r1, r3
 800a7ec:	208e      	movs	r0, #142	; 0x8e
 800a7ee:	f000 facf 	bl	800ad90 <SUBGRF_WriteCommand>
}
 800a7f2:	bf00      	nop
 800a7f4:	3710      	adds	r7, #16
 800a7f6:	46bd      	mov	sp, r7
 800a7f8:	bd80      	pop	{r7, pc}
	...

0800a7fc <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 800a7fc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800a800:	b086      	sub	sp, #24
 800a802:	af00      	add	r7, sp, #0
 800a804:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 800a806:	2300      	movs	r3, #0
 800a808:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 800a80a:	4a61      	ldr	r2, [pc, #388]	; (800a990 <SUBGRF_SetModulationParams+0x194>)
 800a80c:	f107 0308 	add.w	r3, r7, #8
 800a810:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a814:	e883 0003 	stmia.w	r3, {r0, r1}

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	781a      	ldrb	r2, [r3, #0]
 800a81c:	4b5d      	ldr	r3, [pc, #372]	; (800a994 <SUBGRF_SetModulationParams+0x198>)
 800a81e:	781b      	ldrb	r3, [r3, #0]
 800a820:	429a      	cmp	r2, r3
 800a822:	d004      	beq.n	800a82e <SUBGRF_SetModulationParams+0x32>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	781b      	ldrb	r3, [r3, #0]
 800a828:	4618      	mov	r0, r3
 800a82a:	f7ff fef3 	bl	800a614 <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	781b      	ldrb	r3, [r3, #0]
 800a832:	2b03      	cmp	r3, #3
 800a834:	f200 80a5 	bhi.w	800a982 <SUBGRF_SetModulationParams+0x186>
 800a838:	a201      	add	r2, pc, #4	; (adr r2, 800a840 <SUBGRF_SetModulationParams+0x44>)
 800a83a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a83e:	bf00      	nop
 800a840:	0800a851 	.word	0x0800a851
 800a844:	0800a911 	.word	0x0800a911
 800a848:	0800a8d3 	.word	0x0800a8d3
 800a84c:	0800a93f 	.word	0x0800a93f
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 800a850:	2308      	movs	r3, #8
 800a852:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	685b      	ldr	r3, [r3, #4]
 800a858:	4a4f      	ldr	r2, [pc, #316]	; (800a998 <SUBGRF_SetModulationParams+0x19c>)
 800a85a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a85e:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 800a860:	697b      	ldr	r3, [r7, #20]
 800a862:	0c1b      	lsrs	r3, r3, #16
 800a864:	b2db      	uxtb	r3, r3
 800a866:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 800a868:	697b      	ldr	r3, [r7, #20]
 800a86a:	0a1b      	lsrs	r3, r3, #8
 800a86c:	b2db      	uxtb	r3, r3
 800a86e:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 800a870:	697b      	ldr	r3, [r7, #20]
 800a872:	b2db      	uxtb	r3, r3
 800a874:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	7b1b      	ldrb	r3, [r3, #12]
 800a87a:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	7b5b      	ldrb	r3, [r3, #13]
 800a880:	733b      	strb	r3, [r7, #12]
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	689b      	ldr	r3, [r3, #8]
 800a886:	2200      	movs	r2, #0
 800a888:	461c      	mov	r4, r3
 800a88a:	4615      	mov	r5, r2
 800a88c:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 800a890:	ea4f 6844 	mov.w	r8, r4, lsl #25
 800a894:	4a41      	ldr	r2, [pc, #260]	; (800a99c <SUBGRF_SetModulationParams+0x1a0>)
 800a896:	f04f 0300 	mov.w	r3, #0
 800a89a:	4640      	mov	r0, r8
 800a89c:	4649      	mov	r1, r9
 800a89e:	f7f5 fcbf 	bl	8000220 <__aeabi_uldivmod>
 800a8a2:	4602      	mov	r2, r0
 800a8a4:	460b      	mov	r3, r1
 800a8a6:	4613      	mov	r3, r2
 800a8a8:	617b      	str	r3, [r7, #20]
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 800a8aa:	697b      	ldr	r3, [r7, #20]
 800a8ac:	0c1b      	lsrs	r3, r3, #16
 800a8ae:	b2db      	uxtb	r3, r3
 800a8b0:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 800a8b2:	697b      	ldr	r3, [r7, #20]
 800a8b4:	0a1b      	lsrs	r3, r3, #8
 800a8b6:	b2db      	uxtb	r3, r3
 800a8b8:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 800a8ba:	697b      	ldr	r3, [r7, #20]
 800a8bc:	b2db      	uxtb	r3, r3
 800a8be:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800a8c0:	7cfb      	ldrb	r3, [r7, #19]
 800a8c2:	b29a      	uxth	r2, r3
 800a8c4:	f107 0308 	add.w	r3, r7, #8
 800a8c8:	4619      	mov	r1, r3
 800a8ca:	208b      	movs	r0, #139	; 0x8b
 800a8cc:	f000 fa60 	bl	800ad90 <SUBGRF_WriteCommand>
        break;
 800a8d0:	e058      	b.n	800a984 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_BPSK:
        n = 4;
 800a8d2:	2304      	movs	r3, #4
 800a8d4:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	691b      	ldr	r3, [r3, #16]
 800a8da:	4a2f      	ldr	r2, [pc, #188]	; (800a998 <SUBGRF_SetModulationParams+0x19c>)
 800a8dc:	fbb2 f3f3 	udiv	r3, r2, r3
 800a8e0:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 800a8e2:	697b      	ldr	r3, [r7, #20]
 800a8e4:	0c1b      	lsrs	r3, r3, #16
 800a8e6:	b2db      	uxtb	r3, r3
 800a8e8:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 800a8ea:	697b      	ldr	r3, [r7, #20]
 800a8ec:	0a1b      	lsrs	r3, r3, #8
 800a8ee:	b2db      	uxtb	r3, r3
 800a8f0:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 800a8f2:	697b      	ldr	r3, [r7, #20]
 800a8f4:	b2db      	uxtb	r3, r3
 800a8f6:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	7d1b      	ldrb	r3, [r3, #20]
 800a8fc:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800a8fe:	7cfb      	ldrb	r3, [r7, #19]
 800a900:	b29a      	uxth	r2, r3
 800a902:	f107 0308 	add.w	r3, r7, #8
 800a906:	4619      	mov	r1, r3
 800a908:	208b      	movs	r0, #139	; 0x8b
 800a90a:	f000 fa41 	bl	800ad90 <SUBGRF_WriteCommand>
        break;
 800a90e:	e039      	b.n	800a984 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_LORA:
        n = 4;
 800a910:	2304      	movs	r3, #4
 800a912:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	7e1b      	ldrb	r3, [r3, #24]
 800a918:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	7e5b      	ldrb	r3, [r3, #25]
 800a91e:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	7e9b      	ldrb	r3, [r3, #26]
 800a924:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	7edb      	ldrb	r3, [r3, #27]
 800a92a:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800a92c:	7cfb      	ldrb	r3, [r7, #19]
 800a92e:	b29a      	uxth	r2, r3
 800a930:	f107 0308 	add.w	r3, r7, #8
 800a934:	4619      	mov	r1, r3
 800a936:	208b      	movs	r0, #139	; 0x8b
 800a938:	f000 fa2a 	bl	800ad90 <SUBGRF_WriteCommand>

        break;
 800a93c:	e022      	b.n	800a984 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_GMSK:
        n = 5;
 800a93e:	2305      	movs	r3, #5
 800a940:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	685b      	ldr	r3, [r3, #4]
 800a946:	4a14      	ldr	r2, [pc, #80]	; (800a998 <SUBGRF_SetModulationParams+0x19c>)
 800a948:	fbb2 f3f3 	udiv	r3, r2, r3
 800a94c:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 800a94e:	697b      	ldr	r3, [r7, #20]
 800a950:	0c1b      	lsrs	r3, r3, #16
 800a952:	b2db      	uxtb	r3, r3
 800a954:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 800a956:	697b      	ldr	r3, [r7, #20]
 800a958:	0a1b      	lsrs	r3, r3, #8
 800a95a:	b2db      	uxtb	r3, r3
 800a95c:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 800a95e:	697b      	ldr	r3, [r7, #20]
 800a960:	b2db      	uxtb	r3, r3
 800a962:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	7b1b      	ldrb	r3, [r3, #12]
 800a968:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	7b5b      	ldrb	r3, [r3, #13]
 800a96e:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800a970:	7cfb      	ldrb	r3, [r7, #19]
 800a972:	b29a      	uxth	r2, r3
 800a974:	f107 0308 	add.w	r3, r7, #8
 800a978:	4619      	mov	r1, r3
 800a97a:	208b      	movs	r0, #139	; 0x8b
 800a97c:	f000 fa08 	bl	800ad90 <SUBGRF_WriteCommand>
        break;
 800a980:	e000      	b.n	800a984 <SUBGRF_SetModulationParams+0x188>
    default:
    case PACKET_TYPE_NONE:
      break;
 800a982:	bf00      	nop
    }
}
 800a984:	bf00      	nop
 800a986:	3718      	adds	r7, #24
 800a988:	46bd      	mov	sp, r7
 800a98a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800a98e:	bf00      	nop
 800a990:	0800cb08 	.word	0x0800cb08
 800a994:	20000ab9 	.word	0x20000ab9
 800a998:	3d090000 	.word	0x3d090000
 800a99c:	01e84800 	.word	0x01e84800

0800a9a0 <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 800a9a0:	b580      	push	{r7, lr}
 800a9a2:	b086      	sub	sp, #24
 800a9a4:	af00      	add	r7, sp, #0
 800a9a6:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 800a9a8:	2300      	movs	r3, #0
 800a9aa:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 800a9ac:	4a48      	ldr	r2, [pc, #288]	; (800aad0 <SUBGRF_SetPacketParams+0x130>)
 800a9ae:	f107 030c 	add.w	r3, r7, #12
 800a9b2:	ca07      	ldmia	r2, {r0, r1, r2}
 800a9b4:	c303      	stmia	r3!, {r0, r1}
 800a9b6:	701a      	strb	r2, [r3, #0]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	781a      	ldrb	r2, [r3, #0]
 800a9bc:	4b45      	ldr	r3, [pc, #276]	; (800aad4 <SUBGRF_SetPacketParams+0x134>)
 800a9be:	781b      	ldrb	r3, [r3, #0]
 800a9c0:	429a      	cmp	r2, r3
 800a9c2:	d004      	beq.n	800a9ce <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	781b      	ldrb	r3, [r3, #0]
 800a9c8:	4618      	mov	r0, r3
 800a9ca:	f7ff fe23 	bl	800a614 <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	781b      	ldrb	r3, [r3, #0]
 800a9d2:	2b03      	cmp	r3, #3
 800a9d4:	d878      	bhi.n	800aac8 <SUBGRF_SetPacketParams+0x128>
 800a9d6:	a201      	add	r2, pc, #4	; (adr r2, 800a9dc <SUBGRF_SetPacketParams+0x3c>)
 800a9d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9dc:	0800a9ed 	.word	0x0800a9ed
 800a9e0:	0800aa7d 	.word	0x0800aa7d
 800a9e4:	0800aa71 	.word	0x0800aa71
 800a9e8:	0800a9ed 	.word	0x0800a9ed
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	7a5b      	ldrb	r3, [r3, #9]
 800a9f0:	2bf1      	cmp	r3, #241	; 0xf1
 800a9f2:	d10a      	bne.n	800aa0a <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 800a9f4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800a9f8:	f7ff faaa 	bl	8009f50 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 800a9fc:	f248 0005 	movw	r0, #32773	; 0x8005
 800aa00:	f7ff fac6 	bl	8009f90 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 800aa04:	2302      	movs	r3, #2
 800aa06:	75bb      	strb	r3, [r7, #22]
 800aa08:	e011      	b.n	800aa2e <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	7a5b      	ldrb	r3, [r3, #9]
 800aa0e:	2bf2      	cmp	r3, #242	; 0xf2
 800aa10:	d10a      	bne.n	800aa28 <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 800aa12:	f641 500f 	movw	r0, #7439	; 0x1d0f
 800aa16:	f7ff fa9b 	bl	8009f50 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 800aa1a:	f241 0021 	movw	r0, #4129	; 0x1021
 800aa1e:	f7ff fab7 	bl	8009f90 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 800aa22:	2306      	movs	r3, #6
 800aa24:	75bb      	strb	r3, [r7, #22]
 800aa26:	e002      	b.n	800aa2e <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	7a5b      	ldrb	r3, [r3, #9]
 800aa2c:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 800aa2e:	2309      	movs	r3, #9
 800aa30:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	885b      	ldrh	r3, [r3, #2]
 800aa36:	0a1b      	lsrs	r3, r3, #8
 800aa38:	b29b      	uxth	r3, r3
 800aa3a:	b2db      	uxtb	r3, r3
 800aa3c:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	885b      	ldrh	r3, [r3, #2]
 800aa42:	b2db      	uxtb	r3, r3
 800aa44:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	791b      	ldrb	r3, [r3, #4]
 800aa4a:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	795b      	ldrb	r3, [r3, #5]
 800aa50:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	799b      	ldrb	r3, [r3, #6]
 800aa56:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	79db      	ldrb	r3, [r3, #7]
 800aa5c:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	7a1b      	ldrb	r3, [r3, #8]
 800aa62:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 800aa64:	7dbb      	ldrb	r3, [r7, #22]
 800aa66:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	7a9b      	ldrb	r3, [r3, #10]
 800aa6c:	753b      	strb	r3, [r7, #20]
        break;
 800aa6e:	e022      	b.n	800aab6 <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 800aa70:	2301      	movs	r3, #1
 800aa72:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	7b1b      	ldrb	r3, [r3, #12]
 800aa78:	733b      	strb	r3, [r7, #12]
        break;
 800aa7a:	e01c      	b.n	800aab6 <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 800aa7c:	2306      	movs	r3, #6
 800aa7e:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	89db      	ldrh	r3, [r3, #14]
 800aa84:	0a1b      	lsrs	r3, r3, #8
 800aa86:	b29b      	uxth	r3, r3
 800aa88:	b2db      	uxtb	r3, r3
 800aa8a:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	89db      	ldrh	r3, [r3, #14]
 800aa90:	b2db      	uxtb	r3, r3
 800aa92:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	7c1a      	ldrb	r2, [r3, #16]
 800aa98:	4b0f      	ldr	r3, [pc, #60]	; (800aad8 <SUBGRF_SetPacketParams+0x138>)
 800aa9a:	4611      	mov	r1, r2
 800aa9c:	7019      	strb	r1, [r3, #0]
 800aa9e:	4613      	mov	r3, r2
 800aaa0:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	7c5b      	ldrb	r3, [r3, #17]
 800aaa6:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	7c9b      	ldrb	r3, [r3, #18]
 800aaac:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	7cdb      	ldrb	r3, [r3, #19]
 800aab2:	747b      	strb	r3, [r7, #17]
        break;
 800aab4:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 800aab6:	7dfb      	ldrb	r3, [r7, #23]
 800aab8:	b29a      	uxth	r2, r3
 800aaba:	f107 030c 	add.w	r3, r7, #12
 800aabe:	4619      	mov	r1, r3
 800aac0:	208c      	movs	r0, #140	; 0x8c
 800aac2:	f000 f965 	bl	800ad90 <SUBGRF_WriteCommand>
 800aac6:	e000      	b.n	800aaca <SUBGRF_SetPacketParams+0x12a>
        return;
 800aac8:	bf00      	nop
}
 800aaca:	3718      	adds	r7, #24
 800aacc:	46bd      	mov	sp, r7
 800aace:	bd80      	pop	{r7, pc}
 800aad0:	0800cb10 	.word	0x0800cb10
 800aad4:	20000ab9 	.word	0x20000ab9
 800aad8:	20000aba 	.word	0x20000aba

0800aadc <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 800aadc:	b580      	push	{r7, lr}
 800aade:	b084      	sub	sp, #16
 800aae0:	af00      	add	r7, sp, #0
 800aae2:	4603      	mov	r3, r0
 800aae4:	460a      	mov	r2, r1
 800aae6:	71fb      	strb	r3, [r7, #7]
 800aae8:	4613      	mov	r3, r2
 800aaea:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 800aaec:	79fb      	ldrb	r3, [r7, #7]
 800aaee:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 800aaf0:	79bb      	ldrb	r3, [r7, #6]
 800aaf2:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 800aaf4:	f107 030c 	add.w	r3, r7, #12
 800aaf8:	2202      	movs	r2, #2
 800aafa:	4619      	mov	r1, r3
 800aafc:	208f      	movs	r0, #143	; 0x8f
 800aafe:	f000 f947 	bl	800ad90 <SUBGRF_WriteCommand>
}
 800ab02:	bf00      	nop
 800ab04:	3710      	adds	r7, #16
 800ab06:	46bd      	mov	sp, r7
 800ab08:	bd80      	pop	{r7, pc}

0800ab0a <SUBGRF_GetRssiInst>:
    status.Fields.ChipMode = ( stat & ( 0x07 << 4 ) ) >> 4;
    return status;
}

int8_t SUBGRF_GetRssiInst( void )
{
 800ab0a:	b580      	push	{r7, lr}
 800ab0c:	b082      	sub	sp, #8
 800ab0e:	af00      	add	r7, sp, #0
    uint8_t buf[1];
    int8_t rssi = 0;
 800ab10:	2300      	movs	r3, #0
 800ab12:	71fb      	strb	r3, [r7, #7]

    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 800ab14:	1d3b      	adds	r3, r7, #4
 800ab16:	2201      	movs	r2, #1
 800ab18:	4619      	mov	r1, r3
 800ab1a:	2015      	movs	r0, #21
 800ab1c:	f000 f95a 	bl	800add4 <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 800ab20:	793b      	ldrb	r3, [r7, #4]
 800ab22:	425b      	negs	r3, r3
 800ab24:	105b      	asrs	r3, r3, #1
 800ab26:	71fb      	strb	r3, [r7, #7]
    return rssi;
 800ab28:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 800ab2c:	4618      	mov	r0, r3
 800ab2e:	3708      	adds	r7, #8
 800ab30:	46bd      	mov	sp, r7
 800ab32:	bd80      	pop	{r7, pc}

0800ab34 <SUBGRF_GetRxBufferStatus>:

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 800ab34:	b580      	push	{r7, lr}
 800ab36:	b084      	sub	sp, #16
 800ab38:	af00      	add	r7, sp, #0
 800ab3a:	6078      	str	r0, [r7, #4]
 800ab3c:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 800ab3e:	f107 030c 	add.w	r3, r7, #12
 800ab42:	2202      	movs	r2, #2
 800ab44:	4619      	mov	r1, r3
 800ab46:	2013      	movs	r0, #19
 800ab48:	f000 f944 	bl	800add4 <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 800ab4c:	f7ff fd7e 	bl	800a64c <SUBGRF_GetPacketType>
 800ab50:	4603      	mov	r3, r0
 800ab52:	2b01      	cmp	r3, #1
 800ab54:	d10d      	bne.n	800ab72 <SUBGRF_GetRxBufferStatus+0x3e>
 800ab56:	4b0c      	ldr	r3, [pc, #48]	; (800ab88 <SUBGRF_GetRxBufferStatus+0x54>)
 800ab58:	781b      	ldrb	r3, [r3, #0]
 800ab5a:	b2db      	uxtb	r3, r3
 800ab5c:	2b01      	cmp	r3, #1
 800ab5e:	d108      	bne.n	800ab72 <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 800ab60:	f240 7002 	movw	r0, #1794	; 0x702
 800ab64:	f000 f878 	bl	800ac58 <SUBGRF_ReadRegister>
 800ab68:	4603      	mov	r3, r0
 800ab6a:	461a      	mov	r2, r3
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	701a      	strb	r2, [r3, #0]
 800ab70:	e002      	b.n	800ab78 <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 800ab72:	7b3a      	ldrb	r2, [r7, #12]
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 800ab78:	7b7a      	ldrb	r2, [r7, #13]
 800ab7a:	683b      	ldr	r3, [r7, #0]
 800ab7c:	701a      	strb	r2, [r3, #0]
}
 800ab7e:	bf00      	nop
 800ab80:	3710      	adds	r7, #16
 800ab82:	46bd      	mov	sp, r7
 800ab84:	bd80      	pop	{r7, pc}
 800ab86:	bf00      	nop
 800ab88:	20000aba 	.word	0x20000aba

0800ab8c <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 800ab8c:	b580      	push	{r7, lr}
 800ab8e:	b084      	sub	sp, #16
 800ab90:	af00      	add	r7, sp, #0
 800ab92:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 800ab94:	f107 030c 	add.w	r3, r7, #12
 800ab98:	2203      	movs	r2, #3
 800ab9a:	4619      	mov	r1, r3
 800ab9c:	2014      	movs	r0, #20
 800ab9e:	f000 f919 	bl	800add4 <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 800aba2:	f7ff fd53 	bl	800a64c <SUBGRF_GetPacketType>
 800aba6:	4603      	mov	r3, r0
 800aba8:	461a      	mov	r2, r3
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	781b      	ldrb	r3, [r3, #0]
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d002      	beq.n	800abbc <SUBGRF_GetPacketStatus+0x30>
 800abb6:	2b01      	cmp	r3, #1
 800abb8:	d013      	beq.n	800abe2 <SUBGRF_GetPacketStatus+0x56>
 800abba:	e02a      	b.n	800ac12 <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 800abbc:	7b3a      	ldrb	r2, [r7, #12]
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 800abc2:	7b7b      	ldrb	r3, [r7, #13]
 800abc4:	425b      	negs	r3, r3
 800abc6:	105b      	asrs	r3, r3, #1
 800abc8:	b25a      	sxtb	r2, r3
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 800abce:	7bbb      	ldrb	r3, [r7, #14]
 800abd0:	425b      	negs	r3, r3
 800abd2:	105b      	asrs	r3, r3, #1
 800abd4:	b25a      	sxtb	r2, r3
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	2200      	movs	r2, #0
 800abde:	609a      	str	r2, [r3, #8]
            break;
 800abe0:	e020      	b.n	800ac24 <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 800abe2:	7b3b      	ldrb	r3, [r7, #12]
 800abe4:	425b      	negs	r3, r3
 800abe6:	105b      	asrs	r3, r3, #1
 800abe8:	b25a      	sxtb	r2, r3
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 800abee:	7b7b      	ldrb	r3, [r7, #13]
 800abf0:	b25b      	sxtb	r3, r3
 800abf2:	3302      	adds	r3, #2
 800abf4:	109b      	asrs	r3, r3, #2
 800abf6:	b25a      	sxtb	r2, r3
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 800abfc:	7bbb      	ldrb	r3, [r7, #14]
 800abfe:	425b      	negs	r3, r3
 800ac00:	105b      	asrs	r3, r3, #1
 800ac02:	b25a      	sxtb	r2, r3
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 800ac08:	4b08      	ldr	r3, [pc, #32]	; (800ac2c <SUBGRF_GetPacketStatus+0xa0>)
 800ac0a:	681a      	ldr	r2, [r3, #0]
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	611a      	str	r2, [r3, #16]
            break;
 800ac10:	e008      	b.n	800ac24 <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 800ac12:	2214      	movs	r2, #20
 800ac14:	2100      	movs	r1, #0
 800ac16:	6878      	ldr	r0, [r7, #4]
 800ac18:	f000 fc93 	bl	800b542 <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	220f      	movs	r2, #15
 800ac20:	701a      	strb	r2, [r3, #0]
            break;
 800ac22:	bf00      	nop
    }
}
 800ac24:	bf00      	nop
 800ac26:	3710      	adds	r7, #16
 800ac28:	46bd      	mov	sp, r7
 800ac2a:	bd80      	pop	{r7, pc}
 800ac2c:	20000abc 	.word	0x20000abc

0800ac30 <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 800ac30:	b580      	push	{r7, lr}
 800ac32:	b082      	sub	sp, #8
 800ac34:	af00      	add	r7, sp, #0
 800ac36:	4603      	mov	r3, r0
 800ac38:	460a      	mov	r2, r1
 800ac3a:	80fb      	strh	r3, [r7, #6]
 800ac3c:	4613      	mov	r3, r2
 800ac3e:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 800ac40:	1d7a      	adds	r2, r7, #5
 800ac42:	88f9      	ldrh	r1, [r7, #6]
 800ac44:	2301      	movs	r3, #1
 800ac46:	4803      	ldr	r0, [pc, #12]	; (800ac54 <SUBGRF_WriteRegister+0x24>)
 800ac48:	f7fa fdaa 	bl	80057a0 <HAL_SUBGHZ_WriteRegisters>
}
 800ac4c:	bf00      	nop
 800ac4e:	3708      	adds	r7, #8
 800ac50:	46bd      	mov	sp, r7
 800ac52:	bd80      	pop	{r7, pc}
 800ac54:	20000678 	.word	0x20000678

0800ac58 <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 800ac58:	b580      	push	{r7, lr}
 800ac5a:	b084      	sub	sp, #16
 800ac5c:	af00      	add	r7, sp, #0
 800ac5e:	4603      	mov	r3, r0
 800ac60:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 800ac62:	f107 020f 	add.w	r2, r7, #15
 800ac66:	88f9      	ldrh	r1, [r7, #6]
 800ac68:	2301      	movs	r3, #1
 800ac6a:	4804      	ldr	r0, [pc, #16]	; (800ac7c <SUBGRF_ReadRegister+0x24>)
 800ac6c:	f7fa fdf7 	bl	800585e <HAL_SUBGHZ_ReadRegisters>
    return data;
 800ac70:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac72:	4618      	mov	r0, r3
 800ac74:	3710      	adds	r7, #16
 800ac76:	46bd      	mov	sp, r7
 800ac78:	bd80      	pop	{r7, pc}
 800ac7a:	bf00      	nop
 800ac7c:	20000678 	.word	0x20000678

0800ac80 <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 800ac80:	b580      	push	{r7, lr}
 800ac82:	b086      	sub	sp, #24
 800ac84:	af00      	add	r7, sp, #0
 800ac86:	4603      	mov	r3, r0
 800ac88:	6039      	str	r1, [r7, #0]
 800ac8a:	80fb      	strh	r3, [r7, #6]
 800ac8c:	4613      	mov	r3, r2
 800ac8e:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ac90:	f3ef 8310 	mrs	r3, PRIMASK
 800ac94:	60fb      	str	r3, [r7, #12]
  return(result);
 800ac96:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800ac98:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ac9a:	b672      	cpsid	i
}
 800ac9c:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 800ac9e:	88bb      	ldrh	r3, [r7, #4]
 800aca0:	88f9      	ldrh	r1, [r7, #6]
 800aca2:	683a      	ldr	r2, [r7, #0]
 800aca4:	4806      	ldr	r0, [pc, #24]	; (800acc0 <SUBGRF_WriteRegisters+0x40>)
 800aca6:	f7fa fd7b 	bl	80057a0 <HAL_SUBGHZ_WriteRegisters>
 800acaa:	697b      	ldr	r3, [r7, #20]
 800acac:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800acae:	693b      	ldr	r3, [r7, #16]
 800acb0:	f383 8810 	msr	PRIMASK, r3
}
 800acb4:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800acb6:	bf00      	nop
 800acb8:	3718      	adds	r7, #24
 800acba:	46bd      	mov	sp, r7
 800acbc:	bd80      	pop	{r7, pc}
 800acbe:	bf00      	nop
 800acc0:	20000678 	.word	0x20000678

0800acc4 <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 800acc4:	b580      	push	{r7, lr}
 800acc6:	b086      	sub	sp, #24
 800acc8:	af00      	add	r7, sp, #0
 800acca:	4603      	mov	r3, r0
 800accc:	6039      	str	r1, [r7, #0]
 800acce:	80fb      	strh	r3, [r7, #6]
 800acd0:	4613      	mov	r3, r2
 800acd2:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800acd4:	f3ef 8310 	mrs	r3, PRIMASK
 800acd8:	60fb      	str	r3, [r7, #12]
  return(result);
 800acda:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800acdc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800acde:	b672      	cpsid	i
}
 800ace0:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 800ace2:	88bb      	ldrh	r3, [r7, #4]
 800ace4:	88f9      	ldrh	r1, [r7, #6]
 800ace6:	683a      	ldr	r2, [r7, #0]
 800ace8:	4806      	ldr	r0, [pc, #24]	; (800ad04 <SUBGRF_ReadRegisters+0x40>)
 800acea:	f7fa fdb8 	bl	800585e <HAL_SUBGHZ_ReadRegisters>
 800acee:	697b      	ldr	r3, [r7, #20]
 800acf0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800acf2:	693b      	ldr	r3, [r7, #16]
 800acf4:	f383 8810 	msr	PRIMASK, r3
}
 800acf8:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800acfa:	bf00      	nop
 800acfc:	3718      	adds	r7, #24
 800acfe:	46bd      	mov	sp, r7
 800ad00:	bd80      	pop	{r7, pc}
 800ad02:	bf00      	nop
 800ad04:	20000678 	.word	0x20000678

0800ad08 <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 800ad08:	b580      	push	{r7, lr}
 800ad0a:	b086      	sub	sp, #24
 800ad0c:	af00      	add	r7, sp, #0
 800ad0e:	4603      	mov	r3, r0
 800ad10:	6039      	str	r1, [r7, #0]
 800ad12:	71fb      	strb	r3, [r7, #7]
 800ad14:	4613      	mov	r3, r2
 800ad16:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ad18:	f3ef 8310 	mrs	r3, PRIMASK
 800ad1c:	60fb      	str	r3, [r7, #12]
  return(result);
 800ad1e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800ad20:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ad22:	b672      	cpsid	i
}
 800ad24:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 800ad26:	79bb      	ldrb	r3, [r7, #6]
 800ad28:	b29b      	uxth	r3, r3
 800ad2a:	79f9      	ldrb	r1, [r7, #7]
 800ad2c:	683a      	ldr	r2, [r7, #0]
 800ad2e:	4806      	ldr	r0, [pc, #24]	; (800ad48 <SUBGRF_WriteBuffer+0x40>)
 800ad30:	f7fa fea9 	bl	8005a86 <HAL_SUBGHZ_WriteBuffer>
 800ad34:	697b      	ldr	r3, [r7, #20]
 800ad36:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ad38:	693b      	ldr	r3, [r7, #16]
 800ad3a:	f383 8810 	msr	PRIMASK, r3
}
 800ad3e:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800ad40:	bf00      	nop
 800ad42:	3718      	adds	r7, #24
 800ad44:	46bd      	mov	sp, r7
 800ad46:	bd80      	pop	{r7, pc}
 800ad48:	20000678 	.word	0x20000678

0800ad4c <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 800ad4c:	b580      	push	{r7, lr}
 800ad4e:	b086      	sub	sp, #24
 800ad50:	af00      	add	r7, sp, #0
 800ad52:	4603      	mov	r3, r0
 800ad54:	6039      	str	r1, [r7, #0]
 800ad56:	71fb      	strb	r3, [r7, #7]
 800ad58:	4613      	mov	r3, r2
 800ad5a:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ad5c:	f3ef 8310 	mrs	r3, PRIMASK
 800ad60:	60fb      	str	r3, [r7, #12]
  return(result);
 800ad62:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800ad64:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ad66:	b672      	cpsid	i
}
 800ad68:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 800ad6a:	79bb      	ldrb	r3, [r7, #6]
 800ad6c:	b29b      	uxth	r3, r3
 800ad6e:	79f9      	ldrb	r1, [r7, #7]
 800ad70:	683a      	ldr	r2, [r7, #0]
 800ad72:	4806      	ldr	r0, [pc, #24]	; (800ad8c <SUBGRF_ReadBuffer+0x40>)
 800ad74:	f7fa feda 	bl	8005b2c <HAL_SUBGHZ_ReadBuffer>
 800ad78:	697b      	ldr	r3, [r7, #20]
 800ad7a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ad7c:	693b      	ldr	r3, [r7, #16]
 800ad7e:	f383 8810 	msr	PRIMASK, r3
}
 800ad82:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800ad84:	bf00      	nop
 800ad86:	3718      	adds	r7, #24
 800ad88:	46bd      	mov	sp, r7
 800ad8a:	bd80      	pop	{r7, pc}
 800ad8c:	20000678 	.word	0x20000678

0800ad90 <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 800ad90:	b580      	push	{r7, lr}
 800ad92:	b086      	sub	sp, #24
 800ad94:	af00      	add	r7, sp, #0
 800ad96:	4603      	mov	r3, r0
 800ad98:	6039      	str	r1, [r7, #0]
 800ad9a:	71fb      	strb	r3, [r7, #7]
 800ad9c:	4613      	mov	r3, r2
 800ad9e:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ada0:	f3ef 8310 	mrs	r3, PRIMASK
 800ada4:	60fb      	str	r3, [r7, #12]
  return(result);
 800ada6:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800ada8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800adaa:	b672      	cpsid	i
}
 800adac:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 800adae:	88bb      	ldrh	r3, [r7, #4]
 800adb0:	79f9      	ldrb	r1, [r7, #7]
 800adb2:	683a      	ldr	r2, [r7, #0]
 800adb4:	4806      	ldr	r0, [pc, #24]	; (800add0 <SUBGRF_WriteCommand+0x40>)
 800adb6:	f7fa fdb3 	bl	8005920 <HAL_SUBGHZ_ExecSetCmd>
 800adba:	697b      	ldr	r3, [r7, #20]
 800adbc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800adbe:	693b      	ldr	r3, [r7, #16]
 800adc0:	f383 8810 	msr	PRIMASK, r3
}
 800adc4:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800adc6:	bf00      	nop
 800adc8:	3718      	adds	r7, #24
 800adca:	46bd      	mov	sp, r7
 800adcc:	bd80      	pop	{r7, pc}
 800adce:	bf00      	nop
 800add0:	20000678 	.word	0x20000678

0800add4 <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 800add4:	b580      	push	{r7, lr}
 800add6:	b086      	sub	sp, #24
 800add8:	af00      	add	r7, sp, #0
 800adda:	4603      	mov	r3, r0
 800addc:	6039      	str	r1, [r7, #0]
 800adde:	71fb      	strb	r3, [r7, #7]
 800ade0:	4613      	mov	r3, r2
 800ade2:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ade4:	f3ef 8310 	mrs	r3, PRIMASK
 800ade8:	60fb      	str	r3, [r7, #12]
  return(result);
 800adea:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800adec:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800adee:	b672      	cpsid	i
}
 800adf0:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 800adf2:	88bb      	ldrh	r3, [r7, #4]
 800adf4:	79f9      	ldrb	r1, [r7, #7]
 800adf6:	683a      	ldr	r2, [r7, #0]
 800adf8:	4806      	ldr	r0, [pc, #24]	; (800ae14 <SUBGRF_ReadCommand+0x40>)
 800adfa:	f7fa fdf0 	bl	80059de <HAL_SUBGHZ_ExecGetCmd>
 800adfe:	697b      	ldr	r3, [r7, #20]
 800ae00:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ae02:	693b      	ldr	r3, [r7, #16]
 800ae04:	f383 8810 	msr	PRIMASK, r3
}
 800ae08:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800ae0a:	bf00      	nop
 800ae0c:	3718      	adds	r7, #24
 800ae0e:	46bd      	mov	sp, r7
 800ae10:	bd80      	pop	{r7, pc}
 800ae12:	bf00      	nop
 800ae14:	20000678 	.word	0x20000678

0800ae18 <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 800ae18:	b580      	push	{r7, lr}
 800ae1a:	b084      	sub	sp, #16
 800ae1c:	af00      	add	r7, sp, #0
 800ae1e:	4603      	mov	r3, r0
 800ae20:	460a      	mov	r2, r1
 800ae22:	71fb      	strb	r3, [r7, #7]
 800ae24:	4613      	mov	r3, r2
 800ae26:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 800ae28:	2301      	movs	r3, #1
 800ae2a:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 800ae2c:	79bb      	ldrb	r3, [r7, #6]
 800ae2e:	2b01      	cmp	r3, #1
 800ae30:	d10d      	bne.n	800ae4e <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 800ae32:	79fb      	ldrb	r3, [r7, #7]
 800ae34:	2b01      	cmp	r3, #1
 800ae36:	d104      	bne.n	800ae42 <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 800ae38:	2302      	movs	r3, #2
 800ae3a:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 800ae3c:	2004      	movs	r0, #4
 800ae3e:	f000 f8ef 	bl	800b020 <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 800ae42:	79fb      	ldrb	r3, [r7, #7]
 800ae44:	2b02      	cmp	r3, #2
 800ae46:	d107      	bne.n	800ae58 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 800ae48:	2303      	movs	r3, #3
 800ae4a:	73fb      	strb	r3, [r7, #15]
 800ae4c:	e004      	b.n	800ae58 <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 800ae4e:	79bb      	ldrb	r3, [r7, #6]
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d101      	bne.n	800ae58 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 800ae54:	2301      	movs	r3, #1
 800ae56:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 800ae58:	7bfb      	ldrb	r3, [r7, #15]
 800ae5a:	4618      	mov	r0, r3
 800ae5c:	f000 fad2 	bl	800b404 <RBI_ConfigRFSwitch>
}
 800ae60:	bf00      	nop
 800ae62:	3710      	adds	r7, #16
 800ae64:	46bd      	mov	sp, r7
 800ae66:	bd80      	pop	{r7, pc}

0800ae68 <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power )
{
 800ae68:	b580      	push	{r7, lr}
 800ae6a:	b084      	sub	sp, #16
 800ae6c:	af00      	add	r7, sp, #0
 800ae6e:	4603      	mov	r3, r0
 800ae70:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 800ae72:	2301      	movs	r3, #1
 800ae74:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 800ae76:	f000 fb0f 	bl	800b498 <RBI_GetTxConfig>
 800ae7a:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 800ae7c:	68bb      	ldr	r3, [r7, #8]
 800ae7e:	2b02      	cmp	r3, #2
 800ae80:	d016      	beq.n	800aeb0 <SUBGRF_SetRfTxPower+0x48>
 800ae82:	68bb      	ldr	r3, [r7, #8]
 800ae84:	2b02      	cmp	r3, #2
 800ae86:	dc16      	bgt.n	800aeb6 <SUBGRF_SetRfTxPower+0x4e>
 800ae88:	68bb      	ldr	r3, [r7, #8]
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d003      	beq.n	800ae96 <SUBGRF_SetRfTxPower+0x2e>
 800ae8e:	68bb      	ldr	r3, [r7, #8]
 800ae90:	2b01      	cmp	r3, #1
 800ae92:	d00a      	beq.n	800aeaa <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 800ae94:	e00f      	b.n	800aeb6 <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 800ae96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ae9a:	2b0f      	cmp	r3, #15
 800ae9c:	dd02      	ble.n	800aea4 <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 800ae9e:	2302      	movs	r3, #2
 800aea0:	73fb      	strb	r3, [r7, #15]
            break;
 800aea2:	e009      	b.n	800aeb8 <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 800aea4:	2301      	movs	r3, #1
 800aea6:	73fb      	strb	r3, [r7, #15]
            break;
 800aea8:	e006      	b.n	800aeb8 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 800aeaa:	2301      	movs	r3, #1
 800aeac:	73fb      	strb	r3, [r7, #15]
            break;
 800aeae:	e003      	b.n	800aeb8 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 800aeb0:	2302      	movs	r3, #2
 800aeb2:	73fb      	strb	r3, [r7, #15]
            break;
 800aeb4:	e000      	b.n	800aeb8 <SUBGRF_SetRfTxPower+0x50>
            break;
 800aeb6:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 800aeb8:	f997 1007 	ldrsb.w	r1, [r7, #7]
 800aebc:	7bfb      	ldrb	r3, [r7, #15]
 800aebe:	2202      	movs	r2, #2
 800aec0:	4618      	mov	r0, r3
 800aec2:	f7ff fbcd 	bl	800a660 <SUBGRF_SetTxParams>

    return paSelect;
 800aec6:	7bfb      	ldrb	r3, [r7, #15]
}
 800aec8:	4618      	mov	r0, r3
 800aeca:	3710      	adds	r7, #16
 800aecc:	46bd      	mov	sp, r7
 800aece:	bd80      	pop	{r7, pc}

0800aed0 <SUBGRF_GetRadioWakeUpTime>:

uint32_t SUBGRF_GetRadioWakeUpTime( void )
{
 800aed0:	b480      	push	{r7}
 800aed2:	af00      	add	r7, sp, #0
    return RF_WAKEUP_TIME;
 800aed4:	2301      	movs	r3, #1
}
 800aed6:	4618      	mov	r0, r3
 800aed8:	46bd      	mov	sp, r7
 800aeda:	bc80      	pop	{r7}
 800aedc:	4770      	bx	lr
	...

0800aee0 <HAL_SUBGHZ_TxCpltCallback>:

/* HAL_SUBGHz Callbacks definitions */
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800aee0:	b580      	push	{r7, lr}
 800aee2:	b082      	sub	sp, #8
 800aee4:	af00      	add	r7, sp, #0
 800aee6:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 800aee8:	4b03      	ldr	r3, [pc, #12]	; (800aef8 <HAL_SUBGHZ_TxCpltCallback+0x18>)
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	2001      	movs	r0, #1
 800aeee:	4798      	blx	r3
}
 800aef0:	bf00      	nop
 800aef2:	3708      	adds	r7, #8
 800aef4:	46bd      	mov	sp, r7
 800aef6:	bd80      	pop	{r7, pc}
 800aef8:	20000ac4 	.word	0x20000ac4

0800aefc <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800aefc:	b580      	push	{r7, lr}
 800aefe:	b082      	sub	sp, #8
 800af00:	af00      	add	r7, sp, #0
 800af02:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 800af04:	4b03      	ldr	r3, [pc, #12]	; (800af14 <HAL_SUBGHZ_RxCpltCallback+0x18>)
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	2002      	movs	r0, #2
 800af0a:	4798      	blx	r3
}
 800af0c:	bf00      	nop
 800af0e:	3708      	adds	r7, #8
 800af10:	46bd      	mov	sp, r7
 800af12:	bd80      	pop	{r7, pc}
 800af14:	20000ac4 	.word	0x20000ac4

0800af18 <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 800af18:	b580      	push	{r7, lr}
 800af1a:	b082      	sub	sp, #8
 800af1c:	af00      	add	r7, sp, #0
 800af1e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 800af20:	4b03      	ldr	r3, [pc, #12]	; (800af30 <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	2040      	movs	r0, #64	; 0x40
 800af26:	4798      	blx	r3
}
 800af28:	bf00      	nop
 800af2a:	3708      	adds	r7, #8
 800af2c:	46bd      	mov	sp, r7
 800af2e:	bd80      	pop	{r7, pc}
 800af30:	20000ac4 	.word	0x20000ac4

0800af34 <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 800af34:	b580      	push	{r7, lr}
 800af36:	b082      	sub	sp, #8
 800af38:	af00      	add	r7, sp, #0
 800af3a:	6078      	str	r0, [r7, #4]
 800af3c:	460b      	mov	r3, r1
 800af3e:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 800af40:	78fb      	ldrb	r3, [r7, #3]
 800af42:	2b00      	cmp	r3, #0
 800af44:	d002      	beq.n	800af4c <HAL_SUBGHZ_CADStatusCallback+0x18>
 800af46:	2b01      	cmp	r3, #1
 800af48:	d005      	beq.n	800af56 <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 800af4a:	e00a      	b.n	800af62 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 800af4c:	4b07      	ldr	r3, [pc, #28]	; (800af6c <HAL_SUBGHZ_CADStatusCallback+0x38>)
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	2080      	movs	r0, #128	; 0x80
 800af52:	4798      	blx	r3
            break;
 800af54:	e005      	b.n	800af62 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 800af56:	4b05      	ldr	r3, [pc, #20]	; (800af6c <HAL_SUBGHZ_CADStatusCallback+0x38>)
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800af5e:	4798      	blx	r3
            break;
 800af60:	bf00      	nop
    }
}
 800af62:	bf00      	nop
 800af64:	3708      	adds	r7, #8
 800af66:	46bd      	mov	sp, r7
 800af68:	bd80      	pop	{r7, pc}
 800af6a:	bf00      	nop
 800af6c:	20000ac4 	.word	0x20000ac4

0800af70 <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800af70:	b580      	push	{r7, lr}
 800af72:	b082      	sub	sp, #8
 800af74:	af00      	add	r7, sp, #0
 800af76:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 800af78:	4b04      	ldr	r3, [pc, #16]	; (800af8c <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	f44f 7000 	mov.w	r0, #512	; 0x200
 800af80:	4798      	blx	r3
}
 800af82:	bf00      	nop
 800af84:	3708      	adds	r7, #8
 800af86:	46bd      	mov	sp, r7
 800af88:	bd80      	pop	{r7, pc}
 800af8a:	bf00      	nop
 800af8c:	20000ac4 	.word	0x20000ac4

0800af90 <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800af90:	b580      	push	{r7, lr}
 800af92:	b082      	sub	sp, #8
 800af94:	af00      	add	r7, sp, #0
 800af96:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 800af98:	4b03      	ldr	r3, [pc, #12]	; (800afa8 <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	2020      	movs	r0, #32
 800af9e:	4798      	blx	r3
}
 800afa0:	bf00      	nop
 800afa2:	3708      	adds	r7, #8
 800afa4:	46bd      	mov	sp, r7
 800afa6:	bd80      	pop	{r7, pc}
 800afa8:	20000ac4 	.word	0x20000ac4

0800afac <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800afac:	b580      	push	{r7, lr}
 800afae:	b082      	sub	sp, #8
 800afb0:	af00      	add	r7, sp, #0
 800afb2:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 800afb4:	4b03      	ldr	r3, [pc, #12]	; (800afc4 <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	2004      	movs	r0, #4
 800afba:	4798      	blx	r3
}
 800afbc:	bf00      	nop
 800afbe:	3708      	adds	r7, #8
 800afc0:	46bd      	mov	sp, r7
 800afc2:	bd80      	pop	{r7, pc}
 800afc4:	20000ac4 	.word	0x20000ac4

0800afc8 <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800afc8:	b580      	push	{r7, lr}
 800afca:	b082      	sub	sp, #8
 800afcc:	af00      	add	r7, sp, #0
 800afce:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 800afd0:	4b03      	ldr	r3, [pc, #12]	; (800afe0 <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	2008      	movs	r0, #8
 800afd6:	4798      	blx	r3
}
 800afd8:	bf00      	nop
 800afda:	3708      	adds	r7, #8
 800afdc:	46bd      	mov	sp, r7
 800afde:	bd80      	pop	{r7, pc}
 800afe0:	20000ac4 	.word	0x20000ac4

0800afe4 <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800afe4:	b580      	push	{r7, lr}
 800afe6:	b082      	sub	sp, #8
 800afe8:	af00      	add	r7, sp, #0
 800afea:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 800afec:	4b03      	ldr	r3, [pc, #12]	; (800affc <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	2010      	movs	r0, #16
 800aff2:	4798      	blx	r3
}
 800aff4:	bf00      	nop
 800aff6:	3708      	adds	r7, #8
 800aff8:	46bd      	mov	sp, r7
 800affa:	bd80      	pop	{r7, pc}
 800affc:	20000ac4 	.word	0x20000ac4

0800b000 <HAL_SUBGHZ_LrFhssHopCallback>:

void HAL_SUBGHZ_LrFhssHopCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800b000:	b580      	push	{r7, lr}
 800b002:	b082      	sub	sp, #8
 800b004:	af00      	add	r7, sp, #0
 800b006:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
 800b008:	4b04      	ldr	r3, [pc, #16]	; (800b01c <HAL_SUBGHZ_LrFhssHopCallback+0x1c>)
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800b010:	4798      	blx	r3
}
 800b012:	bf00      	nop
 800b014:	3708      	adds	r7, #8
 800b016:	46bd      	mov	sp, r7
 800b018:	bd80      	pop	{r7, pc}
 800b01a:	bf00      	nop
 800b01c:	20000ac4 	.word	0x20000ac4

0800b020 <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 800b020:	b580      	push	{r7, lr}
 800b022:	b084      	sub	sp, #16
 800b024:	af00      	add	r7, sp, #0
 800b026:	4603      	mov	r3, r0
 800b028:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 800b02a:	f000 fa4b 	bl	800b4c4 <RBI_IsDCDC>
 800b02e:	4603      	mov	r3, r0
 800b030:	2b01      	cmp	r3, #1
 800b032:	d112      	bne.n	800b05a <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 800b034:	f640 1023 	movw	r0, #2339	; 0x923
 800b038:	f7ff fe0e 	bl	800ac58 <SUBGRF_ReadRegister>
 800b03c:	4603      	mov	r3, r0
 800b03e:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 800b040:	7bfb      	ldrb	r3, [r7, #15]
 800b042:	f023 0306 	bic.w	r3, r3, #6
 800b046:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 800b048:	7bfa      	ldrb	r2, [r7, #15]
 800b04a:	79fb      	ldrb	r3, [r7, #7]
 800b04c:	4313      	orrs	r3, r2
 800b04e:	b2db      	uxtb	r3, r3
 800b050:	4619      	mov	r1, r3
 800b052:	f640 1023 	movw	r0, #2339	; 0x923
 800b056:	f7ff fdeb 	bl	800ac30 <SUBGRF_WriteRegister>
  }
}
 800b05a:	bf00      	nop
 800b05c:	3710      	adds	r7, #16
 800b05e:	46bd      	mov	sp, r7
 800b060:	bd80      	pop	{r7, pc}
	...

0800b064 <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
 800b064:	b480      	push	{r7}
 800b066:	b085      	sub	sp, #20
 800b068:	af00      	add	r7, sp, #0
 800b06a:	6078      	str	r0, [r7, #4]
    uint8_t i;

    if( bandwidth == 0 )
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d101      	bne.n	800b076 <SUBGRF_GetFskBandwidthRegValue+0x12>
    {
        return( 0x1F );
 800b072:	231f      	movs	r3, #31
 800b074:	e016      	b.n	800b0a4 <SUBGRF_GetFskBandwidthRegValue+0x40>
    }

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 800b076:	2300      	movs	r3, #0
 800b078:	73fb      	strb	r3, [r7, #15]
 800b07a:	e00f      	b.n	800b09c <SUBGRF_GetFskBandwidthRegValue+0x38>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 800b07c:	7bfb      	ldrb	r3, [r7, #15]
 800b07e:	4a0c      	ldr	r2, [pc, #48]	; (800b0b0 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 800b080:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b084:	687a      	ldr	r2, [r7, #4]
 800b086:	429a      	cmp	r2, r3
 800b088:	d205      	bcs.n	800b096 <SUBGRF_GetFskBandwidthRegValue+0x32>
        {
            return FskBandwidths[i].RegValue;
 800b08a:	7bfb      	ldrb	r3, [r7, #15]
 800b08c:	4a08      	ldr	r2, [pc, #32]	; (800b0b0 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 800b08e:	00db      	lsls	r3, r3, #3
 800b090:	4413      	add	r3, r2
 800b092:	791b      	ldrb	r3, [r3, #4]
 800b094:	e006      	b.n	800b0a4 <SUBGRF_GetFskBandwidthRegValue+0x40>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 800b096:	7bfb      	ldrb	r3, [r7, #15]
 800b098:	3301      	adds	r3, #1
 800b09a:	73fb      	strb	r3, [r7, #15]
 800b09c:	7bfb      	ldrb	r3, [r7, #15]
 800b09e:	2b15      	cmp	r3, #21
 800b0a0:	d9ec      	bls.n	800b07c <SUBGRF_GetFskBandwidthRegValue+0x18>
        }
    }
    // ERROR: Value not found
    while( 1 );
 800b0a2:	e7fe      	b.n	800b0a2 <SUBGRF_GetFskBandwidthRegValue+0x3e>
}
 800b0a4:	4618      	mov	r0, r3
 800b0a6:	3714      	adds	r7, #20
 800b0a8:	46bd      	mov	sp, r7
 800b0aa:	bc80      	pop	{r7}
 800b0ac:	4770      	bx	lr
 800b0ae:	bf00      	nop
 800b0b0:	0800cca0 	.word	0x0800cca0

0800b0b4 <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 800b0b4:	b580      	push	{r7, lr}
 800b0b6:	b08a      	sub	sp, #40	; 0x28
 800b0b8:	af00      	add	r7, sp, #0
 800b0ba:	6078      	str	r0, [r7, #4]
 800b0bc:	6039      	str	r1, [r7, #0]
  uint8_t BwMant[] = {4, 8, 10, 12};
 800b0be:	4b35      	ldr	r3, [pc, #212]	; (800b194 <SUBGRF_GetCFO+0xe0>)
 800b0c0:	60fb      	str	r3, [r7, #12]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSELR ));
 800b0c2:	f640 0007 	movw	r0, #2055	; 0x807
 800b0c6:	f7ff fdc7 	bl	800ac58 <SUBGRF_ReadRegister>
 800b0ca:	4603      	mov	r3, r0
 800b0cc:	77fb      	strb	r3, [r7, #31]
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 800b0ce:	7ffb      	ldrb	r3, [r7, #31]
 800b0d0:	08db      	lsrs	r3, r3, #3
 800b0d2:	b2db      	uxtb	r3, r3
 800b0d4:	f003 0303 	and.w	r3, r3, #3
 800b0d8:	3328      	adds	r3, #40	; 0x28
 800b0da:	443b      	add	r3, r7
 800b0dc:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 800b0e0:	77bb      	strb	r3, [r7, #30]
  uint8_t bandwidth_exp = reg & 0x7;
 800b0e2:	7ffb      	ldrb	r3, [r7, #31]
 800b0e4:	f003 0307 	and.w	r3, r3, #7
 800b0e8:	777b      	strb	r3, [r7, #29]
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp + 1 )));
 800b0ea:	7fba      	ldrb	r2, [r7, #30]
 800b0ec:	7f7b      	ldrb	r3, [r7, #29]
 800b0ee:	3301      	adds	r3, #1
 800b0f0:	fa02 f303 	lsl.w	r3, r2, r3
 800b0f4:	461a      	mov	r2, r3
 800b0f6:	4b28      	ldr	r3, [pc, #160]	; (800b198 <SUBGRF_GetCFO+0xe4>)
 800b0f8:	fbb3 f3f2 	udiv	r3, r3, r2
 800b0fc:	61bb      	str	r3, [r7, #24]
  uint32_t cf_osr = cf_fs / bitRate;
 800b0fe:	69ba      	ldr	r2, [r7, #24]
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	fbb2 f3f3 	udiv	r3, r2, r3
 800b106:	617b      	str	r3, [r7, #20]
  uint8_t interp = 1;
 800b108:	2301      	movs	r3, #1
 800b10a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 800b10e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b112:	697a      	ldr	r2, [r7, #20]
 800b114:	fb02 f303 	mul.w	r3, r2, r3
 800b118:	2b07      	cmp	r3, #7
 800b11a:	d802      	bhi.n	800b122 <SUBGRF_GetCFO+0x6e>
  {
    interp = 2;
 800b11c:	2302      	movs	r3, #2
 800b11e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  if (cf_osr * interp < 4)
 800b122:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b126:	697a      	ldr	r2, [r7, #20]
 800b128:	fb02 f303 	mul.w	r3, r2, r3
 800b12c:	2b03      	cmp	r3, #3
 800b12e:	d802      	bhi.n	800b136 <SUBGRF_GetCFO+0x82>
  {
    interp = 4;
 800b130:	2304      	movs	r3, #4
 800b132:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 800b136:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b13a:	69bb      	ldr	r3, [r7, #24]
 800b13c:	fb02 f303 	mul.w	r3, r2, r3
 800b140:	613b      	str	r3, [r7, #16]
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_GCFORH ) & 0xF ) << 8;
 800b142:	f44f 60d6 	mov.w	r0, #1712	; 0x6b0
 800b146:	f7ff fd87 	bl	800ac58 <SUBGRF_ReadRegister>
 800b14a:	4603      	mov	r3, r0
 800b14c:	021b      	lsls	r3, r3, #8
 800b14e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800b152:	623b      	str	r3, [r7, #32]
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_GCFORL );
 800b154:	f240 60b1 	movw	r0, #1713	; 0x6b1
 800b158:	f7ff fd7e 	bl	800ac58 <SUBGRF_ReadRegister>
 800b15c:	4603      	mov	r3, r0
 800b15e:	461a      	mov	r2, r3
 800b160:	6a3b      	ldr	r3, [r7, #32]
 800b162:	4313      	orrs	r3, r2
 800b164:	623b      	str	r3, [r7, #32]
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 800b166:	6a3b      	ldr	r3, [r7, #32]
 800b168:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d005      	beq.n	800b17c <SUBGRF_GetCFO+0xc8>
  {
    cfo_bin |= 0xFFFFF000;
 800b170:	6a3b      	ldr	r3, [r7, #32]
 800b172:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800b176:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800b17a:	623b      	str	r3, [r7, #32]
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 800b17c:	693b      	ldr	r3, [r7, #16]
 800b17e:	095b      	lsrs	r3, r3, #5
 800b180:	6a3a      	ldr	r2, [r7, #32]
 800b182:	fb02 f303 	mul.w	r3, r2, r3
 800b186:	11da      	asrs	r2, r3, #7
 800b188:	683b      	ldr	r3, [r7, #0]
 800b18a:	601a      	str	r2, [r3, #0]
}
 800b18c:	bf00      	nop
 800b18e:	3728      	adds	r7, #40	; 0x28
 800b190:	46bd      	mov	sp, r7
 800b192:	bd80      	pop	{r7, pc}
 800b194:	0c0a0804 	.word	0x0c0a0804
 800b198:	01e84800 	.word	0x01e84800

0800b19c <RFW_TransmitLongPacket>:
#endif /* RFW_ENABLE == 1 */

/* Exported functions --------------------------------------------------------*/
int32_t RFW_TransmitLongPacket( uint16_t payload_size, uint32_t timeout,
                                void ( *TxLongPacketGetNextChunkCb )( uint8_t **buffer, uint8_t buffer_size ) )
{
 800b19c:	b480      	push	{r7}
 800b19e:	b087      	sub	sp, #28
 800b1a0:	af00      	add	r7, sp, #0
 800b1a2:	4603      	mov	r3, r0
 800b1a4:	60b9      	str	r1, [r7, #8]
 800b1a6:	607a      	str	r2, [r7, #4]
 800b1a8:	81fb      	strh	r3, [r7, #14]
    int32_t status = 0;
 800b1aa:	2300      	movs	r3, #0
 800b1ac:	617b      	str	r3, [r7, #20]
        default:
            break;
        }
    }
#else
    status = -1;
 800b1ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b1b2:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 800b1b4:	697b      	ldr	r3, [r7, #20]
}
 800b1b6:	4618      	mov	r0, r3
 800b1b8:	371c      	adds	r7, #28
 800b1ba:	46bd      	mov	sp, r7
 800b1bc:	bc80      	pop	{r7}
 800b1be:	4770      	bx	lr

0800b1c0 <RFW_ReceiveLongPacket>:

int32_t RFW_ReceiveLongPacket( uint8_t boosted_mode, uint32_t timeout,
                               void ( *RxLongPacketStoreChunkCb )( uint8_t *buffer, uint8_t chunk_size ) )
{
 800b1c0:	b480      	push	{r7}
 800b1c2:	b087      	sub	sp, #28
 800b1c4:	af00      	add	r7, sp, #0
 800b1c6:	4603      	mov	r3, r0
 800b1c8:	60b9      	str	r1, [r7, #8]
 800b1ca:	607a      	str	r2, [r7, #4]
 800b1cc:	73fb      	strb	r3, [r7, #15]
    int32_t status = 0;
 800b1ce:	2300      	movs	r3, #0
 800b1d0:	617b      	str	r3, [r7, #20]
        {
            SUBGRF_SetRx( 0xFFFFFF ); /* Rx Continuous */
        }
    }
#else
    status = -1;
 800b1d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b1d6:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 800b1d8:	697b      	ldr	r3, [r7, #20]
}
 800b1da:	4618      	mov	r0, r3
 800b1dc:	371c      	adds	r7, #28
 800b1de:	46bd      	mov	sp, r7
 800b1e0:	bc80      	pop	{r7}
 800b1e2:	4770      	bx	lr

0800b1e4 <RFW_Init>:

int32_t RFW_Init( ConfigGeneric_t *config, RadioEvents_t *RadioEvents, TimerEvent_t *TimeoutTimerEvent )
{
 800b1e4:	b480      	push	{r7}
 800b1e6:	b085      	sub	sp, #20
 800b1e8:	af00      	add	r7, sp, #0
 800b1ea:	60f8      	str	r0, [r7, #12]
 800b1ec:	60b9      	str	r1, [r7, #8]
 800b1ee:	607a      	str	r2, [r7, #4]
    RFWPacket.Init.Enable = 1;
    /* Initialize Timer for end of fixed packet, started at sync*/
    TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
    return 0;
#else
    return -1;
 800b1f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
#endif /* RFW_ENABLE == 1 */
}
 800b1f4:	4618      	mov	r0, r3
 800b1f6:	3714      	adds	r7, #20
 800b1f8:	46bd      	mov	sp, r7
 800b1fa:	bc80      	pop	{r7}
 800b1fc:	4770      	bx	lr

0800b1fe <RFW_DeInit>:

void RFW_DeInit( void )
{
 800b1fe:	b480      	push	{r7}
 800b200:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Enable = 0; /*Disable the RFWPacket decoding*/
#endif /* RFW_ENABLE == 1 */
}
 800b202:	bf00      	nop
 800b204:	46bd      	mov	sp, r7
 800b206:	bc80      	pop	{r7}
 800b208:	4770      	bx	lr

0800b20a <RFW_Is_Init>:

uint8_t RFW_Is_Init( void )
{
 800b20a:	b480      	push	{r7}
 800b20c:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.Init.Enable;
#else
    return 0;
 800b20e:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 800b210:	4618      	mov	r0, r3
 800b212:	46bd      	mov	sp, r7
 800b214:	bc80      	pop	{r7}
 800b216:	4770      	bx	lr

0800b218 <RFW_Is_LongPacketModeEnabled>:

uint8_t RFW_Is_LongPacketModeEnabled( void )
{
 800b218:	b480      	push	{r7}
 800b21a:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.LongPacketModeEnable;
#else
    return 0;
 800b21c:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 800b21e:	4618      	mov	r0, r3
 800b220:	46bd      	mov	sp, r7
 800b222:	bc80      	pop	{r7}
 800b224:	4770      	bx	lr

0800b226 <RFW_SetAntSwitch>:

void RFW_SetAntSwitch( uint8_t AntSwitch )
{
 800b226:	b480      	push	{r7}
 800b228:	b083      	sub	sp, #12
 800b22a:	af00      	add	r7, sp, #0
 800b22c:	4603      	mov	r3, r0
 800b22e:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.AntSwitchPaSelect = AntSwitch;
#endif /* RFW_ENABLE == 1 */
}
 800b230:	bf00      	nop
 800b232:	370c      	adds	r7, #12
 800b234:	46bd      	mov	sp, r7
 800b236:	bc80      	pop	{r7}
 800b238:	4770      	bx	lr

0800b23a <RFW_TransmitInit>:

int32_t RFW_TransmitInit( uint8_t *inOutBuffer, uint8_t size, uint8_t *outSize )
{
 800b23a:	b480      	push	{r7}
 800b23c:	b087      	sub	sp, #28
 800b23e:	af00      	add	r7, sp, #0
 800b240:	60f8      	str	r0, [r7, #12]
 800b242:	460b      	mov	r3, r1
 800b244:	607a      	str	r2, [r7, #4]
 800b246:	72fb      	strb	r3, [r7, #11]
    int32_t status = -1;
 800b248:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b24c:	617b      	str	r3, [r7, #20]
        RFWPacket.LongPacketModeEnable = 0;

        status = 0;
    }
#endif /* RFW_ENABLE == 1 */
    return status;
 800b24e:	697b      	ldr	r3, [r7, #20]
}
 800b250:	4618      	mov	r0, r3
 800b252:	371c      	adds	r7, #28
 800b254:	46bd      	mov	sp, r7
 800b256:	bc80      	pop	{r7}
 800b258:	4770      	bx	lr

0800b25a <RFW_ReceiveInit>:

int32_t RFW_ReceiveInit( void )
{
 800b25a:	b480      	push	{r7}
 800b25c:	af00      	add	r7, sp, #0
    RFWPacket.RxPayloadOffset = 0;

    RFWPacket.LongPacketModeEnable = 0;
    return 0;
#else
    return -1;
 800b25e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
#endif /* RFW_ENABLE == 1 */
}
 800b262:	4618      	mov	r0, r3
 800b264:	46bd      	mov	sp, r7
 800b266:	bc80      	pop	{r7}
 800b268:	4770      	bx	lr

0800b26a <RFW_DeInit_TxLongPacket>:

void RFW_DeInit_TxLongPacket( void )
{
 800b26a:	b480      	push	{r7}
 800b26c:	af00      	add	r7, sp, #0
    /*long packet WA*/
    uint8_t reg = SUBGRF_ReadRegister( SUBGHZ_GPKTCTL1AR );
    SUBGRF_WriteRegister( SUBGHZ_GPKTCTL1AR, reg & ~0x02 ); /* clear infinite_sequence bit */
    SUBGRF_WriteRegister( SUBGHZ_GRTXPLDLEN, 0xFF ); /* RxTxPldLen: reset to 0xFF */
#endif /* RFW_LONGPACKET_ENABLE == 1 */
}
 800b26e:	bf00      	nop
 800b270:	46bd      	mov	sp, r7
 800b272:	bc80      	pop	{r7}
 800b274:	4770      	bx	lr

0800b276 <RFW_ReceivePayload>:

void RFW_ReceivePayload( void )
{
 800b276:	b480      	push	{r7}
 800b278:	af00      	add	r7, sp, #0
        /*timeout*/
        SUBGRF_SetStandby( STDBY_RC );
        RFWPacket.Init.RadioEvents->RxTimeout( );
    }
#endif /* RFW_ENABLE == 1 */
}
 800b27a:	bf00      	nop
 800b27c:	46bd      	mov	sp, r7
 800b27e:	bc80      	pop	{r7}
 800b280:	4770      	bx	lr

0800b282 <RFW_SetRadioModem>:

void RFW_SetRadioModem( RadioModems_t Modem )
{
 800b282:	b480      	push	{r7}
 800b284:	b083      	sub	sp, #12
 800b286:	af00      	add	r7, sp, #0
 800b288:	4603      	mov	r3, r0
 800b28a:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Modem = Modem;
#endif /* RFW_ENABLE == 1 */
}
 800b28c:	bf00      	nop
 800b28e:	370c      	adds	r7, #12
 800b290:	46bd      	mov	sp, r7
 800b292:	bc80      	pop	{r7}
 800b294:	4770      	bx	lr

0800b296 <MX_SubGHz_Phy_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_SubGHz_Phy_Init(void)
{
 800b296:	b580      	push	{r7, lr}
 800b298:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_1 */

  /* USER CODE END MX_SubGHz_Phy_Init_1 */
  SystemApp_Init();
 800b29a:	f7f7 fedf 	bl	800305c <SystemApp_Init>
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_1_1 */

  /* USER CODE END MX_SubGHz_Phy_Init_1_1 */
  SubghzApp_Init();
 800b29e:	f000 f809 	bl	800b2b4 <SubghzApp_Init>
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_2 */

  /* USER CODE END MX_SubGHz_Phy_Init_2 */
}
 800b2a2:	bf00      	nop
 800b2a4:	bd80      	pop	{r7, pc}

0800b2a6 <MX_SubGHz_Phy_Process>:

void MX_SubGHz_Phy_Process(void)
{
 800b2a6:	b480      	push	{r7}
 800b2a8:	af00      	add	r7, sp, #0

  /* USER CODE END MX_SubGHz_Phy_Process_1 */
  /* USER CODE BEGIN MX_SubGHz_Phy_Process_OS */

  /* USER CODE END MX_SubGHz_Phy_Process_OS */
}
 800b2aa:	bf00      	nop
 800b2ac:	46bd      	mov	sp, r7
 800b2ae:	bc80      	pop	{r7}
 800b2b0:	4770      	bx	lr
	...

0800b2b4 <SubghzApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SubghzApp_Init(void)
{
 800b2b4:	b580      	push	{r7, lr}
 800b2b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SubghzApp_Init_1 */

  /* USER CODE END SubghzApp_Init_1 */

  /* Radio initialization */
  RadioEvents.TxDone = OnTxDone;
 800b2b8:	4b0a      	ldr	r3, [pc, #40]	; (800b2e4 <SubghzApp_Init+0x30>)
 800b2ba:	4a0b      	ldr	r2, [pc, #44]	; (800b2e8 <SubghzApp_Init+0x34>)
 800b2bc:	601a      	str	r2, [r3, #0]
  RadioEvents.RxDone = OnRxDone;
 800b2be:	4b09      	ldr	r3, [pc, #36]	; (800b2e4 <SubghzApp_Init+0x30>)
 800b2c0:	4a0a      	ldr	r2, [pc, #40]	; (800b2ec <SubghzApp_Init+0x38>)
 800b2c2:	609a      	str	r2, [r3, #8]
  RadioEvents.TxTimeout = OnTxTimeout;
 800b2c4:	4b07      	ldr	r3, [pc, #28]	; (800b2e4 <SubghzApp_Init+0x30>)
 800b2c6:	4a0a      	ldr	r2, [pc, #40]	; (800b2f0 <SubghzApp_Init+0x3c>)
 800b2c8:	605a      	str	r2, [r3, #4]
  RadioEvents.RxTimeout = OnRxTimeout;
 800b2ca:	4b06      	ldr	r3, [pc, #24]	; (800b2e4 <SubghzApp_Init+0x30>)
 800b2cc:	4a09      	ldr	r2, [pc, #36]	; (800b2f4 <SubghzApp_Init+0x40>)
 800b2ce:	60da      	str	r2, [r3, #12]
  RadioEvents.RxError = OnRxError;
 800b2d0:	4b04      	ldr	r3, [pc, #16]	; (800b2e4 <SubghzApp_Init+0x30>)
 800b2d2:	4a09      	ldr	r2, [pc, #36]	; (800b2f8 <SubghzApp_Init+0x44>)
 800b2d4:	611a      	str	r2, [r3, #16]

  Radio.Init(&RadioEvents);
 800b2d6:	4b09      	ldr	r3, [pc, #36]	; (800b2fc <SubghzApp_Init+0x48>)
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	4802      	ldr	r0, [pc, #8]	; (800b2e4 <SubghzApp_Init+0x30>)
 800b2dc:	4798      	blx	r3

  /* USER CODE BEGIN SubghzApp_Init_2 */

  /* USER CODE END SubghzApp_Init_2 */
}
 800b2de:	bf00      	nop
 800b2e0:	bd80      	pop	{r7, pc}
 800b2e2:	bf00      	nop
 800b2e4:	20000ac8 	.word	0x20000ac8
 800b2e8:	0800b301 	.word	0x0800b301
 800b2ec:	0800b30d 	.word	0x0800b30d
 800b2f0:	0800b331 	.word	0x0800b331
 800b2f4:	0800b33d 	.word	0x0800b33d
 800b2f8:	0800b349 	.word	0x0800b349
 800b2fc:	0800cc10 	.word	0x0800cc10

0800b300 <OnTxDone>:

/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/
static void OnTxDone(void)
{
 800b300:	b480      	push	{r7}
 800b302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnTxDone */
  /* USER CODE END OnTxDone */
}
 800b304:	bf00      	nop
 800b306:	46bd      	mov	sp, r7
 800b308:	bc80      	pop	{r7}
 800b30a:	4770      	bx	lr

0800b30c <OnRxDone>:

static void OnRxDone(uint8_t *payload, uint16_t size, int16_t rssi, int8_t LoraSnr_FskCfo)
{
 800b30c:	b480      	push	{r7}
 800b30e:	b085      	sub	sp, #20
 800b310:	af00      	add	r7, sp, #0
 800b312:	60f8      	str	r0, [r7, #12]
 800b314:	4608      	mov	r0, r1
 800b316:	4611      	mov	r1, r2
 800b318:	461a      	mov	r2, r3
 800b31a:	4603      	mov	r3, r0
 800b31c:	817b      	strh	r3, [r7, #10]
 800b31e:	460b      	mov	r3, r1
 800b320:	813b      	strh	r3, [r7, #8]
 800b322:	4613      	mov	r3, r2
 800b324:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnRxDone */
  /* USER CODE END OnRxDone */
}
 800b326:	bf00      	nop
 800b328:	3714      	adds	r7, #20
 800b32a:	46bd      	mov	sp, r7
 800b32c:	bc80      	pop	{r7}
 800b32e:	4770      	bx	lr

0800b330 <OnTxTimeout>:

static void OnTxTimeout(void)
{
 800b330:	b480      	push	{r7}
 800b332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnTxTimeout */
  /* USER CODE END OnTxTimeout */
}
 800b334:	bf00      	nop
 800b336:	46bd      	mov	sp, r7
 800b338:	bc80      	pop	{r7}
 800b33a:	4770      	bx	lr

0800b33c <OnRxTimeout>:

static void OnRxTimeout(void)
{
 800b33c:	b480      	push	{r7}
 800b33e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnRxTimeout */
  /* USER CODE END OnRxTimeout */
}
 800b340:	bf00      	nop
 800b342:	46bd      	mov	sp, r7
 800b344:	bc80      	pop	{r7}
 800b346:	4770      	bx	lr

0800b348 <OnRxError>:

static void OnRxError(void)
{
 800b348:	b480      	push	{r7}
 800b34a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnRxError */
  /* USER CODE END OnRxError */
}
 800b34c:	bf00      	nop
 800b34e:	46bd      	mov	sp, r7
 800b350:	bc80      	pop	{r7}
 800b352:	4770      	bx	lr

0800b354 <LL_AHB2_GRP1_EnableClock>:
{
 800b354:	b480      	push	{r7}
 800b356:	b085      	sub	sp, #20
 800b358:	af00      	add	r7, sp, #0
 800b35a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800b35c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b360:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b362:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	4313      	orrs	r3, r2
 800b36a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800b36c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b370:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	4013      	ands	r3, r2
 800b376:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800b378:	68fb      	ldr	r3, [r7, #12]
}
 800b37a:	bf00      	nop
 800b37c:	3714      	adds	r7, #20
 800b37e:	46bd      	mov	sp, r7
 800b380:	bc80      	pop	{r7}
 800b382:	4770      	bx	lr

0800b384 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 800b384:	b580      	push	{r7, lr}
 800b386:	b086      	sub	sp, #24
 800b388:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
#else
  /* 2/ Or implement RBI_Init here */
  int32_t retcode = 0;
 800b38a:	2300      	movs	r3, #0
 800b38c:	617b      	str	r3, [r7, #20]
  /* USER CODE BEGIN RBI_Init_2 */
	GPIO_InitTypeDef gpio_init_structure = { 0 };
 800b38e:	463b      	mov	r3, r7
 800b390:	2200      	movs	r2, #0
 800b392:	601a      	str	r2, [r3, #0]
 800b394:	605a      	str	r2, [r3, #4]
 800b396:	609a      	str	r2, [r3, #8]
 800b398:	60da      	str	r2, [r3, #12]
 800b39a:	611a      	str	r2, [r3, #16]

	/* Enable the Radio Switch Clock */
	RF_SW_CTRL3_GPIO_CLK_ENABLE();
 800b39c:	2004      	movs	r0, #4
 800b39e:	f7ff ffd9 	bl	800b354 <LL_AHB2_GRP1_EnableClock>

	/* Configure the Radio Switch pin */
	gpio_init_structure.Pin = RF_SW_CTRL1_PIN;
 800b3a2:	2310      	movs	r3, #16
 800b3a4:	603b      	str	r3, [r7, #0]
	gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 800b3a6:	2301      	movs	r3, #1
 800b3a8:	607b      	str	r3, [r7, #4]
	gpio_init_structure.Pull = GPIO_NOPULL;
 800b3aa:	2300      	movs	r3, #0
 800b3ac:	60bb      	str	r3, [r7, #8]
	gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b3ae:	2303      	movs	r3, #3
 800b3b0:	60fb      	str	r3, [r7, #12]

	HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 800b3b2:	463b      	mov	r3, r7
 800b3b4:	4619      	mov	r1, r3
 800b3b6:	4812      	ldr	r0, [pc, #72]	; (800b400 <RBI_Init+0x7c>)
 800b3b8:	f7f8 fc4e 	bl	8003c58 <HAL_GPIO_Init>

	gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 800b3bc:	2320      	movs	r3, #32
 800b3be:	603b      	str	r3, [r7, #0]
	HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 800b3c0:	463b      	mov	r3, r7
 800b3c2:	4619      	mov	r1, r3
 800b3c4:	480e      	ldr	r0, [pc, #56]	; (800b400 <RBI_Init+0x7c>)
 800b3c6:	f7f8 fc47 	bl	8003c58 <HAL_GPIO_Init>

	gpio_init_structure.Pin = RF_SW_CTRL3_PIN;
 800b3ca:	2308      	movs	r3, #8
 800b3cc:	603b      	str	r3, [r7, #0]
	HAL_GPIO_Init(RF_SW_CTRL3_GPIO_PORT, &gpio_init_structure);
 800b3ce:	463b      	mov	r3, r7
 800b3d0:	4619      	mov	r1, r3
 800b3d2:	480b      	ldr	r0, [pc, #44]	; (800b400 <RBI_Init+0x7c>)
 800b3d4:	f7f8 fc40 	bl	8003c58 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 800b3d8:	2200      	movs	r2, #0
 800b3da:	2120      	movs	r1, #32
 800b3dc:	4808      	ldr	r0, [pc, #32]	; (800b400 <RBI_Init+0x7c>)
 800b3de:	f7f8 fd9b 	bl	8003f18 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 800b3e2:	2200      	movs	r2, #0
 800b3e4:	2110      	movs	r1, #16
 800b3e6:	4806      	ldr	r0, [pc, #24]	; (800b400 <RBI_Init+0x7c>)
 800b3e8:	f7f8 fd96 	bl	8003f18 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET);
 800b3ec:	2200      	movs	r2, #0
 800b3ee:	2108      	movs	r1, #8
 800b3f0:	4803      	ldr	r0, [pc, #12]	; (800b400 <RBI_Init+0x7c>)
 800b3f2:	f7f8 fd91 	bl	8003f18 <HAL_GPIO_WritePin>
  /* USER CODE END RBI_Init_2 */
  return retcode;
 800b3f6:	697b      	ldr	r3, [r7, #20]
#endif  /* USE_BSP_DRIVER  */
}
 800b3f8:	4618      	mov	r0, r3
 800b3fa:	3718      	adds	r7, #24
 800b3fc:	46bd      	mov	sp, r7
 800b3fe:	bd80      	pop	{r7, pc}
 800b400:	48000800 	.word	0x48000800

0800b404 <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 800b404:	b580      	push	{r7, lr}
 800b406:	b084      	sub	sp, #16
 800b408:	af00      	add	r7, sp, #0
 800b40a:	4603      	mov	r3, r0
 800b40c:	71fb      	strb	r3, [r7, #7]
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
#else
  /* 2/ Or implement RBI_ConfigRFSwitch here */
  int32_t retcode = 0;
 800b40e:	2300      	movs	r3, #0
 800b410:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */


  switch (Config) {
 800b412:	79fb      	ldrb	r3, [r7, #7]
 800b414:	2b03      	cmp	r3, #3
 800b416:	d837      	bhi.n	800b488 <RBI_ConfigRFSwitch+0x84>
 800b418:	a201      	add	r2, pc, #4	; (adr r2, 800b420 <RBI_ConfigRFSwitch+0x1c>)
 800b41a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b41e:	bf00      	nop
 800b420:	0800b431 	.word	0x0800b431
 800b424:	0800b447 	.word	0x0800b447
 800b428:	0800b45d 	.word	0x0800b45d
 800b42c:	0800b473 	.word	0x0800b473
  	case RADIO_SWITCH_OFF: {
  		/* Turn off switch */
  		//		HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN,
  		//				GPIO_PIN_RESET);
  		HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET);
 800b430:	2201      	movs	r2, #1
 800b432:	2110      	movs	r1, #16
 800b434:	4817      	ldr	r0, [pc, #92]	; (800b494 <RBI_ConfigRFSwitch+0x90>)
 800b436:	f7f8 fd6f 	bl	8003f18 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET);
 800b43a:	2201      	movs	r2, #1
 800b43c:	2120      	movs	r1, #32
 800b43e:	4815      	ldr	r0, [pc, #84]	; (800b494 <RBI_ConfigRFSwitch+0x90>)
 800b440:	f7f8 fd6a 	bl	8003f18 <HAL_GPIO_WritePin>
  		break;
 800b444:	e021      	b.n	800b48a <RBI_ConfigRFSwitch+0x86>
  	}
  	case RADIO_SWITCH_RX: {
  		/*Turns On in Rx Mode the RF Switch */
  		//		HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
  		HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN,
 800b446:	2200      	movs	r2, #0
 800b448:	2110      	movs	r1, #16
 800b44a:	4812      	ldr	r0, [pc, #72]	; (800b494 <RBI_ConfigRFSwitch+0x90>)
 800b44c:	f7f8 fd64 	bl	8003f18 <HAL_GPIO_WritePin>
  				GPIO_PIN_RESET);
  		HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN,
 800b450:	2200      	movs	r2, #0
 800b452:	2120      	movs	r1, #32
 800b454:	480f      	ldr	r0, [pc, #60]	; (800b494 <RBI_ConfigRFSwitch+0x90>)
 800b456:	f7f8 fd5f 	bl	8003f18 <HAL_GPIO_WritePin>
  				GPIO_PIN_RESET);
  		break;
 800b45a:	e016      	b.n	800b48a <RBI_ConfigRFSwitch+0x86>
  	}
  	case RADIO_SWITCH_RFO_LP: {
  		/*Turns On in Tx Low Power the RF Switch */
  		//		HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
  		HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN,
 800b45c:	2200      	movs	r2, #0
 800b45e:	2110      	movs	r1, #16
 800b460:	480c      	ldr	r0, [pc, #48]	; (800b494 <RBI_ConfigRFSwitch+0x90>)
 800b462:	f7f8 fd59 	bl	8003f18 <HAL_GPIO_WritePin>
  				GPIO_PIN_RESET);
  		HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET);
 800b466:	2201      	movs	r2, #1
 800b468:	2120      	movs	r1, #32
 800b46a:	480a      	ldr	r0, [pc, #40]	; (800b494 <RBI_ConfigRFSwitch+0x90>)
 800b46c:	f7f8 fd54 	bl	8003f18 <HAL_GPIO_WritePin>
  		break;
 800b470:	e00b      	b.n	800b48a <RBI_ConfigRFSwitch+0x86>
  	}
  	case RADIO_SWITCH_RFO_HP: {
  		/*Turns On in Tx High Power the RF Switch */
  		//		HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
  		HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN,
 800b472:	2200      	movs	r2, #0
 800b474:	2110      	movs	r1, #16
 800b476:	4807      	ldr	r0, [pc, #28]	; (800b494 <RBI_ConfigRFSwitch+0x90>)
 800b478:	f7f8 fd4e 	bl	8003f18 <HAL_GPIO_WritePin>
  				GPIO_PIN_RESET);
  		HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET);
 800b47c:	2201      	movs	r2, #1
 800b47e:	2120      	movs	r1, #32
 800b480:	4804      	ldr	r0, [pc, #16]	; (800b494 <RBI_ConfigRFSwitch+0x90>)
 800b482:	f7f8 fd49 	bl	8003f18 <HAL_GPIO_WritePin>
  		break;
 800b486:	e000      	b.n	800b48a <RBI_ConfigRFSwitch+0x86>
  	}
  	default:
  		break;
 800b488:	bf00      	nop
//	}
//	default:
//		break;
//	}
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
 800b48a:	68fb      	ldr	r3, [r7, #12]
#endif  /* USE_BSP_DRIVER */
}
 800b48c:	4618      	mov	r0, r3
 800b48e:	3710      	adds	r7, #16
 800b490:	46bd      	mov	sp, r7
 800b492:	bd80      	pop	{r7, pc}
 800b494:	48000800 	.word	0x48000800

0800b498 <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 800b498:	b480      	push	{r7}
 800b49a:	b083      	sub	sp, #12
 800b49c:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
#else
  /* 2/ Or implement RBI_GetTxConfig here */
  int32_t retcode = RBI_CONF_RFO;
 800b49e:	2300      	movs	r3, #0
 800b4a0:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
	return RADIO_CONF_RFO_LP_HP;
 800b4a2:	2300      	movs	r3, #0
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800b4a4:	4618      	mov	r0, r3
 800b4a6:	370c      	adds	r7, #12
 800b4a8:	46bd      	mov	sp, r7
 800b4aa:	bc80      	pop	{r7}
 800b4ac:	4770      	bx	lr

0800b4ae <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 800b4ae:	b480      	push	{r7}
 800b4b0:	b083      	sub	sp, #12
 800b4b2:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
#else
  /* 2/ Or implement RBI_IsTCXO here */
  int32_t retcode = IS_TCXO_SUPPORTED;
 800b4b4:	2301      	movs	r3, #1
 800b4b6:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_IsTCXO_2 */
	return IS_TCXO_SUPPORTED;
 800b4b8:	2301      	movs	r3, #1
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800b4ba:	4618      	mov	r0, r3
 800b4bc:	370c      	adds	r7, #12
 800b4be:	46bd      	mov	sp, r7
 800b4c0:	bc80      	pop	{r7}
 800b4c2:	4770      	bx	lr

0800b4c4 <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 800b4c4:	b480      	push	{r7}
 800b4c6:	b083      	sub	sp, #12
 800b4c8:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
#else
  /* 2/ Or implement RBI_IsDCDC here */
  int32_t retcode = IS_DCDC_SUPPORTED;
 800b4ca:	2301      	movs	r3, #1
 800b4cc:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_IsDCDC_2 */
	return IS_DCDC_SUPPORTED;
 800b4ce:	2301      	movs	r3, #1
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800b4d0:	4618      	mov	r0, r3
 800b4d2:	370c      	adds	r7, #12
 800b4d4:	46bd      	mov	sp, r7
 800b4d6:	bc80      	pop	{r7}
 800b4d8:	4770      	bx	lr

0800b4da <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 800b4da:	b480      	push	{r7}
 800b4dc:	b085      	sub	sp, #20
 800b4de:	af00      	add	r7, sp, #0
 800b4e0:	4603      	mov	r3, r0
 800b4e2:	71fb      	strb	r3, [r7, #7]
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
#else
  /* 2/ Or implement RBI_RBI_GetRFOMaxPowerConfig here */
  int32_t ret = 0;
 800b4e4:	2300      	movs	r3, #0
 800b4e6:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN RBI_GetRFOMaxPowerConfig_2 */
// #warning user to provide its board code or to call his board driver functions
	if (Config == RBI_RFO_LP_MAXPOWER) {
 800b4e8:	79fb      	ldrb	r3, [r7, #7]
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d102      	bne.n	800b4f4 <RBI_GetRFOMaxPowerConfig+0x1a>
		ret = 15; /*dBm*/
 800b4ee:	230f      	movs	r3, #15
 800b4f0:	60fb      	str	r3, [r7, #12]
 800b4f2:	e001      	b.n	800b4f8 <RBI_GetRFOMaxPowerConfig+0x1e>
	} else {
		ret = 22; /*dBm*/
 800b4f4:	2316      	movs	r3, #22
 800b4f6:	60fb      	str	r3, [r7, #12]
	}
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
 800b4f8:	68fb      	ldr	r3, [r7, #12]
#endif  /* USE_BSP_DRIVER  */
}
 800b4fa:	4618      	mov	r0, r3
 800b4fc:	3714      	adds	r7, #20
 800b4fe:	46bd      	mov	sp, r7
 800b500:	bc80      	pop	{r7}
 800b502:	4770      	bx	lr

0800b504 <UTIL_MEM_cpy_8>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
 800b504:	b480      	push	{r7}
 800b506:	b087      	sub	sp, #28
 800b508:	af00      	add	r7, sp, #0
 800b50a:	60f8      	str	r0, [r7, #12]
 800b50c:	60b9      	str	r1, [r7, #8]
 800b50e:	4613      	mov	r3, r2
 800b510:	80fb      	strh	r3, [r7, #6]
  uint8_t* dst8= (uint8_t *) dst;
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	617b      	str	r3, [r7, #20]
  uint8_t* src8= (uint8_t *) src;
 800b516:	68bb      	ldr	r3, [r7, #8]
 800b518:	613b      	str	r3, [r7, #16]

  while( size-- )
 800b51a:	e007      	b.n	800b52c <UTIL_MEM_cpy_8+0x28>
    {
        *dst8++ = *src8++;
 800b51c:	693a      	ldr	r2, [r7, #16]
 800b51e:	1c53      	adds	r3, r2, #1
 800b520:	613b      	str	r3, [r7, #16]
 800b522:	697b      	ldr	r3, [r7, #20]
 800b524:	1c59      	adds	r1, r3, #1
 800b526:	6179      	str	r1, [r7, #20]
 800b528:	7812      	ldrb	r2, [r2, #0]
 800b52a:	701a      	strb	r2, [r3, #0]
  while( size-- )
 800b52c:	88fb      	ldrh	r3, [r7, #6]
 800b52e:	1e5a      	subs	r2, r3, #1
 800b530:	80fa      	strh	r2, [r7, #6]
 800b532:	2b00      	cmp	r3, #0
 800b534:	d1f2      	bne.n	800b51c <UTIL_MEM_cpy_8+0x18>
    }
}
 800b536:	bf00      	nop
 800b538:	bf00      	nop
 800b53a:	371c      	adds	r7, #28
 800b53c:	46bd      	mov	sp, r7
 800b53e:	bc80      	pop	{r7}
 800b540:	4770      	bx	lr

0800b542 <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 800b542:	b480      	push	{r7}
 800b544:	b085      	sub	sp, #20
 800b546:	af00      	add	r7, sp, #0
 800b548:	6078      	str	r0, [r7, #4]
 800b54a:	460b      	mov	r3, r1
 800b54c:	70fb      	strb	r3, [r7, #3]
 800b54e:	4613      	mov	r3, r2
 800b550:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	60fb      	str	r3, [r7, #12]
  while( size-- )
 800b556:	e004      	b.n	800b562 <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	1c5a      	adds	r2, r3, #1
 800b55c:	60fa      	str	r2, [r7, #12]
 800b55e:	78fa      	ldrb	r2, [r7, #3]
 800b560:	701a      	strb	r2, [r3, #0]
  while( size-- )
 800b562:	883b      	ldrh	r3, [r7, #0]
 800b564:	1e5a      	subs	r2, r3, #1
 800b566:	803a      	strh	r2, [r7, #0]
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d1f5      	bne.n	800b558 <UTIL_MEM_set_8+0x16>
  }
}
 800b56c:	bf00      	nop
 800b56e:	bf00      	nop
 800b570:	3714      	adds	r7, #20
 800b572:	46bd      	mov	sp, r7
 800b574:	bc80      	pop	{r7}
 800b576:	4770      	bx	lr

0800b578 <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 800b578:	b580      	push	{r7, lr}
 800b57a:	b084      	sub	sp, #16
 800b57c:	af00      	add	r7, sp, #0
 800b57e:	60f8      	str	r0, [r7, #12]
 800b580:	60b9      	str	r1, [r7, #8]
 800b582:	603b      	str	r3, [r7, #0]
 800b584:	4613      	mov	r3, r2
 800b586:	71fb      	strb	r3, [r7, #7]
  if((TimerObject != NULL) && (Callback != NULL))
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d023      	beq.n	800b5d6 <UTIL_TIMER_Create+0x5e>
 800b58e:	683b      	ldr	r3, [r7, #0]
 800b590:	2b00      	cmp	r3, #0
 800b592:	d020      	beq.n	800b5d6 <UTIL_TIMER_Create+0x5e>
  {
    TimerObject->Timestamp = 0U;
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	2200      	movs	r2, #0
 800b598:	601a      	str	r2, [r3, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 800b59a:	4b11      	ldr	r3, [pc, #68]	; (800b5e0 <UTIL_TIMER_Create+0x68>)
 800b59c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b59e:	68b8      	ldr	r0, [r7, #8]
 800b5a0:	4798      	blx	r3
 800b5a2:	4602      	mov	r2, r0
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	605a      	str	r2, [r3, #4]
    TimerObject->IsPending = 0U;
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	2200      	movs	r2, #0
 800b5ac:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 0U;
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	2200      	movs	r2, #0
 800b5b2:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	2200      	movs	r2, #0
 800b5b8:	729a      	strb	r2, [r3, #10]
    TimerObject->Callback = Callback;
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	683a      	ldr	r2, [r7, #0]
 800b5be:	60da      	str	r2, [r3, #12]
    TimerObject->argument = Argument;
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	69ba      	ldr	r2, [r7, #24]
 800b5c4:	611a      	str	r2, [r3, #16]
    TimerObject->Mode = Mode;
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	79fa      	ldrb	r2, [r7, #7]
 800b5ca:	72da      	strb	r2, [r3, #11]
    TimerObject->Next = NULL;
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	2200      	movs	r2, #0
 800b5d0:	615a      	str	r2, [r3, #20]
    return UTIL_TIMER_OK;
 800b5d2:	2300      	movs	r3, #0
 800b5d4:	e000      	b.n	800b5d8 <UTIL_TIMER_Create+0x60>
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 800b5d6:	2301      	movs	r3, #1
  }
}
 800b5d8:	4618      	mov	r0, r3
 800b5da:	3710      	adds	r7, #16
 800b5dc:	46bd      	mov	sp, r7
 800b5de:	bd80      	pop	{r7, pc}
 800b5e0:	0800cbbc 	.word	0x0800cbbc

0800b5e4 <UTIL_TIMER_Start>:

UTIL_TIMER_Status_t UTIL_TIMER_Start( UTIL_TIMER_Object_t *TimerObject)
{
 800b5e4:	b580      	push	{r7, lr}
 800b5e6:	b08a      	sub	sp, #40	; 0x28
 800b5e8:	af00      	add	r7, sp, #0
 800b5ea:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 800b5ec:	2300      	movs	r3, #0
 800b5ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t elapsedTime;
  uint32_t minValue;
  uint32_t ticks;
    
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d056      	beq.n	800b6a6 <UTIL_TIMER_Start+0xc2>
 800b5f8:	6878      	ldr	r0, [r7, #4]
 800b5fa:	f000 f929 	bl	800b850 <TimerExists>
 800b5fe:	4603      	mov	r3, r0
 800b600:	f083 0301 	eor.w	r3, r3, #1
 800b604:	b2db      	uxtb	r3, r3
 800b606:	2b00      	cmp	r3, #0
 800b608:	d04d      	beq.n	800b6a6 <UTIL_TIMER_Start+0xc2>
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	7a5b      	ldrb	r3, [r3, #9]
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d149      	bne.n	800b6a6 <UTIL_TIMER_Start+0xc2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b612:	f3ef 8310 	mrs	r3, PRIMASK
 800b616:	613b      	str	r3, [r7, #16]
  return(result);
 800b618:	693b      	ldr	r3, [r7, #16]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 800b61a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800b61c:	b672      	cpsid	i
}
 800b61e:	bf00      	nop
    ticks = TimerObject->ReloadValue;
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	685b      	ldr	r3, [r3, #4]
 800b624:	623b      	str	r3, [r7, #32]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 800b626:	4b24      	ldr	r3, [pc, #144]	; (800b6b8 <UTIL_TIMER_Start+0xd4>)
 800b628:	6a1b      	ldr	r3, [r3, #32]
 800b62a:	4798      	blx	r3
 800b62c:	61b8      	str	r0, [r7, #24]
    
    if( ticks < minValue )
 800b62e:	6a3a      	ldr	r2, [r7, #32]
 800b630:	69bb      	ldr	r3, [r7, #24]
 800b632:	429a      	cmp	r2, r3
 800b634:	d201      	bcs.n	800b63a <UTIL_TIMER_Start+0x56>
    {
      ticks = minValue;
 800b636:	69bb      	ldr	r3, [r7, #24]
 800b638:	623b      	str	r3, [r7, #32]
    }
    
    TimerObject->Timestamp = ticks;
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	6a3a      	ldr	r2, [r7, #32]
 800b63e:	601a      	str	r2, [r3, #0]
    TimerObject->IsPending = 0U;
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	2200      	movs	r2, #0
 800b644:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 1U;
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	2201      	movs	r2, #1
 800b64a:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	2200      	movs	r2, #0
 800b650:	729a      	strb	r2, [r3, #10]
    if( TimerListHead == NULL )
 800b652:	4b1a      	ldr	r3, [pc, #104]	; (800b6bc <UTIL_TIMER_Start+0xd8>)
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	2b00      	cmp	r3, #0
 800b658:	d106      	bne.n	800b668 <UTIL_TIMER_Start+0x84>
    {
      UTIL_TimerDriver.SetTimerContext();
 800b65a:	4b17      	ldr	r3, [pc, #92]	; (800b6b8 <UTIL_TIMER_Start+0xd4>)
 800b65c:	691b      	ldr	r3, [r3, #16]
 800b65e:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 800b660:	6878      	ldr	r0, [r7, #4]
 800b662:	f000 f96b 	bl	800b93c <TimerInsertNewHeadTimer>
 800b666:	e017      	b.n	800b698 <UTIL_TIMER_Start+0xb4>
    }
    else 
    {
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 800b668:	4b13      	ldr	r3, [pc, #76]	; (800b6b8 <UTIL_TIMER_Start+0xd4>)
 800b66a:	699b      	ldr	r3, [r3, #24]
 800b66c:	4798      	blx	r3
 800b66e:	6178      	str	r0, [r7, #20]
      TimerObject->Timestamp += elapsedTime;
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	681a      	ldr	r2, [r3, #0]
 800b674:	697b      	ldr	r3, [r7, #20]
 800b676:	441a      	add	r2, r3
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	601a      	str	r2, [r3, #0]
      
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	681a      	ldr	r2, [r3, #0]
 800b680:	4b0e      	ldr	r3, [pc, #56]	; (800b6bc <UTIL_TIMER_Start+0xd8>)
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	429a      	cmp	r2, r3
 800b688:	d203      	bcs.n	800b692 <UTIL_TIMER_Start+0xae>
      {
        TimerInsertNewHeadTimer( TimerObject);
 800b68a:	6878      	ldr	r0, [r7, #4]
 800b68c:	f000 f956 	bl	800b93c <TimerInsertNewHeadTimer>
 800b690:	e002      	b.n	800b698 <UTIL_TIMER_Start+0xb4>
      }
      else
      {
        TimerInsertTimer( TimerObject);
 800b692:	6878      	ldr	r0, [r7, #4]
 800b694:	f000 f922 	bl	800b8dc <TimerInsertTimer>
 800b698:	69fb      	ldr	r3, [r7, #28]
 800b69a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	f383 8810 	msr	PRIMASK, r3
}
 800b6a2:	bf00      	nop
  {
 800b6a4:	e002      	b.n	800b6ac <UTIL_TIMER_Start+0xc8>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret =  UTIL_TIMER_INVALID_PARAM;
 800b6a6:	2301      	movs	r3, #1
 800b6a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return ret;
 800b6ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800b6b0:	4618      	mov	r0, r3
 800b6b2:	3728      	adds	r7, #40	; 0x28
 800b6b4:	46bd      	mov	sp, r7
 800b6b6:	bd80      	pop	{r7, pc}
 800b6b8:	0800cbbc 	.word	0x0800cbbc
 800b6bc:	20000ae4 	.word	0x20000ae4

0800b6c0 <UTIL_TIMER_Stop>:
  }
  return ret;
}

UTIL_TIMER_Status_t UTIL_TIMER_Stop( UTIL_TIMER_Object_t *TimerObject )
{
 800b6c0:	b580      	push	{r7, lr}
 800b6c2:	b088      	sub	sp, #32
 800b6c4:	af00      	add	r7, sp, #0
 800b6c6:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 800b6c8:	2300      	movs	r3, #0
 800b6ca:	77fb      	strb	r3, [r7, #31]

  if (NULL != TimerObject)
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d05b      	beq.n	800b78a <UTIL_TIMER_Stop+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b6d2:	f3ef 8310 	mrs	r3, PRIMASK
 800b6d6:	60fb      	str	r3, [r7, #12]
  return(result);
 800b6d8:	68fb      	ldr	r3, [r7, #12]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 800b6da:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800b6dc:	b672      	cpsid	i
}
 800b6de:	bf00      	nop
    UTIL_TIMER_Object_t* prev = TimerListHead;
 800b6e0:	4b2d      	ldr	r3, [pc, #180]	; (800b798 <UTIL_TIMER_Stop+0xd8>)
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	61bb      	str	r3, [r7, #24]
    UTIL_TIMER_Object_t* cur = TimerListHead;
 800b6e6:	4b2c      	ldr	r3, [pc, #176]	; (800b798 <UTIL_TIMER_Stop+0xd8>)
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	617b      	str	r3, [r7, #20]
    TimerObject->IsReloadStopped = 1U;
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	2201      	movs	r2, #1
 800b6f0:	729a      	strb	r2, [r3, #10]
    
    /* List is empty or the Obj to stop does not exist  */
    if(NULL != TimerListHead)
 800b6f2:	4b29      	ldr	r3, [pc, #164]	; (800b798 <UTIL_TIMER_Stop+0xd8>)
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d041      	beq.n	800b77e <UTIL_TIMER_Stop+0xbe>
    {
      TimerObject->IsRunning = 0U;
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	2200      	movs	r2, #0
 800b6fe:	725a      	strb	r2, [r3, #9]
      
      if( TimerListHead == TimerObject ) /* Stop the Head */
 800b700:	4b25      	ldr	r3, [pc, #148]	; (800b798 <UTIL_TIMER_Stop+0xd8>)
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	687a      	ldr	r2, [r7, #4]
 800b706:	429a      	cmp	r2, r3
 800b708:	d134      	bne.n	800b774 <UTIL_TIMER_Stop+0xb4>
      {
          TimerListHead->IsPending = 0;
 800b70a:	4b23      	ldr	r3, [pc, #140]	; (800b798 <UTIL_TIMER_Stop+0xd8>)
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	2200      	movs	r2, #0
 800b710:	721a      	strb	r2, [r3, #8]
          if( TimerListHead->Next != NULL )
 800b712:	4b21      	ldr	r3, [pc, #132]	; (800b798 <UTIL_TIMER_Stop+0xd8>)
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	695b      	ldr	r3, [r3, #20]
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d00a      	beq.n	800b732 <UTIL_TIMER_Stop+0x72>
          {
            TimerListHead = TimerListHead->Next;
 800b71c:	4b1e      	ldr	r3, [pc, #120]	; (800b798 <UTIL_TIMER_Stop+0xd8>)
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	695b      	ldr	r3, [r3, #20]
 800b722:	4a1d      	ldr	r2, [pc, #116]	; (800b798 <UTIL_TIMER_Stop+0xd8>)
 800b724:	6013      	str	r3, [r2, #0]
            TimerSetTimeout( TimerListHead );
 800b726:	4b1c      	ldr	r3, [pc, #112]	; (800b798 <UTIL_TIMER_Stop+0xd8>)
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	4618      	mov	r0, r3
 800b72c:	f000 f8ac 	bl	800b888 <TimerSetTimeout>
 800b730:	e023      	b.n	800b77a <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            UTIL_TimerDriver.StopTimerEvt( );
 800b732:	4b1a      	ldr	r3, [pc, #104]	; (800b79c <UTIL_TIMER_Stop+0xdc>)
 800b734:	68db      	ldr	r3, [r3, #12]
 800b736:	4798      	blx	r3
            TimerListHead = NULL;
 800b738:	4b17      	ldr	r3, [pc, #92]	; (800b798 <UTIL_TIMER_Stop+0xd8>)
 800b73a:	2200      	movs	r2, #0
 800b73c:	601a      	str	r2, [r3, #0]
 800b73e:	e01c      	b.n	800b77a <UTIL_TIMER_Stop+0xba>
      }
      else /* Stop an object within the list */
      {      
        while( cur != NULL )
        {
          if( cur == TimerObject )
 800b740:	697a      	ldr	r2, [r7, #20]
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	429a      	cmp	r2, r3
 800b746:	d110      	bne.n	800b76a <UTIL_TIMER_Stop+0xaa>
          {
            if( cur->Next != NULL )
 800b748:	697b      	ldr	r3, [r7, #20]
 800b74a:	695b      	ldr	r3, [r3, #20]
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d006      	beq.n	800b75e <UTIL_TIMER_Stop+0x9e>
            {
              cur = cur->Next;
 800b750:	697b      	ldr	r3, [r7, #20]
 800b752:	695b      	ldr	r3, [r3, #20]
 800b754:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 800b756:	69bb      	ldr	r3, [r7, #24]
 800b758:	697a      	ldr	r2, [r7, #20]
 800b75a:	615a      	str	r2, [r3, #20]
            else
            {
              cur = NULL;
              prev->Next = cur;
            }
            break;
 800b75c:	e00d      	b.n	800b77a <UTIL_TIMER_Stop+0xba>
              cur = NULL;
 800b75e:	2300      	movs	r3, #0
 800b760:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 800b762:	69bb      	ldr	r3, [r7, #24]
 800b764:	697a      	ldr	r2, [r7, #20]
 800b766:	615a      	str	r2, [r3, #20]
            break;
 800b768:	e007      	b.n	800b77a <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            prev = cur;
 800b76a:	697b      	ldr	r3, [r7, #20]
 800b76c:	61bb      	str	r3, [r7, #24]
            cur = cur->Next;
 800b76e:	697b      	ldr	r3, [r7, #20]
 800b770:	695b      	ldr	r3, [r3, #20]
 800b772:	617b      	str	r3, [r7, #20]
        while( cur != NULL )
 800b774:	697b      	ldr	r3, [r7, #20]
 800b776:	2b00      	cmp	r3, #0
 800b778:	d1e2      	bne.n	800b740 <UTIL_TIMER_Stop+0x80>
          }
        }   
      }
      ret = UTIL_TIMER_OK;
 800b77a:	2300      	movs	r3, #0
 800b77c:	77fb      	strb	r3, [r7, #31]
 800b77e:	693b      	ldr	r3, [r7, #16]
 800b780:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b782:	68bb      	ldr	r3, [r7, #8]
 800b784:	f383 8810 	msr	PRIMASK, r3
}
 800b788:	e001      	b.n	800b78e <UTIL_TIMER_Stop+0xce>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret = UTIL_TIMER_INVALID_PARAM;
 800b78a:	2301      	movs	r3, #1
 800b78c:	77fb      	strb	r3, [r7, #31]
  }
  return ret;
 800b78e:	7ffb      	ldrb	r3, [r7, #31]
}
 800b790:	4618      	mov	r0, r3
 800b792:	3720      	adds	r7, #32
 800b794:	46bd      	mov	sp, r7
 800b796:	bd80      	pop	{r7, pc}
 800b798:	20000ae4 	.word	0x20000ae4
 800b79c:	0800cbbc 	.word	0x0800cbbc

0800b7a0 <UTIL_TIMER_SetPeriod>:

UTIL_TIMER_Status_t UTIL_TIMER_SetPeriod(UTIL_TIMER_Object_t *TimerObject, uint32_t NewPeriodValue)
{
 800b7a0:	b580      	push	{r7, lr}
 800b7a2:	b084      	sub	sp, #16
 800b7a4:	af00      	add	r7, sp, #0
 800b7a6:	6078      	str	r0, [r7, #4]
 800b7a8:	6039      	str	r1, [r7, #0]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 800b7aa:	2300      	movs	r3, #0
 800b7ac:	73fb      	strb	r3, [r7, #15]
  
  if(NULL == TimerObject)
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d102      	bne.n	800b7ba <UTIL_TIMER_SetPeriod+0x1a>
  {
	  ret = UTIL_TIMER_INVALID_PARAM;
 800b7b4:	2301      	movs	r3, #1
 800b7b6:	73fb      	strb	r3, [r7, #15]
 800b7b8:	e014      	b.n	800b7e4 <UTIL_TIMER_SetPeriod+0x44>
  }
  else
  {
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 800b7ba:	4b0d      	ldr	r3, [pc, #52]	; (800b7f0 <UTIL_TIMER_SetPeriod+0x50>)
 800b7bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7be:	6838      	ldr	r0, [r7, #0]
 800b7c0:	4798      	blx	r3
 800b7c2:	4602      	mov	r2, r0
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	605a      	str	r2, [r3, #4]
    if(TimerExists(TimerObject))
 800b7c8:	6878      	ldr	r0, [r7, #4]
 800b7ca:	f000 f841 	bl	800b850 <TimerExists>
 800b7ce:	4603      	mov	r3, r0
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d007      	beq.n	800b7e4 <UTIL_TIMER_SetPeriod+0x44>
    {
      (void)UTIL_TIMER_Stop(TimerObject);
 800b7d4:	6878      	ldr	r0, [r7, #4]
 800b7d6:	f7ff ff73 	bl	800b6c0 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 800b7da:	6878      	ldr	r0, [r7, #4]
 800b7dc:	f7ff ff02 	bl	800b5e4 <UTIL_TIMER_Start>
 800b7e0:	4603      	mov	r3, r0
 800b7e2:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 800b7e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7e6:	4618      	mov	r0, r3
 800b7e8:	3710      	adds	r7, #16
 800b7ea:	46bd      	mov	sp, r7
 800b7ec:	bd80      	pop	{r7, pc}
 800b7ee:	bf00      	nop
 800b7f0:	0800cbbc 	.word	0x0800cbbc

0800b7f4 <UTIL_TIMER_GetCurrentTime>:
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 800b7f4:	b580      	push	{r7, lr}
 800b7f6:	b082      	sub	sp, #8
 800b7f8:	af00      	add	r7, sp, #0
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 800b7fa:	4b06      	ldr	r3, [pc, #24]	; (800b814 <UTIL_TIMER_GetCurrentTime+0x20>)
 800b7fc:	69db      	ldr	r3, [r3, #28]
 800b7fe:	4798      	blx	r3
 800b800:	6078      	str	r0, [r7, #4]
  return  UTIL_TimerDriver.Tick2ms(now);
 800b802:	4b04      	ldr	r3, [pc, #16]	; (800b814 <UTIL_TIMER_GetCurrentTime+0x20>)
 800b804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b806:	6878      	ldr	r0, [r7, #4]
 800b808:	4798      	blx	r3
 800b80a:	4603      	mov	r3, r0
}
 800b80c:	4618      	mov	r0, r3
 800b80e:	3708      	adds	r7, #8
 800b810:	46bd      	mov	sp, r7
 800b812:	bd80      	pop	{r7, pc}
 800b814:	0800cbbc 	.word	0x0800cbbc

0800b818 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 800b818:	b580      	push	{r7, lr}
 800b81a:	b084      	sub	sp, #16
 800b81c:	af00      	add	r7, sp, #0
 800b81e:	6078      	str	r0, [r7, #4]
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 800b820:	4b0a      	ldr	r3, [pc, #40]	; (800b84c <UTIL_TIMER_GetElapsedTime+0x34>)
 800b822:	69db      	ldr	r3, [r3, #28]
 800b824:	4798      	blx	r3
 800b826:	60f8      	str	r0, [r7, #12]
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 800b828:	4b08      	ldr	r3, [pc, #32]	; (800b84c <UTIL_TIMER_GetElapsedTime+0x34>)
 800b82a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b82c:	6878      	ldr	r0, [r7, #4]
 800b82e:	4798      	blx	r3
 800b830:	60b8      	str	r0, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 800b832:	4b06      	ldr	r3, [pc, #24]	; (800b84c <UTIL_TIMER_GetElapsedTime+0x34>)
 800b834:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b836:	68f9      	ldr	r1, [r7, #12]
 800b838:	68ba      	ldr	r2, [r7, #8]
 800b83a:	1a8a      	subs	r2, r1, r2
 800b83c:	4610      	mov	r0, r2
 800b83e:	4798      	blx	r3
 800b840:	4603      	mov	r3, r0
}
 800b842:	4618      	mov	r0, r3
 800b844:	3710      	adds	r7, #16
 800b846:	46bd      	mov	sp, r7
 800b848:	bd80      	pop	{r7, pc}
 800b84a:	bf00      	nop
 800b84c:	0800cbbc 	.word	0x0800cbbc

0800b850 <TimerExists>:
 *
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
 800b850:	b480      	push	{r7}
 800b852:	b085      	sub	sp, #20
 800b854:	af00      	add	r7, sp, #0
 800b856:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800b858:	4b0a      	ldr	r3, [pc, #40]	; (800b884 <TimerExists+0x34>)
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 800b85e:	e008      	b.n	800b872 <TimerExists+0x22>
  {
    if( cur == TimerObject )
 800b860:	68fa      	ldr	r2, [r7, #12]
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	429a      	cmp	r2, r3
 800b866:	d101      	bne.n	800b86c <TimerExists+0x1c>
    {
      return true;
 800b868:	2301      	movs	r3, #1
 800b86a:	e006      	b.n	800b87a <TimerExists+0x2a>
    }
    cur = cur->Next;
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	695b      	ldr	r3, [r3, #20]
 800b870:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	2b00      	cmp	r3, #0
 800b876:	d1f3      	bne.n	800b860 <TimerExists+0x10>
  }
  return false;
 800b878:	2300      	movs	r3, #0
}
 800b87a:	4618      	mov	r0, r3
 800b87c:	3714      	adds	r7, #20
 800b87e:	46bd      	mov	sp, r7
 800b880:	bc80      	pop	{r7}
 800b882:	4770      	bx	lr
 800b884:	20000ae4 	.word	0x20000ae4

0800b888 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 800b888:	b590      	push	{r4, r7, lr}
 800b88a:	b085      	sub	sp, #20
 800b88c:	af00      	add	r7, sp, #0
 800b88e:	6078      	str	r0, [r7, #4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 800b890:	4b11      	ldr	r3, [pc, #68]	; (800b8d8 <TimerSetTimeout+0x50>)
 800b892:	6a1b      	ldr	r3, [r3, #32]
 800b894:	4798      	blx	r3
 800b896:	60f8      	str	r0, [r7, #12]
  TimerObject->IsPending = 1;
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	2201      	movs	r2, #1
 800b89c:	721a      	strb	r2, [r3, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	681c      	ldr	r4, [r3, #0]
 800b8a2:	4b0d      	ldr	r3, [pc, #52]	; (800b8d8 <TimerSetTimeout+0x50>)
 800b8a4:	699b      	ldr	r3, [r3, #24]
 800b8a6:	4798      	blx	r3
 800b8a8:	4602      	mov	r2, r0
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	4413      	add	r3, r2
 800b8ae:	429c      	cmp	r4, r3
 800b8b0:	d207      	bcs.n	800b8c2 <TimerSetTimeout+0x3a>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 800b8b2:	4b09      	ldr	r3, [pc, #36]	; (800b8d8 <TimerSetTimeout+0x50>)
 800b8b4:	699b      	ldr	r3, [r3, #24]
 800b8b6:	4798      	blx	r3
 800b8b8:	4602      	mov	r2, r0
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	441a      	add	r2, r3
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	601a      	str	r2, [r3, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 800b8c2:	4b05      	ldr	r3, [pc, #20]	; (800b8d8 <TimerSetTimeout+0x50>)
 800b8c4:	689b      	ldr	r3, [r3, #8]
 800b8c6:	687a      	ldr	r2, [r7, #4]
 800b8c8:	6812      	ldr	r2, [r2, #0]
 800b8ca:	4610      	mov	r0, r2
 800b8cc:	4798      	blx	r3
}
 800b8ce:	bf00      	nop
 800b8d0:	3714      	adds	r7, #20
 800b8d2:	46bd      	mov	sp, r7
 800b8d4:	bd90      	pop	{r4, r7, pc}
 800b8d6:	bf00      	nop
 800b8d8:	0800cbbc 	.word	0x0800cbbc

0800b8dc <TimerInsertTimer>:
 *     next timer to expire.
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
 800b8dc:	b480      	push	{r7}
 800b8de:	b085      	sub	sp, #20
 800b8e0:	af00      	add	r7, sp, #0
 800b8e2:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800b8e4:	4b14      	ldr	r3, [pc, #80]	; (800b938 <TimerInsertTimer+0x5c>)
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	60fb      	str	r3, [r7, #12]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 800b8ea:	4b13      	ldr	r3, [pc, #76]	; (800b938 <TimerInsertTimer+0x5c>)
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	695b      	ldr	r3, [r3, #20]
 800b8f0:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 800b8f2:	e012      	b.n	800b91a <TimerInsertTimer+0x3e>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	681a      	ldr	r2, [r3, #0]
 800b8f8:	68bb      	ldr	r3, [r7, #8]
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	429a      	cmp	r2, r3
 800b8fe:	d905      	bls.n	800b90c <TimerInsertTimer+0x30>
    {
        cur = next;
 800b900:	68bb      	ldr	r3, [r7, #8]
 800b902:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 800b904:	68bb      	ldr	r3, [r7, #8]
 800b906:	695b      	ldr	r3, [r3, #20]
 800b908:	60bb      	str	r3, [r7, #8]
 800b90a:	e006      	b.n	800b91a <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = TimerObject;
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	687a      	ldr	r2, [r7, #4]
 800b910:	615a      	str	r2, [r3, #20]
        TimerObject->Next = next;
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	68ba      	ldr	r2, [r7, #8]
 800b916:	615a      	str	r2, [r3, #20]
        return;
 800b918:	e009      	b.n	800b92e <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	695b      	ldr	r3, [r3, #20]
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d1e8      	bne.n	800b8f4 <TimerInsertTimer+0x18>

    }
  }
  cur->Next = TimerObject;
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	687a      	ldr	r2, [r7, #4]
 800b926:	615a      	str	r2, [r3, #20]
  TimerObject->Next = NULL;
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	2200      	movs	r2, #0
 800b92c:	615a      	str	r2, [r3, #20]
}
 800b92e:	3714      	adds	r7, #20
 800b930:	46bd      	mov	sp, r7
 800b932:	bc80      	pop	{r7}
 800b934:	4770      	bx	lr
 800b936:	bf00      	nop
 800b938:	20000ae4 	.word	0x20000ae4

0800b93c <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 800b93c:	b580      	push	{r7, lr}
 800b93e:	b084      	sub	sp, #16
 800b940:	af00      	add	r7, sp, #0
 800b942:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800b944:	4b0b      	ldr	r3, [pc, #44]	; (800b974 <TimerInsertNewHeadTimer+0x38>)
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d002      	beq.n	800b956 <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsPending = 0;
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	2200      	movs	r2, #0
 800b954:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	68fa      	ldr	r2, [r7, #12]
 800b95a:	615a      	str	r2, [r3, #20]
  TimerListHead = TimerObject;
 800b95c:	4a05      	ldr	r2, [pc, #20]	; (800b974 <TimerInsertNewHeadTimer+0x38>)
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	6013      	str	r3, [r2, #0]
  TimerSetTimeout( TimerListHead );
 800b962:	4b04      	ldr	r3, [pc, #16]	; (800b974 <TimerInsertNewHeadTimer+0x38>)
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	4618      	mov	r0, r3
 800b968:	f7ff ff8e 	bl	800b888 <TimerSetTimeout>
}
 800b96c:	bf00      	nop
 800b96e:	3710      	adds	r7, #16
 800b970:	46bd      	mov	sp, r7
 800b972:	bd80      	pop	{r7, pc}
 800b974:	20000ae4 	.word	0x20000ae4

0800b978 <_vsniprintf_r>:
 800b978:	b530      	push	{r4, r5, lr}
 800b97a:	4614      	mov	r4, r2
 800b97c:	2c00      	cmp	r4, #0
 800b97e:	b09b      	sub	sp, #108	; 0x6c
 800b980:	4605      	mov	r5, r0
 800b982:	461a      	mov	r2, r3
 800b984:	da05      	bge.n	800b992 <_vsniprintf_r+0x1a>
 800b986:	238b      	movs	r3, #139	; 0x8b
 800b988:	6003      	str	r3, [r0, #0]
 800b98a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b98e:	b01b      	add	sp, #108	; 0x6c
 800b990:	bd30      	pop	{r4, r5, pc}
 800b992:	f44f 7302 	mov.w	r3, #520	; 0x208
 800b996:	f8ad 300c 	strh.w	r3, [sp, #12]
 800b99a:	bf14      	ite	ne
 800b99c:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800b9a0:	4623      	moveq	r3, r4
 800b9a2:	9302      	str	r3, [sp, #8]
 800b9a4:	9305      	str	r3, [sp, #20]
 800b9a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b9aa:	9100      	str	r1, [sp, #0]
 800b9ac:	9104      	str	r1, [sp, #16]
 800b9ae:	f8ad 300e 	strh.w	r3, [sp, #14]
 800b9b2:	4669      	mov	r1, sp
 800b9b4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800b9b6:	f000 f8b5 	bl	800bb24 <_svfiprintf_r>
 800b9ba:	1c43      	adds	r3, r0, #1
 800b9bc:	bfbc      	itt	lt
 800b9be:	238b      	movlt	r3, #139	; 0x8b
 800b9c0:	602b      	strlt	r3, [r5, #0]
 800b9c2:	2c00      	cmp	r4, #0
 800b9c4:	d0e3      	beq.n	800b98e <_vsniprintf_r+0x16>
 800b9c6:	9b00      	ldr	r3, [sp, #0]
 800b9c8:	2200      	movs	r2, #0
 800b9ca:	701a      	strb	r2, [r3, #0]
 800b9cc:	e7df      	b.n	800b98e <_vsniprintf_r+0x16>
	...

0800b9d0 <vsniprintf>:
 800b9d0:	b507      	push	{r0, r1, r2, lr}
 800b9d2:	9300      	str	r3, [sp, #0]
 800b9d4:	4613      	mov	r3, r2
 800b9d6:	460a      	mov	r2, r1
 800b9d8:	4601      	mov	r1, r0
 800b9da:	4803      	ldr	r0, [pc, #12]	; (800b9e8 <vsniprintf+0x18>)
 800b9dc:	6800      	ldr	r0, [r0, #0]
 800b9de:	f7ff ffcb 	bl	800b978 <_vsniprintf_r>
 800b9e2:	b003      	add	sp, #12
 800b9e4:	f85d fb04 	ldr.w	pc, [sp], #4
 800b9e8:	20000064 	.word	0x20000064

0800b9ec <memset>:
 800b9ec:	4402      	add	r2, r0
 800b9ee:	4603      	mov	r3, r0
 800b9f0:	4293      	cmp	r3, r2
 800b9f2:	d100      	bne.n	800b9f6 <memset+0xa>
 800b9f4:	4770      	bx	lr
 800b9f6:	f803 1b01 	strb.w	r1, [r3], #1
 800b9fa:	e7f9      	b.n	800b9f0 <memset+0x4>

0800b9fc <__errno>:
 800b9fc:	4b01      	ldr	r3, [pc, #4]	; (800ba04 <__errno+0x8>)
 800b9fe:	6818      	ldr	r0, [r3, #0]
 800ba00:	4770      	bx	lr
 800ba02:	bf00      	nop
 800ba04:	20000064 	.word	0x20000064

0800ba08 <__libc_init_array>:
 800ba08:	b570      	push	{r4, r5, r6, lr}
 800ba0a:	4d0d      	ldr	r5, [pc, #52]	; (800ba40 <__libc_init_array+0x38>)
 800ba0c:	4c0d      	ldr	r4, [pc, #52]	; (800ba44 <__libc_init_array+0x3c>)
 800ba0e:	1b64      	subs	r4, r4, r5
 800ba10:	10a4      	asrs	r4, r4, #2
 800ba12:	2600      	movs	r6, #0
 800ba14:	42a6      	cmp	r6, r4
 800ba16:	d109      	bne.n	800ba2c <__libc_init_array+0x24>
 800ba18:	4d0b      	ldr	r5, [pc, #44]	; (800ba48 <__libc_init_array+0x40>)
 800ba1a:	4c0c      	ldr	r4, [pc, #48]	; (800ba4c <__libc_init_array+0x44>)
 800ba1c:	f000 fc68 	bl	800c2f0 <_init>
 800ba20:	1b64      	subs	r4, r4, r5
 800ba22:	10a4      	asrs	r4, r4, #2
 800ba24:	2600      	movs	r6, #0
 800ba26:	42a6      	cmp	r6, r4
 800ba28:	d105      	bne.n	800ba36 <__libc_init_array+0x2e>
 800ba2a:	bd70      	pop	{r4, r5, r6, pc}
 800ba2c:	f855 3b04 	ldr.w	r3, [r5], #4
 800ba30:	4798      	blx	r3
 800ba32:	3601      	adds	r6, #1
 800ba34:	e7ee      	b.n	800ba14 <__libc_init_array+0xc>
 800ba36:	f855 3b04 	ldr.w	r3, [r5], #4
 800ba3a:	4798      	blx	r3
 800ba3c:	3601      	adds	r6, #1
 800ba3e:	e7f2      	b.n	800ba26 <__libc_init_array+0x1e>
 800ba40:	0800cd8c 	.word	0x0800cd8c
 800ba44:	0800cd8c 	.word	0x0800cd8c
 800ba48:	0800cd8c 	.word	0x0800cd8c
 800ba4c:	0800cd90 	.word	0x0800cd90

0800ba50 <__retarget_lock_acquire_recursive>:
 800ba50:	4770      	bx	lr

0800ba52 <__retarget_lock_release_recursive>:
 800ba52:	4770      	bx	lr

0800ba54 <memcpy>:
 800ba54:	440a      	add	r2, r1
 800ba56:	4291      	cmp	r1, r2
 800ba58:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800ba5c:	d100      	bne.n	800ba60 <memcpy+0xc>
 800ba5e:	4770      	bx	lr
 800ba60:	b510      	push	{r4, lr}
 800ba62:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ba66:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ba6a:	4291      	cmp	r1, r2
 800ba6c:	d1f9      	bne.n	800ba62 <memcpy+0xe>
 800ba6e:	bd10      	pop	{r4, pc}

0800ba70 <__ssputs_r>:
 800ba70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba74:	688e      	ldr	r6, [r1, #8]
 800ba76:	461f      	mov	r7, r3
 800ba78:	42be      	cmp	r6, r7
 800ba7a:	680b      	ldr	r3, [r1, #0]
 800ba7c:	4682      	mov	sl, r0
 800ba7e:	460c      	mov	r4, r1
 800ba80:	4690      	mov	r8, r2
 800ba82:	d82c      	bhi.n	800bade <__ssputs_r+0x6e>
 800ba84:	898a      	ldrh	r2, [r1, #12]
 800ba86:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ba8a:	d026      	beq.n	800bada <__ssputs_r+0x6a>
 800ba8c:	6965      	ldr	r5, [r4, #20]
 800ba8e:	6909      	ldr	r1, [r1, #16]
 800ba90:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ba94:	eba3 0901 	sub.w	r9, r3, r1
 800ba98:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ba9c:	1c7b      	adds	r3, r7, #1
 800ba9e:	444b      	add	r3, r9
 800baa0:	106d      	asrs	r5, r5, #1
 800baa2:	429d      	cmp	r5, r3
 800baa4:	bf38      	it	cc
 800baa6:	461d      	movcc	r5, r3
 800baa8:	0553      	lsls	r3, r2, #21
 800baaa:	d527      	bpl.n	800bafc <__ssputs_r+0x8c>
 800baac:	4629      	mov	r1, r5
 800baae:	f000 f957 	bl	800bd60 <_malloc_r>
 800bab2:	4606      	mov	r6, r0
 800bab4:	b360      	cbz	r0, 800bb10 <__ssputs_r+0xa0>
 800bab6:	6921      	ldr	r1, [r4, #16]
 800bab8:	464a      	mov	r2, r9
 800baba:	f7ff ffcb 	bl	800ba54 <memcpy>
 800babe:	89a3      	ldrh	r3, [r4, #12]
 800bac0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bac4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bac8:	81a3      	strh	r3, [r4, #12]
 800baca:	6126      	str	r6, [r4, #16]
 800bacc:	6165      	str	r5, [r4, #20]
 800bace:	444e      	add	r6, r9
 800bad0:	eba5 0509 	sub.w	r5, r5, r9
 800bad4:	6026      	str	r6, [r4, #0]
 800bad6:	60a5      	str	r5, [r4, #8]
 800bad8:	463e      	mov	r6, r7
 800bada:	42be      	cmp	r6, r7
 800badc:	d900      	bls.n	800bae0 <__ssputs_r+0x70>
 800bade:	463e      	mov	r6, r7
 800bae0:	6820      	ldr	r0, [r4, #0]
 800bae2:	4632      	mov	r2, r6
 800bae4:	4641      	mov	r1, r8
 800bae6:	f000 fb86 	bl	800c1f6 <memmove>
 800baea:	68a3      	ldr	r3, [r4, #8]
 800baec:	1b9b      	subs	r3, r3, r6
 800baee:	60a3      	str	r3, [r4, #8]
 800baf0:	6823      	ldr	r3, [r4, #0]
 800baf2:	4433      	add	r3, r6
 800baf4:	6023      	str	r3, [r4, #0]
 800baf6:	2000      	movs	r0, #0
 800baf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bafc:	462a      	mov	r2, r5
 800bafe:	f000 fb4b 	bl	800c198 <_realloc_r>
 800bb02:	4606      	mov	r6, r0
 800bb04:	2800      	cmp	r0, #0
 800bb06:	d1e0      	bne.n	800baca <__ssputs_r+0x5a>
 800bb08:	6921      	ldr	r1, [r4, #16]
 800bb0a:	4650      	mov	r0, sl
 800bb0c:	f000 fb9e 	bl	800c24c <_free_r>
 800bb10:	230c      	movs	r3, #12
 800bb12:	f8ca 3000 	str.w	r3, [sl]
 800bb16:	89a3      	ldrh	r3, [r4, #12]
 800bb18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bb1c:	81a3      	strh	r3, [r4, #12]
 800bb1e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bb22:	e7e9      	b.n	800baf8 <__ssputs_r+0x88>

0800bb24 <_svfiprintf_r>:
 800bb24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb28:	4698      	mov	r8, r3
 800bb2a:	898b      	ldrh	r3, [r1, #12]
 800bb2c:	061b      	lsls	r3, r3, #24
 800bb2e:	b09d      	sub	sp, #116	; 0x74
 800bb30:	4607      	mov	r7, r0
 800bb32:	460d      	mov	r5, r1
 800bb34:	4614      	mov	r4, r2
 800bb36:	d50e      	bpl.n	800bb56 <_svfiprintf_r+0x32>
 800bb38:	690b      	ldr	r3, [r1, #16]
 800bb3a:	b963      	cbnz	r3, 800bb56 <_svfiprintf_r+0x32>
 800bb3c:	2140      	movs	r1, #64	; 0x40
 800bb3e:	f000 f90f 	bl	800bd60 <_malloc_r>
 800bb42:	6028      	str	r0, [r5, #0]
 800bb44:	6128      	str	r0, [r5, #16]
 800bb46:	b920      	cbnz	r0, 800bb52 <_svfiprintf_r+0x2e>
 800bb48:	230c      	movs	r3, #12
 800bb4a:	603b      	str	r3, [r7, #0]
 800bb4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bb50:	e0d0      	b.n	800bcf4 <_svfiprintf_r+0x1d0>
 800bb52:	2340      	movs	r3, #64	; 0x40
 800bb54:	616b      	str	r3, [r5, #20]
 800bb56:	2300      	movs	r3, #0
 800bb58:	9309      	str	r3, [sp, #36]	; 0x24
 800bb5a:	2320      	movs	r3, #32
 800bb5c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bb60:	f8cd 800c 	str.w	r8, [sp, #12]
 800bb64:	2330      	movs	r3, #48	; 0x30
 800bb66:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800bd0c <_svfiprintf_r+0x1e8>
 800bb6a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bb6e:	f04f 0901 	mov.w	r9, #1
 800bb72:	4623      	mov	r3, r4
 800bb74:	469a      	mov	sl, r3
 800bb76:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bb7a:	b10a      	cbz	r2, 800bb80 <_svfiprintf_r+0x5c>
 800bb7c:	2a25      	cmp	r2, #37	; 0x25
 800bb7e:	d1f9      	bne.n	800bb74 <_svfiprintf_r+0x50>
 800bb80:	ebba 0b04 	subs.w	fp, sl, r4
 800bb84:	d00b      	beq.n	800bb9e <_svfiprintf_r+0x7a>
 800bb86:	465b      	mov	r3, fp
 800bb88:	4622      	mov	r2, r4
 800bb8a:	4629      	mov	r1, r5
 800bb8c:	4638      	mov	r0, r7
 800bb8e:	f7ff ff6f 	bl	800ba70 <__ssputs_r>
 800bb92:	3001      	adds	r0, #1
 800bb94:	f000 80a9 	beq.w	800bcea <_svfiprintf_r+0x1c6>
 800bb98:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bb9a:	445a      	add	r2, fp
 800bb9c:	9209      	str	r2, [sp, #36]	; 0x24
 800bb9e:	f89a 3000 	ldrb.w	r3, [sl]
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	f000 80a1 	beq.w	800bcea <_svfiprintf_r+0x1c6>
 800bba8:	2300      	movs	r3, #0
 800bbaa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bbae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bbb2:	f10a 0a01 	add.w	sl, sl, #1
 800bbb6:	9304      	str	r3, [sp, #16]
 800bbb8:	9307      	str	r3, [sp, #28]
 800bbba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bbbe:	931a      	str	r3, [sp, #104]	; 0x68
 800bbc0:	4654      	mov	r4, sl
 800bbc2:	2205      	movs	r2, #5
 800bbc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bbc8:	4850      	ldr	r0, [pc, #320]	; (800bd0c <_svfiprintf_r+0x1e8>)
 800bbca:	f7f4 fad9 	bl	8000180 <memchr>
 800bbce:	9a04      	ldr	r2, [sp, #16]
 800bbd0:	b9d8      	cbnz	r0, 800bc0a <_svfiprintf_r+0xe6>
 800bbd2:	06d0      	lsls	r0, r2, #27
 800bbd4:	bf44      	itt	mi
 800bbd6:	2320      	movmi	r3, #32
 800bbd8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bbdc:	0711      	lsls	r1, r2, #28
 800bbde:	bf44      	itt	mi
 800bbe0:	232b      	movmi	r3, #43	; 0x2b
 800bbe2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bbe6:	f89a 3000 	ldrb.w	r3, [sl]
 800bbea:	2b2a      	cmp	r3, #42	; 0x2a
 800bbec:	d015      	beq.n	800bc1a <_svfiprintf_r+0xf6>
 800bbee:	9a07      	ldr	r2, [sp, #28]
 800bbf0:	4654      	mov	r4, sl
 800bbf2:	2000      	movs	r0, #0
 800bbf4:	f04f 0c0a 	mov.w	ip, #10
 800bbf8:	4621      	mov	r1, r4
 800bbfa:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bbfe:	3b30      	subs	r3, #48	; 0x30
 800bc00:	2b09      	cmp	r3, #9
 800bc02:	d94d      	bls.n	800bca0 <_svfiprintf_r+0x17c>
 800bc04:	b1b0      	cbz	r0, 800bc34 <_svfiprintf_r+0x110>
 800bc06:	9207      	str	r2, [sp, #28]
 800bc08:	e014      	b.n	800bc34 <_svfiprintf_r+0x110>
 800bc0a:	eba0 0308 	sub.w	r3, r0, r8
 800bc0e:	fa09 f303 	lsl.w	r3, r9, r3
 800bc12:	4313      	orrs	r3, r2
 800bc14:	9304      	str	r3, [sp, #16]
 800bc16:	46a2      	mov	sl, r4
 800bc18:	e7d2      	b.n	800bbc0 <_svfiprintf_r+0x9c>
 800bc1a:	9b03      	ldr	r3, [sp, #12]
 800bc1c:	1d19      	adds	r1, r3, #4
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	9103      	str	r1, [sp, #12]
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	bfbb      	ittet	lt
 800bc26:	425b      	neglt	r3, r3
 800bc28:	f042 0202 	orrlt.w	r2, r2, #2
 800bc2c:	9307      	strge	r3, [sp, #28]
 800bc2e:	9307      	strlt	r3, [sp, #28]
 800bc30:	bfb8      	it	lt
 800bc32:	9204      	strlt	r2, [sp, #16]
 800bc34:	7823      	ldrb	r3, [r4, #0]
 800bc36:	2b2e      	cmp	r3, #46	; 0x2e
 800bc38:	d10c      	bne.n	800bc54 <_svfiprintf_r+0x130>
 800bc3a:	7863      	ldrb	r3, [r4, #1]
 800bc3c:	2b2a      	cmp	r3, #42	; 0x2a
 800bc3e:	d134      	bne.n	800bcaa <_svfiprintf_r+0x186>
 800bc40:	9b03      	ldr	r3, [sp, #12]
 800bc42:	1d1a      	adds	r2, r3, #4
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	9203      	str	r2, [sp, #12]
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	bfb8      	it	lt
 800bc4c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800bc50:	3402      	adds	r4, #2
 800bc52:	9305      	str	r3, [sp, #20]
 800bc54:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800bd10 <_svfiprintf_r+0x1ec>
 800bc58:	7821      	ldrb	r1, [r4, #0]
 800bc5a:	2203      	movs	r2, #3
 800bc5c:	4650      	mov	r0, sl
 800bc5e:	f7f4 fa8f 	bl	8000180 <memchr>
 800bc62:	b138      	cbz	r0, 800bc74 <_svfiprintf_r+0x150>
 800bc64:	9b04      	ldr	r3, [sp, #16]
 800bc66:	eba0 000a 	sub.w	r0, r0, sl
 800bc6a:	2240      	movs	r2, #64	; 0x40
 800bc6c:	4082      	lsls	r2, r0
 800bc6e:	4313      	orrs	r3, r2
 800bc70:	3401      	adds	r4, #1
 800bc72:	9304      	str	r3, [sp, #16]
 800bc74:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc78:	4826      	ldr	r0, [pc, #152]	; (800bd14 <_svfiprintf_r+0x1f0>)
 800bc7a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bc7e:	2206      	movs	r2, #6
 800bc80:	f7f4 fa7e 	bl	8000180 <memchr>
 800bc84:	2800      	cmp	r0, #0
 800bc86:	d038      	beq.n	800bcfa <_svfiprintf_r+0x1d6>
 800bc88:	4b23      	ldr	r3, [pc, #140]	; (800bd18 <_svfiprintf_r+0x1f4>)
 800bc8a:	bb1b      	cbnz	r3, 800bcd4 <_svfiprintf_r+0x1b0>
 800bc8c:	9b03      	ldr	r3, [sp, #12]
 800bc8e:	3307      	adds	r3, #7
 800bc90:	f023 0307 	bic.w	r3, r3, #7
 800bc94:	3308      	adds	r3, #8
 800bc96:	9303      	str	r3, [sp, #12]
 800bc98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc9a:	4433      	add	r3, r6
 800bc9c:	9309      	str	r3, [sp, #36]	; 0x24
 800bc9e:	e768      	b.n	800bb72 <_svfiprintf_r+0x4e>
 800bca0:	fb0c 3202 	mla	r2, ip, r2, r3
 800bca4:	460c      	mov	r4, r1
 800bca6:	2001      	movs	r0, #1
 800bca8:	e7a6      	b.n	800bbf8 <_svfiprintf_r+0xd4>
 800bcaa:	2300      	movs	r3, #0
 800bcac:	3401      	adds	r4, #1
 800bcae:	9305      	str	r3, [sp, #20]
 800bcb0:	4619      	mov	r1, r3
 800bcb2:	f04f 0c0a 	mov.w	ip, #10
 800bcb6:	4620      	mov	r0, r4
 800bcb8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bcbc:	3a30      	subs	r2, #48	; 0x30
 800bcbe:	2a09      	cmp	r2, #9
 800bcc0:	d903      	bls.n	800bcca <_svfiprintf_r+0x1a6>
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d0c6      	beq.n	800bc54 <_svfiprintf_r+0x130>
 800bcc6:	9105      	str	r1, [sp, #20]
 800bcc8:	e7c4      	b.n	800bc54 <_svfiprintf_r+0x130>
 800bcca:	fb0c 2101 	mla	r1, ip, r1, r2
 800bcce:	4604      	mov	r4, r0
 800bcd0:	2301      	movs	r3, #1
 800bcd2:	e7f0      	b.n	800bcb6 <_svfiprintf_r+0x192>
 800bcd4:	ab03      	add	r3, sp, #12
 800bcd6:	9300      	str	r3, [sp, #0]
 800bcd8:	462a      	mov	r2, r5
 800bcda:	4b10      	ldr	r3, [pc, #64]	; (800bd1c <_svfiprintf_r+0x1f8>)
 800bcdc:	a904      	add	r1, sp, #16
 800bcde:	4638      	mov	r0, r7
 800bce0:	f3af 8000 	nop.w
 800bce4:	1c42      	adds	r2, r0, #1
 800bce6:	4606      	mov	r6, r0
 800bce8:	d1d6      	bne.n	800bc98 <_svfiprintf_r+0x174>
 800bcea:	89ab      	ldrh	r3, [r5, #12]
 800bcec:	065b      	lsls	r3, r3, #25
 800bcee:	f53f af2d 	bmi.w	800bb4c <_svfiprintf_r+0x28>
 800bcf2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bcf4:	b01d      	add	sp, #116	; 0x74
 800bcf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bcfa:	ab03      	add	r3, sp, #12
 800bcfc:	9300      	str	r3, [sp, #0]
 800bcfe:	462a      	mov	r2, r5
 800bd00:	4b06      	ldr	r3, [pc, #24]	; (800bd1c <_svfiprintf_r+0x1f8>)
 800bd02:	a904      	add	r1, sp, #16
 800bd04:	4638      	mov	r0, r7
 800bd06:	f000 f919 	bl	800bf3c <_printf_i>
 800bd0a:	e7eb      	b.n	800bce4 <_svfiprintf_r+0x1c0>
 800bd0c:	0800cd50 	.word	0x0800cd50
 800bd10:	0800cd56 	.word	0x0800cd56
 800bd14:	0800cd5a 	.word	0x0800cd5a
 800bd18:	00000000 	.word	0x00000000
 800bd1c:	0800ba71 	.word	0x0800ba71

0800bd20 <sbrk_aligned>:
 800bd20:	b570      	push	{r4, r5, r6, lr}
 800bd22:	4e0e      	ldr	r6, [pc, #56]	; (800bd5c <sbrk_aligned+0x3c>)
 800bd24:	460c      	mov	r4, r1
 800bd26:	6831      	ldr	r1, [r6, #0]
 800bd28:	4605      	mov	r5, r0
 800bd2a:	b911      	cbnz	r1, 800bd32 <sbrk_aligned+0x12>
 800bd2c:	f000 fa7e 	bl	800c22c <_sbrk_r>
 800bd30:	6030      	str	r0, [r6, #0]
 800bd32:	4621      	mov	r1, r4
 800bd34:	4628      	mov	r0, r5
 800bd36:	f000 fa79 	bl	800c22c <_sbrk_r>
 800bd3a:	1c43      	adds	r3, r0, #1
 800bd3c:	d00a      	beq.n	800bd54 <sbrk_aligned+0x34>
 800bd3e:	1cc4      	adds	r4, r0, #3
 800bd40:	f024 0403 	bic.w	r4, r4, #3
 800bd44:	42a0      	cmp	r0, r4
 800bd46:	d007      	beq.n	800bd58 <sbrk_aligned+0x38>
 800bd48:	1a21      	subs	r1, r4, r0
 800bd4a:	4628      	mov	r0, r5
 800bd4c:	f000 fa6e 	bl	800c22c <_sbrk_r>
 800bd50:	3001      	adds	r0, #1
 800bd52:	d101      	bne.n	800bd58 <sbrk_aligned+0x38>
 800bd54:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800bd58:	4620      	mov	r0, r4
 800bd5a:	bd70      	pop	{r4, r5, r6, pc}
 800bd5c:	20000c28 	.word	0x20000c28

0800bd60 <_malloc_r>:
 800bd60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bd64:	1ccd      	adds	r5, r1, #3
 800bd66:	f025 0503 	bic.w	r5, r5, #3
 800bd6a:	3508      	adds	r5, #8
 800bd6c:	2d0c      	cmp	r5, #12
 800bd6e:	bf38      	it	cc
 800bd70:	250c      	movcc	r5, #12
 800bd72:	2d00      	cmp	r5, #0
 800bd74:	4607      	mov	r7, r0
 800bd76:	db01      	blt.n	800bd7c <_malloc_r+0x1c>
 800bd78:	42a9      	cmp	r1, r5
 800bd7a:	d905      	bls.n	800bd88 <_malloc_r+0x28>
 800bd7c:	230c      	movs	r3, #12
 800bd7e:	603b      	str	r3, [r7, #0]
 800bd80:	2600      	movs	r6, #0
 800bd82:	4630      	mov	r0, r6
 800bd84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bd88:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800be5c <_malloc_r+0xfc>
 800bd8c:	f000 f9f8 	bl	800c180 <__malloc_lock>
 800bd90:	f8d8 3000 	ldr.w	r3, [r8]
 800bd94:	461c      	mov	r4, r3
 800bd96:	bb5c      	cbnz	r4, 800bdf0 <_malloc_r+0x90>
 800bd98:	4629      	mov	r1, r5
 800bd9a:	4638      	mov	r0, r7
 800bd9c:	f7ff ffc0 	bl	800bd20 <sbrk_aligned>
 800bda0:	1c43      	adds	r3, r0, #1
 800bda2:	4604      	mov	r4, r0
 800bda4:	d155      	bne.n	800be52 <_malloc_r+0xf2>
 800bda6:	f8d8 4000 	ldr.w	r4, [r8]
 800bdaa:	4626      	mov	r6, r4
 800bdac:	2e00      	cmp	r6, #0
 800bdae:	d145      	bne.n	800be3c <_malloc_r+0xdc>
 800bdb0:	2c00      	cmp	r4, #0
 800bdb2:	d048      	beq.n	800be46 <_malloc_r+0xe6>
 800bdb4:	6823      	ldr	r3, [r4, #0]
 800bdb6:	4631      	mov	r1, r6
 800bdb8:	4638      	mov	r0, r7
 800bdba:	eb04 0903 	add.w	r9, r4, r3
 800bdbe:	f000 fa35 	bl	800c22c <_sbrk_r>
 800bdc2:	4581      	cmp	r9, r0
 800bdc4:	d13f      	bne.n	800be46 <_malloc_r+0xe6>
 800bdc6:	6821      	ldr	r1, [r4, #0]
 800bdc8:	1a6d      	subs	r5, r5, r1
 800bdca:	4629      	mov	r1, r5
 800bdcc:	4638      	mov	r0, r7
 800bdce:	f7ff ffa7 	bl	800bd20 <sbrk_aligned>
 800bdd2:	3001      	adds	r0, #1
 800bdd4:	d037      	beq.n	800be46 <_malloc_r+0xe6>
 800bdd6:	6823      	ldr	r3, [r4, #0]
 800bdd8:	442b      	add	r3, r5
 800bdda:	6023      	str	r3, [r4, #0]
 800bddc:	f8d8 3000 	ldr.w	r3, [r8]
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d038      	beq.n	800be56 <_malloc_r+0xf6>
 800bde4:	685a      	ldr	r2, [r3, #4]
 800bde6:	42a2      	cmp	r2, r4
 800bde8:	d12b      	bne.n	800be42 <_malloc_r+0xe2>
 800bdea:	2200      	movs	r2, #0
 800bdec:	605a      	str	r2, [r3, #4]
 800bdee:	e00f      	b.n	800be10 <_malloc_r+0xb0>
 800bdf0:	6822      	ldr	r2, [r4, #0]
 800bdf2:	1b52      	subs	r2, r2, r5
 800bdf4:	d41f      	bmi.n	800be36 <_malloc_r+0xd6>
 800bdf6:	2a0b      	cmp	r2, #11
 800bdf8:	d917      	bls.n	800be2a <_malloc_r+0xca>
 800bdfa:	1961      	adds	r1, r4, r5
 800bdfc:	42a3      	cmp	r3, r4
 800bdfe:	6025      	str	r5, [r4, #0]
 800be00:	bf18      	it	ne
 800be02:	6059      	strne	r1, [r3, #4]
 800be04:	6863      	ldr	r3, [r4, #4]
 800be06:	bf08      	it	eq
 800be08:	f8c8 1000 	streq.w	r1, [r8]
 800be0c:	5162      	str	r2, [r4, r5]
 800be0e:	604b      	str	r3, [r1, #4]
 800be10:	4638      	mov	r0, r7
 800be12:	f104 060b 	add.w	r6, r4, #11
 800be16:	f000 f9b9 	bl	800c18c <__malloc_unlock>
 800be1a:	f026 0607 	bic.w	r6, r6, #7
 800be1e:	1d23      	adds	r3, r4, #4
 800be20:	1af2      	subs	r2, r6, r3
 800be22:	d0ae      	beq.n	800bd82 <_malloc_r+0x22>
 800be24:	1b9b      	subs	r3, r3, r6
 800be26:	50a3      	str	r3, [r4, r2]
 800be28:	e7ab      	b.n	800bd82 <_malloc_r+0x22>
 800be2a:	42a3      	cmp	r3, r4
 800be2c:	6862      	ldr	r2, [r4, #4]
 800be2e:	d1dd      	bne.n	800bdec <_malloc_r+0x8c>
 800be30:	f8c8 2000 	str.w	r2, [r8]
 800be34:	e7ec      	b.n	800be10 <_malloc_r+0xb0>
 800be36:	4623      	mov	r3, r4
 800be38:	6864      	ldr	r4, [r4, #4]
 800be3a:	e7ac      	b.n	800bd96 <_malloc_r+0x36>
 800be3c:	4634      	mov	r4, r6
 800be3e:	6876      	ldr	r6, [r6, #4]
 800be40:	e7b4      	b.n	800bdac <_malloc_r+0x4c>
 800be42:	4613      	mov	r3, r2
 800be44:	e7cc      	b.n	800bde0 <_malloc_r+0x80>
 800be46:	230c      	movs	r3, #12
 800be48:	603b      	str	r3, [r7, #0]
 800be4a:	4638      	mov	r0, r7
 800be4c:	f000 f99e 	bl	800c18c <__malloc_unlock>
 800be50:	e797      	b.n	800bd82 <_malloc_r+0x22>
 800be52:	6025      	str	r5, [r4, #0]
 800be54:	e7dc      	b.n	800be10 <_malloc_r+0xb0>
 800be56:	605b      	str	r3, [r3, #4]
 800be58:	deff      	udf	#255	; 0xff
 800be5a:	bf00      	nop
 800be5c:	20000c24 	.word	0x20000c24

0800be60 <_printf_common>:
 800be60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800be64:	4616      	mov	r6, r2
 800be66:	4699      	mov	r9, r3
 800be68:	688a      	ldr	r2, [r1, #8]
 800be6a:	690b      	ldr	r3, [r1, #16]
 800be6c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800be70:	4293      	cmp	r3, r2
 800be72:	bfb8      	it	lt
 800be74:	4613      	movlt	r3, r2
 800be76:	6033      	str	r3, [r6, #0]
 800be78:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800be7c:	4607      	mov	r7, r0
 800be7e:	460c      	mov	r4, r1
 800be80:	b10a      	cbz	r2, 800be86 <_printf_common+0x26>
 800be82:	3301      	adds	r3, #1
 800be84:	6033      	str	r3, [r6, #0]
 800be86:	6823      	ldr	r3, [r4, #0]
 800be88:	0699      	lsls	r1, r3, #26
 800be8a:	bf42      	ittt	mi
 800be8c:	6833      	ldrmi	r3, [r6, #0]
 800be8e:	3302      	addmi	r3, #2
 800be90:	6033      	strmi	r3, [r6, #0]
 800be92:	6825      	ldr	r5, [r4, #0]
 800be94:	f015 0506 	ands.w	r5, r5, #6
 800be98:	d106      	bne.n	800bea8 <_printf_common+0x48>
 800be9a:	f104 0a19 	add.w	sl, r4, #25
 800be9e:	68e3      	ldr	r3, [r4, #12]
 800bea0:	6832      	ldr	r2, [r6, #0]
 800bea2:	1a9b      	subs	r3, r3, r2
 800bea4:	42ab      	cmp	r3, r5
 800bea6:	dc26      	bgt.n	800bef6 <_printf_common+0x96>
 800bea8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800beac:	1e13      	subs	r3, r2, #0
 800beae:	6822      	ldr	r2, [r4, #0]
 800beb0:	bf18      	it	ne
 800beb2:	2301      	movne	r3, #1
 800beb4:	0692      	lsls	r2, r2, #26
 800beb6:	d42b      	bmi.n	800bf10 <_printf_common+0xb0>
 800beb8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bebc:	4649      	mov	r1, r9
 800bebe:	4638      	mov	r0, r7
 800bec0:	47c0      	blx	r8
 800bec2:	3001      	adds	r0, #1
 800bec4:	d01e      	beq.n	800bf04 <_printf_common+0xa4>
 800bec6:	6823      	ldr	r3, [r4, #0]
 800bec8:	6922      	ldr	r2, [r4, #16]
 800beca:	f003 0306 	and.w	r3, r3, #6
 800bece:	2b04      	cmp	r3, #4
 800bed0:	bf02      	ittt	eq
 800bed2:	68e5      	ldreq	r5, [r4, #12]
 800bed4:	6833      	ldreq	r3, [r6, #0]
 800bed6:	1aed      	subeq	r5, r5, r3
 800bed8:	68a3      	ldr	r3, [r4, #8]
 800beda:	bf0c      	ite	eq
 800bedc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bee0:	2500      	movne	r5, #0
 800bee2:	4293      	cmp	r3, r2
 800bee4:	bfc4      	itt	gt
 800bee6:	1a9b      	subgt	r3, r3, r2
 800bee8:	18ed      	addgt	r5, r5, r3
 800beea:	2600      	movs	r6, #0
 800beec:	341a      	adds	r4, #26
 800beee:	42b5      	cmp	r5, r6
 800bef0:	d11a      	bne.n	800bf28 <_printf_common+0xc8>
 800bef2:	2000      	movs	r0, #0
 800bef4:	e008      	b.n	800bf08 <_printf_common+0xa8>
 800bef6:	2301      	movs	r3, #1
 800bef8:	4652      	mov	r2, sl
 800befa:	4649      	mov	r1, r9
 800befc:	4638      	mov	r0, r7
 800befe:	47c0      	blx	r8
 800bf00:	3001      	adds	r0, #1
 800bf02:	d103      	bne.n	800bf0c <_printf_common+0xac>
 800bf04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bf08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf0c:	3501      	adds	r5, #1
 800bf0e:	e7c6      	b.n	800be9e <_printf_common+0x3e>
 800bf10:	18e1      	adds	r1, r4, r3
 800bf12:	1c5a      	adds	r2, r3, #1
 800bf14:	2030      	movs	r0, #48	; 0x30
 800bf16:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bf1a:	4422      	add	r2, r4
 800bf1c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bf20:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bf24:	3302      	adds	r3, #2
 800bf26:	e7c7      	b.n	800beb8 <_printf_common+0x58>
 800bf28:	2301      	movs	r3, #1
 800bf2a:	4622      	mov	r2, r4
 800bf2c:	4649      	mov	r1, r9
 800bf2e:	4638      	mov	r0, r7
 800bf30:	47c0      	blx	r8
 800bf32:	3001      	adds	r0, #1
 800bf34:	d0e6      	beq.n	800bf04 <_printf_common+0xa4>
 800bf36:	3601      	adds	r6, #1
 800bf38:	e7d9      	b.n	800beee <_printf_common+0x8e>
	...

0800bf3c <_printf_i>:
 800bf3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bf40:	7e0f      	ldrb	r7, [r1, #24]
 800bf42:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800bf44:	2f78      	cmp	r7, #120	; 0x78
 800bf46:	4691      	mov	r9, r2
 800bf48:	4680      	mov	r8, r0
 800bf4a:	460c      	mov	r4, r1
 800bf4c:	469a      	mov	sl, r3
 800bf4e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800bf52:	d807      	bhi.n	800bf64 <_printf_i+0x28>
 800bf54:	2f62      	cmp	r7, #98	; 0x62
 800bf56:	d80a      	bhi.n	800bf6e <_printf_i+0x32>
 800bf58:	2f00      	cmp	r7, #0
 800bf5a:	f000 80d4 	beq.w	800c106 <_printf_i+0x1ca>
 800bf5e:	2f58      	cmp	r7, #88	; 0x58
 800bf60:	f000 80c0 	beq.w	800c0e4 <_printf_i+0x1a8>
 800bf64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bf68:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bf6c:	e03a      	b.n	800bfe4 <_printf_i+0xa8>
 800bf6e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bf72:	2b15      	cmp	r3, #21
 800bf74:	d8f6      	bhi.n	800bf64 <_printf_i+0x28>
 800bf76:	a101      	add	r1, pc, #4	; (adr r1, 800bf7c <_printf_i+0x40>)
 800bf78:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bf7c:	0800bfd5 	.word	0x0800bfd5
 800bf80:	0800bfe9 	.word	0x0800bfe9
 800bf84:	0800bf65 	.word	0x0800bf65
 800bf88:	0800bf65 	.word	0x0800bf65
 800bf8c:	0800bf65 	.word	0x0800bf65
 800bf90:	0800bf65 	.word	0x0800bf65
 800bf94:	0800bfe9 	.word	0x0800bfe9
 800bf98:	0800bf65 	.word	0x0800bf65
 800bf9c:	0800bf65 	.word	0x0800bf65
 800bfa0:	0800bf65 	.word	0x0800bf65
 800bfa4:	0800bf65 	.word	0x0800bf65
 800bfa8:	0800c0ed 	.word	0x0800c0ed
 800bfac:	0800c015 	.word	0x0800c015
 800bfb0:	0800c0a7 	.word	0x0800c0a7
 800bfb4:	0800bf65 	.word	0x0800bf65
 800bfb8:	0800bf65 	.word	0x0800bf65
 800bfbc:	0800c10f 	.word	0x0800c10f
 800bfc0:	0800bf65 	.word	0x0800bf65
 800bfc4:	0800c015 	.word	0x0800c015
 800bfc8:	0800bf65 	.word	0x0800bf65
 800bfcc:	0800bf65 	.word	0x0800bf65
 800bfd0:	0800c0af 	.word	0x0800c0af
 800bfd4:	682b      	ldr	r3, [r5, #0]
 800bfd6:	1d1a      	adds	r2, r3, #4
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	602a      	str	r2, [r5, #0]
 800bfdc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bfe0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bfe4:	2301      	movs	r3, #1
 800bfe6:	e09f      	b.n	800c128 <_printf_i+0x1ec>
 800bfe8:	6820      	ldr	r0, [r4, #0]
 800bfea:	682b      	ldr	r3, [r5, #0]
 800bfec:	0607      	lsls	r7, r0, #24
 800bfee:	f103 0104 	add.w	r1, r3, #4
 800bff2:	6029      	str	r1, [r5, #0]
 800bff4:	d501      	bpl.n	800bffa <_printf_i+0xbe>
 800bff6:	681e      	ldr	r6, [r3, #0]
 800bff8:	e003      	b.n	800c002 <_printf_i+0xc6>
 800bffa:	0646      	lsls	r6, r0, #25
 800bffc:	d5fb      	bpl.n	800bff6 <_printf_i+0xba>
 800bffe:	f9b3 6000 	ldrsh.w	r6, [r3]
 800c002:	2e00      	cmp	r6, #0
 800c004:	da03      	bge.n	800c00e <_printf_i+0xd2>
 800c006:	232d      	movs	r3, #45	; 0x2d
 800c008:	4276      	negs	r6, r6
 800c00a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c00e:	485a      	ldr	r0, [pc, #360]	; (800c178 <_printf_i+0x23c>)
 800c010:	230a      	movs	r3, #10
 800c012:	e012      	b.n	800c03a <_printf_i+0xfe>
 800c014:	682b      	ldr	r3, [r5, #0]
 800c016:	6820      	ldr	r0, [r4, #0]
 800c018:	1d19      	adds	r1, r3, #4
 800c01a:	6029      	str	r1, [r5, #0]
 800c01c:	0605      	lsls	r5, r0, #24
 800c01e:	d501      	bpl.n	800c024 <_printf_i+0xe8>
 800c020:	681e      	ldr	r6, [r3, #0]
 800c022:	e002      	b.n	800c02a <_printf_i+0xee>
 800c024:	0641      	lsls	r1, r0, #25
 800c026:	d5fb      	bpl.n	800c020 <_printf_i+0xe4>
 800c028:	881e      	ldrh	r6, [r3, #0]
 800c02a:	4853      	ldr	r0, [pc, #332]	; (800c178 <_printf_i+0x23c>)
 800c02c:	2f6f      	cmp	r7, #111	; 0x6f
 800c02e:	bf0c      	ite	eq
 800c030:	2308      	moveq	r3, #8
 800c032:	230a      	movne	r3, #10
 800c034:	2100      	movs	r1, #0
 800c036:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c03a:	6865      	ldr	r5, [r4, #4]
 800c03c:	60a5      	str	r5, [r4, #8]
 800c03e:	2d00      	cmp	r5, #0
 800c040:	bfa2      	ittt	ge
 800c042:	6821      	ldrge	r1, [r4, #0]
 800c044:	f021 0104 	bicge.w	r1, r1, #4
 800c048:	6021      	strge	r1, [r4, #0]
 800c04a:	b90e      	cbnz	r6, 800c050 <_printf_i+0x114>
 800c04c:	2d00      	cmp	r5, #0
 800c04e:	d04b      	beq.n	800c0e8 <_printf_i+0x1ac>
 800c050:	4615      	mov	r5, r2
 800c052:	fbb6 f1f3 	udiv	r1, r6, r3
 800c056:	fb03 6711 	mls	r7, r3, r1, r6
 800c05a:	5dc7      	ldrb	r7, [r0, r7]
 800c05c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c060:	4637      	mov	r7, r6
 800c062:	42bb      	cmp	r3, r7
 800c064:	460e      	mov	r6, r1
 800c066:	d9f4      	bls.n	800c052 <_printf_i+0x116>
 800c068:	2b08      	cmp	r3, #8
 800c06a:	d10b      	bne.n	800c084 <_printf_i+0x148>
 800c06c:	6823      	ldr	r3, [r4, #0]
 800c06e:	07de      	lsls	r6, r3, #31
 800c070:	d508      	bpl.n	800c084 <_printf_i+0x148>
 800c072:	6923      	ldr	r3, [r4, #16]
 800c074:	6861      	ldr	r1, [r4, #4]
 800c076:	4299      	cmp	r1, r3
 800c078:	bfde      	ittt	le
 800c07a:	2330      	movle	r3, #48	; 0x30
 800c07c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c080:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800c084:	1b52      	subs	r2, r2, r5
 800c086:	6122      	str	r2, [r4, #16]
 800c088:	f8cd a000 	str.w	sl, [sp]
 800c08c:	464b      	mov	r3, r9
 800c08e:	aa03      	add	r2, sp, #12
 800c090:	4621      	mov	r1, r4
 800c092:	4640      	mov	r0, r8
 800c094:	f7ff fee4 	bl	800be60 <_printf_common>
 800c098:	3001      	adds	r0, #1
 800c09a:	d14a      	bne.n	800c132 <_printf_i+0x1f6>
 800c09c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c0a0:	b004      	add	sp, #16
 800c0a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c0a6:	6823      	ldr	r3, [r4, #0]
 800c0a8:	f043 0320 	orr.w	r3, r3, #32
 800c0ac:	6023      	str	r3, [r4, #0]
 800c0ae:	4833      	ldr	r0, [pc, #204]	; (800c17c <_printf_i+0x240>)
 800c0b0:	2778      	movs	r7, #120	; 0x78
 800c0b2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c0b6:	6823      	ldr	r3, [r4, #0]
 800c0b8:	6829      	ldr	r1, [r5, #0]
 800c0ba:	061f      	lsls	r7, r3, #24
 800c0bc:	f851 6b04 	ldr.w	r6, [r1], #4
 800c0c0:	d402      	bmi.n	800c0c8 <_printf_i+0x18c>
 800c0c2:	065f      	lsls	r7, r3, #25
 800c0c4:	bf48      	it	mi
 800c0c6:	b2b6      	uxthmi	r6, r6
 800c0c8:	07df      	lsls	r7, r3, #31
 800c0ca:	bf48      	it	mi
 800c0cc:	f043 0320 	orrmi.w	r3, r3, #32
 800c0d0:	6029      	str	r1, [r5, #0]
 800c0d2:	bf48      	it	mi
 800c0d4:	6023      	strmi	r3, [r4, #0]
 800c0d6:	b91e      	cbnz	r6, 800c0e0 <_printf_i+0x1a4>
 800c0d8:	6823      	ldr	r3, [r4, #0]
 800c0da:	f023 0320 	bic.w	r3, r3, #32
 800c0de:	6023      	str	r3, [r4, #0]
 800c0e0:	2310      	movs	r3, #16
 800c0e2:	e7a7      	b.n	800c034 <_printf_i+0xf8>
 800c0e4:	4824      	ldr	r0, [pc, #144]	; (800c178 <_printf_i+0x23c>)
 800c0e6:	e7e4      	b.n	800c0b2 <_printf_i+0x176>
 800c0e8:	4615      	mov	r5, r2
 800c0ea:	e7bd      	b.n	800c068 <_printf_i+0x12c>
 800c0ec:	682b      	ldr	r3, [r5, #0]
 800c0ee:	6826      	ldr	r6, [r4, #0]
 800c0f0:	6961      	ldr	r1, [r4, #20]
 800c0f2:	1d18      	adds	r0, r3, #4
 800c0f4:	6028      	str	r0, [r5, #0]
 800c0f6:	0635      	lsls	r5, r6, #24
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	d501      	bpl.n	800c100 <_printf_i+0x1c4>
 800c0fc:	6019      	str	r1, [r3, #0]
 800c0fe:	e002      	b.n	800c106 <_printf_i+0x1ca>
 800c100:	0670      	lsls	r0, r6, #25
 800c102:	d5fb      	bpl.n	800c0fc <_printf_i+0x1c0>
 800c104:	8019      	strh	r1, [r3, #0]
 800c106:	2300      	movs	r3, #0
 800c108:	6123      	str	r3, [r4, #16]
 800c10a:	4615      	mov	r5, r2
 800c10c:	e7bc      	b.n	800c088 <_printf_i+0x14c>
 800c10e:	682b      	ldr	r3, [r5, #0]
 800c110:	1d1a      	adds	r2, r3, #4
 800c112:	602a      	str	r2, [r5, #0]
 800c114:	681d      	ldr	r5, [r3, #0]
 800c116:	6862      	ldr	r2, [r4, #4]
 800c118:	2100      	movs	r1, #0
 800c11a:	4628      	mov	r0, r5
 800c11c:	f7f4 f830 	bl	8000180 <memchr>
 800c120:	b108      	cbz	r0, 800c126 <_printf_i+0x1ea>
 800c122:	1b40      	subs	r0, r0, r5
 800c124:	6060      	str	r0, [r4, #4]
 800c126:	6863      	ldr	r3, [r4, #4]
 800c128:	6123      	str	r3, [r4, #16]
 800c12a:	2300      	movs	r3, #0
 800c12c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c130:	e7aa      	b.n	800c088 <_printf_i+0x14c>
 800c132:	6923      	ldr	r3, [r4, #16]
 800c134:	462a      	mov	r2, r5
 800c136:	4649      	mov	r1, r9
 800c138:	4640      	mov	r0, r8
 800c13a:	47d0      	blx	sl
 800c13c:	3001      	adds	r0, #1
 800c13e:	d0ad      	beq.n	800c09c <_printf_i+0x160>
 800c140:	6823      	ldr	r3, [r4, #0]
 800c142:	079b      	lsls	r3, r3, #30
 800c144:	d413      	bmi.n	800c16e <_printf_i+0x232>
 800c146:	68e0      	ldr	r0, [r4, #12]
 800c148:	9b03      	ldr	r3, [sp, #12]
 800c14a:	4298      	cmp	r0, r3
 800c14c:	bfb8      	it	lt
 800c14e:	4618      	movlt	r0, r3
 800c150:	e7a6      	b.n	800c0a0 <_printf_i+0x164>
 800c152:	2301      	movs	r3, #1
 800c154:	4632      	mov	r2, r6
 800c156:	4649      	mov	r1, r9
 800c158:	4640      	mov	r0, r8
 800c15a:	47d0      	blx	sl
 800c15c:	3001      	adds	r0, #1
 800c15e:	d09d      	beq.n	800c09c <_printf_i+0x160>
 800c160:	3501      	adds	r5, #1
 800c162:	68e3      	ldr	r3, [r4, #12]
 800c164:	9903      	ldr	r1, [sp, #12]
 800c166:	1a5b      	subs	r3, r3, r1
 800c168:	42ab      	cmp	r3, r5
 800c16a:	dcf2      	bgt.n	800c152 <_printf_i+0x216>
 800c16c:	e7eb      	b.n	800c146 <_printf_i+0x20a>
 800c16e:	2500      	movs	r5, #0
 800c170:	f104 0619 	add.w	r6, r4, #25
 800c174:	e7f5      	b.n	800c162 <_printf_i+0x226>
 800c176:	bf00      	nop
 800c178:	0800cd61 	.word	0x0800cd61
 800c17c:	0800cd72 	.word	0x0800cd72

0800c180 <__malloc_lock>:
 800c180:	4801      	ldr	r0, [pc, #4]	; (800c188 <__malloc_lock+0x8>)
 800c182:	f7ff bc65 	b.w	800ba50 <__retarget_lock_acquire_recursive>
 800c186:	bf00      	nop
 800c188:	20000c20 	.word	0x20000c20

0800c18c <__malloc_unlock>:
 800c18c:	4801      	ldr	r0, [pc, #4]	; (800c194 <__malloc_unlock+0x8>)
 800c18e:	f7ff bc60 	b.w	800ba52 <__retarget_lock_release_recursive>
 800c192:	bf00      	nop
 800c194:	20000c20 	.word	0x20000c20

0800c198 <_realloc_r>:
 800c198:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c19c:	4680      	mov	r8, r0
 800c19e:	4614      	mov	r4, r2
 800c1a0:	460e      	mov	r6, r1
 800c1a2:	b921      	cbnz	r1, 800c1ae <_realloc_r+0x16>
 800c1a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c1a8:	4611      	mov	r1, r2
 800c1aa:	f7ff bdd9 	b.w	800bd60 <_malloc_r>
 800c1ae:	b92a      	cbnz	r2, 800c1bc <_realloc_r+0x24>
 800c1b0:	f000 f84c 	bl	800c24c <_free_r>
 800c1b4:	4625      	mov	r5, r4
 800c1b6:	4628      	mov	r0, r5
 800c1b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c1bc:	f000 f890 	bl	800c2e0 <_malloc_usable_size_r>
 800c1c0:	4284      	cmp	r4, r0
 800c1c2:	4607      	mov	r7, r0
 800c1c4:	d802      	bhi.n	800c1cc <_realloc_r+0x34>
 800c1c6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c1ca:	d812      	bhi.n	800c1f2 <_realloc_r+0x5a>
 800c1cc:	4621      	mov	r1, r4
 800c1ce:	4640      	mov	r0, r8
 800c1d0:	f7ff fdc6 	bl	800bd60 <_malloc_r>
 800c1d4:	4605      	mov	r5, r0
 800c1d6:	2800      	cmp	r0, #0
 800c1d8:	d0ed      	beq.n	800c1b6 <_realloc_r+0x1e>
 800c1da:	42bc      	cmp	r4, r7
 800c1dc:	4622      	mov	r2, r4
 800c1de:	4631      	mov	r1, r6
 800c1e0:	bf28      	it	cs
 800c1e2:	463a      	movcs	r2, r7
 800c1e4:	f7ff fc36 	bl	800ba54 <memcpy>
 800c1e8:	4631      	mov	r1, r6
 800c1ea:	4640      	mov	r0, r8
 800c1ec:	f000 f82e 	bl	800c24c <_free_r>
 800c1f0:	e7e1      	b.n	800c1b6 <_realloc_r+0x1e>
 800c1f2:	4635      	mov	r5, r6
 800c1f4:	e7df      	b.n	800c1b6 <_realloc_r+0x1e>

0800c1f6 <memmove>:
 800c1f6:	4288      	cmp	r0, r1
 800c1f8:	b510      	push	{r4, lr}
 800c1fa:	eb01 0402 	add.w	r4, r1, r2
 800c1fe:	d902      	bls.n	800c206 <memmove+0x10>
 800c200:	4284      	cmp	r4, r0
 800c202:	4623      	mov	r3, r4
 800c204:	d807      	bhi.n	800c216 <memmove+0x20>
 800c206:	1e43      	subs	r3, r0, #1
 800c208:	42a1      	cmp	r1, r4
 800c20a:	d008      	beq.n	800c21e <memmove+0x28>
 800c20c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c210:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c214:	e7f8      	b.n	800c208 <memmove+0x12>
 800c216:	4402      	add	r2, r0
 800c218:	4601      	mov	r1, r0
 800c21a:	428a      	cmp	r2, r1
 800c21c:	d100      	bne.n	800c220 <memmove+0x2a>
 800c21e:	bd10      	pop	{r4, pc}
 800c220:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c224:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c228:	e7f7      	b.n	800c21a <memmove+0x24>
	...

0800c22c <_sbrk_r>:
 800c22c:	b538      	push	{r3, r4, r5, lr}
 800c22e:	4d06      	ldr	r5, [pc, #24]	; (800c248 <_sbrk_r+0x1c>)
 800c230:	2300      	movs	r3, #0
 800c232:	4604      	mov	r4, r0
 800c234:	4608      	mov	r0, r1
 800c236:	602b      	str	r3, [r5, #0]
 800c238:	f7f6 ff36 	bl	80030a8 <_sbrk>
 800c23c:	1c43      	adds	r3, r0, #1
 800c23e:	d102      	bne.n	800c246 <_sbrk_r+0x1a>
 800c240:	682b      	ldr	r3, [r5, #0]
 800c242:	b103      	cbz	r3, 800c246 <_sbrk_r+0x1a>
 800c244:	6023      	str	r3, [r4, #0]
 800c246:	bd38      	pop	{r3, r4, r5, pc}
 800c248:	20000c2c 	.word	0x20000c2c

0800c24c <_free_r>:
 800c24c:	b538      	push	{r3, r4, r5, lr}
 800c24e:	4605      	mov	r5, r0
 800c250:	2900      	cmp	r1, #0
 800c252:	d041      	beq.n	800c2d8 <_free_r+0x8c>
 800c254:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c258:	1f0c      	subs	r4, r1, #4
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	bfb8      	it	lt
 800c25e:	18e4      	addlt	r4, r4, r3
 800c260:	f7ff ff8e 	bl	800c180 <__malloc_lock>
 800c264:	4a1d      	ldr	r2, [pc, #116]	; (800c2dc <_free_r+0x90>)
 800c266:	6813      	ldr	r3, [r2, #0]
 800c268:	b933      	cbnz	r3, 800c278 <_free_r+0x2c>
 800c26a:	6063      	str	r3, [r4, #4]
 800c26c:	6014      	str	r4, [r2, #0]
 800c26e:	4628      	mov	r0, r5
 800c270:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c274:	f7ff bf8a 	b.w	800c18c <__malloc_unlock>
 800c278:	42a3      	cmp	r3, r4
 800c27a:	d908      	bls.n	800c28e <_free_r+0x42>
 800c27c:	6820      	ldr	r0, [r4, #0]
 800c27e:	1821      	adds	r1, r4, r0
 800c280:	428b      	cmp	r3, r1
 800c282:	bf01      	itttt	eq
 800c284:	6819      	ldreq	r1, [r3, #0]
 800c286:	685b      	ldreq	r3, [r3, #4]
 800c288:	1809      	addeq	r1, r1, r0
 800c28a:	6021      	streq	r1, [r4, #0]
 800c28c:	e7ed      	b.n	800c26a <_free_r+0x1e>
 800c28e:	461a      	mov	r2, r3
 800c290:	685b      	ldr	r3, [r3, #4]
 800c292:	b10b      	cbz	r3, 800c298 <_free_r+0x4c>
 800c294:	42a3      	cmp	r3, r4
 800c296:	d9fa      	bls.n	800c28e <_free_r+0x42>
 800c298:	6811      	ldr	r1, [r2, #0]
 800c29a:	1850      	adds	r0, r2, r1
 800c29c:	42a0      	cmp	r0, r4
 800c29e:	d10b      	bne.n	800c2b8 <_free_r+0x6c>
 800c2a0:	6820      	ldr	r0, [r4, #0]
 800c2a2:	4401      	add	r1, r0
 800c2a4:	1850      	adds	r0, r2, r1
 800c2a6:	4283      	cmp	r3, r0
 800c2a8:	6011      	str	r1, [r2, #0]
 800c2aa:	d1e0      	bne.n	800c26e <_free_r+0x22>
 800c2ac:	6818      	ldr	r0, [r3, #0]
 800c2ae:	685b      	ldr	r3, [r3, #4]
 800c2b0:	6053      	str	r3, [r2, #4]
 800c2b2:	4408      	add	r0, r1
 800c2b4:	6010      	str	r0, [r2, #0]
 800c2b6:	e7da      	b.n	800c26e <_free_r+0x22>
 800c2b8:	d902      	bls.n	800c2c0 <_free_r+0x74>
 800c2ba:	230c      	movs	r3, #12
 800c2bc:	602b      	str	r3, [r5, #0]
 800c2be:	e7d6      	b.n	800c26e <_free_r+0x22>
 800c2c0:	6820      	ldr	r0, [r4, #0]
 800c2c2:	1821      	adds	r1, r4, r0
 800c2c4:	428b      	cmp	r3, r1
 800c2c6:	bf04      	itt	eq
 800c2c8:	6819      	ldreq	r1, [r3, #0]
 800c2ca:	685b      	ldreq	r3, [r3, #4]
 800c2cc:	6063      	str	r3, [r4, #4]
 800c2ce:	bf04      	itt	eq
 800c2d0:	1809      	addeq	r1, r1, r0
 800c2d2:	6021      	streq	r1, [r4, #0]
 800c2d4:	6054      	str	r4, [r2, #4]
 800c2d6:	e7ca      	b.n	800c26e <_free_r+0x22>
 800c2d8:	bd38      	pop	{r3, r4, r5, pc}
 800c2da:	bf00      	nop
 800c2dc:	20000c24 	.word	0x20000c24

0800c2e0 <_malloc_usable_size_r>:
 800c2e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c2e4:	1f18      	subs	r0, r3, #4
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	bfbc      	itt	lt
 800c2ea:	580b      	ldrlt	r3, [r1, r0]
 800c2ec:	18c0      	addlt	r0, r0, r3
 800c2ee:	4770      	bx	lr

0800c2f0 <_init>:
 800c2f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2f2:	bf00      	nop
 800c2f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c2f6:	bc08      	pop	{r3}
 800c2f8:	469e      	mov	lr, r3
 800c2fa:	4770      	bx	lr

0800c2fc <_fini>:
 800c2fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2fe:	bf00      	nop
 800c300:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c302:	bc08      	pop	{r3}
 800c304:	469e      	mov	lr, r3
 800c306:	4770      	bx	lr
