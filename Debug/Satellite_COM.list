
Satellite_COM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c230  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000aa4  0800c370  0800c370  0001c370  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ce14  0800ce14  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  0800ce14  0800ce14  0001ce14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ce1c  0800ce1c  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ce1c  0800ce1c  0001ce1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ce20  0800ce20  0001ce20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  0800ce24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000bd0  20000068  0800ce8c  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000c38  0800ce8c  00020c38  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020092  2**0
                  CONTENTS, READONLY
 13 .debug_info   000221bd  00000000  00000000  000200d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004ec5  00000000  00000000  00042292  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001f40  00000000  00000000  00047158  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000017dd  00000000  00000000  00049098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002251e  00000000  00000000  0004a875  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00023344  00000000  00000000  0006cd93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c46f9  00000000  00000000  000900d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000085a0  00000000  00000000  001547d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  0015cd70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000068 	.word	0x20000068
 800015c:	00000000 	.word	0x00000000
 8000160:	0800c358 	.word	0x0800c358

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000006c 	.word	0x2000006c
 800017c:	0800c358 	.word	0x0800c358

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000230:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000234:	f000 b970 	b.w	8000518 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9e08      	ldr	r6, [sp, #32]
 8000256:	460d      	mov	r5, r1
 8000258:	4604      	mov	r4, r0
 800025a:	460f      	mov	r7, r1
 800025c:	2b00      	cmp	r3, #0
 800025e:	d14a      	bne.n	80002f6 <__udivmoddi4+0xa6>
 8000260:	428a      	cmp	r2, r1
 8000262:	4694      	mov	ip, r2
 8000264:	d965      	bls.n	8000332 <__udivmoddi4+0xe2>
 8000266:	fab2 f382 	clz	r3, r2
 800026a:	b143      	cbz	r3, 800027e <__udivmoddi4+0x2e>
 800026c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000270:	f1c3 0220 	rsb	r2, r3, #32
 8000274:	409f      	lsls	r7, r3
 8000276:	fa20 f202 	lsr.w	r2, r0, r2
 800027a:	4317      	orrs	r7, r2
 800027c:	409c      	lsls	r4, r3
 800027e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000282:	fa1f f58c 	uxth.w	r5, ip
 8000286:	fbb7 f1fe 	udiv	r1, r7, lr
 800028a:	0c22      	lsrs	r2, r4, #16
 800028c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000290:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000294:	fb01 f005 	mul.w	r0, r1, r5
 8000298:	4290      	cmp	r0, r2
 800029a:	d90a      	bls.n	80002b2 <__udivmoddi4+0x62>
 800029c:	eb1c 0202 	adds.w	r2, ip, r2
 80002a0:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 80002a4:	f080 811b 	bcs.w	80004de <__udivmoddi4+0x28e>
 80002a8:	4290      	cmp	r0, r2
 80002aa:	f240 8118 	bls.w	80004de <__udivmoddi4+0x28e>
 80002ae:	3902      	subs	r1, #2
 80002b0:	4462      	add	r2, ip
 80002b2:	1a12      	subs	r2, r2, r0
 80002b4:	b2a4      	uxth	r4, r4
 80002b6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002ba:	fb0e 2210 	mls	r2, lr, r0, r2
 80002be:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002c2:	fb00 f505 	mul.w	r5, r0, r5
 80002c6:	42a5      	cmp	r5, r4
 80002c8:	d90a      	bls.n	80002e0 <__udivmoddi4+0x90>
 80002ca:	eb1c 0404 	adds.w	r4, ip, r4
 80002ce:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002d2:	f080 8106 	bcs.w	80004e2 <__udivmoddi4+0x292>
 80002d6:	42a5      	cmp	r5, r4
 80002d8:	f240 8103 	bls.w	80004e2 <__udivmoddi4+0x292>
 80002dc:	4464      	add	r4, ip
 80002de:	3802      	subs	r0, #2
 80002e0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002e4:	1b64      	subs	r4, r4, r5
 80002e6:	2100      	movs	r1, #0
 80002e8:	b11e      	cbz	r6, 80002f2 <__udivmoddi4+0xa2>
 80002ea:	40dc      	lsrs	r4, r3
 80002ec:	2300      	movs	r3, #0
 80002ee:	e9c6 4300 	strd	r4, r3, [r6]
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d908      	bls.n	800030c <__udivmoddi4+0xbc>
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	f000 80ec 	beq.w	80004d8 <__udivmoddi4+0x288>
 8000300:	2100      	movs	r1, #0
 8000302:	e9c6 0500 	strd	r0, r5, [r6]
 8000306:	4608      	mov	r0, r1
 8000308:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030c:	fab3 f183 	clz	r1, r3
 8000310:	2900      	cmp	r1, #0
 8000312:	d149      	bne.n	80003a8 <__udivmoddi4+0x158>
 8000314:	42ab      	cmp	r3, r5
 8000316:	d302      	bcc.n	800031e <__udivmoddi4+0xce>
 8000318:	4282      	cmp	r2, r0
 800031a:	f200 80f7 	bhi.w	800050c <__udivmoddi4+0x2bc>
 800031e:	1a84      	subs	r4, r0, r2
 8000320:	eb65 0203 	sbc.w	r2, r5, r3
 8000324:	2001      	movs	r0, #1
 8000326:	4617      	mov	r7, r2
 8000328:	2e00      	cmp	r6, #0
 800032a:	d0e2      	beq.n	80002f2 <__udivmoddi4+0xa2>
 800032c:	e9c6 4700 	strd	r4, r7, [r6]
 8000330:	e7df      	b.n	80002f2 <__udivmoddi4+0xa2>
 8000332:	b902      	cbnz	r2, 8000336 <__udivmoddi4+0xe6>
 8000334:	deff      	udf	#255	; 0xff
 8000336:	fab2 f382 	clz	r3, r2
 800033a:	2b00      	cmp	r3, #0
 800033c:	f040 808f 	bne.w	800045e <__udivmoddi4+0x20e>
 8000340:	1a8a      	subs	r2, r1, r2
 8000342:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000346:	fa1f fe8c 	uxth.w	lr, ip
 800034a:	2101      	movs	r1, #1
 800034c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000350:	fb07 2015 	mls	r0, r7, r5, r2
 8000354:	0c22      	lsrs	r2, r4, #16
 8000356:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800035a:	fb0e f005 	mul.w	r0, lr, r5
 800035e:	4290      	cmp	r0, r2
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x124>
 8000362:	eb1c 0202 	adds.w	r2, ip, r2
 8000366:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x122>
 800036c:	4290      	cmp	r0, r2
 800036e:	f200 80ca 	bhi.w	8000506 <__udivmoddi4+0x2b6>
 8000372:	4645      	mov	r5, r8
 8000374:	1a12      	subs	r2, r2, r0
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb2 f0f7 	udiv	r0, r2, r7
 800037c:	fb07 2210 	mls	r2, r7, r0, r2
 8000380:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000384:	fb0e fe00 	mul.w	lr, lr, r0
 8000388:	45a6      	cmp	lr, r4
 800038a:	d908      	bls.n	800039e <__udivmoddi4+0x14e>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000394:	d202      	bcs.n	800039c <__udivmoddi4+0x14c>
 8000396:	45a6      	cmp	lr, r4
 8000398:	f200 80ba 	bhi.w	8000510 <__udivmoddi4+0x2c0>
 800039c:	4610      	mov	r0, r2
 800039e:	eba4 040e 	sub.w	r4, r4, lr
 80003a2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003a6:	e79f      	b.n	80002e8 <__udivmoddi4+0x98>
 80003a8:	f1c1 0720 	rsb	r7, r1, #32
 80003ac:	408b      	lsls	r3, r1
 80003ae:	fa22 fc07 	lsr.w	ip, r2, r7
 80003b2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003b6:	fa05 f401 	lsl.w	r4, r5, r1
 80003ba:	fa20 f307 	lsr.w	r3, r0, r7
 80003be:	40fd      	lsrs	r5, r7
 80003c0:	4323      	orrs	r3, r4
 80003c2:	fa00 f901 	lsl.w	r9, r0, r1
 80003c6:	ea4f 401c 	mov.w	r0, ip, lsr #16
 80003ca:	fa1f fe8c 	uxth.w	lr, ip
 80003ce:	fbb5 f8f0 	udiv	r8, r5, r0
 80003d2:	0c1c      	lsrs	r4, r3, #16
 80003d4:	fb00 5518 	mls	r5, r0, r8, r5
 80003d8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003dc:	fb08 f50e 	mul.w	r5, r8, lr
 80003e0:	42a5      	cmp	r5, r4
 80003e2:	fa02 f201 	lsl.w	r2, r2, r1
 80003e6:	d90b      	bls.n	8000400 <__udivmoddi4+0x1b0>
 80003e8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ec:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003f0:	f080 8087 	bcs.w	8000502 <__udivmoddi4+0x2b2>
 80003f4:	42a5      	cmp	r5, r4
 80003f6:	f240 8084 	bls.w	8000502 <__udivmoddi4+0x2b2>
 80003fa:	f1a8 0802 	sub.w	r8, r8, #2
 80003fe:	4464      	add	r4, ip
 8000400:	1b64      	subs	r4, r4, r5
 8000402:	b29d      	uxth	r5, r3
 8000404:	fbb4 f3f0 	udiv	r3, r4, r0
 8000408:	fb00 4413 	mls	r4, r0, r3, r4
 800040c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000410:	fb03 fe0e 	mul.w	lr, r3, lr
 8000414:	45a6      	cmp	lr, r4
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x1da>
 8000418:	eb1c 0404 	adds.w	r4, ip, r4
 800041c:	f103 30ff 	add.w	r0, r3, #4294967295	; 0xffffffff
 8000420:	d26b      	bcs.n	80004fa <__udivmoddi4+0x2aa>
 8000422:	45a6      	cmp	lr, r4
 8000424:	d969      	bls.n	80004fa <__udivmoddi4+0x2aa>
 8000426:	3b02      	subs	r3, #2
 8000428:	4464      	add	r4, ip
 800042a:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 800042e:	fba0 8302 	umull	r8, r3, r0, r2
 8000432:	eba4 040e 	sub.w	r4, r4, lr
 8000436:	429c      	cmp	r4, r3
 8000438:	46c6      	mov	lr, r8
 800043a:	461d      	mov	r5, r3
 800043c:	d355      	bcc.n	80004ea <__udivmoddi4+0x29a>
 800043e:	d052      	beq.n	80004e6 <__udivmoddi4+0x296>
 8000440:	b156      	cbz	r6, 8000458 <__udivmoddi4+0x208>
 8000442:	ebb9 030e 	subs.w	r3, r9, lr
 8000446:	eb64 0405 	sbc.w	r4, r4, r5
 800044a:	fa04 f707 	lsl.w	r7, r4, r7
 800044e:	40cb      	lsrs	r3, r1
 8000450:	40cc      	lsrs	r4, r1
 8000452:	431f      	orrs	r7, r3
 8000454:	e9c6 7400 	strd	r7, r4, [r6]
 8000458:	2100      	movs	r1, #0
 800045a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045e:	f1c3 0120 	rsb	r1, r3, #32
 8000462:	fa02 fc03 	lsl.w	ip, r2, r3
 8000466:	fa20 f201 	lsr.w	r2, r0, r1
 800046a:	fa25 f101 	lsr.w	r1, r5, r1
 800046e:	409d      	lsls	r5, r3
 8000470:	432a      	orrs	r2, r5
 8000472:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000476:	fa1f fe8c 	uxth.w	lr, ip
 800047a:	fbb1 f0f7 	udiv	r0, r1, r7
 800047e:	fb07 1510 	mls	r5, r7, r0, r1
 8000482:	0c11      	lsrs	r1, r2, #16
 8000484:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000488:	fb00 f50e 	mul.w	r5, r0, lr
 800048c:	428d      	cmp	r5, r1
 800048e:	fa04 f403 	lsl.w	r4, r4, r3
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x256>
 8000494:	eb1c 0101 	adds.w	r1, ip, r1
 8000498:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800049c:	d22f      	bcs.n	80004fe <__udivmoddi4+0x2ae>
 800049e:	428d      	cmp	r5, r1
 80004a0:	d92d      	bls.n	80004fe <__udivmoddi4+0x2ae>
 80004a2:	3802      	subs	r0, #2
 80004a4:	4461      	add	r1, ip
 80004a6:	1b49      	subs	r1, r1, r5
 80004a8:	b292      	uxth	r2, r2
 80004aa:	fbb1 f5f7 	udiv	r5, r1, r7
 80004ae:	fb07 1115 	mls	r1, r7, r5, r1
 80004b2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b6:	fb05 f10e 	mul.w	r1, r5, lr
 80004ba:	4291      	cmp	r1, r2
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x280>
 80004be:	eb1c 0202 	adds.w	r2, ip, r2
 80004c2:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004c6:	d216      	bcs.n	80004f6 <__udivmoddi4+0x2a6>
 80004c8:	4291      	cmp	r1, r2
 80004ca:	d914      	bls.n	80004f6 <__udivmoddi4+0x2a6>
 80004cc:	3d02      	subs	r5, #2
 80004ce:	4462      	add	r2, ip
 80004d0:	1a52      	subs	r2, r2, r1
 80004d2:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d6:	e739      	b.n	800034c <__udivmoddi4+0xfc>
 80004d8:	4631      	mov	r1, r6
 80004da:	4630      	mov	r0, r6
 80004dc:	e709      	b.n	80002f2 <__udivmoddi4+0xa2>
 80004de:	4639      	mov	r1, r7
 80004e0:	e6e7      	b.n	80002b2 <__udivmoddi4+0x62>
 80004e2:	4610      	mov	r0, r2
 80004e4:	e6fc      	b.n	80002e0 <__udivmoddi4+0x90>
 80004e6:	45c1      	cmp	r9, r8
 80004e8:	d2aa      	bcs.n	8000440 <__udivmoddi4+0x1f0>
 80004ea:	ebb8 0e02 	subs.w	lr, r8, r2
 80004ee:	eb63 050c 	sbc.w	r5, r3, ip
 80004f2:	3801      	subs	r0, #1
 80004f4:	e7a4      	b.n	8000440 <__udivmoddi4+0x1f0>
 80004f6:	4645      	mov	r5, r8
 80004f8:	e7ea      	b.n	80004d0 <__udivmoddi4+0x280>
 80004fa:	4603      	mov	r3, r0
 80004fc:	e795      	b.n	800042a <__udivmoddi4+0x1da>
 80004fe:	4640      	mov	r0, r8
 8000500:	e7d1      	b.n	80004a6 <__udivmoddi4+0x256>
 8000502:	46d0      	mov	r8, sl
 8000504:	e77c      	b.n	8000400 <__udivmoddi4+0x1b0>
 8000506:	3d02      	subs	r5, #2
 8000508:	4462      	add	r2, ip
 800050a:	e733      	b.n	8000374 <__udivmoddi4+0x124>
 800050c:	4608      	mov	r0, r1
 800050e:	e70b      	b.n	8000328 <__udivmoddi4+0xd8>
 8000510:	4464      	add	r4, ip
 8000512:	3802      	subs	r0, #2
 8000514:	e743      	b.n	800039e <__udivmoddi4+0x14e>
 8000516:	bf00      	nop

08000518 <__aeabi_idiv0>:
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop

0800051c <updatePacket>:
uint8_t ax_buffer[150] = { 0 };
uint8_t ax_buff_stuffed[150] = { 0 };

uint8_t info_packet[INFO_LENGTH];

void updatePacket(uint8_t *OBC_Rx_buffer) {
 800051c:	b480      	push	{r7}
 800051e:	b087      	sub	sp, #28
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
	info_packet[0] = OBC_Rx_buffer[1];  	// Packet Type
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	785a      	ldrb	r2, [r3, #1]
 8000528:	4b14      	ldr	r3, [pc, #80]	; (800057c <updatePacket+0x60>)
 800052a:	701a      	strb	r2, [r3, #0]
	int j = 1;
 800052c:	2301      	movs	r3, #1
 800052e:	617b      	str	r3, [r7, #20]
	int k = 3;
 8000530:	2303      	movs	r3, #3
 8000532:	613b      	str	r3, [r7, #16]
	int len_of_payload = OBC_Rx_buffer[2];  // length of info_field
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	3302      	adds	r3, #2
 8000538:	781b      	ldrb	r3, [r3, #0]
 800053a:	60bb      	str	r3, [r7, #8]
//	myDebug("\nlen_of_payload: %d\r\n", len_of_payload);
	for (int i = 0; i < len_of_payload; i++) {
 800053c:	2300      	movs	r3, #0
 800053e:	60fb      	str	r3, [r7, #12]
 8000540:	e011      	b.n	8000566 <updatePacket+0x4a>
		info_packet[j] = OBC_Rx_buffer[k];
 8000542:	693b      	ldr	r3, [r7, #16]
 8000544:	687a      	ldr	r2, [r7, #4]
 8000546:	4413      	add	r3, r2
 8000548:	7819      	ldrb	r1, [r3, #0]
 800054a:	4a0c      	ldr	r2, [pc, #48]	; (800057c <updatePacket+0x60>)
 800054c:	697b      	ldr	r3, [r7, #20]
 800054e:	4413      	add	r3, r2
 8000550:	460a      	mov	r2, r1
 8000552:	701a      	strb	r2, [r3, #0]
		j++;
 8000554:	697b      	ldr	r3, [r7, #20]
 8000556:	3301      	adds	r3, #1
 8000558:	617b      	str	r3, [r7, #20]
		k++;
 800055a:	693b      	ldr	r3, [r7, #16]
 800055c:	3301      	adds	r3, #1
 800055e:	613b      	str	r3, [r7, #16]
	for (int i = 0; i < len_of_payload; i++) {
 8000560:	68fb      	ldr	r3, [r7, #12]
 8000562:	3301      	adds	r3, #1
 8000564:	60fb      	str	r3, [r7, #12]
 8000566:	68fa      	ldr	r2, [r7, #12]
 8000568:	68bb      	ldr	r3, [r7, #8]
 800056a:	429a      	cmp	r2, r3
 800056c:	dbe9      	blt.n	8000542 <updatePacket+0x26>
//	myDebug("info_packet: 0x%x\r\n", info_packet);
//	for (int i = 0; i < len_of_payload; i++) {
//		myDebug("%02x ", info_packet[i]);
//	}
//	myDebug("\r\n");
}
 800056e:	bf00      	nop
 8000570:	bf00      	nop
 8000572:	371c      	adds	r7, #28
 8000574:	46bd      	mov	sp, r7
 8000576:	bc80      	pop	{r7}
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop
 800057c:	200001b4 	.word	0x200001b4

08000580 <getHDLCPacket>:

void getHDLCPacket(uint8_t *data, uint8_t data_len) {
 8000580:	b580      	push	{r7, lr}
 8000582:	b086      	sub	sp, #24
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
 8000588:	460b      	mov	r3, r1
 800058a:	70fb      	strb	r3, [r7, #3]
//	for (int j = 0; j < data_len; j++) {
//		myDebug("%02x ", data[j]);
//	}
//	myDebug("\r\n");

	uint16_t crc = 0;
 800058c:	2300      	movs	r3, #0
 800058e:	81fb      	strh	r3, [r7, #14]
	crc = calculateCRC_CCITT_AX25(data, data_len);
 8000590:	78fb      	ldrb	r3, [r7, #3]
 8000592:	4619      	mov	r1, r3
 8000594:	6878      	ldr	r0, [r7, #4]
 8000596:	f000 f97d 	bl	8000894 <calculateCRC_CCITT_AX25>
 800059a:	4603      	mov	r3, r0
 800059c:	81fb      	strh	r3, [r7, #14]

	temp_tx_buffer[0] = 0x7e;
 800059e:	4b22      	ldr	r3, [pc, #136]	; (8000628 <getHDLCPacket+0xa8>)
 80005a0:	227e      	movs	r2, #126	; 0x7e
 80005a2:	701a      	strb	r2, [r3, #0]

	int i = 1;
 80005a4:	2301      	movs	r3, #1
 80005a6:	617b      	str	r3, [r7, #20]
	for (int k = 0; k < data_len; k++) {
 80005a8:	2300      	movs	r3, #0
 80005aa:	613b      	str	r3, [r7, #16]
 80005ac:	e00e      	b.n	80005cc <getHDLCPacket+0x4c>
		temp_tx_buffer[i] = data[k];
 80005ae:	693b      	ldr	r3, [r7, #16]
 80005b0:	687a      	ldr	r2, [r7, #4]
 80005b2:	4413      	add	r3, r2
 80005b4:	7819      	ldrb	r1, [r3, #0]
 80005b6:	4a1c      	ldr	r2, [pc, #112]	; (8000628 <getHDLCPacket+0xa8>)
 80005b8:	697b      	ldr	r3, [r7, #20]
 80005ba:	4413      	add	r3, r2
 80005bc:	460a      	mov	r2, r1
 80005be:	701a      	strb	r2, [r3, #0]
		i++;
 80005c0:	697b      	ldr	r3, [r7, #20]
 80005c2:	3301      	adds	r3, #1
 80005c4:	617b      	str	r3, [r7, #20]
	for (int k = 0; k < data_len; k++) {
 80005c6:	693b      	ldr	r3, [r7, #16]
 80005c8:	3301      	adds	r3, #1
 80005ca:	613b      	str	r3, [r7, #16]
 80005cc:	78fb      	ldrb	r3, [r7, #3]
 80005ce:	693a      	ldr	r2, [r7, #16]
 80005d0:	429a      	cmp	r2, r3
 80005d2:	dbec      	blt.n	80005ae <getHDLCPacket+0x2e>
	}

	// Store CRC result in the packet array
	temp_tx_buffer[i] = (crc >> 8) & 0xFF; // Most significant byte
 80005d4:	89fb      	ldrh	r3, [r7, #14]
 80005d6:	0a1b      	lsrs	r3, r3, #8
 80005d8:	b29b      	uxth	r3, r3
 80005da:	b2d9      	uxtb	r1, r3
 80005dc:	4a12      	ldr	r2, [pc, #72]	; (8000628 <getHDLCPacket+0xa8>)
 80005de:	697b      	ldr	r3, [r7, #20]
 80005e0:	4413      	add	r3, r2
 80005e2:	460a      	mov	r2, r1
 80005e4:	701a      	strb	r2, [r3, #0]
	i++;
 80005e6:	697b      	ldr	r3, [r7, #20]
 80005e8:	3301      	adds	r3, #1
 80005ea:	617b      	str	r3, [r7, #20]
	temp_tx_buffer[i] = crc & 0xFF;        // Least significant byte
 80005ec:	89fb      	ldrh	r3, [r7, #14]
 80005ee:	b2d9      	uxtb	r1, r3
 80005f0:	4a0d      	ldr	r2, [pc, #52]	; (8000628 <getHDLCPacket+0xa8>)
 80005f2:	697b      	ldr	r3, [r7, #20]
 80005f4:	4413      	add	r3, r2
 80005f6:	460a      	mov	r2, r1
 80005f8:	701a      	strb	r2, [r3, #0]
	i++;
 80005fa:	697b      	ldr	r3, [r7, #20]
 80005fc:	3301      	adds	r3, #1
 80005fe:	617b      	str	r3, [r7, #20]

	temp_tx_buffer[i] = 0x7e;
 8000600:	4a09      	ldr	r2, [pc, #36]	; (8000628 <getHDLCPacket+0xa8>)
 8000602:	697b      	ldr	r3, [r7, #20]
 8000604:	4413      	add	r3, r2
 8000606:	227e      	movs	r2, #126	; 0x7e
 8000608:	701a      	strb	r2, [r3, #0]
//	for (int j = 0; j < destuffed_size - 1; j++) {
//		myDebug("%02x ", tem[j]);
//	}
//	myDebug("\r\n");

	memset(ax_buffer, '\0', sizeof(ax_buffer));
 800060a:	2296      	movs	r2, #150	; 0x96
 800060c:	2100      	movs	r1, #0
 800060e:	4807      	ldr	r0, [pc, #28]	; (800062c <getHDLCPacket+0xac>)
 8000610:	f00b fa20 	bl	800ba54 <memset>
	memset(ax_buff_stuffed, '\0', sizeof(ax_buff_stuffed));
 8000614:	2296      	movs	r2, #150	; 0x96
 8000616:	2100      	movs	r1, #0
 8000618:	4805      	ldr	r0, [pc, #20]	; (8000630 <getHDLCPacket+0xb0>)
 800061a:	f00b fa1b 	bl	800ba54 <memset>

}
 800061e:	bf00      	nop
 8000620:	3718      	adds	r7, #24
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	20000374 	.word	0x20000374
 800062c:	20000084 	.word	0x20000084
 8000630:	2000011c 	.word	0x2000011c

08000634 <getAX25Packet>:

void getAX25Packet(uint8_t *OBC_data_Field, uint8_t size) {
 8000634:	b580      	push	{r7, lr}
 8000636:	b086      	sub	sp, #24
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
 800063c:	460b      	mov	r3, r1
 800063e:	70fb      	strb	r3, [r7, #3]

	updatePacket(OBC_data_Field);
 8000640:	6878      	ldr	r0, [r7, #4]
 8000642:	f7ff ff6b 	bl	800051c <updatePacket>

	//destination field   9N2SI -0
	ax_buffer[0] = 0x72; //	ASCII->9, HEX->0x39, 1 bit shifted->0b01110010, Shifted HEX->0x72
 8000646:	4b3a      	ldr	r3, [pc, #232]	; (8000730 <getAX25Packet+0xfc>)
 8000648:	2272      	movs	r2, #114	; 0x72
 800064a:	701a      	strb	r2, [r3, #0]
	ax_buffer[1] = 0x9C; //	ASCII->N, HEX->0x4E, 1 bit shifted->0b10011100, Shifted HEX->0x9C
 800064c:	4b38      	ldr	r3, [pc, #224]	; (8000730 <getAX25Packet+0xfc>)
 800064e:	229c      	movs	r2, #156	; 0x9c
 8000650:	705a      	strb	r2, [r3, #1]
	ax_buffer[2] = 0x64; //	ASCII->2, HEX->0x32, 1 bit shifted->0b01100100, Shifted HEX->0x64
 8000652:	4b37      	ldr	r3, [pc, #220]	; (8000730 <getAX25Packet+0xfc>)
 8000654:	2264      	movs	r2, #100	; 0x64
 8000656:	709a      	strb	r2, [r3, #2]
	ax_buffer[3] = 0xA6; //	ASCII->S, HEX->0x53, 1 bit shifted->0b10100110, Shifted HEX->0xA6
 8000658:	4b35      	ldr	r3, [pc, #212]	; (8000730 <getAX25Packet+0xfc>)
 800065a:	22a6      	movs	r2, #166	; 0xa6
 800065c:	70da      	strb	r2, [r3, #3]
	ax_buffer[4] = 0x64; //	ASCII->I, HEX->0x49, 1 bit shifted->0b10010010, Shifted HEX->0x92
 800065e:	4b34      	ldr	r3, [pc, #208]	; (8000730 <getAX25Packet+0xfc>)
 8000660:	2264      	movs	r2, #100	; 0x64
 8000662:	711a      	strb	r2, [r3, #4]
	ax_buffer[5] = 0x40; //	ASCII-> , HEX->0x20, 1 bit shifted->0b01000000, Shifted HEX->0x40
 8000664:	4b32      	ldr	r3, [pc, #200]	; (8000730 <getAX25Packet+0xfc>)
 8000666:	2240      	movs	r2, #64	; 0x40
 8000668:	715a      	strb	r2, [r3, #5]
	ax_buffer[6] = 0xE0; //	0b111SSID0, SSID->0000 and LSB is set to 0; if more addresses follow, HEX->0xE0
 800066a:	4b31      	ldr	r3, [pc, #196]	; (8000730 <getAX25Packet+0xfc>)
 800066c:	22e0      	movs	r2, #224	; 0xe0
 800066e:	719a      	strb	r2, [r3, #6]

	//source field   9N2SI -0
	ax_buffer[7] = 0x72; //	ASCII->9, HEX->0x39, 1 bit shifted->0b01110010, Shifted HEX->0x72
 8000670:	4b2f      	ldr	r3, [pc, #188]	; (8000730 <getAX25Packet+0xfc>)
 8000672:	2272      	movs	r2, #114	; 0x72
 8000674:	71da      	strb	r2, [r3, #7]
	ax_buffer[8] = 0x9C; //	ASCII->N, HEX->0x4E, 1 bit shifted->0b10011100, Shifted HEX->0x9C
 8000676:	4b2e      	ldr	r3, [pc, #184]	; (8000730 <getAX25Packet+0xfc>)
 8000678:	229c      	movs	r2, #156	; 0x9c
 800067a:	721a      	strb	r2, [r3, #8]
	ax_buffer[9] = 0x64; //	ASCII->2, HEX->0x32, 1 bit shifted->0b01100100, Shifted HEX->0x64
 800067c:	4b2c      	ldr	r3, [pc, #176]	; (8000730 <getAX25Packet+0xfc>)
 800067e:	2264      	movs	r2, #100	; 0x64
 8000680:	725a      	strb	r2, [r3, #9]
	ax_buffer[10] = 0xA6; //	ASCII->S, HEX->0x53, 1 bit shifted->0b10100110, Shifted HEX->0xA6
 8000682:	4b2b      	ldr	r3, [pc, #172]	; (8000730 <getAX25Packet+0xfc>)
 8000684:	22a6      	movs	r2, #166	; 0xa6
 8000686:	729a      	strb	r2, [r3, #10]
	ax_buffer[11] = 0x64; //	ASCII->I, HEX->0x49, 1 bit shifted->0b10010010, Shifted HEX->0x92
 8000688:	4b29      	ldr	r3, [pc, #164]	; (8000730 <getAX25Packet+0xfc>)
 800068a:	2264      	movs	r2, #100	; 0x64
 800068c:	72da      	strb	r2, [r3, #11]
	ax_buffer[12] = 0x40; //	ASCII-> , HEX->0x20, 1 bit shifted->0b01000000, Shifted HEX->0x40
 800068e:	4b28      	ldr	r3, [pc, #160]	; (8000730 <getAX25Packet+0xfc>)
 8000690:	2240      	movs	r2, #64	; 0x40
 8000692:	731a      	strb	r2, [r3, #12]
	ax_buffer[13] = 0x61; //	0b011SSID1, SSID->0000 and LSB is set to 1 if this is the last address, HEX->0x61
 8000694:	4b26      	ldr	r3, [pc, #152]	; (8000730 <getAX25Packet+0xfc>)
 8000696:	2261      	movs	r2, #97	; 0x61
 8000698:	735a      	strb	r2, [r3, #13]

	//control bit
	ax_buffer[14] = 0x03; //  Unnumbered Information Frame, AX.25 is always 0b00000011 i.e 0x03 in HEX
 800069a:	4b25      	ldr	r3, [pc, #148]	; (8000730 <getAX25Packet+0xfc>)
 800069c:	2203      	movs	r2, #3
 800069e:	739a      	strb	r2, [r3, #14]

	//protocol identifier
	ax_buffer[15] = 0xF0; //	No Layer-3 Implemented so, 0b11110000 i.e 0xF0 in HEX
 80006a0:	4b23      	ldr	r3, [pc, #140]	; (8000730 <getAX25Packet+0xfc>)
 80006a2:	22f0      	movs	r2, #240	; 0xf0
 80006a4:	73da      	strb	r2, [r3, #15]

	int i = 16;
 80006a6:	2310      	movs	r3, #16
 80006a8:	617b      	str	r3, [r7, #20]

	for (int k = 0; k < size; k++) {
 80006aa:	2300      	movs	r3, #0
 80006ac:	613b      	str	r3, [r7, #16]
 80006ae:	e00e      	b.n	80006ce <getAX25Packet+0x9a>
		ax_buffer[i] = info_packet[k];
 80006b0:	4a20      	ldr	r2, [pc, #128]	; (8000734 <getAX25Packet+0x100>)
 80006b2:	693b      	ldr	r3, [r7, #16]
 80006b4:	4413      	add	r3, r2
 80006b6:	7819      	ldrb	r1, [r3, #0]
 80006b8:	4a1d      	ldr	r2, [pc, #116]	; (8000730 <getAX25Packet+0xfc>)
 80006ba:	697b      	ldr	r3, [r7, #20]
 80006bc:	4413      	add	r3, r2
 80006be:	460a      	mov	r2, r1
 80006c0:	701a      	strb	r2, [r3, #0]
		i++;
 80006c2:	697b      	ldr	r3, [r7, #20]
 80006c4:	3301      	adds	r3, #1
 80006c6:	617b      	str	r3, [r7, #20]
	for (int k = 0; k < size; k++) {
 80006c8:	693b      	ldr	r3, [r7, #16]
 80006ca:	3301      	adds	r3, #1
 80006cc:	613b      	str	r3, [r7, #16]
 80006ce:	78fb      	ldrb	r3, [r7, #3]
 80006d0:	693a      	ldr	r2, [r7, #16]
 80006d2:	429a      	cmp	r2, r3
 80006d4:	dbec      	blt.n	80006b0 <getAX25Packet+0x7c>
	}

//	myDebug("Before Bit stuffing:");
	myDebug("\nReal Data, Length: %d", i);
 80006d6:	6979      	ldr	r1, [r7, #20]
 80006d8:	4817      	ldr	r0, [pc, #92]	; (8000738 <getAX25Packet+0x104>)
 80006da:	f000 f84f 	bl	800077c <myDebug>
	myDebug("\r\n");
 80006de:	4817      	ldr	r0, [pc, #92]	; (800073c <getAX25Packet+0x108>)
 80006e0:	f000 f84c 	bl	800077c <myDebug>
	for (int j = 0; j < i; j++) {
 80006e4:	2300      	movs	r3, #0
 80006e6:	60fb      	str	r3, [r7, #12]
 80006e8:	e00a      	b.n	8000700 <getAX25Packet+0xcc>
		myDebug("%02x ", ax_buffer[j]);
 80006ea:	4a11      	ldr	r2, [pc, #68]	; (8000730 <getAX25Packet+0xfc>)
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	4413      	add	r3, r2
 80006f0:	781b      	ldrb	r3, [r3, #0]
 80006f2:	4619      	mov	r1, r3
 80006f4:	4812      	ldr	r0, [pc, #72]	; (8000740 <getAX25Packet+0x10c>)
 80006f6:	f000 f841 	bl	800077c <myDebug>
	for (int j = 0; j < i; j++) {
 80006fa:	68fb      	ldr	r3, [r7, #12]
 80006fc:	3301      	adds	r3, #1
 80006fe:	60fb      	str	r3, [r7, #12]
 8000700:	68fa      	ldr	r2, [r7, #12]
 8000702:	697b      	ldr	r3, [r7, #20]
 8000704:	429a      	cmp	r2, r3
 8000706:	dbf0      	blt.n	80006ea <getAX25Packet+0xb6>
	}
	myDebug("\r\n");
 8000708:	480c      	ldr	r0, [pc, #48]	; (800073c <getAX25Packet+0x108>)
 800070a:	f000 f837 	bl	800077c <myDebug>

	// Bit Stuffing
	int stuffed_size = bit_stuffing(ax_buffer, ax_buff_stuffed, i);
 800070e:	697a      	ldr	r2, [r7, #20]
 8000710:	490c      	ldr	r1, [pc, #48]	; (8000744 <getAX25Packet+0x110>)
 8000712:	4807      	ldr	r0, [pc, #28]	; (8000730 <getAX25Packet+0xfc>)
 8000714:	f000 f8fd 	bl	8000912 <bit_stuffing>
 8000718:	60b8      	str	r0, [r7, #8]

	getHDLCPacket(ax_buff_stuffed, stuffed_size);
 800071a:	68bb      	ldr	r3, [r7, #8]
 800071c:	b2db      	uxtb	r3, r3
 800071e:	4619      	mov	r1, r3
 8000720:	4808      	ldr	r0, [pc, #32]	; (8000744 <getAX25Packet+0x110>)
 8000722:	f7ff ff2d 	bl	8000580 <getHDLCPacket>
}
 8000726:	bf00      	nop
 8000728:	3718      	adds	r7, #24
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	20000084 	.word	0x20000084
 8000734:	200001b4 	.word	0x200001b4
 8000738:	0800c370 	.word	0x0800c370
 800073c:	0800c388 	.word	0x0800c388
 8000740:	0800c38c 	.word	0x0800c38c
 8000744:	2000011c 	.word	0x2000011c

08000748 <delay_us>:
 *      Author: sajanduwal
 */

#include "com_debug.h"

void delay_us(uint32_t us) {
 8000748:	b480      	push	{r7}
 800074a:	b085      	sub	sp, #20
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
	uint32_t delay_counter_disp;
	__HAL_TIM_SET_COUNTER(&htim2, 0);  // set the counter value a 0
 8000750:	4b09      	ldr	r3, [pc, #36]	; (8000778 <delay_us+0x30>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	2200      	movs	r2, #0
 8000756:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim2) < us)
 8000758:	e002      	b.n	8000760 <delay_us+0x18>
		delay_counter_disp++;
 800075a:	68fb      	ldr	r3, [r7, #12]
 800075c:	3301      	adds	r3, #1
 800075e:	60fb      	str	r3, [r7, #12]
	while (__HAL_TIM_GET_COUNTER(&htim2) < us)
 8000760:	4b05      	ldr	r3, [pc, #20]	; (8000778 <delay_us+0x30>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000766:	687a      	ldr	r2, [r7, #4]
 8000768:	429a      	cmp	r2, r3
 800076a:	d8f6      	bhi.n	800075a <delay_us+0x12>
	// wait for the counter to reach the us input in the parameter
}
 800076c:	bf00      	nop
 800076e:	bf00      	nop
 8000770:	3714      	adds	r7, #20
 8000772:	46bd      	mov	sp, r7
 8000774:	bc80      	pop	{r7}
 8000776:	4770      	bx	lr
 8000778:	200004e0 	.word	0x200004e0

0800077c <myDebug>:

void myDebug(const char *fmt, ...) {
 800077c:	b40f      	push	{r0, r1, r2, r3}
 800077e:	b580      	push	{r7, lr}
 8000780:	b082      	sub	sp, #8
 8000782:	af00      	add	r7, sp, #0
	static char temp[100];
	va_list args;
	va_start(args, fmt);
 8000784:	f107 0314 	add.w	r3, r7, #20
 8000788:	603b      	str	r3, [r7, #0]
	vsnprintf(temp, sizeof(temp), fmt, args);
 800078a:	683b      	ldr	r3, [r7, #0]
 800078c:	693a      	ldr	r2, [r7, #16]
 800078e:	2164      	movs	r1, #100	; 0x64
 8000790:	480a      	ldr	r0, [pc, #40]	; (80007bc <myDebug+0x40>)
 8000792:	f00b f951 	bl	800ba38 <vsniprintf>
	va_end(args);
	int len = bufferSize(temp);
 8000796:	4809      	ldr	r0, [pc, #36]	; (80007bc <myDebug+0x40>)
 8000798:	f000 f814 	bl	80007c4 <bufferSize>
 800079c:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*) temp, len, 1000);
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	b29a      	uxth	r2, r3
 80007a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007a6:	4905      	ldr	r1, [pc, #20]	; (80007bc <myDebug+0x40>)
 80007a8:	4805      	ldr	r0, [pc, #20]	; (80007c0 <myDebug+0x44>)
 80007aa:	f005 ff18 	bl	80065de <HAL_UART_Transmit>
}
 80007ae:	bf00      	nop
 80007b0:	3708      	adds	r7, #8
 80007b2:	46bd      	mov	sp, r7
 80007b4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80007b8:	b004      	add	sp, #16
 80007ba:	4770      	bx	lr
 80007bc:	20000218 	.word	0x20000218
 80007c0:	200005c4 	.word	0x200005c4

080007c4 <bufferSize>:

int bufferSize(char *buffer) {
 80007c4:	b480      	push	{r7}
 80007c6:	b085      	sub	sp, #20
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
	int i = 0;
 80007cc:	2300      	movs	r3, #0
 80007ce:	60fb      	str	r3, [r7, #12]
	while (*buffer++ != '\0')
 80007d0:	e002      	b.n	80007d8 <bufferSize+0x14>
		i++;
 80007d2:	68fb      	ldr	r3, [r7, #12]
 80007d4:	3301      	adds	r3, #1
 80007d6:	60fb      	str	r3, [r7, #12]
	while (*buffer++ != '\0')
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	1c5a      	adds	r2, r3, #1
 80007dc:	607a      	str	r2, [r7, #4]
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d1f6      	bne.n	80007d2 <bufferSize+0xe>
	return i;
 80007e4:	68fb      	ldr	r3, [r7, #12]
}
 80007e6:	4618      	mov	r0, r3
 80007e8:	3714      	adds	r7, #20
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bc80      	pop	{r7}
 80007ee:	4770      	bx	lr

080007f0 <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_DMAMUX1
  *         @arg @ref LL_AHB1_GRP1_PERIPH_CRC
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80007f0:	b480      	push	{r7}
 80007f2:	b085      	sub	sp, #20
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80007f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007fc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80007fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	4313      	orrs	r3, r2
 8000806:	648b      	str	r3, [r1, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000808:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800080c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	4013      	ands	r3, r2
 8000812:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000814:	68fb      	ldr	r3, [r7, #12]
}
 8000816:	bf00      	nop
 8000818:	3714      	adds	r7, #20
 800081a:	46bd      	mov	sp, r7
 800081c:	bc80      	pop	{r7}
 800081e:	4770      	bx	lr

08000820 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000824:	2004      	movs	r0, #4
 8000826:	f7ff ffe3 	bl	80007f0 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 800082a:	2001      	movs	r0, #1
 800082c:	f7ff ffe0 	bl	80007f0 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000830:	2200      	movs	r2, #0
 8000832:	2100      	movs	r1, #0
 8000834:	200b      	movs	r0, #11
 8000836:	f002 fe8c 	bl	8003552 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800083a:	200b      	movs	r0, #11
 800083c:	f002 fea3 	bl	8003586 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000840:	2200      	movs	r2, #0
 8000842:	2100      	movs	r1, #0
 8000844:	200c      	movs	r0, #12
 8000846:	f002 fe84 	bl	8003552 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800084a:	200c      	movs	r0, #12
 800084c:	f002 fe9b 	bl	8003586 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000850:	2200      	movs	r2, #0
 8000852:	2100      	movs	r1, #0
 8000854:	200d      	movs	r0, #13
 8000856:	f002 fe7c 	bl	8003552 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 800085a:	200d      	movs	r0, #13
 800085c:	f002 fe93 	bl	8003586 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000860:	2200      	movs	r2, #0
 8000862:	2100      	movs	r1, #0
 8000864:	200e      	movs	r0, #14
 8000866:	f002 fe74 	bl	8003552 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 800086a:	200e      	movs	r0, #14
 800086c:	f002 fe8b 	bl	8003586 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000870:	2200      	movs	r2, #0
 8000872:	2100      	movs	r1, #0
 8000874:	200f      	movs	r0, #15
 8000876:	f002 fe6c 	bl	8003552 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800087a:	200f      	movs	r0, #15
 800087c:	f002 fe83 	bl	8003586 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8000880:	2200      	movs	r2, #0
 8000882:	2100      	movs	r1, #0
 8000884:	2010      	movs	r0, #16
 8000886:	f002 fe64 	bl	8003552 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 800088a:	2010      	movs	r0, #16
 800088c:	f002 fe7b 	bl	8003586 <HAL_NVIC_EnableIRQ>

}
 8000890:	bf00      	nop
 8000892:	bd80      	pop	{r7, pc}

08000894 <calculateCRC_CCITT_AX25>:
 */

#include "error_handler.h"

// Function to calculate CRC-CCITT for AX.25 frames
uint16_t calculateCRC_CCITT_AX25(const uint8_t *data, size_t length) {
 8000894:	b480      	push	{r7}
 8000896:	b087      	sub	sp, #28
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
 800089c:	6039      	str	r1, [r7, #0]
	uint16_t crc = 0xFFFF; // Initialize CRC register with 0xFFFF
 800089e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80008a2:	82fb      	strh	r3, [r7, #22]
	uint16_t CRC_POLY = 0x1021; // CRC polynomial for CCITT (0x1021)
 80008a4:	f241 0321 	movw	r3, #4129	; 0x1021
 80008a8:	817b      	strh	r3, [r7, #10]

	// Iterate through each byte of the input data
	for (size_t i = 0; i < length; i++) {
 80008aa:	2300      	movs	r3, #0
 80008ac:	613b      	str	r3, [r7, #16]
 80008ae:	e026      	b.n	80008fe <calculateCRC_CCITT_AX25+0x6a>
		crc ^= ((uint16_t) data[i] << 8); // XOR CRC with next byte of input data
 80008b0:	687a      	ldr	r2, [r7, #4]
 80008b2:	693b      	ldr	r3, [r7, #16]
 80008b4:	4413      	add	r3, r2
 80008b6:	781b      	ldrb	r3, [r3, #0]
 80008b8:	021b      	lsls	r3, r3, #8
 80008ba:	b21a      	sxth	r2, r3
 80008bc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80008c0:	4053      	eors	r3, r2
 80008c2:	b21b      	sxth	r3, r3
 80008c4:	82fb      	strh	r3, [r7, #22]

		// Iterate through each bit of the current byte
		for (int j = 0; j < 8; j++) {
 80008c6:	2300      	movs	r3, #0
 80008c8:	60fb      	str	r3, [r7, #12]
 80008ca:	e012      	b.n	80008f2 <calculateCRC_CCITT_AX25+0x5e>
			if (crc & 0x8000) { // If MSB of CRC is 1
 80008cc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	da08      	bge.n	80008e6 <calculateCRC_CCITT_AX25+0x52>
				crc = (crc << 1) ^ CRC_POLY; // Left shift CRC and XOR with polynomial
 80008d4:	8afb      	ldrh	r3, [r7, #22]
 80008d6:	005b      	lsls	r3, r3, #1
 80008d8:	b21a      	sxth	r2, r3
 80008da:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80008de:	4053      	eors	r3, r2
 80008e0:	b21b      	sxth	r3, r3
 80008e2:	82fb      	strh	r3, [r7, #22]
 80008e4:	e002      	b.n	80008ec <calculateCRC_CCITT_AX25+0x58>
			} else {
				crc <<= 1; // Left shift CRC
 80008e6:	8afb      	ldrh	r3, [r7, #22]
 80008e8:	005b      	lsls	r3, r3, #1
 80008ea:	82fb      	strh	r3, [r7, #22]
		for (int j = 0; j < 8; j++) {
 80008ec:	68fb      	ldr	r3, [r7, #12]
 80008ee:	3301      	adds	r3, #1
 80008f0:	60fb      	str	r3, [r7, #12]
 80008f2:	68fb      	ldr	r3, [r7, #12]
 80008f4:	2b07      	cmp	r3, #7
 80008f6:	dde9      	ble.n	80008cc <calculateCRC_CCITT_AX25+0x38>
	for (size_t i = 0; i < length; i++) {
 80008f8:	693b      	ldr	r3, [r7, #16]
 80008fa:	3301      	adds	r3, #1
 80008fc:	613b      	str	r3, [r7, #16]
 80008fe:	693a      	ldr	r2, [r7, #16]
 8000900:	683b      	ldr	r3, [r7, #0]
 8000902:	429a      	cmp	r2, r3
 8000904:	d3d4      	bcc.n	80008b0 <calculateCRC_CCITT_AX25+0x1c>
			}
		}
	}

	return crc; // Return calculated CRC
 8000906:	8afb      	ldrh	r3, [r7, #22]
}
 8000908:	4618      	mov	r0, r3
 800090a:	371c      	adds	r7, #28
 800090c:	46bd      	mov	sp, r7
 800090e:	bc80      	pop	{r7}
 8000910:	4770      	bx	lr

08000912 <bit_stuffing>:
	}
	crcReg = crcReg ^ 0xFFFF;						// Final XOR with 0xFFFF
	return crcReg;
}

int bit_stuffing(uint8_t *data, uint8_t *output_data, int length) {
 8000912:	b480      	push	{r7}
 8000914:	b08f      	sub	sp, #60	; 0x3c
 8000916:	af00      	add	r7, sp, #0
 8000918:	60f8      	str	r0, [r7, #12]
 800091a:	60b9      	str	r1, [r7, #8]
 800091c:	607a      	str	r2, [r7, #4]
	int out_index = 0;
 800091e:	2300      	movs	r3, #0
 8000920:	637b      	str	r3, [r7, #52]	; 0x34
	int bit_count = 0; // Count of consecutive 1 bits
 8000922:	2300      	movs	r3, #0
 8000924:	633b      	str	r3, [r7, #48]	; 0x30
	uint8_t current_byte = 0;
 8000926:	2300      	movs	r3, #0
 8000928:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	int bit_pos = 7;
 800092c:	2307      	movs	r3, #7
 800092e:	62bb      	str	r3, [r7, #40]	; 0x28
	int stuffed_size = 0; // Track size of output data after bit stuffing
 8000930:	2300      	movs	r3, #0
 8000932:	627b      	str	r3, [r7, #36]	; 0x24
	int bits_stuffed = 0; // Number of bits stuffed since last size increase
 8000934:	2300      	movs	r3, #0
 8000936:	623b      	str	r3, [r7, #32]

	//myDebug("Error handler: before Bit stuffing \n");

	for (int i = 0; i < length; i++) {
 8000938:	2300      	movs	r3, #0
 800093a:	61fb      	str	r3, [r7, #28]
 800093c:	e078      	b.n	8000a30 <bit_stuffing+0x11e>
		for (int bit = 7; bit >= 0; bit--) {
 800093e:	2307      	movs	r3, #7
 8000940:	61bb      	str	r3, [r7, #24]
 8000942:	e06f      	b.n	8000a24 <bit_stuffing+0x112>
			int bit_val = (data[i] >> bit) & 1;
 8000944:	69fb      	ldr	r3, [r7, #28]
 8000946:	68fa      	ldr	r2, [r7, #12]
 8000948:	4413      	add	r3, r2
 800094a:	781b      	ldrb	r3, [r3, #0]
 800094c:	461a      	mov	r2, r3
 800094e:	69bb      	ldr	r3, [r7, #24]
 8000950:	fa42 f303 	asr.w	r3, r2, r3
 8000954:	f003 0301 	and.w	r3, r3, #1
 8000958:	617b      	str	r3, [r7, #20]

			//	myDebug("%d ", bit_val);

			current_byte |= (bit_val << bit_pos);
 800095a:	697a      	ldr	r2, [r7, #20]
 800095c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800095e:	fa02 f303 	lsl.w	r3, r2, r3
 8000962:	b25a      	sxtb	r2, r3
 8000964:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8000968:	4313      	orrs	r3, r2
 800096a:	b25b      	sxtb	r3, r3
 800096c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			bit_pos--;
 8000970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000972:	3b01      	subs	r3, #1
 8000974:	62bb      	str	r3, [r7, #40]	; 0x28

			if (bit_val) {
 8000976:	697b      	ldr	r3, [r7, #20]
 8000978:	2b00      	cmp	r3, #0
 800097a:	d02f      	beq.n	80009dc <bit_stuffing+0xca>
				bit_count++;
 800097c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800097e:	3301      	adds	r3, #1
 8000980:	633b      	str	r3, [r7, #48]	; 0x30
				if (bit_count == 5) {
 8000982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000984:	2b05      	cmp	r3, #5
 8000986:	d12b      	bne.n	80009e0 <bit_stuffing+0xce>
					// Insert a 0 bit after five consecutive 1s
					if (bit_pos < 0) {
 8000988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800098a:	2b00      	cmp	r3, #0
 800098c:	da10      	bge.n	80009b0 <bit_stuffing+0x9e>
						output_data[out_index++] = current_byte;
 800098e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000990:	1c5a      	adds	r2, r3, #1
 8000992:	637a      	str	r2, [r7, #52]	; 0x34
 8000994:	461a      	mov	r2, r3
 8000996:	68bb      	ldr	r3, [r7, #8]
 8000998:	4413      	add	r3, r2
 800099a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800099e:	701a      	strb	r2, [r3, #0]
						stuffed_size++;
 80009a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009a2:	3301      	adds	r3, #1
 80009a4:	627b      	str	r3, [r7, #36]	; 0x24
						current_byte = 0;
 80009a6:	2300      	movs	r3, #0
 80009a8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						bit_pos = 7;
 80009ac:	2307      	movs	r3, #7
 80009ae:	62bb      	str	r3, [r7, #40]	; 0x28
					}
					current_byte &= ~(1 << bit_pos);
 80009b0:	2201      	movs	r2, #1
 80009b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009b4:	fa02 f303 	lsl.w	r3, r2, r3
 80009b8:	b25b      	sxtb	r3, r3
 80009ba:	43db      	mvns	r3, r3
 80009bc:	b25a      	sxtb	r2, r3
 80009be:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80009c2:	4013      	ands	r3, r2
 80009c4:	b25b      	sxtb	r3, r3
 80009c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					bit_pos--;
 80009ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009cc:	3b01      	subs	r3, #1
 80009ce:	62bb      	str	r3, [r7, #40]	; 0x28
					bits_stuffed++;
 80009d0:	6a3b      	ldr	r3, [r7, #32]
 80009d2:	3301      	adds	r3, #1
 80009d4:	623b      	str	r3, [r7, #32]
					bit_count = 0;
 80009d6:	2300      	movs	r3, #0
 80009d8:	633b      	str	r3, [r7, #48]	; 0x30
 80009da:	e001      	b.n	80009e0 <bit_stuffing+0xce>
				}
			} else {
				bit_count = 0;
 80009dc:	2300      	movs	r3, #0
 80009de:	633b      	str	r3, [r7, #48]	; 0x30
			}

			if (bit_pos < 0) {
 80009e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	da10      	bge.n	8000a08 <bit_stuffing+0xf6>
				output_data[out_index++] = current_byte;
 80009e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80009e8:	1c5a      	adds	r2, r3, #1
 80009ea:	637a      	str	r2, [r7, #52]	; 0x34
 80009ec:	461a      	mov	r2, r3
 80009ee:	68bb      	ldr	r3, [r7, #8]
 80009f0:	4413      	add	r3, r2
 80009f2:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80009f6:	701a      	strb	r2, [r3, #0]
				stuffed_size++;
 80009f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009fa:	3301      	adds	r3, #1
 80009fc:	627b      	str	r3, [r7, #36]	; 0x24
				current_byte = 0;
 80009fe:	2300      	movs	r3, #0
 8000a00:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				bit_pos = 7;
 8000a04:	2307      	movs	r3, #7
 8000a06:	62bb      	str	r3, [r7, #40]	; 0x28
			}

			// Check if we've stuffed enough bits to increase size
			if (bits_stuffed >= 9 && bit_pos >= 0) {
 8000a08:	6a3b      	ldr	r3, [r7, #32]
 8000a0a:	2b08      	cmp	r3, #8
 8000a0c:	dd07      	ble.n	8000a1e <bit_stuffing+0x10c>
 8000a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	db04      	blt.n	8000a1e <bit_stuffing+0x10c>
				stuffed_size++;
 8000a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a16:	3301      	adds	r3, #1
 8000a18:	627b      	str	r3, [r7, #36]	; 0x24
				bits_stuffed = 0; // Reset bits_stuffed after increasing size
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	623b      	str	r3, [r7, #32]
		for (int bit = 7; bit >= 0; bit--) {
 8000a1e:	69bb      	ldr	r3, [r7, #24]
 8000a20:	3b01      	subs	r3, #1
 8000a22:	61bb      	str	r3, [r7, #24]
 8000a24:	69bb      	ldr	r3, [r7, #24]
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	da8c      	bge.n	8000944 <bit_stuffing+0x32>
	for (int i = 0; i < length; i++) {
 8000a2a:	69fb      	ldr	r3, [r7, #28]
 8000a2c:	3301      	adds	r3, #1
 8000a2e:	61fb      	str	r3, [r7, #28]
 8000a30:	69fa      	ldr	r2, [r7, #28]
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	429a      	cmp	r2, r3
 8000a36:	db82      	blt.n	800093e <bit_stuffing+0x2c>
			}
		}
	}
	//myDebug("\n");

	if (bit_pos < 7) {
 8000a38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a3a:	2b06      	cmp	r3, #6
 8000a3c:	dc0b      	bgt.n	8000a56 <bit_stuffing+0x144>
		output_data[out_index++] = current_byte;
 8000a3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a40:	1c5a      	adds	r2, r3, #1
 8000a42:	637a      	str	r2, [r7, #52]	; 0x34
 8000a44:	461a      	mov	r2, r3
 8000a46:	68bb      	ldr	r3, [r7, #8]
 8000a48:	4413      	add	r3, r2
 8000a4a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8000a4e:	701a      	strb	r2, [r3, #0]
		stuffed_size++;
 8000a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a52:	3301      	adds	r3, #1
 8000a54:	627b      	str	r3, [r7, #36]	; 0x24
//			myDebug("%d ", bit_val);
//		}
//	}
//	myDebug("\n");

	return out_index; // Return the size of output data after bit stuffing
 8000a56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8000a58:	4618      	mov	r0, r3
 8000a5a:	373c      	adds	r7, #60	; 0x3c
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bc80      	pop	{r7}
 8000a60:	4770      	bx	lr

08000a62 <bit_destuffing>:

int bit_destuffing(uint8_t *data, uint8_t *output_data, int length) {
 8000a62:	b480      	push	{r7}
 8000a64:	b08d      	sub	sp, #52	; 0x34
 8000a66:	af00      	add	r7, sp, #0
 8000a68:	60f8      	str	r0, [r7, #12]
 8000a6a:	60b9      	str	r1, [r7, #8]
 8000a6c:	607a      	str	r2, [r7, #4]
	int out_index = 0;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	62fb      	str	r3, [r7, #44]	; 0x2c
	int bit_count = 0;
 8000a72:	2300      	movs	r3, #0
 8000a74:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t current_byte = 0;
 8000a76:	2300      	movs	r3, #0
 8000a78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	int bit_pos = 7;
 8000a7c:	2307      	movs	r3, #7
 8000a7e:	623b      	str	r3, [r7, #32]

	for (int i = 0; i < length; i++) {
 8000a80:	2300      	movs	r3, #0
 8000a82:	61fb      	str	r3, [r7, #28]
 8000a84:	e052      	b.n	8000b2c <bit_destuffing+0xca>
		for (int bit = 7; bit >= 0; bit--) {
 8000a86:	2307      	movs	r3, #7
 8000a88:	61bb      	str	r3, [r7, #24]
 8000a8a:	e049      	b.n	8000b20 <bit_destuffing+0xbe>
			int bit_val = (data[i] >> bit) & 1;
 8000a8c:	69fb      	ldr	r3, [r7, #28]
 8000a8e:	68fa      	ldr	r2, [r7, #12]
 8000a90:	4413      	add	r3, r2
 8000a92:	781b      	ldrb	r3, [r3, #0]
 8000a94:	461a      	mov	r2, r3
 8000a96:	69bb      	ldr	r3, [r7, #24]
 8000a98:	fa42 f303 	asr.w	r3, r2, r3
 8000a9c:	f003 0301 	and.w	r3, r3, #1
 8000aa0:	617b      	str	r3, [r7, #20]

			if (bit_val) {
 8000aa2:	697b      	ldr	r3, [r7, #20]
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d011      	beq.n	8000acc <bit_destuffing+0x6a>
				bit_count++;
 8000aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000aaa:	3301      	adds	r3, #1
 8000aac:	62bb      	str	r3, [r7, #40]	; 0x28
				current_byte |= (bit_val << bit_pos);
 8000aae:	697a      	ldr	r2, [r7, #20]
 8000ab0:	6a3b      	ldr	r3, [r7, #32]
 8000ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab6:	b25a      	sxtb	r2, r3
 8000ab8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8000abc:	4313      	orrs	r3, r2
 8000abe:	b25b      	sxtb	r3, r3
 8000ac0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				bit_pos--;
 8000ac4:	6a3b      	ldr	r3, [r7, #32]
 8000ac6:	3b01      	subs	r3, #1
 8000ac8:	623b      	str	r3, [r7, #32]
 8000aca:	e015      	b.n	8000af8 <bit_destuffing+0x96>
			} else {
				if (bit_count == 5) {
 8000acc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ace:	2b05      	cmp	r3, #5
 8000ad0:	d102      	bne.n	8000ad8 <bit_destuffing+0x76>
					// Skip this bit as it is a stuffed bit
					bit_count = 0;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	62bb      	str	r3, [r7, #40]	; 0x28
					continue;
 8000ad6:	e020      	b.n	8000b1a <bit_destuffing+0xb8>
				} else {
					bit_count = 0;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	62bb      	str	r3, [r7, #40]	; 0x28
					current_byte |= (bit_val << bit_pos);
 8000adc:	697a      	ldr	r2, [r7, #20]
 8000ade:	6a3b      	ldr	r3, [r7, #32]
 8000ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae4:	b25a      	sxtb	r2, r3
 8000ae6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8000aea:	4313      	orrs	r3, r2
 8000aec:	b25b      	sxtb	r3, r3
 8000aee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					bit_pos--;
 8000af2:	6a3b      	ldr	r3, [r7, #32]
 8000af4:	3b01      	subs	r3, #1
 8000af6:	623b      	str	r3, [r7, #32]
				}
			}

			if (bit_pos < 0) {
 8000af8:	6a3b      	ldr	r3, [r7, #32]
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	da0d      	bge.n	8000b1a <bit_destuffing+0xb8>
				output_data[out_index++] = current_byte;
 8000afe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b00:	1c5a      	adds	r2, r3, #1
 8000b02:	62fa      	str	r2, [r7, #44]	; 0x2c
 8000b04:	461a      	mov	r2, r3
 8000b06:	68bb      	ldr	r3, [r7, #8]
 8000b08:	4413      	add	r3, r2
 8000b0a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8000b0e:	701a      	strb	r2, [r3, #0]
				current_byte = 0;
 8000b10:	2300      	movs	r3, #0
 8000b12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				bit_pos = 7;
 8000b16:	2307      	movs	r3, #7
 8000b18:	623b      	str	r3, [r7, #32]
		for (int bit = 7; bit >= 0; bit--) {
 8000b1a:	69bb      	ldr	r3, [r7, #24]
 8000b1c:	3b01      	subs	r3, #1
 8000b1e:	61bb      	str	r3, [r7, #24]
 8000b20:	69bb      	ldr	r3, [r7, #24]
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	dab2      	bge.n	8000a8c <bit_destuffing+0x2a>
	for (int i = 0; i < length; i++) {
 8000b26:	69fb      	ldr	r3, [r7, #28]
 8000b28:	3301      	adds	r3, #1
 8000b2a:	61fb      	str	r3, [r7, #28]
 8000b2c:	69fa      	ldr	r2, [r7, #28]
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	429a      	cmp	r2, r3
 8000b32:	dba8      	blt.n	8000a86 <bit_destuffing+0x24>
			}
		}
	}

	// Ensure the last byte is written if it's partially filled
	if (bit_pos < 7) {
 8000b34:	6a3b      	ldr	r3, [r7, #32]
 8000b36:	2b06      	cmp	r3, #6
 8000b38:	dc08      	bgt.n	8000b4c <bit_destuffing+0xea>
		output_data[out_index++] = current_byte;
 8000b3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b3c:	1c5a      	adds	r2, r3, #1
 8000b3e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8000b40:	461a      	mov	r2, r3
 8000b42:	68bb      	ldr	r3, [r7, #8]
 8000b44:	4413      	add	r3, r2
 8000b46:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8000b4a:	701a      	strb	r2, [r3, #0]
//			myDebug("%d ", bit_val);
//		}
//	}
//	myDebug("\n");

	return out_index;
 8000b4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	3734      	adds	r7, #52	; 0x34
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bc80      	pop	{r7}
 8000b56:	4770      	bx	lr

08000b58 <check_packet_type>:

int check_packet_type(uint8_t *OBC_UART) {
 8000b58:	b480      	push	{r7}
 8000b5a:	b085      	sub	sp, #20
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
	uint8_t packet_type_true = 0;
 8000b60:	2300      	movs	r3, #0
 8000b62:	73fb      	strb	r3, [r7, #15]
	switch (OBC_UART[1]) {
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	3301      	adds	r3, #1
 8000b68:	781b      	ldrb	r3, [r3, #0]
 8000b6a:	2bb2      	cmp	r3, #178	; 0xb2
 8000b6c:	d01e      	beq.n	8000bac <check_packet_type+0x54>
 8000b6e:	2bb2      	cmp	r3, #178	; 0xb2
 8000b70:	dc2e      	bgt.n	8000bd0 <check_packet_type+0x78>
 8000b72:	2bb1      	cmp	r3, #177	; 0xb1
 8000b74:	d017      	beq.n	8000ba6 <check_packet_type+0x4e>
 8000b76:	2bb1      	cmp	r3, #177	; 0xb1
 8000b78:	dc2a      	bgt.n	8000bd0 <check_packet_type+0x78>
 8000b7a:	2b0d      	cmp	r3, #13
 8000b7c:	dc10      	bgt.n	8000ba0 <check_packet_type+0x48>
 8000b7e:	2b0a      	cmp	r3, #10
 8000b80:	db26      	blt.n	8000bd0 <check_packet_type+0x78>
 8000b82:	3b0a      	subs	r3, #10
 8000b84:	2b03      	cmp	r3, #3
 8000b86:	d823      	bhi.n	8000bd0 <check_packet_type+0x78>
 8000b88:	a201      	add	r2, pc, #4	; (adr r2, 8000b90 <check_packet_type+0x38>)
 8000b8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b8e:	bf00      	nop
 8000b90:	08000bb9 	.word	0x08000bb9
 8000b94:	08000bbf 	.word	0x08000bbf
 8000b98:	08000bc5 	.word	0x08000bc5
 8000b9c:	08000bcb 	.word	0x08000bcb
 8000ba0:	2bac      	cmp	r3, #172	; 0xac
 8000ba2:	d006      	beq.n	8000bb2 <check_packet_type+0x5a>
 8000ba4:	e014      	b.n	8000bd0 <check_packet_type+0x78>

	case 0xb1:						// beacon_type_1
		packet_type_true = 1;
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	73fb      	strb	r3, [r7, #15]
		break;
 8000baa:	e013      	b.n	8000bd4 <check_packet_type+0x7c>

	case 0xb2:						// beacon_type_2
		packet_type_true = 1;
 8000bac:	2301      	movs	r3, #1
 8000bae:	73fb      	strb	r3, [r7, #15]
		break;
 8000bb0:	e010      	b.n	8000bd4 <check_packet_type+0x7c>

	case 0xac:						// ack
		packet_type_true = 1;
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	73fb      	strb	r3, [r7, #15]
		break;
 8000bb6:	e00d      	b.n	8000bd4 <check_packet_type+0x7c>

	case 0x0a:						// digipeater packet
		packet_type_true = 1;
 8000bb8:	2301      	movs	r3, #1
 8000bba:	73fb      	strb	r3, [r7, #15]
		break;
 8000bbc:	e00a      	b.n	8000bd4 <check_packet_type+0x7c>

	case 0x0b:						// epdm
		packet_type_true = 1;
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	73fb      	strb	r3, [r7, #15]
		break;
 8000bc2:	e007      	b.n	8000bd4 <check_packet_type+0x7c>

	case 0x0c:						// camera
		packet_type_true = 1;
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	73fb      	strb	r3, [r7, #15]
		break;
 8000bc8:	e004      	b.n	8000bd4 <check_packet_type+0x7c>

	case 0x0d:						// adcs
		packet_type_true = 1;
 8000bca:	2301      	movs	r3, #1
 8000bcc:	73fb      	strb	r3, [r7, #15]
		break;
 8000bce:	e001      	b.n	8000bd4 <check_packet_type+0x7c>

	default:
		packet_type_true = 0;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	73fb      	strb	r3, [r7, #15]
	}

	return packet_type_true;
 8000bd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	3714      	adds	r7, #20
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bc80      	pop	{r7}
 8000bde:	4770      	bx	lr

08000be0 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b085      	sub	sp, #20
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000be8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000bec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000bee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	4313      	orrs	r3, r2
 8000bf6:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000bf8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000bfc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	4013      	ands	r3, r2
 8000c02:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000c04:	68fb      	ldr	r3, [r7, #12]
}
 8000c06:	bf00      	nop
 8000c08:	3714      	adds	r7, #20
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bc80      	pop	{r7}
 8000c0e:	4770      	bx	lr

08000c10 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b086      	sub	sp, #24
 8000c14:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c16:	1d3b      	adds	r3, r7, #4
 8000c18:	2200      	movs	r2, #0
 8000c1a:	601a      	str	r2, [r3, #0]
 8000c1c:	605a      	str	r2, [r3, #4]
 8000c1e:	609a      	str	r2, [r3, #8]
 8000c20:	60da      	str	r2, [r3, #12]
 8000c22:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c24:	2001      	movs	r0, #1
 8000c26:	f7ff ffdb 	bl	8000be0 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c2a:	2002      	movs	r0, #2
 8000c2c:	f7ff ffd8 	bl	8000be0 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c30:	2004      	movs	r0, #4
 8000c32:	f7ff ffd5 	bl	8000be0 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8000c36:	2200      	movs	r2, #0
 8000c38:	f44f 410a 	mov.w	r1, #35328	; 0x8a00
 8000c3c:	481f      	ldr	r0, [pc, #124]	; (8000cbc <MX_GPIO_Init+0xac>)
 8000c3e:	f003 f99f 	bl	8003f80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FE_CTRL3_Pin|FE_CTRL2_Pin|FE_CTRL1_Pin, GPIO_PIN_RESET);
 8000c42:	2200      	movs	r2, #0
 8000c44:	2138      	movs	r1, #56	; 0x38
 8000c46:	481e      	ldr	r0, [pc, #120]	; (8000cc0 <MX_GPIO_Init+0xb0>)
 8000c48:	f003 f99a 	bl	8003f80 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 8000c4c:	f44f 430a 	mov.w	r3, #35328	; 0x8a00
 8000c50:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c52:	2301      	movs	r3, #1
 8000c54:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c56:	2300      	movs	r3, #0
 8000c58:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c5a:	2302      	movs	r3, #2
 8000c5c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c5e:	1d3b      	adds	r3, r7, #4
 8000c60:	4619      	mov	r1, r3
 8000c62:	4816      	ldr	r0, [pc, #88]	; (8000cbc <MX_GPIO_Init+0xac>)
 8000c64:	f003 f82c 	bl	8003cc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = FE_CTRL3_Pin|FE_CTRL2_Pin|FE_CTRL1_Pin;
 8000c68:	2338      	movs	r3, #56	; 0x38
 8000c6a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c70:	2300      	movs	r3, #0
 8000c72:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c74:	2303      	movs	r3, #3
 8000c76:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c78:	1d3b      	adds	r3, r7, #4
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	4810      	ldr	r0, [pc, #64]	; (8000cc0 <MX_GPIO_Init+0xb0>)
 8000c7e:	f003 f81f 	bl	8003cc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = B1_Pin|B2_Pin;
 8000c82:	2303      	movs	r3, #3
 8000c84:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c86:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000c8a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c90:	1d3b      	adds	r3, r7, #4
 8000c92:	4619      	mov	r1, r3
 8000c94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c98:	f003 f812 	bl	8003cc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B3_Pin;
 8000c9c:	2340      	movs	r3, #64	; 0x40
 8000c9e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ca0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000ca4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B3_GPIO_Port, &GPIO_InitStruct);
 8000caa:	1d3b      	adds	r3, r7, #4
 8000cac:	4619      	mov	r1, r3
 8000cae:	4804      	ldr	r0, [pc, #16]	; (8000cc0 <MX_GPIO_Init+0xb0>)
 8000cb0:	f003 f806 	bl	8003cc0 <HAL_GPIO_Init>

}
 8000cb4:	bf00      	nop
 8000cb6:	3718      	adds	r7, #24
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	48000400 	.word	0x48000400
 8000cc0:	48000800 	.word	0x48000800

08000cc4 <countsDataBetweenFlags>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int countsDataBetweenFlags(uint8_t *data, int data_length) {
 8000cc4:	b480      	push	{r7}
 8000cc6:	b087      	sub	sp, #28
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
 8000ccc:	6039      	str	r1, [r7, #0]
	int found_first_7e = 0;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	617b      	str	r3, [r7, #20]
	int start_index = 0, end_index = 0;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	613b      	str	r3, [r7, #16]
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	60fb      	str	r3, [r7, #12]

	for (int i = 0; i < data_length; i++) {
 8000cda:	2300      	movs	r3, #0
 8000cdc:	60bb      	str	r3, [r7, #8]
 8000cde:	e013      	b.n	8000d08 <countsDataBetweenFlags+0x44>
		if (data[i] == 0x7e) {
 8000ce0:	68bb      	ldr	r3, [r7, #8]
 8000ce2:	687a      	ldr	r2, [r7, #4]
 8000ce4:	4413      	add	r3, r2
 8000ce6:	781b      	ldrb	r3, [r3, #0]
 8000ce8:	2b7e      	cmp	r3, #126	; 0x7e
 8000cea:	d10a      	bne.n	8000d02 <countsDataBetweenFlags+0x3e>
			if (!found_first_7e) {
 8000cec:	697b      	ldr	r3, [r7, #20]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d104      	bne.n	8000cfc <countsDataBetweenFlags+0x38>
				found_first_7e = 1;
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	617b      	str	r3, [r7, #20]
				start_index = i;
 8000cf6:	68bb      	ldr	r3, [r7, #8]
 8000cf8:	613b      	str	r3, [r7, #16]
 8000cfa:	e002      	b.n	8000d02 <countsDataBetweenFlags+0x3e>
			} else {
				end_index = i;
 8000cfc:	68bb      	ldr	r3, [r7, #8]
 8000cfe:	60fb      	str	r3, [r7, #12]
				break;
 8000d00:	e006      	b.n	8000d10 <countsDataBetweenFlags+0x4c>
	for (int i = 0; i < data_length; i++) {
 8000d02:	68bb      	ldr	r3, [r7, #8]
 8000d04:	3301      	adds	r3, #1
 8000d06:	60bb      	str	r3, [r7, #8]
 8000d08:	68ba      	ldr	r2, [r7, #8]
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	429a      	cmp	r2, r3
 8000d0e:	dbe7      	blt.n	8000ce0 <countsDataBetweenFlags+0x1c>
			}
		}
	}

	if (end_index > start_index) {
 8000d10:	68fa      	ldr	r2, [r7, #12]
 8000d12:	693b      	ldr	r3, [r7, #16]
 8000d14:	429a      	cmp	r2, r3
 8000d16:	dd04      	ble.n	8000d22 <countsDataBetweenFlags+0x5e>
		return end_index - start_index + 1;
 8000d18:	68fa      	ldr	r2, [r7, #12]
 8000d1a:	693b      	ldr	r3, [r7, #16]
 8000d1c:	1ad3      	subs	r3, r2, r3
 8000d1e:	3301      	adds	r3, #1
 8000d20:	e001      	b.n	8000d26 <countsDataBetweenFlags+0x62>
	} else {
		return -1; // Return -1 if two 0x7E flags are not found
 8000d22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	}
}
 8000d26:	4618      	mov	r0, r3
 8000d28:	371c      	adds	r7, #28
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bc80      	pop	{r7}
 8000d2e:	4770      	bx	lr

08000d30 <setPacketParams>:

void setPacketParams(uint8_t buffer_length) {
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	4603      	mov	r3, r0
 8000d38:	71fb      	strb	r3, [r7, #7]
	pkt_params.PacketType = PACKET_TYPE_GFSK;
 8000d3a:	4b11      	ldr	r3, [pc, #68]	; (8000d80 <setPacketParams+0x50>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	701a      	strb	r2, [r3, #0]
	pkt_params.Params.Gfsk.PayloadLength = buffer_length;
 8000d40:	4a0f      	ldr	r2, [pc, #60]	; (8000d80 <setPacketParams+0x50>)
 8000d42:	79fb      	ldrb	r3, [r7, #7]
 8000d44:	7213      	strb	r3, [r2, #8]
	pkt_params.Params.Gfsk.PreambleLength = 8;
 8000d46:	4b0e      	ldr	r3, [pc, #56]	; (8000d80 <setPacketParams+0x50>)
 8000d48:	2208      	movs	r2, #8
 8000d4a:	805a      	strh	r2, [r3, #2]
	pkt_params.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8000d4c:	4b0c      	ldr	r3, [pc, #48]	; (8000d80 <setPacketParams+0x50>)
 8000d4e:	2204      	movs	r2, #4
 8000d50:	711a      	strb	r2, [r3, #4]
	pkt_params.Params.Gfsk.SyncWordLength = 3 << 3;
 8000d52:	4b0b      	ldr	r3, [pc, #44]	; (8000d80 <setPacketParams+0x50>)
 8000d54:	2218      	movs	r2, #24
 8000d56:	715a      	strb	r2, [r3, #5]
	pkt_params.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8000d58:	4b09      	ldr	r3, [pc, #36]	; (8000d80 <setPacketParams+0x50>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	719a      	strb	r2, [r3, #6]
	pkt_params.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 8000d5e:	4b08      	ldr	r3, [pc, #32]	; (8000d80 <setPacketParams+0x50>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	71da      	strb	r2, [r3, #7]
	pkt_params.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8000d64:	4b06      	ldr	r3, [pc, #24]	; (8000d80 <setPacketParams+0x50>)
 8000d66:	22f2      	movs	r2, #242	; 0xf2
 8000d68:	725a      	strb	r2, [r3, #9]
	pkt_params.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8000d6a:	4b05      	ldr	r3, [pc, #20]	; (8000d80 <setPacketParams+0x50>)
 8000d6c:	2201      	movs	r2, #1
 8000d6e:	729a      	strb	r2, [r3, #10]
	SUBGRF_SetPacketParams(&pkt_params);
 8000d70:	4803      	ldr	r0, [pc, #12]	; (8000d80 <setPacketParams+0x50>)
 8000d72:	f009 fe49 	bl	800aa08 <SUBGRF_SetPacketParams>

}
 8000d76:	bf00      	nop
 8000d78:	3708      	adds	r7, #8
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	2000027c 	.word	0x2000027c

08000d84 <setModulationParams>:
void setModulationParams(unsigned long bitRate, unsigned long fDev) {
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
 8000d8c:	6039      	str	r1, [r7, #0]
	mod_params.PacketType = PACKET_TYPE_GFSK;
 8000d8e:	4b0b      	ldr	r3, [pc, #44]	; (8000dbc <setModulationParams+0x38>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	701a      	strb	r2, [r3, #0]
	mod_params.Params.Gfsk.Bandwidth = RX_BW_29300;
 8000d94:	4b09      	ldr	r3, [pc, #36]	; (8000dbc <setModulationParams+0x38>)
 8000d96:	220d      	movs	r2, #13
 8000d98:	735a      	strb	r2, [r3, #13]
	mod_params.Params.Gfsk.BitRate = bitRate;
 8000d9a:	4a08      	ldr	r2, [pc, #32]	; (8000dbc <setModulationParams+0x38>)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	6053      	str	r3, [r2, #4]
	mod_params.Params.Gfsk.Fdev = fDev;
 8000da0:	4a06      	ldr	r2, [pc, #24]	; (8000dbc <setModulationParams+0x38>)
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	6093      	str	r3, [r2, #8]
	mod_params.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8000da6:	4b05      	ldr	r3, [pc, #20]	; (8000dbc <setModulationParams+0x38>)
 8000da8:	220b      	movs	r2, #11
 8000daa:	731a      	strb	r2, [r3, #12]
	SUBGRF_SetModulationParams(&mod_params);
 8000dac:	4803      	ldr	r0, [pc, #12]	; (8000dbc <setModulationParams+0x38>)
 8000dae:	f009 fd59 	bl	800a864 <SUBGRF_SetModulationParams>

}
 8000db2:	bf00      	nop
 8000db4:	3708      	adds	r7, #8
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	20000290 	.word	0x20000290

08000dc0 <radioConfig>:

void radioConfig(uint8_t *buffer, uint8_t buffer_len) {
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b084      	sub	sp, #16
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
 8000dc8:	460b      	mov	r3, r1
 8000dca:	70fb      	strb	r3, [r7, #3]
	SUBGRF_SetBufferBaseAddress(0x00, 0x00);
 8000dcc:	2100      	movs	r1, #0
 8000dce:	2000      	movs	r0, #0
 8000dd0:	f009 feb8 	bl	800ab44 <SUBGRF_SetBufferBaseAddress>
	SUBGRF_SetPayload(buffer, buffer_len);
 8000dd4:	78fb      	ldrb	r3, [r7, #3]
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	6878      	ldr	r0, [r7, #4]
 8000dda:	f009 f899 	bl	8009f10 <SUBGRF_SetPayload>
	SUBGRF_SetSyncWord(( uint8_t[] ) { 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00,
 8000dde:	4a0f      	ldr	r2, [pc, #60]	; (8000e1c <radioConfig+0x5c>)
 8000de0:	f107 0308 	add.w	r3, r7, #8
 8000de4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000de8:	e883 0003 	stmia.w	r3, {r0, r1}
 8000dec:	f107 0308 	add.w	r3, r7, #8
 8000df0:	4618      	mov	r0, r3
 8000df2:	f009 f8d2 	bl	8009f9a <SUBGRF_SetSyncWord>
					0x00 });
	SUBGRF_SetWhiteningSeed(0x01FF);
 8000df6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8000dfa:	f009 f91d 	bl	800a038 <SUBGRF_SetWhiteningSeed>
	SUBGRF_SetPaConfig(PA_DUTY_CYCLE, HP_MAX, PA_SEL, 0x01);
 8000dfe:	2301      	movs	r3, #1
 8000e00:	2201      	movs	r2, #1
 8000e02:	2100      	movs	r1, #0
 8000e04:	2007      	movs	r0, #7
 8000e06:	f009 fb75 	bl	800a4f4 <SUBGRF_SetPaConfig>
	SUBGRF_SetTxParams(RFO_LP, POWER, RAMP_TIME);
 8000e0a:	2202      	movs	r2, #2
 8000e0c:	210e      	movs	r1, #14
 8000e0e:	2001      	movs	r0, #1
 8000e10:	f009 fc5a 	bl	800a6c8 <SUBGRF_SetTxParams>
}
 8000e14:	bf00      	nop
 8000e16:	3710      	adds	r7, #16
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	0800c394 	.word	0x0800c394

08000e20 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b088      	sub	sp, #32
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
	if (huart == &huart2 || huart == &hlpuart1 || huart == &huart1) {
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	4a98      	ldr	r2, [pc, #608]	; (800108c <HAL_UART_RxCpltCallback+0x26c>)
 8000e2c:	4293      	cmp	r3, r2
 8000e2e:	d008      	beq.n	8000e42 <HAL_UART_RxCpltCallback+0x22>
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	4a97      	ldr	r2, [pc, #604]	; (8001090 <HAL_UART_RxCpltCallback+0x270>)
 8000e34:	4293      	cmp	r3, r2
 8000e36:	d004      	beq.n	8000e42 <HAL_UART_RxCpltCallback+0x22>
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	4a96      	ldr	r2, [pc, #600]	; (8001094 <HAL_UART_RxCpltCallback+0x274>)
 8000e3c:	4293      	cmp	r3, r2
 8000e3e:	f040 8217 	bne.w	8001270 <HAL_UART_RxCpltCallback+0x450>

		if (OBC_HANDSHAKE_FLAG) {
 8000e42:	4b95      	ldr	r3, [pc, #596]	; (8001098 <HAL_UART_RxCpltCallback+0x278>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	f000 8212 	beq.w	8001270 <HAL_UART_RxCpltCallback+0x450>

			uint8_t header = 0x00;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	72fb      	strb	r3, [r7, #11]

			if (OBC_UART_RX[0] == header || OBC_UART_RX[0] != 0x53) {
 8000e50:	4b92      	ldr	r3, [pc, #584]	; (800109c <HAL_UART_RxCpltCallback+0x27c>)
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	7afa      	ldrb	r2, [r7, #11]
 8000e56:	429a      	cmp	r2, r3
 8000e58:	d003      	beq.n	8000e62 <HAL_UART_RxCpltCallback+0x42>
 8000e5a:	4b90      	ldr	r3, [pc, #576]	; (800109c <HAL_UART_RxCpltCallback+0x27c>)
 8000e5c:	781b      	ldrb	r3, [r3, #0]
 8000e5e:	2b53      	cmp	r3, #83	; 0x53
 8000e60:	d011      	beq.n	8000e86 <HAL_UART_RxCpltCallback+0x66>

				for (int loop1 = 0; loop1 < sizeof(OBC_UART_RX); loop1++) {
 8000e62:	2300      	movs	r3, #0
 8000e64:	61fb      	str	r3, [r7, #28]
 8000e66:	e00b      	b.n	8000e80 <HAL_UART_RxCpltCallback+0x60>
					OBC_UART_RX[loop1] = OBC_UART_RX[loop1 + 1];
 8000e68:	69fb      	ldr	r3, [r7, #28]
 8000e6a:	3301      	adds	r3, #1
 8000e6c:	4a8b      	ldr	r2, [pc, #556]	; (800109c <HAL_UART_RxCpltCallback+0x27c>)
 8000e6e:	5cd1      	ldrb	r1, [r2, r3]
 8000e70:	4a8a      	ldr	r2, [pc, #552]	; (800109c <HAL_UART_RxCpltCallback+0x27c>)
 8000e72:	69fb      	ldr	r3, [r7, #28]
 8000e74:	4413      	add	r3, r2
 8000e76:	460a      	mov	r2, r1
 8000e78:	701a      	strb	r2, [r3, #0]
				for (int loop1 = 0; loop1 < sizeof(OBC_UART_RX); loop1++) {
 8000e7a:	69fb      	ldr	r3, [r7, #28]
 8000e7c:	3301      	adds	r3, #1
 8000e7e:	61fb      	str	r3, [r7, #28]
 8000e80:	69fb      	ldr	r3, [r7, #28]
 8000e82:	2b54      	cmp	r3, #84	; 0x54
 8000e84:	d9f0      	bls.n	8000e68 <HAL_UART_RxCpltCallback+0x48>
				}
			}

			packet_type_true = check_packet_type(OBC_UART_RX);
 8000e86:	4885      	ldr	r0, [pc, #532]	; (800109c <HAL_UART_RxCpltCallback+0x27c>)
 8000e88:	f7ff fe66 	bl	8000b58 <check_packet_type>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	4a84      	ldr	r2, [pc, #528]	; (80010a0 <HAL_UART_RxCpltCallback+0x280>)
 8000e90:	6013      	str	r3, [r2, #0]

			if (packet_type_true) {
 8000e92:	4b83      	ldr	r3, [pc, #524]	; (80010a0 <HAL_UART_RxCpltCallback+0x280>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	f000 819d 	beq.w	80011d6 <HAL_UART_RxCpltCallback+0x3b6>

				if (DIGIPEATER_STATUS == 1 && BEACON_COUNT == 0
 8000e9c:	4b81      	ldr	r3, [pc, #516]	; (80010a4 <HAL_UART_RxCpltCallback+0x284>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	2b01      	cmp	r3, #1
 8000ea2:	f040 813d 	bne.w	8001120 <HAL_UART_RxCpltCallback+0x300>
 8000ea6:	4b80      	ldr	r3, [pc, #512]	; (80010a8 <HAL_UART_RxCpltCallback+0x288>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	f040 8138 	bne.w	8001120 <HAL_UART_RxCpltCallback+0x300>
						&& DIGIPEATER_RX_FLAG == 1) {
 8000eb0:	4b7e      	ldr	r3, [pc, #504]	; (80010ac <HAL_UART_RxCpltCallback+0x28c>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	2b01      	cmp	r3, #1
 8000eb6:	f040 8133 	bne.w	8001120 <HAL_UART_RxCpltCallback+0x300>

					OBC_SUCCESS_DATA_RX_FLAG = 0;
 8000eba:	4b7d      	ldr	r3, [pc, #500]	; (80010b0 <HAL_UART_RxCpltCallback+0x290>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	601a      	str	r2, [r3, #0]
//					for (int i = 0; i < sizeof(OBC_UART_RX); i++) {
//						myDebug("%02x ", OBC_UART_RX[i]);
//					}
//					myDebug("\r\n");

					if (OBC_UART_RX[0] == 0x53 && OBC_UART_RX[83] == 0x7E) {
 8000ec0:	4b76      	ldr	r3, [pc, #472]	; (800109c <HAL_UART_RxCpltCallback+0x27c>)
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	2b53      	cmp	r3, #83	; 0x53
 8000ec6:	f040 80a1 	bne.w	800100c <HAL_UART_RxCpltCallback+0x1ec>
 8000eca:	4b74      	ldr	r3, [pc, #464]	; (800109c <HAL_UART_RxCpltCallback+0x27c>)
 8000ecc:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8000ed0:	2b7e      	cmp	r3, #126	; 0x7e
 8000ed2:	f040 809b 	bne.w	800100c <HAL_UART_RxCpltCallback+0x1ec>
						myDebug(
 8000ed6:	4877      	ldr	r0, [pc, #476]	; (80010b4 <HAL_UART_RxCpltCallback+0x294>)
 8000ed8:	f7ff fc50 	bl	800077c <myDebug>
								"--> Correct Digipeater Data received from OBC\n");
						obc_ilen = OBC_UART_RX[2];  //len of info
 8000edc:	4b6f      	ldr	r3, [pc, #444]	; (800109c <HAL_UART_RxCpltCallback+0x27c>)
 8000ede:	789a      	ldrb	r2, [r3, #2]
 8000ee0:	4b75      	ldr	r3, [pc, #468]	; (80010b8 <HAL_UART_RxCpltCallback+0x298>)
 8000ee2:	701a      	strb	r2, [r3, #0]
						PACKET_TYPE = OBC_UART_RX[1]; //packet_type
 8000ee4:	4b6d      	ldr	r3, [pc, #436]	; (800109c <HAL_UART_RxCpltCallback+0x27c>)
 8000ee6:	785a      	ldrb	r2, [r3, #1]
 8000ee8:	4b74      	ldr	r3, [pc, #464]	; (80010bc <HAL_UART_RxCpltCallback+0x29c>)
 8000eea:	701a      	strb	r2, [r3, #0]
						DIGIPEATER_FLAG = 1;
 8000eec:	4b74      	ldr	r3, [pc, #464]	; (80010c0 <HAL_UART_RxCpltCallback+0x2a0>)
 8000eee:	2201      	movs	r2, #1
 8000ef0:	601a      	str	r2, [r3, #0]

						getAX25Packet(OBC_UART_RX, obc_ilen);
 8000ef2:	4b71      	ldr	r3, [pc, #452]	; (80010b8 <HAL_UART_RxCpltCallback+0x298>)
 8000ef4:	781b      	ldrb	r3, [r3, #0]
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	4868      	ldr	r0, [pc, #416]	; (800109c <HAL_UART_RxCpltCallback+0x27c>)
 8000efa:	f7ff fb9b 	bl	8000634 <getAX25Packet>

						tx_buffer_len = countsDataBetweenFlags(temp_tx_buffer,
 8000efe:	2196      	movs	r1, #150	; 0x96
 8000f00:	4870      	ldr	r0, [pc, #448]	; (80010c4 <HAL_UART_RxCpltCallback+0x2a4>)
 8000f02:	f7ff fedf 	bl	8000cc4 <countsDataBetweenFlags>
 8000f06:	4603      	mov	r3, r0
 8000f08:	4a6f      	ldr	r2, [pc, #444]	; (80010c8 <HAL_UART_RxCpltCallback+0x2a8>)
 8000f0a:	6013      	str	r3, [r2, #0]
								sizeof(temp_tx_buffer));

//						myDebug(		"Digipeater Packet complete, ready to TX: 0x%x\r\n", temp_tx_buffer);
						for (int j = 0; j < tx_buffer_len; j++) {
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	61bb      	str	r3, [r7, #24]
 8000f10:	e00b      	b.n	8000f2a <HAL_UART_RxCpltCallback+0x10a>
							tx_buffer[j] = temp_tx_buffer[j];
 8000f12:	4a6c      	ldr	r2, [pc, #432]	; (80010c4 <HAL_UART_RxCpltCallback+0x2a4>)
 8000f14:	69bb      	ldr	r3, [r7, #24]
 8000f16:	4413      	add	r3, r2
 8000f18:	7819      	ldrb	r1, [r3, #0]
 8000f1a:	4a6c      	ldr	r2, [pc, #432]	; (80010cc <HAL_UART_RxCpltCallback+0x2ac>)
 8000f1c:	69bb      	ldr	r3, [r7, #24]
 8000f1e:	4413      	add	r3, r2
 8000f20:	460a      	mov	r2, r1
 8000f22:	701a      	strb	r2, [r3, #0]
						for (int j = 0; j < tx_buffer_len; j++) {
 8000f24:	69bb      	ldr	r3, [r7, #24]
 8000f26:	3301      	adds	r3, #1
 8000f28:	61bb      	str	r3, [r7, #24]
 8000f2a:	4b67      	ldr	r3, [pc, #412]	; (80010c8 <HAL_UART_RxCpltCallback+0x2a8>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	69ba      	ldr	r2, [r7, #24]
 8000f30:	429a      	cmp	r2, r3
 8000f32:	dbee      	blt.n	8000f12 <HAL_UART_RxCpltCallback+0xf2>
//							myDebug("%02x ", tx_buffer[j]);
						}
//						myDebug("\r\n");
//						myDebug("size of tx_buffer = %d\r\n", tx_buffer_len);

						memset(OBC_UART_RX, '\0', obc_ilen);
 8000f34:	4b60      	ldr	r3, [pc, #384]	; (80010b8 <HAL_UART_RxCpltCallback+0x298>)
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	461a      	mov	r2, r3
 8000f3a:	2100      	movs	r1, #0
 8000f3c:	4857      	ldr	r0, [pc, #348]	; (800109c <HAL_UART_RxCpltCallback+0x27c>)
 8000f3e:	f00a fd89 	bl	800ba54 <memset>
						memset(temp_tx_buffer, '\0', sizeof(temp_tx_buffer));
 8000f42:	2296      	movs	r2, #150	; 0x96
 8000f44:	2100      	movs	r1, #0
 8000f46:	485f      	ldr	r0, [pc, #380]	; (80010c4 <HAL_UART_RxCpltCallback+0x2a4>)
 8000f48:	f00a fd84 	bl	800ba54 <memset>

						delay_us(500000);
 8000f4c:	4860      	ldr	r0, [pc, #384]	; (80010d0 <HAL_UART_RxCpltCallback+0x2b0>)
 8000f4e:	f7ff fbfb 	bl	8000748 <delay_us>

						setPacketParams(tx_buffer_len);
 8000f52:	4b5d      	ldr	r3, [pc, #372]	; (80010c8 <HAL_UART_RxCpltCallback+0x2a8>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	b2db      	uxtb	r3, r3
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f7ff fee9 	bl	8000d30 <setPacketParams>
						setModulationParams(GFSK_BR_1200, GFSK_FDEV_1200);
 8000f5e:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8000f62:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8000f66:	f7ff ff0d 	bl	8000d84 <setModulationParams>
						radioConfig(tx_buffer, tx_buffer_len);
 8000f6a:	4b57      	ldr	r3, [pc, #348]	; (80010c8 <HAL_UART_RxCpltCallback+0x2a8>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	b2db      	uxtb	r3, r3
 8000f70:	4619      	mov	r1, r3
 8000f72:	4856      	ldr	r0, [pc, #344]	; (80010cc <HAL_UART_RxCpltCallback+0x2ac>)
 8000f74:	f7ff ff24 	bl	8000dc0 <radioConfig>

						myDebug("\n########## TX Configuration: ##########\n");
 8000f78:	4856      	ldr	r0, [pc, #344]	; (80010d4 <HAL_UART_RxCpltCallback+0x2b4>)
 8000f7a:	f7ff fbff 	bl	800077c <myDebug>

						myDebug("FREQUENCY MODS: DOWNLINK FREQ: %lu Hz\r\n",
 8000f7e:	4956      	ldr	r1, [pc, #344]	; (80010d8 <HAL_UART_RxCpltCallback+0x2b8>)
 8000f80:	4856      	ldr	r0, [pc, #344]	; (80010dc <HAL_UART_RxCpltCallback+0x2bc>)
 8000f82:	f7ff fbfb 	bl	800077c <myDebug>
						FREQ_437_MHZ);
						myDebug("Bit Rate: 	%d\n\r",
 8000f86:	4b56      	ldr	r3, [pc, #344]	; (80010e0 <HAL_UART_RxCpltCallback+0x2c0>)
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	4855      	ldr	r0, [pc, #340]	; (80010e4 <HAL_UART_RxCpltCallback+0x2c4>)
 8000f8e:	f7ff fbf5 	bl	800077c <myDebug>
								mod_params.Params.Gfsk.BitRate);
						myDebug("Frequency Deviation: 	%d\n\r",
 8000f92:	4b53      	ldr	r3, [pc, #332]	; (80010e0 <HAL_UART_RxCpltCallback+0x2c0>)
 8000f94:	689b      	ldr	r3, [r3, #8]
 8000f96:	4619      	mov	r1, r3
 8000f98:	4853      	ldr	r0, [pc, #332]	; (80010e8 <HAL_UART_RxCpltCallback+0x2c8>)
 8000f9a:	f7ff fbef 	bl	800077c <myDebug>
								mod_params.Params.Gfsk.Fdev);
						myDebug("RECEVING BANDWIDTH: 	%d\n\r",
								mod_params.Params.Gfsk.Bandwidth);
 8000f9e:	4b50      	ldr	r3, [pc, #320]	; (80010e0 <HAL_UART_RxCpltCallback+0x2c0>)
 8000fa0:	7b5b      	ldrb	r3, [r3, #13]
						myDebug("RECEVING BANDWIDTH: 	%d\n\r",
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	4851      	ldr	r0, [pc, #324]	; (80010ec <HAL_UART_RxCpltCallback+0x2cc>)
 8000fa6:	f7ff fbe9 	bl	800077c <myDebug>
						myDebug("Packet Type 			%d\n\r", pkt_params.PacketType);
 8000faa:	4b51      	ldr	r3, [pc, #324]	; (80010f0 <HAL_UART_RxCpltCallback+0x2d0>)
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	4619      	mov	r1, r3
 8000fb0:	4850      	ldr	r0, [pc, #320]	; (80010f4 <HAL_UART_RxCpltCallback+0x2d4>)
 8000fb2:	f7ff fbe3 	bl	800077c <myDebug>
						myDebug("PayloadLength 			%d\n\r",
								pkt_params.Params.Gfsk.PayloadLength);
 8000fb6:	4b4e      	ldr	r3, [pc, #312]	; (80010f0 <HAL_UART_RxCpltCallback+0x2d0>)
 8000fb8:	7a1b      	ldrb	r3, [r3, #8]
						myDebug("PayloadLength 			%d\n\r",
 8000fba:	4619      	mov	r1, r3
 8000fbc:	484e      	ldr	r0, [pc, #312]	; (80010f8 <HAL_UART_RxCpltCallback+0x2d8>)
 8000fbe:	f7ff fbdd 	bl	800077c <myDebug>
						myDebug("PreambleLength 		%d\n\r",
								pkt_params.Params.Gfsk.PreambleLength);
 8000fc2:	4b4b      	ldr	r3, [pc, #300]	; (80010f0 <HAL_UART_RxCpltCallback+0x2d0>)
 8000fc4:	885b      	ldrh	r3, [r3, #2]
						myDebug("PreambleLength 		%d\n\r",
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	484c      	ldr	r0, [pc, #304]	; (80010fc <HAL_UART_RxCpltCallback+0x2dc>)
 8000fca:	f7ff fbd7 	bl	800077c <myDebug>
						myDebug("PreambleMinDetect		%d\n\r",
								pkt_params.Params.Gfsk.PreambleMinDetect);
 8000fce:	4b48      	ldr	r3, [pc, #288]	; (80010f0 <HAL_UART_RxCpltCallback+0x2d0>)
 8000fd0:	791b      	ldrb	r3, [r3, #4]
						myDebug("PreambleMinDetect		%d\n\r",
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	484a      	ldr	r0, [pc, #296]	; (8001100 <HAL_UART_RxCpltCallback+0x2e0>)
 8000fd6:	f7ff fbd1 	bl	800077c <myDebug>
						myDebug("HeaderType 			%d\n\r",
								pkt_params.Params.Gfsk.HeaderType);
 8000fda:	4b45      	ldr	r3, [pc, #276]	; (80010f0 <HAL_UART_RxCpltCallback+0x2d0>)
 8000fdc:	79db      	ldrb	r3, [r3, #7]
						myDebug("HeaderType 			%d\n\r",
 8000fde:	4619      	mov	r1, r3
 8000fe0:	4848      	ldr	r0, [pc, #288]	; (8001104 <HAL_UART_RxCpltCallback+0x2e4>)
 8000fe2:	f7ff fbcb 	bl	800077c <myDebug>
						myDebug("__________*******************__________\r\n");
 8000fe6:	4848      	ldr	r0, [pc, #288]	; (8001108 <HAL_UART_RxCpltCallback+0x2e8>)
 8000fe8:	f7ff fbc8 	bl	800077c <myDebug>

						SUBGRF_SetRfFrequency(FREQ_437_MHZ);
 8000fec:	483a      	ldr	r0, [pc, #232]	; (80010d8 <HAL_UART_RxCpltCallback+0x2b8>)
 8000fee:	f009 faff 	bl	800a5f0 <SUBGRF_SetRfFrequency>
						SUBGRF_SetSwitch(RFO_LP, RFSWITCH_TX);
 8000ff2:	2101      	movs	r1, #1
 8000ff4:	2001      	movs	r0, #1
 8000ff6:	f009 ff43 	bl	800ae80 <SUBGRF_SetSwitch>
						SUBGRF_SendPayload(tx_buffer, tx_buffer_len, 0);
 8000ffa:	4b33      	ldr	r3, [pc, #204]	; (80010c8 <HAL_UART_RxCpltCallback+0x2a8>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	b2db      	uxtb	r3, r3
 8001000:	2200      	movs	r2, #0
 8001002:	4619      	mov	r1, r3
 8001004:	4831      	ldr	r0, [pc, #196]	; (80010cc <HAL_UART_RxCpltCallback+0x2ac>)
 8001006:	f008 ffb5 	bl	8009f74 <SUBGRF_SendPayload>
					if (OBC_UART_RX[0] == 0x53 && OBC_UART_RX[83] == 0x7E) {
 800100a:	e120      	b.n	800124e <HAL_UART_RxCpltCallback+0x42e>

					} else {
						myDebug(
 800100c:	483f      	ldr	r0, [pc, #252]	; (800110c <HAL_UART_RxCpltCallback+0x2ec>)
 800100e:	f7ff fbb5 	bl	800077c <myDebug>
								"*** Incorrect Digipeater Data received from OBC\n");
						if (HAL_UART_Transmit(&huart2, OBC_UART_RX, obc_plen,
 8001012:	4b3f      	ldr	r3, [pc, #252]	; (8001110 <HAL_UART_RxCpltCallback+0x2f0>)
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	b29a      	uxth	r2, r3
 8001018:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800101c:	491f      	ldr	r1, [pc, #124]	; (800109c <HAL_UART_RxCpltCallback+0x27c>)
 800101e:	481b      	ldr	r0, [pc, #108]	; (800108c <HAL_UART_RxCpltCallback+0x26c>)
 8001020:	f005 fadd 	bl	80065de <HAL_UART_Transmit>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d00c      	beq.n	8001044 <HAL_UART_RxCpltCallback+0x224>
								2000) == HAL_OK
								|| HAL_UART_Transmit(&hlpuart1, OBC_UART_RX,
 800102a:	4b39      	ldr	r3, [pc, #228]	; (8001110 <HAL_UART_RxCpltCallback+0x2f0>)
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	b29a      	uxth	r2, r3
 8001030:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001034:	4919      	ldr	r1, [pc, #100]	; (800109c <HAL_UART_RxCpltCallback+0x27c>)
 8001036:	4816      	ldr	r0, [pc, #88]	; (8001090 <HAL_UART_RxCpltCallback+0x270>)
 8001038:	f005 fad1 	bl	80065de <HAL_UART_Transmit>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	f040 8105 	bne.w	800124e <HAL_UART_RxCpltCallback+0x42e>
										obc_plen, 2000) == HAL_OK) {
							myDebug(
 8001044:	2155      	movs	r1, #85	; 0x55
 8001046:	4833      	ldr	r0, [pc, #204]	; (8001114 <HAL_UART_RxCpltCallback+0x2f4>)
 8001048:	f7ff fb98 	bl	800077c <myDebug>
									"*** Incorrect Digipeater Data re-transmit to OBC, Length: %d\r\n",
									sizeof(OBC_UART_RX));

							for (int i = 0; i < sizeof(OBC_UART_RX); i++) {
 800104c:	2300      	movs	r3, #0
 800104e:	617b      	str	r3, [r7, #20]
 8001050:	e00a      	b.n	8001068 <HAL_UART_RxCpltCallback+0x248>
								myDebug("%02x ", OBC_UART_RX[i]);
 8001052:	4a12      	ldr	r2, [pc, #72]	; (800109c <HAL_UART_RxCpltCallback+0x27c>)
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	4413      	add	r3, r2
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	4619      	mov	r1, r3
 800105c:	482e      	ldr	r0, [pc, #184]	; (8001118 <HAL_UART_RxCpltCallback+0x2f8>)
 800105e:	f7ff fb8d 	bl	800077c <myDebug>
							for (int i = 0; i < sizeof(OBC_UART_RX); i++) {
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	3301      	adds	r3, #1
 8001066:	617b      	str	r3, [r7, #20]
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	2b54      	cmp	r3, #84	; 0x54
 800106c:	d9f1      	bls.n	8001052 <HAL_UART_RxCpltCallback+0x232>
							}

							myDebug("\r\n");
 800106e:	482b      	ldr	r0, [pc, #172]	; (800111c <HAL_UART_RxCpltCallback+0x2fc>)
 8001070:	f7ff fb84 	bl	800077c <myDebug>

							memset(OBC_UART_RX, '\0', sizeof(OBC_UART_RX));
 8001074:	2255      	movs	r2, #85	; 0x55
 8001076:	2100      	movs	r1, #0
 8001078:	4808      	ldr	r0, [pc, #32]	; (800109c <HAL_UART_RxCpltCallback+0x27c>)
 800107a:	f00a fceb 	bl	800ba54 <memset>

							OBC_SUCCESS_DATA_RX_FLAG = 0;
 800107e:	4b0c      	ldr	r3, [pc, #48]	; (80010b0 <HAL_UART_RxCpltCallback+0x290>)
 8001080:	2200      	movs	r2, #0
 8001082:	601a      	str	r2, [r3, #0]
							DIGIPEATER_FLAG = 0;
 8001084:	4b0e      	ldr	r3, [pc, #56]	; (80010c0 <HAL_UART_RxCpltCallback+0x2a0>)
 8001086:	2200      	movs	r2, #0
 8001088:	601a      	str	r2, [r3, #0]
					if (OBC_UART_RX[0] == 0x53 && OBC_UART_RX[83] == 0x7E) {
 800108a:	e0e0      	b.n	800124e <HAL_UART_RxCpltCallback+0x42e>
 800108c:	20000658 	.word	0x20000658
 8001090:	20000530 	.word	0x20000530
 8001094:	200005c4 	.word	0x200005c4
 8001098:	200004a8 	.word	0x200004a8
 800109c:	20000318 	.word	0x20000318
 80010a0:	200004bc 	.word	0x200004bc
 80010a4:	200004ac 	.word	0x200004ac
 80010a8:	20000004 	.word	0x20000004
 80010ac:	200004b8 	.word	0x200004b8
 80010b0:	20000370 	.word	0x20000370
 80010b4:	0800c39c 	.word	0x0800c39c
 80010b8:	20000316 	.word	0x20000316
 80010bc:	200004b0 	.word	0x200004b0
 80010c0:	200004b4 	.word	0x200004b4
 80010c4:	20000374 	.word	0x20000374
 80010c8:	200004a4 	.word	0x200004a4
 80010cc:	2000040c 	.word	0x2000040c
 80010d0:	0007a120 	.word	0x0007a120
 80010d4:	0800c3cc 	.word	0x0800c3cc
 80010d8:	1a11d018 	.word	0x1a11d018
 80010dc:	0800c3f8 	.word	0x0800c3f8
 80010e0:	20000290 	.word	0x20000290
 80010e4:	0800c420 	.word	0x0800c420
 80010e8:	0800c430 	.word	0x0800c430
 80010ec:	0800c44c 	.word	0x0800c44c
 80010f0:	2000027c 	.word	0x2000027c
 80010f4:	0800c468 	.word	0x0800c468
 80010f8:	0800c47c 	.word	0x0800c47c
 80010fc:	0800c494 	.word	0x0800c494
 8001100:	0800c4ac 	.word	0x0800c4ac
 8001104:	0800c4c4 	.word	0x0800c4c4
 8001108:	0800c4d8 	.word	0x0800c4d8
 800110c:	0800c504 	.word	0x0800c504
 8001110:	20000001 	.word	0x20000001
 8001114:	0800c538 	.word	0x0800c538
 8001118:	0800c578 	.word	0x0800c578
 800111c:	0800c580 	.word	0x0800c580
//					for (int i = 0; i < sizeof(OBC_UART_RX); i++) {
//						myDebug("%02x ", OBC_UART_RX[i]);
//					}
//					myDebug("\r\n");

					if (OBC_UART_RX[0] == 0x53 && OBC_UART_RX[(83)] == 0x7E) {
 8001120:	4b55      	ldr	r3, [pc, #340]	; (8001278 <HAL_UART_RxCpltCallback+0x458>)
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	2b53      	cmp	r3, #83	; 0x53
 8001126:	d11a      	bne.n	800115e <HAL_UART_RxCpltCallback+0x33e>
 8001128:	4b53      	ldr	r3, [pc, #332]	; (8001278 <HAL_UART_RxCpltCallback+0x458>)
 800112a:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800112e:	2b7e      	cmp	r3, #126	; 0x7e
 8001130:	d115      	bne.n	800115e <HAL_UART_RxCpltCallback+0x33e>
//						myDebug("--> Correct command received from OBC\n");
						obc_ilen = OBC_UART_RX[2];  //len of info
 8001132:	4b51      	ldr	r3, [pc, #324]	; (8001278 <HAL_UART_RxCpltCallback+0x458>)
 8001134:	789a      	ldrb	r2, [r3, #2]
 8001136:	4b51      	ldr	r3, [pc, #324]	; (800127c <HAL_UART_RxCpltCallback+0x45c>)
 8001138:	701a      	strb	r2, [r3, #0]
						PACKET_TYPE = OBC_UART_RX[1]; //packet_type
 800113a:	4b4f      	ldr	r3, [pc, #316]	; (8001278 <HAL_UART_RxCpltCallback+0x458>)
 800113c:	785a      	ldrb	r2, [r3, #1]
 800113e:	4b50      	ldr	r3, [pc, #320]	; (8001280 <HAL_UART_RxCpltCallback+0x460>)
 8001140:	701a      	strb	r2, [r3, #0]

						if (PACKET_TYPE == 0xB1) {
 8001142:	4b4f      	ldr	r3, [pc, #316]	; (8001280 <HAL_UART_RxCpltCallback+0x460>)
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	2bb1      	cmp	r3, #177	; 0xb1
 8001148:	d105      	bne.n	8001156 <HAL_UART_RxCpltCallback+0x336>
							BEACON_COUNT = 2;
 800114a:	4b4e      	ldr	r3, [pc, #312]	; (8001284 <HAL_UART_RxCpltCallback+0x464>)
 800114c:	2202      	movs	r2, #2
 800114e:	601a      	str	r2, [r3, #0]
							COUNT_BEACON = 2;
 8001150:	4b4d      	ldr	r3, [pc, #308]	; (8001288 <HAL_UART_RxCpltCallback+0x468>)
 8001152:	2202      	movs	r2, #2
 8001154:	601a      	str	r2, [r3, #0]
						}

						OBC_SUCCESS_DATA_RX_FLAG = 1;
 8001156:	4b4d      	ldr	r3, [pc, #308]	; (800128c <HAL_UART_RxCpltCallback+0x46c>)
 8001158:	2201      	movs	r2, #1
 800115a:	601a      	str	r2, [r3, #0]
 800115c:	e078      	b.n	8001250 <HAL_UART_RxCpltCallback+0x430>
					} else {
						myDebug("*** Incorrect command received from OBC\n");
 800115e:	484c      	ldr	r0, [pc, #304]	; (8001290 <HAL_UART_RxCpltCallback+0x470>)
 8001160:	f7ff fb0c 	bl	800077c <myDebug>
						if (HAL_UART_Transmit(&huart2, OBC_UART_RX, obc_plen,
 8001164:	4b4b      	ldr	r3, [pc, #300]	; (8001294 <HAL_UART_RxCpltCallback+0x474>)
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	b29a      	uxth	r2, r3
 800116a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800116e:	4942      	ldr	r1, [pc, #264]	; (8001278 <HAL_UART_RxCpltCallback+0x458>)
 8001170:	4849      	ldr	r0, [pc, #292]	; (8001298 <HAL_UART_RxCpltCallback+0x478>)
 8001172:	f005 fa34 	bl	80065de <HAL_UART_Transmit>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d00b      	beq.n	8001194 <HAL_UART_RxCpltCallback+0x374>
								2000) == HAL_OK
								|| HAL_UART_Transmit(&hlpuart1, OBC_UART_RX,
 800117c:	4b45      	ldr	r3, [pc, #276]	; (8001294 <HAL_UART_RxCpltCallback+0x474>)
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	b29a      	uxth	r2, r3
 8001182:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001186:	493c      	ldr	r1, [pc, #240]	; (8001278 <HAL_UART_RxCpltCallback+0x458>)
 8001188:	4844      	ldr	r0, [pc, #272]	; (800129c <HAL_UART_RxCpltCallback+0x47c>)
 800118a:	f005 fa28 	bl	80065de <HAL_UART_Transmit>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d15d      	bne.n	8001250 <HAL_UART_RxCpltCallback+0x430>
										obc_plen, 2000) == HAL_OK) {
							myDebug(
 8001194:	2155      	movs	r1, #85	; 0x55
 8001196:	4842      	ldr	r0, [pc, #264]	; (80012a0 <HAL_UART_RxCpltCallback+0x480>)
 8001198:	f7ff faf0 	bl	800077c <myDebug>
									"*** Incorrect command re-transmit to OBC, Length: %d\r\n",
									sizeof(OBC_UART_RX));

							for (int i = 0; i < sizeof(OBC_UART_RX); i++) {
 800119c:	2300      	movs	r3, #0
 800119e:	613b      	str	r3, [r7, #16]
 80011a0:	e00a      	b.n	80011b8 <HAL_UART_RxCpltCallback+0x398>
								myDebug("%02x ", OBC_UART_RX[i]);
 80011a2:	4a35      	ldr	r2, [pc, #212]	; (8001278 <HAL_UART_RxCpltCallback+0x458>)
 80011a4:	693b      	ldr	r3, [r7, #16]
 80011a6:	4413      	add	r3, r2
 80011a8:	781b      	ldrb	r3, [r3, #0]
 80011aa:	4619      	mov	r1, r3
 80011ac:	483d      	ldr	r0, [pc, #244]	; (80012a4 <HAL_UART_RxCpltCallback+0x484>)
 80011ae:	f7ff fae5 	bl	800077c <myDebug>
							for (int i = 0; i < sizeof(OBC_UART_RX); i++) {
 80011b2:	693b      	ldr	r3, [r7, #16]
 80011b4:	3301      	adds	r3, #1
 80011b6:	613b      	str	r3, [r7, #16]
 80011b8:	693b      	ldr	r3, [r7, #16]
 80011ba:	2b54      	cmp	r3, #84	; 0x54
 80011bc:	d9f1      	bls.n	80011a2 <HAL_UART_RxCpltCallback+0x382>
							}

							myDebug("\r\n");
 80011be:	483a      	ldr	r0, [pc, #232]	; (80012a8 <HAL_UART_RxCpltCallback+0x488>)
 80011c0:	f7ff fadc 	bl	800077c <myDebug>

							memset(OBC_UART_RX, '\0', sizeof(OBC_UART_RX));
 80011c4:	2255      	movs	r2, #85	; 0x55
 80011c6:	2100      	movs	r1, #0
 80011c8:	482b      	ldr	r0, [pc, #172]	; (8001278 <HAL_UART_RxCpltCallback+0x458>)
 80011ca:	f00a fc43 	bl	800ba54 <memset>

							OBC_SUCCESS_DATA_RX_FLAG = 0;
 80011ce:	4b2f      	ldr	r3, [pc, #188]	; (800128c <HAL_UART_RxCpltCallback+0x46c>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	601a      	str	r2, [r3, #0]
 80011d4:	e03c      	b.n	8001250 <HAL_UART_RxCpltCallback+0x430>
						}
					}
				}
			} else {
				myDebug("*** Incorrect packet type received from OBC\n");
 80011d6:	4835      	ldr	r0, [pc, #212]	; (80012ac <HAL_UART_RxCpltCallback+0x48c>)
 80011d8:	f7ff fad0 	bl	800077c <myDebug>

				if (HAL_UART_Transmit(&huart2, OBC_UART_RX, obc_plen, 1000)
 80011dc:	4b2d      	ldr	r3, [pc, #180]	; (8001294 <HAL_UART_RxCpltCallback+0x474>)
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	b29a      	uxth	r2, r3
 80011e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011e6:	4924      	ldr	r1, [pc, #144]	; (8001278 <HAL_UART_RxCpltCallback+0x458>)
 80011e8:	482b      	ldr	r0, [pc, #172]	; (8001298 <HAL_UART_RxCpltCallback+0x478>)
 80011ea:	f005 f9f8 	bl	80065de <HAL_UART_Transmit>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d00b      	beq.n	800120c <HAL_UART_RxCpltCallback+0x3ec>
						== HAL_OK
						|| HAL_UART_Transmit(&hlpuart1, OBC_UART_RX, obc_plen,
 80011f4:	4b27      	ldr	r3, [pc, #156]	; (8001294 <HAL_UART_RxCpltCallback+0x474>)
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	b29a      	uxth	r2, r3
 80011fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011fe:	491e      	ldr	r1, [pc, #120]	; (8001278 <HAL_UART_RxCpltCallback+0x458>)
 8001200:	4826      	ldr	r0, [pc, #152]	; (800129c <HAL_UART_RxCpltCallback+0x47c>)
 8001202:	f005 f9ec 	bl	80065de <HAL_UART_Transmit>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d121      	bne.n	8001250 <HAL_UART_RxCpltCallback+0x430>
								1000) == HAL_OK) {
					myDebug(
 800120c:	2155      	movs	r1, #85	; 0x55
 800120e:	4824      	ldr	r0, [pc, #144]	; (80012a0 <HAL_UART_RxCpltCallback+0x480>)
 8001210:	f7ff fab4 	bl	800077c <myDebug>
							"*** Incorrect command re-transmit to OBC, Length: %d\r\n",
							sizeof(OBC_UART_RX));

					for (int i = 0; i < sizeof(OBC_UART_RX); i++) {
 8001214:	2300      	movs	r3, #0
 8001216:	60fb      	str	r3, [r7, #12]
 8001218:	e00a      	b.n	8001230 <HAL_UART_RxCpltCallback+0x410>
						myDebug("%02x ", OBC_UART_RX[i]);
 800121a:	4a17      	ldr	r2, [pc, #92]	; (8001278 <HAL_UART_RxCpltCallback+0x458>)
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	4413      	add	r3, r2
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	4619      	mov	r1, r3
 8001224:	481f      	ldr	r0, [pc, #124]	; (80012a4 <HAL_UART_RxCpltCallback+0x484>)
 8001226:	f7ff faa9 	bl	800077c <myDebug>
					for (int i = 0; i < sizeof(OBC_UART_RX); i++) {
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	3301      	adds	r3, #1
 800122e:	60fb      	str	r3, [r7, #12]
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	2b54      	cmp	r3, #84	; 0x54
 8001234:	d9f1      	bls.n	800121a <HAL_UART_RxCpltCallback+0x3fa>
					}

					myDebug("\r\n");
 8001236:	481c      	ldr	r0, [pc, #112]	; (80012a8 <HAL_UART_RxCpltCallback+0x488>)
 8001238:	f7ff faa0 	bl	800077c <myDebug>

					memset(OBC_UART_RX, '\0', sizeof(OBC_UART_RX));
 800123c:	2255      	movs	r2, #85	; 0x55
 800123e:	2100      	movs	r1, #0
 8001240:	480d      	ldr	r0, [pc, #52]	; (8001278 <HAL_UART_RxCpltCallback+0x458>)
 8001242:	f00a fc07 	bl	800ba54 <memset>

					OBC_SUCCESS_DATA_RX_FLAG = 0;
 8001246:	4b11      	ldr	r3, [pc, #68]	; (800128c <HAL_UART_RxCpltCallback+0x46c>)
 8001248:	2200      	movs	r2, #0
 800124a:	601a      	str	r2, [r3, #0]
 800124c:	e000      	b.n	8001250 <HAL_UART_RxCpltCallback+0x430>
					if (OBC_UART_RX[0] == 0x53 && OBC_UART_RX[83] == 0x7E) {
 800124e:	bf00      	nop
				}
			}

			HAL_UART_Receive_DMA(&huart2, OBC_UART_RX, obc_plen);
 8001250:	4b10      	ldr	r3, [pc, #64]	; (8001294 <HAL_UART_RxCpltCallback+0x474>)
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	b29b      	uxth	r3, r3
 8001256:	461a      	mov	r2, r3
 8001258:	4907      	ldr	r1, [pc, #28]	; (8001278 <HAL_UART_RxCpltCallback+0x458>)
 800125a:	480f      	ldr	r0, [pc, #60]	; (8001298 <HAL_UART_RxCpltCallback+0x478>)
 800125c:	f005 fb0a 	bl	8006874 <HAL_UART_Receive_DMA>

			HAL_UART_Receive_DMA(&hlpuart1, OBC_UART_RX, obc_plen);
 8001260:	4b0c      	ldr	r3, [pc, #48]	; (8001294 <HAL_UART_RxCpltCallback+0x474>)
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	b29b      	uxth	r3, r3
 8001266:	461a      	mov	r2, r3
 8001268:	4903      	ldr	r1, [pc, #12]	; (8001278 <HAL_UART_RxCpltCallback+0x458>)
 800126a:	480c      	ldr	r0, [pc, #48]	; (800129c <HAL_UART_RxCpltCallback+0x47c>)
 800126c:	f005 fb02 	bl	8006874 <HAL_UART_Receive_DMA>
		}
	}
}
 8001270:	bf00      	nop
 8001272:	3720      	adds	r7, #32
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	20000318 	.word	0x20000318
 800127c:	20000316 	.word	0x20000316
 8001280:	200004b0 	.word	0x200004b0
 8001284:	20000004 	.word	0x20000004
 8001288:	20000008 	.word	0x20000008
 800128c:	20000370 	.word	0x20000370
 8001290:	0800c584 	.word	0x0800c584
 8001294:	20000001 	.word	0x20000001
 8001298:	20000658 	.word	0x20000658
 800129c:	20000530 	.word	0x20000530
 80012a0:	0800c5b0 	.word	0x0800c5b0
 80012a4:	0800c578 	.word	0x0800c578
 80012a8:	0800c580 	.word	0x0800c580
 80012ac:	0800c5e8 	.word	0x0800c5e8

080012b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80012b4:	b0b1      	sub	sp, #196	; 0xc4
 80012b6:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012b8:	f002 f808 	bl	80032cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012bc:	f000 fe92 	bl	8001fe4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012c0:	f7ff fca6 	bl	8000c10 <MX_GPIO_Init>
  MX_DMA_Init();
 80012c4:	f7ff faac 	bl	8000820 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80012c8:	f001 fd84 	bl	8002dd4 <MX_USART2_UART_Init>
  MX_LPUART1_UART_Init();
 80012cc:	f001 fcea 	bl	8002ca4 <MX_LPUART1_UART_Init>
  MX_USART1_UART_Init();
 80012d0:	f001 fd34 	bl	8002d3c <MX_USART1_UART_Init>
  MX_SubGHz_Phy_Init();
 80012d4:	f00a f813 	bl	800b2fe <MX_SubGHz_Phy_Init>
  MX_TIM2_Init();
 80012d8:	f001 fbae 	bl	8002a38 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

	HAL_TIM_Base_Start(&htim2);
 80012dc:	489d      	ldr	r0, [pc, #628]	; (8001554 <main+0x2a4>)
 80012de:	f004 fea7 	bl	8006030 <HAL_TIM_Base_Start>

	myDebug("########## Slippers2Sat SATELLITE COM: BEGIN ##########\r\n");
 80012e2:	489d      	ldr	r0, [pc, #628]	; (8001558 <main+0x2a8>)
 80012e4:	f7ff fa4a 	bl	800077c <myDebug>
	myDebug("########## COMMUNICATION PARAMETERS ##########\r\n");
 80012e8:	489c      	ldr	r0, [pc, #624]	; (800155c <main+0x2ac>)
 80012ea:	f7ff fa47 	bl	800077c <myDebug>
	myDebug("Modulation: GFSK PACKET\r\n");
 80012ee:	489c      	ldr	r0, [pc, #624]	; (8001560 <main+0x2b0>)
 80012f0:	f7ff fa44 	bl	800077c <myDebug>
	myDebug("FREQUENCY MODES: DOWNLINK FREQ: %luHz and UPLINK FREQ: %lu Hz\r\n",
 80012f4:	4a9b      	ldr	r2, [pc, #620]	; (8001564 <main+0x2b4>)
 80012f6:	499c      	ldr	r1, [pc, #624]	; (8001568 <main+0x2b8>)
 80012f8:	489c      	ldr	r0, [pc, #624]	; (800156c <main+0x2bc>)
 80012fa:	f7ff fa3f 	bl	800077c <myDebug>
	FREQ_437_MHZ, FREQ_435_MHZ);
	myDebug("STM32 BSP_SubGHz-WL Radio: Low Power\n");
 80012fe:	489c      	ldr	r0, [pc, #624]	; (8001570 <main+0x2c0>)
 8001300:	f7ff fa3c 	bl	800077c <myDebug>
	myDebug(
 8001304:	230e      	movs	r3, #14
 8001306:	9300      	str	r3, [sp, #0]
 8001308:	2301      	movs	r3, #1
 800130a:	2200      	movs	r2, #0
 800130c:	2107      	movs	r1, #7
 800130e:	4899      	ldr	r0, [pc, #612]	; (8001574 <main+0x2c4>)
 8001310:	f7ff fa34 	bl	800077c <myDebug>
			"POWER CONFIG:::- \n"
					"\t PA_DUTY_CYCLE: %x, HP_MAX: %x, PA_SEL: %x, POWER TX: %u dBm\r\n",
			PA_DUTY_CYCLE, HP_MAX, PA_SEL, POWER);

	myDebug("\n########## Wait for Handshake ##########\r\n");
 8001314:	4898      	ldr	r0, [pc, #608]	; (8001578 <main+0x2c8>)
 8001316:	f7ff fa31 	bl	800077c <myDebug>

	while (OBC_HANDSHAKE_FLAG == 0) {
 800131a:	e001      	b.n	8001320 <main+0x70>
		WAIT_FOR_HANDSHAKE();
 800131c:	f001 f94c 	bl	80025b8 <WAIT_FOR_HANDSHAKE>
	while (OBC_HANDSHAKE_FLAG == 0) {
 8001320:	4b96      	ldr	r3, [pc, #600]	; (800157c <main+0x2cc>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d0f9      	beq.n	800131c <main+0x6c>
	}

	SUBGRF_Init(DioIrqHndlr);
 8001328:	4895      	ldr	r0, [pc, #596]	; (8001580 <main+0x2d0>)
 800132a:	f008 fd9f 	bl	8009e6c <SUBGRF_Init>

	SUBGRF_SetDioIrqParams(
 800132e:	2300      	movs	r3, #0
 8001330:	2200      	movs	r2, #0
 8001332:	f240 210f 	movw	r1, #527	; 0x20f
 8001336:	f240 200f 	movw	r0, #527	; 0x20f
 800133a:	f009 f8fd 	bl	800a538 <SUBGRF_SetDioIrqParams>
					| IRQ_RX_TX_TIMEOUT | IRQ_SYNCWORD_VALID,
			IRQ_TX_DONE | IRQ_PREAMBLE_DETECTED | IRQ_RX_DONE
					| IRQ_RX_TX_TIMEOUT | IRQ_SYNCWORD_VALID, IRQ_RADIO_NONE,
			IRQ_RADIO_NONE);

	setPacketParams(rx_buffer_len);
 800133e:	4b91      	ldr	r3, [pc, #580]	; (8001584 <main+0x2d4>)
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	4618      	mov	r0, r3
 8001344:	f7ff fcf4 	bl	8000d30 <setPacketParams>
	setModulationParams(GFSK_BR_1200, GFSK_FDEV_1200);
 8001348:	f640 31b8 	movw	r1, #3000	; 0xbb8
 800134c:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8001350:	f7ff fd18 	bl	8000d84 <setModulationParams>
	radioConfig(rx_buffer, rx_buffer_len);
 8001354:	4b8b      	ldr	r3, [pc, #556]	; (8001584 <main+0x2d4>)
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	4619      	mov	r1, r3
 800135a:	488b      	ldr	r0, [pc, #556]	; (8001588 <main+0x2d8>)
 800135c:	f7ff fd30 	bl	8000dc0 <radioConfig>

	myDebug(
 8001360:	488a      	ldr	r0, [pc, #552]	; (800158c <main+0x2dc>)
 8001362:	f7ff fa0b 	bl	800077c <myDebug>
			"\n########## Operation Starts, Perform any one operation: ##########\r\n");
	myDebug("1. Transmit from Satellite\r\n");
 8001366:	488a      	ldr	r0, [pc, #552]	; (8001590 <main+0x2e0>)
 8001368:	f7ff fa08 	bl	800077c <myDebug>
	myDebug("2. Wait to receive GS Command\r\n");
 800136c:	4889      	ldr	r0, [pc, #548]	; (8001594 <main+0x2e4>)
 800136e:	f7ff fa05 	bl	800077c <myDebug>

	myDebug("\n########## RX Configuration: ##########\n");
 8001372:	4889      	ldr	r0, [pc, #548]	; (8001598 <main+0x2e8>)
 8001374:	f7ff fa02 	bl	800077c <myDebug>

	myDebug("FREQUENCY MODS: UPLINK FREQ: %lu Hz\r\n", FREQ_435_MHZ);
 8001378:	497a      	ldr	r1, [pc, #488]	; (8001564 <main+0x2b4>)
 800137a:	4888      	ldr	r0, [pc, #544]	; (800159c <main+0x2ec>)
 800137c:	f7ff f9fe 	bl	800077c <myDebug>
	myDebug("Bit Rate: 	%d\n\r", mod_params.Params.Gfsk.BitRate);
 8001380:	4b87      	ldr	r3, [pc, #540]	; (80015a0 <main+0x2f0>)
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	4619      	mov	r1, r3
 8001386:	4887      	ldr	r0, [pc, #540]	; (80015a4 <main+0x2f4>)
 8001388:	f7ff f9f8 	bl	800077c <myDebug>
	myDebug("Frequency Deviation: 	%d\n\r", mod_params.Params.Gfsk.Fdev);
 800138c:	4b84      	ldr	r3, [pc, #528]	; (80015a0 <main+0x2f0>)
 800138e:	689b      	ldr	r3, [r3, #8]
 8001390:	4619      	mov	r1, r3
 8001392:	4885      	ldr	r0, [pc, #532]	; (80015a8 <main+0x2f8>)
 8001394:	f7ff f9f2 	bl	800077c <myDebug>
	myDebug("RECEVING BANDWIDTH: 	%d\n\r", mod_params.Params.Gfsk.Bandwidth);
 8001398:	4b81      	ldr	r3, [pc, #516]	; (80015a0 <main+0x2f0>)
 800139a:	7b5b      	ldrb	r3, [r3, #13]
 800139c:	4619      	mov	r1, r3
 800139e:	4883      	ldr	r0, [pc, #524]	; (80015ac <main+0x2fc>)
 80013a0:	f7ff f9ec 	bl	800077c <myDebug>
	myDebug("Packet Type 			%d\n\r", pkt_params.PacketType);
 80013a4:	4b82      	ldr	r3, [pc, #520]	; (80015b0 <main+0x300>)
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	4619      	mov	r1, r3
 80013aa:	4882      	ldr	r0, [pc, #520]	; (80015b4 <main+0x304>)
 80013ac:	f7ff f9e6 	bl	800077c <myDebug>
	myDebug("PayloadLength 			%d\n\r", pkt_params.Params.Gfsk.PayloadLength);
 80013b0:	4b7f      	ldr	r3, [pc, #508]	; (80015b0 <main+0x300>)
 80013b2:	7a1b      	ldrb	r3, [r3, #8]
 80013b4:	4619      	mov	r1, r3
 80013b6:	4880      	ldr	r0, [pc, #512]	; (80015b8 <main+0x308>)
 80013b8:	f7ff f9e0 	bl	800077c <myDebug>
	myDebug("PreambleLength 		%d\n\r", pkt_params.Params.Gfsk.PreambleLength);
 80013bc:	4b7c      	ldr	r3, [pc, #496]	; (80015b0 <main+0x300>)
 80013be:	885b      	ldrh	r3, [r3, #2]
 80013c0:	4619      	mov	r1, r3
 80013c2:	487e      	ldr	r0, [pc, #504]	; (80015bc <main+0x30c>)
 80013c4:	f7ff f9da 	bl	800077c <myDebug>
	myDebug("PreambleMinDetect		%d\n\r",
			pkt_params.Params.Gfsk.PreambleMinDetect);
 80013c8:	4b79      	ldr	r3, [pc, #484]	; (80015b0 <main+0x300>)
 80013ca:	791b      	ldrb	r3, [r3, #4]
	myDebug("PreambleMinDetect		%d\n\r",
 80013cc:	4619      	mov	r1, r3
 80013ce:	487c      	ldr	r0, [pc, #496]	; (80015c0 <main+0x310>)
 80013d0:	f7ff f9d4 	bl	800077c <myDebug>
	myDebug("HeaderType 			%d\n\r", pkt_params.Params.Gfsk.HeaderType);
 80013d4:	4b76      	ldr	r3, [pc, #472]	; (80015b0 <main+0x300>)
 80013d6:	79db      	ldrb	r3, [r3, #7]
 80013d8:	4619      	mov	r1, r3
 80013da:	487a      	ldr	r0, [pc, #488]	; (80015c4 <main+0x314>)
 80013dc:	f7ff f9ce 	bl	800077c <myDebug>
	myDebug("__________*******************__________\r\n");
 80013e0:	4879      	ldr	r0, [pc, #484]	; (80015c8 <main+0x318>)
 80013e2:	f7ff f9cb 	bl	800077c <myDebug>

	SUBGRF_SetRfFrequency(FREQ_435_MHZ);
 80013e6:	485f      	ldr	r0, [pc, #380]	; (8001564 <main+0x2b4>)
 80013e8:	f009 f902 	bl	800a5f0 <SUBGRF_SetRfFrequency>
	SUBGRF_SetSwitch(RFO_LP, RFSWITCH_RX); /*Set RF switch*/
 80013ec:	2100      	movs	r1, #0
 80013ee:	2001      	movs	r0, #1
 80013f0:	f009 fd46 	bl	800ae80 <SUBGRF_SetSwitch>
	SUBGRF_SetRxBoosted(0xFFFFFF);
 80013f4:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80013f8:	f008 ff26 	bl	800a248 <SUBGRF_SetRxBoosted>

	HAL_UART_Receive_DMA(&huart2, OBC_UART_RX, obc_plen);
 80013fc:	4b73      	ldr	r3, [pc, #460]	; (80015cc <main+0x31c>)
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	b29b      	uxth	r3, r3
 8001402:	461a      	mov	r2, r3
 8001404:	4972      	ldr	r1, [pc, #456]	; (80015d0 <main+0x320>)
 8001406:	4873      	ldr	r0, [pc, #460]	; (80015d4 <main+0x324>)
 8001408:	f005 fa34 	bl	8006874 <HAL_UART_Receive_DMA>

	HAL_UART_Receive_DMA(&hlpuart1, OBC_UART_RX, obc_plen);
 800140c:	4b6f      	ldr	r3, [pc, #444]	; (80015cc <main+0x31c>)
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	b29b      	uxth	r3, r3
 8001412:	461a      	mov	r2, r3
 8001414:	496e      	ldr	r1, [pc, #440]	; (80015d0 <main+0x320>)
 8001416:	4870      	ldr	r0, [pc, #448]	; (80015d8 <main+0x328>)
 8001418:	f005 fa2c 	bl	8006874 <HAL_UART_Receive_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */
    MX_SubGHz_Phy_Process();
 800141c:	f009 ff77 	bl	800b30e <MX_SubGHz_Phy_Process>

    /* USER CODE BEGIN 3 */

		delay_us(500000);
 8001420:	486e      	ldr	r0, [pc, #440]	; (80015dc <main+0x32c>)
 8001422:	f7ff f991 	bl	8000748 <delay_us>

		if (OBC_SUCCESS_DATA_RX_FLAG) {
 8001426:	4b6e      	ldr	r3, [pc, #440]	; (80015e0 <main+0x330>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	2b00      	cmp	r3, #0
 800142c:	f000 80e6 	beq.w	80015fc <main+0x34c>

			getAX25Packet(OBC_UART_RX, obc_ilen);
 8001430:	4b6c      	ldr	r3, [pc, #432]	; (80015e4 <main+0x334>)
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	4619      	mov	r1, r3
 8001436:	4866      	ldr	r0, [pc, #408]	; (80015d0 <main+0x320>)
 8001438:	f7ff f8fc 	bl	8000634 <getAX25Packet>

			tx_buffer_len = countsDataBetweenFlags(temp_tx_buffer,
 800143c:	2196      	movs	r1, #150	; 0x96
 800143e:	486a      	ldr	r0, [pc, #424]	; (80015e8 <main+0x338>)
 8001440:	f7ff fc40 	bl	8000cc4 <countsDataBetweenFlags>
 8001444:	4603      	mov	r3, r0
 8001446:	4a69      	ldr	r2, [pc, #420]	; (80015ec <main+0x33c>)
 8001448:	6013      	str	r3, [r2, #0]
					sizeof(temp_tx_buffer));

//			myDebug("AX.25 complete GS packet ready to TX: 0x%x\r\n",ntemp_tx_buffer);
			for (int j = 0; j < tx_buffer_len; j++) {
 800144a:	2300      	movs	r3, #0
 800144c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001450:	e00f      	b.n	8001472 <main+0x1c2>
				tx_buffer[j] = temp_tx_buffer[j];
 8001452:	4a65      	ldr	r2, [pc, #404]	; (80015e8 <main+0x338>)
 8001454:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001458:	4413      	add	r3, r2
 800145a:	7819      	ldrb	r1, [r3, #0]
 800145c:	4a64      	ldr	r2, [pc, #400]	; (80015f0 <main+0x340>)
 800145e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001462:	4413      	add	r3, r2
 8001464:	460a      	mov	r2, r1
 8001466:	701a      	strb	r2, [r3, #0]
			for (int j = 0; j < tx_buffer_len; j++) {
 8001468:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800146c:	3301      	adds	r3, #1
 800146e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001472:	4b5e      	ldr	r3, [pc, #376]	; (80015ec <main+0x33c>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800147a:	429a      	cmp	r2, r3
 800147c:	dbe9      	blt.n	8001452 <main+0x1a2>
//				myDebug("%02x ", tx_buffer[j]);
			}
//			myDebug("\r\n");
//			myDebug("size of tx_buffer = %d\r\n", tx_buffer_len);

			memset(OBC_UART_RX, '\0', obc_ilen);
 800147e:	4b59      	ldr	r3, [pc, #356]	; (80015e4 <main+0x334>)
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	461a      	mov	r2, r3
 8001484:	2100      	movs	r1, #0
 8001486:	4852      	ldr	r0, [pc, #328]	; (80015d0 <main+0x320>)
 8001488:	f00a fae4 	bl	800ba54 <memset>
			memset(temp_tx_buffer, '\0', sizeof(temp_tx_buffer));
 800148c:	2296      	movs	r2, #150	; 0x96
 800148e:	2100      	movs	r1, #0
 8001490:	4855      	ldr	r0, [pc, #340]	; (80015e8 <main+0x338>)
 8001492:	f00a fadf 	bl	800ba54 <memset>

			setPacketParams(tx_buffer_len);
 8001496:	4b55      	ldr	r3, [pc, #340]	; (80015ec <main+0x33c>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	b2db      	uxtb	r3, r3
 800149c:	4618      	mov	r0, r3
 800149e:	f7ff fc47 	bl	8000d30 <setPacketParams>
			setModulationParams(GFSK_BR_4800, GFSK_FDEV_4800);
 80014a2:	f642 61e0 	movw	r1, #12000	; 0x2ee0
 80014a6:	f44f 5096 	mov.w	r0, #4800	; 0x12c0
 80014aa:	f7ff fc6b 	bl	8000d84 <setModulationParams>
			radioConfig(tx_buffer, tx_buffer_len);
 80014ae:	4b4f      	ldr	r3, [pc, #316]	; (80015ec <main+0x33c>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	b2db      	uxtb	r3, r3
 80014b4:	4619      	mov	r1, r3
 80014b6:	484e      	ldr	r0, [pc, #312]	; (80015f0 <main+0x340>)
 80014b8:	f7ff fc82 	bl	8000dc0 <radioConfig>

			myDebug("\n########## TX Configuration: ##########\n");
 80014bc:	484d      	ldr	r0, [pc, #308]	; (80015f4 <main+0x344>)
 80014be:	f7ff f95d 	bl	800077c <myDebug>

			myDebug("FREQUENCY MODS: DOWNLINK FREQ: %lu Hz\r\n", FREQ_437_MHZ);
 80014c2:	4929      	ldr	r1, [pc, #164]	; (8001568 <main+0x2b8>)
 80014c4:	484c      	ldr	r0, [pc, #304]	; (80015f8 <main+0x348>)
 80014c6:	f7ff f959 	bl	800077c <myDebug>
			myDebug("Bit Rate: 	%d\n\r", mod_params.Params.Gfsk.BitRate);
 80014ca:	4b35      	ldr	r3, [pc, #212]	; (80015a0 <main+0x2f0>)
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	4619      	mov	r1, r3
 80014d0:	4834      	ldr	r0, [pc, #208]	; (80015a4 <main+0x2f4>)
 80014d2:	f7ff f953 	bl	800077c <myDebug>
			myDebug("Frequency Deviation: 	%d\n\r",
 80014d6:	4b32      	ldr	r3, [pc, #200]	; (80015a0 <main+0x2f0>)
 80014d8:	689b      	ldr	r3, [r3, #8]
 80014da:	4619      	mov	r1, r3
 80014dc:	4832      	ldr	r0, [pc, #200]	; (80015a8 <main+0x2f8>)
 80014de:	f7ff f94d 	bl	800077c <myDebug>
					mod_params.Params.Gfsk.Fdev);
			myDebug("RECEVING BANDWIDTH: 	%d\n\r",
					mod_params.Params.Gfsk.Bandwidth);
 80014e2:	4b2f      	ldr	r3, [pc, #188]	; (80015a0 <main+0x2f0>)
 80014e4:	7b5b      	ldrb	r3, [r3, #13]
			myDebug("RECEVING BANDWIDTH: 	%d\n\r",
 80014e6:	4619      	mov	r1, r3
 80014e8:	4830      	ldr	r0, [pc, #192]	; (80015ac <main+0x2fc>)
 80014ea:	f7ff f947 	bl	800077c <myDebug>
			myDebug("Packet Type 			%d\n\r", pkt_params.PacketType);
 80014ee:	4b30      	ldr	r3, [pc, #192]	; (80015b0 <main+0x300>)
 80014f0:	781b      	ldrb	r3, [r3, #0]
 80014f2:	4619      	mov	r1, r3
 80014f4:	482f      	ldr	r0, [pc, #188]	; (80015b4 <main+0x304>)
 80014f6:	f7ff f941 	bl	800077c <myDebug>
			myDebug("PayloadLength 			%d\n\r",
					pkt_params.Params.Gfsk.PayloadLength);
 80014fa:	4b2d      	ldr	r3, [pc, #180]	; (80015b0 <main+0x300>)
 80014fc:	7a1b      	ldrb	r3, [r3, #8]
			myDebug("PayloadLength 			%d\n\r",
 80014fe:	4619      	mov	r1, r3
 8001500:	482d      	ldr	r0, [pc, #180]	; (80015b8 <main+0x308>)
 8001502:	f7ff f93b 	bl	800077c <myDebug>
			myDebug("PreambleLength 		%d\n\r",
					pkt_params.Params.Gfsk.PreambleLength);
 8001506:	4b2a      	ldr	r3, [pc, #168]	; (80015b0 <main+0x300>)
 8001508:	885b      	ldrh	r3, [r3, #2]
			myDebug("PreambleLength 		%d\n\r",
 800150a:	4619      	mov	r1, r3
 800150c:	482b      	ldr	r0, [pc, #172]	; (80015bc <main+0x30c>)
 800150e:	f7ff f935 	bl	800077c <myDebug>
			myDebug("PreambleMinDetect		%d\n\r",
					pkt_params.Params.Gfsk.PreambleMinDetect);
 8001512:	4b27      	ldr	r3, [pc, #156]	; (80015b0 <main+0x300>)
 8001514:	791b      	ldrb	r3, [r3, #4]
			myDebug("PreambleMinDetect		%d\n\r",
 8001516:	4619      	mov	r1, r3
 8001518:	4829      	ldr	r0, [pc, #164]	; (80015c0 <main+0x310>)
 800151a:	f7ff f92f 	bl	800077c <myDebug>
			myDebug("HeaderType 			%d\n\r", pkt_params.Params.Gfsk.HeaderType);
 800151e:	4b24      	ldr	r3, [pc, #144]	; (80015b0 <main+0x300>)
 8001520:	79db      	ldrb	r3, [r3, #7]
 8001522:	4619      	mov	r1, r3
 8001524:	4827      	ldr	r0, [pc, #156]	; (80015c4 <main+0x314>)
 8001526:	f7ff f929 	bl	800077c <myDebug>
			myDebug("__________*******************__________\r\n");
 800152a:	4827      	ldr	r0, [pc, #156]	; (80015c8 <main+0x318>)
 800152c:	f7ff f926 	bl	800077c <myDebug>

			SUBGRF_SetRfFrequency(FREQ_437_MHZ);
 8001530:	480d      	ldr	r0, [pc, #52]	; (8001568 <main+0x2b8>)
 8001532:	f009 f85d 	bl	800a5f0 <SUBGRF_SetRfFrequency>
			SUBGRF_SetSwitch(RFO_LP, RFSWITCH_TX);
 8001536:	2101      	movs	r1, #1
 8001538:	2001      	movs	r0, #1
 800153a:	f009 fca1 	bl	800ae80 <SUBGRF_SetSwitch>
			SUBGRF_SendPayload(tx_buffer, tx_buffer_len, 0);
 800153e:	4b2b      	ldr	r3, [pc, #172]	; (80015ec <main+0x33c>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	b2db      	uxtb	r3, r3
 8001544:	2200      	movs	r2, #0
 8001546:	4619      	mov	r1, r3
 8001548:	4829      	ldr	r0, [pc, #164]	; (80015f0 <main+0x340>)
 800154a:	f008 fd13 	bl	8009f74 <SUBGRF_SendPayload>
 800154e:	f000 bd25 	b.w	8001f9c <main+0xcec>
 8001552:	bf00      	nop
 8001554:	200004e0 	.word	0x200004e0
 8001558:	0800c618 	.word	0x0800c618
 800155c:	0800c654 	.word	0x0800c654
 8001560:	0800c688 	.word	0x0800c688
 8001564:	19f25968 	.word	0x19f25968
 8001568:	1a11d018 	.word	0x1a11d018
 800156c:	0800c6a4 	.word	0x0800c6a4
 8001570:	0800c6e4 	.word	0x0800c6e4
 8001574:	0800c70c 	.word	0x0800c70c
 8001578:	0800c760 	.word	0x0800c760
 800157c:	200004a8 	.word	0x200004a8
 8001580:	080020a5 	.word	0x080020a5
 8001584:	20000000 	.word	0x20000000
 8001588:	200002ac 	.word	0x200002ac
 800158c:	0800c78c 	.word	0x0800c78c
 8001590:	0800c7d4 	.word	0x0800c7d4
 8001594:	0800c7f4 	.word	0x0800c7f4
 8001598:	0800c814 	.word	0x0800c814
 800159c:	0800c840 	.word	0x0800c840
 80015a0:	20000290 	.word	0x20000290
 80015a4:	0800c420 	.word	0x0800c420
 80015a8:	0800c430 	.word	0x0800c430
 80015ac:	0800c44c 	.word	0x0800c44c
 80015b0:	2000027c 	.word	0x2000027c
 80015b4:	0800c468 	.word	0x0800c468
 80015b8:	0800c47c 	.word	0x0800c47c
 80015bc:	0800c494 	.word	0x0800c494
 80015c0:	0800c4ac 	.word	0x0800c4ac
 80015c4:	0800c4c4 	.word	0x0800c4c4
 80015c8:	0800c4d8 	.word	0x0800c4d8
 80015cc:	20000001 	.word	0x20000001
 80015d0:	20000318 	.word	0x20000318
 80015d4:	20000658 	.word	0x20000658
 80015d8:	20000530 	.word	0x20000530
 80015dc:	0007a120 	.word	0x0007a120
 80015e0:	20000370 	.word	0x20000370
 80015e4:	20000316 	.word	0x20000316
 80015e8:	20000374 	.word	0x20000374
 80015ec:	200004a4 	.word	0x200004a4
 80015f0:	2000040c 	.word	0x2000040c
 80015f4:	0800c3cc 	.word	0x0800c3cc
 80015f8:	0800c3f8 	.word	0x0800c3f8

		} else if (RX_FLAG == 1) {
 80015fc:	4ba8      	ldr	r3, [pc, #672]	; (80018a0 <main+0x5f0>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	2b01      	cmp	r3, #1
 8001602:	f040 84cb 	bne.w	8001f9c <main+0xcec>
 8001606:	466b      	mov	r3, sp
 8001608:	60bb      	str	r3, [r7, #8]
			RX_FLAG = 0;
 800160a:	4ba5      	ldr	r3, [pc, #660]	; (80018a0 <main+0x5f0>)
 800160c:	2200      	movs	r2, #0
 800160e:	601a      	str	r2, [r3, #0]

			uint8_t temp_rx_buffer_len = 0;
 8001610:	2300      	movs	r3, #0
 8001612:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
			temp_rx_buffer_len = countsDataBetweenFlags(rx_buffer,
 8001616:	4ba3      	ldr	r3, [pc, #652]	; (80018a4 <main+0x5f4>)
 8001618:	781b      	ldrb	r3, [r3, #0]
 800161a:	4619      	mov	r1, r3
 800161c:	48a2      	ldr	r0, [pc, #648]	; (80018a8 <main+0x5f8>)
 800161e:	f7ff fb51 	bl	8000cc4 <countsDataBetweenFlags>
 8001622:	4603      	mov	r3, r0
 8001624:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
					rx_buffer_len); // 7e...7e, size

			uint8_t crc_buff_len = temp_rx_buffer_len - 4;
 8001628:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 800162c:	3b04      	subs	r3, #4
 800162e:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
			uint8_t crc_buff[crc_buff_len];
 8001632:	f897 208a 	ldrb.w	r2, [r7, #138]	; 0x8a
 8001636:	4611      	mov	r1, r2
 8001638:	60f9      	str	r1, [r7, #12]
 800163a:	460b      	mov	r3, r1
 800163c:	3b01      	subs	r3, #1
 800163e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001642:	b2cb      	uxtb	r3, r1
 8001644:	2200      	movs	r2, #0
 8001646:	4698      	mov	r8, r3
 8001648:	4691      	mov	r9, r2
 800164a:	f04f 0200 	mov.w	r2, #0
 800164e:	f04f 0300 	mov.w	r3, #0
 8001652:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001656:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800165a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800165e:	b2cb      	uxtb	r3, r1
 8001660:	2200      	movs	r2, #0
 8001662:	469a      	mov	sl, r3
 8001664:	4693      	mov	fp, r2
 8001666:	f04f 0200 	mov.w	r2, #0
 800166a:	f04f 0300 	mov.w	r3, #0
 800166e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001672:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001676:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800167a:	460b      	mov	r3, r1
 800167c:	3307      	adds	r3, #7
 800167e:	08db      	lsrs	r3, r3, #3
 8001680:	00db      	lsls	r3, r3, #3
 8001682:	ebad 0d03 	sub.w	sp, sp, r3
 8001686:	ab02      	add	r3, sp, #8
 8001688:	3300      	adds	r3, #0
 800168a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

			int j = 0;
 800168e:	2300      	movs	r3, #0
 8001690:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
			for (int i = 1; i <= crc_buff_len; i++) {
 8001694:	2301      	movs	r3, #1
 8001696:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800169a:	e015      	b.n	80016c8 <main+0x418>
				crc_buff[j] = rx_buffer[i]; // index 1 to previous byte of crc
 800169c:	4a82      	ldr	r2, [pc, #520]	; (80018a8 <main+0x5f8>)
 800169e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80016a2:	4413      	add	r3, r2
 80016a4:	7819      	ldrb	r1, [r3, #0]
 80016a6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80016aa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80016ae:	4413      	add	r3, r2
 80016b0:	460a      	mov	r2, r1
 80016b2:	701a      	strb	r2, [r3, #0]
				//				myDebug("%02x ", crc_buff[j]);
				j++;
 80016b4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80016b8:	3301      	adds	r3, #1
 80016ba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
			for (int i = 1; i <= crc_buff_len; i++) {
 80016be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80016c2:	3301      	adds	r3, #1
 80016c4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80016c8:	f897 308a 	ldrb.w	r3, [r7, #138]	; 0x8a
 80016cc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80016d0:	429a      	cmp	r2, r3
 80016d2:	dde3      	ble.n	800169c <main+0x3ec>
			}

			memset(rx_buffer, '\0', sizeof(rx_buffer));
 80016d4:	2269      	movs	r2, #105	; 0x69
 80016d6:	2100      	movs	r1, #0
 80016d8:	4873      	ldr	r0, [pc, #460]	; (80018a8 <main+0x5f8>)
 80016da:	f00a f9bb 	bl	800ba54 <memset>

			uint8_t gs_cmd_buff[100];
			int gs_cmd_len = bit_destuffing(crc_buff, gs_cmd_buff,
 80016de:	f897 208a 	ldrb.w	r2, [r7, #138]	; 0x8a
 80016e2:	f107 0310 	add.w	r3, r7, #16
 80016e6:	4619      	mov	r1, r3
 80016e8:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 80016ec:	f7ff f9b9 	bl	8000a62 <bit_destuffing>
 80016f0:	67f8      	str	r0, [r7, #124]	; 0x7c
					crc_buff_len);
			gs_cmd_len--;
 80016f2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80016f4:	3b01      	subs	r3, #1
 80016f6:	67fb      	str	r3, [r7, #124]	; 0x7c

			uint8_t main_gs_cmd[gs_cmd_len];
 80016f8:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
 80016fa:	1e63      	subs	r3, r4, #1
 80016fc:	67bb      	str	r3, [r7, #120]	; 0x78
 80016fe:	4622      	mov	r2, r4
 8001700:	2300      	movs	r3, #0
 8001702:	4615      	mov	r5, r2
 8001704:	461e      	mov	r6, r3
 8001706:	f04f 0200 	mov.w	r2, #0
 800170a:	f04f 0300 	mov.w	r3, #0
 800170e:	00f3      	lsls	r3, r6, #3
 8001710:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8001714:	00ea      	lsls	r2, r5, #3
 8001716:	4622      	mov	r2, r4
 8001718:	2300      	movs	r3, #0
 800171a:	603a      	str	r2, [r7, #0]
 800171c:	607b      	str	r3, [r7, #4]
 800171e:	f04f 0200 	mov.w	r2, #0
 8001722:	f04f 0300 	mov.w	r3, #0
 8001726:	6879      	ldr	r1, [r7, #4]
 8001728:	00cb      	lsls	r3, r1, #3
 800172a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800172e:	4684      	mov	ip, r0
 8001730:	ea43 735c 	orr.w	r3, r3, ip, lsr #29
 8001734:	4601      	mov	r1, r0
 8001736:	00ca      	lsls	r2, r1, #3
 8001738:	4623      	mov	r3, r4
 800173a:	3307      	adds	r3, #7
 800173c:	08db      	lsrs	r3, r3, #3
 800173e:	00db      	lsls	r3, r3, #3
 8001740:	ebad 0d03 	sub.w	sp, sp, r3
 8001744:	ab02      	add	r3, sp, #8
 8001746:	3300      	adds	r3, #0
 8001748:	677b      	str	r3, [r7, #116]	; 0x74
			for (int i = 0; i < gs_cmd_len; i++) {
 800174a:	2300      	movs	r3, #0
 800174c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001750:	e010      	b.n	8001774 <main+0x4c4>
				main_gs_cmd[i] = gs_cmd_buff[i];
 8001752:	f107 0210 	add.w	r2, r7, #16
 8001756:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800175a:	4413      	add	r3, r2
 800175c:	7819      	ldrb	r1, [r3, #0]
 800175e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001760:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001764:	4413      	add	r3, r2
 8001766:	460a      	mov	r2, r1
 8001768:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < gs_cmd_len; i++) {
 800176a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800176e:	3301      	adds	r3, #1
 8001770:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001774:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8001778:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800177a:	429a      	cmp	r2, r3
 800177c:	dbe9      	blt.n	8001752 <main+0x4a2>
			}

			if (COUNT_BEACON == 1) {
 800177e:	4b4b      	ldr	r3, [pc, #300]	; (80018ac <main+0x5fc>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	2b01      	cmp	r3, #1
 8001784:	f040 8135 	bne.w	80019f2 <main+0x742>

				if ((main_gs_cmd[18] == 0xDF && main_gs_cmd[19] == 0xAB
 8001788:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800178a:	7c9b      	ldrb	r3, [r3, #18]
 800178c:	2bdf      	cmp	r3, #223	; 0xdf
 800178e:	d107      	bne.n	80017a0 <main+0x4f0>
 8001790:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001792:	7cdb      	ldrb	r3, [r3, #19]
 8001794:	2bab      	cmp	r3, #171	; 0xab
 8001796:	d103      	bne.n	80017a0 <main+0x4f0>
						&& main_gs_cmd[20] == 0xD1) // Enable Digipeater Mission
 8001798:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800179a:	7d1b      	ldrb	r3, [r3, #20]
 800179c:	2bd1      	cmp	r3, #209	; 0xd1
 800179e:	d00b      	beq.n	80017b8 <main+0x508>
						|| (main_gs_cmd[18] == 0x53 && main_gs_cmd[19] == 0x02
 80017a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80017a2:	7c9b      	ldrb	r3, [r3, #18]
 80017a4:	2b53      	cmp	r3, #83	; 0x53
 80017a6:	d12a      	bne.n	80017fe <main+0x54e>
 80017a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80017aa:	7cdb      	ldrb	r3, [r3, #19]
 80017ac:	2b02      	cmp	r3, #2
 80017ae:	d126      	bne.n	80017fe <main+0x54e>
								&& main_gs_cmd[20] == 0x53)) { // Digipeater Packet
 80017b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80017b2:	7d1b      	ldrb	r3, [r3, #20]
 80017b4:	2b53      	cmp	r3, #83	; 0x53
 80017b6:	d122      	bne.n	80017fe <main+0x54e>

					myDebug("\n********GS Command failed: 0x%x\r\n");
 80017b8:	483d      	ldr	r0, [pc, #244]	; (80018b0 <main+0x600>)
 80017ba:	f7fe ffdf 	bl	800077c <myDebug>

					OBC_UART_RX[0] = 0x53;	//header
 80017be:	4b3d      	ldr	r3, [pc, #244]	; (80018b4 <main+0x604>)
 80017c0:	2253      	movs	r2, #83	; 0x53
 80017c2:	701a      	strb	r2, [r3, #0]
					OBC_UART_RX[1] = 0xac;	//packet_ type
 80017c4:	4b3b      	ldr	r3, [pc, #236]	; (80018b4 <main+0x604>)
 80017c6:	22ac      	movs	r2, #172	; 0xac
 80017c8:	705a      	strb	r2, [r3, #1]
					OBC_UART_RX[2] = 0x04;	//length of info
 80017ca:	4b3a      	ldr	r3, [pc, #232]	; (80018b4 <main+0x604>)
 80017cc:	2204      	movs	r2, #4
 80017ce:	709a      	strb	r2, [r3, #2]
					OBC_UART_RX[3] = 0x02;	//mcu_no
 80017d0:	4b38      	ldr	r3, [pc, #224]	; (80018b4 <main+0x604>)
 80017d2:	2202      	movs	r2, #2
 80017d4:	70da      	strb	r2, [r3, #3]
					OBC_UART_RX[4] = 0xfc;	//false command
 80017d6:	4b37      	ldr	r3, [pc, #220]	; (80018b4 <main+0x604>)
 80017d8:	22fc      	movs	r2, #252	; 0xfc
 80017da:	711a      	strb	r2, [r3, #4]
					OBC_UART_RX[5] = 0xee;	//error prefix
 80017dc:	4b35      	ldr	r3, [pc, #212]	; (80018b4 <main+0x604>)
 80017de:	22ee      	movs	r2, #238	; 0xee
 80017e0:	715a      	strb	r2, [r3, #5]
					obc_ilen = OBC_UART_RX[2];
 80017e2:	4b34      	ldr	r3, [pc, #208]	; (80018b4 <main+0x604>)
 80017e4:	789a      	ldrb	r2, [r3, #2]
 80017e6:	4b34      	ldr	r3, [pc, #208]	; (80018b8 <main+0x608>)
 80017e8:	701a      	strb	r2, [r3, #0]

					OBC_SUCCESS_DATA_RX_FLAG = 1;
 80017ea:	4b34      	ldr	r3, [pc, #208]	; (80018bc <main+0x60c>)
 80017ec:	2201      	movs	r2, #1
 80017ee:	601a      	str	r2, [r3, #0]

					memset(main_gs_cmd, '\0', sizeof(main_gs_cmd));
 80017f0:	4623      	mov	r3, r4
 80017f2:	461a      	mov	r2, r3
 80017f4:	2100      	movs	r1, #0
 80017f6:	6f78      	ldr	r0, [r7, #116]	; 0x74
 80017f8:	f00a f92c 	bl	800ba54 <memset>
 80017fc:	e3cc      	b.n	8001f98 <main+0xce8>

				} else if (main_gs_cmd[18] == 0xFD && main_gs_cmd[19] == 0xBA
 80017fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001800:	7c9b      	ldrb	r3, [r3, #18]
 8001802:	2bfd      	cmp	r3, #253	; 0xfd
 8001804:	f040 809d 	bne.w	8001942 <main+0x692>
 8001808:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800180a:	7cdb      	ldrb	r3, [r3, #19]
 800180c:	2bba      	cmp	r3, #186	; 0xba
 800180e:	f040 8098 	bne.w	8001942 <main+0x692>
						&& main_gs_cmd[20] == 0xD0) {
 8001812:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001814:	7d1b      	ldrb	r3, [r3, #20]
 8001816:	2bd0      	cmp	r3, #208	; 0xd0
 8001818:	f040 8093 	bne.w	8001942 <main+0x692>

					BEACON_COUNT = 2;
 800181c:	4b28      	ldr	r3, [pc, #160]	; (80018c0 <main+0x610>)
 800181e:	2202      	movs	r2, #2
 8001820:	601a      	str	r2, [r3, #0]
					OBC_SUCCESS_DATA_RX_FLAG = 0;
 8001822:	4b26      	ldr	r3, [pc, #152]	; (80018bc <main+0x60c>)
 8001824:	2200      	movs	r2, #0
 8001826:	601a      	str	r2, [r3, #0]
					DIGIPEATER_STATUS = 0;
 8001828:	4b26      	ldr	r3, [pc, #152]	; (80018c4 <main+0x614>)
 800182a:	2200      	movs	r2, #0
 800182c:	601a      	str	r2, [r3, #0]
					DIGIPEATER_FLAG = 0;
 800182e:	4b26      	ldr	r3, [pc, #152]	; (80018c8 <main+0x618>)
 8001830:	2200      	movs	r2, #0
 8001832:	601a      	str	r2, [r3, #0]

					myDebug("\n-------> Digipeater MODE OFF\n\n");
 8001834:	4825      	ldr	r0, [pc, #148]	; (80018cc <main+0x61c>)
 8001836:	f7fe ffa1 	bl	800077c <myDebug>

					OBC_UART_RX[0] = 0x53;	//header
 800183a:	4b1e      	ldr	r3, [pc, #120]	; (80018b4 <main+0x604>)
 800183c:	2253      	movs	r2, #83	; 0x53
 800183e:	701a      	strb	r2, [r3, #0]
					OBC_UART_RX[1] = 0xac;	//packet_ type
 8001840:	4b1c      	ldr	r3, [pc, #112]	; (80018b4 <main+0x604>)
 8001842:	22ac      	movs	r2, #172	; 0xac
 8001844:	705a      	strb	r2, [r3, #1]
					OBC_UART_RX[2] = 0x04;	//length of info
 8001846:	4b1b      	ldr	r3, [pc, #108]	; (80018b4 <main+0x604>)
 8001848:	2204      	movs	r2, #4
 800184a:	709a      	strb	r2, [r3, #2]
					OBC_UART_RX[3] = 0x02;	//mcu_no
 800184c:	4b19      	ldr	r3, [pc, #100]	; (80018b4 <main+0x604>)
 800184e:	2202      	movs	r2, #2
 8001850:	70da      	strb	r2, [r3, #3]
					OBC_UART_RX[4] = 0x00;	//Digipeater OFF
 8001852:	4b18      	ldr	r3, [pc, #96]	; (80018b4 <main+0x604>)
 8001854:	2200      	movs	r2, #0
 8001856:	711a      	strb	r2, [r3, #4]
					OBC_UART_RX[5] = 0xdd;	//Digipeater prefix
 8001858:	4b16      	ldr	r3, [pc, #88]	; (80018b4 <main+0x604>)
 800185a:	22dd      	movs	r2, #221	; 0xdd
 800185c:	715a      	strb	r2, [r3, #5]
					obc_ilen = OBC_UART_RX[2];
 800185e:	4b15      	ldr	r3, [pc, #84]	; (80018b4 <main+0x604>)
 8001860:	789a      	ldrb	r2, [r3, #2]
 8001862:	4b15      	ldr	r3, [pc, #84]	; (80018b8 <main+0x608>)
 8001864:	701a      	strb	r2, [r3, #0]

					myDebug("\nCommand sent to OBC, Length: %d\r\n",
 8001866:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8001868:	4819      	ldr	r0, [pc, #100]	; (80018d0 <main+0x620>)
 800186a:	f7fe ff87 	bl	800077c <myDebug>
							gs_cmd_len);

					if (HAL_UART_Transmit(&huart2, main_gs_cmd,
 800186e:	b2a2      	uxth	r2, r4
 8001870:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001874:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8001876:	4817      	ldr	r0, [pc, #92]	; (80018d4 <main+0x624>)
 8001878:	f004 feb1 	bl	80065de <HAL_UART_Transmit>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d009      	beq.n	8001896 <main+0x5e6>
							sizeof(main_gs_cmd), 2000) == HAL_OK
							|| HAL_UART_Transmit(&hlpuart1, main_gs_cmd,
 8001882:	b2a2      	uxth	r2, r4
 8001884:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001888:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800188a:	4813      	ldr	r0, [pc, #76]	; (80018d8 <main+0x628>)
 800188c:	f004 fea7 	bl	80065de <HAL_UART_Transmit>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	d051      	beq.n	800193a <main+0x68a>
									sizeof(main_gs_cmd), 2000)) {

						for (int i = 0; i < gs_cmd_len; i++) {
 8001896:	2300      	movs	r3, #0
 8001898:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800189c:	e02c      	b.n	80018f8 <main+0x648>
 800189e:	bf00      	nop
 80018a0:	200004c0 	.word	0x200004c0
 80018a4:	20000000 	.word	0x20000000
 80018a8:	200002ac 	.word	0x200002ac
 80018ac:	20000008 	.word	0x20000008
 80018b0:	0800c868 	.word	0x0800c868
 80018b4:	20000318 	.word	0x20000318
 80018b8:	20000316 	.word	0x20000316
 80018bc:	20000370 	.word	0x20000370
 80018c0:	20000004 	.word	0x20000004
 80018c4:	200004ac 	.word	0x200004ac
 80018c8:	200004b4 	.word	0x200004b4
 80018cc:	0800c88c 	.word	0x0800c88c
 80018d0:	0800c8ac 	.word	0x0800c8ac
 80018d4:	20000658 	.word	0x20000658
 80018d8:	20000530 	.word	0x20000530
							myDebug("%02x ", main_gs_cmd[i]);
 80018dc:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80018de:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80018e2:	4413      	add	r3, r2
 80018e4:	781b      	ldrb	r3, [r3, #0]
 80018e6:	4619      	mov	r1, r3
 80018e8:	48b5      	ldr	r0, [pc, #724]	; (8001bc0 <main+0x910>)
 80018ea:	f7fe ff47 	bl	800077c <myDebug>
						for (int i = 0; i < gs_cmd_len; i++) {
 80018ee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80018f2:	3301      	adds	r3, #1
 80018f4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80018f8:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80018fc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80018fe:	429a      	cmp	r2, r3
 8001900:	dbec      	blt.n	80018dc <main+0x62c>
						}

						myDebug("\r\n");
 8001902:	48b0      	ldr	r0, [pc, #704]	; (8001bc4 <main+0x914>)
 8001904:	f7fe ff3a 	bl	800077c <myDebug>

						memset(main_gs_cmd, '\0', sizeof(main_gs_cmd));
 8001908:	4623      	mov	r3, r4
 800190a:	461a      	mov	r2, r3
 800190c:	2100      	movs	r1, #0
 800190e:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8001910:	f00a f8a0 	bl	800ba54 <memset>
						memset(rx_buffer, '\0', sizeof(rx_buffer));
 8001914:	2269      	movs	r2, #105	; 0x69
 8001916:	2100      	movs	r1, #0
 8001918:	48ab      	ldr	r0, [pc, #684]	; (8001bc8 <main+0x918>)
 800191a:	f00a f89b 	bl	800ba54 <memset>
						memset(crc_buff, '\0', sizeof(crc_buff));
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	461a      	mov	r2, r3
 8001922:	2100      	movs	r1, #0
 8001924:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8001928:	f00a f894 	bl	800ba54 <memset>
						memset(gs_cmd_buff, '\0', sizeof(gs_cmd_buff));
 800192c:	f107 0310 	add.w	r3, r7, #16
 8001930:	2264      	movs	r2, #100	; 0x64
 8001932:	2100      	movs	r1, #0
 8001934:	4618      	mov	r0, r3
 8001936:	f00a f88d 	bl	800ba54 <memset>
					}

					OBC_SUCCESS_DATA_RX_FLAG = 1;
 800193a:	4ba4      	ldr	r3, [pc, #656]	; (8001bcc <main+0x91c>)
 800193c:	2201      	movs	r2, #1
 800193e:	601a      	str	r2, [r3, #0]
 8001940:	e32a      	b.n	8001f98 <main+0xce8>

				} else {
					myDebug("\nCommand sent to OBC, Length: %d\r\n",
 8001942:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8001944:	48a2      	ldr	r0, [pc, #648]	; (8001bd0 <main+0x920>)
 8001946:	f7fe ff19 	bl	800077c <myDebug>
							gs_cmd_len);
					if (HAL_UART_Transmit(&huart2, main_gs_cmd,
 800194a:	b2a2      	uxth	r2, r4
 800194c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001950:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8001952:	48a0      	ldr	r0, [pc, #640]	; (8001bd4 <main+0x924>)
 8001954:	f004 fe43 	bl	80065de <HAL_UART_Transmit>
 8001958:	4603      	mov	r3, r0
 800195a:	2b00      	cmp	r3, #0
 800195c:	d00a      	beq.n	8001974 <main+0x6c4>
							sizeof(main_gs_cmd), 2000) == HAL_OK
							|| HAL_UART_Transmit(&hlpuart1, main_gs_cmd,
 800195e:	b2a2      	uxth	r2, r4
 8001960:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001964:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8001966:	489c      	ldr	r0, [pc, #624]	; (8001bd8 <main+0x928>)
 8001968:	f004 fe39 	bl	80065de <HAL_UART_Transmit>
 800196c:	4603      	mov	r3, r0
 800196e:	2b00      	cmp	r3, #0
 8001970:	f000 8312 	beq.w	8001f98 <main+0xce8>
									sizeof(main_gs_cmd), 2000)) {

						for (int i = 0; i < gs_cmd_len; i++) {
 8001974:	2300      	movs	r3, #0
 8001976:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800197a:	e00d      	b.n	8001998 <main+0x6e8>
							myDebug("%02x ", main_gs_cmd[i]);
 800197c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800197e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001982:	4413      	add	r3, r2
 8001984:	781b      	ldrb	r3, [r3, #0]
 8001986:	4619      	mov	r1, r3
 8001988:	488d      	ldr	r0, [pc, #564]	; (8001bc0 <main+0x910>)
 800198a:	f7fe fef7 	bl	800077c <myDebug>
						for (int i = 0; i < gs_cmd_len; i++) {
 800198e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001992:	3301      	adds	r3, #1
 8001994:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001998:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800199c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800199e:	429a      	cmp	r2, r3
 80019a0:	dbec      	blt.n	800197c <main+0x6cc>
						}

						SUBGRF_SetRfFrequency(FREQ_435_MHZ);
 80019a2:	488e      	ldr	r0, [pc, #568]	; (8001bdc <main+0x92c>)
 80019a4:	f008 fe24 	bl	800a5f0 <SUBGRF_SetRfFrequency>
						SUBGRF_SetSwitch(RFO_LP, RFSWITCH_RX); /*Set RF switch*/
 80019a8:	2100      	movs	r1, #0
 80019aa:	2001      	movs	r0, #1
 80019ac:	f009 fa68 	bl	800ae80 <SUBGRF_SetSwitch>
						SUBGRF_SetRxBoosted(0xFFFFFF);
 80019b0:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80019b4:	f008 fc48 	bl	800a248 <SUBGRF_SetRxBoosted>

						memset(main_gs_cmd, '\0', sizeof(main_gs_cmd));
 80019b8:	4623      	mov	r3, r4
 80019ba:	461a      	mov	r2, r3
 80019bc:	2100      	movs	r1, #0
 80019be:	6f78      	ldr	r0, [r7, #116]	; 0x74
 80019c0:	f00a f848 	bl	800ba54 <memset>
						memset(rx_buffer, '\0', sizeof(rx_buffer));
 80019c4:	2269      	movs	r2, #105	; 0x69
 80019c6:	2100      	movs	r1, #0
 80019c8:	487f      	ldr	r0, [pc, #508]	; (8001bc8 <main+0x918>)
 80019ca:	f00a f843 	bl	800ba54 <memset>
						memset(crc_buff, '\0', sizeof(crc_buff));
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	461a      	mov	r2, r3
 80019d2:	2100      	movs	r1, #0
 80019d4:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 80019d8:	f00a f83c 	bl	800ba54 <memset>
						memset(gs_cmd_buff, '\0', sizeof(gs_cmd_buff));
 80019dc:	f107 0310 	add.w	r3, r7, #16
 80019e0:	2264      	movs	r2, #100	; 0x64
 80019e2:	2100      	movs	r1, #0
 80019e4:	4618      	mov	r0, r3
 80019e6:	f00a f835 	bl	800ba54 <memset>

						myDebug("\n\n_____OBC__RECEIVER_____\r\n");
 80019ea:	487d      	ldr	r0, [pc, #500]	; (8001be0 <main+0x930>)
 80019ec:	f7fe fec6 	bl	800077c <myDebug>
 80019f0:	e2d2      	b.n	8001f98 <main+0xce8>
					}

				}
			} else if (COUNT_BEACON == 0) {
 80019f2:	4b7c      	ldr	r3, [pc, #496]	; (8001be4 <main+0x934>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	f040 82ce 	bne.w	8001f98 <main+0xce8>
				if (DIGIPEATER_STATUS == 1) {
 80019fc:	4b7a      	ldr	r3, [pc, #488]	; (8001be8 <main+0x938>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	2b01      	cmp	r3, #1
 8001a02:	f040 8124 	bne.w	8001c4e <main+0x99e>
					if (main_gs_cmd[18] == 0xFD && main_gs_cmd[19] == 0xBA
 8001a06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001a08:	7c9b      	ldrb	r3, [r3, #18]
 8001a0a:	2bfd      	cmp	r3, #253	; 0xfd
 8001a0c:	d17b      	bne.n	8001b06 <main+0x856>
 8001a0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001a10:	7cdb      	ldrb	r3, [r3, #19]
 8001a12:	2bba      	cmp	r3, #186	; 0xba
 8001a14:	d177      	bne.n	8001b06 <main+0x856>
							&& main_gs_cmd[20] == 0xD0) {
 8001a16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001a18:	7d1b      	ldrb	r3, [r3, #20]
 8001a1a:	2bd0      	cmp	r3, #208	; 0xd0
 8001a1c:	d173      	bne.n	8001b06 <main+0x856>

						BEACON_COUNT = 2;
 8001a1e:	4b73      	ldr	r3, [pc, #460]	; (8001bec <main+0x93c>)
 8001a20:	2202      	movs	r2, #2
 8001a22:	601a      	str	r2, [r3, #0]
						OBC_SUCCESS_DATA_RX_FLAG = 0;
 8001a24:	4b69      	ldr	r3, [pc, #420]	; (8001bcc <main+0x91c>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	601a      	str	r2, [r3, #0]
						DIGIPEATER_STATUS = 0;
 8001a2a:	4b6f      	ldr	r3, [pc, #444]	; (8001be8 <main+0x938>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	601a      	str	r2, [r3, #0]
						DIGIPEATER_FLAG = 0;
 8001a30:	4b6f      	ldr	r3, [pc, #444]	; (8001bf0 <main+0x940>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	601a      	str	r2, [r3, #0]

						myDebug("\n-------> Digipeater MODE OFF\n\n");
 8001a36:	486f      	ldr	r0, [pc, #444]	; (8001bf4 <main+0x944>)
 8001a38:	f7fe fea0 	bl	800077c <myDebug>

						OBC_UART_RX[0] = 0x53;	//header
 8001a3c:	4b6e      	ldr	r3, [pc, #440]	; (8001bf8 <main+0x948>)
 8001a3e:	2253      	movs	r2, #83	; 0x53
 8001a40:	701a      	strb	r2, [r3, #0]
						OBC_UART_RX[1] = 0xac;	//packet_ type
 8001a42:	4b6d      	ldr	r3, [pc, #436]	; (8001bf8 <main+0x948>)
 8001a44:	22ac      	movs	r2, #172	; 0xac
 8001a46:	705a      	strb	r2, [r3, #1]
						OBC_UART_RX[2] = 0x04;	//length of info
 8001a48:	4b6b      	ldr	r3, [pc, #428]	; (8001bf8 <main+0x948>)
 8001a4a:	2204      	movs	r2, #4
 8001a4c:	709a      	strb	r2, [r3, #2]
						OBC_UART_RX[3] = 0x02;	//mcu_no
 8001a4e:	4b6a      	ldr	r3, [pc, #424]	; (8001bf8 <main+0x948>)
 8001a50:	2202      	movs	r2, #2
 8001a52:	70da      	strb	r2, [r3, #3]
						OBC_UART_RX[4] = 0x00;	//Digipeater OFF
 8001a54:	4b68      	ldr	r3, [pc, #416]	; (8001bf8 <main+0x948>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	711a      	strb	r2, [r3, #4]
						OBC_UART_RX[5] = 0xdd;	//Digipeater prefix
 8001a5a:	4b67      	ldr	r3, [pc, #412]	; (8001bf8 <main+0x948>)
 8001a5c:	22dd      	movs	r2, #221	; 0xdd
 8001a5e:	715a      	strb	r2, [r3, #5]
						obc_ilen = OBC_UART_RX[2];
 8001a60:	4b65      	ldr	r3, [pc, #404]	; (8001bf8 <main+0x948>)
 8001a62:	789a      	ldrb	r2, [r3, #2]
 8001a64:	4b65      	ldr	r3, [pc, #404]	; (8001bfc <main+0x94c>)
 8001a66:	701a      	strb	r2, [r3, #0]

						myDebug("\nCommand sent to OBC, Length: %d\r\n",
 8001a68:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8001a6a:	4859      	ldr	r0, [pc, #356]	; (8001bd0 <main+0x920>)
 8001a6c:	f7fe fe86 	bl	800077c <myDebug>
								gs_cmd_len);

						if (HAL_UART_Transmit(&huart2, main_gs_cmd,
 8001a70:	b2a2      	uxth	r2, r4
 8001a72:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001a76:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8001a78:	4856      	ldr	r0, [pc, #344]	; (8001bd4 <main+0x924>)
 8001a7a:	f004 fdb0 	bl	80065de <HAL_UART_Transmit>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d009      	beq.n	8001a98 <main+0x7e8>
								sizeof(main_gs_cmd), 2000) == HAL_OK
								|| HAL_UART_Transmit(&hlpuart1, main_gs_cmd,
 8001a84:	b2a2      	uxth	r2, r4
 8001a86:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001a8a:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8001a8c:	4852      	ldr	r0, [pc, #328]	; (8001bd8 <main+0x928>)
 8001a8e:	f004 fda6 	bl	80065de <HAL_UART_Transmit>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d032      	beq.n	8001afe <main+0x84e>
										sizeof(main_gs_cmd), 2000)) {

							for (int i = 0; i < gs_cmd_len; i++) {
 8001a98:	2300      	movs	r3, #0
 8001a9a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001a9e:	e00d      	b.n	8001abc <main+0x80c>
								myDebug("%02x ", main_gs_cmd[i]);
 8001aa0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001aa2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001aa6:	4413      	add	r3, r2
 8001aa8:	781b      	ldrb	r3, [r3, #0]
 8001aaa:	4619      	mov	r1, r3
 8001aac:	4844      	ldr	r0, [pc, #272]	; (8001bc0 <main+0x910>)
 8001aae:	f7fe fe65 	bl	800077c <myDebug>
							for (int i = 0; i < gs_cmd_len; i++) {
 8001ab2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001ab6:	3301      	adds	r3, #1
 8001ab8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001abc:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8001ac0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001ac2:	429a      	cmp	r2, r3
 8001ac4:	dbec      	blt.n	8001aa0 <main+0x7f0>
							}

							myDebug("\r\n");
 8001ac6:	483f      	ldr	r0, [pc, #252]	; (8001bc4 <main+0x914>)
 8001ac8:	f7fe fe58 	bl	800077c <myDebug>

							memset(main_gs_cmd, '\0', sizeof(main_gs_cmd));
 8001acc:	4623      	mov	r3, r4
 8001ace:	461a      	mov	r2, r3
 8001ad0:	2100      	movs	r1, #0
 8001ad2:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8001ad4:	f009 ffbe 	bl	800ba54 <memset>
							memset(rx_buffer, '\0', sizeof(rx_buffer));
 8001ad8:	2269      	movs	r2, #105	; 0x69
 8001ada:	2100      	movs	r1, #0
 8001adc:	483a      	ldr	r0, [pc, #232]	; (8001bc8 <main+0x918>)
 8001ade:	f009 ffb9 	bl	800ba54 <memset>
							memset(crc_buff, '\0', sizeof(crc_buff));
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	461a      	mov	r2, r3
 8001ae6:	2100      	movs	r1, #0
 8001ae8:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8001aec:	f009 ffb2 	bl	800ba54 <memset>
							memset(gs_cmd_buff, '\0', sizeof(gs_cmd_buff));
 8001af0:	f107 0310 	add.w	r3, r7, #16
 8001af4:	2264      	movs	r2, #100	; 0x64
 8001af6:	2100      	movs	r1, #0
 8001af8:	4618      	mov	r0, r3
 8001afa:	f009 ffab 	bl	800ba54 <memset>
						}

						OBC_SUCCESS_DATA_RX_FLAG = 1;
 8001afe:	4b33      	ldr	r3, [pc, #204]	; (8001bcc <main+0x91c>)
 8001b00:	2201      	movs	r2, #1
 8001b02:	601a      	str	r2, [r3, #0]
 8001b04:	e248      	b.n	8001f98 <main+0xce8>

					} else if (main_gs_cmd[18] == 0x53
 8001b06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001b08:	7c9b      	ldrb	r3, [r3, #18]
 8001b0a:	2b53      	cmp	r3, #83	; 0x53
 8001b0c:	d17c      	bne.n	8001c08 <main+0x958>
							&& main_gs_cmd[19] == 0x02
 8001b0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001b10:	7cdb      	ldrb	r3, [r3, #19]
 8001b12:	2b02      	cmp	r3, #2
 8001b14:	d178      	bne.n	8001c08 <main+0x958>
							&& main_gs_cmd[20] == 0x53) { // if digipeater packet
 8001b16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001b18:	7d1b      	ldrb	r3, [r3, #20]
 8001b1a:	2b53      	cmp	r3, #83	; 0x53
 8001b1c:	d174      	bne.n	8001c08 <main+0x958>
						myDebug(
 8001b1e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8001b20:	4837      	ldr	r0, [pc, #220]	; (8001c00 <main+0x950>)
 8001b22:	f7fe fe2b 	bl	800077c <myDebug>
								"\nDigipeater packet sent to OBC, Length: %d\r\n",
								gs_cmd_len);
						if (HAL_UART_Transmit(&huart2, main_gs_cmd,
 8001b26:	b2a2      	uxth	r2, r4
 8001b28:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001b2c:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8001b2e:	4829      	ldr	r0, [pc, #164]	; (8001bd4 <main+0x924>)
 8001b30:	f004 fd55 	bl	80065de <HAL_UART_Transmit>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d00a      	beq.n	8001b50 <main+0x8a0>
								sizeof(main_gs_cmd), 2000) == HAL_OK
								|| HAL_UART_Transmit(&hlpuart1, main_gs_cmd,
 8001b3a:	b2a2      	uxth	r2, r4
 8001b3c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001b40:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8001b42:	4825      	ldr	r0, [pc, #148]	; (8001bd8 <main+0x928>)
 8001b44:	f004 fd4b 	bl	80065de <HAL_UART_Transmit>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	f000 8223 	beq.w	8001f96 <main+0xce6>
										sizeof(main_gs_cmd), 2000)) {

							for (int i = 0; i < gs_cmd_len; i++) {
 8001b50:	2300      	movs	r3, #0
 8001b52:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001b56:	e00d      	b.n	8001b74 <main+0x8c4>
								myDebug("%02x ", main_gs_cmd[i]);
 8001b58:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001b5a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001b5e:	4413      	add	r3, r2
 8001b60:	781b      	ldrb	r3, [r3, #0]
 8001b62:	4619      	mov	r1, r3
 8001b64:	4816      	ldr	r0, [pc, #88]	; (8001bc0 <main+0x910>)
 8001b66:	f7fe fe09 	bl	800077c <myDebug>
							for (int i = 0; i < gs_cmd_len; i++) {
 8001b6a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001b6e:	3301      	adds	r3, #1
 8001b70:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001b74:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001b78:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001b7a:	429a      	cmp	r2, r3
 8001b7c:	dbec      	blt.n	8001b58 <main+0x8a8>
							}

							myDebug("\r\n");
 8001b7e:	4811      	ldr	r0, [pc, #68]	; (8001bc4 <main+0x914>)
 8001b80:	f7fe fdfc 	bl	800077c <myDebug>

							memset(main_gs_cmd, '\0', sizeof(main_gs_cmd));
 8001b84:	4623      	mov	r3, r4
 8001b86:	461a      	mov	r2, r3
 8001b88:	2100      	movs	r1, #0
 8001b8a:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8001b8c:	f009 ff62 	bl	800ba54 <memset>
							memset(rx_buffer, '\0', sizeof(rx_buffer));
 8001b90:	2269      	movs	r2, #105	; 0x69
 8001b92:	2100      	movs	r1, #0
 8001b94:	480c      	ldr	r0, [pc, #48]	; (8001bc8 <main+0x918>)
 8001b96:	f009 ff5d 	bl	800ba54 <memset>
							memset(crc_buff, '\0', sizeof(crc_buff));
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	461a      	mov	r2, r3
 8001b9e:	2100      	movs	r1, #0
 8001ba0:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8001ba4:	f009 ff56 	bl	800ba54 <memset>
							memset(gs_cmd_buff, '\0', sizeof(gs_cmd_buff));
 8001ba8:	f107 0310 	add.w	r3, r7, #16
 8001bac:	2264      	movs	r2, #100	; 0x64
 8001bae:	2100      	movs	r1, #0
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f009 ff4f 	bl	800ba54 <memset>

							myDebug(
 8001bb6:	4813      	ldr	r0, [pc, #76]	; (8001c04 <main+0x954>)
 8001bb8:	f7fe fde0 	bl	800077c <myDebug>
						if (HAL_UART_Transmit(&huart2, main_gs_cmd,
 8001bbc:	e1eb      	b.n	8001f96 <main+0xce6>
 8001bbe:	bf00      	nop
 8001bc0:	0800c578 	.word	0x0800c578
 8001bc4:	0800c580 	.word	0x0800c580
 8001bc8:	200002ac 	.word	0x200002ac
 8001bcc:	20000370 	.word	0x20000370
 8001bd0:	0800c8ac 	.word	0x0800c8ac
 8001bd4:	20000658 	.word	0x20000658
 8001bd8:	20000530 	.word	0x20000530
 8001bdc:	19f25968 	.word	0x19f25968
 8001be0:	0800c8d0 	.word	0x0800c8d0
 8001be4:	20000008 	.word	0x20000008
 8001be8:	200004ac 	.word	0x200004ac
 8001bec:	20000004 	.word	0x20000004
 8001bf0:	200004b4 	.word	0x200004b4
 8001bf4:	0800c88c 	.word	0x0800c88c
 8001bf8:	20000318 	.word	0x20000318
 8001bfc:	20000316 	.word	0x20000316
 8001c00:	0800c8ec 	.word	0x0800c8ec
 8001c04:	0800c91c 	.word	0x0800c91c
									"\n\n_____DIGIPEATER_OBC__RECEIVER_____\r\n");

						}
					} else {
						myDebug("\n********GS Command failed: 0x%x\r\n");
 8001c08:	48ab      	ldr	r0, [pc, #684]	; (8001eb8 <main+0xc08>)
 8001c0a:	f7fe fdb7 	bl	800077c <myDebug>

						OBC_UART_RX[0] = 0x53;	//header
 8001c0e:	4bab      	ldr	r3, [pc, #684]	; (8001ebc <main+0xc0c>)
 8001c10:	2253      	movs	r2, #83	; 0x53
 8001c12:	701a      	strb	r2, [r3, #0]
						OBC_UART_RX[1] = 0xac;	//packet_ type
 8001c14:	4ba9      	ldr	r3, [pc, #676]	; (8001ebc <main+0xc0c>)
 8001c16:	22ac      	movs	r2, #172	; 0xac
 8001c18:	705a      	strb	r2, [r3, #1]
						OBC_UART_RX[2] = 0x04;	//length of info
 8001c1a:	4ba8      	ldr	r3, [pc, #672]	; (8001ebc <main+0xc0c>)
 8001c1c:	2204      	movs	r2, #4
 8001c1e:	709a      	strb	r2, [r3, #2]
						OBC_UART_RX[3] = 0x02;	//mcu_no
 8001c20:	4ba6      	ldr	r3, [pc, #664]	; (8001ebc <main+0xc0c>)
 8001c22:	2202      	movs	r2, #2
 8001c24:	70da      	strb	r2, [r3, #3]
						OBC_UART_RX[4] = 0xfc;	//false command
 8001c26:	4ba5      	ldr	r3, [pc, #660]	; (8001ebc <main+0xc0c>)
 8001c28:	22fc      	movs	r2, #252	; 0xfc
 8001c2a:	711a      	strb	r2, [r3, #4]
						OBC_UART_RX[5] = 0xee;	//error prefix
 8001c2c:	4ba3      	ldr	r3, [pc, #652]	; (8001ebc <main+0xc0c>)
 8001c2e:	22ee      	movs	r2, #238	; 0xee
 8001c30:	715a      	strb	r2, [r3, #5]
						obc_ilen = OBC_UART_RX[2];
 8001c32:	4ba2      	ldr	r3, [pc, #648]	; (8001ebc <main+0xc0c>)
 8001c34:	789a      	ldrb	r2, [r3, #2]
 8001c36:	4ba2      	ldr	r3, [pc, #648]	; (8001ec0 <main+0xc10>)
 8001c38:	701a      	strb	r2, [r3, #0]

						OBC_SUCCESS_DATA_RX_FLAG = 1;
 8001c3a:	4ba2      	ldr	r3, [pc, #648]	; (8001ec4 <main+0xc14>)
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	601a      	str	r2, [r3, #0]

						memset(main_gs_cmd, '\0', sizeof(main_gs_cmd));
 8001c40:	4623      	mov	r3, r4
 8001c42:	461a      	mov	r2, r3
 8001c44:	2100      	movs	r1, #0
 8001c46:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8001c48:	f009 ff04 	bl	800ba54 <memset>
 8001c4c:	e1a4      	b.n	8001f98 <main+0xce8>

					}
				} else if (DIGIPEATER_STATUS == 0) {
 8001c4e:	4b9e      	ldr	r3, [pc, #632]	; (8001ec8 <main+0xc18>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	f040 81a0 	bne.w	8001f98 <main+0xce8>
					if (main_gs_cmd[18] == 0xFD && main_gs_cmd[19] == 0xBA
 8001c58:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001c5a:	7c9b      	ldrb	r3, [r3, #18]
 8001c5c:	2bfd      	cmp	r3, #253	; 0xfd
 8001c5e:	d17b      	bne.n	8001d58 <main+0xaa8>
 8001c60:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001c62:	7cdb      	ldrb	r3, [r3, #19]
 8001c64:	2bba      	cmp	r3, #186	; 0xba
 8001c66:	d177      	bne.n	8001d58 <main+0xaa8>
							&& main_gs_cmd[20] == 0xD0) {
 8001c68:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001c6a:	7d1b      	ldrb	r3, [r3, #20]
 8001c6c:	2bd0      	cmp	r3, #208	; 0xd0
 8001c6e:	d173      	bne.n	8001d58 <main+0xaa8>

						BEACON_COUNT = 2;
 8001c70:	4b96      	ldr	r3, [pc, #600]	; (8001ecc <main+0xc1c>)
 8001c72:	2202      	movs	r2, #2
 8001c74:	601a      	str	r2, [r3, #0]
						OBC_SUCCESS_DATA_RX_FLAG = 0;
 8001c76:	4b93      	ldr	r3, [pc, #588]	; (8001ec4 <main+0xc14>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	601a      	str	r2, [r3, #0]
						DIGIPEATER_STATUS = 0;
 8001c7c:	4b92      	ldr	r3, [pc, #584]	; (8001ec8 <main+0xc18>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	601a      	str	r2, [r3, #0]
						DIGIPEATER_FLAG = 0;
 8001c82:	4b93      	ldr	r3, [pc, #588]	; (8001ed0 <main+0xc20>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	601a      	str	r2, [r3, #0]

						myDebug("\n-------> Digipeater MODE OFF\n\n");
 8001c88:	4892      	ldr	r0, [pc, #584]	; (8001ed4 <main+0xc24>)
 8001c8a:	f7fe fd77 	bl	800077c <myDebug>

						OBC_UART_RX[0] = 0x53;	//header
 8001c8e:	4b8b      	ldr	r3, [pc, #556]	; (8001ebc <main+0xc0c>)
 8001c90:	2253      	movs	r2, #83	; 0x53
 8001c92:	701a      	strb	r2, [r3, #0]
						OBC_UART_RX[1] = 0xac;	//packet_ type
 8001c94:	4b89      	ldr	r3, [pc, #548]	; (8001ebc <main+0xc0c>)
 8001c96:	22ac      	movs	r2, #172	; 0xac
 8001c98:	705a      	strb	r2, [r3, #1]
						OBC_UART_RX[2] = 0x04;	//length of info
 8001c9a:	4b88      	ldr	r3, [pc, #544]	; (8001ebc <main+0xc0c>)
 8001c9c:	2204      	movs	r2, #4
 8001c9e:	709a      	strb	r2, [r3, #2]
						OBC_UART_RX[3] = 0x02;	//mcu_no
 8001ca0:	4b86      	ldr	r3, [pc, #536]	; (8001ebc <main+0xc0c>)
 8001ca2:	2202      	movs	r2, #2
 8001ca4:	70da      	strb	r2, [r3, #3]
						OBC_UART_RX[4] = 0x00;	//Digipeater OFF
 8001ca6:	4b85      	ldr	r3, [pc, #532]	; (8001ebc <main+0xc0c>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	711a      	strb	r2, [r3, #4]
						OBC_UART_RX[5] = 0xdd;	//Digipeater prefix
 8001cac:	4b83      	ldr	r3, [pc, #524]	; (8001ebc <main+0xc0c>)
 8001cae:	22dd      	movs	r2, #221	; 0xdd
 8001cb0:	715a      	strb	r2, [r3, #5]
						obc_ilen = OBC_UART_RX[2];
 8001cb2:	4b82      	ldr	r3, [pc, #520]	; (8001ebc <main+0xc0c>)
 8001cb4:	789a      	ldrb	r2, [r3, #2]
 8001cb6:	4b82      	ldr	r3, [pc, #520]	; (8001ec0 <main+0xc10>)
 8001cb8:	701a      	strb	r2, [r3, #0]

						myDebug("\nCommand sent to OBC, Length: %d\r\n",
 8001cba:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8001cbc:	4886      	ldr	r0, [pc, #536]	; (8001ed8 <main+0xc28>)
 8001cbe:	f7fe fd5d 	bl	800077c <myDebug>
								gs_cmd_len);

						if (HAL_UART_Transmit(&huart2, main_gs_cmd,
 8001cc2:	b2a2      	uxth	r2, r4
 8001cc4:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001cc8:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8001cca:	4884      	ldr	r0, [pc, #528]	; (8001edc <main+0xc2c>)
 8001ccc:	f004 fc87 	bl	80065de <HAL_UART_Transmit>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d009      	beq.n	8001cea <main+0xa3a>
								sizeof(main_gs_cmd), 2000) == HAL_OK
								|| HAL_UART_Transmit(&hlpuart1, main_gs_cmd,
 8001cd6:	b2a2      	uxth	r2, r4
 8001cd8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001cdc:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8001cde:	4880      	ldr	r0, [pc, #512]	; (8001ee0 <main+0xc30>)
 8001ce0:	f004 fc7d 	bl	80065de <HAL_UART_Transmit>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d032      	beq.n	8001d50 <main+0xaa0>
										sizeof(main_gs_cmd), 2000)) {

							for (int i = 0; i < gs_cmd_len; i++) {
 8001cea:	2300      	movs	r3, #0
 8001cec:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001cf0:	e00d      	b.n	8001d0e <main+0xa5e>
								myDebug("%02x ", main_gs_cmd[i]);
 8001cf2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001cf4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001cf8:	4413      	add	r3, r2
 8001cfa:	781b      	ldrb	r3, [r3, #0]
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	4879      	ldr	r0, [pc, #484]	; (8001ee4 <main+0xc34>)
 8001d00:	f7fe fd3c 	bl	800077c <myDebug>
							for (int i = 0; i < gs_cmd_len; i++) {
 8001d04:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001d08:	3301      	adds	r3, #1
 8001d0a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001d0e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001d12:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001d14:	429a      	cmp	r2, r3
 8001d16:	dbec      	blt.n	8001cf2 <main+0xa42>
							}
							myDebug("\r\n");
 8001d18:	4873      	ldr	r0, [pc, #460]	; (8001ee8 <main+0xc38>)
 8001d1a:	f7fe fd2f 	bl	800077c <myDebug>

							memset(main_gs_cmd, '\0', sizeof(main_gs_cmd));
 8001d1e:	4623      	mov	r3, r4
 8001d20:	461a      	mov	r2, r3
 8001d22:	2100      	movs	r1, #0
 8001d24:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8001d26:	f009 fe95 	bl	800ba54 <memset>
							memset(rx_buffer, '\0', sizeof(rx_buffer));
 8001d2a:	2269      	movs	r2, #105	; 0x69
 8001d2c:	2100      	movs	r1, #0
 8001d2e:	486f      	ldr	r0, [pc, #444]	; (8001eec <main+0xc3c>)
 8001d30:	f009 fe90 	bl	800ba54 <memset>
							memset(crc_buff, '\0', sizeof(crc_buff));
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	461a      	mov	r2, r3
 8001d38:	2100      	movs	r1, #0
 8001d3a:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8001d3e:	f009 fe89 	bl	800ba54 <memset>
							memset(gs_cmd_buff, '\0', sizeof(gs_cmd_buff));
 8001d42:	f107 0310 	add.w	r3, r7, #16
 8001d46:	2264      	movs	r2, #100	; 0x64
 8001d48:	2100      	movs	r1, #0
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f009 fe82 	bl	800ba54 <memset>
						}

						OBC_SUCCESS_DATA_RX_FLAG = 1;
 8001d50:	4b5c      	ldr	r3, [pc, #368]	; (8001ec4 <main+0xc14>)
 8001d52:	2201      	movs	r2, #1
 8001d54:	601a      	str	r2, [r3, #0]
 8001d56:	e11f      	b.n	8001f98 <main+0xce8>

					} else if (main_gs_cmd[18] == 0xDF
 8001d58:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001d5a:	7c9b      	ldrb	r3, [r3, #18]
 8001d5c:	2bdf      	cmp	r3, #223	; 0xdf
 8001d5e:	d17b      	bne.n	8001e58 <main+0xba8>
							&& main_gs_cmd[19] == 0xAB
 8001d60:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001d62:	7cdb      	ldrb	r3, [r3, #19]
 8001d64:	2bab      	cmp	r3, #171	; 0xab
 8001d66:	d177      	bne.n	8001e58 <main+0xba8>
							&& main_gs_cmd[20] == 0xD1) {
 8001d68:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001d6a:	7d1b      	ldrb	r3, [r3, #20]
 8001d6c:	2bd1      	cmp	r3, #209	; 0xd1
 8001d6e:	d173      	bne.n	8001e58 <main+0xba8>

						BEACON_COUNT = 0;
 8001d70:	4b56      	ldr	r3, [pc, #344]	; (8001ecc <main+0xc1c>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	601a      	str	r2, [r3, #0]
						OBC_SUCCESS_DATA_RX_FLAG = 0;
 8001d76:	4b53      	ldr	r3, [pc, #332]	; (8001ec4 <main+0xc14>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	601a      	str	r2, [r3, #0]
						DIGIPEATER_STATUS = 1;
 8001d7c:	4b52      	ldr	r3, [pc, #328]	; (8001ec8 <main+0xc18>)
 8001d7e:	2201      	movs	r2, #1
 8001d80:	601a      	str	r2, [r3, #0]
						DIGIPEATER_RX_FLAG = 1;
 8001d82:	4b5b      	ldr	r3, [pc, #364]	; (8001ef0 <main+0xc40>)
 8001d84:	2201      	movs	r2, #1
 8001d86:	601a      	str	r2, [r3, #0]

						myDebug("\n-------> Digipeater MODE ON\n\n");
 8001d88:	485a      	ldr	r0, [pc, #360]	; (8001ef4 <main+0xc44>)
 8001d8a:	f7fe fcf7 	bl	800077c <myDebug>

						OBC_UART_RX[0] = 0x53;	//header
 8001d8e:	4b4b      	ldr	r3, [pc, #300]	; (8001ebc <main+0xc0c>)
 8001d90:	2253      	movs	r2, #83	; 0x53
 8001d92:	701a      	strb	r2, [r3, #0]
						OBC_UART_RX[1] = 0xac;	//packet_ type
 8001d94:	4b49      	ldr	r3, [pc, #292]	; (8001ebc <main+0xc0c>)
 8001d96:	22ac      	movs	r2, #172	; 0xac
 8001d98:	705a      	strb	r2, [r3, #1]
						OBC_UART_RX[2] = 0x04;	//length of info
 8001d9a:	4b48      	ldr	r3, [pc, #288]	; (8001ebc <main+0xc0c>)
 8001d9c:	2204      	movs	r2, #4
 8001d9e:	709a      	strb	r2, [r3, #2]
						OBC_UART_RX[3] = 0x02;	//mcu_no
 8001da0:	4b46      	ldr	r3, [pc, #280]	; (8001ebc <main+0xc0c>)
 8001da2:	2202      	movs	r2, #2
 8001da4:	70da      	strb	r2, [r3, #3]
						OBC_UART_RX[4] = 0x01;	//Digipeater ON
 8001da6:	4b45      	ldr	r3, [pc, #276]	; (8001ebc <main+0xc0c>)
 8001da8:	2201      	movs	r2, #1
 8001daa:	711a      	strb	r2, [r3, #4]
						OBC_UART_RX[5] = 0xdd;	//Digipeater prefix
 8001dac:	4b43      	ldr	r3, [pc, #268]	; (8001ebc <main+0xc0c>)
 8001dae:	22dd      	movs	r2, #221	; 0xdd
 8001db0:	715a      	strb	r2, [r3, #5]
						obc_ilen = OBC_UART_RX[2];
 8001db2:	4b42      	ldr	r3, [pc, #264]	; (8001ebc <main+0xc0c>)
 8001db4:	789a      	ldrb	r2, [r3, #2]
 8001db6:	4b42      	ldr	r3, [pc, #264]	; (8001ec0 <main+0xc10>)
 8001db8:	701a      	strb	r2, [r3, #0]

						myDebug("\nCommand sent to OBC, Length: %d\r\n",
 8001dba:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8001dbc:	4846      	ldr	r0, [pc, #280]	; (8001ed8 <main+0xc28>)
 8001dbe:	f7fe fcdd 	bl	800077c <myDebug>
								gs_cmd_len);

						if (HAL_UART_Transmit(&huart2, main_gs_cmd,
 8001dc2:	b2a2      	uxth	r2, r4
 8001dc4:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001dc8:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8001dca:	4844      	ldr	r0, [pc, #272]	; (8001edc <main+0xc2c>)
 8001dcc:	f004 fc07 	bl	80065de <HAL_UART_Transmit>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d009      	beq.n	8001dea <main+0xb3a>
								sizeof(main_gs_cmd), 2000) == HAL_OK
								|| HAL_UART_Transmit(&hlpuart1, main_gs_cmd,
 8001dd6:	b2a2      	uxth	r2, r4
 8001dd8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001ddc:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8001dde:	4840      	ldr	r0, [pc, #256]	; (8001ee0 <main+0xc30>)
 8001de0:	f004 fbfd 	bl	80065de <HAL_UART_Transmit>
 8001de4:	4603      	mov	r3, r0
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d032      	beq.n	8001e50 <main+0xba0>
										sizeof(main_gs_cmd), 2000)) {

							for (int i = 0; i < gs_cmd_len; i++) {
 8001dea:	2300      	movs	r3, #0
 8001dec:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001df0:	e00d      	b.n	8001e0e <main+0xb5e>
								myDebug("%02x ", main_gs_cmd[i]);
 8001df2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001df4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001df8:	4413      	add	r3, r2
 8001dfa:	781b      	ldrb	r3, [r3, #0]
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	4839      	ldr	r0, [pc, #228]	; (8001ee4 <main+0xc34>)
 8001e00:	f7fe fcbc 	bl	800077c <myDebug>
							for (int i = 0; i < gs_cmd_len; i++) {
 8001e04:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001e08:	3301      	adds	r3, #1
 8001e0a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001e0e:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8001e12:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001e14:	429a      	cmp	r2, r3
 8001e16:	dbec      	blt.n	8001df2 <main+0xb42>
							}

							myDebug("\r\n");
 8001e18:	4833      	ldr	r0, [pc, #204]	; (8001ee8 <main+0xc38>)
 8001e1a:	f7fe fcaf 	bl	800077c <myDebug>

							memset(main_gs_cmd, '\0', sizeof(main_gs_cmd));
 8001e1e:	4623      	mov	r3, r4
 8001e20:	461a      	mov	r2, r3
 8001e22:	2100      	movs	r1, #0
 8001e24:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8001e26:	f009 fe15 	bl	800ba54 <memset>
							memset(rx_buffer, '\0', sizeof(rx_buffer));
 8001e2a:	2269      	movs	r2, #105	; 0x69
 8001e2c:	2100      	movs	r1, #0
 8001e2e:	482f      	ldr	r0, [pc, #188]	; (8001eec <main+0xc3c>)
 8001e30:	f009 fe10 	bl	800ba54 <memset>
							memset(crc_buff, '\0', sizeof(crc_buff));
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	461a      	mov	r2, r3
 8001e38:	2100      	movs	r1, #0
 8001e3a:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8001e3e:	f009 fe09 	bl	800ba54 <memset>
							memset(gs_cmd_buff, '\0', sizeof(gs_cmd_buff));
 8001e42:	f107 0310 	add.w	r3, r7, #16
 8001e46:	2264      	movs	r2, #100	; 0x64
 8001e48:	2100      	movs	r1, #0
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f009 fe02 	bl	800ba54 <memset>
						}

						OBC_SUCCESS_DATA_RX_FLAG = 1;
 8001e50:	4b1c      	ldr	r3, [pc, #112]	; (8001ec4 <main+0xc14>)
 8001e52:	2201      	movs	r2, #1
 8001e54:	601a      	str	r2, [r3, #0]
 8001e56:	e09f      	b.n	8001f98 <main+0xce8>

					} else if (main_gs_cmd[18] == 0x53
 8001e58:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001e5a:	7c9b      	ldrb	r3, [r3, #18]
 8001e5c:	2b53      	cmp	r3, #83	; 0x53
 8001e5e:	d14b      	bne.n	8001ef8 <main+0xc48>
							&& main_gs_cmd[19] == 0x02
 8001e60:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001e62:	7cdb      	ldrb	r3, [r3, #19]
 8001e64:	2b02      	cmp	r3, #2
 8001e66:	d147      	bne.n	8001ef8 <main+0xc48>
							&& main_gs_cmd[20] == 0x53) { // Digipeater Packet
 8001e68:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001e6a:	7d1b      	ldrb	r3, [r3, #20]
 8001e6c:	2b53      	cmp	r3, #83	; 0x53
 8001e6e:	d143      	bne.n	8001ef8 <main+0xc48>

						myDebug("\n********GS Command failed: 0x%x\r\n");
 8001e70:	4811      	ldr	r0, [pc, #68]	; (8001eb8 <main+0xc08>)
 8001e72:	f7fe fc83 	bl	800077c <myDebug>

						OBC_UART_RX[0] = 0x53;	//header
 8001e76:	4b11      	ldr	r3, [pc, #68]	; (8001ebc <main+0xc0c>)
 8001e78:	2253      	movs	r2, #83	; 0x53
 8001e7a:	701a      	strb	r2, [r3, #0]
						OBC_UART_RX[1] = 0xac;	//packet_ type
 8001e7c:	4b0f      	ldr	r3, [pc, #60]	; (8001ebc <main+0xc0c>)
 8001e7e:	22ac      	movs	r2, #172	; 0xac
 8001e80:	705a      	strb	r2, [r3, #1]
						OBC_UART_RX[2] = 0x04;	//length of info
 8001e82:	4b0e      	ldr	r3, [pc, #56]	; (8001ebc <main+0xc0c>)
 8001e84:	2204      	movs	r2, #4
 8001e86:	709a      	strb	r2, [r3, #2]
						OBC_UART_RX[3] = 0x02;	//mcu_no
 8001e88:	4b0c      	ldr	r3, [pc, #48]	; (8001ebc <main+0xc0c>)
 8001e8a:	2202      	movs	r2, #2
 8001e8c:	70da      	strb	r2, [r3, #3]
						OBC_UART_RX[4] = 0xfc;	//false command
 8001e8e:	4b0b      	ldr	r3, [pc, #44]	; (8001ebc <main+0xc0c>)
 8001e90:	22fc      	movs	r2, #252	; 0xfc
 8001e92:	711a      	strb	r2, [r3, #4]
						OBC_UART_RX[5] = 0xee;	//error prefix
 8001e94:	4b09      	ldr	r3, [pc, #36]	; (8001ebc <main+0xc0c>)
 8001e96:	22ee      	movs	r2, #238	; 0xee
 8001e98:	715a      	strb	r2, [r3, #5]
						obc_ilen = OBC_UART_RX[2];
 8001e9a:	4b08      	ldr	r3, [pc, #32]	; (8001ebc <main+0xc0c>)
 8001e9c:	789a      	ldrb	r2, [r3, #2]
 8001e9e:	4b08      	ldr	r3, [pc, #32]	; (8001ec0 <main+0xc10>)
 8001ea0:	701a      	strb	r2, [r3, #0]

						OBC_SUCCESS_DATA_RX_FLAG = 1;
 8001ea2:	4b08      	ldr	r3, [pc, #32]	; (8001ec4 <main+0xc14>)
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	601a      	str	r2, [r3, #0]

						memset(main_gs_cmd, '\0', sizeof(main_gs_cmd));
 8001ea8:	4623      	mov	r3, r4
 8001eaa:	461a      	mov	r2, r3
 8001eac:	2100      	movs	r1, #0
 8001eae:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8001eb0:	f009 fdd0 	bl	800ba54 <memset>
 8001eb4:	e070      	b.n	8001f98 <main+0xce8>
 8001eb6:	bf00      	nop
 8001eb8:	0800c868 	.word	0x0800c868
 8001ebc:	20000318 	.word	0x20000318
 8001ec0:	20000316 	.word	0x20000316
 8001ec4:	20000370 	.word	0x20000370
 8001ec8:	200004ac 	.word	0x200004ac
 8001ecc:	20000004 	.word	0x20000004
 8001ed0:	200004b4 	.word	0x200004b4
 8001ed4:	0800c88c 	.word	0x0800c88c
 8001ed8:	0800c8ac 	.word	0x0800c8ac
 8001edc:	20000658 	.word	0x20000658
 8001ee0:	20000530 	.word	0x20000530
 8001ee4:	0800c578 	.word	0x0800c578
 8001ee8:	0800c580 	.word	0x0800c580
 8001eec:	200002ac 	.word	0x200002ac
 8001ef0:	200004b8 	.word	0x200004b8
 8001ef4:	0800c944 	.word	0x0800c944

					} else {
						myDebug("\nCommand sent to OBC, Length: %d\r\n",
 8001ef8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8001efa:	4831      	ldr	r0, [pc, #196]	; (8001fc0 <main+0xd10>)
 8001efc:	f7fe fc3e 	bl	800077c <myDebug>
								gs_cmd_len);

						if (HAL_UART_Transmit(&huart2, main_gs_cmd,
 8001f00:	b2a2      	uxth	r2, r4
 8001f02:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001f06:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8001f08:	482e      	ldr	r0, [pc, #184]	; (8001fc4 <main+0xd14>)
 8001f0a:	f004 fb68 	bl	80065de <HAL_UART_Transmit>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d009      	beq.n	8001f28 <main+0xc78>
								sizeof(main_gs_cmd), 2000) == HAL_OK
								|| HAL_UART_Transmit(&hlpuart1, main_gs_cmd,
 8001f14:	b2a2      	uxth	r2, r4
 8001f16:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001f1a:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8001f1c:	482a      	ldr	r0, [pc, #168]	; (8001fc8 <main+0xd18>)
 8001f1e:	f004 fb5e 	bl	80065de <HAL_UART_Transmit>
 8001f22:	4603      	mov	r3, r0
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d037      	beq.n	8001f98 <main+0xce8>
										sizeof(main_gs_cmd), 2000)) {

							for (int i = 0; i < gs_cmd_len; i++) {
 8001f28:	2300      	movs	r3, #0
 8001f2a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001f2e:	e00d      	b.n	8001f4c <main+0xc9c>
								myDebug("%02x ", main_gs_cmd[i]);
 8001f30:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001f32:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001f36:	4413      	add	r3, r2
 8001f38:	781b      	ldrb	r3, [r3, #0]
 8001f3a:	4619      	mov	r1, r3
 8001f3c:	4823      	ldr	r0, [pc, #140]	; (8001fcc <main+0xd1c>)
 8001f3e:	f7fe fc1d 	bl	800077c <myDebug>
							for (int i = 0; i < gs_cmd_len; i++) {
 8001f42:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001f46:	3301      	adds	r3, #1
 8001f48:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001f4c:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8001f50:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001f52:	429a      	cmp	r2, r3
 8001f54:	dbec      	blt.n	8001f30 <main+0xc80>
							}

							myDebug("\r\n");
 8001f56:	481e      	ldr	r0, [pc, #120]	; (8001fd0 <main+0xd20>)
 8001f58:	f7fe fc10 	bl	800077c <myDebug>

							memset(main_gs_cmd, '\0', sizeof(main_gs_cmd));
 8001f5c:	4623      	mov	r3, r4
 8001f5e:	461a      	mov	r2, r3
 8001f60:	2100      	movs	r1, #0
 8001f62:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8001f64:	f009 fd76 	bl	800ba54 <memset>
							memset(rx_buffer, '\0', sizeof(rx_buffer));
 8001f68:	2269      	movs	r2, #105	; 0x69
 8001f6a:	2100      	movs	r1, #0
 8001f6c:	4819      	ldr	r0, [pc, #100]	; (8001fd4 <main+0xd24>)
 8001f6e:	f009 fd71 	bl	800ba54 <memset>
							memset(crc_buff, '\0', sizeof(crc_buff));
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	461a      	mov	r2, r3
 8001f76:	2100      	movs	r1, #0
 8001f78:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8001f7c:	f009 fd6a 	bl	800ba54 <memset>
							memset(gs_cmd_buff, '\0', sizeof(gs_cmd_buff));
 8001f80:	f107 0310 	add.w	r3, r7, #16
 8001f84:	2264      	movs	r2, #100	; 0x64
 8001f86:	2100      	movs	r1, #0
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f009 fd63 	bl	800ba54 <memset>

							myDebug("\n\n_____OBC__RECEIVER_____\r\n");
 8001f8e:	4812      	ldr	r0, [pc, #72]	; (8001fd8 <main+0xd28>)
 8001f90:	f7fe fbf4 	bl	800077c <myDebug>
 8001f94:	e000      	b.n	8001f98 <main+0xce8>
						if (HAL_UART_Transmit(&huart2, main_gs_cmd,
 8001f96:	bf00      	nop
 8001f98:	f8d7 d008 	ldr.w	sp, [r7, #8]
					}
				}
			}
		}

		HAL_UART_Receive_DMA(&huart2, OBC_UART_RX, obc_plen);
 8001f9c:	4b0f      	ldr	r3, [pc, #60]	; (8001fdc <main+0xd2c>)
 8001f9e:	781b      	ldrb	r3, [r3, #0]
 8001fa0:	b29b      	uxth	r3, r3
 8001fa2:	461a      	mov	r2, r3
 8001fa4:	490e      	ldr	r1, [pc, #56]	; (8001fe0 <main+0xd30>)
 8001fa6:	4807      	ldr	r0, [pc, #28]	; (8001fc4 <main+0xd14>)
 8001fa8:	f004 fc64 	bl	8006874 <HAL_UART_Receive_DMA>

		HAL_UART_Receive_DMA(&hlpuart1, OBC_UART_RX, obc_plen);
 8001fac:	4b0b      	ldr	r3, [pc, #44]	; (8001fdc <main+0xd2c>)
 8001fae:	781b      	ldrb	r3, [r3, #0]
 8001fb0:	b29b      	uxth	r3, r3
 8001fb2:	461a      	mov	r2, r3
 8001fb4:	490a      	ldr	r1, [pc, #40]	; (8001fe0 <main+0xd30>)
 8001fb6:	4804      	ldr	r0, [pc, #16]	; (8001fc8 <main+0xd18>)
 8001fb8:	f004 fc5c 	bl	8006874 <HAL_UART_Receive_DMA>
    MX_SubGHz_Phy_Process();
 8001fbc:	f7ff ba2e 	b.w	800141c <main+0x16c>
 8001fc0:	0800c8ac 	.word	0x0800c8ac
 8001fc4:	20000658 	.word	0x20000658
 8001fc8:	20000530 	.word	0x20000530
 8001fcc:	0800c578 	.word	0x0800c578
 8001fd0:	0800c580 	.word	0x0800c580
 8001fd4:	200002ac 	.word	0x200002ac
 8001fd8:	0800c8d0 	.word	0x0800c8d0
 8001fdc:	20000001 	.word	0x20000001
 8001fe0:	20000318 	.word	0x20000318

08001fe4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b09a      	sub	sp, #104	; 0x68
 8001fe8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001fea:	f107 0320 	add.w	r3, r7, #32
 8001fee:	2248      	movs	r2, #72	; 0x48
 8001ff0:	2100      	movs	r1, #0
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f009 fd2e 	bl	800ba54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ff8:	1d3b      	adds	r3, r7, #4
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	601a      	str	r2, [r3, #0]
 8001ffe:	605a      	str	r2, [r3, #4]
 8002000:	609a      	str	r2, [r3, #8]
 8002002:	60da      	str	r2, [r3, #12]
 8002004:	611a      	str	r2, [r3, #16]
 8002006:	615a      	str	r2, [r3, #20]
 8002008:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800200a:	4b25      	ldr	r3, [pc, #148]	; (80020a0 <SystemClock_Config+0xbc>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002012:	4a23      	ldr	r2, [pc, #140]	; (80020a0 <SystemClock_Config+0xbc>)
 8002014:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002018:	6013      	str	r3, [r2, #0]
 800201a:	4b21      	ldr	r3, [pc, #132]	; (80020a0 <SystemClock_Config+0xbc>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002022:	603b      	str	r3, [r7, #0]
 8002024:	683b      	ldr	r3, [r7, #0]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002026:	2301      	movs	r3, #1
 8002028:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS_PWR;
 800202a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800202e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEDiv = RCC_HSE_DIV1;
 8002030:	2300      	movs	r3, #0
 8002032:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002034:	2302      	movs	r3, #2
 8002036:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002038:	2303      	movs	r3, #3
 800203a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 800203c:	2310      	movs	r3, #16
 800203e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLN = 6;
 8002040:	2306      	movs	r3, #6
 8002042:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002044:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002048:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800204a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800204e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002050:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002054:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002056:	f107 0320 	add.w	r3, r7, #32
 800205a:	4618      	mov	r0, r3
 800205c:	f002 fa7a 	bl	8004554 <HAL_RCC_OscConfig>
 8002060:	4603      	mov	r3, r0
 8002062:	2b00      	cmp	r3, #0
 8002064:	d001      	beq.n	800206a <SystemClock_Config+0x86>
  {
    Error_Handler();
 8002066:	f000 faa1 	bl	80025ac <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 800206a:	234f      	movs	r3, #79	; 0x4f
 800206c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800206e:	2303      	movs	r3, #3
 8002070:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002072:	2300      	movs	r3, #0
 8002074:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002076:	2300      	movs	r3, #0
 8002078:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800207a:	2300      	movs	r3, #0
 800207c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 800207e:	2300      	movs	r3, #0
 8002080:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002082:	1d3b      	adds	r3, r7, #4
 8002084:	2102      	movs	r1, #2
 8002086:	4618      	mov	r0, r3
 8002088:	f002 fde6 	bl	8004c58 <HAL_RCC_ClockConfig>
 800208c:	4603      	mov	r3, r0
 800208e:	2b00      	cmp	r3, #0
 8002090:	d001      	beq.n	8002096 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8002092:	f000 fa8b 	bl	80025ac <Error_Handler>
  }
}
 8002096:	bf00      	nop
 8002098:	3768      	adds	r7, #104	; 0x68
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	58000400 	.word	0x58000400

080020a4 <DioIrqHndlr>:

/* USER CODE BEGIN 4 */
void DioIrqHndlr(RadioIrqMasks_t radioIrq) {
 80020a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80020a8:	b091      	sub	sp, #68	; 0x44
 80020aa:	af00      	add	r7, sp, #0
 80020ac:	4603      	mov	r3, r0
 80020ae:	81fb      	strh	r3, [r7, #14]
	if (radioIrq == IRQ_TX_DONE) {
 80020b0:	89fb      	ldrh	r3, [r7, #14]
 80020b2:	2b01      	cmp	r3, #1
 80020b4:	f040 80c7 	bne.w	8002246 <DioIrqHndlr+0x1a2>
		OBC_SUCCESS_DATA_RX_FLAG = 0;
 80020b8:	4b8b      	ldr	r3, [pc, #556]	; (80022e8 <DioIrqHndlr+0x244>)
 80020ba:	2200      	movs	r2, #0
 80020bc:	601a      	str	r2, [r3, #0]

		myDebug("\nSatellite Data Transmitted Successful, Length: %d\r\n",
 80020be:	4b8b      	ldr	r3, [pc, #556]	; (80022ec <DioIrqHndlr+0x248>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4619      	mov	r1, r3
 80020c4:	488a      	ldr	r0, [pc, #552]	; (80022f0 <DioIrqHndlr+0x24c>)
 80020c6:	f7fe fb59 	bl	800077c <myDebug>
				tx_buffer_len);
		for (int i = 0; i < tx_buffer_len; i++) {
 80020ca:	2300      	movs	r3, #0
 80020cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80020ce:	e00a      	b.n	80020e6 <DioIrqHndlr+0x42>
			myDebug("%02x ", tx_buffer[i]);
 80020d0:	4a88      	ldr	r2, [pc, #544]	; (80022f4 <DioIrqHndlr+0x250>)
 80020d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020d4:	4413      	add	r3, r2
 80020d6:	781b      	ldrb	r3, [r3, #0]
 80020d8:	4619      	mov	r1, r3
 80020da:	4887      	ldr	r0, [pc, #540]	; (80022f8 <DioIrqHndlr+0x254>)
 80020dc:	f7fe fb4e 	bl	800077c <myDebug>
		for (int i = 0; i < tx_buffer_len; i++) {
 80020e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020e2:	3301      	adds	r3, #1
 80020e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80020e6:	4b81      	ldr	r3, [pc, #516]	; (80022ec <DioIrqHndlr+0x248>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80020ec:	429a      	cmp	r2, r3
 80020ee:	dbef      	blt.n	80020d0 <DioIrqHndlr+0x2c>
		}
		myDebug("\r\n");
 80020f0:	4882      	ldr	r0, [pc, #520]	; (80022fc <DioIrqHndlr+0x258>)
 80020f2:	f7fe fb43 	bl	800077c <myDebug>

		memset(tx_buffer, '\0', sizeof(tx_buffer));
 80020f6:	2296      	movs	r2, #150	; 0x96
 80020f8:	2100      	movs	r1, #0
 80020fa:	487e      	ldr	r0, [pc, #504]	; (80022f4 <DioIrqHndlr+0x250>)
 80020fc:	f009 fcaa 	bl	800ba54 <memset>

		if (PACKET_TYPE == 0xB1 || PACKET_TYPE == 0xB2) {
 8002100:	4b7f      	ldr	r3, [pc, #508]	; (8002300 <DioIrqHndlr+0x25c>)
 8002102:	781b      	ldrb	r3, [r3, #0]
 8002104:	2bb1      	cmp	r3, #177	; 0xb1
 8002106:	d003      	beq.n	8002110 <DioIrqHndlr+0x6c>
 8002108:	4b7d      	ldr	r3, [pc, #500]	; (8002300 <DioIrqHndlr+0x25c>)
 800210a:	781b      	ldrb	r3, [r3, #0]
 800210c:	2bb2      	cmp	r3, #178	; 0xb2
 800210e:	d10c      	bne.n	800212a <DioIrqHndlr+0x86>
			BEACON_COUNT--;
 8002110:	4b7c      	ldr	r3, [pc, #496]	; (8002304 <DioIrqHndlr+0x260>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	3b01      	subs	r3, #1
 8002116:	4a7b      	ldr	r2, [pc, #492]	; (8002304 <DioIrqHndlr+0x260>)
 8002118:	6013      	str	r3, [r2, #0]
			COUNT_BEACON--;
 800211a:	4b7b      	ldr	r3, [pc, #492]	; (8002308 <DioIrqHndlr+0x264>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	3b01      	subs	r3, #1
 8002120:	4a79      	ldr	r2, [pc, #484]	; (8002308 <DioIrqHndlr+0x264>)
 8002122:	6013      	str	r3, [r2, #0]
			PACKET_TYPE = 0;
 8002124:	4b76      	ldr	r3, [pc, #472]	; (8002300 <DioIrqHndlr+0x25c>)
 8002126:	2200      	movs	r2, #0
 8002128:	701a      	strb	r2, [r3, #0]
		}

		if (DIGIPEATER_FLAG) {
 800212a:	4b78      	ldr	r3, [pc, #480]	; (800230c <DioIrqHndlr+0x268>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d00e      	beq.n	8002150 <DioIrqHndlr+0xac>
			BEACON_COUNT = 2;
 8002132:	4b74      	ldr	r3, [pc, #464]	; (8002304 <DioIrqHndlr+0x260>)
 8002134:	2202      	movs	r2, #2
 8002136:	601a      	str	r2, [r3, #0]
			OBC_SUCCESS_DATA_RX_FLAG = 0;
 8002138:	4b6b      	ldr	r3, [pc, #428]	; (80022e8 <DioIrqHndlr+0x244>)
 800213a:	2200      	movs	r2, #0
 800213c:	601a      	str	r2, [r3, #0]
			DIGIPEATER_STATUS = 0;
 800213e:	4b74      	ldr	r3, [pc, #464]	; (8002310 <DioIrqHndlr+0x26c>)
 8002140:	2200      	movs	r2, #0
 8002142:	601a      	str	r2, [r3, #0]
			DIGIPEATER_FLAG = 0;
 8002144:	4b71      	ldr	r3, [pc, #452]	; (800230c <DioIrqHndlr+0x268>)
 8002146:	2200      	movs	r2, #0
 8002148:	601a      	str	r2, [r3, #0]
			DIGIPEATER_RX_FLAG = 0;
 800214a:	4b72      	ldr	r3, [pc, #456]	; (8002314 <DioIrqHndlr+0x270>)
 800214c:	2200      	movs	r2, #0
 800214e:	601a      	str	r2, [r3, #0]
		}

		if (BEACON_COUNT == 0) {
 8002150:	4b6c      	ldr	r3, [pc, #432]	; (8002304 <DioIrqHndlr+0x260>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d109      	bne.n	800216c <DioIrqHndlr+0xc8>
			OBC_SUCCESS_DATA_RX_FLAG = 0;
 8002158:	4b63      	ldr	r3, [pc, #396]	; (80022e8 <DioIrqHndlr+0x244>)
 800215a:	2200      	movs	r2, #0
 800215c:	601a      	str	r2, [r3, #0]
			DIGIPEATER_STATUS = 1;
 800215e:	4b6c      	ldr	r3, [pc, #432]	; (8002310 <DioIrqHndlr+0x26c>)
 8002160:	2201      	movs	r2, #1
 8002162:	601a      	str	r2, [r3, #0]
			myDebug("\n########## Digipeater Mode Configuration: ##########\n");
 8002164:	486c      	ldr	r0, [pc, #432]	; (8002318 <DioIrqHndlr+0x274>)
 8002166:	f7fe fb09 	bl	800077c <myDebug>
 800216a:	e002      	b.n	8002172 <DioIrqHndlr+0xce>
		} else {
			DIGIPEATER_STATUS = 0;
 800216c:	4b68      	ldr	r3, [pc, #416]	; (8002310 <DioIrqHndlr+0x26c>)
 800216e:	2200      	movs	r2, #0
 8002170:	601a      	str	r2, [r3, #0]
		}

		delay_us(500000);
 8002172:	486a      	ldr	r0, [pc, #424]	; (800231c <DioIrqHndlr+0x278>)
 8002174:	f7fe fae8 	bl	8000748 <delay_us>

		setPacketParams(rx_buffer_len);
 8002178:	4b69      	ldr	r3, [pc, #420]	; (8002320 <DioIrqHndlr+0x27c>)
 800217a:	781b      	ldrb	r3, [r3, #0]
 800217c:	4618      	mov	r0, r3
 800217e:	f7fe fdd7 	bl	8000d30 <setPacketParams>
		setModulationParams(GFSK_BR_1200, GFSK_FDEV_1200);
 8002182:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8002186:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 800218a:	f7fe fdfb 	bl	8000d84 <setModulationParams>
		radioConfig(rx_buffer, rx_buffer_len);
 800218e:	4b64      	ldr	r3, [pc, #400]	; (8002320 <DioIrqHndlr+0x27c>)
 8002190:	781b      	ldrb	r3, [r3, #0]
 8002192:	4619      	mov	r1, r3
 8002194:	4863      	ldr	r0, [pc, #396]	; (8002324 <DioIrqHndlr+0x280>)
 8002196:	f7fe fe13 	bl	8000dc0 <radioConfig>

		myDebug("\n########## RX Configuration: ##########\n");
 800219a:	4863      	ldr	r0, [pc, #396]	; (8002328 <DioIrqHndlr+0x284>)
 800219c:	f7fe faee 	bl	800077c <myDebug>

		myDebug("FREQUENCY MODS: UPLINK FREQ: %lu Hz\r\n", FREQ_435_MHZ);
 80021a0:	4962      	ldr	r1, [pc, #392]	; (800232c <DioIrqHndlr+0x288>)
 80021a2:	4863      	ldr	r0, [pc, #396]	; (8002330 <DioIrqHndlr+0x28c>)
 80021a4:	f7fe faea 	bl	800077c <myDebug>
		myDebug("Bit Rate: 	%d\n\r", mod_params.Params.Gfsk.BitRate);
 80021a8:	4b62      	ldr	r3, [pc, #392]	; (8002334 <DioIrqHndlr+0x290>)
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	4619      	mov	r1, r3
 80021ae:	4862      	ldr	r0, [pc, #392]	; (8002338 <DioIrqHndlr+0x294>)
 80021b0:	f7fe fae4 	bl	800077c <myDebug>
		myDebug("Frequency Deviation: 	%d\n\r", mod_params.Params.Gfsk.Fdev);
 80021b4:	4b5f      	ldr	r3, [pc, #380]	; (8002334 <DioIrqHndlr+0x290>)
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	4619      	mov	r1, r3
 80021ba:	4860      	ldr	r0, [pc, #384]	; (800233c <DioIrqHndlr+0x298>)
 80021bc:	f7fe fade 	bl	800077c <myDebug>
		myDebug("RECEVING BANDWIDTH: 	%d\n\r",
				mod_params.Params.Gfsk.Bandwidth);
 80021c0:	4b5c      	ldr	r3, [pc, #368]	; (8002334 <DioIrqHndlr+0x290>)
 80021c2:	7b5b      	ldrb	r3, [r3, #13]
		myDebug("RECEVING BANDWIDTH: 	%d\n\r",
 80021c4:	4619      	mov	r1, r3
 80021c6:	485e      	ldr	r0, [pc, #376]	; (8002340 <DioIrqHndlr+0x29c>)
 80021c8:	f7fe fad8 	bl	800077c <myDebug>
		myDebug("Packet Type 			%d\n\r", pkt_params.PacketType);
 80021cc:	4b5d      	ldr	r3, [pc, #372]	; (8002344 <DioIrqHndlr+0x2a0>)
 80021ce:	781b      	ldrb	r3, [r3, #0]
 80021d0:	4619      	mov	r1, r3
 80021d2:	485d      	ldr	r0, [pc, #372]	; (8002348 <DioIrqHndlr+0x2a4>)
 80021d4:	f7fe fad2 	bl	800077c <myDebug>
		myDebug("PayloadLength 			%d\n\r",
				pkt_params.Params.Gfsk.PayloadLength);
 80021d8:	4b5a      	ldr	r3, [pc, #360]	; (8002344 <DioIrqHndlr+0x2a0>)
 80021da:	7a1b      	ldrb	r3, [r3, #8]
		myDebug("PayloadLength 			%d\n\r",
 80021dc:	4619      	mov	r1, r3
 80021de:	485b      	ldr	r0, [pc, #364]	; (800234c <DioIrqHndlr+0x2a8>)
 80021e0:	f7fe facc 	bl	800077c <myDebug>
		myDebug("PreambleLength 		%d\n\r",
				pkt_params.Params.Gfsk.PreambleLength);
 80021e4:	4b57      	ldr	r3, [pc, #348]	; (8002344 <DioIrqHndlr+0x2a0>)
 80021e6:	885b      	ldrh	r3, [r3, #2]
		myDebug("PreambleLength 		%d\n\r",
 80021e8:	4619      	mov	r1, r3
 80021ea:	4859      	ldr	r0, [pc, #356]	; (8002350 <DioIrqHndlr+0x2ac>)
 80021ec:	f7fe fac6 	bl	800077c <myDebug>
		myDebug("PreambleMinDetect		%d\n\r",
				pkt_params.Params.Gfsk.PreambleMinDetect);
 80021f0:	4b54      	ldr	r3, [pc, #336]	; (8002344 <DioIrqHndlr+0x2a0>)
 80021f2:	791b      	ldrb	r3, [r3, #4]
		myDebug("PreambleMinDetect		%d\n\r",
 80021f4:	4619      	mov	r1, r3
 80021f6:	4857      	ldr	r0, [pc, #348]	; (8002354 <DioIrqHndlr+0x2b0>)
 80021f8:	f7fe fac0 	bl	800077c <myDebug>
		myDebug("HeaderType 			%d\n\r", pkt_params.Params.Gfsk.HeaderType);
 80021fc:	4b51      	ldr	r3, [pc, #324]	; (8002344 <DioIrqHndlr+0x2a0>)
 80021fe:	79db      	ldrb	r3, [r3, #7]
 8002200:	4619      	mov	r1, r3
 8002202:	4855      	ldr	r0, [pc, #340]	; (8002358 <DioIrqHndlr+0x2b4>)
 8002204:	f7fe faba 	bl	800077c <myDebug>
		myDebug("__________*******************__________\r\n");
 8002208:	4854      	ldr	r0, [pc, #336]	; (800235c <DioIrqHndlr+0x2b8>)
 800220a:	f7fe fab7 	bl	800077c <myDebug>

		SUBGRF_SetRfFrequency(FREQ_435_MHZ);
 800220e:	4847      	ldr	r0, [pc, #284]	; (800232c <DioIrqHndlr+0x288>)
 8002210:	f008 f9ee 	bl	800a5f0 <SUBGRF_SetRfFrequency>
		SUBGRF_SetSwitch(RFO_LP, RFSWITCH_RX); /*Set RF switch*/
 8002214:	2100      	movs	r1, #0
 8002216:	2001      	movs	r0, #1
 8002218:	f008 fe32 	bl	800ae80 <SUBGRF_SetSwitch>
		SUBGRF_SetRxBoosted(0xFFFFFF);
 800221c:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8002220:	f008 f812 	bl	800a248 <SUBGRF_SetRxBoosted>

		HAL_UART_Receive_DMA(&huart2, OBC_UART_RX, obc_plen);
 8002224:	4b4e      	ldr	r3, [pc, #312]	; (8002360 <DioIrqHndlr+0x2bc>)
 8002226:	781b      	ldrb	r3, [r3, #0]
 8002228:	b29b      	uxth	r3, r3
 800222a:	461a      	mov	r2, r3
 800222c:	494d      	ldr	r1, [pc, #308]	; (8002364 <DioIrqHndlr+0x2c0>)
 800222e:	484e      	ldr	r0, [pc, #312]	; (8002368 <DioIrqHndlr+0x2c4>)
 8002230:	f004 fb20 	bl	8006874 <HAL_UART_Receive_DMA>

		HAL_UART_Receive_DMA(&hlpuart1, OBC_UART_RX, obc_plen);
 8002234:	4b4a      	ldr	r3, [pc, #296]	; (8002360 <DioIrqHndlr+0x2bc>)
 8002236:	781b      	ldrb	r3, [r3, #0]
 8002238:	b29b      	uxth	r3, r3
 800223a:	461a      	mov	r2, r3
 800223c:	4949      	ldr	r1, [pc, #292]	; (8002364 <DioIrqHndlr+0x2c0>)
 800223e:	484b      	ldr	r0, [pc, #300]	; (800236c <DioIrqHndlr+0x2c8>)
 8002240:	f004 fb18 	bl	8006874 <HAL_UART_Receive_DMA>

		return;
 8002244:	e191      	b.n	800256a <DioIrqHndlr+0x4c6>

	}

	if (radioIrq == IRQ_RX_DONE) {
 8002246:	89fb      	ldrh	r3, [r7, #14]
 8002248:	2b02      	cmp	r3, #2
 800224a:	f040 815b 	bne.w	8002504 <DioIrqHndlr+0x460>
		SUBGRF_GetPayload(rx_buffer, &rx_buffer_len, RX_BUFF_LENGTH);
 800224e:	2269      	movs	r2, #105	; 0x69
 8002250:	4933      	ldr	r1, [pc, #204]	; (8002320 <DioIrqHndlr+0x27c>)
 8002252:	4834      	ldr	r0, [pc, #208]	; (8002324 <DioIrqHndlr+0x280>)
 8002254:	f007 fe6c 	bl	8009f30 <SUBGRF_GetPayload>
		rssi_value = SUBGRF_GetRssiInst();
 8002258:	f008 fc8b 	bl	800ab72 <SUBGRF_GetRssiInst>
 800225c:	4603      	mov	r3, r0
 800225e:	b2da      	uxtb	r2, r3
 8002260:	4b43      	ldr	r3, [pc, #268]	; (8002370 <DioIrqHndlr+0x2cc>)
 8002262:	701a      	strb	r2, [r3, #0]
		myDebug("\nGS Command Received: 0x%x\r\n");
 8002264:	4843      	ldr	r0, [pc, #268]	; (8002374 <DioIrqHndlr+0x2d0>)
 8002266:	f7fe fa89 	bl	800077c <myDebug>

		uint8_t temp_rx_buffer_len = 0;
 800226a:	2300      	movs	r3, #0
 800226c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		temp_rx_buffer_len = countsDataBetweenFlags(rx_buffer, rx_buffer_len); // 7e...7e, size
 8002270:	4b2b      	ldr	r3, [pc, #172]	; (8002320 <DioIrqHndlr+0x27c>)
 8002272:	781b      	ldrb	r3, [r3, #0]
 8002274:	4619      	mov	r1, r3
 8002276:	482b      	ldr	r0, [pc, #172]	; (8002324 <DioIrqHndlr+0x280>)
 8002278:	f7fe fd24 	bl	8000cc4 <countsDataBetweenFlags>
 800227c:	4603      	mov	r3, r0
 800227e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		if (temp_rx_buffer_len != -1) {
 8002282:	466b      	mov	r3, sp
 8002284:	60bb      	str	r3, [r7, #8]

			uint8_t temp_check_buff[temp_rx_buffer_len];
 8002286:	f897 602f 	ldrb.w	r6, [r7, #47]	; 0x2f
 800228a:	4633      	mov	r3, r6
 800228c:	3b01      	subs	r3, #1
 800228e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002290:	b2f3      	uxtb	r3, r6
 8002292:	2200      	movs	r2, #0
 8002294:	603b      	str	r3, [r7, #0]
 8002296:	607a      	str	r2, [r7, #4]
 8002298:	f04f 0200 	mov.w	r2, #0
 800229c:	f04f 0300 	mov.w	r3, #0
 80022a0:	6879      	ldr	r1, [r7, #4]
 80022a2:	00cb      	lsls	r3, r1, #3
 80022a4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80022a8:	4684      	mov	ip, r0
 80022aa:	ea43 735c 	orr.w	r3, r3, ip, lsr #29
 80022ae:	4601      	mov	r1, r0
 80022b0:	00ca      	lsls	r2, r1, #3
 80022b2:	b2f3      	uxtb	r3, r6
 80022b4:	2200      	movs	r2, #0
 80022b6:	469a      	mov	sl, r3
 80022b8:	4693      	mov	fp, r2
 80022ba:	f04f 0200 	mov.w	r2, #0
 80022be:	f04f 0300 	mov.w	r3, #0
 80022c2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80022c6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80022ca:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80022ce:	4633      	mov	r3, r6
 80022d0:	3307      	adds	r3, #7
 80022d2:	08db      	lsrs	r3, r3, #3
 80022d4:	00db      	lsls	r3, r3, #3
 80022d6:	ebad 0d03 	sub.w	sp, sp, r3
 80022da:	466b      	mov	r3, sp
 80022dc:	3300      	adds	r3, #0
 80022de:	627b      	str	r3, [r7, #36]	; 0x24
			for (int i = 0; i < temp_rx_buffer_len; i++) {
 80022e0:	2300      	movs	r3, #0
 80022e2:	63bb      	str	r3, [r7, #56]	; 0x38
 80022e4:	e05c      	b.n	80023a0 <DioIrqHndlr+0x2fc>
 80022e6:	bf00      	nop
 80022e8:	20000370 	.word	0x20000370
 80022ec:	200004a4 	.word	0x200004a4
 80022f0:	0800c964 	.word	0x0800c964
 80022f4:	2000040c 	.word	0x2000040c
 80022f8:	0800c578 	.word	0x0800c578
 80022fc:	0800c580 	.word	0x0800c580
 8002300:	200004b0 	.word	0x200004b0
 8002304:	20000004 	.word	0x20000004
 8002308:	20000008 	.word	0x20000008
 800230c:	200004b4 	.word	0x200004b4
 8002310:	200004ac 	.word	0x200004ac
 8002314:	200004b8 	.word	0x200004b8
 8002318:	0800c99c 	.word	0x0800c99c
 800231c:	0007a120 	.word	0x0007a120
 8002320:	20000000 	.word	0x20000000
 8002324:	200002ac 	.word	0x200002ac
 8002328:	0800c814 	.word	0x0800c814
 800232c:	19f25968 	.word	0x19f25968
 8002330:	0800c840 	.word	0x0800c840
 8002334:	20000290 	.word	0x20000290
 8002338:	0800c420 	.word	0x0800c420
 800233c:	0800c430 	.word	0x0800c430
 8002340:	0800c44c 	.word	0x0800c44c
 8002344:	2000027c 	.word	0x2000027c
 8002348:	0800c468 	.word	0x0800c468
 800234c:	0800c47c 	.word	0x0800c47c
 8002350:	0800c494 	.word	0x0800c494
 8002354:	0800c4ac 	.word	0x0800c4ac
 8002358:	0800c4c4 	.word	0x0800c4c4
 800235c:	0800c4d8 	.word	0x0800c4d8
 8002360:	20000001 	.word	0x20000001
 8002364:	20000318 	.word	0x20000318
 8002368:	20000658 	.word	0x20000658
 800236c:	20000530 	.word	0x20000530
 8002370:	20000315 	.word	0x20000315
 8002374:	0800c9d4 	.word	0x0800c9d4
				temp_check_buff[i] = rx_buffer[i];
 8002378:	4a7e      	ldr	r2, [pc, #504]	; (8002574 <DioIrqHndlr+0x4d0>)
 800237a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800237c:	4413      	add	r3, r2
 800237e:	7819      	ldrb	r1, [r3, #0]
 8002380:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002382:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002384:	4413      	add	r3, r2
 8002386:	460a      	mov	r2, r1
 8002388:	701a      	strb	r2, [r3, #0]
				myDebug("%02x ", temp_check_buff[i]);		//display 7e to 7e
 800238a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800238c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800238e:	4413      	add	r3, r2
 8002390:	781b      	ldrb	r3, [r3, #0]
 8002392:	4619      	mov	r1, r3
 8002394:	4878      	ldr	r0, [pc, #480]	; (8002578 <DioIrqHndlr+0x4d4>)
 8002396:	f7fe f9f1 	bl	800077c <myDebug>
			for (int i = 0; i < temp_rx_buffer_len; i++) {
 800239a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800239c:	3301      	adds	r3, #1
 800239e:	63bb      	str	r3, [r7, #56]	; 0x38
 80023a0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80023a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80023a6:	429a      	cmp	r2, r3
 80023a8:	dbe6      	blt.n	8002378 <DioIrqHndlr+0x2d4>
			}
			myDebug("\r\n");
 80023aa:	4874      	ldr	r0, [pc, #464]	; (800257c <DioIrqHndlr+0x4d8>)
 80023ac:	f7fe f9e6 	bl	800077c <myDebug>

			uint8_t crc_buff_len = temp_rx_buffer_len - 4;
 80023b0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80023b4:	3b04      	subs	r3, #4
 80023b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			uint8_t crc_buff[crc_buff_len];
 80023ba:	f897 1023 	ldrb.w	r1, [r7, #35]	; 0x23
 80023be:	460b      	mov	r3, r1
 80023c0:	3b01      	subs	r3, #1
 80023c2:	61fb      	str	r3, [r7, #28]
 80023c4:	b2cb      	uxtb	r3, r1
 80023c6:	2200      	movs	r2, #0
 80023c8:	4698      	mov	r8, r3
 80023ca:	4691      	mov	r9, r2
 80023cc:	f04f 0200 	mov.w	r2, #0
 80023d0:	f04f 0300 	mov.w	r3, #0
 80023d4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80023d8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80023dc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80023e0:	b2cb      	uxtb	r3, r1
 80023e2:	2200      	movs	r2, #0
 80023e4:	461c      	mov	r4, r3
 80023e6:	4615      	mov	r5, r2
 80023e8:	f04f 0200 	mov.w	r2, #0
 80023ec:	f04f 0300 	mov.w	r3, #0
 80023f0:	00eb      	lsls	r3, r5, #3
 80023f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80023f6:	00e2      	lsls	r2, r4, #3
 80023f8:	460b      	mov	r3, r1
 80023fa:	3307      	adds	r3, #7
 80023fc:	08db      	lsrs	r3, r3, #3
 80023fe:	00db      	lsls	r3, r3, #3
 8002400:	ebad 0d03 	sub.w	sp, sp, r3
 8002404:	466b      	mov	r3, sp
 8002406:	3300      	adds	r3, #0
 8002408:	61bb      	str	r3, [r7, #24]

			//			myDebug("\nGS Command Testing: 0x%x\r\n");

			int j = 0;
 800240a:	2300      	movs	r3, #0
 800240c:	637b      	str	r3, [r7, #52]	; 0x34
			for (int i = 1; i <= crc_buff_len; i++) {
 800240e:	2301      	movs	r3, #1
 8002410:	633b      	str	r3, [r7, #48]	; 0x30
 8002412:	e00e      	b.n	8002432 <DioIrqHndlr+0x38e>
				crc_buff[j] = temp_check_buff[i];// index 1 to previous byte of crc
 8002414:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002418:	4413      	add	r3, r2
 800241a:	7819      	ldrb	r1, [r3, #0]
 800241c:	69ba      	ldr	r2, [r7, #24]
 800241e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002420:	4413      	add	r3, r2
 8002422:	460a      	mov	r2, r1
 8002424:	701a      	strb	r2, [r3, #0]
				//				myDebug("%02x ", crc_buff[j]);
				j++;
 8002426:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002428:	3301      	adds	r3, #1
 800242a:	637b      	str	r3, [r7, #52]	; 0x34
			for (int i = 1; i <= crc_buff_len; i++) {
 800242c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800242e:	3301      	adds	r3, #1
 8002430:	633b      	str	r3, [r7, #48]	; 0x30
 8002432:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002436:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002438:	429a      	cmp	r2, r3
 800243a:	ddeb      	ble.n	8002414 <DioIrqHndlr+0x370>
			}
			myDebug("\r\n");
 800243c:	484f      	ldr	r0, [pc, #316]	; (800257c <DioIrqHndlr+0x4d8>)
 800243e:	f7fe f99d 	bl	800077c <myDebug>

			uint16_t crc = 0;
 8002442:	2300      	movs	r3, #0
 8002444:	82fb      	strh	r3, [r7, #22]
			crc = calculateCRC_CCITT_AX25(crc_buff, crc_buff_len);
 8002446:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800244a:	4619      	mov	r1, r3
 800244c:	69b8      	ldr	r0, [r7, #24]
 800244e:	f7fe fa21 	bl	8000894 <calculateCRC_CCITT_AX25>
 8002452:	4603      	mov	r3, r0
 8002454:	82fb      	strh	r3, [r7, #22]

			uint8_t calc_crc[2];
			calc_crc[0] = (crc >> 8) & 0xFF;
 8002456:	8afb      	ldrh	r3, [r7, #22]
 8002458:	0a1b      	lsrs	r3, r3, #8
 800245a:	b29b      	uxth	r3, r3
 800245c:	b2db      	uxtb	r3, r3
 800245e:	743b      	strb	r3, [r7, #16]
			calc_crc[1] = crc & 0xFF;
 8002460:	8afb      	ldrh	r3, [r7, #22]
 8002462:	b2db      	uxtb	r3, r3
 8002464:	747b      	strb	r3, [r7, #17]

			uint8_t msb_crc = temp_check_buff[temp_rx_buffer_len - 3];
 8002466:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800246a:	3b03      	subs	r3, #3
 800246c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800246e:	5cd3      	ldrb	r3, [r2, r3]
 8002470:	757b      	strb	r3, [r7, #21]
			uint8_t lsb_crc = temp_check_buff[temp_rx_buffer_len - 2];
 8002472:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002476:	3b02      	subs	r3, #2
 8002478:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800247a:	5cd3      	ldrb	r3, [r2, r3]
 800247c:	753b      	strb	r3, [r7, #20]

			if (calc_crc[0] == msb_crc && calc_crc[1] == lsb_crc) {
 800247e:	7c3b      	ldrb	r3, [r7, #16]
 8002480:	7d7a      	ldrb	r2, [r7, #21]
 8002482:	429a      	cmp	r2, r3
 8002484:	d10d      	bne.n	80024a2 <DioIrqHndlr+0x3fe>
 8002486:	7c7b      	ldrb	r3, [r7, #17]
 8002488:	7d3a      	ldrb	r2, [r7, #20]
 800248a:	429a      	cmp	r2, r3
 800248c:	d109      	bne.n	80024a2 <DioIrqHndlr+0x3fe>
				//				myDebug("GS Command checksum correct: 0x%x\r\n");
				memset(temp_check_buff, '\0', sizeof(temp_check_buff));
 800248e:	4633      	mov	r3, r6
 8002490:	461a      	mov	r2, r3
 8002492:	2100      	movs	r1, #0
 8002494:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002496:	f009 fadd 	bl	800ba54 <memset>
				RX_FLAG = 1;
 800249a:	4b39      	ldr	r3, [pc, #228]	; (8002580 <DioIrqHndlr+0x4dc>)
 800249c:	2201      	movs	r2, #1
 800249e:	601a      	str	r2, [r3, #0]
 80024a0:	e01e      	b.n	80024e0 <DioIrqHndlr+0x43c>

			} else {

				myDebug("\n********GS Command checksum incorrect: 0x%x\r\n");
 80024a2:	4838      	ldr	r0, [pc, #224]	; (8002584 <DioIrqHndlr+0x4e0>)
 80024a4:	f7fe f96a 	bl	800077c <myDebug>

				OBC_UART_RX[0] = 0x53;	//header
 80024a8:	4b37      	ldr	r3, [pc, #220]	; (8002588 <DioIrqHndlr+0x4e4>)
 80024aa:	2253      	movs	r2, #83	; 0x53
 80024ac:	701a      	strb	r2, [r3, #0]
				OBC_UART_RX[1] = 0xac;	//packet_ type
 80024ae:	4b36      	ldr	r3, [pc, #216]	; (8002588 <DioIrqHndlr+0x4e4>)
 80024b0:	22ac      	movs	r2, #172	; 0xac
 80024b2:	705a      	strb	r2, [r3, #1]
				OBC_UART_RX[2] = 0x04;	//length of info
 80024b4:	4b34      	ldr	r3, [pc, #208]	; (8002588 <DioIrqHndlr+0x4e4>)
 80024b6:	2204      	movs	r2, #4
 80024b8:	709a      	strb	r2, [r3, #2]
				OBC_UART_RX[3] = 0x02;	//mcu_no
 80024ba:	4b33      	ldr	r3, [pc, #204]	; (8002588 <DioIrqHndlr+0x4e4>)
 80024bc:	2202      	movs	r2, #2
 80024be:	70da      	strb	r2, [r3, #3]
				OBC_UART_RX[4] = 0xcc;	//checksum_error
 80024c0:	4b31      	ldr	r3, [pc, #196]	; (8002588 <DioIrqHndlr+0x4e4>)
 80024c2:	22cc      	movs	r2, #204	; 0xcc
 80024c4:	711a      	strb	r2, [r3, #4]
				OBC_UART_RX[5] = 0xee;	//error prefix
 80024c6:	4b30      	ldr	r3, [pc, #192]	; (8002588 <DioIrqHndlr+0x4e4>)
 80024c8:	22ee      	movs	r2, #238	; 0xee
 80024ca:	715a      	strb	r2, [r3, #5]
				obc_ilen = OBC_UART_RX[2];
 80024cc:	4b2e      	ldr	r3, [pc, #184]	; (8002588 <DioIrqHndlr+0x4e4>)
 80024ce:	789a      	ldrb	r2, [r3, #2]
 80024d0:	4b2e      	ldr	r3, [pc, #184]	; (800258c <DioIrqHndlr+0x4e8>)
 80024d2:	701a      	strb	r2, [r3, #0]

				OBC_SUCCESS_DATA_RX_FLAG = 1;
 80024d4:	4b2e      	ldr	r3, [pc, #184]	; (8002590 <DioIrqHndlr+0x4ec>)
 80024d6:	2201      	movs	r2, #1
 80024d8:	601a      	str	r2, [r3, #0]

				RX_FLAG = 0;
 80024da:	4b29      	ldr	r3, [pc, #164]	; (8002580 <DioIrqHndlr+0x4dc>)
 80024dc:	2200      	movs	r2, #0
 80024de:	601a      	str	r2, [r3, #0]
 80024e0:	f8d7 d008 	ldr.w	sp, [r7, #8]

			RX_FLAG = 0;

		}

		HAL_UART_Receive_DMA(&huart2, OBC_UART_RX, obc_plen);
 80024e4:	4b2b      	ldr	r3, [pc, #172]	; (8002594 <DioIrqHndlr+0x4f0>)
 80024e6:	781b      	ldrb	r3, [r3, #0]
 80024e8:	b29b      	uxth	r3, r3
 80024ea:	461a      	mov	r2, r3
 80024ec:	4926      	ldr	r1, [pc, #152]	; (8002588 <DioIrqHndlr+0x4e4>)
 80024ee:	482a      	ldr	r0, [pc, #168]	; (8002598 <DioIrqHndlr+0x4f4>)
 80024f0:	f004 f9c0 	bl	8006874 <HAL_UART_Receive_DMA>

		HAL_UART_Receive_DMA(&hlpuart1, OBC_UART_RX, obc_plen);
 80024f4:	4b27      	ldr	r3, [pc, #156]	; (8002594 <DioIrqHndlr+0x4f0>)
 80024f6:	781b      	ldrb	r3, [r3, #0]
 80024f8:	b29b      	uxth	r3, r3
 80024fa:	461a      	mov	r2, r3
 80024fc:	4922      	ldr	r1, [pc, #136]	; (8002588 <DioIrqHndlr+0x4e4>)
 80024fe:	4827      	ldr	r0, [pc, #156]	; (800259c <DioIrqHndlr+0x4f8>)
 8002500:	f004 f9b8 	bl	8006874 <HAL_UART_Receive_DMA>

	}

	if (radioIrq == IRQ_RX_TX_TIMEOUT) {
 8002504:	89fb      	ldrh	r3, [r7, #14]
 8002506:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800250a:	d12e      	bne.n	800256a <DioIrqHndlr+0x4c6>

		setPacketParams(rx_buffer_len);
 800250c:	4b24      	ldr	r3, [pc, #144]	; (80025a0 <DioIrqHndlr+0x4fc>)
 800250e:	781b      	ldrb	r3, [r3, #0]
 8002510:	4618      	mov	r0, r3
 8002512:	f7fe fc0d 	bl	8000d30 <setPacketParams>
		setModulationParams(GFSK_BR_1200, GFSK_FDEV_1200);
 8002516:	f640 31b8 	movw	r1, #3000	; 0xbb8
 800251a:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 800251e:	f7fe fc31 	bl	8000d84 <setModulationParams>
		radioConfig(rx_buffer, rx_buffer_len);
 8002522:	4b1f      	ldr	r3, [pc, #124]	; (80025a0 <DioIrqHndlr+0x4fc>)
 8002524:	781b      	ldrb	r3, [r3, #0]
 8002526:	4619      	mov	r1, r3
 8002528:	4812      	ldr	r0, [pc, #72]	; (8002574 <DioIrqHndlr+0x4d0>)
 800252a:	f7fe fc49 	bl	8000dc0 <radioConfig>

		myDebug("\n########## RX TX TIMEOUT ##########\n");
 800252e:	481d      	ldr	r0, [pc, #116]	; (80025a4 <DioIrqHndlr+0x500>)
 8002530:	f7fe f924 	bl	800077c <myDebug>

		SUBGRF_SetRfFrequency(FREQ_435_MHZ);
 8002534:	481c      	ldr	r0, [pc, #112]	; (80025a8 <DioIrqHndlr+0x504>)
 8002536:	f008 f85b 	bl	800a5f0 <SUBGRF_SetRfFrequency>
		SUBGRF_SetSwitch(RFO_LP, RFSWITCH_RX); /*Set RF switch*/
 800253a:	2100      	movs	r1, #0
 800253c:	2001      	movs	r0, #1
 800253e:	f008 fc9f 	bl	800ae80 <SUBGRF_SetSwitch>
		SUBGRF_SetRxBoosted(0xFFFFFF);
 8002542:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8002546:	f007 fe7f 	bl	800a248 <SUBGRF_SetRxBoosted>

		HAL_UART_Receive_DMA(&huart2, OBC_UART_RX, obc_plen);
 800254a:	4b12      	ldr	r3, [pc, #72]	; (8002594 <DioIrqHndlr+0x4f0>)
 800254c:	781b      	ldrb	r3, [r3, #0]
 800254e:	b29b      	uxth	r3, r3
 8002550:	461a      	mov	r2, r3
 8002552:	490d      	ldr	r1, [pc, #52]	; (8002588 <DioIrqHndlr+0x4e4>)
 8002554:	4810      	ldr	r0, [pc, #64]	; (8002598 <DioIrqHndlr+0x4f4>)
 8002556:	f004 f98d 	bl	8006874 <HAL_UART_Receive_DMA>

		HAL_UART_Receive_DMA(&hlpuart1, OBC_UART_RX, obc_plen);
 800255a:	4b0e      	ldr	r3, [pc, #56]	; (8002594 <DioIrqHndlr+0x4f0>)
 800255c:	781b      	ldrb	r3, [r3, #0]
 800255e:	b29b      	uxth	r3, r3
 8002560:	461a      	mov	r2, r3
 8002562:	4909      	ldr	r1, [pc, #36]	; (8002588 <DioIrqHndlr+0x4e4>)
 8002564:	480d      	ldr	r0, [pc, #52]	; (800259c <DioIrqHndlr+0x4f8>)
 8002566:	f004 f985 	bl	8006874 <HAL_UART_Receive_DMA>
	}

}
 800256a:	3744      	adds	r7, #68	; 0x44
 800256c:	46bd      	mov	sp, r7
 800256e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002572:	bf00      	nop
 8002574:	200002ac 	.word	0x200002ac
 8002578:	0800c578 	.word	0x0800c578
 800257c:	0800c580 	.word	0x0800c580
 8002580:	200004c0 	.word	0x200004c0
 8002584:	0800c9f4 	.word	0x0800c9f4
 8002588:	20000318 	.word	0x20000318
 800258c:	20000316 	.word	0x20000316
 8002590:	20000370 	.word	0x20000370
 8002594:	20000001 	.word	0x20000001
 8002598:	20000658 	.word	0x20000658
 800259c:	20000530 	.word	0x20000530
 80025a0:	20000000 	.word	0x20000000
 80025a4:	0800ca24 	.word	0x0800ca24
 80025a8:	19f25968 	.word	0x19f25968

080025ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80025ac:	b480      	push	{r7}
 80025ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80025b0:	b672      	cpsid	i
}
 80025b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80025b4:	e7fe      	b.n	80025b4 <Error_Handler+0x8>
	...

080025b8 <WAIT_FOR_HANDSHAKE>:
#define ACK_LENGTH	(7)

extern uint8_t OBC_HANDSHAKE_FLAG;
uint8_t MainCMDHs[ACK_LENGTH];

void WAIT_FOR_HANDSHAKE() {
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b086      	sub	sp, #24
 80025bc:	af00      	add	r7, sp, #0

	memset(MainCMDHs, '\0', ACK_LENGTH);
 80025be:	2207      	movs	r2, #7
 80025c0:	2100      	movs	r1, #0
 80025c2:	486c      	ldr	r0, [pc, #432]	; (8002774 <WAIT_FOR_HANDSHAKE+0x1bc>)
 80025c4:	f009 fa46 	bl	800ba54 <memset>
	OBC_HANDSHAKE_FLAG = 0;
 80025c8:	4b6b      	ldr	r3, [pc, #428]	; (8002778 <WAIT_FOR_HANDSHAKE+0x1c0>)
 80025ca:	2200      	movs	r2, #0
 80025cc:	701a      	strb	r2, [r3, #0]
	if (HAL_UART_Receive(&huart2, MainCMDHs, ACK_LENGTH, 7000) == HAL_OK
 80025ce:	f641 3358 	movw	r3, #7000	; 0x1b58
 80025d2:	2207      	movs	r2, #7
 80025d4:	4967      	ldr	r1, [pc, #412]	; (8002774 <WAIT_FOR_HANDSHAKE+0x1bc>)
 80025d6:	4869      	ldr	r0, [pc, #420]	; (800277c <WAIT_FOR_HANDSHAKE+0x1c4>)
 80025d8:	f004 f887 	bl	80066ea <HAL_UART_Receive>
 80025dc:	4603      	mov	r3, r0
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d00a      	beq.n	80025f8 <WAIT_FOR_HANDSHAKE+0x40>
			|| HAL_UART_Receive(&hlpuart1, MainCMDHs, ACK_LENGTH, 7000)
 80025e2:	f641 3358 	movw	r3, #7000	; 0x1b58
 80025e6:	2207      	movs	r2, #7
 80025e8:	4962      	ldr	r1, [pc, #392]	; (8002774 <WAIT_FOR_HANDSHAKE+0x1bc>)
 80025ea:	4865      	ldr	r0, [pc, #404]	; (8002780 <WAIT_FOR_HANDSHAKE+0x1c8>)
 80025ec:	f004 f87d 	bl	80066ea <HAL_UART_Receive>
 80025f0:	4603      	mov	r3, r0
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	f040 80aa 	bne.w	800274c <WAIT_FOR_HANDSHAKE+0x194>
					== HAL_OK) {
		myDebug("--> Handshake command received from OBC: 0x%x\r\n");
 80025f8:	4862      	ldr	r0, [pc, #392]	; (8002784 <WAIT_FOR_HANDSHAKE+0x1cc>)
 80025fa:	f7fe f8bf 	bl	800077c <myDebug>
		for (int i = 0; i < (ACK_LENGTH); i++) {
 80025fe:	2300      	movs	r3, #0
 8002600:	617b      	str	r3, [r7, #20]
 8002602:	e00a      	b.n	800261a <WAIT_FOR_HANDSHAKE+0x62>
			myDebug("%02x ", MainCMDHs[i]);
 8002604:	4a5b      	ldr	r2, [pc, #364]	; (8002774 <WAIT_FOR_HANDSHAKE+0x1bc>)
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	4413      	add	r3, r2
 800260a:	781b      	ldrb	r3, [r3, #0]
 800260c:	4619      	mov	r1, r3
 800260e:	485e      	ldr	r0, [pc, #376]	; (8002788 <WAIT_FOR_HANDSHAKE+0x1d0>)
 8002610:	f7fe f8b4 	bl	800077c <myDebug>
		for (int i = 0; i < (ACK_LENGTH); i++) {
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	3301      	adds	r3, #1
 8002618:	617b      	str	r3, [r7, #20]
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	2b06      	cmp	r3, #6
 800261e:	ddf1      	ble.n	8002604 <WAIT_FOR_HANDSHAKE+0x4c>
		}
		myDebug("\n");
 8002620:	485a      	ldr	r0, [pc, #360]	; (800278c <WAIT_FOR_HANDSHAKE+0x1d4>)
 8002622:	f7fe f8ab 	bl	800077c <myDebug>

		uint8_t header = 0x00;
 8002626:	2300      	movs	r3, #0
 8002628:	71fb      	strb	r3, [r7, #7]

		if (MainCMDHs[0] == header) {
 800262a:	4b52      	ldr	r3, [pc, #328]	; (8002774 <WAIT_FOR_HANDSHAKE+0x1bc>)
 800262c:	781b      	ldrb	r3, [r3, #0]
 800262e:	79fa      	ldrb	r2, [r7, #7]
 8002630:	429a      	cmp	r2, r3
 8002632:	d111      	bne.n	8002658 <WAIT_FOR_HANDSHAKE+0xa0>

			for (int loop1 = 0; loop1 < sizeof(MainCMDHs); loop1++) {
 8002634:	2300      	movs	r3, #0
 8002636:	613b      	str	r3, [r7, #16]
 8002638:	e00b      	b.n	8002652 <WAIT_FOR_HANDSHAKE+0x9a>
				MainCMDHs[loop1] = MainCMDHs[loop1 + 1];
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	3301      	adds	r3, #1
 800263e:	4a4d      	ldr	r2, [pc, #308]	; (8002774 <WAIT_FOR_HANDSHAKE+0x1bc>)
 8002640:	5cd1      	ldrb	r1, [r2, r3]
 8002642:	4a4c      	ldr	r2, [pc, #304]	; (8002774 <WAIT_FOR_HANDSHAKE+0x1bc>)
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	4413      	add	r3, r2
 8002648:	460a      	mov	r2, r1
 800264a:	701a      	strb	r2, [r3, #0]
			for (int loop1 = 0; loop1 < sizeof(MainCMDHs); loop1++) {
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	3301      	adds	r3, #1
 8002650:	613b      	str	r3, [r7, #16]
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	2b06      	cmp	r3, #6
 8002656:	d9f0      	bls.n	800263a <WAIT_FOR_HANDSHAKE+0x82>
			}
		}

		if (MainCMDHs[0] == ACK_HEAD && MainCMDHs[5] == ACK_TAIL) {
 8002658:	4b46      	ldr	r3, [pc, #280]	; (8002774 <WAIT_FOR_HANDSHAKE+0x1bc>)
 800265a:	781b      	ldrb	r3, [r3, #0]
 800265c:	2b53      	cmp	r3, #83	; 0x53
 800265e:	d13a      	bne.n	80026d6 <WAIT_FOR_HANDSHAKE+0x11e>
 8002660:	4b44      	ldr	r3, [pc, #272]	; (8002774 <WAIT_FOR_HANDSHAKE+0x1bc>)
 8002662:	795b      	ldrb	r3, [r3, #5]
 8002664:	2b7e      	cmp	r3, #126	; 0x7e
 8002666:	d136      	bne.n	80026d6 <WAIT_FOR_HANDSHAKE+0x11e>
			myDebug("--> Command Acknowledged successful!\n");
 8002668:	4849      	ldr	r0, [pc, #292]	; (8002790 <WAIT_FOR_HANDSHAKE+0x1d8>)
 800266a:	f7fe f887 	bl	800077c <myDebug>
			if (HAL_UART_Transmit(&huart2, MainCMDHs, ACK_LENGTH, 2000)
 800266e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002672:	2207      	movs	r2, #7
 8002674:	493f      	ldr	r1, [pc, #252]	; (8002774 <WAIT_FOR_HANDSHAKE+0x1bc>)
 8002676:	4841      	ldr	r0, [pc, #260]	; (800277c <WAIT_FOR_HANDSHAKE+0x1c4>)
 8002678:	f003 ffb1 	bl	80065de <HAL_UART_Transmit>
 800267c:	4603      	mov	r3, r0
 800267e:	2b00      	cmp	r3, #0
 8002680:	d009      	beq.n	8002696 <WAIT_FOR_HANDSHAKE+0xde>
					== HAL_OK
					|| HAL_UART_Transmit(&hlpuart1, MainCMDHs, ACK_LENGTH, 2000)
 8002682:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002686:	2207      	movs	r2, #7
 8002688:	493a      	ldr	r1, [pc, #232]	; (8002774 <WAIT_FOR_HANDSHAKE+0x1bc>)
 800268a:	483d      	ldr	r0, [pc, #244]	; (8002780 <WAIT_FOR_HANDSHAKE+0x1c8>)
 800268c:	f003 ffa7 	bl	80065de <HAL_UART_Transmit>
 8002690:	4603      	mov	r3, r0
 8002692:	2b00      	cmp	r3, #0
 8002694:	d158      	bne.n	8002748 <WAIT_FOR_HANDSHAKE+0x190>
							== HAL_OK) {
				myDebug("--> Handshake ACK, re-transmit to OBC: \n");
 8002696:	483f      	ldr	r0, [pc, #252]	; (8002794 <WAIT_FOR_HANDSHAKE+0x1dc>)
 8002698:	f7fe f870 	bl	800077c <myDebug>
				for (int i = 0; i < (ACK_LENGTH); i++) {
 800269c:	2300      	movs	r3, #0
 800269e:	60fb      	str	r3, [r7, #12]
 80026a0:	e00a      	b.n	80026b8 <WAIT_FOR_HANDSHAKE+0x100>
					myDebug("%02x ", MainCMDHs[i]);
 80026a2:	4a34      	ldr	r2, [pc, #208]	; (8002774 <WAIT_FOR_HANDSHAKE+0x1bc>)
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	4413      	add	r3, r2
 80026a8:	781b      	ldrb	r3, [r3, #0]
 80026aa:	4619      	mov	r1, r3
 80026ac:	4836      	ldr	r0, [pc, #216]	; (8002788 <WAIT_FOR_HANDSHAKE+0x1d0>)
 80026ae:	f7fe f865 	bl	800077c <myDebug>
				for (int i = 0; i < (ACK_LENGTH); i++) {
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	3301      	adds	r3, #1
 80026b6:	60fb      	str	r3, [r7, #12]
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	2b06      	cmp	r3, #6
 80026bc:	ddf1      	ble.n	80026a2 <WAIT_FOR_HANDSHAKE+0xea>
				}
				myDebug("\n");
 80026be:	4833      	ldr	r0, [pc, #204]	; (800278c <WAIT_FOR_HANDSHAKE+0x1d4>)
 80026c0:	f7fe f85c 	bl	800077c <myDebug>
				OBC_HANDSHAKE_FLAG = 1;
 80026c4:	4b2c      	ldr	r3, [pc, #176]	; (8002778 <WAIT_FOR_HANDSHAKE+0x1c0>)
 80026c6:	2201      	movs	r2, #1
 80026c8:	701a      	strb	r2, [r3, #0]
				memset(MainCMDHs, '\0', ACK_LENGTH);
 80026ca:	2207      	movs	r2, #7
 80026cc:	2100      	movs	r1, #0
 80026ce:	4829      	ldr	r0, [pc, #164]	; (8002774 <WAIT_FOR_HANDSHAKE+0x1bc>)
 80026d0:	f009 f9c0 	bl	800ba54 <memset>
			if (HAL_UART_Transmit(&huart2, MainCMDHs, ACK_LENGTH, 2000)
 80026d4:	e038      	b.n	8002748 <WAIT_FOR_HANDSHAKE+0x190>
			}
		} else {
			myDebug("*** Unknown Handshake command received!\n");
 80026d6:	4830      	ldr	r0, [pc, #192]	; (8002798 <WAIT_FOR_HANDSHAKE+0x1e0>)
 80026d8:	f7fe f850 	bl	800077c <myDebug>
			if (HAL_UART_Transmit(&huart2, MainCMDHs, ACK_LENGTH, 2000)
 80026dc:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80026e0:	2207      	movs	r2, #7
 80026e2:	4924      	ldr	r1, [pc, #144]	; (8002774 <WAIT_FOR_HANDSHAKE+0x1bc>)
 80026e4:	4825      	ldr	r0, [pc, #148]	; (800277c <WAIT_FOR_HANDSHAKE+0x1c4>)
 80026e6:	f003 ff7a 	bl	80065de <HAL_UART_Transmit>
 80026ea:	4603      	mov	r3, r0
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d009      	beq.n	8002704 <WAIT_FOR_HANDSHAKE+0x14c>
					== HAL_OK
					|| HAL_UART_Transmit(&hlpuart1, MainCMDHs, ACK_LENGTH, 7000)
 80026f0:	f641 3358 	movw	r3, #7000	; 0x1b58
 80026f4:	2207      	movs	r2, #7
 80026f6:	491f      	ldr	r1, [pc, #124]	; (8002774 <WAIT_FOR_HANDSHAKE+0x1bc>)
 80026f8:	4821      	ldr	r0, [pc, #132]	; (8002780 <WAIT_FOR_HANDSHAKE+0x1c8>)
 80026fa:	f003 ff70 	bl	80065de <HAL_UART_Transmit>
 80026fe:	4603      	mov	r3, r0
 8002700:	2b00      	cmp	r3, #0
 8002702:	d131      	bne.n	8002768 <WAIT_FOR_HANDSHAKE+0x1b0>
							== HAL_OK) {
				myDebug("--> Unknown Handshake ACK, re-transmit to OBC.\n");
 8002704:	4825      	ldr	r0, [pc, #148]	; (800279c <WAIT_FOR_HANDSHAKE+0x1e4>)
 8002706:	f7fe f839 	bl	800077c <myDebug>
				for (int i = 0; i < (ACK_LENGTH); i++) {
 800270a:	2300      	movs	r3, #0
 800270c:	60bb      	str	r3, [r7, #8]
 800270e:	e00a      	b.n	8002726 <WAIT_FOR_HANDSHAKE+0x16e>
					myDebug("%02x ", MainCMDHs[i]);
 8002710:	4a18      	ldr	r2, [pc, #96]	; (8002774 <WAIT_FOR_HANDSHAKE+0x1bc>)
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	4413      	add	r3, r2
 8002716:	781b      	ldrb	r3, [r3, #0]
 8002718:	4619      	mov	r1, r3
 800271a:	481b      	ldr	r0, [pc, #108]	; (8002788 <WAIT_FOR_HANDSHAKE+0x1d0>)
 800271c:	f7fe f82e 	bl	800077c <myDebug>
				for (int i = 0; i < (ACK_LENGTH); i++) {
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	3301      	adds	r3, #1
 8002724:	60bb      	str	r3, [r7, #8]
 8002726:	68bb      	ldr	r3, [r7, #8]
 8002728:	2b06      	cmp	r3, #6
 800272a:	ddf1      	ble.n	8002710 <WAIT_FOR_HANDSHAKE+0x158>
				}
				myDebug("\n");
 800272c:	4817      	ldr	r0, [pc, #92]	; (800278c <WAIT_FOR_HANDSHAKE+0x1d4>)
 800272e:	f7fe f825 	bl	800077c <myDebug>
				memset(MainCMDHs, '\0', ACK_LENGTH);
 8002732:	2207      	movs	r2, #7
 8002734:	2100      	movs	r1, #0
 8002736:	480f      	ldr	r0, [pc, #60]	; (8002774 <WAIT_FOR_HANDSHAKE+0x1bc>)
 8002738:	f009 f98c 	bl	800ba54 <memset>
				OBC_HANDSHAKE_FLAG = 0;
 800273c:	4b0e      	ldr	r3, [pc, #56]	; (8002778 <WAIT_FOR_HANDSHAKE+0x1c0>)
 800273e:	2200      	movs	r2, #0
 8002740:	701a      	strb	r2, [r3, #0]
				WAIT_FOR_HANDSHAKE();
 8002742:	f7ff ff39 	bl	80025b8 <WAIT_FOR_HANDSHAKE>
					== HAL_OK) {
 8002746:	e00f      	b.n	8002768 <WAIT_FOR_HANDSHAKE+0x1b0>
			if (HAL_UART_Transmit(&huart2, MainCMDHs, ACK_LENGTH, 2000)
 8002748:	bf00      	nop
					== HAL_OK) {
 800274a:	e00d      	b.n	8002768 <WAIT_FOR_HANDSHAKE+0x1b0>
			}
		}
	} else {
		OBC_HANDSHAKE_FLAG = 0;
 800274c:	4b0a      	ldr	r3, [pc, #40]	; (8002778 <WAIT_FOR_HANDSHAKE+0x1c0>)
 800274e:	2200      	movs	r2, #0
 8002750:	701a      	strb	r2, [r3, #0]
		myDebug("*** Handshake Command receive failed, try again!\n");
 8002752:	4813      	ldr	r0, [pc, #76]	; (80027a0 <WAIT_FOR_HANDSHAKE+0x1e8>)
 8002754:	f7fe f812 	bl	800077c <myDebug>
		memset(MainCMDHs, '\0', ACK_LENGTH);
 8002758:	2207      	movs	r2, #7
 800275a:	2100      	movs	r1, #0
 800275c:	4805      	ldr	r0, [pc, #20]	; (8002774 <WAIT_FOR_HANDSHAKE+0x1bc>)
 800275e:	f009 f979 	bl	800ba54 <memset>
		WAIT_FOR_HANDSHAKE();
 8002762:	f7ff ff29 	bl	80025b8 <WAIT_FOR_HANDSHAKE>
	}
}
 8002766:	e000      	b.n	800276a <WAIT_FOR_HANDSHAKE+0x1b2>
					== HAL_OK) {
 8002768:	bf00      	nop
}
 800276a:	bf00      	nop
 800276c:	3718      	adds	r7, #24
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}
 8002772:	bf00      	nop
 8002774:	200004c4 	.word	0x200004c4
 8002778:	200004a8 	.word	0x200004a8
 800277c:	20000658 	.word	0x20000658
 8002780:	20000530 	.word	0x20000530
 8002784:	0800ca4c 	.word	0x0800ca4c
 8002788:	0800ca7c 	.word	0x0800ca7c
 800278c:	0800ca84 	.word	0x0800ca84
 8002790:	0800ca88 	.word	0x0800ca88
 8002794:	0800cab0 	.word	0x0800cab0
 8002798:	0800cadc 	.word	0x0800cadc
 800279c:	0800cb08 	.word	0x0800cb08
 80027a0:	0800cb38 	.word	0x0800cb38

080027a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80027a4:	b480      	push	{r7}
 80027a6:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80027a8:	bf00      	nop
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bc80      	pop	{r7}
 80027ae:	4770      	bx	lr

080027b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80027b0:	b480      	push	{r7}
 80027b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80027b4:	e7fe      	b.n	80027b4 <NMI_Handler+0x4>

080027b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027b6:	b480      	push	{r7}
 80027b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027ba:	e7fe      	b.n	80027ba <HardFault_Handler+0x4>

080027bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80027bc:	b480      	push	{r7}
 80027be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80027c0:	e7fe      	b.n	80027c0 <MemManage_Handler+0x4>

080027c2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80027c2:	b480      	push	{r7}
 80027c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80027c6:	e7fe      	b.n	80027c6 <BusFault_Handler+0x4>

080027c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80027c8:	b480      	push	{r7}
 80027ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80027cc:	e7fe      	b.n	80027cc <UsageFault_Handler+0x4>

080027ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80027ce:	b480      	push	{r7}
 80027d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80027d2:	bf00      	nop
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bc80      	pop	{r7}
 80027d8:	4770      	bx	lr

080027da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80027da:	b480      	push	{r7}
 80027dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80027de:	bf00      	nop
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bc80      	pop	{r7}
 80027e4:	4770      	bx	lr

080027e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80027e6:	b480      	push	{r7}
 80027e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80027ea:	bf00      	nop
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bc80      	pop	{r7}
 80027f0:	4770      	bx	lr

080027f2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80027f2:	b580      	push	{r7, lr}
 80027f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80027f6:	f000 fdc3 	bl	8003380 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80027fa:	bf00      	nop
 80027fc:	bd80      	pop	{r7, pc}
	...

08002800 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 1 Interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8002804:	4802      	ldr	r0, [pc, #8]	; (8002810 <DMA1_Channel1_IRQHandler+0x10>)
 8002806:	f001 f8bd 	bl	8003984 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800280a:	bf00      	nop
 800280c:	bd80      	pop	{r7, pc}
 800280e:	bf00      	nop
 8002810:	200006ec 	.word	0x200006ec

08002814 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 2 Interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8002818:	4802      	ldr	r0, [pc, #8]	; (8002824 <DMA1_Channel2_IRQHandler+0x10>)
 800281a:	f001 f8b3 	bl	8003984 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800281e:	bf00      	nop
 8002820:	bd80      	pop	{r7, pc}
 8002822:	bf00      	nop
 8002824:	2000074c 	.word	0x2000074c

08002828 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 3 Interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800282c:	4802      	ldr	r0, [pc, #8]	; (8002838 <DMA1_Channel3_IRQHandler+0x10>)
 800282e:	f001 f8a9 	bl	8003984 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8002832:	bf00      	nop
 8002834:	bd80      	pop	{r7, pc}
 8002836:	bf00      	nop
 8002838:	200007ac 	.word	0x200007ac

0800283c <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 4 Interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002840:	4802      	ldr	r0, [pc, #8]	; (800284c <DMA1_Channel4_IRQHandler+0x10>)
 8002842:	f001 f89f 	bl	8003984 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8002846:	bf00      	nop
 8002848:	bd80      	pop	{r7, pc}
 800284a:	bf00      	nop
 800284c:	2000080c 	.word	0x2000080c

08002850 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 5 Interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002854:	4802      	ldr	r0, [pc, #8]	; (8002860 <DMA1_Channel5_IRQHandler+0x10>)
 8002856:	f001 f895 	bl	8003984 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800285a:	bf00      	nop
 800285c:	bd80      	pop	{r7, pc}
 800285e:	bf00      	nop
 8002860:	2000086c 	.word	0x2000086c

08002864 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 6 Interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002868:	4802      	ldr	r0, [pc, #8]	; (8002874 <DMA1_Channel6_IRQHandler+0x10>)
 800286a:	f001 f88b 	bl	8003984 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800286e:	bf00      	nop
 8002870:	bd80      	pop	{r7, pc}
 8002872:	bf00      	nop
 8002874:	200008cc 	.word	0x200008cc

08002878 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 Interrupt.
  */
void USART1_IRQHandler(void)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800287c:	4802      	ldr	r0, [pc, #8]	; (8002888 <USART1_IRQHandler+0x10>)
 800287e:	f004 f845 	bl	800690c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002882:	bf00      	nop
 8002884:	bd80      	pop	{r7, pc}
 8002886:	bf00      	nop
 8002888:	200005c4 	.word	0x200005c4

0800288c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002890:	4802      	ldr	r0, [pc, #8]	; (800289c <USART2_IRQHandler+0x10>)
 8002892:	f004 f83b 	bl	800690c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002896:	bf00      	nop
 8002898:	bd80      	pop	{r7, pc}
 800289a:	bf00      	nop
 800289c:	20000658 	.word	0x20000658

080028a0 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 Interrupt.
  */
void LPUART1_IRQHandler(void)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 80028a4:	4802      	ldr	r0, [pc, #8]	; (80028b0 <LPUART1_IRQHandler+0x10>)
 80028a6:	f004 f831 	bl	800690c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 80028aa:	bf00      	nop
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop
 80028b0:	20000530 	.word	0x20000530

080028b4 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 80028b8:	4802      	ldr	r0, [pc, #8]	; (80028c4 <SUBGHZ_Radio_IRQHandler+0x10>)
 80028ba:	f003 f9c3 	bl	8005c44 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 80028be:	bf00      	nop
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop
 80028c4:	200004cc 	.word	0x200004cc

080028c8 <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b085      	sub	sp, #20
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 80028d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028d4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80028d6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	4313      	orrs	r3, r2
 80028de:	664b      	str	r3, [r1, #100]	; 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 80028e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028e4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	4013      	ands	r3, r2
 80028ea:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80028ec:	68fb      	ldr	r3, [r7, #12]
}
 80028ee:	bf00      	nop
 80028f0:	3714      	adds	r7, #20
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bc80      	pop	{r7}
 80028f6:	4770      	bx	lr

080028f8 <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 80028fc:	4b06      	ldr	r3, [pc, #24]	; (8002918 <MX_SUBGHZ_Init+0x20>)
 80028fe:	2208      	movs	r2, #8
 8002900:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 8002902:	4805      	ldr	r0, [pc, #20]	; (8002918 <MX_SUBGHZ_Init+0x20>)
 8002904:	f002 ff1c 	bl	8005740 <HAL_SUBGHZ_Init>
 8002908:	4603      	mov	r3, r0
 800290a:	2b00      	cmp	r3, #0
 800290c:	d001      	beq.n	8002912 <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 800290e:	f7ff fe4d 	bl	80025ac <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 8002912:	bf00      	nop
 8002914:	bd80      	pop	{r7, pc}
 8002916:	bf00      	nop
 8002918:	200004cc 	.word	0x200004cc

0800291c <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b082      	sub	sp, #8
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 8002924:	2001      	movs	r0, #1
 8002926:	f7ff ffcf 	bl	80028c8 <LL_APB3_GRP1_EnableClock>

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 800292a:	2200      	movs	r2, #0
 800292c:	2100      	movs	r1, #0
 800292e:	2032      	movs	r0, #50	; 0x32
 8002930:	f000 fe0f 	bl	8003552 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 8002934:	2032      	movs	r0, #50	; 0x32
 8002936:	f000 fe26 	bl	8003586 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 800293a:	bf00      	nop
 800293c:	3708      	adds	r7, #8
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}

08002942 <SystemApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SystemApp_Init(void)
{
 8002942:	b480      	push	{r7}
 8002944:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SystemApp_Init_1 */

  /* USER CODE END SystemApp_Init_1 */

}
 8002946:	bf00      	nop
 8002948:	46bd      	mov	sp, r7
 800294a:	bc80      	pop	{r7}
 800294c:	4770      	bx	lr
	...

08002950 <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b082      	sub	sp, #8
 8002954:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002956:	2300      	movs	r3, #0
 8002958:	607b      	str	r3, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  if (SYS_TimerInitialisedFlag == 0)
 800295a:	4b06      	ldr	r3, [pc, #24]	; (8002974 <HAL_GetTick+0x24>)
 800295c:	781b      	ldrb	r3, [r3, #0]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d002      	beq.n	8002968 <HAL_GetTick+0x18>

    /* USER CODE END HAL_GetTick_EarlyCall */
  }
  else
  {
    ret = TIMER_IF_GetTimerValue();
 8002962:	f000 f908 	bl	8002b76 <TIMER_IF_GetTimerValue>
 8002966:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
  return ret;
 8002968:	687b      	ldr	r3, [r7, #4]
}
 800296a:	4618      	mov	r0, r3
 800296c:	3708      	adds	r7, #8
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}
 8002972:	bf00      	nop
 8002974:	200004d8 	.word	0x200004d8

08002978 <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b082      	sub	sp, #8
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	4618      	mov	r0, r3
 8002984:	f000 f925 	bl	8002bd2 <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 8002988:	bf00      	nop
 800298a:	3708      	adds	r7, #8
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}

08002990 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b086      	sub	sp, #24
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002998:	4a14      	ldr	r2, [pc, #80]	; (80029ec <_sbrk+0x5c>)
 800299a:	4b15      	ldr	r3, [pc, #84]	; (80029f0 <_sbrk+0x60>)
 800299c:	1ad3      	subs	r3, r2, r3
 800299e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80029a4:	4b13      	ldr	r3, [pc, #76]	; (80029f4 <_sbrk+0x64>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d102      	bne.n	80029b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80029ac:	4b11      	ldr	r3, [pc, #68]	; (80029f4 <_sbrk+0x64>)
 80029ae:	4a12      	ldr	r2, [pc, #72]	; (80029f8 <_sbrk+0x68>)
 80029b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80029b2:	4b10      	ldr	r3, [pc, #64]	; (80029f4 <_sbrk+0x64>)
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	4413      	add	r3, r2
 80029ba:	693a      	ldr	r2, [r7, #16]
 80029bc:	429a      	cmp	r2, r3
 80029be:	d207      	bcs.n	80029d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80029c0:	f009 f850 	bl	800ba64 <__errno>
 80029c4:	4603      	mov	r3, r0
 80029c6:	220c      	movs	r2, #12
 80029c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80029ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80029ce:	e009      	b.n	80029e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80029d0:	4b08      	ldr	r3, [pc, #32]	; (80029f4 <_sbrk+0x64>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80029d6:	4b07      	ldr	r3, [pc, #28]	; (80029f4 <_sbrk+0x64>)
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	4413      	add	r3, r2
 80029de:	4a05      	ldr	r2, [pc, #20]	; (80029f4 <_sbrk+0x64>)
 80029e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80029e2:	68fb      	ldr	r3, [r7, #12]
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	3718      	adds	r7, #24
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}
 80029ec:	20010000 	.word	0x20010000
 80029f0:	00000400 	.word	0x00000400
 80029f4:	200004dc 	.word	0x200004dc
 80029f8:	20000c38 	.word	0x20000c38

080029fc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80029fc:	b480      	push	{r7}
 80029fe:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8002a00:	bf00      	nop
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bc80      	pop	{r7}
 8002a06:	4770      	bx	lr

08002a08 <LL_APB1_GRP1_EnableClock>:
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b085      	sub	sp, #20
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002a10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a14:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002a16:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002a20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a24:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	4013      	ands	r3, r2
 8002a2a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
}
 8002a2e:	bf00      	nop
 8002a30:	3714      	adds	r7, #20
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bc80      	pop	{r7}
 8002a36:	4770      	bx	lr

08002a38 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b088      	sub	sp, #32
 8002a3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a3e:	f107 0310 	add.w	r3, r7, #16
 8002a42:	2200      	movs	r2, #0
 8002a44:	601a      	str	r2, [r3, #0]
 8002a46:	605a      	str	r2, [r3, #4]
 8002a48:	609a      	str	r2, [r3, #8]
 8002a4a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a4c:	1d3b      	adds	r3, r7, #4
 8002a4e:	2200      	movs	r2, #0
 8002a50:	601a      	str	r2, [r3, #0]
 8002a52:	605a      	str	r2, [r3, #4]
 8002a54:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002a56:	4b1d      	ldr	r3, [pc, #116]	; (8002acc <MX_TIM2_Init+0x94>)
 8002a58:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002a5c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 48-1;
 8002a5e:	4b1b      	ldr	r3, [pc, #108]	; (8002acc <MX_TIM2_Init+0x94>)
 8002a60:	222f      	movs	r2, #47	; 0x2f
 8002a62:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a64:	4b19      	ldr	r3, [pc, #100]	; (8002acc <MX_TIM2_Init+0x94>)
 8002a66:	2200      	movs	r2, #0
 8002a68:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000001-1;
 8002a6a:	4b18      	ldr	r3, [pc, #96]	; (8002acc <MX_TIM2_Init+0x94>)
 8002a6c:	4a18      	ldr	r2, [pc, #96]	; (8002ad0 <MX_TIM2_Init+0x98>)
 8002a6e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a70:	4b16      	ldr	r3, [pc, #88]	; (8002acc <MX_TIM2_Init+0x94>)
 8002a72:	2200      	movs	r2, #0
 8002a74:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002a76:	4b15      	ldr	r3, [pc, #84]	; (8002acc <MX_TIM2_Init+0x94>)
 8002a78:	2280      	movs	r2, #128	; 0x80
 8002a7a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002a7c:	4813      	ldr	r0, [pc, #76]	; (8002acc <MX_TIM2_Init+0x94>)
 8002a7e:	f003 fa7f 	bl	8005f80 <HAL_TIM_Base_Init>
 8002a82:	4603      	mov	r3, r0
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d001      	beq.n	8002a8c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002a88:	f7ff fd90 	bl	80025ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a90:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002a92:	f107 0310 	add.w	r3, r7, #16
 8002a96:	4619      	mov	r1, r3
 8002a98:	480c      	ldr	r0, [pc, #48]	; (8002acc <MX_TIM2_Init+0x94>)
 8002a9a:	f003 fb0d 	bl	80060b8 <HAL_TIM_ConfigClockSource>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d001      	beq.n	8002aa8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002aa4:	f7ff fd82 	bl	80025ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002aac:	2300      	movs	r3, #0
 8002aae:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002ab0:	1d3b      	adds	r3, r7, #4
 8002ab2:	4619      	mov	r1, r3
 8002ab4:	4805      	ldr	r0, [pc, #20]	; (8002acc <MX_TIM2_Init+0x94>)
 8002ab6:	f003 fcc3 	bl	8006440 <HAL_TIMEx_MasterConfigSynchronization>
 8002aba:	4603      	mov	r3, r0
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d001      	beq.n	8002ac4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002ac0:	f7ff fd74 	bl	80025ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002ac4:	bf00      	nop
 8002ac6:	3720      	adds	r7, #32
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}
 8002acc:	200004e0 	.word	0x200004e0
 8002ad0:	000f4240 	.word	0x000f4240

08002ad4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b082      	sub	sp, #8
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ae4:	d102      	bne.n	8002aec <HAL_TIM_Base_MspInit+0x18>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002ae6:	2001      	movs	r0, #1
 8002ae8:	f7ff ff8e 	bl	8002a08 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002aec:	bf00      	nop
 8002aee:	3708      	adds	r7, #8
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}

08002af4 <TIMER_IF_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
UTIL_TIMER_Status_t TIMER_IF_Init(void)
{
 8002af4:	b480      	push	{r7}
 8002af6:	b083      	sub	sp, #12
 8002af8:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8002afa:	2300      	movs	r3, #0
 8002afc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_Init */

  /* USER CODE END TIMER_IF_Init */
  return ret;
 8002afe:	79fb      	ldrb	r3, [r7, #7]
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	370c      	adds	r7, #12
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bc80      	pop	{r7}
 8002b08:	4770      	bx	lr

08002b0a <TIMER_IF_StartTimer>:

UTIL_TIMER_Status_t TIMER_IF_StartTimer(uint32_t timeout)
{
 8002b0a:	b480      	push	{r7}
 8002b0c:	b085      	sub	sp, #20
 8002b0e:	af00      	add	r7, sp, #0
 8002b10:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8002b12:	2300      	movs	r3, #0
 8002b14:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN TIMER_IF_StartTimer */

  /* USER CODE END TIMER_IF_StartTimer */
  return ret;
 8002b16:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	3714      	adds	r7, #20
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bc80      	pop	{r7}
 8002b20:	4770      	bx	lr

08002b22 <TIMER_IF_StopTimer>:

UTIL_TIMER_Status_t TIMER_IF_StopTimer(void)
{
 8002b22:	b480      	push	{r7}
 8002b24:	b083      	sub	sp, #12
 8002b26:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_StopTimer */

  /* USER CODE END TIMER_IF_StopTimer */
  return ret;
 8002b2c:	79fb      	ldrb	r3, [r7, #7]
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	370c      	adds	r7, #12
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bc80      	pop	{r7}
 8002b36:	4770      	bx	lr

08002b38 <TIMER_IF_SetTimerContext>:

uint32_t TIMER_IF_SetTimerContext(void)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_SetTimerContext */

  /* USER CODE END TIMER_IF_SetTimerContext */

  /*return time context*/
  return RtcTimerContext;
 8002b3c:	4b02      	ldr	r3, [pc, #8]	; (8002b48 <TIMER_IF_SetTimerContext+0x10>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bc80      	pop	{r7}
 8002b46:	4770      	bx	lr
 8002b48:	2000052c 	.word	0x2000052c

08002b4c <TIMER_IF_GetTimerContext>:

uint32_t TIMER_IF_GetTimerContext(void)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_GetTimerContext */

  /* USER CODE END TIMER_IF_GetTimerContext */

  /*return time context*/
  return RtcTimerContext;
 8002b50:	4b02      	ldr	r3, [pc, #8]	; (8002b5c <TIMER_IF_GetTimerContext+0x10>)
 8002b52:	681b      	ldr	r3, [r3, #0]
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bc80      	pop	{r7}
 8002b5a:	4770      	bx	lr
 8002b5c:	2000052c 	.word	0x2000052c

08002b60 <TIMER_IF_GetTimerElapsedTime>:

uint32_t TIMER_IF_GetTimerElapsedTime(void)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b083      	sub	sp, #12
 8002b64:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002b66:	2300      	movs	r3, #0
 8002b68:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime */
  return ret;
 8002b6a:	687b      	ldr	r3, [r7, #4]
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	370c      	adds	r7, #12
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bc80      	pop	{r7}
 8002b74:	4770      	bx	lr

08002b76 <TIMER_IF_GetTimerValue>:

uint32_t TIMER_IF_GetTimerValue(void)
{
 8002b76:	b480      	push	{r7}
 8002b78:	b083      	sub	sp, #12
 8002b7a:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerValue */

  /* USER CODE END TIMER_IF_GetTimerValue */
  return ret;
 8002b80:	687b      	ldr	r3, [r7, #4]
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	370c      	adds	r7, #12
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bc80      	pop	{r7}
 8002b8a:	4770      	bx	lr

08002b8c <TIMER_IF_GetMinimumTimeout>:

uint32_t TIMER_IF_GetMinimumTimeout(void)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b083      	sub	sp, #12
 8002b90:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002b92:	2300      	movs	r3, #0
 8002b94:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout */

  /* USER CODE END TIMER_IF_GetMinimumTimeout */
  return ret;
 8002b96:	687b      	ldr	r3, [r7, #4]
}
 8002b98:	4618      	mov	r0, r3
 8002b9a:	370c      	adds	r7, #12
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bc80      	pop	{r7}
 8002ba0:	4770      	bx	lr

08002ba2 <TIMER_IF_Convert_ms2Tick>:

uint32_t TIMER_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 8002ba2:	b480      	push	{r7}
 8002ba4:	b085      	sub	sp, #20
 8002ba6:	af00      	add	r7, sp, #0
 8002ba8:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8002baa:	2300      	movs	r3, #0
 8002bac:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick */

  /* USER CODE END TIMER_IF_Convert_ms2Tick */
  return ret;
 8002bae:	68fb      	ldr	r3, [r7, #12]
}
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	3714      	adds	r7, #20
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bc80      	pop	{r7}
 8002bb8:	4770      	bx	lr

08002bba <TIMER_IF_Convert_Tick2ms>:

uint32_t TIMER_IF_Convert_Tick2ms(uint32_t tick)
{
 8002bba:	b480      	push	{r7}
 8002bbc:	b085      	sub	sp, #20
 8002bbe:	af00      	add	r7, sp, #0
 8002bc0:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms */

  /* USER CODE END TIMER_IF_Convert_Tick2ms */
  return ret;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	3714      	adds	r7, #20
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bc80      	pop	{r7}
 8002bd0:	4770      	bx	lr

08002bd2 <TIMER_IF_DelayMs>:

void TIMER_IF_DelayMs(uint32_t delay)
{
 8002bd2:	b480      	push	{r7}
 8002bd4:	b083      	sub	sp, #12
 8002bd6:	af00      	add	r7, sp, #0
 8002bd8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_DelayMs */

  /* USER CODE END TIMER_IF_DelayMs */
}
 8002bda:	bf00      	nop
 8002bdc:	370c      	adds	r7, #12
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bc80      	pop	{r7}
 8002be2:	4770      	bx	lr

08002be4 <LL_AHB2_GRP1_EnableClock>:
{
 8002be4:	b480      	push	{r7}
 8002be6:	b085      	sub	sp, #20
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002bec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bf0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002bf2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002bfc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c00:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	4013      	ands	r3, r2
 8002c06:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002c08:	68fb      	ldr	r3, [r7, #12]
}
 8002c0a:	bf00      	nop
 8002c0c:	3714      	adds	r7, #20
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bc80      	pop	{r7}
 8002c12:	4770      	bx	lr

08002c14 <LL_APB1_GRP1_EnableClock>:
{
 8002c14:	b480      	push	{r7}
 8002c16:	b085      	sub	sp, #20
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002c1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c20:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002c22:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002c2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c30:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	4013      	ands	r3, r2
 8002c36:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002c38:	68fb      	ldr	r3, [r7, #12]
}
 8002c3a:	bf00      	nop
 8002c3c:	3714      	adds	r7, #20
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bc80      	pop	{r7}
 8002c42:	4770      	bx	lr

08002c44 <LL_APB1_GRP2_EnableClock>:
{
 8002c44:	b480      	push	{r7}
 8002c46:	b085      	sub	sp, #20
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR2, Periphs);
 8002c4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c50:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002c52:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	65cb      	str	r3, [r1, #92]	; 0x5c
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8002c5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c60:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	4013      	ands	r3, r2
 8002c66:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002c68:	68fb      	ldr	r3, [r7, #12]
}
 8002c6a:	bf00      	nop
 8002c6c:	3714      	adds	r7, #20
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bc80      	pop	{r7}
 8002c72:	4770      	bx	lr

08002c74 <LL_APB2_GRP1_EnableClock>:
{
 8002c74:	b480      	push	{r7}
 8002c76:	b085      	sub	sp, #20
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002c7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c80:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002c82:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002c8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c90:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	4013      	ands	r3, r2
 8002c96:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002c98:	68fb      	ldr	r3, [r7, #12]
}
 8002c9a:	bf00      	nop
 8002c9c:	3714      	adds	r7, #20
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bc80      	pop	{r7}
 8002ca2:	4770      	bx	lr

08002ca4 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8002ca8:	4b22      	ldr	r3, [pc, #136]	; (8002d34 <MX_LPUART1_UART_Init+0x90>)
 8002caa:	4a23      	ldr	r2, [pc, #140]	; (8002d38 <MX_LPUART1_UART_Init+0x94>)
 8002cac:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8002cae:	4b21      	ldr	r3, [pc, #132]	; (8002d34 <MX_LPUART1_UART_Init+0x90>)
 8002cb0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002cb4:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002cb6:	4b1f      	ldr	r3, [pc, #124]	; (8002d34 <MX_LPUART1_UART_Init+0x90>)
 8002cb8:	2200      	movs	r2, #0
 8002cba:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8002cbc:	4b1d      	ldr	r3, [pc, #116]	; (8002d34 <MX_LPUART1_UART_Init+0x90>)
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8002cc2:	4b1c      	ldr	r3, [pc, #112]	; (8002d34 <MX_LPUART1_UART_Init+0x90>)
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8002cc8:	4b1a      	ldr	r3, [pc, #104]	; (8002d34 <MX_LPUART1_UART_Init+0x90>)
 8002cca:	220c      	movs	r2, #12
 8002ccc:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002cce:	4b19      	ldr	r3, [pc, #100]	; (8002d34 <MX_LPUART1_UART_Init+0x90>)
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002cd4:	4b17      	ldr	r3, [pc, #92]	; (8002d34 <MX_LPUART1_UART_Init+0x90>)
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002cda:	4b16      	ldr	r3, [pc, #88]	; (8002d34 <MX_LPUART1_UART_Init+0x90>)
 8002cdc:	2200      	movs	r2, #0
 8002cde:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002ce0:	4b14      	ldr	r3, [pc, #80]	; (8002d34 <MX_LPUART1_UART_Init+0x90>)
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8002ce6:	4b13      	ldr	r3, [pc, #76]	; (8002d34 <MX_LPUART1_UART_Init+0x90>)
 8002ce8:	2200      	movs	r2, #0
 8002cea:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8002cec:	4811      	ldr	r0, [pc, #68]	; (8002d34 <MX_LPUART1_UART_Init+0x90>)
 8002cee:	f003 fc26 	bl	800653e <HAL_UART_Init>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d001      	beq.n	8002cfc <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8002cf8:	f7ff fc58 	bl	80025ac <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002cfc:	2100      	movs	r1, #0
 8002cfe:	480d      	ldr	r0, [pc, #52]	; (8002d34 <MX_LPUART1_UART_Init+0x90>)
 8002d00:	f005 f84e 	bl	8007da0 <HAL_UARTEx_SetTxFifoThreshold>
 8002d04:	4603      	mov	r3, r0
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d001      	beq.n	8002d0e <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002d0a:	f7ff fc4f 	bl	80025ac <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002d0e:	2100      	movs	r1, #0
 8002d10:	4808      	ldr	r0, [pc, #32]	; (8002d34 <MX_LPUART1_UART_Init+0x90>)
 8002d12:	f005 f883 	bl	8007e1c <HAL_UARTEx_SetRxFifoThreshold>
 8002d16:	4603      	mov	r3, r0
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d001      	beq.n	8002d20 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002d1c:	f7ff fc46 	bl	80025ac <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8002d20:	4804      	ldr	r0, [pc, #16]	; (8002d34 <MX_LPUART1_UART_Init+0x90>)
 8002d22:	f005 f805 	bl	8007d30 <HAL_UARTEx_DisableFifoMode>
 8002d26:	4603      	mov	r3, r0
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d001      	beq.n	8002d30 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002d2c:	f7ff fc3e 	bl	80025ac <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8002d30:	bf00      	nop
 8002d32:	bd80      	pop	{r7, pc}
 8002d34:	20000530 	.word	0x20000530
 8002d38:	40008000 	.word	0x40008000

08002d3c <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002d40:	4b22      	ldr	r3, [pc, #136]	; (8002dcc <MX_USART1_UART_Init+0x90>)
 8002d42:	4a23      	ldr	r2, [pc, #140]	; (8002dd0 <MX_USART1_UART_Init+0x94>)
 8002d44:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002d46:	4b21      	ldr	r3, [pc, #132]	; (8002dcc <MX_USART1_UART_Init+0x90>)
 8002d48:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002d4c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002d4e:	4b1f      	ldr	r3, [pc, #124]	; (8002dcc <MX_USART1_UART_Init+0x90>)
 8002d50:	2200      	movs	r2, #0
 8002d52:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002d54:	4b1d      	ldr	r3, [pc, #116]	; (8002dcc <MX_USART1_UART_Init+0x90>)
 8002d56:	2200      	movs	r2, #0
 8002d58:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002d5a:	4b1c      	ldr	r3, [pc, #112]	; (8002dcc <MX_USART1_UART_Init+0x90>)
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002d60:	4b1a      	ldr	r3, [pc, #104]	; (8002dcc <MX_USART1_UART_Init+0x90>)
 8002d62:	220c      	movs	r2, #12
 8002d64:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d66:	4b19      	ldr	r3, [pc, #100]	; (8002dcc <MX_USART1_UART_Init+0x90>)
 8002d68:	2200      	movs	r2, #0
 8002d6a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d6c:	4b17      	ldr	r3, [pc, #92]	; (8002dcc <MX_USART1_UART_Init+0x90>)
 8002d6e:	2200      	movs	r2, #0
 8002d70:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002d72:	4b16      	ldr	r3, [pc, #88]	; (8002dcc <MX_USART1_UART_Init+0x90>)
 8002d74:	2200      	movs	r2, #0
 8002d76:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002d78:	4b14      	ldr	r3, [pc, #80]	; (8002dcc <MX_USART1_UART_Init+0x90>)
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002d7e:	4b13      	ldr	r3, [pc, #76]	; (8002dcc <MX_USART1_UART_Init+0x90>)
 8002d80:	2200      	movs	r2, #0
 8002d82:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002d84:	4811      	ldr	r0, [pc, #68]	; (8002dcc <MX_USART1_UART_Init+0x90>)
 8002d86:	f003 fbda 	bl	800653e <HAL_UART_Init>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d001      	beq.n	8002d94 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002d90:	f7ff fc0c 	bl	80025ac <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002d94:	2100      	movs	r1, #0
 8002d96:	480d      	ldr	r0, [pc, #52]	; (8002dcc <MX_USART1_UART_Init+0x90>)
 8002d98:	f005 f802 	bl	8007da0 <HAL_UARTEx_SetTxFifoThreshold>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d001      	beq.n	8002da6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002da2:	f7ff fc03 	bl	80025ac <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002da6:	2100      	movs	r1, #0
 8002da8:	4808      	ldr	r0, [pc, #32]	; (8002dcc <MX_USART1_UART_Init+0x90>)
 8002daa:	f005 f837 	bl	8007e1c <HAL_UARTEx_SetRxFifoThreshold>
 8002dae:	4603      	mov	r3, r0
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d001      	beq.n	8002db8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002db4:	f7ff fbfa 	bl	80025ac <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002db8:	4804      	ldr	r0, [pc, #16]	; (8002dcc <MX_USART1_UART_Init+0x90>)
 8002dba:	f004 ffb9 	bl	8007d30 <HAL_UARTEx_DisableFifoMode>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d001      	beq.n	8002dc8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002dc4:	f7ff fbf2 	bl	80025ac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002dc8:	bf00      	nop
 8002dca:	bd80      	pop	{r7, pc}
 8002dcc:	200005c4 	.word	0x200005c4
 8002dd0:	40013800 	.word	0x40013800

08002dd4 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002dd8:	4b22      	ldr	r3, [pc, #136]	; (8002e64 <MX_USART2_UART_Init+0x90>)
 8002dda:	4a23      	ldr	r2, [pc, #140]	; (8002e68 <MX_USART2_UART_Init+0x94>)
 8002ddc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002dde:	4b21      	ldr	r3, [pc, #132]	; (8002e64 <MX_USART2_UART_Init+0x90>)
 8002de0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002de4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002de6:	4b1f      	ldr	r3, [pc, #124]	; (8002e64 <MX_USART2_UART_Init+0x90>)
 8002de8:	2200      	movs	r2, #0
 8002dea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002dec:	4b1d      	ldr	r3, [pc, #116]	; (8002e64 <MX_USART2_UART_Init+0x90>)
 8002dee:	2200      	movs	r2, #0
 8002df0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002df2:	4b1c      	ldr	r3, [pc, #112]	; (8002e64 <MX_USART2_UART_Init+0x90>)
 8002df4:	2200      	movs	r2, #0
 8002df6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002df8:	4b1a      	ldr	r3, [pc, #104]	; (8002e64 <MX_USART2_UART_Init+0x90>)
 8002dfa:	220c      	movs	r2, #12
 8002dfc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002dfe:	4b19      	ldr	r3, [pc, #100]	; (8002e64 <MX_USART2_UART_Init+0x90>)
 8002e00:	2200      	movs	r2, #0
 8002e02:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e04:	4b17      	ldr	r3, [pc, #92]	; (8002e64 <MX_USART2_UART_Init+0x90>)
 8002e06:	2200      	movs	r2, #0
 8002e08:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002e0a:	4b16      	ldr	r3, [pc, #88]	; (8002e64 <MX_USART2_UART_Init+0x90>)
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002e10:	4b14      	ldr	r3, [pc, #80]	; (8002e64 <MX_USART2_UART_Init+0x90>)
 8002e12:	2200      	movs	r2, #0
 8002e14:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002e16:	4b13      	ldr	r3, [pc, #76]	; (8002e64 <MX_USART2_UART_Init+0x90>)
 8002e18:	2200      	movs	r2, #0
 8002e1a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002e1c:	4811      	ldr	r0, [pc, #68]	; (8002e64 <MX_USART2_UART_Init+0x90>)
 8002e1e:	f003 fb8e 	bl	800653e <HAL_UART_Init>
 8002e22:	4603      	mov	r3, r0
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d001      	beq.n	8002e2c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002e28:	f7ff fbc0 	bl	80025ac <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002e2c:	2100      	movs	r1, #0
 8002e2e:	480d      	ldr	r0, [pc, #52]	; (8002e64 <MX_USART2_UART_Init+0x90>)
 8002e30:	f004 ffb6 	bl	8007da0 <HAL_UARTEx_SetTxFifoThreshold>
 8002e34:	4603      	mov	r3, r0
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d001      	beq.n	8002e3e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8002e3a:	f7ff fbb7 	bl	80025ac <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002e3e:	2100      	movs	r1, #0
 8002e40:	4808      	ldr	r0, [pc, #32]	; (8002e64 <MX_USART2_UART_Init+0x90>)
 8002e42:	f004 ffeb 	bl	8007e1c <HAL_UARTEx_SetRxFifoThreshold>
 8002e46:	4603      	mov	r3, r0
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d001      	beq.n	8002e50 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8002e4c:	f7ff fbae 	bl	80025ac <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002e50:	4804      	ldr	r0, [pc, #16]	; (8002e64 <MX_USART2_UART_Init+0x90>)
 8002e52:	f004 ff6d 	bl	8007d30 <HAL_UARTEx_DisableFifoMode>
 8002e56:	4603      	mov	r3, r0
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d001      	beq.n	8002e60 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002e5c:	f7ff fba6 	bl	80025ac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002e60:	bf00      	nop
 8002e62:	bd80      	pop	{r7, pc}
 8002e64:	20000658 	.word	0x20000658
 8002e68:	40004400 	.word	0x40004400

08002e6c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b096      	sub	sp, #88	; 0x58
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e74:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002e78:	2200      	movs	r2, #0
 8002e7a:	601a      	str	r2, [r3, #0]
 8002e7c:	605a      	str	r2, [r3, #4]
 8002e7e:	609a      	str	r2, [r3, #8]
 8002e80:	60da      	str	r2, [r3, #12]
 8002e82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002e84:	f107 030c 	add.w	r3, r7, #12
 8002e88:	2238      	movs	r2, #56	; 0x38
 8002e8a:	2100      	movs	r1, #0
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f008 fde1 	bl	800ba54 <memset>
  if(uartHandle->Instance==LPUART1)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a99      	ldr	r2, [pc, #612]	; (80030fc <HAL_UART_MspInit+0x290>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	f040 8092 	bne.w	8002fc2 <HAL_UART_MspInit+0x156>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8002e9e:	2320      	movs	r3, #32
 8002ea0:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002ea6:	f107 030c 	add.w	r3, r7, #12
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f002 fa94 	bl	80053d8 <HAL_RCCEx_PeriphCLKConfig>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d001      	beq.n	8002eba <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002eb6:	f7ff fb79 	bl	80025ac <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8002eba:	2001      	movs	r0, #1
 8002ebc:	f7ff fec2 	bl	8002c44 <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ec0:	2004      	movs	r0, #4
 8002ec2:	f7ff fe8f 	bl	8002be4 <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PC1     ------> LPUART1_TX
    PC0     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 8002ec6:	2303      	movs	r3, #3
 8002ec8:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eca:	2302      	movs	r3, #2
 8002ecc:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8002ed6:	2308      	movs	r3, #8
 8002ed8:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002eda:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002ede:	4619      	mov	r1, r3
 8002ee0:	4887      	ldr	r0, [pc, #540]	; (8003100 <HAL_UART_MspInit+0x294>)
 8002ee2:	f000 feed 	bl	8003cc0 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel1;
 8002ee6:	4b87      	ldr	r3, [pc, #540]	; (8003104 <HAL_UART_MspInit+0x298>)
 8002ee8:	4a87      	ldr	r2, [pc, #540]	; (8003108 <HAL_UART_MspInit+0x29c>)
 8002eea:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8002eec:	4b85      	ldr	r3, [pc, #532]	; (8003104 <HAL_UART_MspInit+0x298>)
 8002eee:	2215      	movs	r2, #21
 8002ef0:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002ef2:	4b84      	ldr	r3, [pc, #528]	; (8003104 <HAL_UART_MspInit+0x298>)
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ef8:	4b82      	ldr	r3, [pc, #520]	; (8003104 <HAL_UART_MspInit+0x298>)
 8002efa:	2200      	movs	r2, #0
 8002efc:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002efe:	4b81      	ldr	r3, [pc, #516]	; (8003104 <HAL_UART_MspInit+0x298>)
 8002f00:	2280      	movs	r2, #128	; 0x80
 8002f02:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002f04:	4b7f      	ldr	r3, [pc, #508]	; (8003104 <HAL_UART_MspInit+0x298>)
 8002f06:	2200      	movs	r2, #0
 8002f08:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002f0a:	4b7e      	ldr	r3, [pc, #504]	; (8003104 <HAL_UART_MspInit+0x298>)
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_NORMAL;
 8002f10:	4b7c      	ldr	r3, [pc, #496]	; (8003104 <HAL_UART_MspInit+0x298>)
 8002f12:	2200      	movs	r2, #0
 8002f14:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002f16:	4b7b      	ldr	r3, [pc, #492]	; (8003104 <HAL_UART_MspInit+0x298>)
 8002f18:	2200      	movs	r2, #0
 8002f1a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8002f1c:	4879      	ldr	r0, [pc, #484]	; (8003104 <HAL_UART_MspInit+0x298>)
 8002f1e:	f000 fb4d 	bl	80035bc <HAL_DMA_Init>
 8002f22:	4603      	mov	r3, r0
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d001      	beq.n	8002f2c <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 8002f28:	f7ff fb40 	bl	80025ac <Error_Handler>
    }

    if (HAL_DMA_ConfigChannelAttributes(&hdma_lpuart1_rx, DMA_CHANNEL_NPRIV) != HAL_OK)
 8002f2c:	2110      	movs	r1, #16
 8002f2e:	4875      	ldr	r0, [pc, #468]	; (8003104 <HAL_UART_MspInit+0x298>)
 8002f30:	f000 fdee 	bl	8003b10 <HAL_DMA_ConfigChannelAttributes>
 8002f34:	4603      	mov	r3, r0
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d001      	beq.n	8002f3e <HAL_UART_MspInit+0xd2>
    {
      Error_Handler();
 8002f3a:	f7ff fb37 	bl	80025ac <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	4a70      	ldr	r2, [pc, #448]	; (8003104 <HAL_UART_MspInit+0x298>)
 8002f42:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8002f46:	4a6f      	ldr	r2, [pc, #444]	; (8003104 <HAL_UART_MspInit+0x298>)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel2;
 8002f4c:	4b6f      	ldr	r3, [pc, #444]	; (800310c <HAL_UART_MspInit+0x2a0>)
 8002f4e:	4a70      	ldr	r2, [pc, #448]	; (8003110 <HAL_UART_MspInit+0x2a4>)
 8002f50:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 8002f52:	4b6e      	ldr	r3, [pc, #440]	; (800310c <HAL_UART_MspInit+0x2a0>)
 8002f54:	2216      	movs	r2, #22
 8002f56:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002f58:	4b6c      	ldr	r3, [pc, #432]	; (800310c <HAL_UART_MspInit+0x2a0>)
 8002f5a:	2210      	movs	r2, #16
 8002f5c:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f5e:	4b6b      	ldr	r3, [pc, #428]	; (800310c <HAL_UART_MspInit+0x2a0>)
 8002f60:	2200      	movs	r2, #0
 8002f62:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002f64:	4b69      	ldr	r3, [pc, #420]	; (800310c <HAL_UART_MspInit+0x2a0>)
 8002f66:	2280      	movs	r2, #128	; 0x80
 8002f68:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002f6a:	4b68      	ldr	r3, [pc, #416]	; (800310c <HAL_UART_MspInit+0x2a0>)
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002f70:	4b66      	ldr	r3, [pc, #408]	; (800310c <HAL_UART_MspInit+0x2a0>)
 8002f72:	2200      	movs	r2, #0
 8002f74:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8002f76:	4b65      	ldr	r3, [pc, #404]	; (800310c <HAL_UART_MspInit+0x2a0>)
 8002f78:	2200      	movs	r2, #0
 8002f7a:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002f7c:	4b63      	ldr	r3, [pc, #396]	; (800310c <HAL_UART_MspInit+0x2a0>)
 8002f7e:	2200      	movs	r2, #0
 8002f80:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8002f82:	4862      	ldr	r0, [pc, #392]	; (800310c <HAL_UART_MspInit+0x2a0>)
 8002f84:	f000 fb1a 	bl	80035bc <HAL_DMA_Init>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d001      	beq.n	8002f92 <HAL_UART_MspInit+0x126>
    {
      Error_Handler();
 8002f8e:	f7ff fb0d 	bl	80025ac <Error_Handler>
    }

    if (HAL_DMA_ConfigChannelAttributes(&hdma_lpuart1_tx, DMA_CHANNEL_NPRIV) != HAL_OK)
 8002f92:	2110      	movs	r1, #16
 8002f94:	485d      	ldr	r0, [pc, #372]	; (800310c <HAL_UART_MspInit+0x2a0>)
 8002f96:	f000 fdbb 	bl	8003b10 <HAL_DMA_ConfigChannelAttributes>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d001      	beq.n	8002fa4 <HAL_UART_MspInit+0x138>
    {
      Error_Handler();
 8002fa0:	f7ff fb04 	bl	80025ac <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	4a59      	ldr	r2, [pc, #356]	; (800310c <HAL_UART_MspInit+0x2a0>)
 8002fa8:	67da      	str	r2, [r3, #124]	; 0x7c
 8002faa:	4a58      	ldr	r2, [pc, #352]	; (800310c <HAL_UART_MspInit+0x2a0>)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	2100      	movs	r1, #0
 8002fb4:	2026      	movs	r0, #38	; 0x26
 8002fb6:	f000 facc 	bl	8003552 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8002fba:	2026      	movs	r0, #38	; 0x26
 8002fbc:	f000 fae3 	bl	8003586 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002fc0:	e14c      	b.n	800325c <HAL_UART_MspInit+0x3f0>
  else if(uartHandle->Instance==USART1)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a53      	ldr	r2, [pc, #332]	; (8003114 <HAL_UART_MspInit+0x2a8>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	f040 80ad 	bne.w	8003128 <HAL_UART_MspInit+0x2bc>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002fd2:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8002fd6:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002fd8:	f107 030c 	add.w	r3, r7, #12
 8002fdc:	4618      	mov	r0, r3
 8002fde:	f002 f9fb 	bl	80053d8 <HAL_RCCEx_PeriphCLKConfig>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d001      	beq.n	8002fec <HAL_UART_MspInit+0x180>
      Error_Handler();
 8002fe8:	f7ff fae0 	bl	80025ac <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002fec:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002ff0:	f7ff fe40 	bl	8002c74 <LL_APB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ff4:	2001      	movs	r0, #1
 8002ff6:	f7ff fdf5 	bl	8002be4 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 8002ffa:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002ffe:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003000:	2302      	movs	r3, #2
 8003002:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003004:	2300      	movs	r3, #0
 8003006:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003008:	2300      	movs	r3, #0
 800300a:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800300c:	2307      	movs	r3, #7
 800300e:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003010:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003014:	4619      	mov	r1, r3
 8003016:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800301a:	f000 fe51 	bl	8003cc0 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel3;
 800301e:	4b3e      	ldr	r3, [pc, #248]	; (8003118 <HAL_UART_MspInit+0x2ac>)
 8003020:	4a3e      	ldr	r2, [pc, #248]	; (800311c <HAL_UART_MspInit+0x2b0>)
 8003022:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8003024:	4b3c      	ldr	r3, [pc, #240]	; (8003118 <HAL_UART_MspInit+0x2ac>)
 8003026:	2211      	movs	r2, #17
 8003028:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800302a:	4b3b      	ldr	r3, [pc, #236]	; (8003118 <HAL_UART_MspInit+0x2ac>)
 800302c:	2200      	movs	r2, #0
 800302e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003030:	4b39      	ldr	r3, [pc, #228]	; (8003118 <HAL_UART_MspInit+0x2ac>)
 8003032:	2200      	movs	r2, #0
 8003034:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003036:	4b38      	ldr	r3, [pc, #224]	; (8003118 <HAL_UART_MspInit+0x2ac>)
 8003038:	2280      	movs	r2, #128	; 0x80
 800303a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800303c:	4b36      	ldr	r3, [pc, #216]	; (8003118 <HAL_UART_MspInit+0x2ac>)
 800303e:	2200      	movs	r2, #0
 8003040:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003042:	4b35      	ldr	r3, [pc, #212]	; (8003118 <HAL_UART_MspInit+0x2ac>)
 8003044:	2200      	movs	r2, #0
 8003046:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8003048:	4b33      	ldr	r3, [pc, #204]	; (8003118 <HAL_UART_MspInit+0x2ac>)
 800304a:	2200      	movs	r2, #0
 800304c:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800304e:	4b32      	ldr	r3, [pc, #200]	; (8003118 <HAL_UART_MspInit+0x2ac>)
 8003050:	2200      	movs	r2, #0
 8003052:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003054:	4830      	ldr	r0, [pc, #192]	; (8003118 <HAL_UART_MspInit+0x2ac>)
 8003056:	f000 fab1 	bl	80035bc <HAL_DMA_Init>
 800305a:	4603      	mov	r3, r0
 800305c:	2b00      	cmp	r3, #0
 800305e:	d001      	beq.n	8003064 <HAL_UART_MspInit+0x1f8>
      Error_Handler();
 8003060:	f7ff faa4 	bl	80025ac <Error_Handler>
    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart1_rx, DMA_CHANNEL_NPRIV) != HAL_OK)
 8003064:	2110      	movs	r1, #16
 8003066:	482c      	ldr	r0, [pc, #176]	; (8003118 <HAL_UART_MspInit+0x2ac>)
 8003068:	f000 fd52 	bl	8003b10 <HAL_DMA_ConfigChannelAttributes>
 800306c:	4603      	mov	r3, r0
 800306e:	2b00      	cmp	r3, #0
 8003070:	d001      	beq.n	8003076 <HAL_UART_MspInit+0x20a>
      Error_Handler();
 8003072:	f7ff fa9b 	bl	80025ac <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	4a27      	ldr	r2, [pc, #156]	; (8003118 <HAL_UART_MspInit+0x2ac>)
 800307a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800307e:	4a26      	ldr	r2, [pc, #152]	; (8003118 <HAL_UART_MspInit+0x2ac>)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6293      	str	r3, [r2, #40]	; 0x28
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8003084:	4b26      	ldr	r3, [pc, #152]	; (8003120 <HAL_UART_MspInit+0x2b4>)
 8003086:	4a27      	ldr	r2, [pc, #156]	; (8003124 <HAL_UART_MspInit+0x2b8>)
 8003088:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 800308a:	4b25      	ldr	r3, [pc, #148]	; (8003120 <HAL_UART_MspInit+0x2b4>)
 800308c:	2212      	movs	r2, #18
 800308e:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003090:	4b23      	ldr	r3, [pc, #140]	; (8003120 <HAL_UART_MspInit+0x2b4>)
 8003092:	2210      	movs	r2, #16
 8003094:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003096:	4b22      	ldr	r3, [pc, #136]	; (8003120 <HAL_UART_MspInit+0x2b4>)
 8003098:	2200      	movs	r2, #0
 800309a:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800309c:	4b20      	ldr	r3, [pc, #128]	; (8003120 <HAL_UART_MspInit+0x2b4>)
 800309e:	2280      	movs	r2, #128	; 0x80
 80030a0:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80030a2:	4b1f      	ldr	r3, [pc, #124]	; (8003120 <HAL_UART_MspInit+0x2b4>)
 80030a4:	2200      	movs	r2, #0
 80030a6:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80030a8:	4b1d      	ldr	r3, [pc, #116]	; (8003120 <HAL_UART_MspInit+0x2b4>)
 80030aa:	2200      	movs	r2, #0
 80030ac:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80030ae:	4b1c      	ldr	r3, [pc, #112]	; (8003120 <HAL_UART_MspInit+0x2b4>)
 80030b0:	2200      	movs	r2, #0
 80030b2:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80030b4:	4b1a      	ldr	r3, [pc, #104]	; (8003120 <HAL_UART_MspInit+0x2b4>)
 80030b6:	2200      	movs	r2, #0
 80030b8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80030ba:	4819      	ldr	r0, [pc, #100]	; (8003120 <HAL_UART_MspInit+0x2b4>)
 80030bc:	f000 fa7e 	bl	80035bc <HAL_DMA_Init>
 80030c0:	4603      	mov	r3, r0
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d001      	beq.n	80030ca <HAL_UART_MspInit+0x25e>
      Error_Handler();
 80030c6:	f7ff fa71 	bl	80025ac <Error_Handler>
    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart1_tx, DMA_CHANNEL_NPRIV) != HAL_OK)
 80030ca:	2110      	movs	r1, #16
 80030cc:	4814      	ldr	r0, [pc, #80]	; (8003120 <HAL_UART_MspInit+0x2b4>)
 80030ce:	f000 fd1f 	bl	8003b10 <HAL_DMA_ConfigChannelAttributes>
 80030d2:	4603      	mov	r3, r0
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d001      	beq.n	80030dc <HAL_UART_MspInit+0x270>
      Error_Handler();
 80030d8:	f7ff fa68 	bl	80025ac <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	4a10      	ldr	r2, [pc, #64]	; (8003120 <HAL_UART_MspInit+0x2b4>)
 80030e0:	67da      	str	r2, [r3, #124]	; 0x7c
 80030e2:	4a0f      	ldr	r2, [pc, #60]	; (8003120 <HAL_UART_MspInit+0x2b4>)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80030e8:	2200      	movs	r2, #0
 80030ea:	2100      	movs	r1, #0
 80030ec:	2024      	movs	r0, #36	; 0x24
 80030ee:	f000 fa30 	bl	8003552 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80030f2:	2024      	movs	r0, #36	; 0x24
 80030f4:	f000 fa47 	bl	8003586 <HAL_NVIC_EnableIRQ>
}
 80030f8:	e0b0      	b.n	800325c <HAL_UART_MspInit+0x3f0>
 80030fa:	bf00      	nop
 80030fc:	40008000 	.word	0x40008000
 8003100:	48000800 	.word	0x48000800
 8003104:	200006ec 	.word	0x200006ec
 8003108:	40020008 	.word	0x40020008
 800310c:	2000074c 	.word	0x2000074c
 8003110:	4002001c 	.word	0x4002001c
 8003114:	40013800 	.word	0x40013800
 8003118:	200007ac 	.word	0x200007ac
 800311c:	40020030 	.word	0x40020030
 8003120:	2000080c 	.word	0x2000080c
 8003124:	40020044 	.word	0x40020044
  else if(uartHandle->Instance==USART2)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a4d      	ldr	r2, [pc, #308]	; (8003264 <HAL_UART_MspInit+0x3f8>)
 800312e:	4293      	cmp	r3, r2
 8003130:	f040 8094 	bne.w	800325c <HAL_UART_MspInit+0x3f0>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003134:	2302      	movs	r3, #2
 8003136:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003138:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 800313c:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800313e:	f107 030c 	add.w	r3, r7, #12
 8003142:	4618      	mov	r0, r3
 8003144:	f002 f948 	bl	80053d8 <HAL_RCCEx_PeriphCLKConfig>
 8003148:	4603      	mov	r3, r0
 800314a:	2b00      	cmp	r3, #0
 800314c:	d001      	beq.n	8003152 <HAL_UART_MspInit+0x2e6>
      Error_Handler();
 800314e:	f7ff fa2d 	bl	80025ac <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003152:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8003156:	f7ff fd5d 	bl	8002c14 <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800315a:	2001      	movs	r0, #1
 800315c:	f7ff fd42 	bl	8002be4 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = T_VCP_RX_Pin|T_VCP_RXA2_Pin;
 8003160:	230c      	movs	r3, #12
 8003162:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003164:	2302      	movs	r3, #2
 8003166:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003168:	2300      	movs	r3, #0
 800316a:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800316c:	2300      	movs	r3, #0
 800316e:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003170:	2307      	movs	r3, #7
 8003172:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003174:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003178:	4619      	mov	r1, r3
 800317a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800317e:	f000 fd9f 	bl	8003cc0 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel5;
 8003182:	4b39      	ldr	r3, [pc, #228]	; (8003268 <HAL_UART_MspInit+0x3fc>)
 8003184:	4a39      	ldr	r2, [pc, #228]	; (800326c <HAL_UART_MspInit+0x400>)
 8003186:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8003188:	4b37      	ldr	r3, [pc, #220]	; (8003268 <HAL_UART_MspInit+0x3fc>)
 800318a:	2213      	movs	r2, #19
 800318c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800318e:	4b36      	ldr	r3, [pc, #216]	; (8003268 <HAL_UART_MspInit+0x3fc>)
 8003190:	2200      	movs	r2, #0
 8003192:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003194:	4b34      	ldr	r3, [pc, #208]	; (8003268 <HAL_UART_MspInit+0x3fc>)
 8003196:	2200      	movs	r2, #0
 8003198:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800319a:	4b33      	ldr	r3, [pc, #204]	; (8003268 <HAL_UART_MspInit+0x3fc>)
 800319c:	2280      	movs	r2, #128	; 0x80
 800319e:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80031a0:	4b31      	ldr	r3, [pc, #196]	; (8003268 <HAL_UART_MspInit+0x3fc>)
 80031a2:	2200      	movs	r2, #0
 80031a4:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80031a6:	4b30      	ldr	r3, [pc, #192]	; (8003268 <HAL_UART_MspInit+0x3fc>)
 80031a8:	2200      	movs	r2, #0
 80031aa:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80031ac:	4b2e      	ldr	r3, [pc, #184]	; (8003268 <HAL_UART_MspInit+0x3fc>)
 80031ae:	2200      	movs	r2, #0
 80031b0:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80031b2:	4b2d      	ldr	r3, [pc, #180]	; (8003268 <HAL_UART_MspInit+0x3fc>)
 80031b4:	2200      	movs	r2, #0
 80031b6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80031b8:	482b      	ldr	r0, [pc, #172]	; (8003268 <HAL_UART_MspInit+0x3fc>)
 80031ba:	f000 f9ff 	bl	80035bc <HAL_DMA_Init>
 80031be:	4603      	mov	r3, r0
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d001      	beq.n	80031c8 <HAL_UART_MspInit+0x35c>
      Error_Handler();
 80031c4:	f7ff f9f2 	bl	80025ac <Error_Handler>
    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart2_rx, DMA_CHANNEL_NPRIV) != HAL_OK)
 80031c8:	2110      	movs	r1, #16
 80031ca:	4827      	ldr	r0, [pc, #156]	; (8003268 <HAL_UART_MspInit+0x3fc>)
 80031cc:	f000 fca0 	bl	8003b10 <HAL_DMA_ConfigChannelAttributes>
 80031d0:	4603      	mov	r3, r0
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d001      	beq.n	80031da <HAL_UART_MspInit+0x36e>
      Error_Handler();
 80031d6:	f7ff f9e9 	bl	80025ac <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	4a22      	ldr	r2, [pc, #136]	; (8003268 <HAL_UART_MspInit+0x3fc>)
 80031de:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80031e2:	4a21      	ldr	r2, [pc, #132]	; (8003268 <HAL_UART_MspInit+0x3fc>)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6293      	str	r3, [r2, #40]	; 0x28
    hdma_usart2_tx.Instance = DMA1_Channel6;
 80031e8:	4b21      	ldr	r3, [pc, #132]	; (8003270 <HAL_UART_MspInit+0x404>)
 80031ea:	4a22      	ldr	r2, [pc, #136]	; (8003274 <HAL_UART_MspInit+0x408>)
 80031ec:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 80031ee:	4b20      	ldr	r3, [pc, #128]	; (8003270 <HAL_UART_MspInit+0x404>)
 80031f0:	2214      	movs	r2, #20
 80031f2:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80031f4:	4b1e      	ldr	r3, [pc, #120]	; (8003270 <HAL_UART_MspInit+0x404>)
 80031f6:	2210      	movs	r2, #16
 80031f8:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80031fa:	4b1d      	ldr	r3, [pc, #116]	; (8003270 <HAL_UART_MspInit+0x404>)
 80031fc:	2200      	movs	r2, #0
 80031fe:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003200:	4b1b      	ldr	r3, [pc, #108]	; (8003270 <HAL_UART_MspInit+0x404>)
 8003202:	2280      	movs	r2, #128	; 0x80
 8003204:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003206:	4b1a      	ldr	r3, [pc, #104]	; (8003270 <HAL_UART_MspInit+0x404>)
 8003208:	2200      	movs	r2, #0
 800320a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800320c:	4b18      	ldr	r3, [pc, #96]	; (8003270 <HAL_UART_MspInit+0x404>)
 800320e:	2200      	movs	r2, #0
 8003210:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8003212:	4b17      	ldr	r3, [pc, #92]	; (8003270 <HAL_UART_MspInit+0x404>)
 8003214:	2200      	movs	r2, #0
 8003216:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003218:	4b15      	ldr	r3, [pc, #84]	; (8003270 <HAL_UART_MspInit+0x404>)
 800321a:	2200      	movs	r2, #0
 800321c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800321e:	4814      	ldr	r0, [pc, #80]	; (8003270 <HAL_UART_MspInit+0x404>)
 8003220:	f000 f9cc 	bl	80035bc <HAL_DMA_Init>
 8003224:	4603      	mov	r3, r0
 8003226:	2b00      	cmp	r3, #0
 8003228:	d001      	beq.n	800322e <HAL_UART_MspInit+0x3c2>
      Error_Handler();
 800322a:	f7ff f9bf 	bl	80025ac <Error_Handler>
    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart2_tx, DMA_CHANNEL_NPRIV) != HAL_OK)
 800322e:	2110      	movs	r1, #16
 8003230:	480f      	ldr	r0, [pc, #60]	; (8003270 <HAL_UART_MspInit+0x404>)
 8003232:	f000 fc6d 	bl	8003b10 <HAL_DMA_ConfigChannelAttributes>
 8003236:	4603      	mov	r3, r0
 8003238:	2b00      	cmp	r3, #0
 800323a:	d001      	beq.n	8003240 <HAL_UART_MspInit+0x3d4>
      Error_Handler();
 800323c:	f7ff f9b6 	bl	80025ac <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	4a0b      	ldr	r2, [pc, #44]	; (8003270 <HAL_UART_MspInit+0x404>)
 8003244:	67da      	str	r2, [r3, #124]	; 0x7c
 8003246:	4a0a      	ldr	r2, [pc, #40]	; (8003270 <HAL_UART_MspInit+0x404>)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800324c:	2200      	movs	r2, #0
 800324e:	2100      	movs	r1, #0
 8003250:	2025      	movs	r0, #37	; 0x25
 8003252:	f000 f97e 	bl	8003552 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003256:	2025      	movs	r0, #37	; 0x25
 8003258:	f000 f995 	bl	8003586 <HAL_NVIC_EnableIRQ>
}
 800325c:	bf00      	nop
 800325e:	3758      	adds	r7, #88	; 0x58
 8003260:	46bd      	mov	sp, r7
 8003262:	bd80      	pop	{r7, pc}
 8003264:	40004400 	.word	0x40004400
 8003268:	2000086c 	.word	0x2000086c
 800326c:	40020058 	.word	0x40020058
 8003270:	200008cc 	.word	0x200008cc
 8003274:	4002006c 	.word	0x4002006c

08003278 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003278:	480d      	ldr	r0, [pc, #52]	; (80032b0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800327a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800327c:	f7ff fbbe 	bl	80029fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003280:	480c      	ldr	r0, [pc, #48]	; (80032b4 <LoopForever+0x6>)
  ldr r1, =_edata
 8003282:	490d      	ldr	r1, [pc, #52]	; (80032b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003284:	4a0d      	ldr	r2, [pc, #52]	; (80032bc <LoopForever+0xe>)
  movs r3, #0
 8003286:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003288:	e002      	b.n	8003290 <LoopCopyDataInit>

0800328a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800328a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800328c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800328e:	3304      	adds	r3, #4

08003290 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003290:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003292:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003294:	d3f9      	bcc.n	800328a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003296:	4a0a      	ldr	r2, [pc, #40]	; (80032c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003298:	4c0a      	ldr	r4, [pc, #40]	; (80032c4 <LoopForever+0x16>)
  movs r3, #0
 800329a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800329c:	e001      	b.n	80032a2 <LoopFillZerobss>

0800329e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800329e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80032a0:	3204      	adds	r2, #4

080032a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80032a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80032a4:	d3fb      	bcc.n	800329e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80032a6:	f008 fbe3 	bl	800ba70 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80032aa:	f7fe f801 	bl	80012b0 <main>

080032ae <LoopForever>:

LoopForever:
    b LoopForever
 80032ae:	e7fe      	b.n	80032ae <LoopForever>
  ldr   r0, =_estack
 80032b0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80032b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80032b8:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80032bc:	0800ce24 	.word	0x0800ce24
  ldr r2, =_sbss
 80032c0:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80032c4:	20000c38 	.word	0x20000c38

080032c8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80032c8:	e7fe      	b.n	80032c8 <ADC_IRQHandler>
	...

080032cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b082      	sub	sp, #8
 80032d0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80032d2:	2300      	movs	r3, #0
 80032d4:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80032d6:	2003      	movs	r0, #3
 80032d8:	f000 f930 	bl	800353c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80032dc:	f001 fe9e 	bl	800501c <HAL_RCC_GetHCLKFreq>
 80032e0:	4603      	mov	r3, r0
 80032e2:	4a09      	ldr	r2, [pc, #36]	; (8003308 <HAL_Init+0x3c>)
 80032e4:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80032e6:	2000      	movs	r0, #0
 80032e8:	f000 f810 	bl	800330c <HAL_InitTick>
 80032ec:	4603      	mov	r3, r0
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d002      	beq.n	80032f8 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	71fb      	strb	r3, [r7, #7]
 80032f6:	e001      	b.n	80032fc <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80032f8:	f7ff fa54 	bl	80027a4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80032fc:	79fb      	ldrb	r3, [r7, #7]
}
 80032fe:	4618      	mov	r0, r3
 8003300:	3708      	adds	r7, #8
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}
 8003306:	bf00      	nop
 8003308:	2000000c 	.word	0x2000000c

0800330c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b084      	sub	sp, #16
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003314:	2300      	movs	r3, #0
 8003316:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003318:	4b17      	ldr	r3, [pc, #92]	; (8003378 <HAL_InitTick+0x6c>)
 800331a:	781b      	ldrb	r3, [r3, #0]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d024      	beq.n	800336a <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003320:	f001 fe7c 	bl	800501c <HAL_RCC_GetHCLKFreq>
 8003324:	4602      	mov	r2, r0
 8003326:	4b14      	ldr	r3, [pc, #80]	; (8003378 <HAL_InitTick+0x6c>)
 8003328:	781b      	ldrb	r3, [r3, #0]
 800332a:	4619      	mov	r1, r3
 800332c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003330:	fbb3 f3f1 	udiv	r3, r3, r1
 8003334:	fbb2 f3f3 	udiv	r3, r2, r3
 8003338:	4618      	mov	r0, r3
 800333a:	f000 f932 	bl	80035a2 <HAL_SYSTICK_Config>
 800333e:	4603      	mov	r3, r0
 8003340:	2b00      	cmp	r3, #0
 8003342:	d10f      	bne.n	8003364 <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2b0f      	cmp	r3, #15
 8003348:	d809      	bhi.n	800335e <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800334a:	2200      	movs	r2, #0
 800334c:	6879      	ldr	r1, [r7, #4]
 800334e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003352:	f000 f8fe 	bl	8003552 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003356:	4a09      	ldr	r2, [pc, #36]	; (800337c <HAL_InitTick+0x70>)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6013      	str	r3, [r2, #0]
 800335c:	e007      	b.n	800336e <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	73fb      	strb	r3, [r7, #15]
 8003362:	e004      	b.n	800336e <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003364:	2301      	movs	r3, #1
 8003366:	73fb      	strb	r3, [r7, #15]
 8003368:	e001      	b.n	800336e <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800336a:	2301      	movs	r3, #1
 800336c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800336e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003370:	4618      	mov	r0, r3
 8003372:	3710      	adds	r7, #16
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}
 8003378:	20000014 	.word	0x20000014
 800337c:	20000010 	.word	0x20000010

08003380 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003380:	b480      	push	{r7}
 8003382:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003384:	4b05      	ldr	r3, [pc, #20]	; (800339c <HAL_IncTick+0x1c>)
 8003386:	781b      	ldrb	r3, [r3, #0]
 8003388:	461a      	mov	r2, r3
 800338a:	4b05      	ldr	r3, [pc, #20]	; (80033a0 <HAL_IncTick+0x20>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4413      	add	r3, r2
 8003390:	4a03      	ldr	r2, [pc, #12]	; (80033a0 <HAL_IncTick+0x20>)
 8003392:	6013      	str	r3, [r2, #0]
}
 8003394:	bf00      	nop
 8003396:	46bd      	mov	sp, r7
 8003398:	bc80      	pop	{r7}
 800339a:	4770      	bx	lr
 800339c:	20000014 	.word	0x20000014
 80033a0:	2000092c 	.word	0x2000092c

080033a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b085      	sub	sp, #20
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	f003 0307 	and.w	r3, r3, #7
 80033b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80033b4:	4b0c      	ldr	r3, [pc, #48]	; (80033e8 <__NVIC_SetPriorityGrouping+0x44>)
 80033b6:	68db      	ldr	r3, [r3, #12]
 80033b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80033ba:	68ba      	ldr	r2, [r7, #8]
 80033bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80033c0:	4013      	ands	r3, r2
 80033c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80033cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80033d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80033d6:	4a04      	ldr	r2, [pc, #16]	; (80033e8 <__NVIC_SetPriorityGrouping+0x44>)
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	60d3      	str	r3, [r2, #12]
}
 80033dc:	bf00      	nop
 80033de:	3714      	adds	r7, #20
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bc80      	pop	{r7}
 80033e4:	4770      	bx	lr
 80033e6:	bf00      	nop
 80033e8:	e000ed00 	.word	0xe000ed00

080033ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80033ec:	b480      	push	{r7}
 80033ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80033f0:	4b04      	ldr	r3, [pc, #16]	; (8003404 <__NVIC_GetPriorityGrouping+0x18>)
 80033f2:	68db      	ldr	r3, [r3, #12]
 80033f4:	0a1b      	lsrs	r3, r3, #8
 80033f6:	f003 0307 	and.w	r3, r3, #7
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bc80      	pop	{r7}
 8003400:	4770      	bx	lr
 8003402:	bf00      	nop
 8003404:	e000ed00 	.word	0xe000ed00

08003408 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003408:	b480      	push	{r7}
 800340a:	b083      	sub	sp, #12
 800340c:	af00      	add	r7, sp, #0
 800340e:	4603      	mov	r3, r0
 8003410:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003412:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003416:	2b00      	cmp	r3, #0
 8003418:	db0b      	blt.n	8003432 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800341a:	79fb      	ldrb	r3, [r7, #7]
 800341c:	f003 021f 	and.w	r2, r3, #31
 8003420:	4906      	ldr	r1, [pc, #24]	; (800343c <__NVIC_EnableIRQ+0x34>)
 8003422:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003426:	095b      	lsrs	r3, r3, #5
 8003428:	2001      	movs	r0, #1
 800342a:	fa00 f202 	lsl.w	r2, r0, r2
 800342e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003432:	bf00      	nop
 8003434:	370c      	adds	r7, #12
 8003436:	46bd      	mov	sp, r7
 8003438:	bc80      	pop	{r7}
 800343a:	4770      	bx	lr
 800343c:	e000e100 	.word	0xe000e100

08003440 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003440:	b480      	push	{r7}
 8003442:	b083      	sub	sp, #12
 8003444:	af00      	add	r7, sp, #0
 8003446:	4603      	mov	r3, r0
 8003448:	6039      	str	r1, [r7, #0]
 800344a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800344c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003450:	2b00      	cmp	r3, #0
 8003452:	db0a      	blt.n	800346a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	b2da      	uxtb	r2, r3
 8003458:	490c      	ldr	r1, [pc, #48]	; (800348c <__NVIC_SetPriority+0x4c>)
 800345a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800345e:	0112      	lsls	r2, r2, #4
 8003460:	b2d2      	uxtb	r2, r2
 8003462:	440b      	add	r3, r1
 8003464:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003468:	e00a      	b.n	8003480 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	b2da      	uxtb	r2, r3
 800346e:	4908      	ldr	r1, [pc, #32]	; (8003490 <__NVIC_SetPriority+0x50>)
 8003470:	79fb      	ldrb	r3, [r7, #7]
 8003472:	f003 030f 	and.w	r3, r3, #15
 8003476:	3b04      	subs	r3, #4
 8003478:	0112      	lsls	r2, r2, #4
 800347a:	b2d2      	uxtb	r2, r2
 800347c:	440b      	add	r3, r1
 800347e:	761a      	strb	r2, [r3, #24]
}
 8003480:	bf00      	nop
 8003482:	370c      	adds	r7, #12
 8003484:	46bd      	mov	sp, r7
 8003486:	bc80      	pop	{r7}
 8003488:	4770      	bx	lr
 800348a:	bf00      	nop
 800348c:	e000e100 	.word	0xe000e100
 8003490:	e000ed00 	.word	0xe000ed00

08003494 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003494:	b480      	push	{r7}
 8003496:	b089      	sub	sp, #36	; 0x24
 8003498:	af00      	add	r7, sp, #0
 800349a:	60f8      	str	r0, [r7, #12]
 800349c:	60b9      	str	r1, [r7, #8]
 800349e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	f003 0307 	and.w	r3, r3, #7
 80034a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80034a8:	69fb      	ldr	r3, [r7, #28]
 80034aa:	f1c3 0307 	rsb	r3, r3, #7
 80034ae:	2b04      	cmp	r3, #4
 80034b0:	bf28      	it	cs
 80034b2:	2304      	movcs	r3, #4
 80034b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80034b6:	69fb      	ldr	r3, [r7, #28]
 80034b8:	3304      	adds	r3, #4
 80034ba:	2b06      	cmp	r3, #6
 80034bc:	d902      	bls.n	80034c4 <NVIC_EncodePriority+0x30>
 80034be:	69fb      	ldr	r3, [r7, #28]
 80034c0:	3b03      	subs	r3, #3
 80034c2:	e000      	b.n	80034c6 <NVIC_EncodePriority+0x32>
 80034c4:	2300      	movs	r3, #0
 80034c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80034cc:	69bb      	ldr	r3, [r7, #24]
 80034ce:	fa02 f303 	lsl.w	r3, r2, r3
 80034d2:	43da      	mvns	r2, r3
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	401a      	ands	r2, r3
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80034dc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	fa01 f303 	lsl.w	r3, r1, r3
 80034e6:	43d9      	mvns	r1, r3
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034ec:	4313      	orrs	r3, r2
         );
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	3724      	adds	r7, #36	; 0x24
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bc80      	pop	{r7}
 80034f6:	4770      	bx	lr

080034f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b082      	sub	sp, #8
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	3b01      	subs	r3, #1
 8003504:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003508:	d301      	bcc.n	800350e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800350a:	2301      	movs	r3, #1
 800350c:	e00f      	b.n	800352e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800350e:	4a0a      	ldr	r2, [pc, #40]	; (8003538 <SysTick_Config+0x40>)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	3b01      	subs	r3, #1
 8003514:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003516:	210f      	movs	r1, #15
 8003518:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800351c:	f7ff ff90 	bl	8003440 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003520:	4b05      	ldr	r3, [pc, #20]	; (8003538 <SysTick_Config+0x40>)
 8003522:	2200      	movs	r2, #0
 8003524:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003526:	4b04      	ldr	r3, [pc, #16]	; (8003538 <SysTick_Config+0x40>)
 8003528:	2207      	movs	r2, #7
 800352a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800352c:	2300      	movs	r3, #0
}
 800352e:	4618      	mov	r0, r3
 8003530:	3708      	adds	r7, #8
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}
 8003536:	bf00      	nop
 8003538:	e000e010 	.word	0xe000e010

0800353c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b082      	sub	sp, #8
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003544:	6878      	ldr	r0, [r7, #4]
 8003546:	f7ff ff2d 	bl	80033a4 <__NVIC_SetPriorityGrouping>
}
 800354a:	bf00      	nop
 800354c:	3708      	adds	r7, #8
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}

08003552 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003552:	b580      	push	{r7, lr}
 8003554:	b086      	sub	sp, #24
 8003556:	af00      	add	r7, sp, #0
 8003558:	4603      	mov	r3, r0
 800355a:	60b9      	str	r1, [r7, #8]
 800355c:	607a      	str	r2, [r7, #4]
 800355e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003560:	f7ff ff44 	bl	80033ec <__NVIC_GetPriorityGrouping>
 8003564:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003566:	687a      	ldr	r2, [r7, #4]
 8003568:	68b9      	ldr	r1, [r7, #8]
 800356a:	6978      	ldr	r0, [r7, #20]
 800356c:	f7ff ff92 	bl	8003494 <NVIC_EncodePriority>
 8003570:	4602      	mov	r2, r0
 8003572:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003576:	4611      	mov	r1, r2
 8003578:	4618      	mov	r0, r3
 800357a:	f7ff ff61 	bl	8003440 <__NVIC_SetPriority>
}
 800357e:	bf00      	nop
 8003580:	3718      	adds	r7, #24
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}

08003586 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003586:	b580      	push	{r7, lr}
 8003588:	b082      	sub	sp, #8
 800358a:	af00      	add	r7, sp, #0
 800358c:	4603      	mov	r3, r0
 800358e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003590:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003594:	4618      	mov	r0, r3
 8003596:	f7ff ff37 	bl	8003408 <__NVIC_EnableIRQ>
}
 800359a:	bf00      	nop
 800359c:	3708      	adds	r7, #8
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}

080035a2 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80035a2:	b580      	push	{r7, lr}
 80035a4:	b082      	sub	sp, #8
 80035a6:	af00      	add	r7, sp, #0
 80035a8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	f7ff ffa4 	bl	80034f8 <SysTick_Config>
 80035b0:	4603      	mov	r3, r0
}
 80035b2:	4618      	mov	r0, r3
 80035b4:	3708      	adds	r7, #8
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}
	...

080035bc <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b082      	sub	sp, #8
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d101      	bne.n	80035ce <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	e08e      	b.n	80036ec <HAL_DMA_Init+0x130>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	461a      	mov	r2, r3
 80035d4:	4b47      	ldr	r3, [pc, #284]	; (80036f4 <HAL_DMA_Init+0x138>)
 80035d6:	429a      	cmp	r2, r3
 80035d8:	d80f      	bhi.n	80035fa <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	461a      	mov	r2, r3
 80035e0:	4b45      	ldr	r3, [pc, #276]	; (80036f8 <HAL_DMA_Init+0x13c>)
 80035e2:	4413      	add	r3, r2
 80035e4:	4a45      	ldr	r2, [pc, #276]	; (80036fc <HAL_DMA_Init+0x140>)
 80035e6:	fba2 2303 	umull	r2, r3, r2, r3
 80035ea:	091b      	lsrs	r3, r3, #4
 80035ec:	009a      	lsls	r2, r3, #2
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	4a42      	ldr	r2, [pc, #264]	; (8003700 <HAL_DMA_Init+0x144>)
 80035f6:	641a      	str	r2, [r3, #64]	; 0x40
 80035f8:	e00e      	b.n	8003618 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	461a      	mov	r2, r3
 8003600:	4b40      	ldr	r3, [pc, #256]	; (8003704 <HAL_DMA_Init+0x148>)
 8003602:	4413      	add	r3, r2
 8003604:	4a3d      	ldr	r2, [pc, #244]	; (80036fc <HAL_DMA_Init+0x140>)
 8003606:	fba2 2303 	umull	r2, r3, r2, r3
 800360a:	091b      	lsrs	r3, r3, #4
 800360c:	009a      	lsls	r2, r3, #2
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	4a3c      	ldr	r2, [pc, #240]	; (8003708 <HAL_DMA_Init+0x14c>)
 8003616:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2202      	movs	r2, #2
 800361c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	687a      	ldr	r2, [r7, #4]
 8003628:	6812      	ldr	r2, [r2, #0]
 800362a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800362e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003632:	6013      	str	r3, [r2, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	6819      	ldr	r1, [r3, #0]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	689a      	ldr	r2, [r3, #8]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	68db      	ldr	r3, [r3, #12]
 8003642:	431a      	orrs	r2, r3
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	691b      	ldr	r3, [r3, #16]
 8003648:	431a      	orrs	r2, r3
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	695b      	ldr	r3, [r3, #20]
 800364e:	431a      	orrs	r2, r3
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	699b      	ldr	r3, [r3, #24]
 8003654:	431a      	orrs	r2, r3
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	69db      	ldr	r3, [r3, #28]
 800365a:	431a      	orrs	r2, r3
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6a1b      	ldr	r3, [r3, #32]
 8003660:	431a      	orrs	r2, r3
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	430a      	orrs	r2, r1
 8003668:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800366a:	6878      	ldr	r0, [r7, #4]
 800366c:	f000 fabc 	bl	8003be8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	689b      	ldr	r3, [r3, #8]
 8003674:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003678:	d102      	bne.n	8003680 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2200      	movs	r2, #0
 800367e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	685a      	ldr	r2, [r3, #4]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003688:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800368c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003692:	687a      	ldr	r2, [r7, #4]
 8003694:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003696:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d010      	beq.n	80036c2 <HAL_DMA_Init+0x106>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	2b04      	cmp	r3, #4
 80036a6:	d80c      	bhi.n	80036c2 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80036a8:	6878      	ldr	r0, [r7, #4]
 80036aa:	f000 fae5 	bl	8003c78 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036b2:	2200      	movs	r2, #0
 80036b4:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036ba:	687a      	ldr	r2, [r7, #4]
 80036bc:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80036be:	605a      	str	r2, [r3, #4]
 80036c0:	e008      	b.n	80036d4 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = NULL;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2200      	movs	r2, #0
 80036c6:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = NULL;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2200      	movs	r2, #0
 80036cc:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2200      	movs	r2, #0
 80036d2:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2200      	movs	r2, #0
 80036d8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2201      	movs	r2, #1
 80036de:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2200      	movs	r2, #0
 80036e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80036ea:	2300      	movs	r3, #0
}
 80036ec:	4618      	mov	r0, r3
 80036ee:	3708      	adds	r7, #8
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bd80      	pop	{r7, pc}
 80036f4:	40020407 	.word	0x40020407
 80036f8:	bffdfff8 	.word	0xbffdfff8
 80036fc:	cccccccd 	.word	0xcccccccd
 8003700:	40020000 	.word	0x40020000
 8003704:	bffdfbf8 	.word	0xbffdfbf8
 8003708:	40020400 	.word	0x40020400

0800370c <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b086      	sub	sp, #24
 8003710:	af00      	add	r7, sp, #0
 8003712:	60f8      	str	r0, [r7, #12]
 8003714:	60b9      	str	r1, [r7, #8]
 8003716:	607a      	str	r2, [r7, #4]
 8003718:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800371a:	2300      	movs	r3, #0
 800371c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003724:	2b01      	cmp	r3, #1
 8003726:	d101      	bne.n	800372c <HAL_DMA_Start_IT+0x20>
 8003728:	2302      	movs	r3, #2
 800372a:	e069      	b.n	8003800 <HAL_DMA_Start_IT+0xf4>
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	2201      	movs	r2, #1
 8003730:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (hdma->State == HAL_DMA_STATE_READY)
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800373a:	b2db      	uxtb	r3, r3
 800373c:	2b01      	cmp	r3, #1
 800373e:	d155      	bne.n	80037ec <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	2202      	movs	r2, #2
 8003744:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	2200      	movs	r2, #0
 800374c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	681a      	ldr	r2, [r3, #0]
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f022 0201 	bic.w	r2, r2, #1
 800375c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	687a      	ldr	r2, [r7, #4]
 8003762:	68b9      	ldr	r1, [r7, #8]
 8003764:	68f8      	ldr	r0, [r7, #12]
 8003766:	f000 fa02 	bl	8003b6e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800376e:	2b00      	cmp	r3, #0
 8003770:	d008      	beq.n	8003784 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	681a      	ldr	r2, [r3, #0]
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f042 020e 	orr.w	r2, r2, #14
 8003780:	601a      	str	r2, [r3, #0]
 8003782:	e00f      	b.n	80037a4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	681a      	ldr	r2, [r3, #0]
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f022 0204 	bic.w	r2, r2, #4
 8003792:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	681a      	ldr	r2, [r3, #0]
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f042 020a 	orr.w	r2, r2, #10
 80037a2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d007      	beq.n	80037c2 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037b6:	681a      	ldr	r2, [r3, #0]
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80037c0:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != NULL)
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d007      	beq.n	80037da <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037ce:	681a      	ldr	r2, [r3, #0]
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80037d8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	681a      	ldr	r2, [r3, #0]
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f042 0201 	orr.w	r2, r2, #1
 80037e8:	601a      	str	r2, [r3, #0]
 80037ea:	e008      	b.n	80037fe <HAL_DMA_Start_IT+0xf2>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	2280      	movs	r2, #128	; 0x80
 80037f0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	2200      	movs	r2, #0
 80037f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Return error status */
    status = HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80037fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8003800:	4618      	mov	r0, r3
 8003802:	3718      	adds	r7, #24
 8003804:	46bd      	mov	sp, r7
 8003806:	bd80      	pop	{r7, pc}

08003808 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003808:	b480      	push	{r7}
 800380a:	b083      	sub	sp, #12
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d101      	bne.n	800381a <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	e04f      	b.n	80038ba <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003820:	b2db      	uxtb	r3, r3
 8003822:	2b02      	cmp	r3, #2
 8003824:	d008      	beq.n	8003838 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2204      	movs	r2, #4
 800382a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2200      	movs	r2, #0
 8003830:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003834:	2301      	movs	r3, #1
 8003836:	e040      	b.n	80038ba <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	681a      	ldr	r2, [r3, #0]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f022 020e 	bic.w	r2, r2, #14
 8003846:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800384c:	681a      	ldr	r2, [r3, #0]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003852:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003856:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	681a      	ldr	r2, [r3, #0]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f022 0201 	bic.w	r2, r2, #1
 8003866:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800386c:	f003 021c 	and.w	r2, r3, #28
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003874:	2101      	movs	r1, #1
 8003876:	fa01 f202 	lsl.w	r2, r1, r2
 800387a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003880:	687a      	ldr	r2, [r7, #4]
 8003882:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003884:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800388a:	2b00      	cmp	r3, #0
 800388c:	d00c      	beq.n	80038a8 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003892:	681a      	ldr	r2, [r3, #0]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003898:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800389c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038a2:	687a      	ldr	r2, [r7, #4]
 80038a4:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80038a6:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2201      	movs	r2, #1
 80038ac:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2200      	movs	r2, #0
 80038b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 80038b8:	2300      	movs	r3, #0
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	370c      	adds	r7, #12
 80038be:	46bd      	mov	sp, r7
 80038c0:	bc80      	pop	{r7}
 80038c2:	4770      	bx	lr

080038c4 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b084      	sub	sp, #16
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038cc:	2300      	movs	r3, #0
 80038ce:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80038d6:	b2db      	uxtb	r3, r3
 80038d8:	2b02      	cmp	r3, #2
 80038da:	d005      	beq.n	80038e8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2204      	movs	r2, #4
 80038e0:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	73fb      	strb	r3, [r7, #15]
 80038e6:	e047      	b.n	8003978 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	681a      	ldr	r2, [r3, #0]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f022 020e 	bic.w	r2, r2, #14
 80038f6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	681a      	ldr	r2, [r3, #0]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f022 0201 	bic.w	r2, r2, #1
 8003906:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800390c:	681a      	ldr	r2, [r3, #0]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003912:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003916:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800391c:	f003 021c 	and.w	r2, r3, #28
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003924:	2101      	movs	r1, #1
 8003926:	fa01 f202 	lsl.w	r2, r1, r2
 800392a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003930:	687a      	ldr	r2, [r7, #4]
 8003932:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003934:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800393a:	2b00      	cmp	r3, #0
 800393c:	d00c      	beq.n	8003958 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003942:	681a      	ldr	r2, [r3, #0]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003948:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800394c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003952:	687a      	ldr	r2, [r7, #4]
 8003954:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003956:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2201      	movs	r2, #1
 800395c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2200      	movs	r2, #0
 8003964:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800396c:	2b00      	cmp	r3, #0
 800396e:	d003      	beq.n	8003978 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003974:	6878      	ldr	r0, [r7, #4]
 8003976:	4798      	blx	r3
    }
  }
  return status;
 8003978:	7bfb      	ldrb	r3, [r7, #15]
}
 800397a:	4618      	mov	r0, r3
 800397c:	3710      	adds	r7, #16
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}
	...

08003984 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b084      	sub	sp, #16
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039a0:	f003 031c 	and.w	r3, r3, #28
 80039a4:	2204      	movs	r2, #4
 80039a6:	409a      	lsls	r2, r3
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	4013      	ands	r3, r2
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d027      	beq.n	8003a00 <HAL_DMA_IRQHandler+0x7c>
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	f003 0304 	and.w	r3, r3, #4
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d022      	beq.n	8003a00 <HAL_DMA_IRQHandler+0x7c>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f003 0320 	and.w	r3, r3, #32
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d107      	bne.n	80039d8 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	681a      	ldr	r2, [r3, #0]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f022 0204 	bic.w	r2, r2, #4
 80039d6:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039dc:	f003 021c 	and.w	r2, r3, #28
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e4:	2104      	movs	r1, #4
 80039e6:	fa01 f202 	lsl.w	r2, r1, r2
 80039ea:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	f000 8081 	beq.w	8003af8 <HAL_DMA_IRQHandler+0x174>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039fa:	6878      	ldr	r0, [r7, #4]
 80039fc:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 80039fe:	e07b      	b.n	8003af8 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a04:	f003 031c 	and.w	r3, r3, #28
 8003a08:	2202      	movs	r2, #2
 8003a0a:	409a      	lsls	r2, r3
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	4013      	ands	r3, r2
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d03d      	beq.n	8003a90 <HAL_DMA_IRQHandler+0x10c>
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	f003 0302 	and.w	r3, r3, #2
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d038      	beq.n	8003a90 <HAL_DMA_IRQHandler+0x10c>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f003 0320 	and.w	r3, r3, #32
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d10b      	bne.n	8003a44 <HAL_DMA_IRQHandler+0xc0>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	681a      	ldr	r2, [r3, #0]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f022 020a 	bic.w	r2, r2, #10
 8003a3a:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2201      	movs	r2, #1
 8003a40:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	461a      	mov	r2, r3
 8003a4a:	4b2e      	ldr	r3, [pc, #184]	; (8003b04 <HAL_DMA_IRQHandler+0x180>)
 8003a4c:	429a      	cmp	r2, r3
 8003a4e:	d909      	bls.n	8003a64 <HAL_DMA_IRQHandler+0xe0>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a54:	f003 031c 	and.w	r3, r3, #28
 8003a58:	4a2b      	ldr	r2, [pc, #172]	; (8003b08 <HAL_DMA_IRQHandler+0x184>)
 8003a5a:	2102      	movs	r1, #2
 8003a5c:	fa01 f303 	lsl.w	r3, r1, r3
 8003a60:	6053      	str	r3, [r2, #4]
 8003a62:	e008      	b.n	8003a76 <HAL_DMA_IRQHandler+0xf2>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a68:	f003 031c 	and.w	r3, r3, #28
 8003a6c:	4a27      	ldr	r2, [pc, #156]	; (8003b0c <HAL_DMA_IRQHandler+0x188>)
 8003a6e:	2102      	movs	r1, #2
 8003a70:	fa01 f303 	lsl.w	r3, r1, r3
 8003a74:	6053      	str	r3, [r2, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      if (hdma->XferCpltCallback != NULL)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d038      	beq.n	8003af8 <HAL_DMA_IRQHandler+0x174>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a8a:	6878      	ldr	r0, [r7, #4]
 8003a8c:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8003a8e:	e033      	b.n	8003af8 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a94:	f003 031c 	and.w	r3, r3, #28
 8003a98:	2208      	movs	r2, #8
 8003a9a:	409a      	lsls	r2, r3
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	4013      	ands	r3, r2
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d02a      	beq.n	8003afa <HAL_DMA_IRQHandler+0x176>
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	f003 0308 	and.w	r3, r3, #8
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d025      	beq.n	8003afa <HAL_DMA_IRQHandler+0x176>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	681a      	ldr	r2, [r3, #0]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f022 020e 	bic.w	r2, r2, #14
 8003abc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ac2:	f003 021c 	and.w	r2, r3, #28
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aca:	2101      	movs	r1, #1
 8003acc:	fa01 f202 	lsl.w	r2, r1, r2
 8003ad0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2201      	movs	r2, #1
 8003ad6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2201      	movs	r2, #1
 8003adc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d004      	beq.n	8003afa <HAL_DMA_IRQHandler+0x176>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003af4:	6878      	ldr	r0, [r7, #4]
 8003af6:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003af8:	bf00      	nop
 8003afa:	bf00      	nop
}
 8003afc:	3710      	adds	r7, #16
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}
 8003b02:	bf00      	nop
 8003b04:	40020080 	.word	0x40020080
 8003b08:	40020400 	.word	0x40020400
 8003b0c:	40020000 	.word	0x40020000

08003b10 <HAL_DMA_ConfigChannelAttributes>:
  * @param ChannelAttributes specifies the DMA channel secure/privilege attributes.
  *        This parameter can be a one or a combination of @ref DMA_Channel_Attributes
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *hdma, uint32_t ChannelAttributes)
{
 8003b10:	b480      	push	{r7}
 8003b12:	b085      	sub	sp, #20
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
 8003b18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	72fb      	strb	r3, [r7, #11]
#if defined (CORE_CM0PLUS)
  uint32_t ccr_SECM;
#endif /* CORE_CM0PLUS */

  /* Check the DMA peripheral handle */
  if (hdma == NULL)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d103      	bne.n	8003b2c <HAL_DMA_ConfigChannelAttributes+0x1c>
  {
    status = HAL_ERROR;
 8003b24:	2301      	movs	r3, #1
 8003b26:	72fb      	strb	r3, [r7, #11]
    return status;
 8003b28:	7afb      	ldrb	r3, [r7, #11]
 8003b2a:	e01b      	b.n	8003b64 <HAL_DMA_ConfigChannelAttributes+0x54>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Read CCR register */
  ccr = READ_REG(hdma->Instance->CCR);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	60fb      	str	r3, [r7, #12]

  /* Apply any requested privilege/non-privilege attributes */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) != 0U)
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	f003 0310 	and.w	r3, r3, #16
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d00d      	beq.n	8003b5a <HAL_DMA_ConfigChannelAttributes+0x4a>
  {
    if ((ChannelAttributes & DMA_CCR_PRIV) != 0U)
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d004      	beq.n	8003b52 <HAL_DMA_ConfigChannelAttributes+0x42>
    {
      SET_BIT(ccr, DMA_CCR_PRIV);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b4e:	60fb      	str	r3, [r7, #12]
 8003b50:	e003      	b.n	8003b5a <HAL_DMA_ConfigChannelAttributes+0x4a>
    }
    else
    {
      CLEAR_BIT(ccr, DMA_CCR_PRIV);
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003b58:	60fb      	str	r3, [r7, #12]
  }

#endif /* CORE_CM0PLUS */

  /* Update CCR Register: PRIV, SECM, SCEC, DSEC bits */
  WRITE_REG(hdma->Instance->CCR, ccr);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	68fa      	ldr	r2, [r7, #12]
 8003b60:	601a      	str	r2, [r3, #0]

  return status;
 8003b62:	7afb      	ldrb	r3, [r7, #11]
}
 8003b64:	4618      	mov	r0, r3
 8003b66:	3714      	adds	r7, #20
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bc80      	pop	{r7}
 8003b6c:	4770      	bx	lr

08003b6e <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003b6e:	b480      	push	{r7}
 8003b70:	b085      	sub	sp, #20
 8003b72:	af00      	add	r7, sp, #0
 8003b74:	60f8      	str	r0, [r7, #12]
 8003b76:	60b9      	str	r1, [r7, #8]
 8003b78:	607a      	str	r2, [r7, #4]
 8003b7a:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b80:	68fa      	ldr	r2, [r7, #12]
 8003b82:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003b84:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != NULL)
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d004      	beq.n	8003b98 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b92:	68fa      	ldr	r2, [r7, #12]
 8003b94:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003b96:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b9c:	f003 021c 	and.w	r2, r3, #28
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba4:	2101      	movs	r1, #1
 8003ba6:	fa01 f202 	lsl.w	r2, r1, r2
 8003baa:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	683a      	ldr	r2, [r7, #0]
 8003bb2:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	2b10      	cmp	r3, #16
 8003bba:	d108      	bne.n	8003bce <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	687a      	ldr	r2, [r7, #4]
 8003bc2:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	68ba      	ldr	r2, [r7, #8]
 8003bca:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003bcc:	e007      	b.n	8003bde <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	68ba      	ldr	r2, [r7, #8]
 8003bd4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	687a      	ldr	r2, [r7, #4]
 8003bdc:	60da      	str	r2, [r3, #12]
}
 8003bde:	bf00      	nop
 8003be0:	3714      	adds	r7, #20
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bc80      	pop	{r7}
 8003be6:	4770      	bx	lr

08003be8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003be8:	b480      	push	{r7}
 8003bea:	b085      	sub	sp, #20
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	461a      	mov	r2, r3
 8003bf6:	4b1c      	ldr	r3, [pc, #112]	; (8003c68 <DMA_CalcDMAMUXChannelBaseAndMask+0x80>)
 8003bf8:	429a      	cmp	r2, r3
 8003bfa:	d813      	bhi.n	8003c24 <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c00:	089b      	lsrs	r3, r3, #2
 8003c02:	009b      	lsls	r3, r3, #2
 8003c04:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003c08:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8003c0c:	687a      	ldr	r2, [r7, #4]
 8003c0e:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	b2db      	uxtb	r3, r3
 8003c16:	3b08      	subs	r3, #8
 8003c18:	4a14      	ldr	r2, [pc, #80]	; (8003c6c <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8003c1a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c1e:	091b      	lsrs	r3, r3, #4
 8003c20:	60fb      	str	r3, [r7, #12]
 8003c22:	e011      	b.n	8003c48 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c28:	089b      	lsrs	r3, r3, #2
 8003c2a:	009a      	lsls	r2, r3, #2
 8003c2c:	4b10      	ldr	r3, [pc, #64]	; (8003c70 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 8003c2e:	4413      	add	r3, r2
 8003c30:	687a      	ldr	r2, [r7, #4]
 8003c32:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	b2db      	uxtb	r3, r3
 8003c3a:	3b08      	subs	r3, #8
 8003c3c:	4a0b      	ldr	r2, [pc, #44]	; (8003c6c <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8003c3e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c42:	091b      	lsrs	r3, r3, #4
 8003c44:	3307      	adds	r3, #7
 8003c46:	60fb      	str	r3, [r7, #12]
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	4a0a      	ldr	r2, [pc, #40]	; (8003c74 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 8003c4c:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	f003 031f 	and.w	r3, r3, #31
 8003c54:	2201      	movs	r2, #1
 8003c56:	409a      	lsls	r2, r3
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003c5c:	bf00      	nop
 8003c5e:	3714      	adds	r7, #20
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bc80      	pop	{r7}
 8003c64:	4770      	bx	lr
 8003c66:	bf00      	nop
 8003c68:	40020407 	.word	0x40020407
 8003c6c:	cccccccd 	.word	0xcccccccd
 8003c70:	4002081c 	.word	0x4002081c
 8003c74:	40020880 	.word	0x40020880

08003c78 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b085      	sub	sp, #20
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c88:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003c8a:	68fa      	ldr	r2, [r7, #12]
 8003c8c:	4b0a      	ldr	r3, [pc, #40]	; (8003cb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003c8e:	4413      	add	r3, r2
 8003c90:	009b      	lsls	r3, r3, #2
 8003c92:	461a      	mov	r2, r3
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	4a08      	ldr	r2, [pc, #32]	; (8003cbc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003c9c:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	3b01      	subs	r3, #1
 8003ca2:	f003 0303 	and.w	r3, r3, #3
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	409a      	lsls	r2, r3
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003cae:	bf00      	nop
 8003cb0:	3714      	adds	r7, #20
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bc80      	pop	{r7}
 8003cb6:	4770      	bx	lr
 8003cb8:	1000823f 	.word	0x1000823f
 8003cbc:	40020940 	.word	0x40020940

08003cc0 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b087      	sub	sp, #28
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
 8003cc8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003cce:	e140      	b.n	8003f52 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	681a      	ldr	r2, [r3, #0]
 8003cd4:	2101      	movs	r1, #1
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	fa01 f303 	lsl.w	r3, r1, r3
 8003cdc:	4013      	ands	r3, r2
 8003cde:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	f000 8132 	beq.w	8003f4c <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	f003 0303 	and.w	r3, r3, #3
 8003cf0:	2b01      	cmp	r3, #1
 8003cf2:	d005      	beq.n	8003d00 <HAL_GPIO_Init+0x40>
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	f003 0303 	and.w	r3, r3, #3
 8003cfc:	2b02      	cmp	r3, #2
 8003cfe:	d130      	bne.n	8003d62 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	689b      	ldr	r3, [r3, #8]
 8003d04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	005b      	lsls	r3, r3, #1
 8003d0a:	2203      	movs	r2, #3
 8003d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d10:	43db      	mvns	r3, r3
 8003d12:	693a      	ldr	r2, [r7, #16]
 8003d14:	4013      	ands	r3, r2
 8003d16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	68da      	ldr	r2, [r3, #12]
 8003d1c:	697b      	ldr	r3, [r7, #20]
 8003d1e:	005b      	lsls	r3, r3, #1
 8003d20:	fa02 f303 	lsl.w	r3, r2, r3
 8003d24:	693a      	ldr	r2, [r7, #16]
 8003d26:	4313      	orrs	r3, r2
 8003d28:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	693a      	ldr	r2, [r7, #16]
 8003d2e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003d36:	2201      	movs	r2, #1
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d3e:	43db      	mvns	r3, r3
 8003d40:	693a      	ldr	r2, [r7, #16]
 8003d42:	4013      	ands	r3, r2
 8003d44:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	091b      	lsrs	r3, r3, #4
 8003d4c:	f003 0201 	and.w	r2, r3, #1
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	fa02 f303 	lsl.w	r3, r2, r3
 8003d56:	693a      	ldr	r2, [r7, #16]
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	693a      	ldr	r2, [r7, #16]
 8003d60:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	f003 0303 	and.w	r3, r3, #3
 8003d6a:	2b03      	cmp	r3, #3
 8003d6c:	d017      	beq.n	8003d9e <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	68db      	ldr	r3, [r3, #12]
 8003d72:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	005b      	lsls	r3, r3, #1
 8003d78:	2203      	movs	r2, #3
 8003d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d7e:	43db      	mvns	r3, r3
 8003d80:	693a      	ldr	r2, [r7, #16]
 8003d82:	4013      	ands	r3, r2
 8003d84:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	689a      	ldr	r2, [r3, #8]
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	005b      	lsls	r3, r3, #1
 8003d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d92:	693a      	ldr	r2, [r7, #16]
 8003d94:	4313      	orrs	r3, r2
 8003d96:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	693a      	ldr	r2, [r7, #16]
 8003d9c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	f003 0303 	and.w	r3, r3, #3
 8003da6:	2b02      	cmp	r3, #2
 8003da8:	d123      	bne.n	8003df2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	08da      	lsrs	r2, r3, #3
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	3208      	adds	r2, #8
 8003db2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003db6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	f003 0307 	and.w	r3, r3, #7
 8003dbe:	009b      	lsls	r3, r3, #2
 8003dc0:	220f      	movs	r2, #15
 8003dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc6:	43db      	mvns	r3, r3
 8003dc8:	693a      	ldr	r2, [r7, #16]
 8003dca:	4013      	ands	r3, r2
 8003dcc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	691a      	ldr	r2, [r3, #16]
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	f003 0307 	and.w	r3, r3, #7
 8003dd8:	009b      	lsls	r3, r3, #2
 8003dda:	fa02 f303 	lsl.w	r3, r2, r3
 8003dde:	693a      	ldr	r2, [r7, #16]
 8003de0:	4313      	orrs	r3, r2
 8003de2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	08da      	lsrs	r2, r3, #3
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	3208      	adds	r2, #8
 8003dec:	6939      	ldr	r1, [r7, #16]
 8003dee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	005b      	lsls	r3, r3, #1
 8003dfc:	2203      	movs	r2, #3
 8003dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8003e02:	43db      	mvns	r3, r3
 8003e04:	693a      	ldr	r2, [r7, #16]
 8003e06:	4013      	ands	r3, r2
 8003e08:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	f003 0203 	and.w	r2, r3, #3
 8003e12:	697b      	ldr	r3, [r7, #20]
 8003e14:	005b      	lsls	r3, r3, #1
 8003e16:	fa02 f303 	lsl.w	r3, r2, r3
 8003e1a:	693a      	ldr	r2, [r7, #16]
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	693a      	ldr	r2, [r7, #16]
 8003e24:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	f000 808c 	beq.w	8003f4c <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8003e34:	4a4e      	ldr	r2, [pc, #312]	; (8003f70 <HAL_GPIO_Init+0x2b0>)
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	089b      	lsrs	r3, r3, #2
 8003e3a:	3302      	adds	r3, #2
 8003e3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e40:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	f003 0303 	and.w	r3, r3, #3
 8003e48:	009b      	lsls	r3, r3, #2
 8003e4a:	2207      	movs	r2, #7
 8003e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e50:	43db      	mvns	r3, r3
 8003e52:	693a      	ldr	r2, [r7, #16]
 8003e54:	4013      	ands	r3, r2
 8003e56:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003e5e:	d00d      	beq.n	8003e7c <HAL_GPIO_Init+0x1bc>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	4a44      	ldr	r2, [pc, #272]	; (8003f74 <HAL_GPIO_Init+0x2b4>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d007      	beq.n	8003e78 <HAL_GPIO_Init+0x1b8>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	4a43      	ldr	r2, [pc, #268]	; (8003f78 <HAL_GPIO_Init+0x2b8>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d101      	bne.n	8003e74 <HAL_GPIO_Init+0x1b4>
 8003e70:	2302      	movs	r3, #2
 8003e72:	e004      	b.n	8003e7e <HAL_GPIO_Init+0x1be>
 8003e74:	2307      	movs	r3, #7
 8003e76:	e002      	b.n	8003e7e <HAL_GPIO_Init+0x1be>
 8003e78:	2301      	movs	r3, #1
 8003e7a:	e000      	b.n	8003e7e <HAL_GPIO_Init+0x1be>
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	697a      	ldr	r2, [r7, #20]
 8003e80:	f002 0203 	and.w	r2, r2, #3
 8003e84:	0092      	lsls	r2, r2, #2
 8003e86:	4093      	lsls	r3, r2
 8003e88:	693a      	ldr	r2, [r7, #16]
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003e8e:	4938      	ldr	r1, [pc, #224]	; (8003f70 <HAL_GPIO_Init+0x2b0>)
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	089b      	lsrs	r3, r3, #2
 8003e94:	3302      	adds	r3, #2
 8003e96:	693a      	ldr	r2, [r7, #16]
 8003e98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003e9c:	4b37      	ldr	r3, [pc, #220]	; (8003f7c <HAL_GPIO_Init+0x2bc>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	43db      	mvns	r3, r3
 8003ea6:	693a      	ldr	r2, [r7, #16]
 8003ea8:	4013      	ands	r3, r2
 8003eaa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d003      	beq.n	8003ec0 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8003eb8:	693a      	ldr	r2, [r7, #16]
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003ec0:	4a2e      	ldr	r2, [pc, #184]	; (8003f7c <HAL_GPIO_Init+0x2bc>)
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003ec6:	4b2d      	ldr	r3, [pc, #180]	; (8003f7c <HAL_GPIO_Init+0x2bc>)
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	43db      	mvns	r3, r3
 8003ed0:	693a      	ldr	r2, [r7, #16]
 8003ed2:	4013      	ands	r3, r2
 8003ed4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d003      	beq.n	8003eea <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8003ee2:	693a      	ldr	r2, [r7, #16]
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003eea:	4a24      	ldr	r2, [pc, #144]	; (8003f7c <HAL_GPIO_Init+0x2bc>)
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8003ef0:	4b22      	ldr	r3, [pc, #136]	; (8003f7c <HAL_GPIO_Init+0x2bc>)
 8003ef2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ef6:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	43db      	mvns	r3, r3
 8003efc:	693a      	ldr	r2, [r7, #16]
 8003efe:	4013      	ands	r3, r2
 8003f00:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d003      	beq.n	8003f16 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8003f0e:	693a      	ldr	r2, [r7, #16]
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	4313      	orrs	r3, r2
 8003f14:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8003f16:	4a19      	ldr	r2, [pc, #100]	; (8003f7c <HAL_GPIO_Init+0x2bc>)
 8003f18:	693b      	ldr	r3, [r7, #16]
 8003f1a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8003f1e:	4b17      	ldr	r3, [pc, #92]	; (8003f7c <HAL_GPIO_Init+0x2bc>)
 8003f20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f24:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	43db      	mvns	r3, r3
 8003f2a:	693a      	ldr	r2, [r7, #16]
 8003f2c:	4013      	ands	r3, r2
 8003f2e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d003      	beq.n	8003f44 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8003f3c:	693a      	ldr	r2, [r7, #16]
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	4313      	orrs	r3, r2
 8003f42:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8003f44:	4a0d      	ldr	r2, [pc, #52]	; (8003f7c <HAL_GPIO_Init+0x2bc>)
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	3301      	adds	r3, #1
 8003f50:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	681a      	ldr	r2, [r3, #0]
 8003f56:	697b      	ldr	r3, [r7, #20]
 8003f58:	fa22 f303 	lsr.w	r3, r2, r3
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	f47f aeb7 	bne.w	8003cd0 <HAL_GPIO_Init+0x10>
  }
}
 8003f62:	bf00      	nop
 8003f64:	bf00      	nop
 8003f66:	371c      	adds	r7, #28
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bc80      	pop	{r7}
 8003f6c:	4770      	bx	lr
 8003f6e:	bf00      	nop
 8003f70:	40010000 	.word	0x40010000
 8003f74:	48000400 	.word	0x48000400
 8003f78:	48000800 	.word	0x48000800
 8003f7c:	58000800 	.word	0x58000800

08003f80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b083      	sub	sp, #12
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
 8003f88:	460b      	mov	r3, r1
 8003f8a:	807b      	strh	r3, [r7, #2]
 8003f8c:	4613      	mov	r3, r2
 8003f8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003f90:	787b      	ldrb	r3, [r7, #1]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d003      	beq.n	8003f9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003f96:	887a      	ldrh	r2, [r7, #2]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003f9c:	e002      	b.n	8003fa4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003f9e:	887a      	ldrh	r2, [r7, #2]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003fa4:	bf00      	nop
 8003fa6:	370c      	adds	r7, #12
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bc80      	pop	{r7}
 8003fac:	4770      	bx	lr
	...

08003fb0 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003fb4:	4b04      	ldr	r3, [pc, #16]	; (8003fc8 <HAL_PWR_EnableBkUpAccess+0x18>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a03      	ldr	r2, [pc, #12]	; (8003fc8 <HAL_PWR_EnableBkUpAccess+0x18>)
 8003fba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fbe:	6013      	str	r3, [r2, #0]
}
 8003fc0:	bf00      	nop
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bc80      	pop	{r7}
 8003fc6:	4770      	bx	lr
 8003fc8:	58000400 	.word	0x58000400

08003fcc <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8003fd0:	4b03      	ldr	r3, [pc, #12]	; (8003fe0 <HAL_PWREx_GetVoltageRange+0x14>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bc80      	pop	{r7}
 8003fde:	4770      	bx	lr
 8003fe0:	58000400 	.word	0x58000400

08003fe4 <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8003fe8:	4b06      	ldr	r3, [pc, #24]	; (8004004 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ff0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ff4:	d101      	bne.n	8003ffa <LL_PWR_IsEnabledBkUpAccess+0x16>
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	e000      	b.n	8003ffc <LL_PWR_IsEnabledBkUpAccess+0x18>
 8003ffa:	2300      	movs	r3, #0
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bc80      	pop	{r7}
 8004002:	4770      	bx	lr
 8004004:	58000400 	.word	0x58000400

08004008 <LL_RCC_HSE_EnableTcxo>:
  * @note PB0 must be configured in analog mode prior enabling VDDTCXO supply
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_EnableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableTcxo(void)
{
 8004008:	b480      	push	{r7}
 800400a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 800400c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004016:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800401a:	6013      	str	r3, [r2, #0]
}
 800401c:	bf00      	nop
 800401e:	46bd      	mov	sp, r7
 8004020:	bc80      	pop	{r7}
 8004022:	4770      	bx	lr

08004024 <LL_RCC_HSE_DisableTcxo>:
  * @brief  Disable HSE VDDTCXO output on package pin PB0-VDDTCXO
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_DisableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_DisableTcxo(void)
{
 8004024:	b480      	push	{r7}
 8004026:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8004028:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004032:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004036:	6013      	str	r3, [r2, #0]
}
 8004038:	bf00      	nop
 800403a:	46bd      	mov	sp, r7
 800403c:	bc80      	pop	{r7}
 800403e:	4770      	bx	lr

08004040 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler  division by 2
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8004040:	b480      	push	{r7}
 8004042:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8004044:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800404e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004052:	d101      	bne.n	8004058 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8004054:	2301      	movs	r3, #1
 8004056:	e000      	b.n	800405a <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8004058:	2300      	movs	r3, #0
}
 800405a:	4618      	mov	r0, r3
 800405c:	46bd      	mov	sp, r7
 800405e:	bc80      	pop	{r7}
 8004060:	4770      	bx	lr

08004062 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8004062:	b480      	push	{r7}
 8004064:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8004066:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004070:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004074:	6013      	str	r3, [r2, #0]
}
 8004076:	bf00      	nop
 8004078:	46bd      	mov	sp, r7
 800407a:	bc80      	pop	{r7}
 800407c:	4770      	bx	lr

0800407e <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 800407e:	b480      	push	{r7}
 8004080:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8004082:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800408c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004090:	6013      	str	r3, [r2, #0]
}
 8004092:	bf00      	nop
 8004094:	46bd      	mov	sp, r7
 8004096:	bc80      	pop	{r7}
 8004098:	4770      	bx	lr

0800409a <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 800409a:	b480      	push	{r7}
 800409c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800409e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040a8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80040ac:	d101      	bne.n	80040b2 <LL_RCC_HSE_IsReady+0x18>
 80040ae:	2301      	movs	r3, #1
 80040b0:	e000      	b.n	80040b4 <LL_RCC_HSE_IsReady+0x1a>
 80040b2:	2300      	movs	r3, #0
}
 80040b4:	4618      	mov	r0, r3
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bc80      	pop	{r7}
 80040ba:	4770      	bx	lr

080040bc <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 80040bc:	b480      	push	{r7}
 80040be:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80040c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80040ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040ce:	6013      	str	r3, [r2, #0]
}
 80040d0:	bf00      	nop
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bc80      	pop	{r7}
 80040d6:	4770      	bx	lr

080040d8 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 80040d8:	b480      	push	{r7}
 80040da:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80040dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80040e6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80040ea:	6013      	str	r3, [r2, #0]
}
 80040ec:	bf00      	nop
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bc80      	pop	{r7}
 80040f2:	4770      	bx	lr

080040f4 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80040f4:	b480      	push	{r7}
 80040f6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80040f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004102:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004106:	d101      	bne.n	800410c <LL_RCC_HSI_IsReady+0x18>
 8004108:	2301      	movs	r3, #1
 800410a:	e000      	b.n	800410e <LL_RCC_HSI_IsReady+0x1a>
 800410c:	2300      	movs	r3, #0
}
 800410e:	4618      	mov	r0, r3
 8004110:	46bd      	mov	sp, r7
 8004112:	bc80      	pop	{r7}
 8004114:	4770      	bx	lr

08004116 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8004116:	b480      	push	{r7}
 8004118:	b083      	sub	sp, #12
 800411a:	af00      	add	r7, sp, #0
 800411c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800411e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	061b      	lsls	r3, r3, #24
 800412c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004130:	4313      	orrs	r3, r2
 8004132:	604b      	str	r3, [r1, #4]
}
 8004134:	bf00      	nop
 8004136:	370c      	adds	r7, #12
 8004138:	46bd      	mov	sp, r7
 800413a:	bc80      	pop	{r7}
 800413c:	4770      	bx	lr

0800413e <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 800413e:	b480      	push	{r7}
 8004140:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004142:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004146:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800414a:	f003 0302 	and.w	r3, r3, #2
 800414e:	2b02      	cmp	r3, #2
 8004150:	d101      	bne.n	8004156 <LL_RCC_LSE_IsReady+0x18>
 8004152:	2301      	movs	r3, #1
 8004154:	e000      	b.n	8004158 <LL_RCC_LSE_IsReady+0x1a>
 8004156:	2300      	movs	r3, #0
}
 8004158:	4618      	mov	r0, r3
 800415a:	46bd      	mov	sp, r7
 800415c:	bc80      	pop	{r7}
 800415e:	4770      	bx	lr

08004160 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 8004160:	b480      	push	{r7}
 8004162:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8004164:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004168:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800416c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004170:	f043 0301 	orr.w	r3, r3, #1
 8004174:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004178:	bf00      	nop
 800417a:	46bd      	mov	sp, r7
 800417c:	bc80      	pop	{r7}
 800417e:	4770      	bx	lr

08004180 <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 8004180:	b480      	push	{r7}
 8004182:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8004184:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004188:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800418c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004190:	f023 0301 	bic.w	r3, r3, #1
 8004194:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004198:	bf00      	nop
 800419a:	46bd      	mov	sp, r7
 800419c:	bc80      	pop	{r7}
 800419e:	4770      	bx	lr

080041a0 <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 80041a0:	b480      	push	{r7}
 80041a2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 80041a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041ac:	f003 0302 	and.w	r3, r3, #2
 80041b0:	2b02      	cmp	r3, #2
 80041b2:	d101      	bne.n	80041b8 <LL_RCC_LSI_IsReady+0x18>
 80041b4:	2301      	movs	r3, #1
 80041b6:	e000      	b.n	80041ba <LL_RCC_LSI_IsReady+0x1a>
 80041b8:	2300      	movs	r3, #0
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	46bd      	mov	sp, r7
 80041be:	bc80      	pop	{r7}
 80041c0:	4770      	bx	lr

080041c2 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 80041c2:	b480      	push	{r7}
 80041c4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80041c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80041d0:	f043 0301 	orr.w	r3, r3, #1
 80041d4:	6013      	str	r3, [r2, #0]
}
 80041d6:	bf00      	nop
 80041d8:	46bd      	mov	sp, r7
 80041da:	bc80      	pop	{r7}
 80041dc:	4770      	bx	lr

080041de <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 80041de:	b480      	push	{r7}
 80041e0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80041e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80041ec:	f023 0301 	bic.w	r3, r3, #1
 80041f0:	6013      	str	r3, [r2, #0]
}
 80041f2:	bf00      	nop
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bc80      	pop	{r7}
 80041f8:	4770      	bx	lr

080041fa <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 80041fa:	b480      	push	{r7}
 80041fc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80041fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f003 0302 	and.w	r3, r3, #2
 8004208:	2b02      	cmp	r3, #2
 800420a:	d101      	bne.n	8004210 <LL_RCC_MSI_IsReady+0x16>
 800420c:	2301      	movs	r3, #1
 800420e:	e000      	b.n	8004212 <LL_RCC_MSI_IsReady+0x18>
 8004210:	2300      	movs	r3, #0
}
 8004212:	4618      	mov	r0, r3
 8004214:	46bd      	mov	sp, r7
 8004216:	bc80      	pop	{r7}
 8004218:	4770      	bx	lr

0800421a <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 800421a:	b480      	push	{r7}
 800421c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 800421e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f003 0308 	and.w	r3, r3, #8
 8004228:	2b08      	cmp	r3, #8
 800422a:	d101      	bne.n	8004230 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 800422c:	2301      	movs	r3, #1
 800422e:	e000      	b.n	8004232 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8004230:	2300      	movs	r3, #0
}
 8004232:	4618      	mov	r0, r3
 8004234:	46bd      	mov	sp, r7
 8004236:	bc80      	pop	{r7}
 8004238:	4770      	bx	lr

0800423a <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 800423a:	b480      	push	{r7}
 800423c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 800423e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004248:	4618      	mov	r0, r3
 800424a:	46bd      	mov	sp, r7
 800424c:	bc80      	pop	{r7}
 800424e:	4770      	bx	lr

08004250 <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 8004250:	b480      	push	{r7}
 8004252:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8004254:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004258:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800425c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8004260:	4618      	mov	r0, r3
 8004262:	46bd      	mov	sp, r7
 8004264:	bc80      	pop	{r7}
 8004266:	4770      	bx	lr

08004268 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8004268:	b480      	push	{r7}
 800426a:	b083      	sub	sp, #12
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8004270:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	021b      	lsls	r3, r3, #8
 800427e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004282:	4313      	orrs	r3, r2
 8004284:	604b      	str	r3, [r1, #4]
}
 8004286:	bf00      	nop
 8004288:	370c      	adds	r7, #12
 800428a:	46bd      	mov	sp, r7
 800428c:	bc80      	pop	{r7}
 800428e:	4770      	bx	lr

08004290 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8004290:	b480      	push	{r7}
 8004292:	b083      	sub	sp, #12
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8004298:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800429c:	689b      	ldr	r3, [r3, #8]
 800429e:	f023 0203 	bic.w	r2, r3, #3
 80042a2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	4313      	orrs	r3, r2
 80042aa:	608b      	str	r3, [r1, #8]
}
 80042ac:	bf00      	nop
 80042ae:	370c      	adds	r7, #12
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bc80      	pop	{r7}
 80042b4:	4770      	bx	lr

080042b6 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80042b6:	b480      	push	{r7}
 80042b8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80042ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042be:	689b      	ldr	r3, [r3, #8]
 80042c0:	f003 030c 	and.w	r3, r3, #12
}
 80042c4:	4618      	mov	r0, r3
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bc80      	pop	{r7}
 80042ca:	4770      	bx	lr

080042cc <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80042cc:	b480      	push	{r7}
 80042ce:	b083      	sub	sp, #12
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80042d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042d8:	689b      	ldr	r3, [r3, #8]
 80042da:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80042de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	4313      	orrs	r3, r2
 80042e6:	608b      	str	r3, [r1, #8]
}
 80042e8:	bf00      	nop
 80042ea:	370c      	adds	r7, #12
 80042ec:	46bd      	mov	sp, r7
 80042ee:	bc80      	pop	{r7}
 80042f0:	4770      	bx	lr

080042f2 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80042f2:	b480      	push	{r7}
 80042f4:	b083      	sub	sp, #12
 80042f6:	af00      	add	r7, sp, #0
 80042f8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80042fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042fe:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004302:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004306:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	4313      	orrs	r3, r2
 800430e:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8004312:	bf00      	nop
 8004314:	370c      	adds	r7, #12
 8004316:	46bd      	mov	sp, r7
 8004318:	bc80      	pop	{r7}
 800431a:	4770      	bx	lr

0800431c <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 800431c:	b480      	push	{r7}
 800431e:	b083      	sub	sp, #12
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8004324:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004328:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800432c:	f023 020f 	bic.w	r2, r3, #15
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	091b      	lsrs	r3, r3, #4
 8004334:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004338:	4313      	orrs	r3, r2
 800433a:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800433e:	bf00      	nop
 8004340:	370c      	adds	r7, #12
 8004342:	46bd      	mov	sp, r7
 8004344:	bc80      	pop	{r7}
 8004346:	4770      	bx	lr

08004348 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8004348:	b480      	push	{r7}
 800434a:	b083      	sub	sp, #12
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8004350:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004354:	689b      	ldr	r3, [r3, #8]
 8004356:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800435a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	4313      	orrs	r3, r2
 8004362:	608b      	str	r3, [r1, #8]
}
 8004364:	bf00      	nop
 8004366:	370c      	adds	r7, #12
 8004368:	46bd      	mov	sp, r7
 800436a:	bc80      	pop	{r7}
 800436c:	4770      	bx	lr

0800436e <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 800436e:	b480      	push	{r7}
 8004370:	b083      	sub	sp, #12
 8004372:	af00      	add	r7, sp, #0
 8004374:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8004376:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800437a:	689b      	ldr	r3, [r3, #8]
 800437c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004380:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	4313      	orrs	r3, r2
 8004388:	608b      	str	r3, [r1, #8]
}
 800438a:	bf00      	nop
 800438c:	370c      	adds	r7, #12
 800438e:	46bd      	mov	sp, r7
 8004390:	bc80      	pop	{r7}
 8004392:	4770      	bx	lr

08004394 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8004394:	b480      	push	{r7}
 8004396:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8004398:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800439c:	689b      	ldr	r3, [r3, #8]
 800439e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80043a2:	4618      	mov	r0, r3
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bc80      	pop	{r7}
 80043a8:	4770      	bx	lr

080043aa <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 80043aa:	b480      	push	{r7}
 80043ac:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80043ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043b2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80043b6:	011b      	lsls	r3, r3, #4
 80043b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80043bc:	4618      	mov	r0, r3
 80043be:	46bd      	mov	sp, r7
 80043c0:	bc80      	pop	{r7}
 80043c2:	4770      	bx	lr

080043c4 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80043c4:	b480      	push	{r7}
 80043c6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80043c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043cc:	689b      	ldr	r3, [r3, #8]
 80043ce:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80043d2:	4618      	mov	r0, r3
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bc80      	pop	{r7}
 80043d8:	4770      	bx	lr

080043da <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 80043da:	b480      	push	{r7}
 80043dc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80043de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043e2:	689b      	ldr	r3, [r3, #8]
 80043e4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80043e8:	4618      	mov	r0, r3
 80043ea:	46bd      	mov	sp, r7
 80043ec:	bc80      	pop	{r7}
 80043ee:	4770      	bx	lr

080043f0 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80043f0:	b480      	push	{r7}
 80043f2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80043f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80043fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004402:	6013      	str	r3, [r2, #0]
}
 8004404:	bf00      	nop
 8004406:	46bd      	mov	sp, r7
 8004408:	bc80      	pop	{r7}
 800440a:	4770      	bx	lr

0800440c <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800440c:	b480      	push	{r7}
 800440e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8004410:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800441a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800441e:	6013      	str	r3, [r2, #0]
}
 8004420:	bf00      	nop
 8004422:	46bd      	mov	sp, r7
 8004424:	bc80      	pop	{r7}
 8004426:	4770      	bx	lr

08004428 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8004428:	b480      	push	{r7}
 800442a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800442c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004436:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800443a:	d101      	bne.n	8004440 <LL_RCC_PLL_IsReady+0x18>
 800443c:	2301      	movs	r3, #1
 800443e:	e000      	b.n	8004442 <LL_RCC_PLL_IsReady+0x1a>
 8004440:	2300      	movs	r3, #0
}
 8004442:	4618      	mov	r0, r3
 8004444:	46bd      	mov	sp, r7
 8004446:	bc80      	pop	{r7}
 8004448:	4770      	bx	lr

0800444a <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800444a:	b480      	push	{r7}
 800444c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800444e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004452:	68db      	ldr	r3, [r3, #12]
 8004454:	0a1b      	lsrs	r3, r3, #8
 8004456:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 800445a:	4618      	mov	r0, r3
 800445c:	46bd      	mov	sp, r7
 800445e:	bc80      	pop	{r7}
 8004460:	4770      	bx	lr

08004462 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8004462:	b480      	push	{r7}
 8004464:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8004466:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800446a:	68db      	ldr	r3, [r3, #12]
 800446c:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8004470:	4618      	mov	r0, r3
 8004472:	46bd      	mov	sp, r7
 8004474:	bc80      	pop	{r7}
 8004476:	4770      	bx	lr

08004478 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8004478:	b480      	push	{r7}
 800447a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800447c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004480:	68db      	ldr	r3, [r3, #12]
 8004482:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8004486:	4618      	mov	r0, r3
 8004488:	46bd      	mov	sp, r7
 800448a:	bc80      	pop	{r7}
 800448c:	4770      	bx	lr

0800448e <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800448e:	b480      	push	{r7}
 8004490:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8004492:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004496:	68db      	ldr	r3, [r3, #12]
 8004498:	f003 0303 	and.w	r3, r3, #3
}
 800449c:	4618      	mov	r0, r3
 800449e:	46bd      	mov	sp, r7
 80044a0:	bc80      	pop	{r7}
 80044a2:	4770      	bx	lr

080044a4 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 80044a4:	b480      	push	{r7}
 80044a6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80044a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044ac:	689b      	ldr	r3, [r3, #8]
 80044ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044b6:	d101      	bne.n	80044bc <LL_RCC_IsActiveFlag_HPRE+0x18>
 80044b8:	2301      	movs	r3, #1
 80044ba:	e000      	b.n	80044be <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80044bc:	2300      	movs	r3, #0
}
 80044be:	4618      	mov	r0, r3
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bc80      	pop	{r7}
 80044c4:	4770      	bx	lr

080044c6 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 80044c6:	b480      	push	{r7}
 80044c8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80044ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044ce:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80044d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044d6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80044da:	d101      	bne.n	80044e0 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80044dc:	2301      	movs	r3, #1
 80044de:	e000      	b.n	80044e2 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80044e0:	2300      	movs	r3, #0
}
 80044e2:	4618      	mov	r0, r3
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bc80      	pop	{r7}
 80044e8:	4770      	bx	lr

080044ea <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80044ea:	b480      	push	{r7}
 80044ec:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80044ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044f2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80044f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044fe:	d101      	bne.n	8004504 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8004500:	2301      	movs	r3, #1
 8004502:	e000      	b.n	8004506 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8004504:	2300      	movs	r3, #0
}
 8004506:	4618      	mov	r0, r3
 8004508:	46bd      	mov	sp, r7
 800450a:	bc80      	pop	{r7}
 800450c:	4770      	bx	lr

0800450e <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800450e:	b480      	push	{r7}
 8004510:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8004512:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004516:	689b      	ldr	r3, [r3, #8]
 8004518:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800451c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004520:	d101      	bne.n	8004526 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8004522:	2301      	movs	r3, #1
 8004524:	e000      	b.n	8004528 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8004526:	2300      	movs	r3, #0
}
 8004528:	4618      	mov	r0, r3
 800452a:	46bd      	mov	sp, r7
 800452c:	bc80      	pop	{r7}
 800452e:	4770      	bx	lr

08004530 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8004530:	b480      	push	{r7}
 8004532:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8004534:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004538:	689b      	ldr	r3, [r3, #8]
 800453a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800453e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004542:	d101      	bne.n	8004548 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8004544:	2301      	movs	r3, #1
 8004546:	e000      	b.n	800454a <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8004548:	2300      	movs	r3, #0
}
 800454a:	4618      	mov	r0, r3
 800454c:	46bd      	mov	sp, r7
 800454e:	bc80      	pop	{r7}
 8004550:	4770      	bx	lr
	...

08004554 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b088      	sub	sp, #32
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d101      	bne.n	8004566 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004562:	2301      	movs	r3, #1
 8004564:	e36f      	b.n	8004c46 <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004566:	f7ff fea6 	bl	80042b6 <LL_RCC_GetSysClkSource>
 800456a:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800456c:	f7ff ff8f 	bl	800448e <LL_RCC_PLL_GetMainSource>
 8004570:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f003 0320 	and.w	r3, r3, #32
 800457a:	2b00      	cmp	r3, #0
 800457c:	f000 80c4 	beq.w	8004708 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004580:	69fb      	ldr	r3, [r7, #28]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d005      	beq.n	8004592 <HAL_RCC_OscConfig+0x3e>
 8004586:	69fb      	ldr	r3, [r7, #28]
 8004588:	2b0c      	cmp	r3, #12
 800458a:	d176      	bne.n	800467a <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 800458c:	69bb      	ldr	r3, [r7, #24]
 800458e:	2b01      	cmp	r3, #1
 8004590:	d173      	bne.n	800467a <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6a1b      	ldr	r3, [r3, #32]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d101      	bne.n	800459e <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800459a:	2301      	movs	r3, #1
 800459c:	e353      	b.n	8004c46 <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80045a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f003 0308 	and.w	r3, r3, #8
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d005      	beq.n	80045bc <HAL_RCC_OscConfig+0x68>
 80045b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80045ba:	e006      	b.n	80045ca <HAL_RCC_OscConfig+0x76>
 80045bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80045c4:	091b      	lsrs	r3, r3, #4
 80045c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d222      	bcs.n	8004614 <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045d2:	4618      	mov	r0, r3
 80045d4:	f000 fd5a 	bl	800508c <RCC_SetFlashLatencyFromMSIRange>
 80045d8:	4603      	mov	r3, r0
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d001      	beq.n	80045e2 <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 80045de:	2301      	movs	r3, #1
 80045e0:	e331      	b.n	8004c46 <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80045e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80045ec:	f043 0308 	orr.w	r3, r3, #8
 80045f0:	6013      	str	r3, [r2, #0]
 80045f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004600:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004604:	4313      	orrs	r3, r2
 8004606:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800460c:	4618      	mov	r0, r3
 800460e:	f7ff fe2b 	bl	8004268 <LL_RCC_MSI_SetCalibTrimming>
 8004612:	e021      	b.n	8004658 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004614:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800461e:	f043 0308 	orr.w	r3, r3, #8
 8004622:	6013      	str	r3, [r2, #0]
 8004624:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004632:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004636:	4313      	orrs	r3, r2
 8004638:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800463e:	4618      	mov	r0, r3
 8004640:	f7ff fe12 	bl	8004268 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004648:	4618      	mov	r0, r3
 800464a:	f000 fd1f 	bl	800508c <RCC_SetFlashLatencyFromMSIRange>
 800464e:	4603      	mov	r3, r0
 8004650:	2b00      	cmp	r3, #0
 8004652:	d001      	beq.n	8004658 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 8004654:	2301      	movs	r3, #1
 8004656:	e2f6      	b.n	8004c46 <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004658:	f000 fce0 	bl	800501c <HAL_RCC_GetHCLKFreq>
 800465c:	4603      	mov	r3, r0
 800465e:	4aa7      	ldr	r2, [pc, #668]	; (80048fc <HAL_RCC_OscConfig+0x3a8>)
 8004660:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 8004662:	4ba7      	ldr	r3, [pc, #668]	; (8004900 <HAL_RCC_OscConfig+0x3ac>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4618      	mov	r0, r3
 8004668:	f7fe fe50 	bl	800330c <HAL_InitTick>
 800466c:	4603      	mov	r3, r0
 800466e:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8004670:	7cfb      	ldrb	r3, [r7, #19]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d047      	beq.n	8004706 <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 8004676:	7cfb      	ldrb	r3, [r7, #19]
 8004678:	e2e5      	b.n	8004c46 <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6a1b      	ldr	r3, [r3, #32]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d02c      	beq.n	80046dc <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004682:	f7ff fd9e 	bl	80041c2 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004686:	f7fe f963 	bl	8002950 <HAL_GetTick>
 800468a:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800468c:	e008      	b.n	80046a0 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800468e:	f7fe f95f 	bl	8002950 <HAL_GetTick>
 8004692:	4602      	mov	r2, r0
 8004694:	697b      	ldr	r3, [r7, #20]
 8004696:	1ad3      	subs	r3, r2, r3
 8004698:	2b02      	cmp	r3, #2
 800469a:	d901      	bls.n	80046a0 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 800469c:	2303      	movs	r3, #3
 800469e:	e2d2      	b.n	8004c46 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 80046a0:	f7ff fdab 	bl	80041fa <LL_RCC_MSI_IsReady>
 80046a4:	4603      	mov	r3, r0
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d0f1      	beq.n	800468e <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80046aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80046b4:	f043 0308 	orr.w	r3, r3, #8
 80046b8:	6013      	str	r3, [r2, #0]
 80046ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046c8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80046cc:	4313      	orrs	r3, r2
 80046ce:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d4:	4618      	mov	r0, r3
 80046d6:	f7ff fdc7 	bl	8004268 <LL_RCC_MSI_SetCalibTrimming>
 80046da:	e015      	b.n	8004708 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80046dc:	f7ff fd7f 	bl	80041de <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80046e0:	f7fe f936 	bl	8002950 <HAL_GetTick>
 80046e4:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80046e6:	e008      	b.n	80046fa <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80046e8:	f7fe f932 	bl	8002950 <HAL_GetTick>
 80046ec:	4602      	mov	r2, r0
 80046ee:	697b      	ldr	r3, [r7, #20]
 80046f0:	1ad3      	subs	r3, r2, r3
 80046f2:	2b02      	cmp	r3, #2
 80046f4:	d901      	bls.n	80046fa <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80046f6:	2303      	movs	r3, #3
 80046f8:	e2a5      	b.n	8004c46 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 80046fa:	f7ff fd7e 	bl	80041fa <LL_RCC_MSI_IsReady>
 80046fe:	4603      	mov	r3, r0
 8004700:	2b00      	cmp	r3, #0
 8004702:	d1f1      	bne.n	80046e8 <HAL_RCC_OscConfig+0x194>
 8004704:	e000      	b.n	8004708 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004706:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f003 0301 	and.w	r3, r3, #1
 8004710:	2b00      	cmp	r3, #0
 8004712:	d058      	beq.n	80047c6 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004714:	69fb      	ldr	r3, [r7, #28]
 8004716:	2b08      	cmp	r3, #8
 8004718:	d005      	beq.n	8004726 <HAL_RCC_OscConfig+0x1d2>
 800471a:	69fb      	ldr	r3, [r7, #28]
 800471c:	2b0c      	cmp	r3, #12
 800471e:	d108      	bne.n	8004732 <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004720:	69bb      	ldr	r3, [r7, #24]
 8004722:	2b03      	cmp	r3, #3
 8004724:	d105      	bne.n	8004732 <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d14b      	bne.n	80047c6 <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 800472e:	2301      	movs	r3, #1
 8004730:	e289      	b.n	8004c46 <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8004732:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	689b      	ldr	r3, [r3, #8]
 8004740:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004744:	4313      	orrs	r3, r2
 8004746:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004750:	d102      	bne.n	8004758 <HAL_RCC_OscConfig+0x204>
 8004752:	f7ff fc86 	bl	8004062 <LL_RCC_HSE_Enable>
 8004756:	e00d      	b.n	8004774 <HAL_RCC_OscConfig+0x220>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8004760:	d104      	bne.n	800476c <HAL_RCC_OscConfig+0x218>
 8004762:	f7ff fc51 	bl	8004008 <LL_RCC_HSE_EnableTcxo>
 8004766:	f7ff fc7c 	bl	8004062 <LL_RCC_HSE_Enable>
 800476a:	e003      	b.n	8004774 <HAL_RCC_OscConfig+0x220>
 800476c:	f7ff fc87 	bl	800407e <LL_RCC_HSE_Disable>
 8004770:	f7ff fc58 	bl	8004024 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d012      	beq.n	80047a2 <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800477c:	f7fe f8e8 	bl	8002950 <HAL_GetTick>
 8004780:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8004782:	e008      	b.n	8004796 <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004784:	f7fe f8e4 	bl	8002950 <HAL_GetTick>
 8004788:	4602      	mov	r2, r0
 800478a:	697b      	ldr	r3, [r7, #20]
 800478c:	1ad3      	subs	r3, r2, r3
 800478e:	2b64      	cmp	r3, #100	; 0x64
 8004790:	d901      	bls.n	8004796 <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 8004792:	2303      	movs	r3, #3
 8004794:	e257      	b.n	8004c46 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 8004796:	f7ff fc80 	bl	800409a <LL_RCC_HSE_IsReady>
 800479a:	4603      	mov	r3, r0
 800479c:	2b00      	cmp	r3, #0
 800479e:	d0f1      	beq.n	8004784 <HAL_RCC_OscConfig+0x230>
 80047a0:	e011      	b.n	80047c6 <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047a2:	f7fe f8d5 	bl	8002950 <HAL_GetTick>
 80047a6:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80047a8:	e008      	b.n	80047bc <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047aa:	f7fe f8d1 	bl	8002950 <HAL_GetTick>
 80047ae:	4602      	mov	r2, r0
 80047b0:	697b      	ldr	r3, [r7, #20]
 80047b2:	1ad3      	subs	r3, r2, r3
 80047b4:	2b64      	cmp	r3, #100	; 0x64
 80047b6:	d901      	bls.n	80047bc <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 80047b8:	2303      	movs	r3, #3
 80047ba:	e244      	b.n	8004c46 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 80047bc:	f7ff fc6d 	bl	800409a <LL_RCC_HSE_IsReady>
 80047c0:	4603      	mov	r3, r0
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d1f1      	bne.n	80047aa <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f003 0302 	and.w	r3, r3, #2
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d046      	beq.n	8004860 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80047d2:	69fb      	ldr	r3, [r7, #28]
 80047d4:	2b04      	cmp	r3, #4
 80047d6:	d005      	beq.n	80047e4 <HAL_RCC_OscConfig+0x290>
 80047d8:	69fb      	ldr	r3, [r7, #28]
 80047da:	2b0c      	cmp	r3, #12
 80047dc:	d10e      	bne.n	80047fc <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80047de:	69bb      	ldr	r3, [r7, #24]
 80047e0:	2b02      	cmp	r3, #2
 80047e2:	d10b      	bne.n	80047fc <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	691b      	ldr	r3, [r3, #16]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d101      	bne.n	80047f0 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 80047ec:	2301      	movs	r3, #1
 80047ee:	e22a      	b.n	8004c46 <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	695b      	ldr	r3, [r3, #20]
 80047f4:	4618      	mov	r0, r3
 80047f6:	f7ff fc8e 	bl	8004116 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80047fa:	e031      	b.n	8004860 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	691b      	ldr	r3, [r3, #16]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d019      	beq.n	8004838 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004804:	f7ff fc5a 	bl	80040bc <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004808:	f7fe f8a2 	bl	8002950 <HAL_GetTick>
 800480c:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800480e:	e008      	b.n	8004822 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004810:	f7fe f89e 	bl	8002950 <HAL_GetTick>
 8004814:	4602      	mov	r2, r0
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	1ad3      	subs	r3, r2, r3
 800481a:	2b02      	cmp	r3, #2
 800481c:	d901      	bls.n	8004822 <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 800481e:	2303      	movs	r3, #3
 8004820:	e211      	b.n	8004c46 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 8004822:	f7ff fc67 	bl	80040f4 <LL_RCC_HSI_IsReady>
 8004826:	4603      	mov	r3, r0
 8004828:	2b00      	cmp	r3, #0
 800482a:	d0f1      	beq.n	8004810 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	695b      	ldr	r3, [r3, #20]
 8004830:	4618      	mov	r0, r3
 8004832:	f7ff fc70 	bl	8004116 <LL_RCC_HSI_SetCalibTrimming>
 8004836:	e013      	b.n	8004860 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004838:	f7ff fc4e 	bl	80040d8 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800483c:	f7fe f888 	bl	8002950 <HAL_GetTick>
 8004840:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8004842:	e008      	b.n	8004856 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004844:	f7fe f884 	bl	8002950 <HAL_GetTick>
 8004848:	4602      	mov	r2, r0
 800484a:	697b      	ldr	r3, [r7, #20]
 800484c:	1ad3      	subs	r3, r2, r3
 800484e:	2b02      	cmp	r3, #2
 8004850:	d901      	bls.n	8004856 <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 8004852:	2303      	movs	r3, #3
 8004854:	e1f7      	b.n	8004c46 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 8004856:	f7ff fc4d 	bl	80040f4 <LL_RCC_HSI_IsReady>
 800485a:	4603      	mov	r3, r0
 800485c:	2b00      	cmp	r3, #0
 800485e:	d1f1      	bne.n	8004844 <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f003 0308 	and.w	r3, r3, #8
 8004868:	2b00      	cmp	r3, #0
 800486a:	d06e      	beq.n	800494a <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	699b      	ldr	r3, [r3, #24]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d056      	beq.n	8004922 <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 8004874:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004878:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800487c:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	69da      	ldr	r2, [r3, #28]
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	f003 0310 	and.w	r3, r3, #16
 8004888:	429a      	cmp	r2, r3
 800488a:	d031      	beq.n	80048f0 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	f003 0302 	and.w	r3, r3, #2
 8004892:	2b00      	cmp	r3, #0
 8004894:	d006      	beq.n	80048a4 <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800489c:	2b00      	cmp	r3, #0
 800489e:	d101      	bne.n	80048a4 <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 80048a0:	2301      	movs	r3, #1
 80048a2:	e1d0      	b.n	8004c46 <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	f003 0301 	and.w	r3, r3, #1
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d013      	beq.n	80048d6 <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 80048ae:	f7ff fc67 	bl	8004180 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80048b2:	f7fe f84d 	bl	8002950 <HAL_GetTick>
 80048b6:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 80048b8:	e008      	b.n	80048cc <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048ba:	f7fe f849 	bl	8002950 <HAL_GetTick>
 80048be:	4602      	mov	r2, r0
 80048c0:	697b      	ldr	r3, [r7, #20]
 80048c2:	1ad3      	subs	r3, r2, r3
 80048c4:	2b11      	cmp	r3, #17
 80048c6:	d901      	bls.n	80048cc <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 80048c8:	2303      	movs	r3, #3
 80048ca:	e1bc      	b.n	8004c46 <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 80048cc:	f7ff fc68 	bl	80041a0 <LL_RCC_LSI_IsReady>
 80048d0:	4603      	mov	r3, r0
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d1f1      	bne.n	80048ba <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 80048d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048de:	f023 0210 	bic.w	r2, r3, #16
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	69db      	ldr	r3, [r3, #28]
 80048e6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80048ea:	4313      	orrs	r3, r2
 80048ec:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80048f0:	f7ff fc36 	bl	8004160 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048f4:	f7fe f82c 	bl	8002950 <HAL_GetTick>
 80048f8:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 80048fa:	e00c      	b.n	8004916 <HAL_RCC_OscConfig+0x3c2>
 80048fc:	2000000c 	.word	0x2000000c
 8004900:	20000010 	.word	0x20000010
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004904:	f7fe f824 	bl	8002950 <HAL_GetTick>
 8004908:	4602      	mov	r2, r0
 800490a:	697b      	ldr	r3, [r7, #20]
 800490c:	1ad3      	subs	r3, r2, r3
 800490e:	2b11      	cmp	r3, #17
 8004910:	d901      	bls.n	8004916 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8004912:	2303      	movs	r3, #3
 8004914:	e197      	b.n	8004c46 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 8004916:	f7ff fc43 	bl	80041a0 <LL_RCC_LSI_IsReady>
 800491a:	4603      	mov	r3, r0
 800491c:	2b00      	cmp	r3, #0
 800491e:	d0f1      	beq.n	8004904 <HAL_RCC_OscConfig+0x3b0>
 8004920:	e013      	b.n	800494a <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004922:	f7ff fc2d 	bl	8004180 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004926:	f7fe f813 	bl	8002950 <HAL_GetTick>
 800492a:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 800492c:	e008      	b.n	8004940 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800492e:	f7fe f80f 	bl	8002950 <HAL_GetTick>
 8004932:	4602      	mov	r2, r0
 8004934:	697b      	ldr	r3, [r7, #20]
 8004936:	1ad3      	subs	r3, r2, r3
 8004938:	2b11      	cmp	r3, #17
 800493a:	d901      	bls.n	8004940 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 800493c:	2303      	movs	r3, #3
 800493e:	e182      	b.n	8004c46 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 8004940:	f7ff fc2e 	bl	80041a0 <LL_RCC_LSI_IsReady>
 8004944:	4603      	mov	r3, r0
 8004946:	2b00      	cmp	r3, #0
 8004948:	d1f1      	bne.n	800492e <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f003 0304 	and.w	r3, r3, #4
 8004952:	2b00      	cmp	r3, #0
 8004954:	f000 80d8 	beq.w	8004b08 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8004958:	f7ff fb44 	bl	8003fe4 <LL_PWR_IsEnabledBkUpAccess>
 800495c:	4603      	mov	r3, r0
 800495e:	2b00      	cmp	r3, #0
 8004960:	d113      	bne.n	800498a <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8004962:	f7ff fb25 	bl	8003fb0 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004966:	f7fd fff3 	bl	8002950 <HAL_GetTick>
 800496a:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 800496c:	e008      	b.n	8004980 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800496e:	f7fd ffef 	bl	8002950 <HAL_GetTick>
 8004972:	4602      	mov	r2, r0
 8004974:	697b      	ldr	r3, [r7, #20]
 8004976:	1ad3      	subs	r3, r2, r3
 8004978:	2b02      	cmp	r3, #2
 800497a:	d901      	bls.n	8004980 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 800497c:	2303      	movs	r3, #3
 800497e:	e162      	b.n	8004c46 <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8004980:	f7ff fb30 	bl	8003fe4 <LL_PWR_IsEnabledBkUpAccess>
 8004984:	4603      	mov	r3, r0
 8004986:	2b00      	cmp	r3, #0
 8004988:	d0f1      	beq.n	800496e <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	68db      	ldr	r3, [r3, #12]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d07b      	beq.n	8004a8a <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	68db      	ldr	r3, [r3, #12]
 8004996:	2b85      	cmp	r3, #133	; 0x85
 8004998:	d003      	beq.n	80049a2 <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	68db      	ldr	r3, [r3, #12]
 800499e:	2b05      	cmp	r3, #5
 80049a0:	d109      	bne.n	80049b6 <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80049a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049aa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80049ae:	f043 0304 	orr.w	r3, r3, #4
 80049b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049b6:	f7fd ffcb 	bl	8002950 <HAL_GetTick>
 80049ba:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80049bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80049c8:	f043 0301 	orr.w	r3, r3, #1
 80049cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80049d0:	e00a      	b.n	80049e8 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049d2:	f7fd ffbd 	bl	8002950 <HAL_GetTick>
 80049d6:	4602      	mov	r2, r0
 80049d8:	697b      	ldr	r3, [r7, #20]
 80049da:	1ad3      	subs	r3, r2, r3
 80049dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d901      	bls.n	80049e8 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 80049e4:	2303      	movs	r3, #3
 80049e6:	e12e      	b.n	8004c46 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 80049e8:	f7ff fba9 	bl	800413e <LL_RCC_LSE_IsReady>
 80049ec:	4603      	mov	r3, r0
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d0ef      	beq.n	80049d2 <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	68db      	ldr	r3, [r3, #12]
 80049f6:	2b81      	cmp	r3, #129	; 0x81
 80049f8:	d003      	beq.n	8004a02 <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	68db      	ldr	r3, [r3, #12]
 80049fe:	2b85      	cmp	r3, #133	; 0x85
 8004a00:	d121      	bne.n	8004a46 <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a02:	f7fd ffa5 	bl	8002950 <HAL_GetTick>
 8004a06:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004a08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a10:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004a14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8004a1c:	e00a      	b.n	8004a34 <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a1e:	f7fd ff97 	bl	8002950 <HAL_GetTick>
 8004a22:	4602      	mov	r2, r0
 8004a24:	697b      	ldr	r3, [r7, #20]
 8004a26:	1ad3      	subs	r3, r2, r3
 8004a28:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d901      	bls.n	8004a34 <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 8004a30:	2303      	movs	r3, #3
 8004a32:	e108      	b.n	8004c46 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8004a34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d0ec      	beq.n	8004a1e <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8004a44:	e060      	b.n	8004b08 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a46:	f7fd ff83 	bl	8002950 <HAL_GetTick>
 8004a4a:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004a4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a54:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004a58:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004a60:	e00a      	b.n	8004a78 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a62:	f7fd ff75 	bl	8002950 <HAL_GetTick>
 8004a66:	4602      	mov	r2, r0
 8004a68:	697b      	ldr	r3, [r7, #20]
 8004a6a:	1ad3      	subs	r3, r2, r3
 8004a6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d901      	bls.n	8004a78 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8004a74:	2303      	movs	r3, #3
 8004a76:	e0e6      	b.n	8004c46 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004a78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d1ec      	bne.n	8004a62 <HAL_RCC_OscConfig+0x50e>
 8004a88:	e03e      	b.n	8004b08 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a8a:	f7fd ff61 	bl	8002950 <HAL_GetTick>
 8004a8e:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004a90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a98:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004a9c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004aa0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004aa4:	e00a      	b.n	8004abc <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004aa6:	f7fd ff53 	bl	8002950 <HAL_GetTick>
 8004aaa:	4602      	mov	r2, r0
 8004aac:	697b      	ldr	r3, [r7, #20]
 8004aae:	1ad3      	subs	r3, r2, r3
 8004ab0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d901      	bls.n	8004abc <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8004ab8:	2303      	movs	r3, #3
 8004aba:	e0c4      	b.n	8004c46 <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004abc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ac0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ac4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d1ec      	bne.n	8004aa6 <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004acc:	f7fd ff40 	bl	8002950 <HAL_GetTick>
 8004ad0:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004ad2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ad6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ada:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004ade:	f023 0301 	bic.w	r3, r3, #1
 8004ae2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8004ae6:	e00a      	b.n	8004afe <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ae8:	f7fd ff32 	bl	8002950 <HAL_GetTick>
 8004aec:	4602      	mov	r2, r0
 8004aee:	697b      	ldr	r3, [r7, #20]
 8004af0:	1ad3      	subs	r3, r2, r3
 8004af2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d901      	bls.n	8004afe <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 8004afa:	2303      	movs	r3, #3
 8004afc:	e0a3      	b.n	8004c46 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 8004afe:	f7ff fb1e 	bl	800413e <LL_RCC_LSE_IsReady>
 8004b02:	4603      	mov	r3, r0
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d1ef      	bne.n	8004ae8 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	f000 8099 	beq.w	8004c44 <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004b12:	69fb      	ldr	r3, [r7, #28]
 8004b14:	2b0c      	cmp	r3, #12
 8004b16:	d06c      	beq.n	8004bf2 <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b1c:	2b02      	cmp	r3, #2
 8004b1e:	d14b      	bne.n	8004bb8 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b20:	f7ff fc74 	bl	800440c <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b24:	f7fd ff14 	bl	8002950 <HAL_GetTick>
 8004b28:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8004b2a:	e008      	b.n	8004b3e <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b2c:	f7fd ff10 	bl	8002950 <HAL_GetTick>
 8004b30:	4602      	mov	r2, r0
 8004b32:	697b      	ldr	r3, [r7, #20]
 8004b34:	1ad3      	subs	r3, r2, r3
 8004b36:	2b0a      	cmp	r3, #10
 8004b38:	d901      	bls.n	8004b3e <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 8004b3a:	2303      	movs	r3, #3
 8004b3c:	e083      	b.n	8004c46 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8004b3e:	f7ff fc73 	bl	8004428 <LL_RCC_PLL_IsReady>
 8004b42:	4603      	mov	r3, r0
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d1f1      	bne.n	8004b2c <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004b48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b4c:	68da      	ldr	r2, [r3, #12]
 8004b4e:	4b40      	ldr	r3, [pc, #256]	; (8004c50 <HAL_RCC_OscConfig+0x6fc>)
 8004b50:	4013      	ands	r3, r2
 8004b52:	687a      	ldr	r2, [r7, #4]
 8004b54:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8004b56:	687a      	ldr	r2, [r7, #4]
 8004b58:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004b5a:	4311      	orrs	r1, r2
 8004b5c:	687a      	ldr	r2, [r7, #4]
 8004b5e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004b60:	0212      	lsls	r2, r2, #8
 8004b62:	4311      	orrs	r1, r2
 8004b64:	687a      	ldr	r2, [r7, #4]
 8004b66:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004b68:	4311      	orrs	r1, r2
 8004b6a:	687a      	ldr	r2, [r7, #4]
 8004b6c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004b6e:	4311      	orrs	r1, r2
 8004b70:	687a      	ldr	r2, [r7, #4]
 8004b72:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004b74:	430a      	orrs	r2, r1
 8004b76:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b7e:	f7ff fc37 	bl	80043f0 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004b82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b86:	68db      	ldr	r3, [r3, #12]
 8004b88:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b90:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b92:	f7fd fedd 	bl	8002950 <HAL_GetTick>
 8004b96:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8004b98:	e008      	b.n	8004bac <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b9a:	f7fd fed9 	bl	8002950 <HAL_GetTick>
 8004b9e:	4602      	mov	r2, r0
 8004ba0:	697b      	ldr	r3, [r7, #20]
 8004ba2:	1ad3      	subs	r3, r2, r3
 8004ba4:	2b0a      	cmp	r3, #10
 8004ba6:	d901      	bls.n	8004bac <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 8004ba8:	2303      	movs	r3, #3
 8004baa:	e04c      	b.n	8004c46 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 8004bac:	f7ff fc3c 	bl	8004428 <LL_RCC_PLL_IsReady>
 8004bb0:	4603      	mov	r3, r0
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d0f1      	beq.n	8004b9a <HAL_RCC_OscConfig+0x646>
 8004bb6:	e045      	b.n	8004c44 <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bb8:	f7ff fc28 	bl	800440c <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bbc:	f7fd fec8 	bl	8002950 <HAL_GetTick>
 8004bc0:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8004bc2:	e008      	b.n	8004bd6 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bc4:	f7fd fec4 	bl	8002950 <HAL_GetTick>
 8004bc8:	4602      	mov	r2, r0
 8004bca:	697b      	ldr	r3, [r7, #20]
 8004bcc:	1ad3      	subs	r3, r2, r3
 8004bce:	2b0a      	cmp	r3, #10
 8004bd0:	d901      	bls.n	8004bd6 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8004bd2:	2303      	movs	r3, #3
 8004bd4:	e037      	b.n	8004c46 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8004bd6:	f7ff fc27 	bl	8004428 <LL_RCC_PLL_IsReady>
 8004bda:	4603      	mov	r3, r0
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d1f1      	bne.n	8004bc4 <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8004be0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004be4:	68da      	ldr	r2, [r3, #12]
 8004be6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004bea:	4b1a      	ldr	r3, [pc, #104]	; (8004c54 <HAL_RCC_OscConfig+0x700>)
 8004bec:	4013      	ands	r3, r2
 8004bee:	60cb      	str	r3, [r1, #12]
 8004bf0:	e028      	b.n	8004c44 <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bf6:	2b01      	cmp	r3, #1
 8004bf8:	d101      	bne.n	8004bfe <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	e023      	b.n	8004c46 <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004bfe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c02:	68db      	ldr	r3, [r3, #12]
 8004c04:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8004c06:	69bb      	ldr	r3, [r7, #24]
 8004c08:	f003 0203 	and.w	r2, r3, #3
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c10:	429a      	cmp	r2, r3
 8004c12:	d115      	bne.n	8004c40 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8004c14:	69bb      	ldr	r3, [r7, #24]
 8004c16:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c1e:	429a      	cmp	r2, r3
 8004c20:	d10e      	bne.n	8004c40 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8004c22:	69bb      	ldr	r3, [r7, #24]
 8004c24:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c2c:	021b      	lsls	r3, r3, #8
 8004c2e:	429a      	cmp	r2, r3
 8004c30:	d106      	bne.n	8004c40 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8004c32:	69bb      	ldr	r3, [r7, #24]
 8004c34:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c3c:	429a      	cmp	r2, r3
 8004c3e:	d001      	beq.n	8004c44 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 8004c40:	2301      	movs	r3, #1
 8004c42:	e000      	b.n	8004c46 <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 8004c44:	2300      	movs	r3, #0
}
 8004c46:	4618      	mov	r0, r3
 8004c48:	3720      	adds	r7, #32
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bd80      	pop	{r7, pc}
 8004c4e:	bf00      	nop
 8004c50:	11c1808c 	.word	0x11c1808c
 8004c54:	eefefffc 	.word	0xeefefffc

08004c58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b084      	sub	sp, #16
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
 8004c60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d101      	bne.n	8004c6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c68:	2301      	movs	r3, #1
 8004c6a:	e12c      	b.n	8004ec6 <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004c6c:	4b98      	ldr	r3, [pc, #608]	; (8004ed0 <HAL_RCC_ClockConfig+0x278>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f003 0307 	and.w	r3, r3, #7
 8004c74:	683a      	ldr	r2, [r7, #0]
 8004c76:	429a      	cmp	r2, r3
 8004c78:	d91b      	bls.n	8004cb2 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c7a:	4b95      	ldr	r3, [pc, #596]	; (8004ed0 <HAL_RCC_ClockConfig+0x278>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f023 0207 	bic.w	r2, r3, #7
 8004c82:	4993      	ldr	r1, [pc, #588]	; (8004ed0 <HAL_RCC_ClockConfig+0x278>)
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	4313      	orrs	r3, r2
 8004c88:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004c8a:	f7fd fe61 	bl	8002950 <HAL_GetTick>
 8004c8e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c90:	e008      	b.n	8004ca4 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004c92:	f7fd fe5d 	bl	8002950 <HAL_GetTick>
 8004c96:	4602      	mov	r2, r0
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	1ad3      	subs	r3, r2, r3
 8004c9c:	2b02      	cmp	r3, #2
 8004c9e:	d901      	bls.n	8004ca4 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8004ca0:	2303      	movs	r3, #3
 8004ca2:	e110      	b.n	8004ec6 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ca4:	4b8a      	ldr	r3, [pc, #552]	; (8004ed0 <HAL_RCC_ClockConfig+0x278>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f003 0307 	and.w	r3, r3, #7
 8004cac:	683a      	ldr	r2, [r7, #0]
 8004cae:	429a      	cmp	r2, r3
 8004cb0:	d1ef      	bne.n	8004c92 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f003 0302 	and.w	r3, r3, #2
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d016      	beq.n	8004cec <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	689b      	ldr	r3, [r3, #8]
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	f7ff fb02 	bl	80042cc <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004cc8:	f7fd fe42 	bl	8002950 <HAL_GetTick>
 8004ccc:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004cce:	e008      	b.n	8004ce2 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004cd0:	f7fd fe3e 	bl	8002950 <HAL_GetTick>
 8004cd4:	4602      	mov	r2, r0
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	1ad3      	subs	r3, r2, r3
 8004cda:	2b02      	cmp	r3, #2
 8004cdc:	d901      	bls.n	8004ce2 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8004cde:	2303      	movs	r3, #3
 8004ce0:	e0f1      	b.n	8004ec6 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004ce2:	f7ff fbdf 	bl	80044a4 <LL_RCC_IsActiveFlag_HPRE>
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d0f1      	beq.n	8004cd0 <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f003 0320 	and.w	r3, r3, #32
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d016      	beq.n	8004d26 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	695b      	ldr	r3, [r3, #20]
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	f7ff faf8 	bl	80042f2 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004d02:	f7fd fe25 	bl	8002950 <HAL_GetTick>
 8004d06:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004d08:	e008      	b.n	8004d1c <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004d0a:	f7fd fe21 	bl	8002950 <HAL_GetTick>
 8004d0e:	4602      	mov	r2, r0
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	1ad3      	subs	r3, r2, r3
 8004d14:	2b02      	cmp	r3, #2
 8004d16:	d901      	bls.n	8004d1c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8004d18:	2303      	movs	r3, #3
 8004d1a:	e0d4      	b.n	8004ec6 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004d1c:	f7ff fbd3 	bl	80044c6 <LL_RCC_IsActiveFlag_C2HPRE>
 8004d20:	4603      	mov	r3, r0
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d0f1      	beq.n	8004d0a <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d016      	beq.n	8004d60 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	699b      	ldr	r3, [r3, #24]
 8004d36:	4618      	mov	r0, r3
 8004d38:	f7ff faf0 	bl	800431c <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004d3c:	f7fd fe08 	bl	8002950 <HAL_GetTick>
 8004d40:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8004d42:	e008      	b.n	8004d56 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004d44:	f7fd fe04 	bl	8002950 <HAL_GetTick>
 8004d48:	4602      	mov	r2, r0
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	1ad3      	subs	r3, r2, r3
 8004d4e:	2b02      	cmp	r3, #2
 8004d50:	d901      	bls.n	8004d56 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8004d52:	2303      	movs	r3, #3
 8004d54:	e0b7      	b.n	8004ec6 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8004d56:	f7ff fbc8 	bl	80044ea <LL_RCC_IsActiveFlag_SHDHPRE>
 8004d5a:	4603      	mov	r3, r0
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d0f1      	beq.n	8004d44 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f003 0304 	and.w	r3, r3, #4
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d016      	beq.n	8004d9a <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	68db      	ldr	r3, [r3, #12]
 8004d70:	4618      	mov	r0, r3
 8004d72:	f7ff fae9 	bl	8004348 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004d76:	f7fd fdeb 	bl	8002950 <HAL_GetTick>
 8004d7a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004d7c:	e008      	b.n	8004d90 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004d7e:	f7fd fde7 	bl	8002950 <HAL_GetTick>
 8004d82:	4602      	mov	r2, r0
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	1ad3      	subs	r3, r2, r3
 8004d88:	2b02      	cmp	r3, #2
 8004d8a:	d901      	bls.n	8004d90 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8004d8c:	2303      	movs	r3, #3
 8004d8e:	e09a      	b.n	8004ec6 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004d90:	f7ff fbbd 	bl	800450e <LL_RCC_IsActiveFlag_PPRE1>
 8004d94:	4603      	mov	r3, r0
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d0f1      	beq.n	8004d7e <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f003 0308 	and.w	r3, r3, #8
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d017      	beq.n	8004dd6 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	691b      	ldr	r3, [r3, #16]
 8004daa:	00db      	lsls	r3, r3, #3
 8004dac:	4618      	mov	r0, r3
 8004dae:	f7ff fade 	bl	800436e <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004db2:	f7fd fdcd 	bl	8002950 <HAL_GetTick>
 8004db6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004db8:	e008      	b.n	8004dcc <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004dba:	f7fd fdc9 	bl	8002950 <HAL_GetTick>
 8004dbe:	4602      	mov	r2, r0
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	1ad3      	subs	r3, r2, r3
 8004dc4:	2b02      	cmp	r3, #2
 8004dc6:	d901      	bls.n	8004dcc <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8004dc8:	2303      	movs	r3, #3
 8004dca:	e07c      	b.n	8004ec6 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004dcc:	f7ff fbb0 	bl	8004530 <LL_RCC_IsActiveFlag_PPRE2>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d0f1      	beq.n	8004dba <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f003 0301 	and.w	r3, r3, #1
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d043      	beq.n	8004e6a <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	2b02      	cmp	r3, #2
 8004de8:	d106      	bne.n	8004df8 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8004dea:	f7ff f956 	bl	800409a <LL_RCC_HSE_IsReady>
 8004dee:	4603      	mov	r3, r0
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d11e      	bne.n	8004e32 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004df4:	2301      	movs	r3, #1
 8004df6:	e066      	b.n	8004ec6 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	2b03      	cmp	r3, #3
 8004dfe:	d106      	bne.n	8004e0e <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8004e00:	f7ff fb12 	bl	8004428 <LL_RCC_PLL_IsReady>
 8004e04:	4603      	mov	r3, r0
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d113      	bne.n	8004e32 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	e05b      	b.n	8004ec6 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d106      	bne.n	8004e24 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8004e16:	f7ff f9f0 	bl	80041fa <LL_RCC_MSI_IsReady>
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d108      	bne.n	8004e32 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004e20:	2301      	movs	r3, #1
 8004e22:	e050      	b.n	8004ec6 <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8004e24:	f7ff f966 	bl	80040f4 <LL_RCC_HSI_IsReady>
 8004e28:	4603      	mov	r3, r0
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d101      	bne.n	8004e32 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	e049      	b.n	8004ec6 <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	685b      	ldr	r3, [r3, #4]
 8004e36:	4618      	mov	r0, r3
 8004e38:	f7ff fa2a 	bl	8004290 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004e3c:	f7fd fd88 	bl	8002950 <HAL_GetTick>
 8004e40:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e42:	e00a      	b.n	8004e5a <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e44:	f7fd fd84 	bl	8002950 <HAL_GetTick>
 8004e48:	4602      	mov	r2, r0
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	1ad3      	subs	r3, r2, r3
 8004e4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d901      	bls.n	8004e5a <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8004e56:	2303      	movs	r3, #3
 8004e58:	e035      	b.n	8004ec6 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e5a:	f7ff fa2c 	bl	80042b6 <LL_RCC_GetSysClkSource>
 8004e5e:	4602      	mov	r2, r0
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	685b      	ldr	r3, [r3, #4]
 8004e64:	009b      	lsls	r3, r3, #2
 8004e66:	429a      	cmp	r2, r3
 8004e68:	d1ec      	bne.n	8004e44 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004e6a:	4b19      	ldr	r3, [pc, #100]	; (8004ed0 <HAL_RCC_ClockConfig+0x278>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f003 0307 	and.w	r3, r3, #7
 8004e72:	683a      	ldr	r2, [r7, #0]
 8004e74:	429a      	cmp	r2, r3
 8004e76:	d21b      	bcs.n	8004eb0 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e78:	4b15      	ldr	r3, [pc, #84]	; (8004ed0 <HAL_RCC_ClockConfig+0x278>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f023 0207 	bic.w	r2, r3, #7
 8004e80:	4913      	ldr	r1, [pc, #76]	; (8004ed0 <HAL_RCC_ClockConfig+0x278>)
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	4313      	orrs	r3, r2
 8004e86:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004e88:	f7fd fd62 	bl	8002950 <HAL_GetTick>
 8004e8c:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e8e:	e008      	b.n	8004ea2 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004e90:	f7fd fd5e 	bl	8002950 <HAL_GetTick>
 8004e94:	4602      	mov	r2, r0
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	1ad3      	subs	r3, r2, r3
 8004e9a:	2b02      	cmp	r3, #2
 8004e9c:	d901      	bls.n	8004ea2 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8004e9e:	2303      	movs	r3, #3
 8004ea0:	e011      	b.n	8004ec6 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ea2:	4b0b      	ldr	r3, [pc, #44]	; (8004ed0 <HAL_RCC_ClockConfig+0x278>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f003 0307 	and.w	r3, r3, #7
 8004eaa:	683a      	ldr	r2, [r7, #0]
 8004eac:	429a      	cmp	r2, r3
 8004eae:	d1ef      	bne.n	8004e90 <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004eb0:	f000 f8b4 	bl	800501c <HAL_RCC_GetHCLKFreq>
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	4a07      	ldr	r2, [pc, #28]	; (8004ed4 <HAL_RCC_ClockConfig+0x27c>)
 8004eb8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 8004eba:	4b07      	ldr	r3, [pc, #28]	; (8004ed8 <HAL_RCC_ClockConfig+0x280>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	f7fe fa24 	bl	800330c <HAL_InitTick>
 8004ec4:	4603      	mov	r3, r0
}
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	3710      	adds	r7, #16
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bd80      	pop	{r7, pc}
 8004ece:	bf00      	nop
 8004ed0:	58004000 	.word	0x58004000
 8004ed4:	2000000c 	.word	0x2000000c
 8004ed8:	20000010 	.word	0x20000010

08004edc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004edc:	b590      	push	{r4, r7, lr}
 8004ede:	b087      	sub	sp, #28
 8004ee0:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004eea:	f7ff f9e4 	bl	80042b6 <LL_RCC_GetSysClkSource>
 8004eee:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004ef0:	f7ff facd 	bl	800448e <LL_RCC_PLL_GetMainSource>
 8004ef4:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d005      	beq.n	8004f08 <HAL_RCC_GetSysClockFreq+0x2c>
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	2b0c      	cmp	r3, #12
 8004f00:	d139      	bne.n	8004f76 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2b01      	cmp	r3, #1
 8004f06:	d136      	bne.n	8004f76 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8004f08:	f7ff f987 	bl	800421a <LL_RCC_MSI_IsEnabledRangeSelect>
 8004f0c:	4603      	mov	r3, r0
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d115      	bne.n	8004f3e <HAL_RCC_GetSysClockFreq+0x62>
 8004f12:	f7ff f982 	bl	800421a <LL_RCC_MSI_IsEnabledRangeSelect>
 8004f16:	4603      	mov	r3, r0
 8004f18:	2b01      	cmp	r3, #1
 8004f1a:	d106      	bne.n	8004f2a <HAL_RCC_GetSysClockFreq+0x4e>
 8004f1c:	f7ff f98d 	bl	800423a <LL_RCC_MSI_GetRange>
 8004f20:	4603      	mov	r3, r0
 8004f22:	0a1b      	lsrs	r3, r3, #8
 8004f24:	f003 030f 	and.w	r3, r3, #15
 8004f28:	e005      	b.n	8004f36 <HAL_RCC_GetSysClockFreq+0x5a>
 8004f2a:	f7ff f991 	bl	8004250 <LL_RCC_MSI_GetRangeAfterStandby>
 8004f2e:	4603      	mov	r3, r0
 8004f30:	0a1b      	lsrs	r3, r3, #8
 8004f32:	f003 030f 	and.w	r3, r3, #15
 8004f36:	4a36      	ldr	r2, [pc, #216]	; (8005010 <HAL_RCC_GetSysClockFreq+0x134>)
 8004f38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f3c:	e014      	b.n	8004f68 <HAL_RCC_GetSysClockFreq+0x8c>
 8004f3e:	f7ff f96c 	bl	800421a <LL_RCC_MSI_IsEnabledRangeSelect>
 8004f42:	4603      	mov	r3, r0
 8004f44:	2b01      	cmp	r3, #1
 8004f46:	d106      	bne.n	8004f56 <HAL_RCC_GetSysClockFreq+0x7a>
 8004f48:	f7ff f977 	bl	800423a <LL_RCC_MSI_GetRange>
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	091b      	lsrs	r3, r3, #4
 8004f50:	f003 030f 	and.w	r3, r3, #15
 8004f54:	e005      	b.n	8004f62 <HAL_RCC_GetSysClockFreq+0x86>
 8004f56:	f7ff f97b 	bl	8004250 <LL_RCC_MSI_GetRangeAfterStandby>
 8004f5a:	4603      	mov	r3, r0
 8004f5c:	091b      	lsrs	r3, r3, #4
 8004f5e:	f003 030f 	and.w	r3, r3, #15
 8004f62:	4a2b      	ldr	r2, [pc, #172]	; (8005010 <HAL_RCC_GetSysClockFreq+0x134>)
 8004f64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f68:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004f6a:	68bb      	ldr	r3, [r7, #8]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d115      	bne.n	8004f9c <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8004f70:	693b      	ldr	r3, [r7, #16]
 8004f72:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004f74:	e012      	b.n	8004f9c <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004f76:	68bb      	ldr	r3, [r7, #8]
 8004f78:	2b04      	cmp	r3, #4
 8004f7a:	d102      	bne.n	8004f82 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004f7c:	4b25      	ldr	r3, [pc, #148]	; (8005014 <HAL_RCC_GetSysClockFreq+0x138>)
 8004f7e:	617b      	str	r3, [r7, #20]
 8004f80:	e00c      	b.n	8004f9c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004f82:	68bb      	ldr	r3, [r7, #8]
 8004f84:	2b08      	cmp	r3, #8
 8004f86:	d109      	bne.n	8004f9c <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8004f88:	f7ff f85a 	bl	8004040 <LL_RCC_HSE_IsEnabledDiv2>
 8004f8c:	4603      	mov	r3, r0
 8004f8e:	2b01      	cmp	r3, #1
 8004f90:	d102      	bne.n	8004f98 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8004f92:	4b20      	ldr	r3, [pc, #128]	; (8005014 <HAL_RCC_GetSysClockFreq+0x138>)
 8004f94:	617b      	str	r3, [r7, #20]
 8004f96:	e001      	b.n	8004f9c <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8004f98:	4b1f      	ldr	r3, [pc, #124]	; (8005018 <HAL_RCC_GetSysClockFreq+0x13c>)
 8004f9a:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004f9c:	f7ff f98b 	bl	80042b6 <LL_RCC_GetSysClkSource>
 8004fa0:	4603      	mov	r3, r0
 8004fa2:	2b0c      	cmp	r3, #12
 8004fa4:	d12f      	bne.n	8005006 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8004fa6:	f7ff fa72 	bl	800448e <LL_RCC_PLL_GetMainSource>
 8004faa:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2b02      	cmp	r3, #2
 8004fb0:	d003      	beq.n	8004fba <HAL_RCC_GetSysClockFreq+0xde>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2b03      	cmp	r3, #3
 8004fb6:	d003      	beq.n	8004fc0 <HAL_RCC_GetSysClockFreq+0xe4>
 8004fb8:	e00d      	b.n	8004fd6 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8004fba:	4b16      	ldr	r3, [pc, #88]	; (8005014 <HAL_RCC_GetSysClockFreq+0x138>)
 8004fbc:	60fb      	str	r3, [r7, #12]
        break;
 8004fbe:	e00d      	b.n	8004fdc <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8004fc0:	f7ff f83e 	bl	8004040 <LL_RCC_HSE_IsEnabledDiv2>
 8004fc4:	4603      	mov	r3, r0
 8004fc6:	2b01      	cmp	r3, #1
 8004fc8:	d102      	bne.n	8004fd0 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8004fca:	4b12      	ldr	r3, [pc, #72]	; (8005014 <HAL_RCC_GetSysClockFreq+0x138>)
 8004fcc:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8004fce:	e005      	b.n	8004fdc <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8004fd0:	4b11      	ldr	r3, [pc, #68]	; (8005018 <HAL_RCC_GetSysClockFreq+0x13c>)
 8004fd2:	60fb      	str	r3, [r7, #12]
        break;
 8004fd4:	e002      	b.n	8004fdc <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8004fd6:	693b      	ldr	r3, [r7, #16]
 8004fd8:	60fb      	str	r3, [r7, #12]
        break;
 8004fda:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8004fdc:	f7ff fa35 	bl	800444a <LL_RCC_PLL_GetN>
 8004fe0:	4602      	mov	r2, r0
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	fb03 f402 	mul.w	r4, r3, r2
 8004fe8:	f7ff fa46 	bl	8004478 <LL_RCC_PLL_GetDivider>
 8004fec:	4603      	mov	r3, r0
 8004fee:	091b      	lsrs	r3, r3, #4
 8004ff0:	3301      	adds	r3, #1
 8004ff2:	fbb4 f4f3 	udiv	r4, r4, r3
 8004ff6:	f7ff fa34 	bl	8004462 <LL_RCC_PLL_GetR>
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	0f5b      	lsrs	r3, r3, #29
 8004ffe:	3301      	adds	r3, #1
 8005000:	fbb4 f3f3 	udiv	r3, r4, r3
 8005004:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8005006:	697b      	ldr	r3, [r7, #20]
}
 8005008:	4618      	mov	r0, r3
 800500a:	371c      	adds	r7, #28
 800500c:	46bd      	mov	sp, r7
 800500e:	bd90      	pop	{r4, r7, pc}
 8005010:	0800cc0c 	.word	0x0800cc0c
 8005014:	00f42400 	.word	0x00f42400
 8005018:	01e84800 	.word	0x01e84800

0800501c <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800501c:	b598      	push	{r3, r4, r7, lr}
 800501e:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8005020:	f7ff ff5c 	bl	8004edc <HAL_RCC_GetSysClockFreq>
 8005024:	4604      	mov	r4, r0
 8005026:	f7ff f9b5 	bl	8004394 <LL_RCC_GetAHBPrescaler>
 800502a:	4603      	mov	r3, r0
 800502c:	091b      	lsrs	r3, r3, #4
 800502e:	f003 030f 	and.w	r3, r3, #15
 8005032:	4a03      	ldr	r2, [pc, #12]	; (8005040 <HAL_RCC_GetHCLKFreq+0x24>)
 8005034:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005038:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800503c:	4618      	mov	r0, r3
 800503e:	bd98      	pop	{r3, r4, r7, pc}
 8005040:	0800cbac 	.word	0x0800cbac

08005044 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005044:	b598      	push	{r3, r4, r7, lr}
 8005046:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8005048:	f7ff ffe8 	bl	800501c <HAL_RCC_GetHCLKFreq>
 800504c:	4604      	mov	r4, r0
 800504e:	f7ff f9b9 	bl	80043c4 <LL_RCC_GetAPB1Prescaler>
 8005052:	4603      	mov	r3, r0
 8005054:	0a1b      	lsrs	r3, r3, #8
 8005056:	4a03      	ldr	r2, [pc, #12]	; (8005064 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005058:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800505c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8005060:	4618      	mov	r0, r3
 8005062:	bd98      	pop	{r3, r4, r7, pc}
 8005064:	0800cbec 	.word	0x0800cbec

08005068 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005068:	b598      	push	{r3, r4, r7, lr}
 800506a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 800506c:	f7ff ffd6 	bl	800501c <HAL_RCC_GetHCLKFreq>
 8005070:	4604      	mov	r4, r0
 8005072:	f7ff f9b2 	bl	80043da <LL_RCC_GetAPB2Prescaler>
 8005076:	4603      	mov	r3, r0
 8005078:	0adb      	lsrs	r3, r3, #11
 800507a:	4a03      	ldr	r2, [pc, #12]	; (8005088 <HAL_RCC_GetPCLK2Freq+0x20>)
 800507c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005080:	fa24 f303 	lsr.w	r3, r4, r3
}
 8005084:	4618      	mov	r0, r3
 8005086:	bd98      	pop	{r3, r4, r7, pc}
 8005088:	0800cbec 	.word	0x0800cbec

0800508c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 800508c:	b590      	push	{r4, r7, lr}
 800508e:	b085      	sub	sp, #20
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	091b      	lsrs	r3, r3, #4
 8005098:	f003 030f 	and.w	r3, r3, #15
 800509c:	4a10      	ldr	r2, [pc, #64]	; (80050e0 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 800509e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050a2:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 80050a4:	f7ff f981 	bl	80043aa <LL_RCC_GetAHB3Prescaler>
 80050a8:	4603      	mov	r3, r0
 80050aa:	091b      	lsrs	r3, r3, #4
 80050ac:	f003 030f 	and.w	r3, r3, #15
 80050b0:	4a0c      	ldr	r2, [pc, #48]	; (80050e4 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 80050b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050b6:	68fa      	ldr	r2, [r7, #12]
 80050b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80050bc:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80050be:	68bb      	ldr	r3, [r7, #8]
 80050c0:	4a09      	ldr	r2, [pc, #36]	; (80050e8 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 80050c2:	fba2 2303 	umull	r2, r3, r2, r3
 80050c6:	0c9c      	lsrs	r4, r3, #18
 80050c8:	f7fe ff80 	bl	8003fcc <HAL_PWREx_GetVoltageRange>
 80050cc:	4603      	mov	r3, r0
 80050ce:	4619      	mov	r1, r3
 80050d0:	4620      	mov	r0, r4
 80050d2:	f000 f80b 	bl	80050ec <RCC_SetFlashLatency>
 80050d6:	4603      	mov	r3, r0
}
 80050d8:	4618      	mov	r0, r3
 80050da:	3714      	adds	r7, #20
 80050dc:	46bd      	mov	sp, r7
 80050de:	bd90      	pop	{r4, r7, pc}
 80050e0:	0800cc0c 	.word	0x0800cc0c
 80050e4:	0800cbac 	.word	0x0800cbac
 80050e8:	431bde83 	.word	0x431bde83

080050ec <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b08e      	sub	sp, #56	; 0x38
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
 80050f4:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 80050f6:	4a3a      	ldr	r2, [pc, #232]	; (80051e0 <RCC_SetFlashLatency+0xf4>)
 80050f8:	f107 0320 	add.w	r3, r7, #32
 80050fc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005100:	6018      	str	r0, [r3, #0]
 8005102:	3304      	adds	r3, #4
 8005104:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8005106:	4a37      	ldr	r2, [pc, #220]	; (80051e4 <RCC_SetFlashLatency+0xf8>)
 8005108:	f107 0318 	add.w	r3, r7, #24
 800510c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005110:	6018      	str	r0, [r3, #0]
 8005112:	3304      	adds	r3, #4
 8005114:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8005116:	4a34      	ldr	r2, [pc, #208]	; (80051e8 <RCC_SetFlashLatency+0xfc>)
 8005118:	f107 030c 	add.w	r3, r7, #12
 800511c:	ca07      	ldmia	r2, {r0, r1, r2}
 800511e:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8005122:	2300      	movs	r3, #0
 8005124:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800512c:	d11b      	bne.n	8005166 <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800512e:	2300      	movs	r3, #0
 8005130:	633b      	str	r3, [r7, #48]	; 0x30
 8005132:	e014      	b.n	800515e <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8005134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005136:	005b      	lsls	r3, r3, #1
 8005138:	3338      	adds	r3, #56	; 0x38
 800513a:	443b      	add	r3, r7
 800513c:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8005140:	461a      	mov	r2, r3
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	4293      	cmp	r3, r2
 8005146:	d807      	bhi.n	8005158 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8005148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800514a:	009b      	lsls	r3, r3, #2
 800514c:	3338      	adds	r3, #56	; 0x38
 800514e:	443b      	add	r3, r7
 8005150:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8005154:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005156:	e021      	b.n	800519c <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800515a:	3301      	adds	r3, #1
 800515c:	633b      	str	r3, [r7, #48]	; 0x30
 800515e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005160:	2b02      	cmp	r3, #2
 8005162:	d9e7      	bls.n	8005134 <RCC_SetFlashLatency+0x48>
 8005164:	e01a      	b.n	800519c <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005166:	2300      	movs	r3, #0
 8005168:	62fb      	str	r3, [r7, #44]	; 0x2c
 800516a:	e014      	b.n	8005196 <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800516c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800516e:	005b      	lsls	r3, r3, #1
 8005170:	3338      	adds	r3, #56	; 0x38
 8005172:	443b      	add	r3, r7
 8005174:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8005178:	461a      	mov	r2, r3
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	4293      	cmp	r3, r2
 800517e:	d807      	bhi.n	8005190 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8005180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005182:	009b      	lsls	r3, r3, #2
 8005184:	3338      	adds	r3, #56	; 0x38
 8005186:	443b      	add	r3, r7
 8005188:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800518c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800518e:	e005      	b.n	800519c <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005192:	3301      	adds	r3, #1
 8005194:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005198:	2b02      	cmp	r3, #2
 800519a:	d9e7      	bls.n	800516c <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800519c:	4b13      	ldr	r3, [pc, #76]	; (80051ec <RCC_SetFlashLatency+0x100>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f023 0207 	bic.w	r2, r3, #7
 80051a4:	4911      	ldr	r1, [pc, #68]	; (80051ec <RCC_SetFlashLatency+0x100>)
 80051a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051a8:	4313      	orrs	r3, r2
 80051aa:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80051ac:	f7fd fbd0 	bl	8002950 <HAL_GetTick>
 80051b0:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80051b2:	e008      	b.n	80051c6 <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80051b4:	f7fd fbcc 	bl	8002950 <HAL_GetTick>
 80051b8:	4602      	mov	r2, r0
 80051ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051bc:	1ad3      	subs	r3, r2, r3
 80051be:	2b02      	cmp	r3, #2
 80051c0:	d901      	bls.n	80051c6 <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 80051c2:	2303      	movs	r3, #3
 80051c4:	e007      	b.n	80051d6 <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80051c6:	4b09      	ldr	r3, [pc, #36]	; (80051ec <RCC_SetFlashLatency+0x100>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f003 0307 	and.w	r3, r3, #7
 80051ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80051d0:	429a      	cmp	r2, r3
 80051d2:	d1ef      	bne.n	80051b4 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 80051d4:	2300      	movs	r3, #0
}
 80051d6:	4618      	mov	r0, r3
 80051d8:	3738      	adds	r7, #56	; 0x38
 80051da:	46bd      	mov	sp, r7
 80051dc:	bd80      	pop	{r7, pc}
 80051de:	bf00      	nop
 80051e0:	0800cb6c 	.word	0x0800cb6c
 80051e4:	0800cb74 	.word	0x0800cb74
 80051e8:	0800cb7c 	.word	0x0800cb7c
 80051ec:	58004000 	.word	0x58004000

080051f0 <LL_RCC_LSE_IsReady>:
{
 80051f0:	b480      	push	{r7}
 80051f2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80051f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051fc:	f003 0302 	and.w	r3, r3, #2
 8005200:	2b02      	cmp	r3, #2
 8005202:	d101      	bne.n	8005208 <LL_RCC_LSE_IsReady+0x18>
 8005204:	2301      	movs	r3, #1
 8005206:	e000      	b.n	800520a <LL_RCC_LSE_IsReady+0x1a>
 8005208:	2300      	movs	r3, #0
}
 800520a:	4618      	mov	r0, r3
 800520c:	46bd      	mov	sp, r7
 800520e:	bc80      	pop	{r7}
 8005210:	4770      	bx	lr

08005212 <LL_RCC_SetUSARTClockSource>:
{
 8005212:	b480      	push	{r7}
 8005214:	b083      	sub	sp, #12
 8005216:	af00      	add	r7, sp, #0
 8005218:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 800521a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800521e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	0c1b      	lsrs	r3, r3, #16
 8005226:	43db      	mvns	r3, r3
 8005228:	401a      	ands	r2, r3
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	b29b      	uxth	r3, r3
 800522e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005232:	4313      	orrs	r3, r2
 8005234:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005238:	bf00      	nop
 800523a:	370c      	adds	r7, #12
 800523c:	46bd      	mov	sp, r7
 800523e:	bc80      	pop	{r7}
 8005240:	4770      	bx	lr

08005242 <LL_RCC_SetI2SClockSource>:
{
 8005242:	b480      	push	{r7}
 8005244:	b083      	sub	sp, #12
 8005246:	af00      	add	r7, sp, #0
 8005248:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 800524a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800524e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005252:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005256:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	4313      	orrs	r3, r2
 800525e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005262:	bf00      	nop
 8005264:	370c      	adds	r7, #12
 8005266:	46bd      	mov	sp, r7
 8005268:	bc80      	pop	{r7}
 800526a:	4770      	bx	lr

0800526c <LL_RCC_SetLPUARTClockSource>:
{
 800526c:	b480      	push	{r7}
 800526e:	b083      	sub	sp, #12
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8005274:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005278:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800527c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005280:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	4313      	orrs	r3, r2
 8005288:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800528c:	bf00      	nop
 800528e:	370c      	adds	r7, #12
 8005290:	46bd      	mov	sp, r7
 8005292:	bc80      	pop	{r7}
 8005294:	4770      	bx	lr

08005296 <LL_RCC_SetI2CClockSource>:
{
 8005296:	b480      	push	{r7}
 8005298:	b083      	sub	sp, #12
 800529a:	af00      	add	r7, sp, #0
 800529c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800529e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052a2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	091b      	lsrs	r3, r3, #4
 80052aa:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80052ae:	43db      	mvns	r3, r3
 80052b0:	401a      	ands	r2, r3
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	011b      	lsls	r3, r3, #4
 80052b6:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80052ba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80052be:	4313      	orrs	r3, r2
 80052c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80052c4:	bf00      	nop
 80052c6:	370c      	adds	r7, #12
 80052c8:	46bd      	mov	sp, r7
 80052ca:	bc80      	pop	{r7}
 80052cc:	4770      	bx	lr

080052ce <LL_RCC_SetLPTIMClockSource>:
{
 80052ce:	b480      	push	{r7}
 80052d0:	b083      	sub	sp, #12
 80052d2:	af00      	add	r7, sp, #0
 80052d4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80052d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052da:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	0c1b      	lsrs	r3, r3, #16
 80052e2:	041b      	lsls	r3, r3, #16
 80052e4:	43db      	mvns	r3, r3
 80052e6:	401a      	ands	r2, r3
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	041b      	lsls	r3, r3, #16
 80052ec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80052f0:	4313      	orrs	r3, r2
 80052f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80052f6:	bf00      	nop
 80052f8:	370c      	adds	r7, #12
 80052fa:	46bd      	mov	sp, r7
 80052fc:	bc80      	pop	{r7}
 80052fe:	4770      	bx	lr

08005300 <LL_RCC_SetRNGClockSource>:
{
 8005300:	b480      	push	{r7}
 8005302:	b083      	sub	sp, #12
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8005308:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800530c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005310:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8005314:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	4313      	orrs	r3, r2
 800531c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005320:	bf00      	nop
 8005322:	370c      	adds	r7, #12
 8005324:	46bd      	mov	sp, r7
 8005326:	bc80      	pop	{r7}
 8005328:	4770      	bx	lr

0800532a <LL_RCC_SetADCClockSource>:
{
 800532a:	b480      	push	{r7}
 800532c:	b083      	sub	sp, #12
 800532e:	af00      	add	r7, sp, #0
 8005330:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8005332:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005336:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800533a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800533e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	4313      	orrs	r3, r2
 8005346:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800534a:	bf00      	nop
 800534c:	370c      	adds	r7, #12
 800534e:	46bd      	mov	sp, r7
 8005350:	bc80      	pop	{r7}
 8005352:	4770      	bx	lr

08005354 <LL_RCC_SetRTCClockSource>:
{
 8005354:	b480      	push	{r7}
 8005356:	b083      	sub	sp, #12
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800535c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005360:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005364:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005368:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	4313      	orrs	r3, r2
 8005370:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8005374:	bf00      	nop
 8005376:	370c      	adds	r7, #12
 8005378:	46bd      	mov	sp, r7
 800537a:	bc80      	pop	{r7}
 800537c:	4770      	bx	lr

0800537e <LL_RCC_GetRTCClockSource>:
{
 800537e:	b480      	push	{r7}
 8005380:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8005382:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005386:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800538a:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 800538e:	4618      	mov	r0, r3
 8005390:	46bd      	mov	sp, r7
 8005392:	bc80      	pop	{r7}
 8005394:	4770      	bx	lr

08005396 <LL_RCC_ForceBackupDomainReset>:
{
 8005396:	b480      	push	{r7}
 8005398:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800539a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800539e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053a2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80053a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80053ae:	bf00      	nop
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bc80      	pop	{r7}
 80053b4:	4770      	bx	lr

080053b6 <LL_RCC_ReleaseBackupDomainReset>:
{
 80053b6:	b480      	push	{r7}
 80053b8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80053ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053c2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80053c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80053ce:	bf00      	nop
 80053d0:	46bd      	mov	sp, r7
 80053d2:	bc80      	pop	{r7}
 80053d4:	4770      	bx	lr
	...

080053d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b086      	sub	sp, #24
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 80053e0:	2300      	movs	r3, #0
 80053e2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 80053e4:	2300      	movs	r3, #0
 80053e6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80053e8:	2300      	movs	r3, #0
 80053ea:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d058      	beq.n	80054aa <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 80053f8:	f7fe fdda 	bl	8003fb0 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80053fc:	f7fd faa8 	bl	8002950 <HAL_GetTick>
 8005400:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8005402:	e009      	b.n	8005418 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005404:	f7fd faa4 	bl	8002950 <HAL_GetTick>
 8005408:	4602      	mov	r2, r0
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	1ad3      	subs	r3, r2, r3
 800540e:	2b02      	cmp	r3, #2
 8005410:	d902      	bls.n	8005418 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8005412:	2303      	movs	r3, #3
 8005414:	74fb      	strb	r3, [r7, #19]
        break;
 8005416:	e006      	b.n	8005426 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8005418:	4b7b      	ldr	r3, [pc, #492]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005420:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005424:	d1ee      	bne.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8005426:	7cfb      	ldrb	r3, [r7, #19]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d13c      	bne.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 800542c:	f7ff ffa7 	bl	800537e <LL_RCC_GetRTCClockSource>
 8005430:	4602      	mov	r2, r0
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005436:	429a      	cmp	r2, r3
 8005438:	d00f      	beq.n	800545a <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800543a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800543e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005442:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005446:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005448:	f7ff ffa5 	bl	8005396 <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 800544c:	f7ff ffb3 	bl	80053b6 <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005450:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005454:	697b      	ldr	r3, [r7, #20]
 8005456:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 800545a:	697b      	ldr	r3, [r7, #20]
 800545c:	f003 0302 	and.w	r3, r3, #2
 8005460:	2b00      	cmp	r3, #0
 8005462:	d014      	beq.n	800548e <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005464:	f7fd fa74 	bl	8002950 <HAL_GetTick>
 8005468:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 800546a:	e00b      	b.n	8005484 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800546c:	f7fd fa70 	bl	8002950 <HAL_GetTick>
 8005470:	4602      	mov	r2, r0
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	1ad3      	subs	r3, r2, r3
 8005476:	f241 3288 	movw	r2, #5000	; 0x1388
 800547a:	4293      	cmp	r3, r2
 800547c:	d902      	bls.n	8005484 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 800547e:	2303      	movs	r3, #3
 8005480:	74fb      	strb	r3, [r7, #19]
            break;
 8005482:	e004      	b.n	800548e <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8005484:	f7ff feb4 	bl	80051f0 <LL_RCC_LSE_IsReady>
 8005488:	4603      	mov	r3, r0
 800548a:	2b01      	cmp	r3, #1
 800548c:	d1ee      	bne.n	800546c <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 800548e:	7cfb      	ldrb	r3, [r7, #19]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d105      	bne.n	80054a0 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005498:	4618      	mov	r0, r3
 800549a:	f7ff ff5b 	bl	8005354 <LL_RCC_SetRTCClockSource>
 800549e:	e004      	b.n	80054aa <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80054a0:	7cfb      	ldrb	r3, [r7, #19]
 80054a2:	74bb      	strb	r3, [r7, #18]
 80054a4:	e001      	b.n	80054aa <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054a6:	7cfb      	ldrb	r3, [r7, #19]
 80054a8:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f003 0301 	and.w	r3, r3, #1
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d004      	beq.n	80054c0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	685b      	ldr	r3, [r3, #4]
 80054ba:	4618      	mov	r0, r3
 80054bc:	f7ff fea9 	bl	8005212 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f003 0302 	and.w	r3, r3, #2
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d004      	beq.n	80054d6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	689b      	ldr	r3, [r3, #8]
 80054d0:	4618      	mov	r0, r3
 80054d2:	f7ff fe9e 	bl	8005212 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f003 0320 	and.w	r3, r3, #32
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d004      	beq.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	691b      	ldr	r3, [r3, #16]
 80054e6:	4618      	mov	r0, r3
 80054e8:	f7ff fec0 	bl	800526c <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d004      	beq.n	8005502 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6a1b      	ldr	r3, [r3, #32]
 80054fc:	4618      	mov	r0, r3
 80054fe:	f7ff fee6 	bl	80052ce <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800550a:	2b00      	cmp	r3, #0
 800550c:	d004      	beq.n	8005518 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005512:	4618      	mov	r0, r3
 8005514:	f7ff fedb 	bl	80052ce <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005520:	2b00      	cmp	r3, #0
 8005522:	d004      	beq.n	800552e <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005528:	4618      	mov	r0, r3
 800552a:	f7ff fed0 	bl	80052ce <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005536:	2b00      	cmp	r3, #0
 8005538:	d004      	beq.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	695b      	ldr	r3, [r3, #20]
 800553e:	4618      	mov	r0, r3
 8005540:	f7ff fea9 	bl	8005296 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800554c:	2b00      	cmp	r3, #0
 800554e:	d004      	beq.n	800555a <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	699b      	ldr	r3, [r3, #24]
 8005554:	4618      	mov	r0, r3
 8005556:	f7ff fe9e 	bl	8005296 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005562:	2b00      	cmp	r3, #0
 8005564:	d004      	beq.n	8005570 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	69db      	ldr	r3, [r3, #28]
 800556a:	4618      	mov	r0, r3
 800556c:	f7ff fe93 	bl	8005296 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f003 0310 	and.w	r3, r3, #16
 8005578:	2b00      	cmp	r3, #0
 800557a:	d011      	beq.n	80055a0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	68db      	ldr	r3, [r3, #12]
 8005580:	4618      	mov	r0, r3
 8005582:	f7ff fe5e 	bl	8005242 <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	68db      	ldr	r3, [r3, #12]
 800558a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800558e:	d107      	bne.n	80055a0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8005590:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005594:	68db      	ldr	r3, [r3, #12]
 8005596:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800559a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800559e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d010      	beq.n	80055ce <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055b0:	4618      	mov	r0, r3
 80055b2:	f7ff fea5 	bl	8005300 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d107      	bne.n	80055ce <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80055be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055c2:	68db      	ldr	r3, [r3, #12]
 80055c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80055c8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80055cc:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d011      	beq.n	80055fe <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055de:	4618      	mov	r0, r3
 80055e0:	f7ff fea3 	bl	800532a <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80055ec:	d107      	bne.n	80055fe <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80055ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055f2:	68db      	ldr	r3, [r3, #12]
 80055f4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80055f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055fc:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 80055fe:	7cbb      	ldrb	r3, [r7, #18]
}
 8005600:	4618      	mov	r0, r3
 8005602:	3718      	adds	r7, #24
 8005604:	46bd      	mov	sp, r7
 8005606:	bd80      	pop	{r7, pc}
 8005608:	58000400 	.word	0x58000400

0800560c <LL_PWR_SetRadioBusyTrigger>:
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_NONE
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_WU_IT
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRadioBusyTrigger(uint32_t RadioBusyTrigger)
{
 800560c:	b480      	push	{r7}
 800560e:	b083      	sub	sp, #12
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 8005614:	4b06      	ldr	r3, [pc, #24]	; (8005630 <LL_PWR_SetRadioBusyTrigger+0x24>)
 8005616:	689b      	ldr	r3, [r3, #8]
 8005618:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800561c:	4904      	ldr	r1, [pc, #16]	; (8005630 <LL_PWR_SetRadioBusyTrigger+0x24>)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	4313      	orrs	r3, r2
 8005622:	608b      	str	r3, [r1, #8]
}
 8005624:	bf00      	nop
 8005626:	370c      	adds	r7, #12
 8005628:	46bd      	mov	sp, r7
 800562a:	bc80      	pop	{r7}
 800562c:	4770      	bx	lr
 800562e:	bf00      	nop
 8005630:	58000400 	.word	0x58000400

08005634 <LL_PWR_UnselectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level high.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_UnselectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_UnselectSUBGHZSPI_NSS(void)
{
 8005634:	b480      	push	{r7}
 8005636:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8005638:	4b05      	ldr	r3, [pc, #20]	; (8005650 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 800563a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800563e:	4a04      	ldr	r2, [pc, #16]	; (8005650 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8005640:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005644:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005648:	bf00      	nop
 800564a:	46bd      	mov	sp, r7
 800564c:	bc80      	pop	{r7}
 800564e:	4770      	bx	lr
 8005650:	58000400 	.word	0x58000400

08005654 <LL_PWR_SelectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level low.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_SelectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SelectSUBGHZSPI_NSS(void)
{
 8005654:	b480      	push	{r7}
 8005656:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8005658:	4b05      	ldr	r3, [pc, #20]	; (8005670 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 800565a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800565e:	4a04      	ldr	r2, [pc, #16]	; (8005670 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8005660:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005664:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005668:	bf00      	nop
 800566a:	46bd      	mov	sp, r7
 800566c:	bc80      	pop	{r7}
 800566e:	4770      	bx	lr
 8005670:	58000400 	.word	0x58000400

08005674 <LL_PWR_ClearFlag_RFBUSY>:
  * @brief  Clear radio busy flag
  * @rmtoll SCR          CRFBUSYF      LL_PWR_ClearFlag_RFBUSY
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_RFBUSY(void)
{
 8005674:	b480      	push	{r7}
 8005676:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8005678:	4b03      	ldr	r3, [pc, #12]	; (8005688 <LL_PWR_ClearFlag_RFBUSY+0x14>)
 800567a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800567e:	619a      	str	r2, [r3, #24]
}
 8005680:	bf00      	nop
 8005682:	46bd      	mov	sp, r7
 8005684:	bc80      	pop	{r7}
 8005686:	4770      	bx	lr
 8005688:	58000400 	.word	0x58000400

0800568c <LL_PWR_IsActiveFlag_RFBUSYS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYS       LL_PWR_IsActiveFlag_RFBUSYS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYS(void)
{
 800568c:	b480      	push	{r7}
 800568e:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8005690:	4b06      	ldr	r3, [pc, #24]	; (80056ac <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 8005692:	695b      	ldr	r3, [r3, #20]
 8005694:	f003 0302 	and.w	r3, r3, #2
 8005698:	2b02      	cmp	r3, #2
 800569a:	d101      	bne.n	80056a0 <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 800569c:	2301      	movs	r3, #1
 800569e:	e000      	b.n	80056a2 <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 80056a0:	2300      	movs	r3, #0
}
 80056a2:	4618      	mov	r0, r3
 80056a4:	46bd      	mov	sp, r7
 80056a6:	bc80      	pop	{r7}
 80056a8:	4770      	bx	lr
 80056aa:	bf00      	nop
 80056ac:	58000400 	.word	0x58000400

080056b0 <LL_PWR_IsActiveFlag_RFBUSYMS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYMS      LL_PWR_IsActiveFlag_RFBUSYMS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYMS(void)
{
 80056b0:	b480      	push	{r7}
 80056b2:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 80056b4:	4b06      	ldr	r3, [pc, #24]	; (80056d0 <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 80056b6:	695b      	ldr	r3, [r3, #20]
 80056b8:	f003 0304 	and.w	r3, r3, #4
 80056bc:	2b04      	cmp	r3, #4
 80056be:	d101      	bne.n	80056c4 <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 80056c0:	2301      	movs	r3, #1
 80056c2:	e000      	b.n	80056c6 <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 80056c4:	2300      	movs	r3, #0
}
 80056c6:	4618      	mov	r0, r3
 80056c8:	46bd      	mov	sp, r7
 80056ca:	bc80      	pop	{r7}
 80056cc:	4770      	bx	lr
 80056ce:	bf00      	nop
 80056d0:	58000400 	.word	0x58000400

080056d4 <LL_RCC_RF_DisableReset>:
{
 80056d4:	b480      	push	{r7}
 80056d6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 80056d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80056e0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80056e4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80056e8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80056ec:	bf00      	nop
 80056ee:	46bd      	mov	sp, r7
 80056f0:	bc80      	pop	{r7}
 80056f2:	4770      	bx	lr

080056f4 <LL_RCC_IsRFUnderReset>:
{
 80056f4:	b480      	push	{r7}
 80056f6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 80056f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005700:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005704:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005708:	d101      	bne.n	800570e <LL_RCC_IsRFUnderReset+0x1a>
 800570a:	2301      	movs	r3, #1
 800570c:	e000      	b.n	8005710 <LL_RCC_IsRFUnderReset+0x1c>
 800570e:	2300      	movs	r3, #0
}
 8005710:	4618      	mov	r0, r3
 8005712:	46bd      	mov	sp, r7
 8005714:	bc80      	pop	{r7}
 8005716:	4770      	bx	lr

08005718 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8005718:	b480      	push	{r7}
 800571a:	b083      	sub	sp, #12
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8005720:	4b06      	ldr	r3, [pc, #24]	; (800573c <LL_EXTI_EnableIT_32_63+0x24>)
 8005722:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8005726:	4905      	ldr	r1, [pc, #20]	; (800573c <LL_EXTI_EnableIT_32_63+0x24>)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	4313      	orrs	r3, r2
 800572c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8005730:	bf00      	nop
 8005732:	370c      	adds	r7, #12
 8005734:	46bd      	mov	sp, r7
 8005736:	bc80      	pop	{r7}
 8005738:	4770      	bx	lr
 800573a:	bf00      	nop
 800573c:	58000800 	.word	0x58000800

08005740 <HAL_SUBGHZ_Init>:
  *         set the state to HAL_SUBGHZ_STATE_RESET_RF_READY with __HAL_SUBGHZ_RESET_HANDLE_STATE_RF_READY
  *         to avoid the reset of Radio peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b084      	sub	sp, #16
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  HAL_SUBGHZ_StateTypeDef subghz_state;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d103      	bne.n	8005756 <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 800574e:	2301      	movs	r3, #1
 8005750:	73fb      	strb	r3, [r7, #15]
    return status;
 8005752:	7bfb      	ldrb	r3, [r7, #15]
 8005754:	e052      	b.n	80057fc <HAL_SUBGHZ_Init+0xbc>
  }
  else
  {
    status = HAL_OK;
 8005756:	2300      	movs	r3, #0
 8005758:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  subghz_state = hsubghz->State;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	799b      	ldrb	r3, [r3, #6]
 800575e:	73bb      	strb	r3, [r7, #14]
  if ((subghz_state == HAL_SUBGHZ_STATE_RESET) ||
 8005760:	7bbb      	ldrb	r3, [r7, #14]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d002      	beq.n	800576c <HAL_SUBGHZ_Init+0x2c>
 8005766:	7bbb      	ldrb	r3, [r7, #14]
 8005768:	2b03      	cmp	r3, #3
 800576a:	d109      	bne.n	8005780 <HAL_SUBGHZ_Init+0x40>
      (subghz_state == HAL_SUBGHZ_STATE_RESET_RF_READY))
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2200      	movs	r2, #0
 8005770:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 8005772:	6878      	ldr	r0, [r7, #4]
 8005774:	f7fd f8d2 	bl	800291c <HAL_SUBGHZ_MspInit>
#if defined(CM0PLUS)
    /* Enable EXTI 44 : Radio IRQ ITs for CPU2 */
    LL_C2_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
#else
    /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
    LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 8005778:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800577c:	f7ff ffcc 	bl	8005718 <LL_EXTI_EnableIT_32_63>
#endif /* CM0PLUS */
  }

  if (subghz_state == HAL_SUBGHZ_STATE_RESET)
 8005780:	7bbb      	ldrb	r3, [r7, #14]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d126      	bne.n	80057d4 <HAL_SUBGHZ_Init+0x94>
  {
    /* Reinitialize Radio peripheral only if SUBGHZ is in full RESET state */
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2202      	movs	r2, #2
 800578a:	719a      	strb	r2, [r3, #6]

    /* De-asserts the reset signal of the Radio peripheral */
    LL_RCC_RF_DisableReset();
 800578c:	f7ff ffa2 	bl	80056d4 <LL_RCC_RF_DisableReset>

    /* Verify that Radio in reset status flag is set */
    count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8005790:	4b1c      	ldr	r3, [pc, #112]	; (8005804 <HAL_SUBGHZ_Init+0xc4>)
 8005792:	681a      	ldr	r2, [r3, #0]
 8005794:	4613      	mov	r3, r2
 8005796:	00db      	lsls	r3, r3, #3
 8005798:	1a9b      	subs	r3, r3, r2
 800579a:	009b      	lsls	r3, r3, #2
 800579c:	0cdb      	lsrs	r3, r3, #19
 800579e:	2264      	movs	r2, #100	; 0x64
 80057a0:	fb02 f303 	mul.w	r3, r2, r3
 80057a4:	60bb      	str	r3, [r7, #8]

    do
    {
      if (count == 0U)
 80057a6:	68bb      	ldr	r3, [r7, #8]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d105      	bne.n	80057b8 <HAL_SUBGHZ_Init+0x78>
      {
        status  = HAL_ERROR;
 80057ac:	2301      	movs	r3, #1
 80057ae:	73fb      	strb	r3, [r7, #15]
        hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2201      	movs	r2, #1
 80057b4:	609a      	str	r2, [r3, #8]
        break;
 80057b6:	e007      	b.n	80057c8 <HAL_SUBGHZ_Init+0x88>
      }
      count--;
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	3b01      	subs	r3, #1
 80057bc:	60bb      	str	r3, [r7, #8]
    } while (LL_RCC_IsRFUnderReset() != 0UL);
 80057be:	f7ff ff99 	bl	80056f4 <LL_RCC_IsRFUnderReset>
 80057c2:	4603      	mov	r3, r0
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d1ee      	bne.n	80057a6 <HAL_SUBGHZ_Init+0x66>

    /* Asserts the reset signal of the Radio peripheral */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80057c8:	f7ff ff34 	bl	8005634 <LL_PWR_UnselectSUBGHZSPI_NSS>
#if defined(CM0PLUS)
    /* Enable wakeup signal of the Radio peripheral */
    LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
    /* Enable wakeup signal of the Radio peripheral */
    LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 80057cc:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80057d0:	f7ff ff1c 	bl	800560c <LL_PWR_SetRadioBusyTrigger>
#endif /* CM0PLUS */
  }

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 80057d4:	f7ff ff4e 	bl	8005674 <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 80057d8:	7bfb      	ldrb	r3, [r7, #15]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d10a      	bne.n	80057f4 <HAL_SUBGHZ_Init+0xb4>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	4618      	mov	r0, r3
 80057e4:	f000 faac 	bl	8005d40 <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2201      	movs	r2, #1
 80057ec:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2200      	movs	r2, #0
 80057f2:	609a      	str	r2, [r3, #8]
  }

  hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2201      	movs	r2, #1
 80057f8:	719a      	strb	r2, [r3, #6]

  return status;
 80057fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80057fc:	4618      	mov	r0, r3
 80057fe:	3710      	adds	r7, #16
 8005800:	46bd      	mov	sp, r7
 8005802:	bd80      	pop	{r7, pc}
 8005804:	2000000c 	.word	0x2000000c

08005808 <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b086      	sub	sp, #24
 800580c:	af00      	add	r7, sp, #0
 800580e:	60f8      	str	r0, [r7, #12]
 8005810:	607a      	str	r2, [r7, #4]
 8005812:	461a      	mov	r2, r3
 8005814:	460b      	mov	r3, r1
 8005816:	817b      	strh	r3, [r7, #10]
 8005818:	4613      	mov	r3, r2
 800581a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	799b      	ldrb	r3, [r3, #6]
 8005820:	b2db      	uxtb	r3, r3
 8005822:	2b01      	cmp	r3, #1
 8005824:	d14a      	bne.n	80058bc <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	795b      	ldrb	r3, [r3, #5]
 800582a:	2b01      	cmp	r3, #1
 800582c:	d101      	bne.n	8005832 <HAL_SUBGHZ_WriteRegisters+0x2a>
 800582e:	2302      	movs	r3, #2
 8005830:	e045      	b.n	80058be <HAL_SUBGHZ_WriteRegisters+0xb6>
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	2201      	movs	r2, #1
 8005836:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	2202      	movs	r2, #2
 800583c:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800583e:	68f8      	ldr	r0, [r7, #12]
 8005840:	f000 fb4c 	bl	8005edc <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8005844:	f7ff ff06 	bl	8005654 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 8005848:	210d      	movs	r1, #13
 800584a:	68f8      	ldr	r0, [r7, #12]
 800584c:	f000 fa98 	bl	8005d80 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8005850:	897b      	ldrh	r3, [r7, #10]
 8005852:	0a1b      	lsrs	r3, r3, #8
 8005854:	b29b      	uxth	r3, r3
 8005856:	b2db      	uxtb	r3, r3
 8005858:	4619      	mov	r1, r3
 800585a:	68f8      	ldr	r0, [r7, #12]
 800585c:	f000 fa90 	bl	8005d80 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8005860:	897b      	ldrh	r3, [r7, #10]
 8005862:	b2db      	uxtb	r3, r3
 8005864:	4619      	mov	r1, r3
 8005866:	68f8      	ldr	r0, [r7, #12]
 8005868:	f000 fa8a 	bl	8005d80 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800586c:	2300      	movs	r3, #0
 800586e:	82bb      	strh	r3, [r7, #20]
 8005870:	e00a      	b.n	8005888 <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8005872:	8abb      	ldrh	r3, [r7, #20]
 8005874:	687a      	ldr	r2, [r7, #4]
 8005876:	4413      	add	r3, r2
 8005878:	781b      	ldrb	r3, [r3, #0]
 800587a:	4619      	mov	r1, r3
 800587c:	68f8      	ldr	r0, [r7, #12]
 800587e:	f000 fa7f 	bl	8005d80 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8005882:	8abb      	ldrh	r3, [r7, #20]
 8005884:	3301      	adds	r3, #1
 8005886:	82bb      	strh	r3, [r7, #20]
 8005888:	8aba      	ldrh	r2, [r7, #20]
 800588a:	893b      	ldrh	r3, [r7, #8]
 800588c:	429a      	cmp	r2, r3
 800588e:	d3f0      	bcc.n	8005872 <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8005890:	f7ff fed0 	bl	8005634 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8005894:	68f8      	ldr	r0, [r7, #12]
 8005896:	f000 fb45 	bl	8005f24 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	689b      	ldr	r3, [r3, #8]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d002      	beq.n	80058a8 <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 80058a2:	2301      	movs	r3, #1
 80058a4:	75fb      	strb	r3, [r7, #23]
 80058a6:	e001      	b.n	80058ac <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 80058a8:	2300      	movs	r3, #0
 80058aa:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	2201      	movs	r2, #1
 80058b0:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	2200      	movs	r2, #0
 80058b6:	715a      	strb	r2, [r3, #5]

    return status;
 80058b8:	7dfb      	ldrb	r3, [r7, #23]
 80058ba:	e000      	b.n	80058be <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 80058bc:	2302      	movs	r3, #2
  }
}
 80058be:	4618      	mov	r0, r3
 80058c0:	3718      	adds	r7, #24
 80058c2:	46bd      	mov	sp, r7
 80058c4:	bd80      	pop	{r7, pc}

080058c6 <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 80058c6:	b580      	push	{r7, lr}
 80058c8:	b088      	sub	sp, #32
 80058ca:	af00      	add	r7, sp, #0
 80058cc:	60f8      	str	r0, [r7, #12]
 80058ce:	607a      	str	r2, [r7, #4]
 80058d0:	461a      	mov	r2, r3
 80058d2:	460b      	mov	r3, r1
 80058d4:	817b      	strh	r3, [r7, #10]
 80058d6:	4613      	mov	r3, r2
 80058d8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	799b      	ldrb	r3, [r3, #6]
 80058e2:	b2db      	uxtb	r3, r3
 80058e4:	2b01      	cmp	r3, #1
 80058e6:	d14a      	bne.n	800597e <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	795b      	ldrb	r3, [r3, #5]
 80058ec:	2b01      	cmp	r3, #1
 80058ee:	d101      	bne.n	80058f4 <HAL_SUBGHZ_ReadRegisters+0x2e>
 80058f0:	2302      	movs	r3, #2
 80058f2:	e045      	b.n	8005980 <HAL_SUBGHZ_ReadRegisters+0xba>
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	2201      	movs	r2, #1
 80058f8:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80058fa:	68f8      	ldr	r0, [r7, #12]
 80058fc:	f000 faee 	bl	8005edc <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8005900:	f7ff fea8 	bl	8005654 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 8005904:	211d      	movs	r1, #29
 8005906:	68f8      	ldr	r0, [r7, #12]
 8005908:	f000 fa3a 	bl	8005d80 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 800590c:	897b      	ldrh	r3, [r7, #10]
 800590e:	0a1b      	lsrs	r3, r3, #8
 8005910:	b29b      	uxth	r3, r3
 8005912:	b2db      	uxtb	r3, r3
 8005914:	4619      	mov	r1, r3
 8005916:	68f8      	ldr	r0, [r7, #12]
 8005918:	f000 fa32 	bl	8005d80 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 800591c:	897b      	ldrh	r3, [r7, #10]
 800591e:	b2db      	uxtb	r3, r3
 8005920:	4619      	mov	r1, r3
 8005922:	68f8      	ldr	r0, [r7, #12]
 8005924:	f000 fa2c 	bl	8005d80 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 8005928:	2100      	movs	r1, #0
 800592a:	68f8      	ldr	r0, [r7, #12]
 800592c:	f000 fa28 	bl	8005d80 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8005930:	2300      	movs	r3, #0
 8005932:	82fb      	strh	r3, [r7, #22]
 8005934:	e009      	b.n	800594a <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8005936:	69b9      	ldr	r1, [r7, #24]
 8005938:	68f8      	ldr	r0, [r7, #12]
 800593a:	f000 fa77 	bl	8005e2c <SUBGHZSPI_Receive>
      pData++;
 800593e:	69bb      	ldr	r3, [r7, #24]
 8005940:	3301      	adds	r3, #1
 8005942:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8005944:	8afb      	ldrh	r3, [r7, #22]
 8005946:	3301      	adds	r3, #1
 8005948:	82fb      	strh	r3, [r7, #22]
 800594a:	8afa      	ldrh	r2, [r7, #22]
 800594c:	893b      	ldrh	r3, [r7, #8]
 800594e:	429a      	cmp	r2, r3
 8005950:	d3f1      	bcc.n	8005936 <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8005952:	f7ff fe6f 	bl	8005634 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8005956:	68f8      	ldr	r0, [r7, #12]
 8005958:	f000 fae4 	bl	8005f24 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	689b      	ldr	r3, [r3, #8]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d002      	beq.n	800596a <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 8005964:	2301      	movs	r3, #1
 8005966:	77fb      	strb	r3, [r7, #31]
 8005968:	e001      	b.n	800596e <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 800596a:	2300      	movs	r3, #0
 800596c:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	2201      	movs	r2, #1
 8005972:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	2200      	movs	r2, #0
 8005978:	715a      	strb	r2, [r3, #5]

    return status;
 800597a:	7ffb      	ldrb	r3, [r7, #31]
 800597c:	e000      	b.n	8005980 <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 800597e:	2302      	movs	r3, #2
  }
}
 8005980:	4618      	mov	r0, r3
 8005982:	3720      	adds	r7, #32
 8005984:	46bd      	mov	sp, r7
 8005986:	bd80      	pop	{r7, pc}

08005988 <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b086      	sub	sp, #24
 800598c:	af00      	add	r7, sp, #0
 800598e:	60f8      	str	r0, [r7, #12]
 8005990:	607a      	str	r2, [r7, #4]
 8005992:	461a      	mov	r2, r3
 8005994:	460b      	mov	r3, r1
 8005996:	72fb      	strb	r3, [r7, #11]
 8005998:	4613      	mov	r3, r2
 800599a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0U]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	799b      	ldrb	r3, [r3, #6]
 80059a0:	b2db      	uxtb	r3, r3
 80059a2:	2b01      	cmp	r3, #1
 80059a4:	d14a      	bne.n	8005a3c <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	795b      	ldrb	r3, [r3, #5]
 80059aa:	2b01      	cmp	r3, #1
 80059ac:	d101      	bne.n	80059b2 <HAL_SUBGHZ_ExecSetCmd+0x2a>
 80059ae:	2302      	movs	r3, #2
 80059b0:	e045      	b.n	8005a3e <HAL_SUBGHZ_ExecSetCmd+0xb6>
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	2201      	movs	r2, #1
 80059b6:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80059b8:	68f8      	ldr	r0, [r7, #12]
 80059ba:	f000 fa8f 	bl	8005edc <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 80059be:	7afb      	ldrb	r3, [r7, #11]
 80059c0:	2b84      	cmp	r3, #132	; 0x84
 80059c2:	d002      	beq.n	80059ca <HAL_SUBGHZ_ExecSetCmd+0x42>
 80059c4:	7afb      	ldrb	r3, [r7, #11]
 80059c6:	2b94      	cmp	r3, #148	; 0x94
 80059c8:	d103      	bne.n	80059d2 <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	2201      	movs	r2, #1
 80059ce:	711a      	strb	r2, [r3, #4]
 80059d0:	e002      	b.n	80059d8 <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	2200      	movs	r2, #0
 80059d6:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80059d8:	f7ff fe3c 	bl	8005654 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 80059dc:	7afb      	ldrb	r3, [r7, #11]
 80059de:	4619      	mov	r1, r3
 80059e0:	68f8      	ldr	r0, [r7, #12]
 80059e2:	f000 f9cd 	bl	8005d80 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80059e6:	2300      	movs	r3, #0
 80059e8:	82bb      	strh	r3, [r7, #20]
 80059ea:	e00a      	b.n	8005a02 <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 80059ec:	8abb      	ldrh	r3, [r7, #20]
 80059ee:	687a      	ldr	r2, [r7, #4]
 80059f0:	4413      	add	r3, r2
 80059f2:	781b      	ldrb	r3, [r3, #0]
 80059f4:	4619      	mov	r1, r3
 80059f6:	68f8      	ldr	r0, [r7, #12]
 80059f8:	f000 f9c2 	bl	8005d80 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80059fc:	8abb      	ldrh	r3, [r7, #20]
 80059fe:	3301      	adds	r3, #1
 8005a00:	82bb      	strh	r3, [r7, #20]
 8005a02:	8aba      	ldrh	r2, [r7, #20]
 8005a04:	893b      	ldrh	r3, [r7, #8]
 8005a06:	429a      	cmp	r2, r3
 8005a08:	d3f0      	bcc.n	80059ec <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8005a0a:	f7ff fe13 	bl	8005634 <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 8005a0e:	7afb      	ldrb	r3, [r7, #11]
 8005a10:	2b84      	cmp	r3, #132	; 0x84
 8005a12:	d002      	beq.n	8005a1a <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 8005a14:	68f8      	ldr	r0, [r7, #12]
 8005a16:	f000 fa85 	bl	8005f24 <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	689b      	ldr	r3, [r3, #8]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d002      	beq.n	8005a28 <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 8005a22:	2301      	movs	r3, #1
 8005a24:	75fb      	strb	r3, [r7, #23]
 8005a26:	e001      	b.n	8005a2c <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 8005a28:	2300      	movs	r3, #0
 8005a2a:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	2201      	movs	r2, #1
 8005a30:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	2200      	movs	r2, #0
 8005a36:	715a      	strb	r2, [r3, #5]

    return status;
 8005a38:	7dfb      	ldrb	r3, [r7, #23]
 8005a3a:	e000      	b.n	8005a3e <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8005a3c:	2302      	movs	r3, #2
  }
}
 8005a3e:	4618      	mov	r0, r3
 8005a40:	3718      	adds	r7, #24
 8005a42:	46bd      	mov	sp, r7
 8005a44:	bd80      	pop	{r7, pc}

08005a46 <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8005a46:	b580      	push	{r7, lr}
 8005a48:	b088      	sub	sp, #32
 8005a4a:	af00      	add	r7, sp, #0
 8005a4c:	60f8      	str	r0, [r7, #12]
 8005a4e:	607a      	str	r2, [r7, #4]
 8005a50:	461a      	mov	r2, r3
 8005a52:	460b      	mov	r3, r1
 8005a54:	72fb      	strb	r3, [r7, #11]
 8005a56:	4613      	mov	r3, r2
 8005a58:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	799b      	ldrb	r3, [r3, #6]
 8005a62:	b2db      	uxtb	r3, r3
 8005a64:	2b01      	cmp	r3, #1
 8005a66:	d13d      	bne.n	8005ae4 <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	795b      	ldrb	r3, [r3, #5]
 8005a6c:	2b01      	cmp	r3, #1
 8005a6e:	d101      	bne.n	8005a74 <HAL_SUBGHZ_ExecGetCmd+0x2e>
 8005a70:	2302      	movs	r3, #2
 8005a72:	e038      	b.n	8005ae6 <HAL_SUBGHZ_ExecGetCmd+0xa0>
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	2201      	movs	r2, #1
 8005a78:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8005a7a:	68f8      	ldr	r0, [r7, #12]
 8005a7c:	f000 fa2e 	bl	8005edc <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8005a80:	f7ff fde8 	bl	8005654 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8005a84:	7afb      	ldrb	r3, [r7, #11]
 8005a86:	4619      	mov	r1, r3
 8005a88:	68f8      	ldr	r0, [r7, #12]
 8005a8a:	f000 f979 	bl	8005d80 <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8005a8e:	2100      	movs	r1, #0
 8005a90:	68f8      	ldr	r0, [r7, #12]
 8005a92:	f000 f975 	bl	8005d80 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8005a96:	2300      	movs	r3, #0
 8005a98:	82fb      	strh	r3, [r7, #22]
 8005a9a:	e009      	b.n	8005ab0 <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8005a9c:	69b9      	ldr	r1, [r7, #24]
 8005a9e:	68f8      	ldr	r0, [r7, #12]
 8005aa0:	f000 f9c4 	bl	8005e2c <SUBGHZSPI_Receive>
      pData++;
 8005aa4:	69bb      	ldr	r3, [r7, #24]
 8005aa6:	3301      	adds	r3, #1
 8005aa8:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8005aaa:	8afb      	ldrh	r3, [r7, #22]
 8005aac:	3301      	adds	r3, #1
 8005aae:	82fb      	strh	r3, [r7, #22]
 8005ab0:	8afa      	ldrh	r2, [r7, #22]
 8005ab2:	893b      	ldrh	r3, [r7, #8]
 8005ab4:	429a      	cmp	r2, r3
 8005ab6:	d3f1      	bcc.n	8005a9c <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8005ab8:	f7ff fdbc 	bl	8005634 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8005abc:	68f8      	ldr	r0, [r7, #12]
 8005abe:	f000 fa31 	bl	8005f24 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	689b      	ldr	r3, [r3, #8]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d002      	beq.n	8005ad0 <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 8005aca:	2301      	movs	r3, #1
 8005acc:	77fb      	strb	r3, [r7, #31]
 8005ace:	e001      	b.n	8005ad4 <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	2201      	movs	r2, #1
 8005ad8:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	2200      	movs	r2, #0
 8005ade:	715a      	strb	r2, [r3, #5]

    return status;
 8005ae0:	7ffb      	ldrb	r3, [r7, #31]
 8005ae2:	e000      	b.n	8005ae6 <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8005ae4:	2302      	movs	r3, #2
  }
}
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	3720      	adds	r7, #32
 8005aea:	46bd      	mov	sp, r7
 8005aec:	bd80      	pop	{r7, pc}

08005aee <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 8005aee:	b580      	push	{r7, lr}
 8005af0:	b086      	sub	sp, #24
 8005af2:	af00      	add	r7, sp, #0
 8005af4:	60f8      	str	r0, [r7, #12]
 8005af6:	607a      	str	r2, [r7, #4]
 8005af8:	461a      	mov	r2, r3
 8005afa:	460b      	mov	r3, r1
 8005afc:	72fb      	strb	r3, [r7, #11]
 8005afe:	4613      	mov	r3, r2
 8005b00:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	799b      	ldrb	r3, [r3, #6]
 8005b06:	b2db      	uxtb	r3, r3
 8005b08:	2b01      	cmp	r3, #1
 8005b0a:	d13e      	bne.n	8005b8a <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	795b      	ldrb	r3, [r3, #5]
 8005b10:	2b01      	cmp	r3, #1
 8005b12:	d101      	bne.n	8005b18 <HAL_SUBGHZ_WriteBuffer+0x2a>
 8005b14:	2302      	movs	r3, #2
 8005b16:	e039      	b.n	8005b8c <HAL_SUBGHZ_WriteBuffer+0x9e>
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	2201      	movs	r2, #1
 8005b1c:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8005b1e:	68f8      	ldr	r0, [r7, #12]
 8005b20:	f000 f9dc 	bl	8005edc <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8005b24:	f7ff fd96 	bl	8005654 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 8005b28:	210e      	movs	r1, #14
 8005b2a:	68f8      	ldr	r0, [r7, #12]
 8005b2c:	f000 f928 	bl	8005d80 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8005b30:	7afb      	ldrb	r3, [r7, #11]
 8005b32:	4619      	mov	r1, r3
 8005b34:	68f8      	ldr	r0, [r7, #12]
 8005b36:	f000 f923 	bl	8005d80 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	82bb      	strh	r3, [r7, #20]
 8005b3e:	e00a      	b.n	8005b56 <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8005b40:	8abb      	ldrh	r3, [r7, #20]
 8005b42:	687a      	ldr	r2, [r7, #4]
 8005b44:	4413      	add	r3, r2
 8005b46:	781b      	ldrb	r3, [r3, #0]
 8005b48:	4619      	mov	r1, r3
 8005b4a:	68f8      	ldr	r0, [r7, #12]
 8005b4c:	f000 f918 	bl	8005d80 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8005b50:	8abb      	ldrh	r3, [r7, #20]
 8005b52:	3301      	adds	r3, #1
 8005b54:	82bb      	strh	r3, [r7, #20]
 8005b56:	8aba      	ldrh	r2, [r7, #20]
 8005b58:	893b      	ldrh	r3, [r7, #8]
 8005b5a:	429a      	cmp	r2, r3
 8005b5c:	d3f0      	bcc.n	8005b40 <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8005b5e:	f7ff fd69 	bl	8005634 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8005b62:	68f8      	ldr	r0, [r7, #12]
 8005b64:	f000 f9de 	bl	8005f24 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	689b      	ldr	r3, [r3, #8]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d002      	beq.n	8005b76 <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 8005b70:	2301      	movs	r3, #1
 8005b72:	75fb      	strb	r3, [r7, #23]
 8005b74:	e001      	b.n	8005b7a <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 8005b76:	2300      	movs	r3, #0
 8005b78:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	2201      	movs	r2, #1
 8005b7e:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	2200      	movs	r2, #0
 8005b84:	715a      	strb	r2, [r3, #5]

    return status;
 8005b86:	7dfb      	ldrb	r3, [r7, #23]
 8005b88:	e000      	b.n	8005b8c <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8005b8a:	2302      	movs	r3, #2
  }
}
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	3718      	adds	r7, #24
 8005b90:	46bd      	mov	sp, r7
 8005b92:	bd80      	pop	{r7, pc}

08005b94 <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b088      	sub	sp, #32
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	60f8      	str	r0, [r7, #12]
 8005b9c:	607a      	str	r2, [r7, #4]
 8005b9e:	461a      	mov	r2, r3
 8005ba0:	460b      	mov	r3, r1
 8005ba2:	72fb      	strb	r3, [r7, #11]
 8005ba4:	4613      	mov	r3, r2
 8005ba6:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	799b      	ldrb	r3, [r3, #6]
 8005bb0:	b2db      	uxtb	r3, r3
 8005bb2:	2b01      	cmp	r3, #1
 8005bb4:	d141      	bne.n	8005c3a <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	795b      	ldrb	r3, [r3, #5]
 8005bba:	2b01      	cmp	r3, #1
 8005bbc:	d101      	bne.n	8005bc2 <HAL_SUBGHZ_ReadBuffer+0x2e>
 8005bbe:	2302      	movs	r3, #2
 8005bc0:	e03c      	b.n	8005c3c <HAL_SUBGHZ_ReadBuffer+0xa8>
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	2201      	movs	r2, #1
 8005bc6:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8005bc8:	68f8      	ldr	r0, [r7, #12]
 8005bca:	f000 f987 	bl	8005edc <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8005bce:	f7ff fd41 	bl	8005654 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 8005bd2:	211e      	movs	r1, #30
 8005bd4:	68f8      	ldr	r0, [r7, #12]
 8005bd6:	f000 f8d3 	bl	8005d80 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8005bda:	7afb      	ldrb	r3, [r7, #11]
 8005bdc:	4619      	mov	r1, r3
 8005bde:	68f8      	ldr	r0, [r7, #12]
 8005be0:	f000 f8ce 	bl	8005d80 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8005be4:	2100      	movs	r1, #0
 8005be6:	68f8      	ldr	r0, [r7, #12]
 8005be8:	f000 f8ca 	bl	8005d80 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8005bec:	2300      	movs	r3, #0
 8005bee:	82fb      	strh	r3, [r7, #22]
 8005bf0:	e009      	b.n	8005c06 <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8005bf2:	69b9      	ldr	r1, [r7, #24]
 8005bf4:	68f8      	ldr	r0, [r7, #12]
 8005bf6:	f000 f919 	bl	8005e2c <SUBGHZSPI_Receive>
      pData++;
 8005bfa:	69bb      	ldr	r3, [r7, #24]
 8005bfc:	3301      	adds	r3, #1
 8005bfe:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8005c00:	8afb      	ldrh	r3, [r7, #22]
 8005c02:	3301      	adds	r3, #1
 8005c04:	82fb      	strh	r3, [r7, #22]
 8005c06:	8afa      	ldrh	r2, [r7, #22]
 8005c08:	893b      	ldrh	r3, [r7, #8]
 8005c0a:	429a      	cmp	r2, r3
 8005c0c:	d3f1      	bcc.n	8005bf2 <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8005c0e:	f7ff fd11 	bl	8005634 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8005c12:	68f8      	ldr	r0, [r7, #12]
 8005c14:	f000 f986 	bl	8005f24 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	689b      	ldr	r3, [r3, #8]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d002      	beq.n	8005c26 <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 8005c20:	2301      	movs	r3, #1
 8005c22:	77fb      	strb	r3, [r7, #31]
 8005c24:	e001      	b.n	8005c2a <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 8005c26:	2300      	movs	r3, #0
 8005c28:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	2201      	movs	r2, #1
 8005c2e:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	2200      	movs	r2, #0
 8005c34:	715a      	strb	r2, [r3, #5]

    return status;
 8005c36:	7ffb      	ldrb	r3, [r7, #31]
 8005c38:	e000      	b.n	8005c3c <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8005c3a:	2302      	movs	r3, #2
  }
}
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	3720      	adds	r7, #32
 8005c40:	46bd      	mov	sp, r7
 8005c42:	bd80      	pop	{r7, pc}

08005c44 <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b084      	sub	sp, #16
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2U] = {0U};
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 8005c50:	f107 020c 	add.w	r2, r7, #12
 8005c54:	2302      	movs	r3, #2
 8005c56:	2112      	movs	r1, #18
 8005c58:	6878      	ldr	r0, [r7, #4]
 8005c5a:	f7ff fef4 	bl	8005a46 <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 8005c5e:	7b3b      	ldrb	r3, [r7, #12]
 8005c60:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8U) | tmpisr[1U];
 8005c62:	89fb      	ldrh	r3, [r7, #14]
 8005c64:	021b      	lsls	r3, r3, #8
 8005c66:	b21a      	sxth	r2, r3
 8005c68:	7b7b      	ldrb	r3, [r7, #13]
 8005c6a:	b21b      	sxth	r3, r3
 8005c6c:	4313      	orrs	r3, r2
 8005c6e:	b21b      	sxth	r3, r3
 8005c70:	81fb      	strh	r3, [r7, #14]

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2U);
 8005c72:	f107 020c 	add.w	r2, r7, #12
 8005c76:	2302      	movs	r3, #2
 8005c78:	2102      	movs	r1, #2
 8005c7a:	6878      	ldr	r0, [r7, #4]
 8005c7c:	f7ff fe84 	bl	8005988 <HAL_SUBGHZ_ExecSetCmd>

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 8005c80:	89fb      	ldrh	r3, [r7, #14]
 8005c82:	f003 0301 	and.w	r3, r3, #1
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d002      	beq.n	8005c90 <HAL_SUBGHZ_IRQHandler+0x4c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 8005c8a:	6878      	ldr	r0, [r7, #4]
 8005c8c:	f005 f95c 	bl	800af48 <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 8005c90:	89fb      	ldrh	r3, [r7, #14]
 8005c92:	f003 0302 	and.w	r3, r3, #2
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d002      	beq.n	8005ca0 <HAL_SUBGHZ_IRQHandler+0x5c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 8005c9a:	6878      	ldr	r0, [r7, #4]
 8005c9c:	f005 f962 	bl	800af64 <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 8005ca0:	89fb      	ldrh	r3, [r7, #14]
 8005ca2:	f003 0304 	and.w	r3, r3, #4
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d002      	beq.n	8005cb0 <HAL_SUBGHZ_IRQHandler+0x6c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 8005caa:	6878      	ldr	r0, [r7, #4]
 8005cac:	f005 f9b2 	bl	800b014 <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 8005cb0:	89fb      	ldrh	r3, [r7, #14]
 8005cb2:	f003 0308 	and.w	r3, r3, #8
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d002      	beq.n	8005cc0 <HAL_SUBGHZ_IRQHandler+0x7c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 8005cba:	6878      	ldr	r0, [r7, #4]
 8005cbc:	f005 f9b8 	bl	800b030 <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 8005cc0:	89fb      	ldrh	r3, [r7, #14]
 8005cc2:	f003 0310 	and.w	r3, r3, #16
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d002      	beq.n	8005cd0 <HAL_SUBGHZ_IRQHandler+0x8c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 8005cca:	6878      	ldr	r0, [r7, #4]
 8005ccc:	f005 f9be 	bl	800b04c <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 8005cd0:	89fb      	ldrh	r3, [r7, #14]
 8005cd2:	f003 0320 	and.w	r3, r3, #32
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d002      	beq.n	8005ce0 <HAL_SUBGHZ_IRQHandler+0x9c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 8005cda:	6878      	ldr	r0, [r7, #4]
 8005cdc:	f005 f98c 	bl	800aff8 <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 8005ce0:	89fb      	ldrh	r3, [r7, #14]
 8005ce2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d002      	beq.n	8005cf0 <HAL_SUBGHZ_IRQHandler+0xac>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 8005cea:	6878      	ldr	r0, [r7, #4]
 8005cec:	f005 f948 	bl	800af80 <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 8005cf0:	89fb      	ldrh	r3, [r7, #14]
 8005cf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d00d      	beq.n	8005d16 <HAL_SUBGHZ_IRQHandler+0xd2>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 8005cfa:	89fb      	ldrh	r3, [r7, #14]
 8005cfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d004      	beq.n	8005d0e <HAL_SUBGHZ_IRQHandler+0xca>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 8005d04:	2101      	movs	r1, #1
 8005d06:	6878      	ldr	r0, [r7, #4]
 8005d08:	f005 f948 	bl	800af9c <HAL_SUBGHZ_CADStatusCallback>
 8005d0c:	e003      	b.n	8005d16 <HAL_SUBGHZ_IRQHandler+0xd2>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 8005d0e:	2100      	movs	r1, #0
 8005d10:	6878      	ldr	r0, [r7, #4]
 8005d12:	f005 f943 	bl	800af9c <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 8005d16:	89fb      	ldrh	r3, [r7, #14]
 8005d18:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d002      	beq.n	8005d26 <HAL_SUBGHZ_IRQHandler+0xe2>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 8005d20:	6878      	ldr	r0, [r7, #4]
 8005d22:	f005 f959 	bl	800afd8 <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LR_FHSS Hop interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_LR_FHSS_HOP) != RESET)
 8005d26:	89fb      	ldrh	r3, [r7, #14]
 8005d28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d002      	beq.n	8005d36 <HAL_SUBGHZ_IRQHandler+0xf2>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->LrFhssHopCallback(hsubghz);
#else
    HAL_SUBGHZ_LrFhssHopCallback(hsubghz);
 8005d30:	6878      	ldr	r0, [r7, #4]
 8005d32:	f005 f999 	bl	800b068 <HAL_SUBGHZ_LrFhssHopCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }
}
 8005d36:	bf00      	nop
 8005d38:	3710      	adds	r7, #16
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	bd80      	pop	{r7, pc}
	...

08005d40 <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 8005d40:	b480      	push	{r7}
 8005d42:	b083      	sub	sp, #12
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8005d48:	4b0c      	ldr	r3, [pc, #48]	; (8005d7c <SUBGHZSPI_Init+0x3c>)
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	4a0b      	ldr	r2, [pc, #44]	; (8005d7c <SUBGHZSPI_Init+0x3c>)
 8005d4e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d52:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 8005d54:	4a09      	ldr	r2, [pc, #36]	; (8005d7c <SUBGHZSPI_Init+0x3c>)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	f443 7341 	orr.w	r3, r3, #772	; 0x304
 8005d5c:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 8005d5e:	4b07      	ldr	r3, [pc, #28]	; (8005d7c <SUBGHZSPI_Init+0x3c>)
 8005d60:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 8005d64:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8005d66:	4b05      	ldr	r3, [pc, #20]	; (8005d7c <SUBGHZSPI_Init+0x3c>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4a04      	ldr	r2, [pc, #16]	; (8005d7c <SUBGHZSPI_Init+0x3c>)
 8005d6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d70:	6013      	str	r3, [r2, #0]
}
 8005d72:	bf00      	nop
 8005d74:	370c      	adds	r7, #12
 8005d76:	46bd      	mov	sp, r7
 8005d78:	bc80      	pop	{r7}
 8005d7a:	4770      	bx	lr
 8005d7c:	58010000 	.word	0x58010000

08005d80 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8005d80:	b480      	push	{r7}
 8005d82:	b087      	sub	sp, #28
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
 8005d88:	460b      	mov	r3, r1
 8005d8a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8005d90:	4b23      	ldr	r3, [pc, #140]	; (8005e20 <SUBGHZSPI_Transmit+0xa0>)
 8005d92:	681a      	ldr	r2, [r3, #0]
 8005d94:	4613      	mov	r3, r2
 8005d96:	00db      	lsls	r3, r3, #3
 8005d98:	1a9b      	subs	r3, r3, r2
 8005d9a:	009b      	lsls	r3, r3, #2
 8005d9c:	0cdb      	lsrs	r3, r3, #19
 8005d9e:	2264      	movs	r2, #100	; 0x64
 8005da0:	fb02 f303 	mul.w	r3, r2, r3
 8005da4:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d105      	bne.n	8005db8 <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 8005dac:	2301      	movs	r3, #1
 8005dae:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2201      	movs	r2, #1
 8005db4:	609a      	str	r2, [r3, #8]
      break;
 8005db6:	e008      	b.n	8005dca <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	3b01      	subs	r3, #1
 8005dbc:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8005dbe:	4b19      	ldr	r3, [pc, #100]	; (8005e24 <SUBGHZSPI_Transmit+0xa4>)
 8005dc0:	689b      	ldr	r3, [r3, #8]
 8005dc2:	f003 0302 	and.w	r3, r3, #2
 8005dc6:	2b02      	cmp	r3, #2
 8005dc8:	d1ed      	bne.n	8005da6 <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8005dca:	4b17      	ldr	r3, [pc, #92]	; (8005e28 <SUBGHZSPI_Transmit+0xa8>)
 8005dcc:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 8005dce:	693b      	ldr	r3, [r7, #16]
 8005dd0:	78fa      	ldrb	r2, [r7, #3]
 8005dd2:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8005dd4:	4b12      	ldr	r3, [pc, #72]	; (8005e20 <SUBGHZSPI_Transmit+0xa0>)
 8005dd6:	681a      	ldr	r2, [r3, #0]
 8005dd8:	4613      	mov	r3, r2
 8005dda:	00db      	lsls	r3, r3, #3
 8005ddc:	1a9b      	subs	r3, r3, r2
 8005dde:	009b      	lsls	r3, r3, #2
 8005de0:	0cdb      	lsrs	r3, r3, #19
 8005de2:	2264      	movs	r2, #100	; 0x64
 8005de4:	fb02 f303 	mul.w	r3, r2, r3
 8005de8:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d105      	bne.n	8005dfc <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 8005df0:	2301      	movs	r3, #1
 8005df2:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2201      	movs	r2, #1
 8005df8:	609a      	str	r2, [r3, #8]
      break;
 8005dfa:	e008      	b.n	8005e0e <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	3b01      	subs	r3, #1
 8005e00:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8005e02:	4b08      	ldr	r3, [pc, #32]	; (8005e24 <SUBGHZSPI_Transmit+0xa4>)
 8005e04:	689b      	ldr	r3, [r3, #8]
 8005e06:	f003 0301 	and.w	r3, r3, #1
 8005e0a:	2b01      	cmp	r3, #1
 8005e0c:	d1ed      	bne.n	8005dea <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 8005e0e:	4b05      	ldr	r3, [pc, #20]	; (8005e24 <SUBGHZSPI_Transmit+0xa4>)
 8005e10:	68db      	ldr	r3, [r3, #12]

  return status;
 8005e12:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e14:	4618      	mov	r0, r3
 8005e16:	371c      	adds	r7, #28
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	bc80      	pop	{r7}
 8005e1c:	4770      	bx	lr
 8005e1e:	bf00      	nop
 8005e20:	2000000c 	.word	0x2000000c
 8005e24:	58010000 	.word	0x58010000
 8005e28:	5801000c 	.word	0x5801000c

08005e2c <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 8005e2c:	b480      	push	{r7}
 8005e2e:	b087      	sub	sp, #28
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
 8005e34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005e36:	2300      	movs	r3, #0
 8005e38:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8005e3a:	4b25      	ldr	r3, [pc, #148]	; (8005ed0 <SUBGHZSPI_Receive+0xa4>)
 8005e3c:	681a      	ldr	r2, [r3, #0]
 8005e3e:	4613      	mov	r3, r2
 8005e40:	00db      	lsls	r3, r3, #3
 8005e42:	1a9b      	subs	r3, r3, r2
 8005e44:	009b      	lsls	r3, r3, #2
 8005e46:	0cdb      	lsrs	r3, r3, #19
 8005e48:	2264      	movs	r2, #100	; 0x64
 8005e4a:	fb02 f303 	mul.w	r3, r2, r3
 8005e4e:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d105      	bne.n	8005e62 <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 8005e56:	2301      	movs	r3, #1
 8005e58:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2201      	movs	r2, #1
 8005e5e:	609a      	str	r2, [r3, #8]
      break;
 8005e60:	e008      	b.n	8005e74 <SUBGHZSPI_Receive+0x48>
    }
    count--;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	3b01      	subs	r3, #1
 8005e66:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8005e68:	4b1a      	ldr	r3, [pc, #104]	; (8005ed4 <SUBGHZSPI_Receive+0xa8>)
 8005e6a:	689b      	ldr	r3, [r3, #8]
 8005e6c:	f003 0302 	and.w	r3, r3, #2
 8005e70:	2b02      	cmp	r3, #2
 8005e72:	d1ed      	bne.n	8005e50 <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8005e74:	4b18      	ldr	r3, [pc, #96]	; (8005ed8 <SUBGHZSPI_Receive+0xac>)
 8005e76:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 8005e78:	693b      	ldr	r3, [r7, #16]
 8005e7a:	22ff      	movs	r2, #255	; 0xff
 8005e7c:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8005e7e:	4b14      	ldr	r3, [pc, #80]	; (8005ed0 <SUBGHZSPI_Receive+0xa4>)
 8005e80:	681a      	ldr	r2, [r3, #0]
 8005e82:	4613      	mov	r3, r2
 8005e84:	00db      	lsls	r3, r3, #3
 8005e86:	1a9b      	subs	r3, r3, r2
 8005e88:	009b      	lsls	r3, r3, #2
 8005e8a:	0cdb      	lsrs	r3, r3, #19
 8005e8c:	2264      	movs	r2, #100	; 0x64
 8005e8e:	fb02 f303 	mul.w	r3, r2, r3
 8005e92:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d105      	bne.n	8005ea6 <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 8005e9a:	2301      	movs	r3, #1
 8005e9c:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2201      	movs	r2, #1
 8005ea2:	609a      	str	r2, [r3, #8]
      break;
 8005ea4:	e008      	b.n	8005eb8 <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	3b01      	subs	r3, #1
 8005eaa:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8005eac:	4b09      	ldr	r3, [pc, #36]	; (8005ed4 <SUBGHZSPI_Receive+0xa8>)
 8005eae:	689b      	ldr	r3, [r3, #8]
 8005eb0:	f003 0301 	and.w	r3, r3, #1
 8005eb4:	2b01      	cmp	r3, #1
 8005eb6:	d1ed      	bne.n	8005e94 <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8005eb8:	4b06      	ldr	r3, [pc, #24]	; (8005ed4 <SUBGHZSPI_Receive+0xa8>)
 8005eba:	68db      	ldr	r3, [r3, #12]
 8005ebc:	b2da      	uxtb	r2, r3
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	701a      	strb	r2, [r3, #0]

  return status;
 8005ec2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	371c      	adds	r7, #28
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	bc80      	pop	{r7}
 8005ecc:	4770      	bx	lr
 8005ece:	bf00      	nop
 8005ed0:	2000000c 	.word	0x2000000c
 8005ed4:	58010000 	.word	0x58010000
 8005ed8:	5801000c 	.word	0x5801000c

08005edc <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b084      	sub	sp, #16
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	791b      	ldrb	r3, [r3, #4]
 8005ee8:	2b01      	cmp	r3, #1
 8005eea:	d111      	bne.n	8005f10 <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 8005eec:	4b0c      	ldr	r3, [pc, #48]	; (8005f20 <SUBGHZ_CheckDeviceReady+0x44>)
 8005eee:	681a      	ldr	r2, [r3, #0]
 8005ef0:	4613      	mov	r3, r2
 8005ef2:	005b      	lsls	r3, r3, #1
 8005ef4:	4413      	add	r3, r2
 8005ef6:	00db      	lsls	r3, r3, #3
 8005ef8:	0c1b      	lsrs	r3, r3, #16
 8005efa:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8005efc:	f7ff fbaa 	bl	8005654 <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	3b01      	subs	r3, #1
 8005f04:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d1f9      	bne.n	8005f00 <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8005f0c:	f7ff fb92 	bl	8005634 <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 8005f10:	6878      	ldr	r0, [r7, #4]
 8005f12:	f000 f807 	bl	8005f24 <SUBGHZ_WaitOnBusy>
 8005f16:	4603      	mov	r3, r0
}
 8005f18:	4618      	mov	r0, r3
 8005f1a:	3710      	adds	r7, #16
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	bd80      	pop	{r7, pc}
 8005f20:	2000000c 	.word	0x2000000c

08005f24 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b086      	sub	sp, #24
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 8005f30:	4b12      	ldr	r3, [pc, #72]	; (8005f7c <SUBGHZ_WaitOnBusy+0x58>)
 8005f32:	681a      	ldr	r2, [r3, #0]
 8005f34:	4613      	mov	r3, r2
 8005f36:	005b      	lsls	r3, r3, #1
 8005f38:	4413      	add	r3, r2
 8005f3a:	00db      	lsls	r3, r3, #3
 8005f3c:	0d1b      	lsrs	r3, r3, #20
 8005f3e:	2264      	movs	r2, #100	; 0x64
 8005f40:	fb02 f303 	mul.w	r3, r2, r3
 8005f44:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 8005f46:	f7ff fbb3 	bl	80056b0 <LL_PWR_IsActiveFlag_RFBUSYMS>
 8005f4a:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d105      	bne.n	8005f5e <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 8005f52:	2301      	movs	r3, #1
 8005f54:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2202      	movs	r2, #2
 8005f5a:	609a      	str	r2, [r3, #8]
      break;
 8005f5c:	e009      	b.n	8005f72 <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	3b01      	subs	r3, #1
 8005f62:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8005f64:	f7ff fb92 	bl	800568c <LL_PWR_IsActiveFlag_RFBUSYS>
 8005f68:	4602      	mov	r2, r0
 8005f6a:	693b      	ldr	r3, [r7, #16]
 8005f6c:	4013      	ands	r3, r2
 8005f6e:	2b01      	cmp	r3, #1
 8005f70:	d0e9      	beq.n	8005f46 <SUBGHZ_WaitOnBusy+0x22>

  return status;
 8005f72:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f74:	4618      	mov	r0, r3
 8005f76:	3718      	adds	r7, #24
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	bd80      	pop	{r7, pc}
 8005f7c:	2000000c 	.word	0x2000000c

08005f80 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b082      	sub	sp, #8
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d101      	bne.n	8005f92 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005f8e:	2301      	movs	r3, #1
 8005f90:	e049      	b.n	8006026 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f98:	b2db      	uxtb	r3, r3
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d106      	bne.n	8005fac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005fa6:	6878      	ldr	r0, [r7, #4]
 8005fa8:	f7fc fd94 	bl	8002ad4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2202      	movs	r2, #2
 8005fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681a      	ldr	r2, [r3, #0]
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	3304      	adds	r3, #4
 8005fbc:	4619      	mov	r1, r3
 8005fbe:	4610      	mov	r0, r2
 8005fc0:	f000 f944 	bl	800624c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2201      	movs	r2, #1
 8005fc8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2201      	movs	r2, #1
 8005fd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2201      	movs	r2, #1
 8005fd8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2201      	movs	r2, #1
 8005fe0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2201      	movs	r2, #1
 8005fe8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2201      	movs	r2, #1
 8005ff0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2201      	movs	r2, #1
 8005ff8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2201      	movs	r2, #1
 8006000:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2201      	movs	r2, #1
 8006008:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2201      	movs	r2, #1
 8006010:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2201      	movs	r2, #1
 8006018:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2201      	movs	r2, #1
 8006020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006024:	2300      	movs	r3, #0
}
 8006026:	4618      	mov	r0, r3
 8006028:	3708      	adds	r7, #8
 800602a:	46bd      	mov	sp, r7
 800602c:	bd80      	pop	{r7, pc}
	...

08006030 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006030:	b480      	push	{r7}
 8006032:	b085      	sub	sp, #20
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800603e:	b2db      	uxtb	r3, r3
 8006040:	2b01      	cmp	r3, #1
 8006042:	d001      	beq.n	8006048 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006044:	2301      	movs	r3, #1
 8006046:	e02e      	b.n	80060a6 <HAL_TIM_Base_Start+0x76>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2202      	movs	r2, #2
 800604c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	4a16      	ldr	r2, [pc, #88]	; (80060b0 <HAL_TIM_Base_Start+0x80>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d004      	beq.n	8006064 <HAL_TIM_Base_Start+0x34>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006062:	d115      	bne.n	8006090 <HAL_TIM_Base_Start+0x60>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	689a      	ldr	r2, [r3, #8]
 800606a:	4b12      	ldr	r3, [pc, #72]	; (80060b4 <HAL_TIM_Base_Start+0x84>)
 800606c:	4013      	ands	r3, r2
 800606e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	2b06      	cmp	r3, #6
 8006074:	d015      	beq.n	80060a2 <HAL_TIM_Base_Start+0x72>
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800607c:	d011      	beq.n	80060a2 <HAL_TIM_Base_Start+0x72>
    {
      __HAL_TIM_ENABLE(htim);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	681a      	ldr	r2, [r3, #0]
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f042 0201 	orr.w	r2, r2, #1
 800608c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800608e:	e008      	b.n	80060a2 <HAL_TIM_Base_Start+0x72>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	681a      	ldr	r2, [r3, #0]
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f042 0201 	orr.w	r2, r2, #1
 800609e:	601a      	str	r2, [r3, #0]
 80060a0:	e000      	b.n	80060a4 <HAL_TIM_Base_Start+0x74>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060a2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80060a4:	2300      	movs	r3, #0
}
 80060a6:	4618      	mov	r0, r3
 80060a8:	3714      	adds	r7, #20
 80060aa:	46bd      	mov	sp, r7
 80060ac:	bc80      	pop	{r7}
 80060ae:	4770      	bx	lr
 80060b0:	40012c00 	.word	0x40012c00
 80060b4:	00010007 	.word	0x00010007

080060b8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b084      	sub	sp, #16
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
 80060c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80060c2:	2300      	movs	r3, #0
 80060c4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060cc:	2b01      	cmp	r3, #1
 80060ce:	d101      	bne.n	80060d4 <HAL_TIM_ConfigClockSource+0x1c>
 80060d0:	2302      	movs	r3, #2
 80060d2:	e0b6      	b.n	8006242 <HAL_TIM_ConfigClockSource+0x18a>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2201      	movs	r2, #1
 80060d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2202      	movs	r2, #2
 80060e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	689b      	ldr	r3, [r3, #8]
 80060ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80060ec:	68bb      	ldr	r3, [r7, #8]
 80060ee:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 80060f2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80060f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80060f8:	68bb      	ldr	r3, [r7, #8]
 80060fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80060fe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	68ba      	ldr	r2, [r7, #8]
 8006106:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006110:	d03e      	beq.n	8006190 <HAL_TIM_ConfigClockSource+0xd8>
 8006112:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006116:	f200 8087 	bhi.w	8006228 <HAL_TIM_ConfigClockSource+0x170>
 800611a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800611e:	f000 8086 	beq.w	800622e <HAL_TIM_ConfigClockSource+0x176>
 8006122:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006126:	d87f      	bhi.n	8006228 <HAL_TIM_ConfigClockSource+0x170>
 8006128:	2b70      	cmp	r3, #112	; 0x70
 800612a:	d01a      	beq.n	8006162 <HAL_TIM_ConfigClockSource+0xaa>
 800612c:	2b70      	cmp	r3, #112	; 0x70
 800612e:	d87b      	bhi.n	8006228 <HAL_TIM_ConfigClockSource+0x170>
 8006130:	2b60      	cmp	r3, #96	; 0x60
 8006132:	d050      	beq.n	80061d6 <HAL_TIM_ConfigClockSource+0x11e>
 8006134:	2b60      	cmp	r3, #96	; 0x60
 8006136:	d877      	bhi.n	8006228 <HAL_TIM_ConfigClockSource+0x170>
 8006138:	2b50      	cmp	r3, #80	; 0x50
 800613a:	d03c      	beq.n	80061b6 <HAL_TIM_ConfigClockSource+0xfe>
 800613c:	2b50      	cmp	r3, #80	; 0x50
 800613e:	d873      	bhi.n	8006228 <HAL_TIM_ConfigClockSource+0x170>
 8006140:	2b40      	cmp	r3, #64	; 0x40
 8006142:	d058      	beq.n	80061f6 <HAL_TIM_ConfigClockSource+0x13e>
 8006144:	2b40      	cmp	r3, #64	; 0x40
 8006146:	d86f      	bhi.n	8006228 <HAL_TIM_ConfigClockSource+0x170>
 8006148:	2b30      	cmp	r3, #48	; 0x30
 800614a:	d064      	beq.n	8006216 <HAL_TIM_ConfigClockSource+0x15e>
 800614c:	2b30      	cmp	r3, #48	; 0x30
 800614e:	d86b      	bhi.n	8006228 <HAL_TIM_ConfigClockSource+0x170>
 8006150:	2b20      	cmp	r3, #32
 8006152:	d060      	beq.n	8006216 <HAL_TIM_ConfigClockSource+0x15e>
 8006154:	2b20      	cmp	r3, #32
 8006156:	d867      	bhi.n	8006228 <HAL_TIM_ConfigClockSource+0x170>
 8006158:	2b00      	cmp	r3, #0
 800615a:	d05c      	beq.n	8006216 <HAL_TIM_ConfigClockSource+0x15e>
 800615c:	2b10      	cmp	r3, #16
 800615e:	d05a      	beq.n	8006216 <HAL_TIM_ConfigClockSource+0x15e>
 8006160:	e062      	b.n	8006228 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006172:	f000 f946 	bl	8006402 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	689b      	ldr	r3, [r3, #8]
 800617c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800617e:	68bb      	ldr	r3, [r7, #8]
 8006180:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006184:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	68ba      	ldr	r2, [r7, #8]
 800618c:	609a      	str	r2, [r3, #8]
      break;
 800618e:	e04f      	b.n	8006230 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80061a0:	f000 f92f 	bl	8006402 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	689a      	ldr	r2, [r3, #8]
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80061b2:	609a      	str	r2, [r3, #8]
      break;
 80061b4:	e03c      	b.n	8006230 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80061c2:	461a      	mov	r2, r3
 80061c4:	f000 f8a4 	bl	8006310 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	2150      	movs	r1, #80	; 0x50
 80061ce:	4618      	mov	r0, r3
 80061d0:	f000 f8fb 	bl	80063ca <TIM_ITRx_SetConfig>
      break;
 80061d4:	e02c      	b.n	8006230 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80061e2:	461a      	mov	r2, r3
 80061e4:	f000 f8c2 	bl	800636c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	2160      	movs	r1, #96	; 0x60
 80061ee:	4618      	mov	r0, r3
 80061f0:	f000 f8eb 	bl	80063ca <TIM_ITRx_SetConfig>
      break;
 80061f4:	e01c      	b.n	8006230 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006202:	461a      	mov	r2, r3
 8006204:	f000 f884 	bl	8006310 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	2140      	movs	r1, #64	; 0x40
 800620e:	4618      	mov	r0, r3
 8006210:	f000 f8db 	bl	80063ca <TIM_ITRx_SetConfig>
      break;
 8006214:	e00c      	b.n	8006230 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681a      	ldr	r2, [r3, #0]
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	4619      	mov	r1, r3
 8006220:	4610      	mov	r0, r2
 8006222:	f000 f8d2 	bl	80063ca <TIM_ITRx_SetConfig>
      break;
 8006226:	e003      	b.n	8006230 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8006228:	2301      	movs	r3, #1
 800622a:	73fb      	strb	r3, [r7, #15]
      break;
 800622c:	e000      	b.n	8006230 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800622e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2201      	movs	r2, #1
 8006234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2200      	movs	r2, #0
 800623c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006240:	7bfb      	ldrb	r3, [r7, #15]
}
 8006242:	4618      	mov	r0, r3
 8006244:	3710      	adds	r7, #16
 8006246:	46bd      	mov	sp, r7
 8006248:	bd80      	pop	{r7, pc}
	...

0800624c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800624c:	b480      	push	{r7}
 800624e:	b085      	sub	sp, #20
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
 8006254:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	4a29      	ldr	r2, [pc, #164]	; (8006304 <TIM_Base_SetConfig+0xb8>)
 8006260:	4293      	cmp	r3, r2
 8006262:	d003      	beq.n	800626c <TIM_Base_SetConfig+0x20>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800626a:	d108      	bne.n	800627e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006272:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	685b      	ldr	r3, [r3, #4]
 8006278:	68fa      	ldr	r2, [r7, #12]
 800627a:	4313      	orrs	r3, r2
 800627c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	4a20      	ldr	r2, [pc, #128]	; (8006304 <TIM_Base_SetConfig+0xb8>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d00b      	beq.n	800629e <TIM_Base_SetConfig+0x52>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800628c:	d007      	beq.n	800629e <TIM_Base_SetConfig+0x52>
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	4a1d      	ldr	r2, [pc, #116]	; (8006308 <TIM_Base_SetConfig+0xbc>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d003      	beq.n	800629e <TIM_Base_SetConfig+0x52>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	4a1c      	ldr	r2, [pc, #112]	; (800630c <TIM_Base_SetConfig+0xc0>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d108      	bne.n	80062b0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	68db      	ldr	r3, [r3, #12]
 80062aa:	68fa      	ldr	r2, [r7, #12]
 80062ac:	4313      	orrs	r3, r2
 80062ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	695b      	ldr	r3, [r3, #20]
 80062ba:	4313      	orrs	r3, r2
 80062bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	68fa      	ldr	r2, [r7, #12]
 80062c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	689a      	ldr	r2, [r3, #8]
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	681a      	ldr	r2, [r3, #0]
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	4a0b      	ldr	r2, [pc, #44]	; (8006304 <TIM_Base_SetConfig+0xb8>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	d007      	beq.n	80062ec <TIM_Base_SetConfig+0xa0>
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	4a0a      	ldr	r2, [pc, #40]	; (8006308 <TIM_Base_SetConfig+0xbc>)
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d003      	beq.n	80062ec <TIM_Base_SetConfig+0xa0>
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	4a09      	ldr	r2, [pc, #36]	; (800630c <TIM_Base_SetConfig+0xc0>)
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d103      	bne.n	80062f4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	691a      	ldr	r2, [r3, #16]
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2201      	movs	r2, #1
 80062f8:	615a      	str	r2, [r3, #20]
}
 80062fa:	bf00      	nop
 80062fc:	3714      	adds	r7, #20
 80062fe:	46bd      	mov	sp, r7
 8006300:	bc80      	pop	{r7}
 8006302:	4770      	bx	lr
 8006304:	40012c00 	.word	0x40012c00
 8006308:	40014400 	.word	0x40014400
 800630c:	40014800 	.word	0x40014800

08006310 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006310:	b480      	push	{r7}
 8006312:	b087      	sub	sp, #28
 8006314:	af00      	add	r7, sp, #0
 8006316:	60f8      	str	r0, [r7, #12]
 8006318:	60b9      	str	r1, [r7, #8]
 800631a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	6a1b      	ldr	r3, [r3, #32]
 8006320:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	6a1b      	ldr	r3, [r3, #32]
 8006326:	f023 0201 	bic.w	r2, r3, #1
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	699b      	ldr	r3, [r3, #24]
 8006332:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006334:	693b      	ldr	r3, [r7, #16]
 8006336:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800633a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	011b      	lsls	r3, r3, #4
 8006340:	693a      	ldr	r2, [r7, #16]
 8006342:	4313      	orrs	r3, r2
 8006344:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006346:	697b      	ldr	r3, [r7, #20]
 8006348:	f023 030a 	bic.w	r3, r3, #10
 800634c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800634e:	697a      	ldr	r2, [r7, #20]
 8006350:	68bb      	ldr	r3, [r7, #8]
 8006352:	4313      	orrs	r3, r2
 8006354:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	693a      	ldr	r2, [r7, #16]
 800635a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	697a      	ldr	r2, [r7, #20]
 8006360:	621a      	str	r2, [r3, #32]
}
 8006362:	bf00      	nop
 8006364:	371c      	adds	r7, #28
 8006366:	46bd      	mov	sp, r7
 8006368:	bc80      	pop	{r7}
 800636a:	4770      	bx	lr

0800636c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800636c:	b480      	push	{r7}
 800636e:	b087      	sub	sp, #28
 8006370:	af00      	add	r7, sp, #0
 8006372:	60f8      	str	r0, [r7, #12]
 8006374:	60b9      	str	r1, [r7, #8]
 8006376:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	6a1b      	ldr	r3, [r3, #32]
 800637c:	f023 0210 	bic.w	r2, r3, #16
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	699b      	ldr	r3, [r3, #24]
 8006388:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	6a1b      	ldr	r3, [r3, #32]
 800638e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006390:	697b      	ldr	r3, [r7, #20]
 8006392:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006396:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	031b      	lsls	r3, r3, #12
 800639c:	697a      	ldr	r2, [r7, #20]
 800639e:	4313      	orrs	r3, r2
 80063a0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80063a2:	693b      	ldr	r3, [r7, #16]
 80063a4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80063a8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80063aa:	68bb      	ldr	r3, [r7, #8]
 80063ac:	011b      	lsls	r3, r3, #4
 80063ae:	693a      	ldr	r2, [r7, #16]
 80063b0:	4313      	orrs	r3, r2
 80063b2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	697a      	ldr	r2, [r7, #20]
 80063b8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	693a      	ldr	r2, [r7, #16]
 80063be:	621a      	str	r2, [r3, #32]
}
 80063c0:	bf00      	nop
 80063c2:	371c      	adds	r7, #28
 80063c4:	46bd      	mov	sp, r7
 80063c6:	bc80      	pop	{r7}
 80063c8:	4770      	bx	lr

080063ca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80063ca:	b480      	push	{r7}
 80063cc:	b085      	sub	sp, #20
 80063ce:	af00      	add	r7, sp, #0
 80063d0:	6078      	str	r0, [r7, #4]
 80063d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	689b      	ldr	r3, [r3, #8]
 80063d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80063e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063e4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80063e6:	683a      	ldr	r2, [r7, #0]
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	4313      	orrs	r3, r2
 80063ec:	f043 0307 	orr.w	r3, r3, #7
 80063f0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	68fa      	ldr	r2, [r7, #12]
 80063f6:	609a      	str	r2, [r3, #8]
}
 80063f8:	bf00      	nop
 80063fa:	3714      	adds	r7, #20
 80063fc:	46bd      	mov	sp, r7
 80063fe:	bc80      	pop	{r7}
 8006400:	4770      	bx	lr

08006402 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006402:	b480      	push	{r7}
 8006404:	b087      	sub	sp, #28
 8006406:	af00      	add	r7, sp, #0
 8006408:	60f8      	str	r0, [r7, #12]
 800640a:	60b9      	str	r1, [r7, #8]
 800640c:	607a      	str	r2, [r7, #4]
 800640e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	689b      	ldr	r3, [r3, #8]
 8006414:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006416:	697b      	ldr	r3, [r7, #20]
 8006418:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800641c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	021a      	lsls	r2, r3, #8
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	431a      	orrs	r2, r3
 8006426:	68bb      	ldr	r3, [r7, #8]
 8006428:	4313      	orrs	r3, r2
 800642a:	697a      	ldr	r2, [r7, #20]
 800642c:	4313      	orrs	r3, r2
 800642e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	697a      	ldr	r2, [r7, #20]
 8006434:	609a      	str	r2, [r3, #8]
}
 8006436:	bf00      	nop
 8006438:	371c      	adds	r7, #28
 800643a:	46bd      	mov	sp, r7
 800643c:	bc80      	pop	{r7}
 800643e:	4770      	bx	lr

08006440 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006440:	b480      	push	{r7}
 8006442:	b085      	sub	sp, #20
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
 8006448:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006450:	2b01      	cmp	r3, #1
 8006452:	d101      	bne.n	8006458 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006454:	2302      	movs	r3, #2
 8006456:	e04a      	b.n	80064ee <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2201      	movs	r2, #1
 800645c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2202      	movs	r2, #2
 8006464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	685b      	ldr	r3, [r3, #4]
 800646e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	689b      	ldr	r3, [r3, #8]
 8006476:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	4a1e      	ldr	r2, [pc, #120]	; (80064f8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800647e:	4293      	cmp	r3, r2
 8006480:	d108      	bne.n	8006494 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006488:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	685b      	ldr	r3, [r3, #4]
 800648e:	68fa      	ldr	r2, [r7, #12]
 8006490:	4313      	orrs	r3, r2
 8006492:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800649a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	68fa      	ldr	r2, [r7, #12]
 80064a2:	4313      	orrs	r3, r2
 80064a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	68fa      	ldr	r2, [r7, #12]
 80064ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	4a11      	ldr	r2, [pc, #68]	; (80064f8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d004      	beq.n	80064c2 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064c0:	d10c      	bne.n	80064dc <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80064c2:	68bb      	ldr	r3, [r7, #8]
 80064c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80064c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	689b      	ldr	r3, [r3, #8]
 80064ce:	68ba      	ldr	r2, [r7, #8]
 80064d0:	4313      	orrs	r3, r2
 80064d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	68ba      	ldr	r2, [r7, #8]
 80064da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2201      	movs	r2, #1
 80064e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2200      	movs	r2, #0
 80064e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80064ec:	2300      	movs	r3, #0
}
 80064ee:	4618      	mov	r0, r3
 80064f0:	3714      	adds	r7, #20
 80064f2:	46bd      	mov	sp, r7
 80064f4:	bc80      	pop	{r7}
 80064f6:	4770      	bx	lr
 80064f8:	40012c00 	.word	0x40012c00

080064fc <LL_RCC_GetUSARTClockSource>:
{
 80064fc:	b480      	push	{r7}
 80064fe:	b083      	sub	sp, #12
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8006504:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006508:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	401a      	ands	r2, r3
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	041b      	lsls	r3, r3, #16
 8006514:	4313      	orrs	r3, r2
}
 8006516:	4618      	mov	r0, r3
 8006518:	370c      	adds	r7, #12
 800651a:	46bd      	mov	sp, r7
 800651c:	bc80      	pop	{r7}
 800651e:	4770      	bx	lr

08006520 <LL_RCC_GetLPUARTClockSource>:
{
 8006520:	b480      	push	{r7}
 8006522:	b083      	sub	sp, #12
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8006528:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800652c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	4013      	ands	r3, r2
}
 8006534:	4618      	mov	r0, r3
 8006536:	370c      	adds	r7, #12
 8006538:	46bd      	mov	sp, r7
 800653a:	bc80      	pop	{r7}
 800653c:	4770      	bx	lr

0800653e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800653e:	b580      	push	{r7, lr}
 8006540:	b082      	sub	sp, #8
 8006542:	af00      	add	r7, sp, #0
 8006544:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d101      	bne.n	8006550 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800654c:	2301      	movs	r3, #1
 800654e:	e042      	b.n	80065d6 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006556:	2b00      	cmp	r3, #0
 8006558:	d106      	bne.n	8006568 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	2200      	movs	r2, #0
 800655e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006562:	6878      	ldr	r0, [r7, #4]
 8006564:	f7fc fc82 	bl	8002e6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2224      	movs	r2, #36	; 0x24
 800656c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	681a      	ldr	r2, [r3, #0]
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f022 0201 	bic.w	r2, r2, #1
 800657e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006580:	6878      	ldr	r0, [r7, #4]
 8006582:	f000 fd0d 	bl	8006fa0 <UART_SetConfig>
 8006586:	4603      	mov	r3, r0
 8006588:	2b01      	cmp	r3, #1
 800658a:	d101      	bne.n	8006590 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800658c:	2301      	movs	r3, #1
 800658e:	e022      	b.n	80065d6 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006594:	2b00      	cmp	r3, #0
 8006596:	d002      	beq.n	800659e <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006598:	6878      	ldr	r0, [r7, #4]
 800659a:	f000 ff75 	bl	8007488 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	685a      	ldr	r2, [r3, #4]
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80065ac:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	689a      	ldr	r2, [r3, #8]
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80065bc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	681a      	ldr	r2, [r3, #0]
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f042 0201 	orr.w	r2, r2, #1
 80065cc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80065ce:	6878      	ldr	r0, [r7, #4]
 80065d0:	f000 fffb 	bl	80075ca <UART_CheckIdleState>
 80065d4:	4603      	mov	r3, r0
}
 80065d6:	4618      	mov	r0, r3
 80065d8:	3708      	adds	r7, #8
 80065da:	46bd      	mov	sp, r7
 80065dc:	bd80      	pop	{r7, pc}

080065de <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80065de:	b580      	push	{r7, lr}
 80065e0:	b08a      	sub	sp, #40	; 0x28
 80065e2:	af02      	add	r7, sp, #8
 80065e4:	60f8      	str	r0, [r7, #12]
 80065e6:	60b9      	str	r1, [r7, #8]
 80065e8:	603b      	str	r3, [r7, #0]
 80065ea:	4613      	mov	r3, r2
 80065ec:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065f4:	2b20      	cmp	r3, #32
 80065f6:	d173      	bne.n	80066e0 <HAL_UART_Transmit+0x102>
  {
    if ((pData == NULL) || (Size == 0U))
 80065f8:	68bb      	ldr	r3, [r7, #8]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d002      	beq.n	8006604 <HAL_UART_Transmit+0x26>
 80065fe:	88fb      	ldrh	r3, [r7, #6]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d101      	bne.n	8006608 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006604:	2301      	movs	r3, #1
 8006606:	e06c      	b.n	80066e2 <HAL_UART_Transmit+0x104>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	2200      	movs	r2, #0
 800660c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	2221      	movs	r2, #33	; 0x21
 8006614:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006618:	f7fc f99a 	bl	8002950 <HAL_GetTick>
 800661c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	88fa      	ldrh	r2, [r7, #6]
 8006622:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	88fa      	ldrh	r2, [r7, #6]
 800662a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	689b      	ldr	r3, [r3, #8]
 8006632:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006636:	d108      	bne.n	800664a <HAL_UART_Transmit+0x6c>
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	691b      	ldr	r3, [r3, #16]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d104      	bne.n	800664a <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006640:	2300      	movs	r3, #0
 8006642:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	61bb      	str	r3, [r7, #24]
 8006648:	e003      	b.n	8006652 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800664a:	68bb      	ldr	r3, [r7, #8]
 800664c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800664e:	2300      	movs	r3, #0
 8006650:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006652:	e02c      	b.n	80066ae <HAL_UART_Transmit+0xd0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	9300      	str	r3, [sp, #0]
 8006658:	697b      	ldr	r3, [r7, #20]
 800665a:	2200      	movs	r2, #0
 800665c:	2180      	movs	r1, #128	; 0x80
 800665e:	68f8      	ldr	r0, [r7, #12]
 8006660:	f001 f801 	bl	8007666 <UART_WaitOnFlagUntilTimeout>
 8006664:	4603      	mov	r3, r0
 8006666:	2b00      	cmp	r3, #0
 8006668:	d001      	beq.n	800666e <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800666a:	2303      	movs	r3, #3
 800666c:	e039      	b.n	80066e2 <HAL_UART_Transmit+0x104>
      }
      if (pdata8bits == NULL)
 800666e:	69fb      	ldr	r3, [r7, #28]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d10b      	bne.n	800668c <HAL_UART_Transmit+0xae>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006674:	69bb      	ldr	r3, [r7, #24]
 8006676:	881b      	ldrh	r3, [r3, #0]
 8006678:	461a      	mov	r2, r3
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006682:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006684:	69bb      	ldr	r3, [r7, #24]
 8006686:	3302      	adds	r3, #2
 8006688:	61bb      	str	r3, [r7, #24]
 800668a:	e007      	b.n	800669c <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800668c:	69fb      	ldr	r3, [r7, #28]
 800668e:	781a      	ldrb	r2, [r3, #0]
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006696:	69fb      	ldr	r3, [r7, #28]
 8006698:	3301      	adds	r3, #1
 800669a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80066a2:	b29b      	uxth	r3, r3
 80066a4:	3b01      	subs	r3, #1
 80066a6:	b29a      	uxth	r2, r3
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80066b4:	b29b      	uxth	r3, r3
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d1cc      	bne.n	8006654 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	9300      	str	r3, [sp, #0]
 80066be:	697b      	ldr	r3, [r7, #20]
 80066c0:	2200      	movs	r2, #0
 80066c2:	2140      	movs	r1, #64	; 0x40
 80066c4:	68f8      	ldr	r0, [r7, #12]
 80066c6:	f000 ffce 	bl	8007666 <UART_WaitOnFlagUntilTimeout>
 80066ca:	4603      	mov	r3, r0
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d001      	beq.n	80066d4 <HAL_UART_Transmit+0xf6>
    {
      return HAL_TIMEOUT;
 80066d0:	2303      	movs	r3, #3
 80066d2:	e006      	b.n	80066e2 <HAL_UART_Transmit+0x104>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	2220      	movs	r2, #32
 80066d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80066dc:	2300      	movs	r3, #0
 80066de:	e000      	b.n	80066e2 <HAL_UART_Transmit+0x104>
  }
  else
  {
    return HAL_BUSY;
 80066e0:	2302      	movs	r3, #2
  }
}
 80066e2:	4618      	mov	r0, r3
 80066e4:	3720      	adds	r7, #32
 80066e6:	46bd      	mov	sp, r7
 80066e8:	bd80      	pop	{r7, pc}

080066ea <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80066ea:	b580      	push	{r7, lr}
 80066ec:	b08a      	sub	sp, #40	; 0x28
 80066ee:	af02      	add	r7, sp, #8
 80066f0:	60f8      	str	r0, [r7, #12]
 80066f2:	60b9      	str	r1, [r7, #8]
 80066f4:	603b      	str	r3, [r7, #0]
 80066f6:	4613      	mov	r3, r2
 80066f8:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006700:	2b20      	cmp	r3, #32
 8006702:	f040 80b1 	bne.w	8006868 <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006706:	68bb      	ldr	r3, [r7, #8]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d002      	beq.n	8006712 <HAL_UART_Receive+0x28>
 800670c:	88fb      	ldrh	r3, [r7, #6]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d101      	bne.n	8006716 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8006712:	2301      	movs	r3, #1
 8006714:	e0a9      	b.n	800686a <HAL_UART_Receive+0x180>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	2200      	movs	r2, #0
 800671a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	2222      	movs	r2, #34	; 0x22
 8006722:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	2200      	movs	r2, #0
 800672a:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800672c:	f7fc f910 	bl	8002950 <HAL_GetTick>
 8006730:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	88fa      	ldrh	r2, [r7, #6]
 8006736:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	88fa      	ldrh	r2, [r7, #6]
 800673e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	689b      	ldr	r3, [r3, #8]
 8006746:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800674a:	d10e      	bne.n	800676a <HAL_UART_Receive+0x80>
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	691b      	ldr	r3, [r3, #16]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d105      	bne.n	8006760 <HAL_UART_Receive+0x76>
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	f240 12ff 	movw	r2, #511	; 0x1ff
 800675a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800675e:	e02d      	b.n	80067bc <HAL_UART_Receive+0xd2>
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	22ff      	movs	r2, #255	; 0xff
 8006764:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006768:	e028      	b.n	80067bc <HAL_UART_Receive+0xd2>
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	689b      	ldr	r3, [r3, #8]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d10d      	bne.n	800678e <HAL_UART_Receive+0xa4>
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	691b      	ldr	r3, [r3, #16]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d104      	bne.n	8006784 <HAL_UART_Receive+0x9a>
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	22ff      	movs	r2, #255	; 0xff
 800677e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006782:	e01b      	b.n	80067bc <HAL_UART_Receive+0xd2>
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	227f      	movs	r2, #127	; 0x7f
 8006788:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800678c:	e016      	b.n	80067bc <HAL_UART_Receive+0xd2>
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	689b      	ldr	r3, [r3, #8]
 8006792:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006796:	d10d      	bne.n	80067b4 <HAL_UART_Receive+0xca>
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	691b      	ldr	r3, [r3, #16]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d104      	bne.n	80067aa <HAL_UART_Receive+0xc0>
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	227f      	movs	r2, #127	; 0x7f
 80067a4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80067a8:	e008      	b.n	80067bc <HAL_UART_Receive+0xd2>
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	223f      	movs	r2, #63	; 0x3f
 80067ae:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80067b2:	e003      	b.n	80067bc <HAL_UART_Receive+0xd2>
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	2200      	movs	r2, #0
 80067b8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80067c2:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	689b      	ldr	r3, [r3, #8]
 80067c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067cc:	d108      	bne.n	80067e0 <HAL_UART_Receive+0xf6>
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	691b      	ldr	r3, [r3, #16]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d104      	bne.n	80067e0 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80067d6:	2300      	movs	r3, #0
 80067d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80067da:	68bb      	ldr	r3, [r7, #8]
 80067dc:	61bb      	str	r3, [r7, #24]
 80067de:	e003      	b.n	80067e8 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80067e0:	68bb      	ldr	r3, [r7, #8]
 80067e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80067e4:	2300      	movs	r3, #0
 80067e6:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80067e8:	e032      	b.n	8006850 <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	9300      	str	r3, [sp, #0]
 80067ee:	697b      	ldr	r3, [r7, #20]
 80067f0:	2200      	movs	r2, #0
 80067f2:	2120      	movs	r1, #32
 80067f4:	68f8      	ldr	r0, [r7, #12]
 80067f6:	f000 ff36 	bl	8007666 <UART_WaitOnFlagUntilTimeout>
 80067fa:	4603      	mov	r3, r0
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d001      	beq.n	8006804 <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 8006800:	2303      	movs	r3, #3
 8006802:	e032      	b.n	800686a <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 8006804:	69fb      	ldr	r3, [r7, #28]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d10c      	bne.n	8006824 <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006810:	b29a      	uxth	r2, r3
 8006812:	8a7b      	ldrh	r3, [r7, #18]
 8006814:	4013      	ands	r3, r2
 8006816:	b29a      	uxth	r2, r3
 8006818:	69bb      	ldr	r3, [r7, #24]
 800681a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800681c:	69bb      	ldr	r3, [r7, #24]
 800681e:	3302      	adds	r3, #2
 8006820:	61bb      	str	r3, [r7, #24]
 8006822:	e00c      	b.n	800683e <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800682a:	b2da      	uxtb	r2, r3
 800682c:	8a7b      	ldrh	r3, [r7, #18]
 800682e:	b2db      	uxtb	r3, r3
 8006830:	4013      	ands	r3, r2
 8006832:	b2da      	uxtb	r2, r3
 8006834:	69fb      	ldr	r3, [r7, #28]
 8006836:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8006838:	69fb      	ldr	r3, [r7, #28]
 800683a:	3301      	adds	r3, #1
 800683c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006844:	b29b      	uxth	r3, r3
 8006846:	3b01      	subs	r3, #1
 8006848:	b29a      	uxth	r2, r3
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006856:	b29b      	uxth	r3, r3
 8006858:	2b00      	cmp	r3, #0
 800685a:	d1c6      	bne.n	80067ea <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	2220      	movs	r2, #32
 8006860:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 8006864:	2300      	movs	r3, #0
 8006866:	e000      	b.n	800686a <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 8006868:	2302      	movs	r3, #2
  }
}
 800686a:	4618      	mov	r0, r3
 800686c:	3720      	adds	r7, #32
 800686e:	46bd      	mov	sp, r7
 8006870:	bd80      	pop	{r7, pc}
	...

08006874 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006874:	b580      	push	{r7, lr}
 8006876:	b08a      	sub	sp, #40	; 0x28
 8006878:	af00      	add	r7, sp, #0
 800687a:	60f8      	str	r0, [r7, #12]
 800687c:	60b9      	str	r1, [r7, #8]
 800687e:	4613      	mov	r3, r2
 8006880:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006888:	2b20      	cmp	r3, #32
 800688a:	d137      	bne.n	80068fc <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800688c:	68bb      	ldr	r3, [r7, #8]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d002      	beq.n	8006898 <HAL_UART_Receive_DMA+0x24>
 8006892:	88fb      	ldrh	r3, [r7, #6]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d101      	bne.n	800689c <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8006898:	2301      	movs	r3, #1
 800689a:	e030      	b.n	80068fe <HAL_UART_Receive_DMA+0x8a>
      }
    }

#endif /* CORE_CM0PLUS */
    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	2200      	movs	r2, #0
 80068a0:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	4a18      	ldr	r2, [pc, #96]	; (8006908 <HAL_UART_Receive_DMA+0x94>)
 80068a8:	4293      	cmp	r3, r2
 80068aa:	d01f      	beq.n	80068ec <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	685b      	ldr	r3, [r3, #4]
 80068b2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d018      	beq.n	80068ec <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068c0:	697b      	ldr	r3, [r7, #20]
 80068c2:	e853 3f00 	ldrex	r3, [r3]
 80068c6:	613b      	str	r3, [r7, #16]
   return(result);
 80068c8:	693b      	ldr	r3, [r7, #16]
 80068ca:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80068ce:	627b      	str	r3, [r7, #36]	; 0x24
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	461a      	mov	r2, r3
 80068d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068d8:	623b      	str	r3, [r7, #32]
 80068da:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068dc:	69f9      	ldr	r1, [r7, #28]
 80068de:	6a3a      	ldr	r2, [r7, #32]
 80068e0:	e841 2300 	strex	r3, r2, [r1]
 80068e4:	61bb      	str	r3, [r7, #24]
   return(result);
 80068e6:	69bb      	ldr	r3, [r7, #24]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d1e6      	bne.n	80068ba <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80068ec:	88fb      	ldrh	r3, [r7, #6]
 80068ee:	461a      	mov	r2, r3
 80068f0:	68b9      	ldr	r1, [r7, #8]
 80068f2:	68f8      	ldr	r0, [r7, #12]
 80068f4:	f000 ff80 	bl	80077f8 <UART_Start_Receive_DMA>
 80068f8:	4603      	mov	r3, r0
 80068fa:	e000      	b.n	80068fe <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80068fc:	2302      	movs	r3, #2
  }
}
 80068fe:	4618      	mov	r0, r3
 8006900:	3728      	adds	r7, #40	; 0x28
 8006902:	46bd      	mov	sp, r7
 8006904:	bd80      	pop	{r7, pc}
 8006906:	bf00      	nop
 8006908:	40008000 	.word	0x40008000

0800690c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b0ba      	sub	sp, #232	; 0xe8
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	69db      	ldr	r3, [r3, #28]
 800691a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	689b      	ldr	r3, [r3, #8]
 800692e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006932:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006936:	f640 030f 	movw	r3, #2063	; 0x80f
 800693a:	4013      	ands	r3, r2
 800693c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006940:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006944:	2b00      	cmp	r3, #0
 8006946:	d11b      	bne.n	8006980 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006948:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800694c:	f003 0320 	and.w	r3, r3, #32
 8006950:	2b00      	cmp	r3, #0
 8006952:	d015      	beq.n	8006980 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006954:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006958:	f003 0320 	and.w	r3, r3, #32
 800695c:	2b00      	cmp	r3, #0
 800695e:	d105      	bne.n	800696c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006960:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006964:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006968:	2b00      	cmp	r3, #0
 800696a:	d009      	beq.n	8006980 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006970:	2b00      	cmp	r3, #0
 8006972:	f000 82e3 	beq.w	8006f3c <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800697a:	6878      	ldr	r0, [r7, #4]
 800697c:	4798      	blx	r3
      }
      return;
 800697e:	e2dd      	b.n	8006f3c <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006980:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006984:	2b00      	cmp	r3, #0
 8006986:	f000 8123 	beq.w	8006bd0 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800698a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800698e:	4b8d      	ldr	r3, [pc, #564]	; (8006bc4 <HAL_UART_IRQHandler+0x2b8>)
 8006990:	4013      	ands	r3, r2
 8006992:	2b00      	cmp	r3, #0
 8006994:	d106      	bne.n	80069a4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006996:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800699a:	4b8b      	ldr	r3, [pc, #556]	; (8006bc8 <HAL_UART_IRQHandler+0x2bc>)
 800699c:	4013      	ands	r3, r2
 800699e:	2b00      	cmp	r3, #0
 80069a0:	f000 8116 	beq.w	8006bd0 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80069a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069a8:	f003 0301 	and.w	r3, r3, #1
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d011      	beq.n	80069d4 <HAL_UART_IRQHandler+0xc8>
 80069b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d00b      	beq.n	80069d4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	2201      	movs	r2, #1
 80069c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069ca:	f043 0201 	orr.w	r2, r3, #1
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80069d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069d8:	f003 0302 	and.w	r3, r3, #2
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d011      	beq.n	8006a04 <HAL_UART_IRQHandler+0xf8>
 80069e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80069e4:	f003 0301 	and.w	r3, r3, #1
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d00b      	beq.n	8006a04 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	2202      	movs	r2, #2
 80069f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069fa:	f043 0204 	orr.w	r2, r3, #4
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006a04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a08:	f003 0304 	and.w	r3, r3, #4
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d011      	beq.n	8006a34 <HAL_UART_IRQHandler+0x128>
 8006a10:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a14:	f003 0301 	and.w	r3, r3, #1
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d00b      	beq.n	8006a34 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	2204      	movs	r2, #4
 8006a22:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a2a:	f043 0202 	orr.w	r2, r3, #2
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006a34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a38:	f003 0308 	and.w	r3, r3, #8
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d017      	beq.n	8006a70 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006a40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a44:	f003 0320 	and.w	r3, r3, #32
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d105      	bne.n	8006a58 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006a4c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006a50:	4b5c      	ldr	r3, [pc, #368]	; (8006bc4 <HAL_UART_IRQHandler+0x2b8>)
 8006a52:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d00b      	beq.n	8006a70 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	2208      	movs	r2, #8
 8006a5e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a66:	f043 0208 	orr.w	r2, r3, #8
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006a70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d012      	beq.n	8006aa2 <HAL_UART_IRQHandler+0x196>
 8006a7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a80:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d00c      	beq.n	8006aa2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006a90:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a98:	f043 0220 	orr.w	r2, r3, #32
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	f000 8249 	beq.w	8006f40 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006aae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ab2:	f003 0320 	and.w	r3, r3, #32
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d013      	beq.n	8006ae2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006aba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006abe:	f003 0320 	and.w	r3, r3, #32
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d105      	bne.n	8006ad2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006ac6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006aca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d007      	beq.n	8006ae2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d003      	beq.n	8006ae2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ade:	6878      	ldr	r0, [r7, #4]
 8006ae0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ae8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	689b      	ldr	r3, [r3, #8]
 8006af2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006af6:	2b40      	cmp	r3, #64	; 0x40
 8006af8:	d005      	beq.n	8006b06 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006afa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006afe:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d054      	beq.n	8006bb0 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006b06:	6878      	ldr	r0, [r7, #4]
 8006b08:	f000 ff5c 	bl	80079c4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	689b      	ldr	r3, [r3, #8]
 8006b12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b16:	2b40      	cmp	r3, #64	; 0x40
 8006b18:	d146      	bne.n	8006ba8 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	3308      	adds	r3, #8
 8006b20:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b24:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006b28:	e853 3f00 	ldrex	r3, [r3]
 8006b2c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006b30:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006b34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b38:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	3308      	adds	r3, #8
 8006b42:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006b46:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006b4a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b4e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006b52:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006b56:	e841 2300 	strex	r3, r2, [r1]
 8006b5a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006b5e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d1d9      	bne.n	8006b1a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d017      	beq.n	8006ba0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b76:	4a15      	ldr	r2, [pc, #84]	; (8006bcc <HAL_UART_IRQHandler+0x2c0>)
 8006b78:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b80:	4618      	mov	r0, r3
 8006b82:	f7fc fe9f 	bl	80038c4 <HAL_DMA_Abort_IT>
 8006b86:	4603      	mov	r3, r0
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d019      	beq.n	8006bc0 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b94:	687a      	ldr	r2, [r7, #4]
 8006b96:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8006b9a:	4610      	mov	r0, r2
 8006b9c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b9e:	e00f      	b.n	8006bc0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006ba0:	6878      	ldr	r0, [r7, #4]
 8006ba2:	f000 f9e9 	bl	8006f78 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ba6:	e00b      	b.n	8006bc0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006ba8:	6878      	ldr	r0, [r7, #4]
 8006baa:	f000 f9e5 	bl	8006f78 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006bae:	e007      	b.n	8006bc0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006bb0:	6878      	ldr	r0, [r7, #4]
 8006bb2:	f000 f9e1 	bl	8006f78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2200      	movs	r2, #0
 8006bba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8006bbe:	e1bf      	b.n	8006f40 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006bc0:	bf00      	nop
    return;
 8006bc2:	e1bd      	b.n	8006f40 <HAL_UART_IRQHandler+0x634>
 8006bc4:	10000001 	.word	0x10000001
 8006bc8:	04000120 	.word	0x04000120
 8006bcc:	08007c79 	.word	0x08007c79

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006bd4:	2b01      	cmp	r3, #1
 8006bd6:	f040 8153 	bne.w	8006e80 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006bda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bde:	f003 0310 	and.w	r3, r3, #16
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	f000 814c 	beq.w	8006e80 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006be8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006bec:	f003 0310 	and.w	r3, r3, #16
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	f000 8145 	beq.w	8006e80 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	2210      	movs	r2, #16
 8006bfc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	689b      	ldr	r3, [r3, #8]
 8006c04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c08:	2b40      	cmp	r3, #64	; 0x40
 8006c0a:	f040 80bb 	bne.w	8006d84 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	685b      	ldr	r3, [r3, #4]
 8006c18:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006c1c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	f000 818f 	beq.w	8006f44 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006c2c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006c30:	429a      	cmp	r2, r3
 8006c32:	f080 8187 	bcs.w	8006f44 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006c3c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f003 0320 	and.w	r3, r3, #32
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	f040 8087 	bne.w	8006d62 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c5c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006c60:	e853 3f00 	ldrex	r3, [r3]
 8006c64:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006c68:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006c6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006c70:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	461a      	mov	r2, r3
 8006c7a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006c7e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006c82:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c86:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006c8a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006c8e:	e841 2300 	strex	r3, r2, [r1]
 8006c92:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006c96:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d1da      	bne.n	8006c54 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	3308      	adds	r3, #8
 8006ca4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ca6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006ca8:	e853 3f00 	ldrex	r3, [r3]
 8006cac:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006cae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006cb0:	f023 0301 	bic.w	r3, r3, #1
 8006cb4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	3308      	adds	r3, #8
 8006cbe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006cc2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006cc6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cc8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006cca:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006cce:	e841 2300 	strex	r3, r2, [r1]
 8006cd2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006cd4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d1e1      	bne.n	8006c9e <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	3308      	adds	r3, #8
 8006ce0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ce2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006ce4:	e853 3f00 	ldrex	r3, [r3]
 8006ce8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006cea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006cec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006cf0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	3308      	adds	r3, #8
 8006cfa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006cfe:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006d00:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d02:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006d04:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006d06:	e841 2300 	strex	r3, r2, [r1]
 8006d0a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006d0c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d1e3      	bne.n	8006cda <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	2220      	movs	r2, #32
 8006d16:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d28:	e853 3f00 	ldrex	r3, [r3]
 8006d2c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006d2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d30:	f023 0310 	bic.w	r3, r3, #16
 8006d34:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	461a      	mov	r2, r3
 8006d3e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006d42:	65bb      	str	r3, [r7, #88]	; 0x58
 8006d44:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d46:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006d48:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006d4a:	e841 2300 	strex	r3, r2, [r1]
 8006d4e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006d50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d1e4      	bne.n	8006d20 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	f7fc fd53 	bl	8003808 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	2202      	movs	r2, #2
 8006d66:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006d74:	b29b      	uxth	r3, r3
 8006d76:	1ad3      	subs	r3, r2, r3
 8006d78:	b29b      	uxth	r3, r3
 8006d7a:	4619      	mov	r1, r3
 8006d7c:	6878      	ldr	r0, [r7, #4]
 8006d7e:	f000 f904 	bl	8006f8a <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006d82:	e0df      	b.n	8006f44 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006d90:	b29b      	uxth	r3, r3
 8006d92:	1ad3      	subs	r3, r2, r3
 8006d94:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006d9e:	b29b      	uxth	r3, r3
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	f000 80d1 	beq.w	8006f48 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8006da6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	f000 80cc 	beq.w	8006f48 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006db6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006db8:	e853 3f00 	ldrex	r3, [r3]
 8006dbc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006dbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dc0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006dc4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	461a      	mov	r2, r3
 8006dce:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006dd2:	647b      	str	r3, [r7, #68]	; 0x44
 8006dd4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dd6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006dd8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006dda:	e841 2300 	strex	r3, r2, [r1]
 8006dde:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006de0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d1e4      	bne.n	8006db0 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	3308      	adds	r3, #8
 8006dec:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006df0:	e853 3f00 	ldrex	r3, [r3]
 8006df4:	623b      	str	r3, [r7, #32]
   return(result);
 8006df6:	6a3b      	ldr	r3, [r7, #32]
 8006df8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006dfc:	f023 0301 	bic.w	r3, r3, #1
 8006e00:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	3308      	adds	r3, #8
 8006e0a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006e0e:	633a      	str	r2, [r7, #48]	; 0x30
 8006e10:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e12:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006e14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e16:	e841 2300 	strex	r3, r2, [r1]
 8006e1a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d1e1      	bne.n	8006de6 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	2220      	movs	r2, #32
 8006e26:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2200      	movs	r2, #0
 8006e34:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e3c:	693b      	ldr	r3, [r7, #16]
 8006e3e:	e853 3f00 	ldrex	r3, [r3]
 8006e42:	60fb      	str	r3, [r7, #12]
   return(result);
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	f023 0310 	bic.w	r3, r3, #16
 8006e4a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	461a      	mov	r2, r3
 8006e54:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006e58:	61fb      	str	r3, [r7, #28]
 8006e5a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e5c:	69b9      	ldr	r1, [r7, #24]
 8006e5e:	69fa      	ldr	r2, [r7, #28]
 8006e60:	e841 2300 	strex	r3, r2, [r1]
 8006e64:	617b      	str	r3, [r7, #20]
   return(result);
 8006e66:	697b      	ldr	r3, [r7, #20]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d1e4      	bne.n	8006e36 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2202      	movs	r2, #2
 8006e70:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006e72:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006e76:	4619      	mov	r1, r3
 8006e78:	6878      	ldr	r0, [r7, #4]
 8006e7a:	f000 f886 	bl	8006f8a <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006e7e:	e063      	b.n	8006f48 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006e80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e84:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d00e      	beq.n	8006eaa <HAL_UART_IRQHandler+0x59e>
 8006e8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006e90:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d008      	beq.n	8006eaa <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006ea0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006ea2:	6878      	ldr	r0, [r7, #4]
 8006ea4:	f000 ff29 	bl	8007cfa <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006ea8:	e051      	b.n	8006f4e <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006eaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006eae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d014      	beq.n	8006ee0 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006eb6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006eba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d105      	bne.n	8006ece <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006ec2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006ec6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d008      	beq.n	8006ee0 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d03a      	beq.n	8006f4c <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006eda:	6878      	ldr	r0, [r7, #4]
 8006edc:	4798      	blx	r3
    }
    return;
 8006ede:	e035      	b.n	8006f4c <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006ee0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ee4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d009      	beq.n	8006f00 <HAL_UART_IRQHandler+0x5f4>
 8006eec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ef0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d003      	beq.n	8006f00 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8006ef8:	6878      	ldr	r0, [r7, #4]
 8006efa:	f000 fed3 	bl	8007ca4 <UART_EndTransmit_IT>
    return;
 8006efe:	e026      	b.n	8006f4e <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006f00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f04:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d009      	beq.n	8006f20 <HAL_UART_IRQHandler+0x614>
 8006f0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f10:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d003      	beq.n	8006f20 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006f18:	6878      	ldr	r0, [r7, #4]
 8006f1a:	f000 ff00 	bl	8007d1e <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006f1e:	e016      	b.n	8006f4e <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006f20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f24:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d010      	beq.n	8006f4e <HAL_UART_IRQHandler+0x642>
 8006f2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	da0c      	bge.n	8006f4e <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006f34:	6878      	ldr	r0, [r7, #4]
 8006f36:	f000 fee9 	bl	8007d0c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006f3a:	e008      	b.n	8006f4e <HAL_UART_IRQHandler+0x642>
      return;
 8006f3c:	bf00      	nop
 8006f3e:	e006      	b.n	8006f4e <HAL_UART_IRQHandler+0x642>
    return;
 8006f40:	bf00      	nop
 8006f42:	e004      	b.n	8006f4e <HAL_UART_IRQHandler+0x642>
      return;
 8006f44:	bf00      	nop
 8006f46:	e002      	b.n	8006f4e <HAL_UART_IRQHandler+0x642>
      return;
 8006f48:	bf00      	nop
 8006f4a:	e000      	b.n	8006f4e <HAL_UART_IRQHandler+0x642>
    return;
 8006f4c:	bf00      	nop
  }
}
 8006f4e:	37e8      	adds	r7, #232	; 0xe8
 8006f50:	46bd      	mov	sp, r7
 8006f52:	bd80      	pop	{r7, pc}

08006f54 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006f54:	b480      	push	{r7}
 8006f56:	b083      	sub	sp, #12
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006f5c:	bf00      	nop
 8006f5e:	370c      	adds	r7, #12
 8006f60:	46bd      	mov	sp, r7
 8006f62:	bc80      	pop	{r7}
 8006f64:	4770      	bx	lr

08006f66 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006f66:	b480      	push	{r7}
 8006f68:	b083      	sub	sp, #12
 8006f6a:	af00      	add	r7, sp, #0
 8006f6c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8006f6e:	bf00      	nop
 8006f70:	370c      	adds	r7, #12
 8006f72:	46bd      	mov	sp, r7
 8006f74:	bc80      	pop	{r7}
 8006f76:	4770      	bx	lr

08006f78 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006f78:	b480      	push	{r7}
 8006f7a:	b083      	sub	sp, #12
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006f80:	bf00      	nop
 8006f82:	370c      	adds	r7, #12
 8006f84:	46bd      	mov	sp, r7
 8006f86:	bc80      	pop	{r7}
 8006f88:	4770      	bx	lr

08006f8a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006f8a:	b480      	push	{r7}
 8006f8c:	b083      	sub	sp, #12
 8006f8e:	af00      	add	r7, sp, #0
 8006f90:	6078      	str	r0, [r7, #4]
 8006f92:	460b      	mov	r3, r1
 8006f94:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006f96:	bf00      	nop
 8006f98:	370c      	adds	r7, #12
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	bc80      	pop	{r7}
 8006f9e:	4770      	bx	lr

08006fa0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006fa0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006fa4:	b08c      	sub	sp, #48	; 0x30
 8006fa6:	af00      	add	r7, sp, #0
 8006fa8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006faa:	2300      	movs	r3, #0
 8006fac:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006fb0:	697b      	ldr	r3, [r7, #20]
 8006fb2:	689a      	ldr	r2, [r3, #8]
 8006fb4:	697b      	ldr	r3, [r7, #20]
 8006fb6:	691b      	ldr	r3, [r3, #16]
 8006fb8:	431a      	orrs	r2, r3
 8006fba:	697b      	ldr	r3, [r7, #20]
 8006fbc:	695b      	ldr	r3, [r3, #20]
 8006fbe:	431a      	orrs	r2, r3
 8006fc0:	697b      	ldr	r3, [r7, #20]
 8006fc2:	69db      	ldr	r3, [r3, #28]
 8006fc4:	4313      	orrs	r3, r2
 8006fc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006fc8:	697b      	ldr	r3, [r7, #20]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	681a      	ldr	r2, [r3, #0]
 8006fce:	4b94      	ldr	r3, [pc, #592]	; (8007220 <UART_SetConfig+0x280>)
 8006fd0:	4013      	ands	r3, r2
 8006fd2:	697a      	ldr	r2, [r7, #20]
 8006fd4:	6812      	ldr	r2, [r2, #0]
 8006fd6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006fd8:	430b      	orrs	r3, r1
 8006fda:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006fdc:	697b      	ldr	r3, [r7, #20]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	685b      	ldr	r3, [r3, #4]
 8006fe2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006fe6:	697b      	ldr	r3, [r7, #20]
 8006fe8:	68da      	ldr	r2, [r3, #12]
 8006fea:	697b      	ldr	r3, [r7, #20]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	430a      	orrs	r2, r1
 8006ff0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006ff2:	697b      	ldr	r3, [r7, #20]
 8006ff4:	699b      	ldr	r3, [r3, #24]
 8006ff6:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006ff8:	697b      	ldr	r3, [r7, #20]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	4a89      	ldr	r2, [pc, #548]	; (8007224 <UART_SetConfig+0x284>)
 8006ffe:	4293      	cmp	r3, r2
 8007000:	d004      	beq.n	800700c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007002:	697b      	ldr	r3, [r7, #20]
 8007004:	6a1b      	ldr	r3, [r3, #32]
 8007006:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007008:	4313      	orrs	r3, r2
 800700a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800700c:	697b      	ldr	r3, [r7, #20]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	689b      	ldr	r3, [r3, #8]
 8007012:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8007016:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800701a:	697a      	ldr	r2, [r7, #20]
 800701c:	6812      	ldr	r2, [r2, #0]
 800701e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007020:	430b      	orrs	r3, r1
 8007022:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007024:	697b      	ldr	r3, [r7, #20]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800702a:	f023 010f 	bic.w	r1, r3, #15
 800702e:	697b      	ldr	r3, [r7, #20]
 8007030:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007032:	697b      	ldr	r3, [r7, #20]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	430a      	orrs	r2, r1
 8007038:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800703a:	697b      	ldr	r3, [r7, #20]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	4a7a      	ldr	r2, [pc, #488]	; (8007228 <UART_SetConfig+0x288>)
 8007040:	4293      	cmp	r3, r2
 8007042:	d127      	bne.n	8007094 <UART_SetConfig+0xf4>
 8007044:	2003      	movs	r0, #3
 8007046:	f7ff fa59 	bl	80064fc <LL_RCC_GetUSARTClockSource>
 800704a:	4603      	mov	r3, r0
 800704c:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 8007050:	2b03      	cmp	r3, #3
 8007052:	d81b      	bhi.n	800708c <UART_SetConfig+0xec>
 8007054:	a201      	add	r2, pc, #4	; (adr r2, 800705c <UART_SetConfig+0xbc>)
 8007056:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800705a:	bf00      	nop
 800705c:	0800706d 	.word	0x0800706d
 8007060:	0800707d 	.word	0x0800707d
 8007064:	08007075 	.word	0x08007075
 8007068:	08007085 	.word	0x08007085
 800706c:	2301      	movs	r3, #1
 800706e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007072:	e080      	b.n	8007176 <UART_SetConfig+0x1d6>
 8007074:	2302      	movs	r3, #2
 8007076:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800707a:	e07c      	b.n	8007176 <UART_SetConfig+0x1d6>
 800707c:	2304      	movs	r3, #4
 800707e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007082:	e078      	b.n	8007176 <UART_SetConfig+0x1d6>
 8007084:	2308      	movs	r3, #8
 8007086:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800708a:	e074      	b.n	8007176 <UART_SetConfig+0x1d6>
 800708c:	2310      	movs	r3, #16
 800708e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007092:	e070      	b.n	8007176 <UART_SetConfig+0x1d6>
 8007094:	697b      	ldr	r3, [r7, #20]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	4a64      	ldr	r2, [pc, #400]	; (800722c <UART_SetConfig+0x28c>)
 800709a:	4293      	cmp	r3, r2
 800709c:	d138      	bne.n	8007110 <UART_SetConfig+0x170>
 800709e:	200c      	movs	r0, #12
 80070a0:	f7ff fa2c 	bl	80064fc <LL_RCC_GetUSARTClockSource>
 80070a4:	4603      	mov	r3, r0
 80070a6:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 80070aa:	2b0c      	cmp	r3, #12
 80070ac:	d82c      	bhi.n	8007108 <UART_SetConfig+0x168>
 80070ae:	a201      	add	r2, pc, #4	; (adr r2, 80070b4 <UART_SetConfig+0x114>)
 80070b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070b4:	080070e9 	.word	0x080070e9
 80070b8:	08007109 	.word	0x08007109
 80070bc:	08007109 	.word	0x08007109
 80070c0:	08007109 	.word	0x08007109
 80070c4:	080070f9 	.word	0x080070f9
 80070c8:	08007109 	.word	0x08007109
 80070cc:	08007109 	.word	0x08007109
 80070d0:	08007109 	.word	0x08007109
 80070d4:	080070f1 	.word	0x080070f1
 80070d8:	08007109 	.word	0x08007109
 80070dc:	08007109 	.word	0x08007109
 80070e0:	08007109 	.word	0x08007109
 80070e4:	08007101 	.word	0x08007101
 80070e8:	2300      	movs	r3, #0
 80070ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80070ee:	e042      	b.n	8007176 <UART_SetConfig+0x1d6>
 80070f0:	2302      	movs	r3, #2
 80070f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80070f6:	e03e      	b.n	8007176 <UART_SetConfig+0x1d6>
 80070f8:	2304      	movs	r3, #4
 80070fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80070fe:	e03a      	b.n	8007176 <UART_SetConfig+0x1d6>
 8007100:	2308      	movs	r3, #8
 8007102:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007106:	e036      	b.n	8007176 <UART_SetConfig+0x1d6>
 8007108:	2310      	movs	r3, #16
 800710a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800710e:	e032      	b.n	8007176 <UART_SetConfig+0x1d6>
 8007110:	697b      	ldr	r3, [r7, #20]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	4a43      	ldr	r2, [pc, #268]	; (8007224 <UART_SetConfig+0x284>)
 8007116:	4293      	cmp	r3, r2
 8007118:	d12a      	bne.n	8007170 <UART_SetConfig+0x1d0>
 800711a:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800711e:	f7ff f9ff 	bl	8006520 <LL_RCC_GetLPUARTClockSource>
 8007122:	4603      	mov	r3, r0
 8007124:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007128:	d01a      	beq.n	8007160 <UART_SetConfig+0x1c0>
 800712a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800712e:	d81b      	bhi.n	8007168 <UART_SetConfig+0x1c8>
 8007130:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007134:	d00c      	beq.n	8007150 <UART_SetConfig+0x1b0>
 8007136:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800713a:	d815      	bhi.n	8007168 <UART_SetConfig+0x1c8>
 800713c:	2b00      	cmp	r3, #0
 800713e:	d003      	beq.n	8007148 <UART_SetConfig+0x1a8>
 8007140:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007144:	d008      	beq.n	8007158 <UART_SetConfig+0x1b8>
 8007146:	e00f      	b.n	8007168 <UART_SetConfig+0x1c8>
 8007148:	2300      	movs	r3, #0
 800714a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800714e:	e012      	b.n	8007176 <UART_SetConfig+0x1d6>
 8007150:	2302      	movs	r3, #2
 8007152:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007156:	e00e      	b.n	8007176 <UART_SetConfig+0x1d6>
 8007158:	2304      	movs	r3, #4
 800715a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800715e:	e00a      	b.n	8007176 <UART_SetConfig+0x1d6>
 8007160:	2308      	movs	r3, #8
 8007162:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007166:	e006      	b.n	8007176 <UART_SetConfig+0x1d6>
 8007168:	2310      	movs	r3, #16
 800716a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800716e:	e002      	b.n	8007176 <UART_SetConfig+0x1d6>
 8007170:	2310      	movs	r3, #16
 8007172:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007176:	697b      	ldr	r3, [r7, #20]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	4a2a      	ldr	r2, [pc, #168]	; (8007224 <UART_SetConfig+0x284>)
 800717c:	4293      	cmp	r3, r2
 800717e:	f040 80a4 	bne.w	80072ca <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007182:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007186:	2b08      	cmp	r3, #8
 8007188:	d823      	bhi.n	80071d2 <UART_SetConfig+0x232>
 800718a:	a201      	add	r2, pc, #4	; (adr r2, 8007190 <UART_SetConfig+0x1f0>)
 800718c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007190:	080071b5 	.word	0x080071b5
 8007194:	080071d3 	.word	0x080071d3
 8007198:	080071bd 	.word	0x080071bd
 800719c:	080071d3 	.word	0x080071d3
 80071a0:	080071c3 	.word	0x080071c3
 80071a4:	080071d3 	.word	0x080071d3
 80071a8:	080071d3 	.word	0x080071d3
 80071ac:	080071d3 	.word	0x080071d3
 80071b0:	080071cb 	.word	0x080071cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80071b4:	f7fd ff46 	bl	8005044 <HAL_RCC_GetPCLK1Freq>
 80071b8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80071ba:	e010      	b.n	80071de <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80071bc:	4b1c      	ldr	r3, [pc, #112]	; (8007230 <UART_SetConfig+0x290>)
 80071be:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80071c0:	e00d      	b.n	80071de <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80071c2:	f7fd fe8b 	bl	8004edc <HAL_RCC_GetSysClockFreq>
 80071c6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80071c8:	e009      	b.n	80071de <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80071ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80071ce:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80071d0:	e005      	b.n	80071de <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 80071d2:	2300      	movs	r3, #0
 80071d4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80071d6:	2301      	movs	r3, #1
 80071d8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80071dc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80071de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	f000 8137 	beq.w	8007454 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80071e6:	697b      	ldr	r3, [r7, #20]
 80071e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071ea:	4a12      	ldr	r2, [pc, #72]	; (8007234 <UART_SetConfig+0x294>)
 80071ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80071f0:	461a      	mov	r2, r3
 80071f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071f4:	fbb3 f3f2 	udiv	r3, r3, r2
 80071f8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80071fa:	697b      	ldr	r3, [r7, #20]
 80071fc:	685a      	ldr	r2, [r3, #4]
 80071fe:	4613      	mov	r3, r2
 8007200:	005b      	lsls	r3, r3, #1
 8007202:	4413      	add	r3, r2
 8007204:	69ba      	ldr	r2, [r7, #24]
 8007206:	429a      	cmp	r2, r3
 8007208:	d305      	bcc.n	8007216 <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800720a:	697b      	ldr	r3, [r7, #20]
 800720c:	685b      	ldr	r3, [r3, #4]
 800720e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007210:	69ba      	ldr	r2, [r7, #24]
 8007212:	429a      	cmp	r2, r3
 8007214:	d910      	bls.n	8007238 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 8007216:	2301      	movs	r3, #1
 8007218:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800721c:	e11a      	b.n	8007454 <UART_SetConfig+0x4b4>
 800721e:	bf00      	nop
 8007220:	cfff69f3 	.word	0xcfff69f3
 8007224:	40008000 	.word	0x40008000
 8007228:	40013800 	.word	0x40013800
 800722c:	40004400 	.word	0x40004400
 8007230:	00f42400 	.word	0x00f42400
 8007234:	0800cc78 	.word	0x0800cc78
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800723a:	2200      	movs	r2, #0
 800723c:	60bb      	str	r3, [r7, #8]
 800723e:	60fa      	str	r2, [r7, #12]
 8007240:	697b      	ldr	r3, [r7, #20]
 8007242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007244:	4a8e      	ldr	r2, [pc, #568]	; (8007480 <UART_SetConfig+0x4e0>)
 8007246:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800724a:	b29b      	uxth	r3, r3
 800724c:	2200      	movs	r2, #0
 800724e:	603b      	str	r3, [r7, #0]
 8007250:	607a      	str	r2, [r7, #4]
 8007252:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007256:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800725a:	f7f8 ffe1 	bl	8000220 <__aeabi_uldivmod>
 800725e:	4602      	mov	r2, r0
 8007260:	460b      	mov	r3, r1
 8007262:	4610      	mov	r0, r2
 8007264:	4619      	mov	r1, r3
 8007266:	f04f 0200 	mov.w	r2, #0
 800726a:	f04f 0300 	mov.w	r3, #0
 800726e:	020b      	lsls	r3, r1, #8
 8007270:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007274:	0202      	lsls	r2, r0, #8
 8007276:	6979      	ldr	r1, [r7, #20]
 8007278:	6849      	ldr	r1, [r1, #4]
 800727a:	0849      	lsrs	r1, r1, #1
 800727c:	2000      	movs	r0, #0
 800727e:	460c      	mov	r4, r1
 8007280:	4605      	mov	r5, r0
 8007282:	eb12 0804 	adds.w	r8, r2, r4
 8007286:	eb43 0905 	adc.w	r9, r3, r5
 800728a:	697b      	ldr	r3, [r7, #20]
 800728c:	685b      	ldr	r3, [r3, #4]
 800728e:	2200      	movs	r2, #0
 8007290:	469a      	mov	sl, r3
 8007292:	4693      	mov	fp, r2
 8007294:	4652      	mov	r2, sl
 8007296:	465b      	mov	r3, fp
 8007298:	4640      	mov	r0, r8
 800729a:	4649      	mov	r1, r9
 800729c:	f7f8 ffc0 	bl	8000220 <__aeabi_uldivmod>
 80072a0:	4602      	mov	r2, r0
 80072a2:	460b      	mov	r3, r1
 80072a4:	4613      	mov	r3, r2
 80072a6:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80072a8:	6a3b      	ldr	r3, [r7, #32]
 80072aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80072ae:	d308      	bcc.n	80072c2 <UART_SetConfig+0x322>
 80072b0:	6a3b      	ldr	r3, [r7, #32]
 80072b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80072b6:	d204      	bcs.n	80072c2 <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 80072b8:	697b      	ldr	r3, [r7, #20]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	6a3a      	ldr	r2, [r7, #32]
 80072be:	60da      	str	r2, [r3, #12]
 80072c0:	e0c8      	b.n	8007454 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 80072c2:	2301      	movs	r3, #1
 80072c4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80072c8:	e0c4      	b.n	8007454 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80072ca:	697b      	ldr	r3, [r7, #20]
 80072cc:	69db      	ldr	r3, [r3, #28]
 80072ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80072d2:	d167      	bne.n	80073a4 <UART_SetConfig+0x404>
  {
    switch (clocksource)
 80072d4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80072d8:	2b08      	cmp	r3, #8
 80072da:	d828      	bhi.n	800732e <UART_SetConfig+0x38e>
 80072dc:	a201      	add	r2, pc, #4	; (adr r2, 80072e4 <UART_SetConfig+0x344>)
 80072de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072e2:	bf00      	nop
 80072e4:	08007309 	.word	0x08007309
 80072e8:	08007311 	.word	0x08007311
 80072ec:	08007319 	.word	0x08007319
 80072f0:	0800732f 	.word	0x0800732f
 80072f4:	0800731f 	.word	0x0800731f
 80072f8:	0800732f 	.word	0x0800732f
 80072fc:	0800732f 	.word	0x0800732f
 8007300:	0800732f 	.word	0x0800732f
 8007304:	08007327 	.word	0x08007327
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007308:	f7fd fe9c 	bl	8005044 <HAL_RCC_GetPCLK1Freq>
 800730c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800730e:	e014      	b.n	800733a <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007310:	f7fd feaa 	bl	8005068 <HAL_RCC_GetPCLK2Freq>
 8007314:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007316:	e010      	b.n	800733a <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007318:	4b5a      	ldr	r3, [pc, #360]	; (8007484 <UART_SetConfig+0x4e4>)
 800731a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800731c:	e00d      	b.n	800733a <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800731e:	f7fd fddd 	bl	8004edc <HAL_RCC_GetSysClockFreq>
 8007322:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007324:	e009      	b.n	800733a <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007326:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800732a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800732c:	e005      	b.n	800733a <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 800732e:	2300      	movs	r3, #0
 8007330:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007332:	2301      	movs	r3, #1
 8007334:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007338:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800733a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800733c:	2b00      	cmp	r3, #0
 800733e:	f000 8089 	beq.w	8007454 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007342:	697b      	ldr	r3, [r7, #20]
 8007344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007346:	4a4e      	ldr	r2, [pc, #312]	; (8007480 <UART_SetConfig+0x4e0>)
 8007348:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800734c:	461a      	mov	r2, r3
 800734e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007350:	fbb3 f3f2 	udiv	r3, r3, r2
 8007354:	005a      	lsls	r2, r3, #1
 8007356:	697b      	ldr	r3, [r7, #20]
 8007358:	685b      	ldr	r3, [r3, #4]
 800735a:	085b      	lsrs	r3, r3, #1
 800735c:	441a      	add	r2, r3
 800735e:	697b      	ldr	r3, [r7, #20]
 8007360:	685b      	ldr	r3, [r3, #4]
 8007362:	fbb2 f3f3 	udiv	r3, r2, r3
 8007366:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007368:	6a3b      	ldr	r3, [r7, #32]
 800736a:	2b0f      	cmp	r3, #15
 800736c:	d916      	bls.n	800739c <UART_SetConfig+0x3fc>
 800736e:	6a3b      	ldr	r3, [r7, #32]
 8007370:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007374:	d212      	bcs.n	800739c <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007376:	6a3b      	ldr	r3, [r7, #32]
 8007378:	b29b      	uxth	r3, r3
 800737a:	f023 030f 	bic.w	r3, r3, #15
 800737e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007380:	6a3b      	ldr	r3, [r7, #32]
 8007382:	085b      	lsrs	r3, r3, #1
 8007384:	b29b      	uxth	r3, r3
 8007386:	f003 0307 	and.w	r3, r3, #7
 800738a:	b29a      	uxth	r2, r3
 800738c:	8bfb      	ldrh	r3, [r7, #30]
 800738e:	4313      	orrs	r3, r2
 8007390:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007392:	697b      	ldr	r3, [r7, #20]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	8bfa      	ldrh	r2, [r7, #30]
 8007398:	60da      	str	r2, [r3, #12]
 800739a:	e05b      	b.n	8007454 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 800739c:	2301      	movs	r3, #1
 800739e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80073a2:	e057      	b.n	8007454 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80073a4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80073a8:	2b08      	cmp	r3, #8
 80073aa:	d828      	bhi.n	80073fe <UART_SetConfig+0x45e>
 80073ac:	a201      	add	r2, pc, #4	; (adr r2, 80073b4 <UART_SetConfig+0x414>)
 80073ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073b2:	bf00      	nop
 80073b4:	080073d9 	.word	0x080073d9
 80073b8:	080073e1 	.word	0x080073e1
 80073bc:	080073e9 	.word	0x080073e9
 80073c0:	080073ff 	.word	0x080073ff
 80073c4:	080073ef 	.word	0x080073ef
 80073c8:	080073ff 	.word	0x080073ff
 80073cc:	080073ff 	.word	0x080073ff
 80073d0:	080073ff 	.word	0x080073ff
 80073d4:	080073f7 	.word	0x080073f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80073d8:	f7fd fe34 	bl	8005044 <HAL_RCC_GetPCLK1Freq>
 80073dc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80073de:	e014      	b.n	800740a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80073e0:	f7fd fe42 	bl	8005068 <HAL_RCC_GetPCLK2Freq>
 80073e4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80073e6:	e010      	b.n	800740a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80073e8:	4b26      	ldr	r3, [pc, #152]	; (8007484 <UART_SetConfig+0x4e4>)
 80073ea:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80073ec:	e00d      	b.n	800740a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80073ee:	f7fd fd75 	bl	8004edc <HAL_RCC_GetSysClockFreq>
 80073f2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80073f4:	e009      	b.n	800740a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80073f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80073fa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80073fc:	e005      	b.n	800740a <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 80073fe:	2300      	movs	r3, #0
 8007400:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007402:	2301      	movs	r3, #1
 8007404:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007408:	bf00      	nop
    }

    if (pclk != 0U)
 800740a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800740c:	2b00      	cmp	r3, #0
 800740e:	d021      	beq.n	8007454 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007410:	697b      	ldr	r3, [r7, #20]
 8007412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007414:	4a1a      	ldr	r2, [pc, #104]	; (8007480 <UART_SetConfig+0x4e0>)
 8007416:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800741a:	461a      	mov	r2, r3
 800741c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800741e:	fbb3 f2f2 	udiv	r2, r3, r2
 8007422:	697b      	ldr	r3, [r7, #20]
 8007424:	685b      	ldr	r3, [r3, #4]
 8007426:	085b      	lsrs	r3, r3, #1
 8007428:	441a      	add	r2, r3
 800742a:	697b      	ldr	r3, [r7, #20]
 800742c:	685b      	ldr	r3, [r3, #4]
 800742e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007432:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007434:	6a3b      	ldr	r3, [r7, #32]
 8007436:	2b0f      	cmp	r3, #15
 8007438:	d909      	bls.n	800744e <UART_SetConfig+0x4ae>
 800743a:	6a3b      	ldr	r3, [r7, #32]
 800743c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007440:	d205      	bcs.n	800744e <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007442:	6a3b      	ldr	r3, [r7, #32]
 8007444:	b29a      	uxth	r2, r3
 8007446:	697b      	ldr	r3, [r7, #20]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	60da      	str	r2, [r3, #12]
 800744c:	e002      	b.n	8007454 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 800744e:	2301      	movs	r3, #1
 8007450:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007454:	697b      	ldr	r3, [r7, #20]
 8007456:	2201      	movs	r2, #1
 8007458:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800745c:	697b      	ldr	r3, [r7, #20]
 800745e:	2201      	movs	r2, #1
 8007460:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007464:	697b      	ldr	r3, [r7, #20]
 8007466:	2200      	movs	r2, #0
 8007468:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800746a:	697b      	ldr	r3, [r7, #20]
 800746c:	2200      	movs	r2, #0
 800746e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8007470:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8007474:	4618      	mov	r0, r3
 8007476:	3730      	adds	r7, #48	; 0x30
 8007478:	46bd      	mov	sp, r7
 800747a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800747e:	bf00      	nop
 8007480:	0800cc78 	.word	0x0800cc78
 8007484:	00f42400 	.word	0x00f42400

08007488 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007488:	b480      	push	{r7}
 800748a:	b083      	sub	sp, #12
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007494:	f003 0301 	and.w	r3, r3, #1
 8007498:	2b00      	cmp	r3, #0
 800749a:	d00a      	beq.n	80074b2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	685b      	ldr	r3, [r3, #4]
 80074a2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	430a      	orrs	r2, r1
 80074b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074b6:	f003 0302 	and.w	r3, r3, #2
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d00a      	beq.n	80074d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	685b      	ldr	r3, [r3, #4]
 80074c4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	430a      	orrs	r2, r1
 80074d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074d8:	f003 0304 	and.w	r3, r3, #4
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d00a      	beq.n	80074f6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	685b      	ldr	r3, [r3, #4]
 80074e6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	430a      	orrs	r2, r1
 80074f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074fa:	f003 0308 	and.w	r3, r3, #8
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d00a      	beq.n	8007518 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	685b      	ldr	r3, [r3, #4]
 8007508:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	430a      	orrs	r2, r1
 8007516:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800751c:	f003 0310 	and.w	r3, r3, #16
 8007520:	2b00      	cmp	r3, #0
 8007522:	d00a      	beq.n	800753a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	689b      	ldr	r3, [r3, #8]
 800752a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	430a      	orrs	r2, r1
 8007538:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800753e:	f003 0320 	and.w	r3, r3, #32
 8007542:	2b00      	cmp	r3, #0
 8007544:	d00a      	beq.n	800755c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	689b      	ldr	r3, [r3, #8]
 800754c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	430a      	orrs	r2, r1
 800755a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007560:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007564:	2b00      	cmp	r3, #0
 8007566:	d01a      	beq.n	800759e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	685b      	ldr	r3, [r3, #4]
 800756e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	430a      	orrs	r2, r1
 800757c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007582:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007586:	d10a      	bne.n	800759e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	685b      	ldr	r3, [r3, #4]
 800758e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	430a      	orrs	r2, r1
 800759c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d00a      	beq.n	80075c0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	685b      	ldr	r3, [r3, #4]
 80075b0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	430a      	orrs	r2, r1
 80075be:	605a      	str	r2, [r3, #4]
  }
}
 80075c0:	bf00      	nop
 80075c2:	370c      	adds	r7, #12
 80075c4:	46bd      	mov	sp, r7
 80075c6:	bc80      	pop	{r7}
 80075c8:	4770      	bx	lr

080075ca <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80075ca:	b580      	push	{r7, lr}
 80075cc:	b086      	sub	sp, #24
 80075ce:	af02      	add	r7, sp, #8
 80075d0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	2200      	movs	r2, #0
 80075d6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80075da:	f7fb f9b9 	bl	8002950 <HAL_GetTick>
 80075de:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	f003 0308 	and.w	r3, r3, #8
 80075ea:	2b08      	cmp	r3, #8
 80075ec:	d10e      	bne.n	800760c <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80075ee:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80075f2:	9300      	str	r3, [sp, #0]
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	2200      	movs	r2, #0
 80075f8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80075fc:	6878      	ldr	r0, [r7, #4]
 80075fe:	f000 f832 	bl	8007666 <UART_WaitOnFlagUntilTimeout>
 8007602:	4603      	mov	r3, r0
 8007604:	2b00      	cmp	r3, #0
 8007606:	d001      	beq.n	800760c <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007608:	2303      	movs	r3, #3
 800760a:	e028      	b.n	800765e <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	f003 0304 	and.w	r3, r3, #4
 8007616:	2b04      	cmp	r3, #4
 8007618:	d10e      	bne.n	8007638 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800761a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800761e:	9300      	str	r3, [sp, #0]
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	2200      	movs	r2, #0
 8007624:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007628:	6878      	ldr	r0, [r7, #4]
 800762a:	f000 f81c 	bl	8007666 <UART_WaitOnFlagUntilTimeout>
 800762e:	4603      	mov	r3, r0
 8007630:	2b00      	cmp	r3, #0
 8007632:	d001      	beq.n	8007638 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007634:	2303      	movs	r3, #3
 8007636:	e012      	b.n	800765e <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2220      	movs	r2, #32
 800763c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2220      	movs	r2, #32
 8007644:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2200      	movs	r2, #0
 800764c:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	2200      	movs	r2, #0
 8007652:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2200      	movs	r2, #0
 8007658:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800765c:	2300      	movs	r3, #0
}
 800765e:	4618      	mov	r0, r3
 8007660:	3710      	adds	r7, #16
 8007662:	46bd      	mov	sp, r7
 8007664:	bd80      	pop	{r7, pc}

08007666 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007666:	b580      	push	{r7, lr}
 8007668:	b09c      	sub	sp, #112	; 0x70
 800766a:	af00      	add	r7, sp, #0
 800766c:	60f8      	str	r0, [r7, #12]
 800766e:	60b9      	str	r1, [r7, #8]
 8007670:	603b      	str	r3, [r7, #0]
 8007672:	4613      	mov	r3, r2
 8007674:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007676:	e0a9      	b.n	80077cc <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007678:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800767a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800767e:	f000 80a5 	beq.w	80077cc <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007682:	f7fb f965 	bl	8002950 <HAL_GetTick>
 8007686:	4602      	mov	r2, r0
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	1ad3      	subs	r3, r2, r3
 800768c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800768e:	429a      	cmp	r2, r3
 8007690:	d302      	bcc.n	8007698 <UART_WaitOnFlagUntilTimeout+0x32>
 8007692:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007694:	2b00      	cmp	r3, #0
 8007696:	d140      	bne.n	800771a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800769e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80076a0:	e853 3f00 	ldrex	r3, [r3]
 80076a4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80076a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80076a8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80076ac:	667b      	str	r3, [r7, #100]	; 0x64
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	461a      	mov	r2, r3
 80076b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80076b6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80076b8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076ba:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80076bc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80076be:	e841 2300 	strex	r3, r2, [r1]
 80076c2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80076c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d1e6      	bne.n	8007698 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	3308      	adds	r3, #8
 80076d0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076d4:	e853 3f00 	ldrex	r3, [r3]
 80076d8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80076da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076dc:	f023 0301 	bic.w	r3, r3, #1
 80076e0:	663b      	str	r3, [r7, #96]	; 0x60
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	3308      	adds	r3, #8
 80076e8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80076ea:	64ba      	str	r2, [r7, #72]	; 0x48
 80076ec:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076ee:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80076f0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80076f2:	e841 2300 	strex	r3, r2, [r1]
 80076f6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80076f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d1e5      	bne.n	80076ca <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	2220      	movs	r2, #32
 8007702:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	2220      	movs	r2, #32
 800770a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	2200      	movs	r2, #0
 8007712:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

        return HAL_TIMEOUT;
 8007716:	2303      	movs	r3, #3
 8007718:	e069      	b.n	80077ee <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	f003 0304 	and.w	r3, r3, #4
 8007724:	2b00      	cmp	r3, #0
 8007726:	d051      	beq.n	80077cc <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	69db      	ldr	r3, [r3, #28]
 800772e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007732:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007736:	d149      	bne.n	80077cc <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007740:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800774a:	e853 3f00 	ldrex	r3, [r3]
 800774e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007752:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007756:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	461a      	mov	r2, r3
 800775e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007760:	637b      	str	r3, [r7, #52]	; 0x34
 8007762:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007764:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007766:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007768:	e841 2300 	strex	r3, r2, [r1]
 800776c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800776e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007770:	2b00      	cmp	r3, #0
 8007772:	d1e6      	bne.n	8007742 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	3308      	adds	r3, #8
 800777a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800777c:	697b      	ldr	r3, [r7, #20]
 800777e:	e853 3f00 	ldrex	r3, [r3]
 8007782:	613b      	str	r3, [r7, #16]
   return(result);
 8007784:	693b      	ldr	r3, [r7, #16]
 8007786:	f023 0301 	bic.w	r3, r3, #1
 800778a:	66bb      	str	r3, [r7, #104]	; 0x68
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	3308      	adds	r3, #8
 8007792:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007794:	623a      	str	r2, [r7, #32]
 8007796:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007798:	69f9      	ldr	r1, [r7, #28]
 800779a:	6a3a      	ldr	r2, [r7, #32]
 800779c:	e841 2300 	strex	r3, r2, [r1]
 80077a0:	61bb      	str	r3, [r7, #24]
   return(result);
 80077a2:	69bb      	ldr	r3, [r7, #24]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d1e5      	bne.n	8007774 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	2220      	movs	r2, #32
 80077ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	2220      	movs	r2, #32
 80077b4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	2220      	movs	r2, #32
 80077bc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	2200      	movs	r2, #0
 80077c4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80077c8:	2303      	movs	r3, #3
 80077ca:	e010      	b.n	80077ee <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	69da      	ldr	r2, [r3, #28]
 80077d2:	68bb      	ldr	r3, [r7, #8]
 80077d4:	4013      	ands	r3, r2
 80077d6:	68ba      	ldr	r2, [r7, #8]
 80077d8:	429a      	cmp	r2, r3
 80077da:	bf0c      	ite	eq
 80077dc:	2301      	moveq	r3, #1
 80077de:	2300      	movne	r3, #0
 80077e0:	b2db      	uxtb	r3, r3
 80077e2:	461a      	mov	r2, r3
 80077e4:	79fb      	ldrb	r3, [r7, #7]
 80077e6:	429a      	cmp	r2, r3
 80077e8:	f43f af46 	beq.w	8007678 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80077ec:	2300      	movs	r3, #0
}
 80077ee:	4618      	mov	r0, r3
 80077f0:	3770      	adds	r7, #112	; 0x70
 80077f2:	46bd      	mov	sp, r7
 80077f4:	bd80      	pop	{r7, pc}
	...

080077f8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b096      	sub	sp, #88	; 0x58
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	60f8      	str	r0, [r7, #12]
 8007800:	60b9      	str	r1, [r7, #8]
 8007802:	4613      	mov	r3, r2
 8007804:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	68ba      	ldr	r2, [r7, #8]
 800780a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	88fa      	ldrh	r2, [r7, #6]
 8007810:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	2200      	movs	r2, #0
 8007818:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	2222      	movs	r2, #34	; 0x22
 8007820:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if (huart->hdmarx != NULL)
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800782a:	2b00      	cmp	r3, #0
 800782c:	d02d      	beq.n	800788a <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007834:	4a40      	ldr	r2, [pc, #256]	; (8007938 <UART_Start_Receive_DMA+0x140>)
 8007836:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800783e:	4a3f      	ldr	r2, [pc, #252]	; (800793c <UART_Start_Receive_DMA+0x144>)
 8007840:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007848:	4a3d      	ldr	r2, [pc, #244]	; (8007940 <UART_Start_Receive_DMA+0x148>)
 800784a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007852:	2200      	movs	r2, #0
 8007854:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	3324      	adds	r3, #36	; 0x24
 8007862:	4619      	mov	r1, r3
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007868:	461a      	mov	r2, r3
 800786a:	88fb      	ldrh	r3, [r7, #6]
 800786c:	f7fb ff4e 	bl	800370c <HAL_DMA_Start_IT>
 8007870:	4603      	mov	r3, r0
 8007872:	2b00      	cmp	r3, #0
 8007874:	d009      	beq.n	800788a <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	2210      	movs	r2, #16
 800787a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	2220      	movs	r2, #32
 8007882:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      return HAL_ERROR;
 8007886:	2301      	movs	r3, #1
 8007888:	e051      	b.n	800792e <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	691b      	ldr	r3, [r3, #16]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d018      	beq.n	80078c4 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007898:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800789a:	e853 3f00 	ldrex	r3, [r3]
 800789e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80078a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80078a6:	657b      	str	r3, [r7, #84]	; 0x54
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	461a      	mov	r2, r3
 80078ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80078b0:	64bb      	str	r3, [r7, #72]	; 0x48
 80078b2:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078b4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80078b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80078b8:	e841 2300 	strex	r3, r2, [r1]
 80078bc:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80078be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d1e6      	bne.n	8007892 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	3308      	adds	r3, #8
 80078ca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078ce:	e853 3f00 	ldrex	r3, [r3]
 80078d2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80078d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078d6:	f043 0301 	orr.w	r3, r3, #1
 80078da:	653b      	str	r3, [r7, #80]	; 0x50
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	3308      	adds	r3, #8
 80078e2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80078e4:	637a      	str	r2, [r7, #52]	; 0x34
 80078e6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078e8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80078ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80078ec:	e841 2300 	strex	r3, r2, [r1]
 80078f0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80078f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d1e5      	bne.n	80078c4 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	3308      	adds	r3, #8
 80078fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007900:	697b      	ldr	r3, [r7, #20]
 8007902:	e853 3f00 	ldrex	r3, [r3]
 8007906:	613b      	str	r3, [r7, #16]
   return(result);
 8007908:	693b      	ldr	r3, [r7, #16]
 800790a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800790e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	3308      	adds	r3, #8
 8007916:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007918:	623a      	str	r2, [r7, #32]
 800791a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800791c:	69f9      	ldr	r1, [r7, #28]
 800791e:	6a3a      	ldr	r2, [r7, #32]
 8007920:	e841 2300 	strex	r3, r2, [r1]
 8007924:	61bb      	str	r3, [r7, #24]
   return(result);
 8007926:	69bb      	ldr	r3, [r7, #24]
 8007928:	2b00      	cmp	r3, #0
 800792a:	d1e5      	bne.n	80078f8 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800792c:	2300      	movs	r3, #0
}
 800792e:	4618      	mov	r0, r3
 8007930:	3758      	adds	r7, #88	; 0x58
 8007932:	46bd      	mov	sp, r7
 8007934:	bd80      	pop	{r7, pc}
 8007936:	bf00      	nop
 8007938:	08007a8f 	.word	0x08007a8f
 800793c:	08007bbb 	.word	0x08007bbb
 8007940:	08007bf9 	.word	0x08007bf9

08007944 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007944:	b480      	push	{r7}
 8007946:	b08f      	sub	sp, #60	; 0x3c
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007952:	6a3b      	ldr	r3, [r7, #32]
 8007954:	e853 3f00 	ldrex	r3, [r3]
 8007958:	61fb      	str	r3, [r7, #28]
   return(result);
 800795a:	69fb      	ldr	r3, [r7, #28]
 800795c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007960:	637b      	str	r3, [r7, #52]	; 0x34
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	461a      	mov	r2, r3
 8007968:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800796a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800796c:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800796e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007970:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007972:	e841 2300 	strex	r3, r2, [r1]
 8007976:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800797a:	2b00      	cmp	r3, #0
 800797c:	d1e6      	bne.n	800794c <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	3308      	adds	r3, #8
 8007984:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	e853 3f00 	ldrex	r3, [r3]
 800798c:	60bb      	str	r3, [r7, #8]
   return(result);
 800798e:	68bb      	ldr	r3, [r7, #8]
 8007990:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8007994:	633b      	str	r3, [r7, #48]	; 0x30
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	3308      	adds	r3, #8
 800799c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800799e:	61ba      	str	r2, [r7, #24]
 80079a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079a2:	6979      	ldr	r1, [r7, #20]
 80079a4:	69ba      	ldr	r2, [r7, #24]
 80079a6:	e841 2300 	strex	r3, r2, [r1]
 80079aa:	613b      	str	r3, [r7, #16]
   return(result);
 80079ac:	693b      	ldr	r3, [r7, #16]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d1e5      	bne.n	800797e <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	2220      	movs	r2, #32
 80079b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 80079ba:	bf00      	nop
 80079bc:	373c      	adds	r7, #60	; 0x3c
 80079be:	46bd      	mov	sp, r7
 80079c0:	bc80      	pop	{r7}
 80079c2:	4770      	bx	lr

080079c4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80079c4:	b480      	push	{r7}
 80079c6:	b095      	sub	sp, #84	; 0x54
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079d4:	e853 3f00 	ldrex	r3, [r3]
 80079d8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80079da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079dc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80079e0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	461a      	mov	r2, r3
 80079e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80079ea:	643b      	str	r3, [r7, #64]	; 0x40
 80079ec:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079ee:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80079f0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80079f2:	e841 2300 	strex	r3, r2, [r1]
 80079f6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80079f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d1e6      	bne.n	80079cc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	3308      	adds	r3, #8
 8007a04:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a06:	6a3b      	ldr	r3, [r7, #32]
 8007a08:	e853 3f00 	ldrex	r3, [r3]
 8007a0c:	61fb      	str	r3, [r7, #28]
   return(result);
 8007a0e:	69fb      	ldr	r3, [r7, #28]
 8007a10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007a14:	f023 0301 	bic.w	r3, r3, #1
 8007a18:	64bb      	str	r3, [r7, #72]	; 0x48
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	3308      	adds	r3, #8
 8007a20:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007a22:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007a24:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a26:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007a28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a2a:	e841 2300 	strex	r3, r2, [r1]
 8007a2e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d1e3      	bne.n	80079fe <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a3a:	2b01      	cmp	r3, #1
 8007a3c:	d118      	bne.n	8007a70 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	e853 3f00 	ldrex	r3, [r3]
 8007a4a:	60bb      	str	r3, [r7, #8]
   return(result);
 8007a4c:	68bb      	ldr	r3, [r7, #8]
 8007a4e:	f023 0310 	bic.w	r3, r3, #16
 8007a52:	647b      	str	r3, [r7, #68]	; 0x44
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	461a      	mov	r2, r3
 8007a5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007a5c:	61bb      	str	r3, [r7, #24]
 8007a5e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a60:	6979      	ldr	r1, [r7, #20]
 8007a62:	69ba      	ldr	r2, [r7, #24]
 8007a64:	e841 2300 	strex	r3, r2, [r1]
 8007a68:	613b      	str	r3, [r7, #16]
   return(result);
 8007a6a:	693b      	ldr	r3, [r7, #16]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d1e6      	bne.n	8007a3e <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	2220      	movs	r2, #32
 8007a74:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	2200      	movs	r2, #0
 8007a82:	675a      	str	r2, [r3, #116]	; 0x74
}
 8007a84:	bf00      	nop
 8007a86:	3754      	adds	r7, #84	; 0x54
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	bc80      	pop	{r7}
 8007a8c:	4770      	bx	lr

08007a8e <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007a8e:	b580      	push	{r7, lr}
 8007a90:	b09c      	sub	sp, #112	; 0x70
 8007a92:	af00      	add	r7, sp, #0
 8007a94:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a9a:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	f003 0320 	and.w	r3, r3, #32
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d171      	bne.n	8007b8e <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8007aaa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007aac:	2200      	movs	r2, #0
 8007aae:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007ab2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ab8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007aba:	e853 3f00 	ldrex	r3, [r3]
 8007abe:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007ac0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007ac2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007ac6:	66bb      	str	r3, [r7, #104]	; 0x68
 8007ac8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	461a      	mov	r2, r3
 8007ace:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007ad0:	65bb      	str	r3, [r7, #88]	; 0x58
 8007ad2:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ad4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007ad6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007ad8:	e841 2300 	strex	r3, r2, [r1]
 8007adc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007ade:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d1e6      	bne.n	8007ab2 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ae4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	3308      	adds	r3, #8
 8007aea:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aee:	e853 3f00 	ldrex	r3, [r3]
 8007af2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007af4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007af6:	f023 0301 	bic.w	r3, r3, #1
 8007afa:	667b      	str	r3, [r7, #100]	; 0x64
 8007afc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	3308      	adds	r3, #8
 8007b02:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007b04:	647a      	str	r2, [r7, #68]	; 0x44
 8007b06:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b08:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007b0a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007b0c:	e841 2300 	strex	r3, r2, [r1]
 8007b10:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007b12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d1e5      	bne.n	8007ae4 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007b18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	3308      	adds	r3, #8
 8007b1e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b22:	e853 3f00 	ldrex	r3, [r3]
 8007b26:	623b      	str	r3, [r7, #32]
   return(result);
 8007b28:	6a3b      	ldr	r3, [r7, #32]
 8007b2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b2e:	663b      	str	r3, [r7, #96]	; 0x60
 8007b30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	3308      	adds	r3, #8
 8007b36:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007b38:	633a      	str	r2, [r7, #48]	; 0x30
 8007b3a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b3c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007b3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b40:	e841 2300 	strex	r3, r2, [r1]
 8007b44:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007b46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d1e5      	bne.n	8007b18 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007b4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b4e:	2220      	movs	r2, #32
 8007b50:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b58:	2b01      	cmp	r3, #1
 8007b5a:	d118      	bne.n	8007b8e <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b62:	693b      	ldr	r3, [r7, #16]
 8007b64:	e853 3f00 	ldrex	r3, [r3]
 8007b68:	60fb      	str	r3, [r7, #12]
   return(result);
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	f023 0310 	bic.w	r3, r3, #16
 8007b70:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007b72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	461a      	mov	r2, r3
 8007b78:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007b7a:	61fb      	str	r3, [r7, #28]
 8007b7c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b7e:	69b9      	ldr	r1, [r7, #24]
 8007b80:	69fa      	ldr	r2, [r7, #28]
 8007b82:	e841 2300 	strex	r3, r2, [r1]
 8007b86:	617b      	str	r3, [r7, #20]
   return(result);
 8007b88:	697b      	ldr	r3, [r7, #20]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d1e6      	bne.n	8007b5c <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007b8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b90:	2200      	movs	r2, #0
 8007b92:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b98:	2b01      	cmp	r3, #1
 8007b9a:	d107      	bne.n	8007bac <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007b9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b9e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007ba2:	4619      	mov	r1, r3
 8007ba4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007ba6:	f7ff f9f0 	bl	8006f8a <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007baa:	e002      	b.n	8007bb2 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8007bac:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007bae:	f7f9 f937 	bl	8000e20 <HAL_UART_RxCpltCallback>
}
 8007bb2:	bf00      	nop
 8007bb4:	3770      	adds	r7, #112	; 0x70
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	bd80      	pop	{r7, pc}

08007bba <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007bba:	b580      	push	{r7, lr}
 8007bbc:	b084      	sub	sp, #16
 8007bbe:	af00      	add	r7, sp, #0
 8007bc0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bc6:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	2201      	movs	r2, #1
 8007bcc:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007bd2:	2b01      	cmp	r3, #1
 8007bd4:	d109      	bne.n	8007bea <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007bdc:	085b      	lsrs	r3, r3, #1
 8007bde:	b29b      	uxth	r3, r3
 8007be0:	4619      	mov	r1, r3
 8007be2:	68f8      	ldr	r0, [r7, #12]
 8007be4:	f7ff f9d1 	bl	8006f8a <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007be8:	e002      	b.n	8007bf0 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8007bea:	68f8      	ldr	r0, [r7, #12]
 8007bec:	f7ff f9bb 	bl	8006f66 <HAL_UART_RxHalfCpltCallback>
}
 8007bf0:	bf00      	nop
 8007bf2:	3710      	adds	r7, #16
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	bd80      	pop	{r7, pc}

08007bf8 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b086      	sub	sp, #24
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c04:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8007c06:	697b      	ldr	r3, [r7, #20]
 8007c08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c0c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8007c0e:	697b      	ldr	r3, [r7, #20]
 8007c10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007c14:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8007c16:	697b      	ldr	r3, [r7, #20]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	689b      	ldr	r3, [r3, #8]
 8007c1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c20:	2b80      	cmp	r3, #128	; 0x80
 8007c22:	d109      	bne.n	8007c38 <UART_DMAError+0x40>
 8007c24:	693b      	ldr	r3, [r7, #16]
 8007c26:	2b21      	cmp	r3, #33	; 0x21
 8007c28:	d106      	bne.n	8007c38 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8007c2a:	697b      	ldr	r3, [r7, #20]
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8007c32:	6978      	ldr	r0, [r7, #20]
 8007c34:	f7ff fe86 	bl	8007944 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007c38:	697b      	ldr	r3, [r7, #20]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	689b      	ldr	r3, [r3, #8]
 8007c3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c42:	2b40      	cmp	r3, #64	; 0x40
 8007c44:	d109      	bne.n	8007c5a <UART_DMAError+0x62>
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	2b22      	cmp	r3, #34	; 0x22
 8007c4a:	d106      	bne.n	8007c5a <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8007c4c:	697b      	ldr	r3, [r7, #20]
 8007c4e:	2200      	movs	r2, #0
 8007c50:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8007c54:	6978      	ldr	r0, [r7, #20]
 8007c56:	f7ff feb5 	bl	80079c4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007c5a:	697b      	ldr	r3, [r7, #20]
 8007c5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c60:	f043 0210 	orr.w	r2, r3, #16
 8007c64:	697b      	ldr	r3, [r7, #20]
 8007c66:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007c6a:	6978      	ldr	r0, [r7, #20]
 8007c6c:	f7ff f984 	bl	8006f78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007c70:	bf00      	nop
 8007c72:	3718      	adds	r7, #24
 8007c74:	46bd      	mov	sp, r7
 8007c76:	bd80      	pop	{r7, pc}

08007c78 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b084      	sub	sp, #16
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c84:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	2200      	movs	r2, #0
 8007c8a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	2200      	movs	r2, #0
 8007c92:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007c96:	68f8      	ldr	r0, [r7, #12]
 8007c98:	f7ff f96e 	bl	8006f78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007c9c:	bf00      	nop
 8007c9e:	3710      	adds	r7, #16
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	bd80      	pop	{r7, pc}

08007ca4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b088      	sub	sp, #32
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	e853 3f00 	ldrex	r3, [r3]
 8007cb8:	60bb      	str	r3, [r7, #8]
   return(result);
 8007cba:	68bb      	ldr	r3, [r7, #8]
 8007cbc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007cc0:	61fb      	str	r3, [r7, #28]
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	461a      	mov	r2, r3
 8007cc8:	69fb      	ldr	r3, [r7, #28]
 8007cca:	61bb      	str	r3, [r7, #24]
 8007ccc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cce:	6979      	ldr	r1, [r7, #20]
 8007cd0:	69ba      	ldr	r2, [r7, #24]
 8007cd2:	e841 2300 	strex	r3, r2, [r1]
 8007cd6:	613b      	str	r3, [r7, #16]
   return(result);
 8007cd8:	693b      	ldr	r3, [r7, #16]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d1e6      	bne.n	8007cac <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	2220      	movs	r2, #32
 8007ce2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	2200      	movs	r2, #0
 8007cea:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007cec:	6878      	ldr	r0, [r7, #4]
 8007cee:	f7ff f931 	bl	8006f54 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007cf2:	bf00      	nop
 8007cf4:	3720      	adds	r7, #32
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	bd80      	pop	{r7, pc}

08007cfa <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007cfa:	b480      	push	{r7}
 8007cfc:	b083      	sub	sp, #12
 8007cfe:	af00      	add	r7, sp, #0
 8007d00:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007d02:	bf00      	nop
 8007d04:	370c      	adds	r7, #12
 8007d06:	46bd      	mov	sp, r7
 8007d08:	bc80      	pop	{r7}
 8007d0a:	4770      	bx	lr

08007d0c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007d0c:	b480      	push	{r7}
 8007d0e:	b083      	sub	sp, #12
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007d14:	bf00      	nop
 8007d16:	370c      	adds	r7, #12
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	bc80      	pop	{r7}
 8007d1c:	4770      	bx	lr

08007d1e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007d1e:	b480      	push	{r7}
 8007d20:	b083      	sub	sp, #12
 8007d22:	af00      	add	r7, sp, #0
 8007d24:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007d26:	bf00      	nop
 8007d28:	370c      	adds	r7, #12
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	bc80      	pop	{r7}
 8007d2e:	4770      	bx	lr

08007d30 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007d30:	b480      	push	{r7}
 8007d32:	b085      	sub	sp, #20
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007d3e:	2b01      	cmp	r3, #1
 8007d40:	d101      	bne.n	8007d46 <HAL_UARTEx_DisableFifoMode+0x16>
 8007d42:	2302      	movs	r3, #2
 8007d44:	e027      	b.n	8007d96 <HAL_UARTEx_DisableFifoMode+0x66>
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	2201      	movs	r2, #1
 8007d4a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	2224      	movs	r2, #36	; 0x24
 8007d52:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	681a      	ldr	r2, [r3, #0]
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	f022 0201 	bic.w	r2, r2, #1
 8007d6c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007d74:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	2200      	movs	r2, #0
 8007d7a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	68fa      	ldr	r2, [r7, #12]
 8007d82:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2220      	movs	r2, #32
 8007d88:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2200      	movs	r2, #0
 8007d90:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007d94:	2300      	movs	r3, #0
}
 8007d96:	4618      	mov	r0, r3
 8007d98:	3714      	adds	r7, #20
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	bc80      	pop	{r7}
 8007d9e:	4770      	bx	lr

08007da0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007da0:	b580      	push	{r7, lr}
 8007da2:	b084      	sub	sp, #16
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]
 8007da8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007db0:	2b01      	cmp	r3, #1
 8007db2:	d101      	bne.n	8007db8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007db4:	2302      	movs	r3, #2
 8007db6:	e02d      	b.n	8007e14 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2201      	movs	r2, #1
 8007dbc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	2224      	movs	r2, #36	; 0x24
 8007dc4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	681a      	ldr	r2, [r3, #0]
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	f022 0201 	bic.w	r2, r2, #1
 8007dde:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	689b      	ldr	r3, [r3, #8]
 8007de6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	683a      	ldr	r2, [r7, #0]
 8007df0:	430a      	orrs	r2, r1
 8007df2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007df4:	6878      	ldr	r0, [r7, #4]
 8007df6:	f000 f84f 	bl	8007e98 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	68fa      	ldr	r2, [r7, #12]
 8007e00:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	2220      	movs	r2, #32
 8007e06:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	2200      	movs	r2, #0
 8007e0e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007e12:	2300      	movs	r3, #0
}
 8007e14:	4618      	mov	r0, r3
 8007e16:	3710      	adds	r7, #16
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	bd80      	pop	{r7, pc}

08007e1c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b084      	sub	sp, #16
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
 8007e24:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007e2c:	2b01      	cmp	r3, #1
 8007e2e:	d101      	bne.n	8007e34 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007e30:	2302      	movs	r3, #2
 8007e32:	e02d      	b.n	8007e90 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	2201      	movs	r2, #1
 8007e38:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	2224      	movs	r2, #36	; 0x24
 8007e40:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	681a      	ldr	r2, [r3, #0]
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	f022 0201 	bic.w	r2, r2, #1
 8007e5a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	689b      	ldr	r3, [r3, #8]
 8007e62:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	683a      	ldr	r2, [r7, #0]
 8007e6c:	430a      	orrs	r2, r1
 8007e6e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007e70:	6878      	ldr	r0, [r7, #4]
 8007e72:	f000 f811 	bl	8007e98 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	68fa      	ldr	r2, [r7, #12]
 8007e7c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	2220      	movs	r2, #32
 8007e82:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	2200      	movs	r2, #0
 8007e8a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007e8e:	2300      	movs	r3, #0
}
 8007e90:	4618      	mov	r0, r3
 8007e92:	3710      	adds	r7, #16
 8007e94:	46bd      	mov	sp, r7
 8007e96:	bd80      	pop	{r7, pc}

08007e98 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007e98:	b480      	push	{r7}
 8007e9a:	b085      	sub	sp, #20
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d108      	bne.n	8007eba <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2201      	movs	r2, #1
 8007eac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	2201      	movs	r2, #1
 8007eb4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007eb8:	e031      	b.n	8007f1e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007eba:	2308      	movs	r3, #8
 8007ebc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007ebe:	2308      	movs	r3, #8
 8007ec0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	689b      	ldr	r3, [r3, #8]
 8007ec8:	0e5b      	lsrs	r3, r3, #25
 8007eca:	b2db      	uxtb	r3, r3
 8007ecc:	f003 0307 	and.w	r3, r3, #7
 8007ed0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	689b      	ldr	r3, [r3, #8]
 8007ed8:	0f5b      	lsrs	r3, r3, #29
 8007eda:	b2db      	uxtb	r3, r3
 8007edc:	f003 0307 	and.w	r3, r3, #7
 8007ee0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007ee2:	7bbb      	ldrb	r3, [r7, #14]
 8007ee4:	7b3a      	ldrb	r2, [r7, #12]
 8007ee6:	4910      	ldr	r1, [pc, #64]	; (8007f28 <UARTEx_SetNbDataToProcess+0x90>)
 8007ee8:	5c8a      	ldrb	r2, [r1, r2]
 8007eea:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007eee:	7b3a      	ldrb	r2, [r7, #12]
 8007ef0:	490e      	ldr	r1, [pc, #56]	; (8007f2c <UARTEx_SetNbDataToProcess+0x94>)
 8007ef2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007ef4:	fb93 f3f2 	sdiv	r3, r3, r2
 8007ef8:	b29a      	uxth	r2, r3
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007f00:	7bfb      	ldrb	r3, [r7, #15]
 8007f02:	7b7a      	ldrb	r2, [r7, #13]
 8007f04:	4908      	ldr	r1, [pc, #32]	; (8007f28 <UARTEx_SetNbDataToProcess+0x90>)
 8007f06:	5c8a      	ldrb	r2, [r1, r2]
 8007f08:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007f0c:	7b7a      	ldrb	r2, [r7, #13]
 8007f0e:	4907      	ldr	r1, [pc, #28]	; (8007f2c <UARTEx_SetNbDataToProcess+0x94>)
 8007f10:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007f12:	fb93 f3f2 	sdiv	r3, r3, r2
 8007f16:	b29a      	uxth	r2, r3
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007f1e:	bf00      	nop
 8007f20:	3714      	adds	r7, #20
 8007f22:	46bd      	mov	sp, r7
 8007f24:	bc80      	pop	{r7}
 8007f26:	4770      	bx	lr
 8007f28:	0800cc90 	.word	0x0800cc90
 8007f2c:	0800cc98 	.word	0x0800cc98

08007f30 <RadioInit>:
TimerEvent_t RxTimeoutTimer;

/* Private  functions ---------------------------------------------------------*/

static void RadioInit( RadioEvents_t *events )
{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b084      	sub	sp, #16
 8007f34:	af02      	add	r7, sp, #8
 8007f36:	6078      	str	r0, [r7, #4]
    RadioEvents = events;
 8007f38:	4a24      	ldr	r2, [pc, #144]	; (8007fcc <RadioInit+0x9c>)
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	6013      	str	r3, [r2, #0]

    SubgRf.RxContinuous = false;
 8007f3e:	4b24      	ldr	r3, [pc, #144]	; (8007fd0 <RadioInit+0xa0>)
 8007f40:	2200      	movs	r2, #0
 8007f42:	705a      	strb	r2, [r3, #1]
    SubgRf.TxTimeout = 0;
 8007f44:	4b22      	ldr	r3, [pc, #136]	; (8007fd0 <RadioInit+0xa0>)
 8007f46:	2200      	movs	r2, #0
 8007f48:	605a      	str	r2, [r3, #4]
    SubgRf.RxTimeout = 0;
 8007f4a:	4b21      	ldr	r3, [pc, #132]	; (8007fd0 <RadioInit+0xa0>)
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	609a      	str	r2, [r3, #8]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8007f50:	4b1f      	ldr	r3, [pc, #124]	; (8007fd0 <RadioInit+0xa0>)
 8007f52:	2200      	movs	r2, #0
 8007f54:	659a      	str	r2, [r3, #88]	; 0x58
#if( RADIO_LR_FHSS_IS_ON == 1 )
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    SUBGRF_Init( RadioOnDioIrq );
 8007f56:	481f      	ldr	r0, [pc, #124]	; (8007fd4 <RadioInit+0xa4>)
 8007f58:	f001 ff88 	bl	8009e6c <SUBGRF_Init>
    /*SubgRf.publicNetwork set to false*/
    SubgRf.PublicNetwork.Current = false;
 8007f5c:	4b1c      	ldr	r3, [pc, #112]	; (8007fd0 <RadioInit+0xa0>)
 8007f5e:	2200      	movs	r2, #0
 8007f60:	735a      	strb	r2, [r3, #13]
    SubgRf.PublicNetwork.Previous = false;
 8007f62:	4b1b      	ldr	r3, [pc, #108]	; (8007fd0 <RadioInit+0xa0>)
 8007f64:	2200      	movs	r2, #0
 8007f66:	731a      	strb	r2, [r3, #12]

    RADIO_IRQ_PROCESS_INIT();

    SUBGRF_SetRegulatorMode( );
 8007f68:	f002 fa1c 	bl	800a3a4 <SUBGRF_SetRegulatorMode>

    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 8007f6c:	2100      	movs	r1, #0
 8007f6e:	2000      	movs	r0, #0
 8007f70:	f002 fde8 	bl	800ab44 <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams( RFO_LP, 0, RADIO_RAMP_200_US );
 8007f74:	2204      	movs	r2, #4
 8007f76:	2100      	movs	r1, #0
 8007f78:	2001      	movs	r0, #1
 8007f7a:	f002 fba5 	bl	800a6c8 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8007f7e:	2300      	movs	r3, #0
 8007f80:	2200      	movs	r2, #0
 8007f82:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8007f86:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8007f8a:	f002 fad5 	bl	800a538 <SUBGRF_SetDioIrqParams>

    RadioSleep();
 8007f8e:	f000 fe91 	bl	8008cb4 <RadioSleep>
    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 8007f92:	2300      	movs	r3, #0
 8007f94:	9300      	str	r3, [sp, #0]
 8007f96:	4b10      	ldr	r3, [pc, #64]	; (8007fd8 <RadioInit+0xa8>)
 8007f98:	2200      	movs	r2, #0
 8007f9a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007f9e:	480f      	ldr	r0, [pc, #60]	; (8007fdc <RadioInit+0xac>)
 8007fa0:	f003 fb1e 	bl	800b5e0 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 8007fa4:	2300      	movs	r3, #0
 8007fa6:	9300      	str	r3, [sp, #0]
 8007fa8:	4b0d      	ldr	r3, [pc, #52]	; (8007fe0 <RadioInit+0xb0>)
 8007faa:	2200      	movs	r2, #0
 8007fac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007fb0:	480c      	ldr	r0, [pc, #48]	; (8007fe4 <RadioInit+0xb4>)
 8007fb2:	f003 fb15 	bl	800b5e0 <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 8007fb6:	4809      	ldr	r0, [pc, #36]	; (8007fdc <RadioInit+0xac>)
 8007fb8:	f003 fbb6 	bl	800b728 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 8007fbc:	4809      	ldr	r0, [pc, #36]	; (8007fe4 <RadioInit+0xb4>)
 8007fbe:	f003 fbb3 	bl	800b728 <UTIL_TIMER_Stop>
}
 8007fc2:	bf00      	nop
 8007fc4:	3708      	adds	r7, #8
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	bd80      	pop	{r7, pc}
 8007fca:	bf00      	nop
 8007fcc:	20000a30 	.word	0x20000a30
 8007fd0:	20000a34 	.word	0x20000a34
 8007fd4:	080090ad 	.word	0x080090ad
 8007fd8:	08009035 	.word	0x08009035
 8007fdc:	20000a90 	.word	0x20000a90
 8007fe0:	08009049 	.word	0x08009049
 8007fe4:	20000aa8 	.word	0x20000aa8

08007fe8 <RadioGetStatus>:

static RadioState_t RadioGetStatus( void )
{
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	af00      	add	r7, sp, #0
    switch( SUBGRF_GetOperatingMode( ) )
 8007fec:	f001 ff86 	bl	8009efc <SUBGRF_GetOperatingMode>
 8007ff0:	4603      	mov	r3, r0
 8007ff2:	2b07      	cmp	r3, #7
 8007ff4:	d00a      	beq.n	800800c <RadioGetStatus+0x24>
 8007ff6:	2b07      	cmp	r3, #7
 8007ff8:	dc0a      	bgt.n	8008010 <RadioGetStatus+0x28>
 8007ffa:	2b04      	cmp	r3, #4
 8007ffc:	d002      	beq.n	8008004 <RadioGetStatus+0x1c>
 8007ffe:	2b05      	cmp	r3, #5
 8008000:	d002      	beq.n	8008008 <RadioGetStatus+0x20>
 8008002:	e005      	b.n	8008010 <RadioGetStatus+0x28>
    {
        case MODE_TX:
            return RF_TX_RUNNING;
 8008004:	2302      	movs	r3, #2
 8008006:	e004      	b.n	8008012 <RadioGetStatus+0x2a>
        case MODE_RX:
            return RF_RX_RUNNING;
 8008008:	2301      	movs	r3, #1
 800800a:	e002      	b.n	8008012 <RadioGetStatus+0x2a>
        case MODE_CAD:
            return RF_CAD;
 800800c:	2303      	movs	r3, #3
 800800e:	e000      	b.n	8008012 <RadioGetStatus+0x2a>
        default:
            return RF_IDLE;
 8008010:	2300      	movs	r3, #0
    }
}
 8008012:	4618      	mov	r0, r3
 8008014:	bd80      	pop	{r7, pc}
	...

08008018 <RadioSetModem>:

static void RadioSetModem( RadioModems_t modem )
{
 8008018:	b580      	push	{r7, lr}
 800801a:	b082      	sub	sp, #8
 800801c:	af00      	add	r7, sp, #0
 800801e:	4603      	mov	r3, r0
 8008020:	71fb      	strb	r3, [r7, #7]
    SubgRf.Modem = modem;
 8008022:	4a2a      	ldr	r2, [pc, #168]	; (80080cc <RadioSetModem+0xb4>)
 8008024:	79fb      	ldrb	r3, [r7, #7]
 8008026:	7013      	strb	r3, [r2, #0]
    RFW_SetRadioModem( modem );
 8008028:	79fb      	ldrb	r3, [r7, #7]
 800802a:	4618      	mov	r0, r3
 800802c:	f003 f95d 	bl	800b2ea <RFW_SetRadioModem>
    switch( modem )
 8008030:	79fb      	ldrb	r3, [r7, #7]
 8008032:	2b05      	cmp	r3, #5
 8008034:	d80e      	bhi.n	8008054 <RadioSetModem+0x3c>
 8008036:	a201      	add	r2, pc, #4	; (adr r2, 800803c <RadioSetModem+0x24>)
 8008038:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800803c:	08008063 	.word	0x08008063
 8008040:	08008071 	.word	0x08008071
 8008044:	08008055 	.word	0x08008055
 8008048:	08008097 	.word	0x08008097
 800804c:	080080a5 	.word	0x080080a5
 8008050:	080080b3 	.word	0x080080b3
    {
    default:
    case MODEM_MSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GMSK );
 8008054:	2003      	movs	r0, #3
 8008056:	f002 fb11 	bl	800a67c <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 800805a:	4b1c      	ldr	r3, [pc, #112]	; (80080cc <RadioSetModem+0xb4>)
 800805c:	2200      	movs	r2, #0
 800805e:	735a      	strb	r2, [r3, #13]
        break;
 8008060:	e02f      	b.n	80080c2 <RadioSetModem+0xaa>
    case MODEM_FSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8008062:	2000      	movs	r0, #0
 8008064:	f002 fb0a 	bl	800a67c <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8008068:	4b18      	ldr	r3, [pc, #96]	; (80080cc <RadioSetModem+0xb4>)
 800806a:	2200      	movs	r2, #0
 800806c:	735a      	strb	r2, [r3, #13]
        break;
 800806e:	e028      	b.n	80080c2 <RadioSetModem+0xaa>
    case MODEM_LORA:
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 8008070:	2001      	movs	r0, #1
 8008072:	f002 fb03 	bl	800a67c <SUBGRF_SetPacketType>
        // Public/Private network register is reset when switching modems
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 8008076:	4b15      	ldr	r3, [pc, #84]	; (80080cc <RadioSetModem+0xb4>)
 8008078:	7b5a      	ldrb	r2, [r3, #13]
 800807a:	4b14      	ldr	r3, [pc, #80]	; (80080cc <RadioSetModem+0xb4>)
 800807c:	7b1b      	ldrb	r3, [r3, #12]
 800807e:	429a      	cmp	r2, r3
 8008080:	d01e      	beq.n	80080c0 <RadioSetModem+0xa8>
        {
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 8008082:	4b12      	ldr	r3, [pc, #72]	; (80080cc <RadioSetModem+0xb4>)
 8008084:	7b1a      	ldrb	r2, [r3, #12]
 8008086:	4b11      	ldr	r3, [pc, #68]	; (80080cc <RadioSetModem+0xb4>)
 8008088:	735a      	strb	r2, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 800808a:	4b10      	ldr	r3, [pc, #64]	; (80080cc <RadioSetModem+0xb4>)
 800808c:	7b5b      	ldrb	r3, [r3, #13]
 800808e:	4618      	mov	r0, r3
 8008090:	f000 ff9a 	bl	8008fc8 <RadioSetPublicNetwork>
        }
        break;
 8008094:	e014      	b.n	80080c0 <RadioSetModem+0xa8>
    case MODEM_BPSK:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8008096:	2002      	movs	r0, #2
 8008098:	f002 faf0 	bl	800a67c <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 800809c:	4b0b      	ldr	r3, [pc, #44]	; (80080cc <RadioSetModem+0xb4>)
 800809e:	2200      	movs	r2, #0
 80080a0:	735a      	strb	r2, [r3, #13]
        break;
 80080a2:	e00e      	b.n	80080c2 <RadioSetModem+0xaa>
#if (RADIO_SIGFOX_ENABLE == 1)
    case MODEM_SIGFOX_TX:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 80080a4:	2002      	movs	r0, #2
 80080a6:	f002 fae9 	bl	800a67c <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 80080aa:	4b08      	ldr	r3, [pc, #32]	; (80080cc <RadioSetModem+0xb4>)
 80080ac:	2200      	movs	r2, #0
 80080ae:	735a      	strb	r2, [r3, #13]
        break;
 80080b0:	e007      	b.n	80080c2 <RadioSetModem+0xaa>
    case MODEM_SIGFOX_RX:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 80080b2:	2000      	movs	r0, #0
 80080b4:	f002 fae2 	bl	800a67c <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 80080b8:	4b04      	ldr	r3, [pc, #16]	; (80080cc <RadioSetModem+0xb4>)
 80080ba:	2200      	movs	r2, #0
 80080bc:	735a      	strb	r2, [r3, #13]
        break;
 80080be:	e000      	b.n	80080c2 <RadioSetModem+0xaa>
        break;
 80080c0:	bf00      	nop
#endif /*RADIO_SIGFOX_ENABLE == 1*/
    }
}
 80080c2:	bf00      	nop
 80080c4:	3708      	adds	r7, #8
 80080c6:	46bd      	mov	sp, r7
 80080c8:	bd80      	pop	{r7, pc}
 80080ca:	bf00      	nop
 80080cc:	20000a34 	.word	0x20000a34

080080d0 <RadioSetChannel>:

static void RadioSetChannel( uint32_t freq )
{
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b082      	sub	sp, #8
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
    SUBGRF_SetRfFrequency( freq );
 80080d8:	6878      	ldr	r0, [r7, #4]
 80080da:	f002 fa89 	bl	800a5f0 <SUBGRF_SetRfFrequency>
}
 80080de:	bf00      	nop
 80080e0:	3708      	adds	r7, #8
 80080e2:	46bd      	mov	sp, r7
 80080e4:	bd80      	pop	{r7, pc}

080080e6 <RadioIsChannelFree>:

static bool RadioIsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 80080e6:	b580      	push	{r7, lr}
 80080e8:	b090      	sub	sp, #64	; 0x40
 80080ea:	af0a      	add	r7, sp, #40	; 0x28
 80080ec:	60f8      	str	r0, [r7, #12]
 80080ee:	60b9      	str	r1, [r7, #8]
 80080f0:	603b      	str	r3, [r7, #0]
 80080f2:	4613      	mov	r3, r2
 80080f4:	80fb      	strh	r3, [r7, #6]
    bool status = true;
 80080f6:	2301      	movs	r3, #1
 80080f8:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 80080fa:	2300      	movs	r3, #0
 80080fc:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 80080fe:	2300      	movs	r3, #0
 8008100:	613b      	str	r3, [r7, #16]

    RadioStandby( );
 8008102:	f000 fdea 	bl	8008cda <RadioStandby>

    RadioSetModem( MODEM_FSK );
 8008106:	2000      	movs	r0, #0
 8008108:	f7ff ff86 	bl	8008018 <RadioSetModem>

    RadioSetChannel( freq );
 800810c:	68f8      	ldr	r0, [r7, #12]
 800810e:	f7ff ffdf 	bl	80080d0 <RadioSetChannel>

    // Set Rx bandwidth. Other parameters are not used.
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 8008112:	2301      	movs	r3, #1
 8008114:	9309      	str	r3, [sp, #36]	; 0x24
 8008116:	2300      	movs	r3, #0
 8008118:	9308      	str	r3, [sp, #32]
 800811a:	2300      	movs	r3, #0
 800811c:	9307      	str	r3, [sp, #28]
 800811e:	2300      	movs	r3, #0
 8008120:	9306      	str	r3, [sp, #24]
 8008122:	2300      	movs	r3, #0
 8008124:	9305      	str	r3, [sp, #20]
 8008126:	2300      	movs	r3, #0
 8008128:	9304      	str	r3, [sp, #16]
 800812a:	2300      	movs	r3, #0
 800812c:	9303      	str	r3, [sp, #12]
 800812e:	2300      	movs	r3, #0
 8008130:	9302      	str	r3, [sp, #8]
 8008132:	2303      	movs	r3, #3
 8008134:	9301      	str	r3, [sp, #4]
 8008136:	68bb      	ldr	r3, [r7, #8]
 8008138:	9300      	str	r3, [sp, #0]
 800813a:	2300      	movs	r3, #0
 800813c:	f44f 7216 	mov.w	r2, #600	; 0x258
 8008140:	68b9      	ldr	r1, [r7, #8]
 8008142:	2000      	movs	r0, #0
 8008144:	f000 f83c 	bl	80081c0 <RadioSetRxConfig>
                      0, false, 0, 0, false, true );
    RadioRx( 0 );
 8008148:	2000      	movs	r0, #0
 800814a:	f000 fdcd 	bl	8008ce8 <RadioRx>

    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 800814e:	f000 ff69 	bl	8009024 <RadioGetWakeupTime>
 8008152:	4603      	mov	r3, r0
 8008154:	4618      	mov	r0, r3
 8008156:	f7fa fc0f 	bl	8002978 <HAL_Delay>

    carrierSenseTime = TimerGetCurrentTime( );
 800815a:	f003 fb7f 	bl	800b85c <UTIL_TIMER_GetCurrentTime>
 800815e:	6138      	str	r0, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8008160:	e00d      	b.n	800817e <RadioIsChannelFree+0x98>
    {
        rssi = RadioRssi( MODEM_FSK );
 8008162:	2000      	movs	r0, #0
 8008164:	f000 feae 	bl	8008ec4 <RadioRssi>
 8008168:	4603      	mov	r3, r0
 800816a:	82bb      	strh	r3, [r7, #20]

        if( rssi > rssiThresh )
 800816c:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8008170:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008174:	429a      	cmp	r2, r3
 8008176:	dd02      	ble.n	800817e <RadioIsChannelFree+0x98>
        {
            status = false;
 8008178:	2300      	movs	r3, #0
 800817a:	75fb      	strb	r3, [r7, #23]
            break;
 800817c:	e006      	b.n	800818c <RadioIsChannelFree+0xa6>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 800817e:	6938      	ldr	r0, [r7, #16]
 8008180:	f003 fb7e 	bl	800b880 <UTIL_TIMER_GetElapsedTime>
 8008184:	4602      	mov	r2, r0
 8008186:	683b      	ldr	r3, [r7, #0]
 8008188:	4293      	cmp	r3, r2
 800818a:	d8ea      	bhi.n	8008162 <RadioIsChannelFree+0x7c>
        }
    }
    RadioStandby( );
 800818c:	f000 fda5 	bl	8008cda <RadioStandby>

    return status;
 8008190:	7dfb      	ldrb	r3, [r7, #23]
}
 8008192:	4618      	mov	r0, r3
 8008194:	3718      	adds	r7, #24
 8008196:	46bd      	mov	sp, r7
 8008198:	bd80      	pop	{r7, pc}

0800819a <RadioRandom>:

static uint32_t RadioRandom( void )
{
 800819a:	b580      	push	{r7, lr}
 800819c:	b082      	sub	sp, #8
 800819e:	af00      	add	r7, sp, #0
    uint32_t rnd = 0;
 80081a0:	2300      	movs	r3, #0
 80081a2:	607b      	str	r3, [r7, #4]

    /*
     * Radio setup for random number generation
     */
    // Disable modem interrupts
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 80081a4:	2300      	movs	r3, #0
 80081a6:	2200      	movs	r2, #0
 80081a8:	2100      	movs	r1, #0
 80081aa:	2000      	movs	r0, #0
 80081ac:	f002 f9c4 	bl	800a538 <SUBGRF_SetDioIrqParams>

    rnd = SUBGRF_GetRandom();
 80081b0:	f001 ff75 	bl	800a09e <SUBGRF_GetRandom>
 80081b4:	6078      	str	r0, [r7, #4]

    return rnd;
 80081b6:	687b      	ldr	r3, [r7, #4]
}
 80081b8:	4618      	mov	r0, r3
 80081ba:	3708      	adds	r7, #8
 80081bc:	46bd      	mov	sp, r7
 80081be:	bd80      	pop	{r7, pc}

080081c0 <RadioSetRxConfig>:
                              uint32_t bandwidthAfc, uint16_t preambleLen,
                              uint16_t symbTimeout, bool fixLen,
                              uint8_t payloadLen,
                              bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                              bool iqInverted, bool rxContinuous )
{
 80081c0:	b580      	push	{r7, lr}
 80081c2:	b08a      	sub	sp, #40	; 0x28
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	60b9      	str	r1, [r7, #8]
 80081c8:	607a      	str	r2, [r7, #4]
 80081ca:	461a      	mov	r2, r3
 80081cc:	4603      	mov	r3, r0
 80081ce:	73fb      	strb	r3, [r7, #15]
 80081d0:	4613      	mov	r3, r2
 80081d2:	73bb      	strb	r3, [r7, #14]
#if (RADIO_SIGFOX_ENABLE == 1)
    uint8_t modReg;
#endif
    SubgRf.RxContinuous = rxContinuous;
 80081d4:	4ab9      	ldr	r2, [pc, #740]	; (80084bc <RadioSetRxConfig+0x2fc>)
 80081d6:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80081da:	7053      	strb	r3, [r2, #1]
    RFW_DeInit();
 80081dc:	f003 f843 	bl	800b266 <RFW_DeInit>
    if( rxContinuous == true )
 80081e0:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d001      	beq.n	80081ec <RadioSetRxConfig+0x2c>
    {
        symbTimeout = 0;
 80081e8:	2300      	movs	r3, #0
 80081ea:	873b      	strh	r3, [r7, #56]	; 0x38
    }
    if( fixLen == true )
 80081ec:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d004      	beq.n	80081fe <RadioSetRxConfig+0x3e>
    {
        MaxPayloadLength = payloadLen;
 80081f4:	4ab2      	ldr	r2, [pc, #712]	; (80084c0 <RadioSetRxConfig+0x300>)
 80081f6:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80081fa:	7013      	strb	r3, [r2, #0]
 80081fc:	e002      	b.n	8008204 <RadioSetRxConfig+0x44>
    }
    else
    {
        MaxPayloadLength = 0xFF;
 80081fe:	4bb0      	ldr	r3, [pc, #704]	; (80084c0 <RadioSetRxConfig+0x300>)
 8008200:	22ff      	movs	r2, #255	; 0xff
 8008202:	701a      	strb	r2, [r3, #0]
    }

    switch( modem )
 8008204:	7bfb      	ldrb	r3, [r7, #15]
 8008206:	2b05      	cmp	r3, #5
 8008208:	d009      	beq.n	800821e <RadioSetRxConfig+0x5e>
 800820a:	2b05      	cmp	r3, #5
 800820c:	f300 81d7 	bgt.w	80085be <RadioSetRxConfig+0x3fe>
 8008210:	2b00      	cmp	r3, #0
 8008212:	f000 80bf 	beq.w	8008394 <RadioSetRxConfig+0x1d4>
 8008216:	2b01      	cmp	r3, #1
 8008218:	f000 8124 	beq.w	8008464 <RadioSetRxConfig+0x2a4>
            // Timeout Max, Timeout handled directly in SetRx function
            SubgRf.RxTimeout = 0xFFFF;

            break;
        default:
            break;
 800821c:	e1cf      	b.n	80085be <RadioSetRxConfig+0x3fe>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 800821e:	2001      	movs	r0, #1
 8008220:	f002 f882 	bl	800a328 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8008224:	4ba5      	ldr	r3, [pc, #660]	; (80084bc <RadioSetRxConfig+0x2fc>)
 8008226:	2200      	movs	r2, #0
 8008228:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 800822c:	4aa3      	ldr	r2, [pc, #652]	; (80084bc <RadioSetRxConfig+0x2fc>)
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 8008232:	4ba2      	ldr	r3, [pc, #648]	; (80084bc <RadioSetRxConfig+0x2fc>)
 8008234:	2209      	movs	r2, #9
 8008236:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 800823a:	4ba0      	ldr	r3, [pc, #640]	; (80084bc <RadioSetRxConfig+0x2fc>)
 800823c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8008240:	641a      	str	r2, [r3, #64]	; 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8008242:	68b8      	ldr	r0, [r7, #8]
 8008244:	f002 ff42 	bl	800b0cc <SUBGRF_GetFskBandwidthRegValue>
 8008248:	4603      	mov	r3, r0
 800824a:	461a      	mov	r2, r3
 800824c:	4b9b      	ldr	r3, [pc, #620]	; (80084bc <RadioSetRxConfig+0x2fc>)
 800824e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8008252:	4b9a      	ldr	r3, [pc, #616]	; (80084bc <RadioSetRxConfig+0x2fc>)
 8008254:	2200      	movs	r2, #0
 8008256:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8008258:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800825a:	00db      	lsls	r3, r3, #3
 800825c:	b29a      	uxth	r2, r3
 800825e:	4b97      	ldr	r3, [pc, #604]	; (80084bc <RadioSetRxConfig+0x2fc>)
 8008260:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 8008262:	4b96      	ldr	r3, [pc, #600]	; (80084bc <RadioSetRxConfig+0x2fc>)
 8008264:	2200      	movs	r2, #0
 8008266:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 8008268:	4b94      	ldr	r3, [pc, #592]	; (80084bc <RadioSetRxConfig+0x2fc>)
 800826a:	2210      	movs	r2, #16
 800826c:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 800826e:	4b93      	ldr	r3, [pc, #588]	; (80084bc <RadioSetRxConfig+0x2fc>)
 8008270:	2200      	movs	r2, #0
 8008272:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 8008274:	4b91      	ldr	r3, [pc, #580]	; (80084bc <RadioSetRxConfig+0x2fc>)
 8008276:	2200      	movs	r2, #0
 8008278:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 800827a:	4b91      	ldr	r3, [pc, #580]	; (80084c0 <RadioSetRxConfig+0x300>)
 800827c:	781a      	ldrb	r2, [r3, #0]
 800827e:	4b8f      	ldr	r3, [pc, #572]	; (80084bc <RadioSetRxConfig+0x2fc>)
 8008280:	759a      	strb	r2, [r3, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8008282:	4b8e      	ldr	r3, [pc, #568]	; (80084bc <RadioSetRxConfig+0x2fc>)
 8008284:	2201      	movs	r2, #1
 8008286:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 8008288:	4b8c      	ldr	r3, [pc, #560]	; (80084bc <RadioSetRxConfig+0x2fc>)
 800828a:	2200      	movs	r2, #0
 800828c:	761a      	strb	r2, [r3, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 800828e:	2005      	movs	r0, #5
 8008290:	f7ff fec2 	bl	8008018 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8008294:	488b      	ldr	r0, [pc, #556]	; (80084c4 <RadioSetRxConfig+0x304>)
 8008296:	f002 fae5 	bl	800a864 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800829a:	488b      	ldr	r0, [pc, #556]	; (80084c8 <RadioSetRxConfig+0x308>)
 800829c:	f002 fbb4 	bl	800aa08 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 80082a0:	4a8a      	ldr	r2, [pc, #552]	; (80084cc <RadioSetRxConfig+0x30c>)
 80082a2:	f107 031c 	add.w	r3, r7, #28
 80082a6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80082aa:	e883 0003 	stmia.w	r3, {r0, r1}
 80082ae:	f107 031c 	add.w	r3, r7, #28
 80082b2:	4618      	mov	r0, r3
 80082b4:	f001 fe71 	bl	8009f9a <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 80082b8:	f240 10ff 	movw	r0, #511	; 0x1ff
 80082bc:	f001 febc 	bl	800a038 <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(SUBGHZ_AGCGFORSTCFGR);
 80082c0:	f640 00b8 	movw	r0, #2232	; 0x8b8
 80082c4:	f000 fe1d 	bl	8008f02 <RadioRead>
 80082c8:	4603      	mov	r3, r0
 80082ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=RADIO_BIT_MASK(4);
 80082ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80082d2:	f023 0310 	bic.w	r3, r3, #16
 80082d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_AGCGFORSTCFGR, modReg);
 80082da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80082de:	4619      	mov	r1, r3
 80082e0:	f640 00b8 	movw	r0, #2232	; 0x8b8
 80082e4:	f000 fdfb 	bl	8008ede <RadioWrite>
            RadioWrite(SUBGHZ_AGCGFORSTPOWTHR, 0x4 );
 80082e8:	2104      	movs	r1, #4
 80082ea:	f640 00b9 	movw	r0, #2233	; 0x8b9
 80082ee:	f000 fdf6 	bl	8008ede <RadioWrite>
            modReg= RadioRead(SUBGHZ_AGCRSSICTL0R);
 80082f2:	f640 009b 	movw	r0, #2203	; 0x89b
 80082f6:	f000 fe04 	bl	8008f02 <RadioRead>
 80082fa:	4603      	mov	r3, r0
 80082fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8008300:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008304:	f023 031c 	bic.w	r3, r3, #28
 8008308:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_AGCRSSICTL0R, (modReg| (0x1<<3) ) );
 800830c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008310:	f043 0308 	orr.w	r3, r3, #8
 8008314:	b2db      	uxtb	r3, r3
 8008316:	4619      	mov	r1, r3
 8008318:	f640 009b 	movw	r0, #2203	; 0x89b
 800831c:	f000 fddf 	bl	8008ede <RadioWrite>
            modReg= RadioRead(SUBGHZ_GAFCR);
 8008320:	f240 60d1 	movw	r0, #1745	; 0x6d1
 8008324:	f000 fded 	bl	8008f02 <RadioRead>
 8008328:	4603      	mov	r3, r0
 800832a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 800832e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008332:	f023 0318 	bic.w	r3, r3, #24
 8008336:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_GAFCR, (modReg| (0x3<<3) ));
 800833a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800833e:	f043 0318 	orr.w	r3, r3, #24
 8008342:	b2db      	uxtb	r3, r3
 8008344:	4619      	mov	r1, r3
 8008346:	f240 60d1 	movw	r0, #1745	; 0x6d1
 800834a:	f000 fdc8 	bl	8008ede <RadioWrite>
            modReg= RadioRead(SUBGHZ_GBSYNCR);
 800834e:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8008352:	f000 fdd6 	bl	8008f02 <RadioRead>
 8008356:	4603      	mov	r3, r0
 8008358:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 800835c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008360:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008364:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_GBSYNCR, (modReg| (0x5<<4) ));
 8008368:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800836c:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8008370:	b2db      	uxtb	r3, r3
 8008372:	4619      	mov	r1, r3
 8008374:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8008378:	f000 fdb1 	bl	8008ede <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 800837c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800837e:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8008382:	fb02 f303 	mul.w	r3, r2, r3
 8008386:	461a      	mov	r2, r3
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	fbb2 f3f3 	udiv	r3, r2, r3
 800838e:	4a4b      	ldr	r2, [pc, #300]	; (80084bc <RadioSetRxConfig+0x2fc>)
 8008390:	6093      	str	r3, [r2, #8]
            break;
 8008392:	e115      	b.n	80085c0 <RadioSetRxConfig+0x400>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8008394:	2000      	movs	r0, #0
 8008396:	f001 ffc7 	bl	800a328 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800839a:	4b48      	ldr	r3, [pc, #288]	; (80084bc <RadioSetRxConfig+0x2fc>)
 800839c:	2200      	movs	r2, #0
 800839e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 80083a2:	4a46      	ldr	r2, [pc, #280]	; (80084bc <RadioSetRxConfig+0x2fc>)
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 80083a8:	4b44      	ldr	r3, [pc, #272]	; (80084bc <RadioSetRxConfig+0x2fc>)
 80083aa:	220b      	movs	r2, #11
 80083ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 80083b0:	68b8      	ldr	r0, [r7, #8]
 80083b2:	f002 fe8b 	bl	800b0cc <SUBGRF_GetFskBandwidthRegValue>
 80083b6:	4603      	mov	r3, r0
 80083b8:	461a      	mov	r2, r3
 80083ba:	4b40      	ldr	r3, [pc, #256]	; (80084bc <RadioSetRxConfig+0x2fc>)
 80083bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80083c0:	4b3e      	ldr	r3, [pc, #248]	; (80084bc <RadioSetRxConfig+0x2fc>)
 80083c2:	2200      	movs	r2, #0
 80083c4:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 80083c6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80083c8:	00db      	lsls	r3, r3, #3
 80083ca:	b29a      	uxth	r2, r3
 80083cc:	4b3b      	ldr	r3, [pc, #236]	; (80084bc <RadioSetRxConfig+0x2fc>)
 80083ce:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 80083d0:	4b3a      	ldr	r3, [pc, #232]	; (80084bc <RadioSetRxConfig+0x2fc>)
 80083d2:	2204      	movs	r2, #4
 80083d4:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 80083d6:	4b39      	ldr	r3, [pc, #228]	; (80084bc <RadioSetRxConfig+0x2fc>)
 80083d8:	2218      	movs	r2, #24
 80083da:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 80083dc:	4b37      	ldr	r3, [pc, #220]	; (80084bc <RadioSetRxConfig+0x2fc>)
 80083de:	2200      	movs	r2, #0
 80083e0:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 80083e2:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80083e6:	f083 0301 	eor.w	r3, r3, #1
 80083ea:	b2db      	uxtb	r3, r3
 80083ec:	461a      	mov	r2, r3
 80083ee:	4b33      	ldr	r3, [pc, #204]	; (80084bc <RadioSetRxConfig+0x2fc>)
 80083f0:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 80083f2:	4b33      	ldr	r3, [pc, #204]	; (80084c0 <RadioSetRxConfig+0x300>)
 80083f4:	781a      	ldrb	r2, [r3, #0]
 80083f6:	4b31      	ldr	r3, [pc, #196]	; (80084bc <RadioSetRxConfig+0x2fc>)
 80083f8:	759a      	strb	r2, [r3, #22]
            if( crcOn == true )
 80083fa:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d003      	beq.n	800840a <RadioSetRxConfig+0x24a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8008402:	4b2e      	ldr	r3, [pc, #184]	; (80084bc <RadioSetRxConfig+0x2fc>)
 8008404:	22f2      	movs	r2, #242	; 0xf2
 8008406:	75da      	strb	r2, [r3, #23]
 8008408:	e002      	b.n	8008410 <RadioSetRxConfig+0x250>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 800840a:	4b2c      	ldr	r3, [pc, #176]	; (80084bc <RadioSetRxConfig+0x2fc>)
 800840c:	2201      	movs	r2, #1
 800840e:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8008410:	4b2a      	ldr	r3, [pc, #168]	; (80084bc <RadioSetRxConfig+0x2fc>)
 8008412:	2201      	movs	r2, #1
 8008414:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 8008416:	f000 fc60 	bl	8008cda <RadioStandby>
            RadioSetModem( MODEM_FSK );
 800841a:	2000      	movs	r0, #0
 800841c:	f7ff fdfc 	bl	8008018 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8008420:	4828      	ldr	r0, [pc, #160]	; (80084c4 <RadioSetRxConfig+0x304>)
 8008422:	f002 fa1f 	bl	800a864 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008426:	4828      	ldr	r0, [pc, #160]	; (80084c8 <RadioSetRxConfig+0x308>)
 8008428:	f002 faee 	bl	800aa08 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 800842c:	4a28      	ldr	r2, [pc, #160]	; (80084d0 <RadioSetRxConfig+0x310>)
 800842e:	f107 0314 	add.w	r3, r7, #20
 8008432:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008436:	e883 0003 	stmia.w	r3, {r0, r1}
 800843a:	f107 0314 	add.w	r3, r7, #20
 800843e:	4618      	mov	r0, r3
 8008440:	f001 fdab 	bl	8009f9a <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8008444:	f240 10ff 	movw	r0, #511	; 0x1ff
 8008448:	f001 fdf6 	bl	800a038 <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 800844c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800844e:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8008452:	fb02 f303 	mul.w	r3, r2, r3
 8008456:	461a      	mov	r2, r3
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	fbb2 f3f3 	udiv	r3, r2, r3
 800845e:	4a17      	ldr	r2, [pc, #92]	; (80084bc <RadioSetRxConfig+0x2fc>)
 8008460:	6093      	str	r3, [r2, #8]
            break;
 8008462:	e0ad      	b.n	80085c0 <RadioSetRxConfig+0x400>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8008464:	2000      	movs	r0, #0
 8008466:	f001 ff5f 	bl	800a328 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800846a:	4b14      	ldr	r3, [pc, #80]	; (80084bc <RadioSetRxConfig+0x2fc>)
 800846c:	2201      	movs	r2, #1
 800846e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	b2da      	uxtb	r2, r3
 8008476:	4b11      	ldr	r3, [pc, #68]	; (80084bc <RadioSetRxConfig+0x2fc>)
 8008478:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 800847c:	4a15      	ldr	r2, [pc, #84]	; (80084d4 <RadioSetRxConfig+0x314>)
 800847e:	68bb      	ldr	r3, [r7, #8]
 8008480:	4413      	add	r3, r2
 8008482:	781a      	ldrb	r2, [r3, #0]
 8008484:	4b0d      	ldr	r3, [pc, #52]	; (80084bc <RadioSetRxConfig+0x2fc>)
 8008486:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 800848a:	4a0c      	ldr	r2, [pc, #48]	; (80084bc <RadioSetRxConfig+0x2fc>)
 800848c:	7bbb      	ldrb	r3, [r7, #14]
 800848e:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8008492:	68bb      	ldr	r3, [r7, #8]
 8008494:	2b00      	cmp	r3, #0
 8008496:	d105      	bne.n	80084a4 <RadioSetRxConfig+0x2e4>
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	2b0b      	cmp	r3, #11
 800849c:	d008      	beq.n	80084b0 <RadioSetRxConfig+0x2f0>
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	2b0c      	cmp	r3, #12
 80084a2:	d005      	beq.n	80084b0 <RadioSetRxConfig+0x2f0>
 80084a4:	68bb      	ldr	r3, [r7, #8]
 80084a6:	2b01      	cmp	r3, #1
 80084a8:	d116      	bne.n	80084d8 <RadioSetRxConfig+0x318>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	2b0c      	cmp	r3, #12
 80084ae:	d113      	bne.n	80084d8 <RadioSetRxConfig+0x318>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 80084b0:	4b02      	ldr	r3, [pc, #8]	; (80084bc <RadioSetRxConfig+0x2fc>)
 80084b2:	2201      	movs	r2, #1
 80084b4:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 80084b8:	e012      	b.n	80084e0 <RadioSetRxConfig+0x320>
 80084ba:	bf00      	nop
 80084bc:	20000a34 	.word	0x20000a34
 80084c0:	20000015 	.word	0x20000015
 80084c4:	20000a6c 	.word	0x20000a6c
 80084c8:	20000a42 	.word	0x20000a42
 80084cc:	0800cb88 	.word	0x0800cb88
 80084d0:	0800cb90 	.word	0x0800cb90
 80084d4:	0800cd2c 	.word	0x0800cd2c
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 80084d8:	4b3b      	ldr	r3, [pc, #236]	; (80085c8 <RadioSetRxConfig+0x408>)
 80084da:	2200      	movs	r2, #0
 80084dc:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 80084e0:	4b39      	ldr	r3, [pc, #228]	; (80085c8 <RadioSetRxConfig+0x408>)
 80084e2:	2201      	movs	r2, #1
 80084e4:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 80084e6:	4b38      	ldr	r3, [pc, #224]	; (80085c8 <RadioSetRxConfig+0x408>)
 80084e8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80084ec:	2b05      	cmp	r3, #5
 80084ee:	d004      	beq.n	80084fa <RadioSetRxConfig+0x33a>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 80084f0:	4b35      	ldr	r3, [pc, #212]	; (80085c8 <RadioSetRxConfig+0x408>)
 80084f2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 80084f6:	2b06      	cmp	r3, #6
 80084f8:	d10a      	bne.n	8008510 <RadioSetRxConfig+0x350>
                if( preambleLen < 12 )
 80084fa:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80084fc:	2b0b      	cmp	r3, #11
 80084fe:	d803      	bhi.n	8008508 <RadioSetRxConfig+0x348>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8008500:	4b31      	ldr	r3, [pc, #196]	; (80085c8 <RadioSetRxConfig+0x408>)
 8008502:	220c      	movs	r2, #12
 8008504:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 8008506:	e006      	b.n	8008516 <RadioSetRxConfig+0x356>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8008508:	4a2f      	ldr	r2, [pc, #188]	; (80085c8 <RadioSetRxConfig+0x408>)
 800850a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800850c:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 800850e:	e002      	b.n	8008516 <RadioSetRxConfig+0x356>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8008510:	4a2d      	ldr	r2, [pc, #180]	; (80085c8 <RadioSetRxConfig+0x408>)
 8008512:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8008514:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8008516:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 800851a:	4b2b      	ldr	r3, [pc, #172]	; (80085c8 <RadioSetRxConfig+0x408>)
 800851c:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 800851e:	4b2b      	ldr	r3, [pc, #172]	; (80085cc <RadioSetRxConfig+0x40c>)
 8008520:	781a      	ldrb	r2, [r3, #0]
 8008522:	4b29      	ldr	r3, [pc, #164]	; (80085c8 <RadioSetRxConfig+0x408>)
 8008524:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8008526:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 800852a:	4b27      	ldr	r3, [pc, #156]	; (80085c8 <RadioSetRxConfig+0x408>)
 800852c:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8008530:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 8008534:	4b24      	ldr	r3, [pc, #144]	; (80085c8 <RadioSetRxConfig+0x408>)
 8008536:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 800853a:	f000 fbce 	bl	8008cda <RadioStandby>
            RadioSetModem( MODEM_LORA );
 800853e:	2001      	movs	r0, #1
 8008540:	f7ff fd6a 	bl	8008018 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8008544:	4822      	ldr	r0, [pc, #136]	; (80085d0 <RadioSetRxConfig+0x410>)
 8008546:	f002 f98d 	bl	800a864 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800854a:	4822      	ldr	r0, [pc, #136]	; (80085d4 <RadioSetRxConfig+0x414>)
 800854c:	f002 fa5c 	bl	800aa08 <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8008550:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8008552:	b2db      	uxtb	r3, r3
 8008554:	4618      	mov	r0, r3
 8008556:	f001 fef6 	bl	800a346 <SUBGRF_SetLoRaSymbNumTimeout>
            SUBGRF_WriteRegister(SUBGHZ_AGCCFG,SUBGRF_ReadRegister(SUBGHZ_AGCCFG)&0x1);
 800855a:	f640 00a3 	movw	r0, #2211	; 0x8a3
 800855e:	f002 fbaf 	bl	800acc0 <SUBGRF_ReadRegister>
 8008562:	4603      	mov	r3, r0
 8008564:	f003 0301 	and.w	r3, r3, #1
 8008568:	b2db      	uxtb	r3, r3
 800856a:	4619      	mov	r1, r3
 800856c:	f640 00a3 	movw	r0, #2211	; 0x8a3
 8008570:	f002 fb92 	bl	800ac98 <SUBGRF_WriteRegister>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8008574:	4b14      	ldr	r3, [pc, #80]	; (80085c8 <RadioSetRxConfig+0x408>)
 8008576:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800857a:	2b01      	cmp	r3, #1
 800857c:	d10d      	bne.n	800859a <RadioSetRxConfig+0x3da>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 800857e:	f240 7036 	movw	r0, #1846	; 0x736
 8008582:	f002 fb9d 	bl	800acc0 <SUBGRF_ReadRegister>
 8008586:	4603      	mov	r3, r0
 8008588:	f023 0304 	bic.w	r3, r3, #4
 800858c:	b2db      	uxtb	r3, r3
 800858e:	4619      	mov	r1, r3
 8008590:	f240 7036 	movw	r0, #1846	; 0x736
 8008594:	f002 fb80 	bl	800ac98 <SUBGRF_WriteRegister>
 8008598:	e00c      	b.n	80085b4 <RadioSetRxConfig+0x3f4>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 800859a:	f240 7036 	movw	r0, #1846	; 0x736
 800859e:	f002 fb8f 	bl	800acc0 <SUBGRF_ReadRegister>
 80085a2:	4603      	mov	r3, r0
 80085a4:	f043 0304 	orr.w	r3, r3, #4
 80085a8:	b2db      	uxtb	r3, r3
 80085aa:	4619      	mov	r1, r3
 80085ac:	f240 7036 	movw	r0, #1846	; 0x736
 80085b0:	f002 fb72 	bl	800ac98 <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 80085b4:	4b04      	ldr	r3, [pc, #16]	; (80085c8 <RadioSetRxConfig+0x408>)
 80085b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80085ba:	609a      	str	r2, [r3, #8]
            break;
 80085bc:	e000      	b.n	80085c0 <RadioSetRxConfig+0x400>
            break;
 80085be:	bf00      	nop
    }
}
 80085c0:	bf00      	nop
 80085c2:	3728      	adds	r7, #40	; 0x28
 80085c4:	46bd      	mov	sp, r7
 80085c6:	bd80      	pop	{r7, pc}
 80085c8:	20000a34 	.word	0x20000a34
 80085cc:	20000015 	.word	0x20000015
 80085d0:	20000a6c 	.word	0x20000a6c
 80085d4:	20000a42 	.word	0x20000a42

080085d8 <RadioSetTxConfig>:
static void RadioSetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                              uint32_t bandwidth, uint32_t datarate,
                              uint8_t coderate, uint16_t preambleLen,
                              bool fixLen, bool crcOn, bool freqHopOn,
                              uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 80085d8:	b580      	push	{r7, lr}
 80085da:	b086      	sub	sp, #24
 80085dc:	af00      	add	r7, sp, #0
 80085de:	60ba      	str	r2, [r7, #8]
 80085e0:	607b      	str	r3, [r7, #4]
 80085e2:	4603      	mov	r3, r0
 80085e4:	73fb      	strb	r3, [r7, #15]
 80085e6:	460b      	mov	r3, r1
 80085e8:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    RFW_DeInit();
 80085ea:	f002 fe3c 	bl	800b266 <RFW_DeInit>
    switch( modem )
 80085ee:	7bfb      	ldrb	r3, [r7, #15]
 80085f0:	2b04      	cmp	r3, #4
 80085f2:	f000 80c7 	beq.w	8008784 <RadioSetTxConfig+0x1ac>
 80085f6:	2b04      	cmp	r3, #4
 80085f8:	f300 80d6 	bgt.w	80087a8 <RadioSetTxConfig+0x1d0>
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d002      	beq.n	8008606 <RadioSetTxConfig+0x2e>
 8008600:	2b01      	cmp	r3, #1
 8008602:	d059      	beq.n	80086b8 <RadioSetTxConfig+0xe0>
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
            break;
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 8008604:	e0d0      	b.n	80087a8 <RadioSetTxConfig+0x1d0>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8008606:	4b77      	ldr	r3, [pc, #476]	; (80087e4 <RadioSetTxConfig+0x20c>)
 8008608:	2200      	movs	r2, #0
 800860a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 800860e:	4a75      	ldr	r2, [pc, #468]	; (80087e4 <RadioSetTxConfig+0x20c>)
 8008610:	6a3b      	ldr	r3, [r7, #32]
 8008612:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8008614:	4b73      	ldr	r3, [pc, #460]	; (80087e4 <RadioSetTxConfig+0x20c>)
 8008616:	220b      	movs	r2, #11
 8008618:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 800861c:	6878      	ldr	r0, [r7, #4]
 800861e:	f002 fd55 	bl	800b0cc <SUBGRF_GetFskBandwidthRegValue>
 8008622:	4603      	mov	r3, r0
 8008624:	461a      	mov	r2, r3
 8008626:	4b6f      	ldr	r3, [pc, #444]	; (80087e4 <RadioSetTxConfig+0x20c>)
 8008628:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 800862c:	4a6d      	ldr	r2, [pc, #436]	; (80087e4 <RadioSetTxConfig+0x20c>)
 800862e:	68bb      	ldr	r3, [r7, #8]
 8008630:	6413      	str	r3, [r2, #64]	; 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8008632:	4b6c      	ldr	r3, [pc, #432]	; (80087e4 <RadioSetTxConfig+0x20c>)
 8008634:	2200      	movs	r2, #0
 8008636:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8008638:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800863a:	00db      	lsls	r3, r3, #3
 800863c:	b29a      	uxth	r2, r3
 800863e:	4b69      	ldr	r3, [pc, #420]	; (80087e4 <RadioSetTxConfig+0x20c>)
 8008640:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8008642:	4b68      	ldr	r3, [pc, #416]	; (80087e4 <RadioSetTxConfig+0x20c>)
 8008644:	2204      	movs	r2, #4
 8008646:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 8008648:	4b66      	ldr	r3, [pc, #408]	; (80087e4 <RadioSetTxConfig+0x20c>)
 800864a:	2218      	movs	r2, #24
 800864c:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 800864e:	4b65      	ldr	r3, [pc, #404]	; (80087e4 <RadioSetTxConfig+0x20c>)
 8008650:	2200      	movs	r2, #0
 8008652:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8008654:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008658:	f083 0301 	eor.w	r3, r3, #1
 800865c:	b2db      	uxtb	r3, r3
 800865e:	461a      	mov	r2, r3
 8008660:	4b60      	ldr	r3, [pc, #384]	; (80087e4 <RadioSetTxConfig+0x20c>)
 8008662:	755a      	strb	r2, [r3, #21]
            if( crcOn == true )
 8008664:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8008668:	2b00      	cmp	r3, #0
 800866a:	d003      	beq.n	8008674 <RadioSetTxConfig+0x9c>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 800866c:	4b5d      	ldr	r3, [pc, #372]	; (80087e4 <RadioSetTxConfig+0x20c>)
 800866e:	22f2      	movs	r2, #242	; 0xf2
 8008670:	75da      	strb	r2, [r3, #23]
 8008672:	e002      	b.n	800867a <RadioSetTxConfig+0xa2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8008674:	4b5b      	ldr	r3, [pc, #364]	; (80087e4 <RadioSetTxConfig+0x20c>)
 8008676:	2201      	movs	r2, #1
 8008678:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 800867a:	4b5a      	ldr	r3, [pc, #360]	; (80087e4 <RadioSetTxConfig+0x20c>)
 800867c:	2201      	movs	r2, #1
 800867e:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 8008680:	f000 fb2b 	bl	8008cda <RadioStandby>
            RadioSetModem(  MODEM_FSK  );
 8008684:	2000      	movs	r0, #0
 8008686:	f7ff fcc7 	bl	8008018 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800868a:	4857      	ldr	r0, [pc, #348]	; (80087e8 <RadioSetTxConfig+0x210>)
 800868c:	f002 f8ea 	bl	800a864 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008690:	4856      	ldr	r0, [pc, #344]	; (80087ec <RadioSetTxConfig+0x214>)
 8008692:	f002 f9b9 	bl	800aa08 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8008696:	4a56      	ldr	r2, [pc, #344]	; (80087f0 <RadioSetTxConfig+0x218>)
 8008698:	f107 0310 	add.w	r3, r7, #16
 800869c:	e892 0003 	ldmia.w	r2, {r0, r1}
 80086a0:	e883 0003 	stmia.w	r3, {r0, r1}
 80086a4:	f107 0310 	add.w	r3, r7, #16
 80086a8:	4618      	mov	r0, r3
 80086aa:	f001 fc76 	bl	8009f9a <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 80086ae:	f240 10ff 	movw	r0, #511	; 0x1ff
 80086b2:	f001 fcc1 	bl	800a038 <SUBGRF_SetWhiteningSeed>
            break;
 80086b6:	e078      	b.n	80087aa <RadioSetTxConfig+0x1d2>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 80086b8:	4b4a      	ldr	r3, [pc, #296]	; (80087e4 <RadioSetTxConfig+0x20c>)
 80086ba:	2201      	movs	r2, #1
 80086bc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 80086c0:	6a3b      	ldr	r3, [r7, #32]
 80086c2:	b2da      	uxtb	r2, r3
 80086c4:	4b47      	ldr	r3, [pc, #284]	; (80087e4 <RadioSetTxConfig+0x20c>)
 80086c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 80086ca:	4a4a      	ldr	r2, [pc, #296]	; (80087f4 <RadioSetTxConfig+0x21c>)
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	4413      	add	r3, r2
 80086d0:	781a      	ldrb	r2, [r3, #0]
 80086d2:	4b44      	ldr	r3, [pc, #272]	; (80087e4 <RadioSetTxConfig+0x20c>)
 80086d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 80086d8:	4a42      	ldr	r2, [pc, #264]	; (80087e4 <RadioSetTxConfig+0x20c>)
 80086da:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80086de:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d105      	bne.n	80086f4 <RadioSetTxConfig+0x11c>
 80086e8:	6a3b      	ldr	r3, [r7, #32]
 80086ea:	2b0b      	cmp	r3, #11
 80086ec:	d008      	beq.n	8008700 <RadioSetTxConfig+0x128>
 80086ee:	6a3b      	ldr	r3, [r7, #32]
 80086f0:	2b0c      	cmp	r3, #12
 80086f2:	d005      	beq.n	8008700 <RadioSetTxConfig+0x128>
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	2b01      	cmp	r3, #1
 80086f8:	d107      	bne.n	800870a <RadioSetTxConfig+0x132>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 80086fa:	6a3b      	ldr	r3, [r7, #32]
 80086fc:	2b0c      	cmp	r3, #12
 80086fe:	d104      	bne.n	800870a <RadioSetTxConfig+0x132>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8008700:	4b38      	ldr	r3, [pc, #224]	; (80087e4 <RadioSetTxConfig+0x20c>)
 8008702:	2201      	movs	r2, #1
 8008704:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8008708:	e003      	b.n	8008712 <RadioSetTxConfig+0x13a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 800870a:	4b36      	ldr	r3, [pc, #216]	; (80087e4 <RadioSetTxConfig+0x20c>)
 800870c:	2200      	movs	r2, #0
 800870e:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8008712:	4b34      	ldr	r3, [pc, #208]	; (80087e4 <RadioSetTxConfig+0x20c>)
 8008714:	2201      	movs	r2, #1
 8008716:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8008718:	4b32      	ldr	r3, [pc, #200]	; (80087e4 <RadioSetTxConfig+0x20c>)
 800871a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800871e:	2b05      	cmp	r3, #5
 8008720:	d004      	beq.n	800872c <RadioSetTxConfig+0x154>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 8008722:	4b30      	ldr	r3, [pc, #192]	; (80087e4 <RadioSetTxConfig+0x20c>)
 8008724:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8008728:	2b06      	cmp	r3, #6
 800872a:	d10a      	bne.n	8008742 <RadioSetTxConfig+0x16a>
                if( preambleLen < 12 )
 800872c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800872e:	2b0b      	cmp	r3, #11
 8008730:	d803      	bhi.n	800873a <RadioSetTxConfig+0x162>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8008732:	4b2c      	ldr	r3, [pc, #176]	; (80087e4 <RadioSetTxConfig+0x20c>)
 8008734:	220c      	movs	r2, #12
 8008736:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 8008738:	e006      	b.n	8008748 <RadioSetTxConfig+0x170>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 800873a:	4a2a      	ldr	r2, [pc, #168]	; (80087e4 <RadioSetTxConfig+0x20c>)
 800873c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800873e:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 8008740:	e002      	b.n	8008748 <RadioSetTxConfig+0x170>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8008742:	4a28      	ldr	r2, [pc, #160]	; (80087e4 <RadioSetTxConfig+0x20c>)
 8008744:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008746:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8008748:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800874c:	4b25      	ldr	r3, [pc, #148]	; (80087e4 <RadioSetTxConfig+0x20c>)
 800874e:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8008750:	4b29      	ldr	r3, [pc, #164]	; (80087f8 <RadioSetTxConfig+0x220>)
 8008752:	781a      	ldrb	r2, [r3, #0]
 8008754:	4b23      	ldr	r3, [pc, #140]	; (80087e4 <RadioSetTxConfig+0x20c>)
 8008756:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8008758:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800875c:	4b21      	ldr	r3, [pc, #132]	; (80087e4 <RadioSetTxConfig+0x20c>)
 800875e:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8008762:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8008766:	4b1f      	ldr	r3, [pc, #124]	; (80087e4 <RadioSetTxConfig+0x20c>)
 8008768:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 800876c:	f000 fab5 	bl	8008cda <RadioStandby>
            RadioSetModem( MODEM_LORA );
 8008770:	2001      	movs	r0, #1
 8008772:	f7ff fc51 	bl	8008018 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8008776:	481c      	ldr	r0, [pc, #112]	; (80087e8 <RadioSetTxConfig+0x210>)
 8008778:	f002 f874 	bl	800a864 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800877c:	481b      	ldr	r0, [pc, #108]	; (80087ec <RadioSetTxConfig+0x214>)
 800877e:	f002 f943 	bl	800aa08 <SUBGRF_SetPacketParams>
            break;
 8008782:	e012      	b.n	80087aa <RadioSetTxConfig+0x1d2>
            RadioSetModem(MODEM_SIGFOX_TX);
 8008784:	2004      	movs	r0, #4
 8008786:	f7ff fc47 	bl	8008018 <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 800878a:	4b16      	ldr	r3, [pc, #88]	; (80087e4 <RadioSetTxConfig+0x20c>)
 800878c:	2202      	movs	r2, #2
 800878e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 8008792:	4a14      	ldr	r2, [pc, #80]	; (80087e4 <RadioSetTxConfig+0x20c>)
 8008794:	6a3b      	ldr	r3, [r7, #32]
 8008796:	6493      	str	r3, [r2, #72]	; 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 8008798:	4b12      	ldr	r3, [pc, #72]	; (80087e4 <RadioSetTxConfig+0x20c>)
 800879a:	2216      	movs	r2, #22
 800879c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80087a0:	4811      	ldr	r0, [pc, #68]	; (80087e8 <RadioSetTxConfig+0x210>)
 80087a2:	f002 f85f 	bl	800a864 <SUBGRF_SetModulationParams>
            break;
 80087a6:	e000      	b.n	80087aa <RadioSetTxConfig+0x1d2>
            break;
 80087a8:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 80087aa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80087ae:	4618      	mov	r0, r3
 80087b0:	f002 fb8e 	bl	800aed0 <SUBGRF_SetRfTxPower>
 80087b4:	4603      	mov	r3, r0
 80087b6:	461a      	mov	r2, r3
 80087b8:	4b0a      	ldr	r3, [pc, #40]	; (80087e4 <RadioSetTxConfig+0x20c>)
 80087ba:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 80087be:	210e      	movs	r1, #14
 80087c0:	f640 101f 	movw	r0, #2335	; 0x91f
 80087c4:	f002 fa68 	bl	800ac98 <SUBGRF_WriteRegister>
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 80087c8:	4b06      	ldr	r3, [pc, #24]	; (80087e4 <RadioSetTxConfig+0x20c>)
 80087ca:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80087ce:	4618      	mov	r0, r3
 80087d0:	f002 fd5d 	bl	800b28e <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 80087d4:	4a03      	ldr	r2, [pc, #12]	; (80087e4 <RadioSetTxConfig+0x20c>)
 80087d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80087d8:	6053      	str	r3, [r2, #4]
}
 80087da:	bf00      	nop
 80087dc:	3718      	adds	r7, #24
 80087de:	46bd      	mov	sp, r7
 80087e0:	bd80      	pop	{r7, pc}
 80087e2:	bf00      	nop
 80087e4:	20000a34 	.word	0x20000a34
 80087e8:	20000a6c 	.word	0x20000a6c
 80087ec:	20000a42 	.word	0x20000a42
 80087f0:	0800cb90 	.word	0x0800cb90
 80087f4:	0800cd2c 	.word	0x0800cd2c
 80087f8:	20000015 	.word	0x20000015

080087fc <RadioCheckRfFrequency>:

static bool RadioCheckRfFrequency( uint32_t frequency )
{
 80087fc:	b480      	push	{r7}
 80087fe:	b083      	sub	sp, #12
 8008800:	af00      	add	r7, sp, #0
 8008802:	6078      	str	r0, [r7, #4]
    return true;
 8008804:	2301      	movs	r3, #1
}
 8008806:	4618      	mov	r0, r3
 8008808:	370c      	adds	r7, #12
 800880a:	46bd      	mov	sp, r7
 800880c:	bc80      	pop	{r7}
 800880e:	4770      	bx	lr

08008810 <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
 8008810:	b480      	push	{r7}
 8008812:	b085      	sub	sp, #20
 8008814:	af00      	add	r7, sp, #0
 8008816:	4603      	mov	r3, r0
 8008818:	71fb      	strb	r3, [r7, #7]
    uint32_t bandwidthInHz = 0;
 800881a:	2300      	movs	r3, #0
 800881c:	60fb      	str	r3, [r7, #12]

    switch( bw )
 800881e:	79fb      	ldrb	r3, [r7, #7]
 8008820:	2b0a      	cmp	r3, #10
 8008822:	d83e      	bhi.n	80088a2 <RadioGetLoRaBandwidthInHz+0x92>
 8008824:	a201      	add	r2, pc, #4	; (adr r2, 800882c <RadioGetLoRaBandwidthInHz+0x1c>)
 8008826:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800882a:	bf00      	nop
 800882c:	08008859 	.word	0x08008859
 8008830:	08008869 	.word	0x08008869
 8008834:	08008879 	.word	0x08008879
 8008838:	08008889 	.word	0x08008889
 800883c:	08008891 	.word	0x08008891
 8008840:	08008897 	.word	0x08008897
 8008844:	0800889d 	.word	0x0800889d
 8008848:	080088a3 	.word	0x080088a3
 800884c:	08008861 	.word	0x08008861
 8008850:	08008871 	.word	0x08008871
 8008854:	08008881 	.word	0x08008881
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
 8008858:	f641 6384 	movw	r3, #7812	; 0x1e84
 800885c:	60fb      	str	r3, [r7, #12]
        break;
 800885e:	e020      	b.n	80088a2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 8008860:	f642 03b1 	movw	r3, #10417	; 0x28b1
 8008864:	60fb      	str	r3, [r7, #12]
        break;
 8008866:	e01c      	b.n	80088a2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 8008868:	f643 5309 	movw	r3, #15625	; 0x3d09
 800886c:	60fb      	str	r3, [r7, #12]
        break;
 800886e:	e018      	b.n	80088a2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 8008870:	f245 1361 	movw	r3, #20833	; 0x5161
 8008874:	60fb      	str	r3, [r7, #12]
        break;
 8008876:	e014      	b.n	80088a2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 8008878:	f647 2312 	movw	r3, #31250	; 0x7a12
 800887c:	60fb      	str	r3, [r7, #12]
        break;
 800887e:	e010      	b.n	80088a2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 8008880:	f24a 23c3 	movw	r3, #41667	; 0xa2c3
 8008884:	60fb      	str	r3, [r7, #12]
        break;
 8008886:	e00c      	b.n	80088a2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 8008888:	f24f 4324 	movw	r3, #62500	; 0xf424
 800888c:	60fb      	str	r3, [r7, #12]
        break;
 800888e:	e008      	b.n	80088a2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 8008890:	4b07      	ldr	r3, [pc, #28]	; (80088b0 <RadioGetLoRaBandwidthInHz+0xa0>)
 8008892:	60fb      	str	r3, [r7, #12]
        break;
 8008894:	e005      	b.n	80088a2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 8008896:	4b07      	ldr	r3, [pc, #28]	; (80088b4 <RadioGetLoRaBandwidthInHz+0xa4>)
 8008898:	60fb      	str	r3, [r7, #12]
        break;
 800889a:	e002      	b.n	80088a2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 800889c:	4b06      	ldr	r3, [pc, #24]	; (80088b8 <RadioGetLoRaBandwidthInHz+0xa8>)
 800889e:	60fb      	str	r3, [r7, #12]
        break;
 80088a0:	bf00      	nop
    }

    return bandwidthInHz;
 80088a2:	68fb      	ldr	r3, [r7, #12]
}
 80088a4:	4618      	mov	r0, r3
 80088a6:	3714      	adds	r7, #20
 80088a8:	46bd      	mov	sp, r7
 80088aa:	bc80      	pop	{r7}
 80088ac:	4770      	bx	lr
 80088ae:	bf00      	nop
 80088b0:	0001e848 	.word	0x0001e848
 80088b4:	0003d090 	.word	0x0003d090
 80088b8:	0007a120 	.word	0x0007a120

080088bc <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 80088bc:	b480      	push	{r7}
 80088be:	b083      	sub	sp, #12
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	6078      	str	r0, [r7, #4]
 80088c4:	4608      	mov	r0, r1
 80088c6:	4611      	mov	r1, r2
 80088c8:	461a      	mov	r2, r3
 80088ca:	4603      	mov	r3, r0
 80088cc:	70fb      	strb	r3, [r7, #3]
 80088ce:	460b      	mov	r3, r1
 80088d0:	803b      	strh	r3, [r7, #0]
 80088d2:	4613      	mov	r3, r2
 80088d4:	70bb      	strb	r3, [r7, #2]
    return ( preambleLen << 3 ) +
 80088d6:	883b      	ldrh	r3, [r7, #0]
 80088d8:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 80088da:	78ba      	ldrb	r2, [r7, #2]
 80088dc:	f082 0201 	eor.w	r2, r2, #1
 80088e0:	b2d2      	uxtb	r2, r2
 80088e2:	2a00      	cmp	r2, #0
 80088e4:	d001      	beq.n	80088ea <RadioGetGfskTimeOnAirNumerator+0x2e>
 80088e6:	2208      	movs	r2, #8
 80088e8:	e000      	b.n	80088ec <RadioGetGfskTimeOnAirNumerator+0x30>
 80088ea:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 80088ec:	4413      	add	r3, r2
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 80088ee:	f103 0218 	add.w	r2, r3, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 80088f2:	7c3b      	ldrb	r3, [r7, #16]
 80088f4:	7d39      	ldrb	r1, [r7, #20]
 80088f6:	2900      	cmp	r1, #0
 80088f8:	d001      	beq.n	80088fe <RadioGetGfskTimeOnAirNumerator+0x42>
 80088fa:	2102      	movs	r1, #2
 80088fc:	e000      	b.n	8008900 <RadioGetGfskTimeOnAirNumerator+0x44>
 80088fe:	2100      	movs	r1, #0
 8008900:	440b      	add	r3, r1
 8008902:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8008904:	4413      	add	r3, r2
}
 8008906:	4618      	mov	r0, r3
 8008908:	370c      	adds	r7, #12
 800890a:	46bd      	mov	sp, r7
 800890c:	bc80      	pop	{r7}
 800890e:	4770      	bx	lr

08008910 <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8008910:	b480      	push	{r7}
 8008912:	b08b      	sub	sp, #44	; 0x2c
 8008914:	af00      	add	r7, sp, #0
 8008916:	60f8      	str	r0, [r7, #12]
 8008918:	60b9      	str	r1, [r7, #8]
 800891a:	4611      	mov	r1, r2
 800891c:	461a      	mov	r2, r3
 800891e:	460b      	mov	r3, r1
 8008920:	71fb      	strb	r3, [r7, #7]
 8008922:	4613      	mov	r3, r2
 8008924:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 8008926:	79fb      	ldrb	r3, [r7, #7]
 8008928:	3304      	adds	r3, #4
 800892a:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 800892c:	2300      	movs	r3, #0
 800892e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 8008932:	68bb      	ldr	r3, [r7, #8]
 8008934:	2b05      	cmp	r3, #5
 8008936:	d002      	beq.n	800893e <RadioGetLoRaTimeOnAirNumerator+0x2e>
 8008938:	68bb      	ldr	r3, [r7, #8]
 800893a:	2b06      	cmp	r3, #6
 800893c:	d104      	bne.n	8008948 <RadioGetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 800893e:	88bb      	ldrh	r3, [r7, #4]
 8008940:	2b0b      	cmp	r3, #11
 8008942:	d801      	bhi.n	8008948 <RadioGetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 8008944:	230c      	movs	r3, #12
 8008946:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	2b00      	cmp	r3, #0
 800894c:	d105      	bne.n	800895a <RadioGetLoRaTimeOnAirNumerator+0x4a>
 800894e:	68bb      	ldr	r3, [r7, #8]
 8008950:	2b0b      	cmp	r3, #11
 8008952:	d008      	beq.n	8008966 <RadioGetLoRaTimeOnAirNumerator+0x56>
 8008954:	68bb      	ldr	r3, [r7, #8]
 8008956:	2b0c      	cmp	r3, #12
 8008958:	d005      	beq.n	8008966 <RadioGetLoRaTimeOnAirNumerator+0x56>
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	2b01      	cmp	r3, #1
 800895e:	d105      	bne.n	800896c <RadioGetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8008960:	68bb      	ldr	r3, [r7, #8]
 8008962:	2b0c      	cmp	r3, #12
 8008964:	d102      	bne.n	800896c <RadioGetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 8008966:	2301      	movs	r3, #1
 8008968:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 800896c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8008970:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 8008972:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008976:	2a00      	cmp	r2, #0
 8008978:	d001      	beq.n	800897e <RadioGetLoRaTimeOnAirNumerator+0x6e>
 800897a:	2210      	movs	r2, #16
 800897c:	e000      	b.n	8008980 <RadioGetLoRaTimeOnAirNumerator+0x70>
 800897e:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8008980:	4413      	add	r3, r2
 8008982:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 8008984:	68bb      	ldr	r3, [r7, #8]
 8008986:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 8008988:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 800898a:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800898e:	2a00      	cmp	r2, #0
 8008990:	d001      	beq.n	8008996 <RadioGetLoRaTimeOnAirNumerator+0x86>
 8008992:	2200      	movs	r2, #0
 8008994:	e000      	b.n	8008998 <RadioGetLoRaTimeOnAirNumerator+0x88>
 8008996:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 8008998:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 800899a:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 800899c:	68bb      	ldr	r3, [r7, #8]
 800899e:	2b06      	cmp	r3, #6
 80089a0:	d803      	bhi.n	80089aa <RadioGetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 80089a2:	68bb      	ldr	r3, [r7, #8]
 80089a4:	009b      	lsls	r3, r3, #2
 80089a6:	623b      	str	r3, [r7, #32]
 80089a8:	e00e      	b.n	80089c8 <RadioGetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 80089aa:	69fb      	ldr	r3, [r7, #28]
 80089ac:	3308      	adds	r3, #8
 80089ae:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 80089b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d004      	beq.n	80089c2 <RadioGetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 80089b8:	68bb      	ldr	r3, [r7, #8]
 80089ba:	3b02      	subs	r3, #2
 80089bc:	009b      	lsls	r3, r3, #2
 80089be:	623b      	str	r3, [r7, #32]
 80089c0:	e002      	b.n	80089c8 <RadioGetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 80089c2:	68bb      	ldr	r3, [r7, #8]
 80089c4:	009b      	lsls	r3, r3, #2
 80089c6:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 80089c8:	69fb      	ldr	r3, [r7, #28]
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	da01      	bge.n	80089d2 <RadioGetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 80089ce:	2300      	movs	r3, #0
 80089d0:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 80089d2:	69fa      	ldr	r2, [r7, #28]
 80089d4:	6a3b      	ldr	r3, [r7, #32]
 80089d6:	4413      	add	r3, r2
 80089d8:	1e5a      	subs	r2, r3, #1
 80089da:	6a3b      	ldr	r3, [r7, #32]
 80089dc:	fb92 f3f3 	sdiv	r3, r2, r3
 80089e0:	697a      	ldr	r2, [r7, #20]
 80089e2:	fb03 f202 	mul.w	r2, r3, r2
 80089e6:	88bb      	ldrh	r3, [r7, #4]
 80089e8:	4413      	add	r3, r2
    int32_t intermediate =
 80089ea:	330c      	adds	r3, #12
 80089ec:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 80089ee:	68bb      	ldr	r3, [r7, #8]
 80089f0:	2b06      	cmp	r3, #6
 80089f2:	d802      	bhi.n	80089fa <RadioGetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 80089f4:	69bb      	ldr	r3, [r7, #24]
 80089f6:	3302      	adds	r3, #2
 80089f8:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 80089fa:	69bb      	ldr	r3, [r7, #24]
 80089fc:	009b      	lsls	r3, r3, #2
 80089fe:	1c5a      	adds	r2, r3, #1
 8008a00:	68bb      	ldr	r3, [r7, #8]
 8008a02:	3b02      	subs	r3, #2
 8008a04:	fa02 f303 	lsl.w	r3, r2, r3
}
 8008a08:	4618      	mov	r0, r3
 8008a0a:	372c      	adds	r7, #44	; 0x2c
 8008a0c:	46bd      	mov	sp, r7
 8008a0e:	bc80      	pop	{r7}
 8008a10:	4770      	bx	lr
	...

08008a14 <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 8008a14:	b580      	push	{r7, lr}
 8008a16:	b08a      	sub	sp, #40	; 0x28
 8008a18:	af04      	add	r7, sp, #16
 8008a1a:	60b9      	str	r1, [r7, #8]
 8008a1c:	607a      	str	r2, [r7, #4]
 8008a1e:	461a      	mov	r2, r3
 8008a20:	4603      	mov	r3, r0
 8008a22:	73fb      	strb	r3, [r7, #15]
 8008a24:	4613      	mov	r3, r2
 8008a26:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 8008a28:	2300      	movs	r3, #0
 8008a2a:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 8008a2c:	2301      	movs	r3, #1
 8008a2e:	613b      	str	r3, [r7, #16]

    switch( modem )
 8008a30:	7bfb      	ldrb	r3, [r7, #15]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d002      	beq.n	8008a3c <RadioTimeOnAir+0x28>
 8008a36:	2b01      	cmp	r3, #1
 8008a38:	d017      	beq.n	8008a6a <RadioTimeOnAir+0x56>
                                                                  fixLen, payloadLen, crcOn );
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
        }
        break;
    default:
        break;
 8008a3a:	e035      	b.n	8008aa8 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 8008a3c:	f897 0024 	ldrb.w	r0, [r7, #36]	; 0x24
 8008a40:	8c3a      	ldrh	r2, [r7, #32]
 8008a42:	7bb9      	ldrb	r1, [r7, #14]
 8008a44:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008a48:	9301      	str	r3, [sp, #4]
 8008a4a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008a4e:	9300      	str	r3, [sp, #0]
 8008a50:	4603      	mov	r3, r0
 8008a52:	6878      	ldr	r0, [r7, #4]
 8008a54:	f7ff ff32 	bl	80088bc <RadioGetGfskTimeOnAirNumerator>
 8008a58:	4603      	mov	r3, r0
 8008a5a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008a5e:	fb02 f303 	mul.w	r3, r2, r3
 8008a62:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	613b      	str	r3, [r7, #16]
        break;
 8008a68:	e01e      	b.n	8008aa8 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 8008a6a:	8c39      	ldrh	r1, [r7, #32]
 8008a6c:	7bba      	ldrb	r2, [r7, #14]
 8008a6e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008a72:	9302      	str	r3, [sp, #8]
 8008a74:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008a78:	9301      	str	r3, [sp, #4]
 8008a7a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008a7e:	9300      	str	r3, [sp, #0]
 8008a80:	460b      	mov	r3, r1
 8008a82:	6879      	ldr	r1, [r7, #4]
 8008a84:	68b8      	ldr	r0, [r7, #8]
 8008a86:	f7ff ff43 	bl	8008910 <RadioGetLoRaTimeOnAirNumerator>
 8008a8a:	4603      	mov	r3, r0
 8008a8c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008a90:	fb02 f303 	mul.w	r3, r2, r3
 8008a94:	617b      	str	r3, [r7, #20]
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 8008a96:	4a0a      	ldr	r2, [pc, #40]	; (8008ac0 <RadioTimeOnAir+0xac>)
 8008a98:	68bb      	ldr	r3, [r7, #8]
 8008a9a:	4413      	add	r3, r2
 8008a9c:	781b      	ldrb	r3, [r3, #0]
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	f7ff feb6 	bl	8008810 <RadioGetLoRaBandwidthInHz>
 8008aa4:	6138      	str	r0, [r7, #16]
        break;
 8008aa6:	bf00      	nop
    }
    // Perform integral ceil()
    return DIVC( numerator, denominator );
 8008aa8:	697a      	ldr	r2, [r7, #20]
 8008aaa:	693b      	ldr	r3, [r7, #16]
 8008aac:	4413      	add	r3, r2
 8008aae:	1e5a      	subs	r2, r3, #1
 8008ab0:	693b      	ldr	r3, [r7, #16]
 8008ab2:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	3718      	adds	r7, #24
 8008aba:	46bd      	mov	sp, r7
 8008abc:	bd80      	pop	{r7, pc}
 8008abe:	bf00      	nop
 8008ac0:	0800cd2c 	.word	0x0800cd2c

08008ac4 <RadioSend>:

static radio_status_t RadioSend( uint8_t *buffer, uint8_t size )
{
 8008ac4:	b580      	push	{r7, lr}
 8008ac6:	b084      	sub	sp, #16
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	6078      	str	r0, [r7, #4]
 8008acc:	460b      	mov	r3, r1
 8008ace:	70fb      	strb	r3, [r7, #3]
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 8008ad0:	2300      	movs	r3, #0
 8008ad2:	2200      	movs	r2, #0
 8008ad4:	f240 2101 	movw	r1, #513	; 0x201
 8008ad8:	f240 2001 	movw	r0, #513	; 0x201
 8008adc:	f001 fd2c 	bl	800a538 <SUBGRF_SetDioIrqParams>

    /* Set DBG pin */
    DBG_GPIO_RADIO_TX( SET );

    /* Set RF switch */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8008ae0:	4b70      	ldr	r3, [pc, #448]	; (8008ca4 <RadioSend+0x1e0>)
 8008ae2:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8008ae6:	2101      	movs	r1, #1
 8008ae8:	4618      	mov	r0, r3
 8008aea:	f002 f9c9 	bl	800ae80 <SUBGRF_SetSwitch>
    /* WORKAROUND - Modulation Quality with 500 kHz LoRaTM Bandwidth*/
    /* RegTxModulation = @address 0x0889 */
    if( ( SubgRf.Modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 8008aee:	4b6d      	ldr	r3, [pc, #436]	; (8008ca4 <RadioSend+0x1e0>)
 8008af0:	781b      	ldrb	r3, [r3, #0]
 8008af2:	2b01      	cmp	r3, #1
 8008af4:	d112      	bne.n	8008b1c <RadioSend+0x58>
 8008af6:	4b6b      	ldr	r3, [pc, #428]	; (8008ca4 <RadioSend+0x1e0>)
 8008af8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008afc:	2b06      	cmp	r3, #6
 8008afe:	d10d      	bne.n	8008b1c <RadioSend+0x58>
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 8008b00:	f640 0089 	movw	r0, #2185	; 0x889
 8008b04:	f002 f8dc 	bl	800acc0 <SUBGRF_ReadRegister>
 8008b08:	4603      	mov	r3, r0
 8008b0a:	f023 0304 	bic.w	r3, r3, #4
 8008b0e:	b2db      	uxtb	r3, r3
 8008b10:	4619      	mov	r1, r3
 8008b12:	f640 0089 	movw	r0, #2185	; 0x889
 8008b16:	f002 f8bf 	bl	800ac98 <SUBGRF_WriteRegister>
 8008b1a:	e00c      	b.n	8008b36 <RadioSend+0x72>
    }
    else
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 8008b1c:	f640 0089 	movw	r0, #2185	; 0x889
 8008b20:	f002 f8ce 	bl	800acc0 <SUBGRF_ReadRegister>
 8008b24:	4603      	mov	r3, r0
 8008b26:	f043 0304 	orr.w	r3, r3, #4
 8008b2a:	b2db      	uxtb	r3, r3
 8008b2c:	4619      	mov	r1, r3
 8008b2e:	f640 0089 	movw	r0, #2185	; 0x889
 8008b32:	f002 f8b1 	bl	800ac98 <SUBGRF_WriteRegister>
    }
    else
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    {
        /* WORKAROUND END */
        switch( SubgRf.Modem )
 8008b36:	4b5b      	ldr	r3, [pc, #364]	; (8008ca4 <RadioSend+0x1e0>)
 8008b38:	781b      	ldrb	r3, [r3, #0]
 8008b3a:	2b04      	cmp	r3, #4
 8008b3c:	f200 80a2 	bhi.w	8008c84 <RadioSend+0x1c0>
 8008b40:	a201      	add	r2, pc, #4	; (adr r2, 8008b48 <RadioSend+0x84>)
 8008b42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b46:	bf00      	nop
 8008b48:	08008b77 	.word	0x08008b77
 8008b4c:	08008b5d 	.word	0x08008b5d
 8008b50:	08008b77 	.word	0x08008b77
 8008b54:	08008bcd 	.word	0x08008bcd
 8008b58:	08008bed 	.word	0x08008bed
        {
        case MODEM_LORA:
        {
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 8008b5c:	4a51      	ldr	r2, [pc, #324]	; (8008ca4 <RadioSend+0x1e0>)
 8008b5e:	78fb      	ldrb	r3, [r7, #3]
 8008b60:	77d3      	strb	r3, [r2, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008b62:	4851      	ldr	r0, [pc, #324]	; (8008ca8 <RadioSend+0x1e4>)
 8008b64:	f001 ff50 	bl	800aa08 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8008b68:	78fb      	ldrb	r3, [r7, #3]
 8008b6a:	2200      	movs	r2, #0
 8008b6c:	4619      	mov	r1, r3
 8008b6e:	6878      	ldr	r0, [r7, #4]
 8008b70:	f001 fa00 	bl	8009f74 <SUBGRF_SendPayload>
            break;
 8008b74:	e087      	b.n	8008c86 <RadioSend+0x1c2>
        }
        case MODEM_MSK:
        case MODEM_FSK:
        {
            if ( 1UL == RFW_Is_Init( ) )
 8008b76:	f002 fb7c 	bl	800b272 <RFW_Is_Init>
 8008b7a:	4603      	mov	r3, r0
 8008b7c:	2b01      	cmp	r3, #1
 8008b7e:	d118      	bne.n	8008bb2 <RadioSend+0xee>
            {
                uint8_t outsize;
                if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 8008b80:	f107 020d 	add.w	r2, r7, #13
 8008b84:	78fb      	ldrb	r3, [r7, #3]
 8008b86:	4619      	mov	r1, r3
 8008b88:	6878      	ldr	r0, [r7, #4]
 8008b8a:	f002 fb8a 	bl	800b2a2 <RFW_TransmitInit>
 8008b8e:	4603      	mov	r3, r0
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d10c      	bne.n	8008bae <RadioSend+0xea>
                {
                    SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 8008b94:	7b7a      	ldrb	r2, [r7, #13]
 8008b96:	4b43      	ldr	r3, [pc, #268]	; (8008ca4 <RadioSend+0x1e0>)
 8008b98:	759a      	strb	r2, [r3, #22]
                    SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008b9a:	4843      	ldr	r0, [pc, #268]	; (8008ca8 <RadioSend+0x1e4>)
 8008b9c:	f001 ff34 	bl	800aa08 <SUBGRF_SetPacketParams>
                    SUBGRF_SendPayload( buffer, outsize, 0 );
 8008ba0:	7b7b      	ldrb	r3, [r7, #13]
 8008ba2:	2200      	movs	r2, #0
 8008ba4:	4619      	mov	r1, r3
 8008ba6:	6878      	ldr	r0, [r7, #4]
 8008ba8:	f001 f9e4 	bl	8009f74 <SUBGRF_SendPayload>
            {
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
                SUBGRF_SendPayload( buffer, size, 0 );
            }
            break;
 8008bac:	e06b      	b.n	8008c86 <RadioSend+0x1c2>
                    return RADIO_STATUS_ERROR;
 8008bae:	2303      	movs	r3, #3
 8008bb0:	e073      	b.n	8008c9a <RadioSend+0x1d6>
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 8008bb2:	4a3c      	ldr	r2, [pc, #240]	; (8008ca4 <RadioSend+0x1e0>)
 8008bb4:	78fb      	ldrb	r3, [r7, #3]
 8008bb6:	7593      	strb	r3, [r2, #22]
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008bb8:	483b      	ldr	r0, [pc, #236]	; (8008ca8 <RadioSend+0x1e4>)
 8008bba:	f001 ff25 	bl	800aa08 <SUBGRF_SetPacketParams>
                SUBGRF_SendPayload( buffer, size, 0 );
 8008bbe:	78fb      	ldrb	r3, [r7, #3]
 8008bc0:	2200      	movs	r2, #0
 8008bc2:	4619      	mov	r1, r3
 8008bc4:	6878      	ldr	r0, [r7, #4]
 8008bc6:	f001 f9d5 	bl	8009f74 <SUBGRF_SendPayload>
            break;
 8008bca:	e05c      	b.n	8008c86 <RadioSend+0x1c2>
        }
        case MODEM_BPSK:
        {
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8008bcc:	4b35      	ldr	r3, [pc, #212]	; (8008ca4 <RadioSend+0x1e0>)
 8008bce:	2202      	movs	r2, #2
 8008bd0:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 8008bd2:	4a34      	ldr	r2, [pc, #208]	; (8008ca4 <RadioSend+0x1e0>)
 8008bd4:	78fb      	ldrb	r3, [r7, #3]
 8008bd6:	7693      	strb	r3, [r2, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008bd8:	4833      	ldr	r0, [pc, #204]	; (8008ca8 <RadioSend+0x1e4>)
 8008bda:	f001 ff15 	bl	800aa08 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8008bde:	78fb      	ldrb	r3, [r7, #3]
 8008be0:	2200      	movs	r2, #0
 8008be2:	4619      	mov	r1, r3
 8008be4:	6878      	ldr	r0, [r7, #4]
 8008be6:	f001 f9c5 	bl	8009f74 <SUBGRF_SendPayload>
            break;
 8008bea:	e04c      	b.n	8008c86 <RadioSend+0x1c2>
        case MODEM_SIGFOX_TX:
        {
            /* from bpsk to dbpsk */
            /* first 1 bit duplicated */
            /* RadioBuffer is 1 bytes more */
            payload_integration( RadioBuffer, buffer, size );
 8008bec:	78fb      	ldrb	r3, [r7, #3]
 8008bee:	461a      	mov	r2, r3
 8008bf0:	6879      	ldr	r1, [r7, #4]
 8008bf2:	482e      	ldr	r0, [pc, #184]	; (8008cac <RadioSend+0x1e8>)
 8008bf4:	f000 fc98 	bl	8009528 <payload_integration>

            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8008bf8:	4b2a      	ldr	r3, [pc, #168]	; (8008ca4 <RadioSend+0x1e0>)
 8008bfa:	2202      	movs	r2, #2
 8008bfc:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 8008bfe:	78fb      	ldrb	r3, [r7, #3]
 8008c00:	3301      	adds	r3, #1
 8008c02:	b2da      	uxtb	r2, r3
 8008c04:	4b27      	ldr	r3, [pc, #156]	; (8008ca4 <RadioSend+0x1e0>)
 8008c06:	769a      	strb	r2, [r3, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008c08:	4827      	ldr	r0, [pc, #156]	; (8008ca8 <RadioSend+0x1e4>)
 8008c0a:	f001 fefd 	bl	800aa08 <SUBGRF_SetPacketParams>

            RadioWrite( SUBGHZ_RAM_RAMPUPL, 0 ); // clean start-up LSB
 8008c0e:	2100      	movs	r1, #0
 8008c10:	20f1      	movs	r0, #241	; 0xf1
 8008c12:	f000 f964 	bl	8008ede <RadioWrite>
            RadioWrite( SUBGHZ_RAM_RAMPUPH, 0 ); // clean start-up MSB
 8008c16:	2100      	movs	r1, #0
 8008c18:	20f0      	movs	r0, #240	; 0xf0
 8008c1a:	f000 f960 	bl	8008ede <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 8008c1e:	4b21      	ldr	r3, [pc, #132]	; (8008ca4 <RadioSend+0x1e0>)
 8008c20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008c22:	2b64      	cmp	r3, #100	; 0x64
 8008c24:	d108      	bne.n	8008c38 <RadioSend+0x174>
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0x70 ); // clean end of frame LSB
 8008c26:	2170      	movs	r1, #112	; 0x70
 8008c28:	20f3      	movs	r0, #243	; 0xf3
 8008c2a:	f000 f958 	bl	8008ede <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x1D ); // clean end of frame MSB
 8008c2e:	211d      	movs	r1, #29
 8008c30:	20f2      	movs	r0, #242	; 0xf2
 8008c32:	f000 f954 	bl	8008ede <RadioWrite>
 8008c36:	e007      	b.n	8008c48 <RadioSend+0x184>
            }
            else // 600 bps
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0xE1 ); // clean end of frame LSB
 8008c38:	21e1      	movs	r1, #225	; 0xe1
 8008c3a:	20f3      	movs	r0, #243	; 0xf3
 8008c3c:	f000 f94f 	bl	8008ede <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x04 ); // clean end of frame MSB
 8008c40:	2104      	movs	r1, #4
 8008c42:	20f2      	movs	r0, #242	; 0xf2
 8008c44:	f000 f94b 	bl	8008ede <RadioWrite>
            }

            uint16_t bitNum = ( size * 8 ) + 2;
 8008c48:	78fb      	ldrb	r3, [r7, #3]
 8008c4a:	b29b      	uxth	r3, r3
 8008c4c:	00db      	lsls	r3, r3, #3
 8008c4e:	b29b      	uxth	r3, r3
 8008c50:	3302      	adds	r3, #2
 8008c52:	81fb      	strh	r3, [r7, #14]
            RadioWrite( SUBGHZ_RAM_FRAMELIMH, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 8008c54:	89fb      	ldrh	r3, [r7, #14]
 8008c56:	0a1b      	lsrs	r3, r3, #8
 8008c58:	b29b      	uxth	r3, r3
 8008c5a:	b2db      	uxtb	r3, r3
 8008c5c:	4619      	mov	r1, r3
 8008c5e:	20f4      	movs	r0, #244	; 0xf4
 8008c60:	f000 f93d 	bl	8008ede <RadioWrite>
            RadioWrite( SUBGHZ_RAM_FRAMELIML, bitNum & 0x00FF );             // limit frame
 8008c64:	89fb      	ldrh	r3, [r7, #14]
 8008c66:	b2db      	uxtb	r3, r3
 8008c68:	4619      	mov	r1, r3
 8008c6a:	20f5      	movs	r0, #245	; 0xf5
 8008c6c:	f000 f937 	bl	8008ede <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size + 1, 0xFFFFFF );
 8008c70:	78fb      	ldrb	r3, [r7, #3]
 8008c72:	3301      	adds	r3, #1
 8008c74:	b2db      	uxtb	r3, r3
 8008c76:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8008c7a:	4619      	mov	r1, r3
 8008c7c:	480b      	ldr	r0, [pc, #44]	; (8008cac <RadioSend+0x1e8>)
 8008c7e:	f001 f979 	bl	8009f74 <SUBGRF_SendPayload>
            break;
 8008c82:	e000      	b.n	8008c86 <RadioSend+0x1c2>
        }
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 8008c84:	bf00      	nop
        }

        TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 8008c86:	4b07      	ldr	r3, [pc, #28]	; (8008ca4 <RadioSend+0x1e0>)
 8008c88:	685b      	ldr	r3, [r3, #4]
 8008c8a:	4619      	mov	r1, r3
 8008c8c:	4808      	ldr	r0, [pc, #32]	; (8008cb0 <RadioSend+0x1ec>)
 8008c8e:	f002 fdbb 	bl	800b808 <UTIL_TIMER_SetPeriod>
        TimerStart( &TxTimeoutTimer );
 8008c92:	4807      	ldr	r0, [pc, #28]	; (8008cb0 <RadioSend+0x1ec>)
 8008c94:	f002 fcda 	bl	800b64c <UTIL_TIMER_Start>
    }

    return RADIO_STATUS_OK;
 8008c98:	2300      	movs	r3, #0
}
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	3710      	adds	r7, #16
 8008c9e:	46bd      	mov	sp, r7
 8008ca0:	bd80      	pop	{r7, pc}
 8008ca2:	bf00      	nop
 8008ca4:	20000a34 	.word	0x20000a34
 8008ca8:	20000a42 	.word	0x20000a42
 8008cac:	20000930 	.word	0x20000930
 8008cb0:	20000a90 	.word	0x20000a90

08008cb4 <RadioSleep>:

static void RadioSleep( void )
{
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	b082      	sub	sp, #8
 8008cb8:	af00      	add	r7, sp, #0
    SleepParams_t params = { 0 };
 8008cba:	2300      	movs	r3, #0
 8008cbc:	713b      	strb	r3, [r7, #4]

    params.Fields.WarmStart = 1;
 8008cbe:	793b      	ldrb	r3, [r7, #4]
 8008cc0:	f043 0304 	orr.w	r3, r3, #4
 8008cc4:	713b      	strb	r3, [r7, #4]
    SUBGRF_SetSleep( params );
 8008cc6:	7938      	ldrb	r0, [r7, #4]
 8008cc8:	f001 fa30 	bl	800a12c <SUBGRF_SetSleep>

    RADIO_DELAY_MS( 2 );
 8008ccc:	2002      	movs	r0, #2
 8008cce:	f7f9 fe53 	bl	8002978 <HAL_Delay>
}
 8008cd2:	bf00      	nop
 8008cd4:	3708      	adds	r7, #8
 8008cd6:	46bd      	mov	sp, r7
 8008cd8:	bd80      	pop	{r7, pc}

08008cda <RadioStandby>:

static void RadioStandby( void )
{
 8008cda:	b580      	push	{r7, lr}
 8008cdc:	af00      	add	r7, sp, #0
    SUBGRF_SetStandby( STDBY_RC );
 8008cde:	2000      	movs	r0, #0
 8008ce0:	f001 fa56 	bl	800a190 <SUBGRF_SetStandby>
}
 8008ce4:	bf00      	nop
 8008ce6:	bd80      	pop	{r7, pc}

08008ce8 <RadioRx>:

static void RadioRx( uint32_t timeout )
{
 8008ce8:	b580      	push	{r7, lr}
 8008cea:	b082      	sub	sp, #8
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init( ) )
 8008cf0:	f002 fabf 	bl	800b272 <RFW_Is_Init>
 8008cf4:	4603      	mov	r3, r0
 8008cf6:	2b01      	cmp	r3, #1
 8008cf8:	d102      	bne.n	8008d00 <RadioRx+0x18>
    {
        RFW_ReceiveInit( );
 8008cfa:	f002 fae2 	bl	800b2c2 <RFW_ReceiveInit>
 8008cfe:	e007      	b.n	8008d10 <RadioRx+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8008d00:	2300      	movs	r3, #0
 8008d02:	2200      	movs	r2, #0
 8008d04:	f240 2162 	movw	r1, #610	; 0x262
 8008d08:	f240 2062 	movw	r0, #610	; 0x262
 8008d0c:	f001 fc14 	bl	800a538 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }

    if( timeout != 0 )
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d006      	beq.n	8008d24 <RadioRx+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 8008d16:	6879      	ldr	r1, [r7, #4]
 8008d18:	4811      	ldr	r0, [pc, #68]	; (8008d60 <RadioRx+0x78>)
 8008d1a:	f002 fd75 	bl	800b808 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8008d1e:	4810      	ldr	r0, [pc, #64]	; (8008d60 <RadioRx+0x78>)
 8008d20:	f002 fc94 	bl	800b64c <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8008d24:	4b0f      	ldr	r3, [pc, #60]	; (8008d64 <RadioRx+0x7c>)
 8008d26:	2200      	movs	r2, #0
 8008d28:	659a      	str	r2, [r3, #88]	; 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8008d2a:	4b0e      	ldr	r3, [pc, #56]	; (8008d64 <RadioRx+0x7c>)
 8008d2c:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8008d30:	2100      	movs	r1, #0
 8008d32:	4618      	mov	r0, r3
 8008d34:	f002 f8a4 	bl	800ae80 <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 8008d38:	4b0a      	ldr	r3, [pc, #40]	; (8008d64 <RadioRx+0x7c>)
 8008d3a:	785b      	ldrb	r3, [r3, #1]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d004      	beq.n	8008d4a <RadioRx+0x62>
    {
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8008d40:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8008d44:	f001 fa60 	bl	800a208 <SUBGRF_SetRx>
    }
    else
    {
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
    }
}
 8008d48:	e005      	b.n	8008d56 <RadioRx+0x6e>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 8008d4a:	4b06      	ldr	r3, [pc, #24]	; (8008d64 <RadioRx+0x7c>)
 8008d4c:	689b      	ldr	r3, [r3, #8]
 8008d4e:	019b      	lsls	r3, r3, #6
 8008d50:	4618      	mov	r0, r3
 8008d52:	f001 fa59 	bl	800a208 <SUBGRF_SetRx>
}
 8008d56:	bf00      	nop
 8008d58:	3708      	adds	r7, #8
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	bd80      	pop	{r7, pc}
 8008d5e:	bf00      	nop
 8008d60:	20000aa8 	.word	0x20000aa8
 8008d64:	20000a34 	.word	0x20000a34

08008d68 <RadioRxBoosted>:

static void RadioRxBoosted( uint32_t timeout )
{
 8008d68:	b580      	push	{r7, lr}
 8008d6a:	b082      	sub	sp, #8
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init() )
 8008d70:	f002 fa7f 	bl	800b272 <RFW_Is_Init>
 8008d74:	4603      	mov	r3, r0
 8008d76:	2b01      	cmp	r3, #1
 8008d78:	d102      	bne.n	8008d80 <RadioRxBoosted+0x18>
    {
        RFW_ReceiveInit();
 8008d7a:	f002 faa2 	bl	800b2c2 <RFW_ReceiveInit>
 8008d7e:	e007      	b.n	8008d90 <RadioRxBoosted+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8008d80:	2300      	movs	r3, #0
 8008d82:	2200      	movs	r2, #0
 8008d84:	f240 2162 	movw	r1, #610	; 0x262
 8008d88:	f240 2062 	movw	r0, #610	; 0x262
 8008d8c:	f001 fbd4 	bl	800a538 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }
    if( timeout != 0 )
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d006      	beq.n	8008da4 <RadioRxBoosted+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 8008d96:	6879      	ldr	r1, [r7, #4]
 8008d98:	4811      	ldr	r0, [pc, #68]	; (8008de0 <RadioRxBoosted+0x78>)
 8008d9a:	f002 fd35 	bl	800b808 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8008d9e:	4810      	ldr	r0, [pc, #64]	; (8008de0 <RadioRxBoosted+0x78>)
 8008da0:	f002 fc54 	bl	800b64c <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8008da4:	4b0f      	ldr	r3, [pc, #60]	; (8008de4 <RadioRxBoosted+0x7c>)
 8008da6:	2200      	movs	r2, #0
 8008da8:	659a      	str	r2, [r3, #88]	; 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8008daa:	4b0e      	ldr	r3, [pc, #56]	; (8008de4 <RadioRxBoosted+0x7c>)
 8008dac:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8008db0:	2100      	movs	r1, #0
 8008db2:	4618      	mov	r0, r3
 8008db4:	f002 f864 	bl	800ae80 <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 8008db8:	4b0a      	ldr	r3, [pc, #40]	; (8008de4 <RadioRxBoosted+0x7c>)
 8008dba:	785b      	ldrb	r3, [r3, #1]
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d004      	beq.n	8008dca <RadioRxBoosted+0x62>
    {
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 8008dc0:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8008dc4:	f001 fa40 	bl	800a248 <SUBGRF_SetRxBoosted>
    }
    else
    {
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
    }
}
 8008dc8:	e005      	b.n	8008dd6 <RadioRxBoosted+0x6e>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 8008dca:	4b06      	ldr	r3, [pc, #24]	; (8008de4 <RadioRxBoosted+0x7c>)
 8008dcc:	689b      	ldr	r3, [r3, #8]
 8008dce:	019b      	lsls	r3, r3, #6
 8008dd0:	4618      	mov	r0, r3
 8008dd2:	f001 fa39 	bl	800a248 <SUBGRF_SetRxBoosted>
}
 8008dd6:	bf00      	nop
 8008dd8:	3708      	adds	r7, #8
 8008dda:	46bd      	mov	sp, r7
 8008ddc:	bd80      	pop	{r7, pc}
 8008dde:	bf00      	nop
 8008de0:	20000aa8 	.word	0x20000aa8
 8008de4:	20000a34 	.word	0x20000a34

08008de8 <RadioSetRxDutyCycle>:

static void RadioSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 8008de8:	b580      	push	{r7, lr}
 8008dea:	b082      	sub	sp, #8
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	6078      	str	r0, [r7, #4]
 8008df0:	6039      	str	r1, [r7, #0]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 2 * rxTime + sleepTime;
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	005a      	lsls	r2, r3, #1
 8008df6:	683b      	ldr	r3, [r7, #0]
 8008df8:	4413      	add	r3, r2
 8008dfa:	4a0c      	ldr	r2, [pc, #48]	; (8008e2c <RadioSetRxDutyCycle+0x44>)
 8008dfc:	6593      	str	r3, [r2, #88]	; 0x58
    /*Enable also the IRQ_PREAMBLE_DETECTED*/
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8008dfe:	2300      	movs	r3, #0
 8008e00:	2200      	movs	r2, #0
 8008e02:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8008e06:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8008e0a:	f001 fb95 	bl	800a538 <SUBGRF_SetDioIrqParams>
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8008e0e:	4b07      	ldr	r3, [pc, #28]	; (8008e2c <RadioSetRxDutyCycle+0x44>)
 8008e10:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8008e14:	2100      	movs	r1, #0
 8008e16:	4618      	mov	r0, r3
 8008e18:	f002 f832 	bl	800ae80 <SUBGRF_SetSwitch>
    /* Start Rx DutyCycle*/
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 8008e1c:	6839      	ldr	r1, [r7, #0]
 8008e1e:	6878      	ldr	r0, [r7, #4]
 8008e20:	f001 fa36 	bl	800a290 <SUBGRF_SetRxDutyCycle>
}
 8008e24:	bf00      	nop
 8008e26:	3708      	adds	r7, #8
 8008e28:	46bd      	mov	sp, r7
 8008e2a:	bd80      	pop	{r7, pc}
 8008e2c:	20000a34 	.word	0x20000a34

08008e30 <RadioStartCad>:

static void RadioStartCad( void )
{
 8008e30:	b580      	push	{r7, lr}
 8008e32:	af00      	add	r7, sp, #0
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8008e34:	4b09      	ldr	r3, [pc, #36]	; (8008e5c <RadioStartCad+0x2c>)
 8008e36:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8008e3a:	2100      	movs	r1, #0
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	f002 f81f 	bl	800ae80 <SUBGRF_SetSwitch>

    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 8008e42:	2300      	movs	r3, #0
 8008e44:	2200      	movs	r2, #0
 8008e46:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8008e4a:	f44f 70c0 	mov.w	r0, #384	; 0x180
 8008e4e:	f001 fb73 	bl	800a538 <SUBGRF_SetDioIrqParams>
                            IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );
    SUBGRF_SetCad( );
 8008e52:	f001 fa49 	bl	800a2e8 <SUBGRF_SetCad>
}
 8008e56:	bf00      	nop
 8008e58:	bd80      	pop	{r7, pc}
 8008e5a:	bf00      	nop
 8008e5c:	20000a34 	.word	0x20000a34

08008e60 <RadioSetTxContinuousWave>:

static void RadioSetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 8008e60:	b580      	push	{r7, lr}
 8008e62:	b084      	sub	sp, #16
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	6078      	str	r0, [r7, #4]
 8008e68:	460b      	mov	r3, r1
 8008e6a:	70fb      	strb	r3, [r7, #3]
 8008e6c:	4613      	mov	r3, r2
 8008e6e:	803b      	strh	r3, [r7, #0]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    uint32_t timeout = ( uint32_t )time * 1000;
 8008e70:	883b      	ldrh	r3, [r7, #0]
 8008e72:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008e76:	fb02 f303 	mul.w	r3, r2, r3
 8008e7a:	60fb      	str	r3, [r7, #12]
    uint8_t antswitchpow;

    SUBGRF_SetRfFrequency( freq );
 8008e7c:	6878      	ldr	r0, [r7, #4]
 8008e7e:	f001 fbb7 	bl	800a5f0 <SUBGRF_SetRfFrequency>

    antswitchpow = SUBGRF_SetRfTxPower( power );
 8008e82:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008e86:	4618      	mov	r0, r3
 8008e88:	f002 f822 	bl	800aed0 <SUBGRF_SetRfTxPower>
 8008e8c:	4603      	mov	r3, r0
 8008e8e:	72fb      	strb	r3, [r7, #11]

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8008e90:	210e      	movs	r1, #14
 8008e92:	f640 101f 	movw	r0, #2335	; 0x91f
 8008e96:	f001 feff 	bl	800ac98 <SUBGRF_WriteRegister>

    /* Set RF switch */
    SUBGRF_SetSwitch( antswitchpow, RFSWITCH_TX );
 8008e9a:	7afb      	ldrb	r3, [r7, #11]
 8008e9c:	2101      	movs	r1, #1
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	f001 ffee 	bl	800ae80 <SUBGRF_SetSwitch>

    SUBGRF_SetTxContinuousWave( );
 8008ea4:	f001 fa2e 	bl	800a304 <SUBGRF_SetTxContinuousWave>

    TimerSetValue( &TxTimeoutTimer, timeout );
 8008ea8:	68f9      	ldr	r1, [r7, #12]
 8008eaa:	4805      	ldr	r0, [pc, #20]	; (8008ec0 <RadioSetTxContinuousWave+0x60>)
 8008eac:	f002 fcac 	bl	800b808 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 8008eb0:	4803      	ldr	r0, [pc, #12]	; (8008ec0 <RadioSetTxContinuousWave+0x60>)
 8008eb2:	f002 fbcb 	bl	800b64c <UTIL_TIMER_Start>
}
 8008eb6:	bf00      	nop
 8008eb8:	3710      	adds	r7, #16
 8008eba:	46bd      	mov	sp, r7
 8008ebc:	bd80      	pop	{r7, pc}
 8008ebe:	bf00      	nop
 8008ec0:	20000a90 	.word	0x20000a90

08008ec4 <RadioRssi>:

static int16_t RadioRssi( RadioModems_t modem )
{
 8008ec4:	b580      	push	{r7, lr}
 8008ec6:	b082      	sub	sp, #8
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	4603      	mov	r3, r0
 8008ecc:	71fb      	strb	r3, [r7, #7]
    return SUBGRF_GetRssiInst( );
 8008ece:	f001 fe50 	bl	800ab72 <SUBGRF_GetRssiInst>
 8008ed2:	4603      	mov	r3, r0
 8008ed4:	b21b      	sxth	r3, r3
}
 8008ed6:	4618      	mov	r0, r3
 8008ed8:	3708      	adds	r7, #8
 8008eda:	46bd      	mov	sp, r7
 8008edc:	bd80      	pop	{r7, pc}

08008ede <RadioWrite>:

static void RadioWrite( uint16_t addr, uint8_t data )
{
 8008ede:	b580      	push	{r7, lr}
 8008ee0:	b082      	sub	sp, #8
 8008ee2:	af00      	add	r7, sp, #0
 8008ee4:	4603      	mov	r3, r0
 8008ee6:	460a      	mov	r2, r1
 8008ee8:	80fb      	strh	r3, [r7, #6]
 8008eea:	4613      	mov	r3, r2
 8008eec:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegister( addr, data );
 8008eee:	797a      	ldrb	r2, [r7, #5]
 8008ef0:	88fb      	ldrh	r3, [r7, #6]
 8008ef2:	4611      	mov	r1, r2
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	f001 fecf 	bl	800ac98 <SUBGRF_WriteRegister>
}
 8008efa:	bf00      	nop
 8008efc:	3708      	adds	r7, #8
 8008efe:	46bd      	mov	sp, r7
 8008f00:	bd80      	pop	{r7, pc}

08008f02 <RadioRead>:

static uint8_t RadioRead( uint16_t addr )
{
 8008f02:	b580      	push	{r7, lr}
 8008f04:	b082      	sub	sp, #8
 8008f06:	af00      	add	r7, sp, #0
 8008f08:	4603      	mov	r3, r0
 8008f0a:	80fb      	strh	r3, [r7, #6]
    return SUBGRF_ReadRegister( addr );
 8008f0c:	88fb      	ldrh	r3, [r7, #6]
 8008f0e:	4618      	mov	r0, r3
 8008f10:	f001 fed6 	bl	800acc0 <SUBGRF_ReadRegister>
 8008f14:	4603      	mov	r3, r0
}
 8008f16:	4618      	mov	r0, r3
 8008f18:	3708      	adds	r7, #8
 8008f1a:	46bd      	mov	sp, r7
 8008f1c:	bd80      	pop	{r7, pc}

08008f1e <RadioWriteRegisters>:

static void RadioWriteRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8008f1e:	b580      	push	{r7, lr}
 8008f20:	b082      	sub	sp, #8
 8008f22:	af00      	add	r7, sp, #0
 8008f24:	4603      	mov	r3, r0
 8008f26:	6039      	str	r1, [r7, #0]
 8008f28:	80fb      	strh	r3, [r7, #6]
 8008f2a:	4613      	mov	r3, r2
 8008f2c:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegisters( addr, buffer, size );
 8008f2e:	797b      	ldrb	r3, [r7, #5]
 8008f30:	b29a      	uxth	r2, r3
 8008f32:	88fb      	ldrh	r3, [r7, #6]
 8008f34:	6839      	ldr	r1, [r7, #0]
 8008f36:	4618      	mov	r0, r3
 8008f38:	f001 fed6 	bl	800ace8 <SUBGRF_WriteRegisters>
}
 8008f3c:	bf00      	nop
 8008f3e:	3708      	adds	r7, #8
 8008f40:	46bd      	mov	sp, r7
 8008f42:	bd80      	pop	{r7, pc}

08008f44 <RadioReadRegisters>:

static void RadioReadRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8008f44:	b580      	push	{r7, lr}
 8008f46:	b082      	sub	sp, #8
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	4603      	mov	r3, r0
 8008f4c:	6039      	str	r1, [r7, #0]
 8008f4e:	80fb      	strh	r3, [r7, #6]
 8008f50:	4613      	mov	r3, r2
 8008f52:	717b      	strb	r3, [r7, #5]
    SUBGRF_ReadRegisters( addr, buffer, size );
 8008f54:	797b      	ldrb	r3, [r7, #5]
 8008f56:	b29a      	uxth	r2, r3
 8008f58:	88fb      	ldrh	r3, [r7, #6]
 8008f5a:	6839      	ldr	r1, [r7, #0]
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	f001 fee5 	bl	800ad2c <SUBGRF_ReadRegisters>
}
 8008f62:	bf00      	nop
 8008f64:	3708      	adds	r7, #8
 8008f66:	46bd      	mov	sp, r7
 8008f68:	bd80      	pop	{r7, pc}
	...

08008f6c <RadioSetMaxPayloadLength>:

static void RadioSetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 8008f6c:	b580      	push	{r7, lr}
 8008f6e:	b082      	sub	sp, #8
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	4603      	mov	r3, r0
 8008f74:	460a      	mov	r2, r1
 8008f76:	71fb      	strb	r3, [r7, #7]
 8008f78:	4613      	mov	r3, r2
 8008f7a:	71bb      	strb	r3, [r7, #6]
    if( modem == MODEM_LORA )
 8008f7c:	79fb      	ldrb	r3, [r7, #7]
 8008f7e:	2b01      	cmp	r3, #1
 8008f80:	d10a      	bne.n	8008f98 <RadioSetMaxPayloadLength+0x2c>
    {
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 8008f82:	4a0e      	ldr	r2, [pc, #56]	; (8008fbc <RadioSetMaxPayloadLength+0x50>)
 8008f84:	79bb      	ldrb	r3, [r7, #6]
 8008f86:	7013      	strb	r3, [r2, #0]
 8008f88:	4b0c      	ldr	r3, [pc, #48]	; (8008fbc <RadioSetMaxPayloadLength+0x50>)
 8008f8a:	781a      	ldrb	r2, [r3, #0]
 8008f8c:	4b0c      	ldr	r3, [pc, #48]	; (8008fc0 <RadioSetMaxPayloadLength+0x54>)
 8008f8e:	77da      	strb	r2, [r3, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008f90:	480c      	ldr	r0, [pc, #48]	; (8008fc4 <RadioSetMaxPayloadLength+0x58>)
 8008f92:	f001 fd39 	bl	800aa08 <SUBGRF_SetPacketParams>
        {
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
        }
    }
}
 8008f96:	e00d      	b.n	8008fb4 <RadioSetMaxPayloadLength+0x48>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 8008f98:	4b09      	ldr	r3, [pc, #36]	; (8008fc0 <RadioSetMaxPayloadLength+0x54>)
 8008f9a:	7d5b      	ldrb	r3, [r3, #21]
 8008f9c:	2b01      	cmp	r3, #1
 8008f9e:	d109      	bne.n	8008fb4 <RadioSetMaxPayloadLength+0x48>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 8008fa0:	4a06      	ldr	r2, [pc, #24]	; (8008fbc <RadioSetMaxPayloadLength+0x50>)
 8008fa2:	79bb      	ldrb	r3, [r7, #6]
 8008fa4:	7013      	strb	r3, [r2, #0]
 8008fa6:	4b05      	ldr	r3, [pc, #20]	; (8008fbc <RadioSetMaxPayloadLength+0x50>)
 8008fa8:	781a      	ldrb	r2, [r3, #0]
 8008faa:	4b05      	ldr	r3, [pc, #20]	; (8008fc0 <RadioSetMaxPayloadLength+0x54>)
 8008fac:	759a      	strb	r2, [r3, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008fae:	4805      	ldr	r0, [pc, #20]	; (8008fc4 <RadioSetMaxPayloadLength+0x58>)
 8008fb0:	f001 fd2a 	bl	800aa08 <SUBGRF_SetPacketParams>
}
 8008fb4:	bf00      	nop
 8008fb6:	3708      	adds	r7, #8
 8008fb8:	46bd      	mov	sp, r7
 8008fba:	bd80      	pop	{r7, pc}
 8008fbc:	20000015 	.word	0x20000015
 8008fc0:	20000a34 	.word	0x20000a34
 8008fc4:	20000a42 	.word	0x20000a42

08008fc8 <RadioSetPublicNetwork>:

static void RadioSetPublicNetwork( bool enable )
{
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	b082      	sub	sp, #8
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	4603      	mov	r3, r0
 8008fd0:	71fb      	strb	r3, [r7, #7]
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 8008fd2:	4a13      	ldr	r2, [pc, #76]	; (8009020 <RadioSetPublicNetwork+0x58>)
 8008fd4:	79fb      	ldrb	r3, [r7, #7]
 8008fd6:	7313      	strb	r3, [r2, #12]
 8008fd8:	4b11      	ldr	r3, [pc, #68]	; (8009020 <RadioSetPublicNetwork+0x58>)
 8008fda:	7b1a      	ldrb	r2, [r3, #12]
 8008fdc:	4b10      	ldr	r3, [pc, #64]	; (8009020 <RadioSetPublicNetwork+0x58>)
 8008fde:	735a      	strb	r2, [r3, #13]

    RadioSetModem( MODEM_LORA );
 8008fe0:	2001      	movs	r0, #1
 8008fe2:	f7ff f819 	bl	8008018 <RadioSetModem>
    if( enable == true )
 8008fe6:	79fb      	ldrb	r3, [r7, #7]
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d00a      	beq.n	8009002 <RadioSetPublicNetwork+0x3a>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 8008fec:	2134      	movs	r1, #52	; 0x34
 8008fee:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 8008ff2:	f001 fe51 	bl	800ac98 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 8008ff6:	2144      	movs	r1, #68	; 0x44
 8008ff8:	f240 7041 	movw	r0, #1857	; 0x741
 8008ffc:	f001 fe4c 	bl	800ac98 <SUBGRF_WriteRegister>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
    }
}
 8009000:	e009      	b.n	8009016 <RadioSetPublicNetwork+0x4e>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 8009002:	2114      	movs	r1, #20
 8009004:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 8009008:	f001 fe46 	bl	800ac98 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 800900c:	2124      	movs	r1, #36	; 0x24
 800900e:	f240 7041 	movw	r0, #1857	; 0x741
 8009012:	f001 fe41 	bl	800ac98 <SUBGRF_WriteRegister>
}
 8009016:	bf00      	nop
 8009018:	3708      	adds	r7, #8
 800901a:	46bd      	mov	sp, r7
 800901c:	bd80      	pop	{r7, pc}
 800901e:	bf00      	nop
 8009020:	20000a34 	.word	0x20000a34

08009024 <RadioGetWakeupTime>:

static uint32_t RadioGetWakeupTime( void )
{
 8009024:	b580      	push	{r7, lr}
 8009026:	af00      	add	r7, sp, #0
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 8009028:	f001 ff86 	bl	800af38 <SUBGRF_GetRadioWakeUpTime>
 800902c:	4603      	mov	r3, r0
 800902e:	3303      	adds	r3, #3
}
 8009030:	4618      	mov	r0, r3
 8009032:	bd80      	pop	{r7, pc}

08009034 <RadioOnTxTimeoutIrq>:

static void RadioOnTxTimeoutIrq( void *context )
{
 8009034:	b580      	push	{r7, lr}
 8009036:	b082      	sub	sp, #8
 8009038:	af00      	add	r7, sp, #0
 800903a:	6078      	str	r0, [r7, #4]
    RADIO_TX_TIMEOUT_PROCESS();
 800903c:	f000 f80e 	bl	800905c <RadioOnTxTimeoutProcess>
}
 8009040:	bf00      	nop
 8009042:	3708      	adds	r7, #8
 8009044:	46bd      	mov	sp, r7
 8009046:	bd80      	pop	{r7, pc}

08009048 <RadioOnRxTimeoutIrq>:

static void RadioOnRxTimeoutIrq( void *context )
{
 8009048:	b580      	push	{r7, lr}
 800904a:	b082      	sub	sp, #8
 800904c:	af00      	add	r7, sp, #0
 800904e:	6078      	str	r0, [r7, #4]
    RADIO_RX_TIMEOUT_PROCESS();
 8009050:	f000 f818 	bl	8009084 <RadioOnRxTimeoutProcess>
}
 8009054:	bf00      	nop
 8009056:	3708      	adds	r7, #8
 8009058:	46bd      	mov	sp, r7
 800905a:	bd80      	pop	{r7, pc}

0800905c <RadioOnTxTimeoutProcess>:

static void RadioOnTxTimeoutProcess( void )
{
 800905c:	b580      	push	{r7, lr}
 800905e:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_TX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8009060:	4b07      	ldr	r3, [pc, #28]	; (8009080 <RadioOnTxTimeoutProcess+0x24>)
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	2b00      	cmp	r3, #0
 8009066:	d008      	beq.n	800907a <RadioOnTxTimeoutProcess+0x1e>
 8009068:	4b05      	ldr	r3, [pc, #20]	; (8009080 <RadioOnTxTimeoutProcess+0x24>)
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	685b      	ldr	r3, [r3, #4]
 800906e:	2b00      	cmp	r3, #0
 8009070:	d003      	beq.n	800907a <RadioOnTxTimeoutProcess+0x1e>
    {
        RadioEvents->TxTimeout( );
 8009072:	4b03      	ldr	r3, [pc, #12]	; (8009080 <RadioOnTxTimeoutProcess+0x24>)
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	685b      	ldr	r3, [r3, #4]
 8009078:	4798      	blx	r3
    }
}
 800907a:	bf00      	nop
 800907c:	bd80      	pop	{r7, pc}
 800907e:	bf00      	nop
 8009080:	20000a30 	.word	0x20000a30

08009084 <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 8009084:	b580      	push	{r7, lr}
 8009086:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_RX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8009088:	4b07      	ldr	r3, [pc, #28]	; (80090a8 <RadioOnRxTimeoutProcess+0x24>)
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	2b00      	cmp	r3, #0
 800908e:	d008      	beq.n	80090a2 <RadioOnRxTimeoutProcess+0x1e>
 8009090:	4b05      	ldr	r3, [pc, #20]	; (80090a8 <RadioOnRxTimeoutProcess+0x24>)
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	68db      	ldr	r3, [r3, #12]
 8009096:	2b00      	cmp	r3, #0
 8009098:	d003      	beq.n	80090a2 <RadioOnRxTimeoutProcess+0x1e>
    {
        RadioEvents->RxTimeout( );
 800909a:	4b03      	ldr	r3, [pc, #12]	; (80090a8 <RadioOnRxTimeoutProcess+0x24>)
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	68db      	ldr	r3, [r3, #12]
 80090a0:	4798      	blx	r3
    }
}
 80090a2:	bf00      	nop
 80090a4:	bd80      	pop	{r7, pc}
 80090a6:	bf00      	nop
 80090a8:	20000a30 	.word	0x20000a30

080090ac <RadioOnDioIrq>:

static void RadioOnDioIrq( RadioIrqMasks_t radioIrq )
{
 80090ac:	b580      	push	{r7, lr}
 80090ae:	b082      	sub	sp, #8
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	4603      	mov	r3, r0
 80090b4:	80fb      	strh	r3, [r7, #6]
    SubgRf.RadioIrq = radioIrq;
 80090b6:	4a05      	ldr	r2, [pc, #20]	; (80090cc <RadioOnDioIrq+0x20>)
 80090b8:	88fb      	ldrh	r3, [r7, #6]
 80090ba:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54

    RADIO_IRQ_PROCESS();
 80090be:	f000 f807 	bl	80090d0 <RadioIrqProcess>
}
 80090c2:	bf00      	nop
 80090c4:	3708      	adds	r7, #8
 80090c6:	46bd      	mov	sp, r7
 80090c8:	bd80      	pop	{r7, pc}
 80090ca:	bf00      	nop
 80090cc:	20000a34 	.word	0x20000a34

080090d0 <RadioIrqProcess>:

static void RadioIrqProcess( void )
{
 80090d0:	b5b0      	push	{r4, r5, r7, lr}
 80090d2:	b082      	sub	sp, #8
 80090d4:	af00      	add	r7, sp, #0
    uint8_t size = 0;
 80090d6:	2300      	movs	r3, #0
 80090d8:	71fb      	strb	r3, [r7, #7]
    int32_t cfo = 0;
 80090da:	2300      	movs	r3, #0
 80090dc:	603b      	str	r3, [r7, #0]

    switch( SubgRf.RadioIrq )
 80090de:	4ba5      	ldr	r3, [pc, #660]	; (8009374 <RadioIrqProcess+0x2a4>)
 80090e0:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80090e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80090e8:	f000 810d 	beq.w	8009306 <RadioIrqProcess+0x236>
 80090ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80090f0:	f300 81c0 	bgt.w	8009474 <RadioIrqProcess+0x3a4>
 80090f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80090f8:	f000 80f1 	beq.w	80092de <RadioIrqProcess+0x20e>
 80090fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009100:	f300 81b8 	bgt.w	8009474 <RadioIrqProcess+0x3a4>
 8009104:	2b80      	cmp	r3, #128	; 0x80
 8009106:	f000 80d6 	beq.w	80092b6 <RadioIrqProcess+0x1e6>
 800910a:	2b80      	cmp	r3, #128	; 0x80
 800910c:	f300 81b2 	bgt.w	8009474 <RadioIrqProcess+0x3a4>
 8009110:	2b20      	cmp	r3, #32
 8009112:	dc49      	bgt.n	80091a8 <RadioIrqProcess+0xd8>
 8009114:	2b00      	cmp	r3, #0
 8009116:	f340 81ad 	ble.w	8009474 <RadioIrqProcess+0x3a4>
 800911a:	3b01      	subs	r3, #1
 800911c:	2b1f      	cmp	r3, #31
 800911e:	f200 81a9 	bhi.w	8009474 <RadioIrqProcess+0x3a4>
 8009122:	a201      	add	r2, pc, #4	; (adr r2, 8009128 <RadioIrqProcess+0x58>)
 8009124:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009128:	080091b1 	.word	0x080091b1
 800912c:	080091eb 	.word	0x080091eb
 8009130:	08009475 	.word	0x08009475
 8009134:	08009391 	.word	0x08009391
 8009138:	08009475 	.word	0x08009475
 800913c:	08009475 	.word	0x08009475
 8009140:	08009475 	.word	0x08009475
 8009144:	080093ff 	.word	0x080093ff
 8009148:	08009475 	.word	0x08009475
 800914c:	08009475 	.word	0x08009475
 8009150:	08009475 	.word	0x08009475
 8009154:	08009475 	.word	0x08009475
 8009158:	08009475 	.word	0x08009475
 800915c:	08009475 	.word	0x08009475
 8009160:	08009475 	.word	0x08009475
 8009164:	08009475 	.word	0x08009475
 8009168:	08009475 	.word	0x08009475
 800916c:	08009475 	.word	0x08009475
 8009170:	08009475 	.word	0x08009475
 8009174:	08009475 	.word	0x08009475
 8009178:	08009475 	.word	0x08009475
 800917c:	08009475 	.word	0x08009475
 8009180:	08009475 	.word	0x08009475
 8009184:	08009475 	.word	0x08009475
 8009188:	08009475 	.word	0x08009475
 800918c:	08009475 	.word	0x08009475
 8009190:	08009475 	.word	0x08009475
 8009194:	08009475 	.word	0x08009475
 8009198:	08009475 	.word	0x08009475
 800919c:	08009475 	.word	0x08009475
 80091a0:	08009475 	.word	0x08009475
 80091a4:	0800940f 	.word	0x0800940f
 80091a8:	2b40      	cmp	r3, #64	; 0x40
 80091aa:	f000 814b 	beq.w	8009444 <RadioIrqProcess+0x374>
        MW_LOG( TS_ON, VLEVEL_M,  "HOP\r\n" );
        break;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    default:
        break;
 80091ae:	e161      	b.n	8009474 <RadioIrqProcess+0x3a4>
        TimerStop( &TxTimeoutTimer );
 80091b0:	4871      	ldr	r0, [pc, #452]	; (8009378 <RadioIrqProcess+0x2a8>)
 80091b2:	f002 fab9 	bl	800b728 <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 80091b6:	2000      	movs	r0, #0
 80091b8:	f000 ffea 	bl	800a190 <SUBGRF_SetStandby>
        if( RFW_Is_LongPacketModeEnabled() == 1 )
 80091bc:	f002 f860 	bl	800b280 <RFW_Is_LongPacketModeEnabled>
 80091c0:	4603      	mov	r3, r0
 80091c2:	2b01      	cmp	r3, #1
 80091c4:	d101      	bne.n	80091ca <RadioIrqProcess+0xfa>
            RFW_DeInit_TxLongPacket( );
 80091c6:	f002 f884 	bl	800b2d2 <RFW_DeInit_TxLongPacket>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 80091ca:	4b6c      	ldr	r3, [pc, #432]	; (800937c <RadioIrqProcess+0x2ac>)
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	f000 8152 	beq.w	8009478 <RadioIrqProcess+0x3a8>
 80091d4:	4b69      	ldr	r3, [pc, #420]	; (800937c <RadioIrqProcess+0x2ac>)
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	2b00      	cmp	r3, #0
 80091dc:	f000 814c 	beq.w	8009478 <RadioIrqProcess+0x3a8>
            RadioEvents->TxDone( );
 80091e0:	4b66      	ldr	r3, [pc, #408]	; (800937c <RadioIrqProcess+0x2ac>)
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	4798      	blx	r3
        break;
 80091e8:	e146      	b.n	8009478 <RadioIrqProcess+0x3a8>
        TimerStop( &RxTimeoutTimer );
 80091ea:	4865      	ldr	r0, [pc, #404]	; (8009380 <RadioIrqProcess+0x2b0>)
 80091ec:	f002 fa9c 	bl	800b728 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 80091f0:	4b60      	ldr	r3, [pc, #384]	; (8009374 <RadioIrqProcess+0x2a4>)
 80091f2:	785b      	ldrb	r3, [r3, #1]
 80091f4:	f083 0301 	eor.w	r3, r3, #1
 80091f8:	b2db      	uxtb	r3, r3
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d014      	beq.n	8009228 <RadioIrqProcess+0x158>
            SUBGRF_SetStandby( STDBY_RC );
 80091fe:	2000      	movs	r0, #0
 8009200:	f000 ffc6 	bl	800a190 <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( SUBGHZ_RTCCTLR, 0x00 );
 8009204:	2100      	movs	r1, #0
 8009206:	f640 1002 	movw	r0, #2306	; 0x902
 800920a:	f001 fd45 	bl	800ac98 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( SUBGHZ_EVENTMASKR, SUBGRF_ReadRegister( SUBGHZ_EVENTMASKR ) | ( 1 << 1 ) );
 800920e:	f640 1044 	movw	r0, #2372	; 0x944
 8009212:	f001 fd55 	bl	800acc0 <SUBGRF_ReadRegister>
 8009216:	4603      	mov	r3, r0
 8009218:	f043 0302 	orr.w	r3, r3, #2
 800921c:	b2db      	uxtb	r3, r3
 800921e:	4619      	mov	r1, r3
 8009220:	f640 1044 	movw	r0, #2372	; 0x944
 8009224:	f001 fd38 	bl	800ac98 <SUBGRF_WriteRegister>
        SUBGRF_GetPayload( RadioBuffer, &size, 255 );
 8009228:	1dfb      	adds	r3, r7, #7
 800922a:	22ff      	movs	r2, #255	; 0xff
 800922c:	4619      	mov	r1, r3
 800922e:	4855      	ldr	r0, [pc, #340]	; (8009384 <RadioIrqProcess+0x2b4>)
 8009230:	f000 fe7e 	bl	8009f30 <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &( SubgRf.PacketStatus ) );
 8009234:	4854      	ldr	r0, [pc, #336]	; (8009388 <RadioIrqProcess+0x2b8>)
 8009236:	f001 fcdd 	bl	800abf4 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 800923a:	4b50      	ldr	r3, [pc, #320]	; (800937c <RadioIrqProcess+0x2ac>)
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	2b00      	cmp	r3, #0
 8009240:	f000 811c 	beq.w	800947c <RadioIrqProcess+0x3ac>
 8009244:	4b4d      	ldr	r3, [pc, #308]	; (800937c <RadioIrqProcess+0x2ac>)
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	689b      	ldr	r3, [r3, #8]
 800924a:	2b00      	cmp	r3, #0
 800924c:	f000 8116 	beq.w	800947c <RadioIrqProcess+0x3ac>
            switch( SubgRf.PacketStatus.packetType )
 8009250:	4b48      	ldr	r3, [pc, #288]	; (8009374 <RadioIrqProcess+0x2a4>)
 8009252:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009256:	2b01      	cmp	r3, #1
 8009258:	d10e      	bne.n	8009278 <RadioIrqProcess+0x1a8>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt,
 800925a:	4b48      	ldr	r3, [pc, #288]	; (800937c <RadioIrqProcess+0x2ac>)
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	689c      	ldr	r4, [r3, #8]
 8009260:	79fb      	ldrb	r3, [r7, #7]
 8009262:	b299      	uxth	r1, r3
 8009264:	4b43      	ldr	r3, [pc, #268]	; (8009374 <RadioIrqProcess+0x2a4>)
 8009266:	f993 3030 	ldrsb.w	r3, [r3, #48]	; 0x30
 800926a:	b21a      	sxth	r2, r3
 800926c:	4b41      	ldr	r3, [pc, #260]	; (8009374 <RadioIrqProcess+0x2a4>)
 800926e:	f993 3031 	ldrsb.w	r3, [r3, #49]	; 0x31
 8009272:	4844      	ldr	r0, [pc, #272]	; (8009384 <RadioIrqProcess+0x2b4>)
 8009274:	47a0      	blx	r4
                break;
 8009276:	e01d      	b.n	80092b4 <RadioIrqProcess+0x1e4>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 8009278:	4b3e      	ldr	r3, [pc, #248]	; (8009374 <RadioIrqProcess+0x2a4>)
 800927a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800927c:	463a      	mov	r2, r7
 800927e:	4611      	mov	r1, r2
 8009280:	4618      	mov	r0, r3
 8009282:	f001 ff4b 	bl	800b11c <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, ( int8_t ) DIVR( cfo, 1000 ) );
 8009286:	4b3d      	ldr	r3, [pc, #244]	; (800937c <RadioIrqProcess+0x2ac>)
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	689c      	ldr	r4, [r3, #8]
 800928c:	79fb      	ldrb	r3, [r7, #7]
 800928e:	b299      	uxth	r1, r3
 8009290:	4b38      	ldr	r3, [pc, #224]	; (8009374 <RadioIrqProcess+0x2a4>)
 8009292:	f993 3029 	ldrsb.w	r3, [r3, #41]	; 0x29
 8009296:	b218      	sxth	r0, r3
 8009298:	683b      	ldr	r3, [r7, #0]
 800929a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800929e:	4a3b      	ldr	r2, [pc, #236]	; (800938c <RadioIrqProcess+0x2bc>)
 80092a0:	fb82 5203 	smull	r5, r2, r2, r3
 80092a4:	1192      	asrs	r2, r2, #6
 80092a6:	17db      	asrs	r3, r3, #31
 80092a8:	1ad3      	subs	r3, r2, r3
 80092aa:	b25b      	sxtb	r3, r3
 80092ac:	4602      	mov	r2, r0
 80092ae:	4835      	ldr	r0, [pc, #212]	; (8009384 <RadioIrqProcess+0x2b4>)
 80092b0:	47a0      	blx	r4
                break;
 80092b2:	bf00      	nop
        break;
 80092b4:	e0e2      	b.n	800947c <RadioIrqProcess+0x3ac>
        SUBGRF_SetStandby( STDBY_RC );
 80092b6:	2000      	movs	r0, #0
 80092b8:	f000 ff6a 	bl	800a190 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 80092bc:	4b2f      	ldr	r3, [pc, #188]	; (800937c <RadioIrqProcess+0x2ac>)
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	f000 80dd 	beq.w	8009480 <RadioIrqProcess+0x3b0>
 80092c6:	4b2d      	ldr	r3, [pc, #180]	; (800937c <RadioIrqProcess+0x2ac>)
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	699b      	ldr	r3, [r3, #24]
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	f000 80d7 	beq.w	8009480 <RadioIrqProcess+0x3b0>
            RadioEvents->CadDone( false );
 80092d2:	4b2a      	ldr	r3, [pc, #168]	; (800937c <RadioIrqProcess+0x2ac>)
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	699b      	ldr	r3, [r3, #24]
 80092d8:	2000      	movs	r0, #0
 80092da:	4798      	blx	r3
        break;
 80092dc:	e0d0      	b.n	8009480 <RadioIrqProcess+0x3b0>
        SUBGRF_SetStandby( STDBY_RC );
 80092de:	2000      	movs	r0, #0
 80092e0:	f000 ff56 	bl	800a190 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 80092e4:	4b25      	ldr	r3, [pc, #148]	; (800937c <RadioIrqProcess+0x2ac>)
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	f000 80cb 	beq.w	8009484 <RadioIrqProcess+0x3b4>
 80092ee:	4b23      	ldr	r3, [pc, #140]	; (800937c <RadioIrqProcess+0x2ac>)
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	699b      	ldr	r3, [r3, #24]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	f000 80c5 	beq.w	8009484 <RadioIrqProcess+0x3b4>
            RadioEvents->CadDone( true );
 80092fa:	4b20      	ldr	r3, [pc, #128]	; (800937c <RadioIrqProcess+0x2ac>)
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	699b      	ldr	r3, [r3, #24]
 8009300:	2001      	movs	r0, #1
 8009302:	4798      	blx	r3
        break;
 8009304:	e0be      	b.n	8009484 <RadioIrqProcess+0x3b4>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 8009306:	f000 fdf9 	bl	8009efc <SUBGRF_GetOperatingMode>
 800930a:	4603      	mov	r3, r0
 800930c:	2b04      	cmp	r3, #4
 800930e:	d115      	bne.n	800933c <RadioIrqProcess+0x26c>
            TimerStop( &TxTimeoutTimer );
 8009310:	4819      	ldr	r0, [pc, #100]	; (8009378 <RadioIrqProcess+0x2a8>)
 8009312:	f002 fa09 	bl	800b728 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 8009316:	2000      	movs	r0, #0
 8009318:	f000 ff3a 	bl	800a190 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 800931c:	4b17      	ldr	r3, [pc, #92]	; (800937c <RadioIrqProcess+0x2ac>)
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	2b00      	cmp	r3, #0
 8009322:	f000 80b1 	beq.w	8009488 <RadioIrqProcess+0x3b8>
 8009326:	4b15      	ldr	r3, [pc, #84]	; (800937c <RadioIrqProcess+0x2ac>)
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	685b      	ldr	r3, [r3, #4]
 800932c:	2b00      	cmp	r3, #0
 800932e:	f000 80ab 	beq.w	8009488 <RadioIrqProcess+0x3b8>
                RadioEvents->TxTimeout( );
 8009332:	4b12      	ldr	r3, [pc, #72]	; (800937c <RadioIrqProcess+0x2ac>)
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	685b      	ldr	r3, [r3, #4]
 8009338:	4798      	blx	r3
        break;
 800933a:	e0a5      	b.n	8009488 <RadioIrqProcess+0x3b8>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 800933c:	f000 fdde 	bl	8009efc <SUBGRF_GetOperatingMode>
 8009340:	4603      	mov	r3, r0
 8009342:	2b05      	cmp	r3, #5
 8009344:	f040 80a0 	bne.w	8009488 <RadioIrqProcess+0x3b8>
            TimerStop( &RxTimeoutTimer );
 8009348:	480d      	ldr	r0, [pc, #52]	; (8009380 <RadioIrqProcess+0x2b0>)
 800934a:	f002 f9ed 	bl	800b728 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 800934e:	2000      	movs	r0, #0
 8009350:	f000 ff1e 	bl	800a190 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8009354:	4b09      	ldr	r3, [pc, #36]	; (800937c <RadioIrqProcess+0x2ac>)
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	2b00      	cmp	r3, #0
 800935a:	f000 8095 	beq.w	8009488 <RadioIrqProcess+0x3b8>
 800935e:	4b07      	ldr	r3, [pc, #28]	; (800937c <RadioIrqProcess+0x2ac>)
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	68db      	ldr	r3, [r3, #12]
 8009364:	2b00      	cmp	r3, #0
 8009366:	f000 808f 	beq.w	8009488 <RadioIrqProcess+0x3b8>
                RadioEvents->RxTimeout( );
 800936a:	4b04      	ldr	r3, [pc, #16]	; (800937c <RadioIrqProcess+0x2ac>)
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	68db      	ldr	r3, [r3, #12]
 8009370:	4798      	blx	r3
        break;
 8009372:	e089      	b.n	8009488 <RadioIrqProcess+0x3b8>
 8009374:	20000a34 	.word	0x20000a34
 8009378:	20000a90 	.word	0x20000a90
 800937c:	20000a30 	.word	0x20000a30
 8009380:	20000aa8 	.word	0x20000aa8
 8009384:	20000930 	.word	0x20000930
 8009388:	20000a58 	.word	0x20000a58
 800938c:	10624dd3 	.word	0x10624dd3
        if( SubgRf.RxDcPreambleDetectTimeout != 0 )
 8009390:	4b44      	ldr	r3, [pc, #272]	; (80094a4 <RadioIrqProcess+0x3d4>)
 8009392:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009394:	2b00      	cmp	r3, #0
 8009396:	d079      	beq.n	800948c <RadioIrqProcess+0x3bc>
            Radio.Write( SUBGHZ_RTCPRDR2, ( SubgRf.RxDcPreambleDetectTimeout >> 16 ) & 0xFF ); /*Update Radio RTC Period MSB*/
 8009398:	4a43      	ldr	r2, [pc, #268]	; (80094a8 <RadioIrqProcess+0x3d8>)
 800939a:	4b42      	ldr	r3, [pc, #264]	; (80094a4 <RadioIrqProcess+0x3d4>)
 800939c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800939e:	0c1b      	lsrs	r3, r3, #16
 80093a0:	b2db      	uxtb	r3, r3
 80093a2:	4619      	mov	r1, r3
 80093a4:	f640 1003 	movw	r0, #2307	; 0x903
 80093a8:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR1, ( SubgRf.RxDcPreambleDetectTimeout >> 8 ) & 0xFF ); /*Update Radio RTC Period MidByte*/
 80093aa:	4a3f      	ldr	r2, [pc, #252]	; (80094a8 <RadioIrqProcess+0x3d8>)
 80093ac:	4b3d      	ldr	r3, [pc, #244]	; (80094a4 <RadioIrqProcess+0x3d4>)
 80093ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80093b0:	0a1b      	lsrs	r3, r3, #8
 80093b2:	b2db      	uxtb	r3, r3
 80093b4:	4619      	mov	r1, r3
 80093b6:	f640 1004 	movw	r0, #2308	; 0x904
 80093ba:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR0, ( SubgRf.RxDcPreambleDetectTimeout ) & 0xFF ); /*Update Radio RTC Period lsb*/
 80093bc:	4a3a      	ldr	r2, [pc, #232]	; (80094a8 <RadioIrqProcess+0x3d8>)
 80093be:	4b39      	ldr	r3, [pc, #228]	; (80094a4 <RadioIrqProcess+0x3d4>)
 80093c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80093c2:	b2db      	uxtb	r3, r3
 80093c4:	4619      	mov	r1, r3
 80093c6:	f640 1005 	movw	r0, #2309	; 0x905
 80093ca:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCCTLR, Radio.Read( SUBGHZ_RTCCTLR ) | 0x1 ); /*restart Radio RTC*/
 80093cc:	4c36      	ldr	r4, [pc, #216]	; (80094a8 <RadioIrqProcess+0x3d8>)
 80093ce:	4b37      	ldr	r3, [pc, #220]	; (80094ac <RadioIrqProcess+0x3dc>)
 80093d0:	f640 1002 	movw	r0, #2306	; 0x902
 80093d4:	4798      	blx	r3
 80093d6:	4603      	mov	r3, r0
 80093d8:	f043 0301 	orr.w	r3, r3, #1
 80093dc:	b2db      	uxtb	r3, r3
 80093de:	4619      	mov	r1, r3
 80093e0:	f640 1002 	movw	r0, #2306	; 0x902
 80093e4:	47a0      	blx	r4
            SubgRf.RxDcPreambleDetectTimeout = 0;
 80093e6:	4b2f      	ldr	r3, [pc, #188]	; (80094a4 <RadioIrqProcess+0x3d4>)
 80093e8:	2200      	movs	r2, #0
 80093ea:	659a      	str	r2, [r3, #88]	; 0x58
            SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 80093ec:	2300      	movs	r3, #0
 80093ee:	2200      	movs	r2, #0
 80093f0:	f240 2162 	movw	r1, #610	; 0x262
 80093f4:	f240 2062 	movw	r0, #610	; 0x262
 80093f8:	f001 f89e 	bl	800a538 <SUBGRF_SetDioIrqParams>
        break;
 80093fc:	e046      	b.n	800948c <RadioIrqProcess+0x3bc>
        if( 1UL == RFW_Is_Init( ) )
 80093fe:	f001 ff38 	bl	800b272 <RFW_Is_Init>
 8009402:	4603      	mov	r3, r0
 8009404:	2b01      	cmp	r3, #1
 8009406:	d143      	bne.n	8009490 <RadioIrqProcess+0x3c0>
            RFW_ReceivePayload( );
 8009408:	f001 ff69 	bl	800b2de <RFW_ReceivePayload>
        break;
 800940c:	e040      	b.n	8009490 <RadioIrqProcess+0x3c0>
        TimerStop( &RxTimeoutTimer );
 800940e:	4828      	ldr	r0, [pc, #160]	; (80094b0 <RadioIrqProcess+0x3e0>)
 8009410:	f002 f98a 	bl	800b728 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8009414:	4b23      	ldr	r3, [pc, #140]	; (80094a4 <RadioIrqProcess+0x3d4>)
 8009416:	785b      	ldrb	r3, [r3, #1]
 8009418:	f083 0301 	eor.w	r3, r3, #1
 800941c:	b2db      	uxtb	r3, r3
 800941e:	2b00      	cmp	r3, #0
 8009420:	d002      	beq.n	8009428 <RadioIrqProcess+0x358>
            SUBGRF_SetStandby( STDBY_RC );
 8009422:	2000      	movs	r0, #0
 8009424:	f000 feb4 	bl	800a190 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8009428:	4b22      	ldr	r3, [pc, #136]	; (80094b4 <RadioIrqProcess+0x3e4>)
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	2b00      	cmp	r3, #0
 800942e:	d031      	beq.n	8009494 <RadioIrqProcess+0x3c4>
 8009430:	4b20      	ldr	r3, [pc, #128]	; (80094b4 <RadioIrqProcess+0x3e4>)
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	68db      	ldr	r3, [r3, #12]
 8009436:	2b00      	cmp	r3, #0
 8009438:	d02c      	beq.n	8009494 <RadioIrqProcess+0x3c4>
            RadioEvents->RxTimeout( );
 800943a:	4b1e      	ldr	r3, [pc, #120]	; (80094b4 <RadioIrqProcess+0x3e4>)
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	68db      	ldr	r3, [r3, #12]
 8009440:	4798      	blx	r3
        break;
 8009442:	e027      	b.n	8009494 <RadioIrqProcess+0x3c4>
        if( SubgRf.RxContinuous == false )
 8009444:	4b17      	ldr	r3, [pc, #92]	; (80094a4 <RadioIrqProcess+0x3d4>)
 8009446:	785b      	ldrb	r3, [r3, #1]
 8009448:	f083 0301 	eor.w	r3, r3, #1
 800944c:	b2db      	uxtb	r3, r3
 800944e:	2b00      	cmp	r3, #0
 8009450:	d002      	beq.n	8009458 <RadioIrqProcess+0x388>
            SUBGRF_SetStandby( STDBY_RC );
 8009452:	2000      	movs	r0, #0
 8009454:	f000 fe9c 	bl	800a190 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 8009458:	4b16      	ldr	r3, [pc, #88]	; (80094b4 <RadioIrqProcess+0x3e4>)
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	2b00      	cmp	r3, #0
 800945e:	d01b      	beq.n	8009498 <RadioIrqProcess+0x3c8>
 8009460:	4b14      	ldr	r3, [pc, #80]	; (80094b4 <RadioIrqProcess+0x3e4>)
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	691b      	ldr	r3, [r3, #16]
 8009466:	2b00      	cmp	r3, #0
 8009468:	d016      	beq.n	8009498 <RadioIrqProcess+0x3c8>
            RadioEvents->RxError( );
 800946a:	4b12      	ldr	r3, [pc, #72]	; (80094b4 <RadioIrqProcess+0x3e4>)
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	691b      	ldr	r3, [r3, #16]
 8009470:	4798      	blx	r3
        break;
 8009472:	e011      	b.n	8009498 <RadioIrqProcess+0x3c8>
        break;
 8009474:	bf00      	nop
 8009476:	e010      	b.n	800949a <RadioIrqProcess+0x3ca>
        break;
 8009478:	bf00      	nop
 800947a:	e00e      	b.n	800949a <RadioIrqProcess+0x3ca>
        break;
 800947c:	bf00      	nop
 800947e:	e00c      	b.n	800949a <RadioIrqProcess+0x3ca>
        break;
 8009480:	bf00      	nop
 8009482:	e00a      	b.n	800949a <RadioIrqProcess+0x3ca>
        break;
 8009484:	bf00      	nop
 8009486:	e008      	b.n	800949a <RadioIrqProcess+0x3ca>
        break;
 8009488:	bf00      	nop
 800948a:	e006      	b.n	800949a <RadioIrqProcess+0x3ca>
        break;
 800948c:	bf00      	nop
 800948e:	e004      	b.n	800949a <RadioIrqProcess+0x3ca>
        break;
 8009490:	bf00      	nop
 8009492:	e002      	b.n	800949a <RadioIrqProcess+0x3ca>
        break;
 8009494:	bf00      	nop
 8009496:	e000      	b.n	800949a <RadioIrqProcess+0x3ca>
        break;
 8009498:	bf00      	nop
    }
}
 800949a:	bf00      	nop
 800949c:	3708      	adds	r7, #8
 800949e:	46bd      	mov	sp, r7
 80094a0:	bdb0      	pop	{r4, r5, r7, pc}
 80094a2:	bf00      	nop
 80094a4:	20000a34 	.word	0x20000a34
 80094a8:	08008edf 	.word	0x08008edf
 80094ac:	08008f03 	.word	0x08008f03
 80094b0:	20000aa8 	.word	0x20000aa8
 80094b4:	20000a30 	.word	0x20000a30

080094b8 <RadioTxPrbs>:

static void RadioTxPrbs( void )
{
 80094b8:	b580      	push	{r7, lr}
 80094ba:	af00      	add	r7, sp, #0
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 80094bc:	4b09      	ldr	r3, [pc, #36]	; (80094e4 <RadioTxPrbs+0x2c>)
 80094be:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80094c2:	2101      	movs	r1, #1
 80094c4:	4618      	mov	r0, r3
 80094c6:	f001 fcdb 	bl	800ae80 <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_GPKTCTL1AR, 0x2d );  // sel mode prbs9 instead of preamble
 80094ca:	4b07      	ldr	r3, [pc, #28]	; (80094e8 <RadioTxPrbs+0x30>)
 80094cc:	212d      	movs	r1, #45	; 0x2d
 80094ce:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 80094d2:	4798      	blx	r3
    SUBGRF_SetTxInfinitePreamble( );
 80094d4:	f000 ff1f 	bl	800a316 <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 80094d8:	4804      	ldr	r0, [pc, #16]	; (80094ec <RadioTxPrbs+0x34>)
 80094da:	f000 fe75 	bl	800a1c8 <SUBGRF_SetTx>
}
 80094de:	bf00      	nop
 80094e0:	bd80      	pop	{r7, pc}
 80094e2:	bf00      	nop
 80094e4:	20000a34 	.word	0x20000a34
 80094e8:	08008edf 	.word	0x08008edf
 80094ec:	000fffff 	.word	0x000fffff

080094f0 <RadioTxCw>:

static void RadioTxCw( int8_t power )
{
 80094f0:	b580      	push	{r7, lr}
 80094f2:	b084      	sub	sp, #16
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	4603      	mov	r3, r0
 80094f8:	71fb      	strb	r3, [r7, #7]
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 80094fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80094fe:	4618      	mov	r0, r3
 8009500:	f001 fce6 	bl	800aed0 <SUBGRF_SetRfTxPower>
 8009504:	4603      	mov	r3, r0
 8009506:	73fb      	strb	r3, [r7, #15]
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8009508:	210e      	movs	r1, #14
 800950a:	f640 101f 	movw	r0, #2335	; 0x91f
 800950e:	f001 fbc3 	bl	800ac98 <SUBGRF_WriteRegister>
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 8009512:	7bfb      	ldrb	r3, [r7, #15]
 8009514:	2101      	movs	r1, #1
 8009516:	4618      	mov	r0, r3
 8009518:	f001 fcb2 	bl	800ae80 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 800951c:	f000 fef2 	bl	800a304 <SUBGRF_SetTxContinuousWave>
}
 8009520:	bf00      	nop
 8009522:	3710      	adds	r7, #16
 8009524:	46bd      	mov	sp, r7
 8009526:	bd80      	pop	{r7, pc}

08009528 <payload_integration>:

#if (RADIO_SIGFOX_ENABLE == 1)
static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 8009528:	b480      	push	{r7}
 800952a:	b089      	sub	sp, #36	; 0x24
 800952c:	af00      	add	r7, sp, #0
 800952e:	60f8      	str	r0, [r7, #12]
 8009530:	60b9      	str	r1, [r7, #8]
 8009532:	4613      	mov	r3, r2
 8009534:	71fb      	strb	r3, [r7, #7]
    uint8_t prevInt = 0;
 8009536:	2300      	movs	r3, #0
 8009538:	77fb      	strb	r3, [r7, #31]
    uint8_t currBit;
    uint8_t index_bit;
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int32_t i = 0;
 800953a:	2300      	movs	r3, #0
 800953c:	61bb      	str	r3, [r7, #24]

    for( i = 0; i < size; i++ )
 800953e:	2300      	movs	r3, #0
 8009540:	61bb      	str	r3, [r7, #24]
 8009542:	e011      	b.n	8009568 <payload_integration+0x40>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 8009544:	69bb      	ldr	r3, [r7, #24]
 8009546:	68ba      	ldr	r2, [r7, #8]
 8009548:	4413      	add	r3, r2
 800954a:	781a      	ldrb	r2, [r3, #0]
 800954c:	69bb      	ldr	r3, [r7, #24]
 800954e:	68b9      	ldr	r1, [r7, #8]
 8009550:	440b      	add	r3, r1
 8009552:	43d2      	mvns	r2, r2
 8009554:	b2d2      	uxtb	r2, r2
 8009556:	701a      	strb	r2, [r3, #0]
        /* init outBuffer */
        outBuffer[i] = 0;
 8009558:	69bb      	ldr	r3, [r7, #24]
 800955a:	68fa      	ldr	r2, [r7, #12]
 800955c:	4413      	add	r3, r2
 800955e:	2200      	movs	r2, #0
 8009560:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < size; i++ )
 8009562:	69bb      	ldr	r3, [r7, #24]
 8009564:	3301      	adds	r3, #1
 8009566:	61bb      	str	r3, [r7, #24]
 8009568:	79fb      	ldrb	r3, [r7, #7]
 800956a:	69ba      	ldr	r2, [r7, #24]
 800956c:	429a      	cmp	r2, r3
 800956e:	dbe9      	blt.n	8009544 <payload_integration+0x1c>
    }

    for( i = 0; i < ( size * 8 ); i++ )
 8009570:	2300      	movs	r3, #0
 8009572:	61bb      	str	r3, [r7, #24]
 8009574:	e049      	b.n	800960a <payload_integration+0xe2>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
 8009576:	69bb      	ldr	r3, [r7, #24]
 8009578:	425a      	negs	r2, r3
 800957a:	f003 0307 	and.w	r3, r3, #7
 800957e:	f002 0207 	and.w	r2, r2, #7
 8009582:	bf58      	it	pl
 8009584:	4253      	negpl	r3, r2
 8009586:	b2db      	uxtb	r3, r3
 8009588:	f1c3 0307 	rsb	r3, r3, #7
 800958c:	75fb      	strb	r3, [r7, #23]
        index_byte = i / 8;
 800958e:	69bb      	ldr	r3, [r7, #24]
 8009590:	2b00      	cmp	r3, #0
 8009592:	da00      	bge.n	8009596 <payload_integration+0x6e>
 8009594:	3307      	adds	r3, #7
 8009596:	10db      	asrs	r3, r3, #3
 8009598:	75bb      	strb	r3, [r7, #22]
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 800959a:	69bb      	ldr	r3, [r7, #24]
 800959c:	3301      	adds	r3, #1
 800959e:	425a      	negs	r2, r3
 80095a0:	f003 0307 	and.w	r3, r3, #7
 80095a4:	f002 0207 	and.w	r2, r2, #7
 80095a8:	bf58      	it	pl
 80095aa:	4253      	negpl	r3, r2
 80095ac:	b2db      	uxtb	r3, r3
 80095ae:	f1c3 0307 	rsb	r3, r3, #7
 80095b2:	757b      	strb	r3, [r7, #21]
        index_byte_out = ( i + 1 ) / 8;
 80095b4:	69bb      	ldr	r3, [r7, #24]
 80095b6:	3301      	adds	r3, #1
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	da00      	bge.n	80095be <payload_integration+0x96>
 80095bc:	3307      	adds	r3, #7
 80095be:	10db      	asrs	r3, r3, #3
 80095c0:	753b      	strb	r3, [r7, #20]
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 80095c2:	7dbb      	ldrb	r3, [r7, #22]
 80095c4:	68ba      	ldr	r2, [r7, #8]
 80095c6:	4413      	add	r3, r2
 80095c8:	781b      	ldrb	r3, [r3, #0]
 80095ca:	461a      	mov	r2, r3
 80095cc:	7dfb      	ldrb	r3, [r7, #23]
 80095ce:	fa42 f303 	asr.w	r3, r2, r3
 80095d2:	b2db      	uxtb	r3, r3
 80095d4:	f003 0301 	and.w	r3, r3, #1
 80095d8:	74fb      	strb	r3, [r7, #19]
        /* integration */
        prevInt ^= currBit;
 80095da:	7ffa      	ldrb	r2, [r7, #31]
 80095dc:	7cfb      	ldrb	r3, [r7, #19]
 80095de:	4053      	eors	r3, r2
 80095e0:	77fb      	strb	r3, [r7, #31]
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 80095e2:	7d3b      	ldrb	r3, [r7, #20]
 80095e4:	68fa      	ldr	r2, [r7, #12]
 80095e6:	4413      	add	r3, r2
 80095e8:	781b      	ldrb	r3, [r3, #0]
 80095ea:	b25a      	sxtb	r2, r3
 80095ec:	7ff9      	ldrb	r1, [r7, #31]
 80095ee:	7d7b      	ldrb	r3, [r7, #21]
 80095f0:	fa01 f303 	lsl.w	r3, r1, r3
 80095f4:	b25b      	sxtb	r3, r3
 80095f6:	4313      	orrs	r3, r2
 80095f8:	b259      	sxtb	r1, r3
 80095fa:	7d3b      	ldrb	r3, [r7, #20]
 80095fc:	68fa      	ldr	r2, [r7, #12]
 80095fe:	4413      	add	r3, r2
 8009600:	b2ca      	uxtb	r2, r1
 8009602:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < ( size * 8 ); i++ )
 8009604:	69bb      	ldr	r3, [r7, #24]
 8009606:	3301      	adds	r3, #1
 8009608:	61bb      	str	r3, [r7, #24]
 800960a:	79fb      	ldrb	r3, [r7, #7]
 800960c:	00db      	lsls	r3, r3, #3
 800960e:	69ba      	ldr	r2, [r7, #24]
 8009610:	429a      	cmp	r2, r3
 8009612:	dbb0      	blt.n	8009576 <payload_integration+0x4e>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 8009614:	7ffb      	ldrb	r3, [r7, #31]
 8009616:	01db      	lsls	r3, r3, #7
 8009618:	b25a      	sxtb	r2, r3
 800961a:	7ffb      	ldrb	r3, [r7, #31]
 800961c:	019b      	lsls	r3, r3, #6
 800961e:	b25b      	sxtb	r3, r3
 8009620:	4313      	orrs	r3, r2
 8009622:	b25b      	sxtb	r3, r3
 8009624:	7ffa      	ldrb	r2, [r7, #31]
 8009626:	2a00      	cmp	r2, #0
 8009628:	d101      	bne.n	800962e <payload_integration+0x106>
 800962a:	2220      	movs	r2, #32
 800962c:	e000      	b.n	8009630 <payload_integration+0x108>
 800962e:	2200      	movs	r2, #0
 8009630:	4313      	orrs	r3, r2
 8009632:	b259      	sxtb	r1, r3
 8009634:	79fb      	ldrb	r3, [r7, #7]
 8009636:	68fa      	ldr	r2, [r7, #12]
 8009638:	4413      	add	r3, r2
 800963a:	b2ca      	uxtb	r2, r1
 800963c:	701a      	strb	r2, [r3, #0]
}
 800963e:	bf00      	nop
 8009640:	3724      	adds	r7, #36	; 0x24
 8009642:	46bd      	mov	sp, r7
 8009644:	bc80      	pop	{r7}
 8009646:	4770      	bx	lr

08009648 <RadioSetRxGenericConfig>:
#endif /*RADIO_SIGFOX_ENABLE == 1*/

static int32_t RadioSetRxGenericConfig( GenericModems_t modem, RxConfigGeneric_t *config, uint32_t rxContinuous,
                                        uint32_t symbTimeout )
{
 8009648:	b580      	push	{r7, lr}
 800964a:	b08c      	sub	sp, #48	; 0x30
 800964c:	af00      	add	r7, sp, #0
 800964e:	60b9      	str	r1, [r7, #8]
 8009650:	607a      	str	r2, [r7, #4]
 8009652:	603b      	str	r3, [r7, #0]
 8009654:	4603      	mov	r3, r0
 8009656:	73fb      	strb	r3, [r7, #15]
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    int32_t status = 0;
 8009658:	2300      	movs	r3, #0
 800965a:	62bb      	str	r3, [r7, #40]	; 0x28
    uint8_t syncword[8] = {0};
 800965c:	2300      	movs	r3, #0
 800965e:	623b      	str	r3, [r7, #32]
 8009660:	2300      	movs	r3, #0
 8009662:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t MaxPayloadLength;

    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 8009664:	f001 fdff 	bl	800b266 <RFW_DeInit>

    if( rxContinuous != 0 )
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	2b00      	cmp	r3, #0
 800966c:	d001      	beq.n	8009672 <RadioSetRxGenericConfig+0x2a>
    {
        symbTimeout = 0;
 800966e:	2300      	movs	r3, #0
 8009670:	603b      	str	r3, [r7, #0]
    }
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	2b00      	cmp	r3, #0
 8009676:	bf14      	ite	ne
 8009678:	2301      	movne	r3, #1
 800967a:	2300      	moveq	r3, #0
 800967c:	b2da      	uxtb	r2, r3
 800967e:	4ba3      	ldr	r3, [pc, #652]	; (800990c <RadioSetRxGenericConfig+0x2c4>)
 8009680:	705a      	strb	r2, [r3, #1]

    switch( modem )
 8009682:	7bfb      	ldrb	r3, [r7, #15]
 8009684:	2b00      	cmp	r3, #0
 8009686:	d003      	beq.n	8009690 <RadioSetRxGenericConfig+0x48>
 8009688:	2b01      	cmp	r3, #1
 800968a:	f000 80dc 	beq.w	8009846 <RadioSetRxGenericConfig+0x1fe>

        // Timeout Max, Timeout handled directly in SetRx function
        SubgRf.RxTimeout = 0xFFFF;
        break;
    default:
        break;
 800968e:	e194      	b.n	80099ba <RadioSetRxGenericConfig+0x372>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 8009690:	68bb      	ldr	r3, [r7, #8]
 8009692:	689b      	ldr	r3, [r3, #8]
 8009694:	2b00      	cmp	r3, #0
 8009696:	d003      	beq.n	80096a0 <RadioSetRxGenericConfig+0x58>
 8009698:	68bb      	ldr	r3, [r7, #8]
 800969a:	68db      	ldr	r3, [r3, #12]
 800969c:	2b00      	cmp	r3, #0
 800969e:	d102      	bne.n	80096a6 <RadioSetRxGenericConfig+0x5e>
            return -1;
 80096a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80096a4:	e18a      	b.n	80099bc <RadioSetRxGenericConfig+0x374>
        if( config->fsk.SyncWordLength > 8 )
 80096a6:	68bb      	ldr	r3, [r7, #8]
 80096a8:	7f9b      	ldrb	r3, [r3, #30]
 80096aa:	2b08      	cmp	r3, #8
 80096ac:	d902      	bls.n	80096b4 <RadioSetRxGenericConfig+0x6c>
            return -1;
 80096ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80096b2:	e183      	b.n	80099bc <RadioSetRxGenericConfig+0x374>
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 80096b4:	68bb      	ldr	r3, [r7, #8]
 80096b6:	6919      	ldr	r1, [r3, #16]
 80096b8:	68bb      	ldr	r3, [r7, #8]
 80096ba:	7f9b      	ldrb	r3, [r3, #30]
 80096bc:	b29a      	uxth	r2, r3
 80096be:	f107 0320 	add.w	r3, r7, #32
 80096c2:	4618      	mov	r0, r3
 80096c4:	f001 ff52 	bl	800b56c <UTIL_MEM_cpy_8>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 80096c8:	68bb      	ldr	r3, [r7, #8]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	bf14      	ite	ne
 80096d0:	2301      	movne	r3, #1
 80096d2:	2300      	moveq	r3, #0
 80096d4:	b2db      	uxtb	r3, r3
 80096d6:	4618      	mov	r0, r3
 80096d8:	f000 fe26 	bl	800a328 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80096dc:	4b8b      	ldr	r3, [pc, #556]	; (800990c <RadioSetRxGenericConfig+0x2c4>)
 80096de:	2200      	movs	r2, #0
 80096e0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 80096e4:	68bb      	ldr	r3, [r7, #8]
 80096e6:	689b      	ldr	r3, [r3, #8]
 80096e8:	4a88      	ldr	r2, [pc, #544]	; (800990c <RadioSetRxGenericConfig+0x2c4>)
 80096ea:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 80096ec:	68bb      	ldr	r3, [r7, #8]
 80096ee:	f893 2020 	ldrb.w	r2, [r3, #32]
 80096f2:	4b86      	ldr	r3, [pc, #536]	; (800990c <RadioSetRxGenericConfig+0x2c4>)
 80096f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 80096f8:	68bb      	ldr	r3, [r7, #8]
 80096fa:	685b      	ldr	r3, [r3, #4]
 80096fc:	4618      	mov	r0, r3
 80096fe:	f001 fce5 	bl	800b0cc <SUBGRF_GetFskBandwidthRegValue>
 8009702:	4603      	mov	r3, r0
 8009704:	461a      	mov	r2, r3
 8009706:	4b81      	ldr	r3, [pc, #516]	; (800990c <RadioSetRxGenericConfig+0x2c4>)
 8009708:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800970c:	4b7f      	ldr	r3, [pc, #508]	; (800990c <RadioSetRxGenericConfig+0x2c4>)
 800970e:	2200      	movs	r2, #0
 8009710:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 8009712:	68bb      	ldr	r3, [r7, #8]
 8009714:	68db      	ldr	r3, [r3, #12]
 8009716:	b29b      	uxth	r3, r3
 8009718:	00db      	lsls	r3, r3, #3
 800971a:	b29a      	uxth	r2, r3
 800971c:	4b7b      	ldr	r3, [pc, #492]	; (800990c <RadioSetRxGenericConfig+0x2c4>)
 800971e:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 8009720:	68bb      	ldr	r3, [r7, #8]
 8009722:	7fda      	ldrb	r2, [r3, #31]
 8009724:	4b79      	ldr	r3, [pc, #484]	; (800990c <RadioSetRxGenericConfig+0x2c4>)
 8009726:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 8009728:	68bb      	ldr	r3, [r7, #8]
 800972a:	7f9b      	ldrb	r3, [r3, #30]
 800972c:	00db      	lsls	r3, r3, #3
 800972e:	b2da      	uxtb	r2, r3
 8009730:	4b76      	ldr	r3, [pc, #472]	; (800990c <RadioSetRxGenericConfig+0x2c4>)
 8009732:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 8009734:	68bb      	ldr	r3, [r7, #8]
 8009736:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800973a:	4b74      	ldr	r3, [pc, #464]	; (800990c <RadioSetRxGenericConfig+0x2c4>)
 800973c:	751a      	strb	r2, [r3, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 800973e:	68bb      	ldr	r3, [r7, #8]
 8009740:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8009744:	2b00      	cmp	r3, #0
 8009746:	d105      	bne.n	8009754 <RadioSetRxGenericConfig+0x10c>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 8009748:	68bb      	ldr	r3, [r7, #8]
 800974a:	695b      	ldr	r3, [r3, #20]
 800974c:	b2da      	uxtb	r2, r3
 800974e:	4b6f      	ldr	r3, [pc, #444]	; (800990c <RadioSetRxGenericConfig+0x2c4>)
 8009750:	759a      	strb	r2, [r3, #22]
 8009752:	e00b      	b.n	800976c <RadioSetRxGenericConfig+0x124>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 8009754:	68bb      	ldr	r3, [r7, #8]
 8009756:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800975a:	2b02      	cmp	r3, #2
 800975c:	d103      	bne.n	8009766 <RadioSetRxGenericConfig+0x11e>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 800975e:	4b6b      	ldr	r3, [pc, #428]	; (800990c <RadioSetRxGenericConfig+0x2c4>)
 8009760:	22ff      	movs	r2, #255	; 0xff
 8009762:	759a      	strb	r2, [r3, #22]
 8009764:	e002      	b.n	800976c <RadioSetRxGenericConfig+0x124>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 8009766:	4b69      	ldr	r3, [pc, #420]	; (800990c <RadioSetRxGenericConfig+0x2c4>)
 8009768:	22ff      	movs	r2, #255	; 0xff
 800976a:	759a      	strb	r2, [r3, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 800976c:	68bb      	ldr	r3, [r7, #8]
 800976e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009772:	2b02      	cmp	r3, #2
 8009774:	d004      	beq.n	8009780 <RadioSetRxGenericConfig+0x138>
            || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8009776:	68bb      	ldr	r3, [r7, #8]
 8009778:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800977c:	2b02      	cmp	r3, #2
 800977e:	d12d      	bne.n	80097dc <RadioSetRxGenericConfig+0x194>
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 8009780:	68bb      	ldr	r3, [r7, #8]
 8009782:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8009786:	2bf1      	cmp	r3, #241	; 0xf1
 8009788:	d00c      	beq.n	80097a4 <RadioSetRxGenericConfig+0x15c>
 800978a:	68bb      	ldr	r3, [r7, #8]
 800978c:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8009790:	2bf2      	cmp	r3, #242	; 0xf2
 8009792:	d007      	beq.n	80097a4 <RadioSetRxGenericConfig+0x15c>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8009794:	68bb      	ldr	r3, [r7, #8]
 8009796:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800979a:	2b01      	cmp	r3, #1
 800979c:	d002      	beq.n	80097a4 <RadioSetRxGenericConfig+0x15c>
                return -1;
 800979e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80097a2:	e10b      	b.n	80099bc <RadioSetRxGenericConfig+0x374>
            ConfigGeneric.rtx = CONFIG_RX;
 80097a4:	2300      	movs	r3, #0
 80097a6:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.RxConfig = config;
 80097a8:	68bb      	ldr	r3, [r7, #8]
 80097aa:	61bb      	str	r3, [r7, #24]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 80097ac:	4b58      	ldr	r3, [pc, #352]	; (8009910 <RadioSetRxGenericConfig+0x2c8>)
 80097ae:	6819      	ldr	r1, [r3, #0]
 80097b0:	f107 0314 	add.w	r3, r7, #20
 80097b4:	4a57      	ldr	r2, [pc, #348]	; (8009914 <RadioSetRxGenericConfig+0x2cc>)
 80097b6:	4618      	mov	r0, r3
 80097b8:	f001 fd48 	bl	800b24c <RFW_Init>
 80097bc:	4603      	mov	r3, r0
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d002      	beq.n	80097c8 <RadioSetRxGenericConfig+0x180>
                return -1;
 80097c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80097c6:	e0f9      	b.n	80099bc <RadioSetRxGenericConfig+0x374>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 80097c8:	4b50      	ldr	r3, [pc, #320]	; (800990c <RadioSetRxGenericConfig+0x2c4>)
 80097ca:	2200      	movs	r2, #0
 80097cc:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 80097ce:	4b4f      	ldr	r3, [pc, #316]	; (800990c <RadioSetRxGenericConfig+0x2c4>)
 80097d0:	2201      	movs	r2, #1
 80097d2:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 80097d4:	4b4d      	ldr	r3, [pc, #308]	; (800990c <RadioSetRxGenericConfig+0x2c4>)
 80097d6:	2200      	movs	r2, #0
 80097d8:	755a      	strb	r2, [r3, #21]
        {
 80097da:	e00e      	b.n	80097fa <RadioSetRxGenericConfig+0x1b2>
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 80097dc:	68bb      	ldr	r3, [r7, #8]
 80097de:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 80097e2:	4b4a      	ldr	r3, [pc, #296]	; (800990c <RadioSetRxGenericConfig+0x2c4>)
 80097e4:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 80097e6:	68bb      	ldr	r3, [r7, #8]
 80097e8:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 80097ec:	4b47      	ldr	r3, [pc, #284]	; (800990c <RadioSetRxGenericConfig+0x2c4>)
 80097ee:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 80097f0:	68bb      	ldr	r3, [r7, #8]
 80097f2:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 80097f6:	4b45      	ldr	r3, [pc, #276]	; (800990c <RadioSetRxGenericConfig+0x2c4>)
 80097f8:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 80097fa:	f7ff fa6e 	bl	8008cda <RadioStandby>
        RadioSetModem( MODEM_FSK );
 80097fe:	2000      	movs	r0, #0
 8009800:	f7fe fc0a 	bl	8008018 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8009804:	4844      	ldr	r0, [pc, #272]	; (8009918 <RadioSetRxGenericConfig+0x2d0>)
 8009806:	f001 f82d 	bl	800a864 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800980a:	4844      	ldr	r0, [pc, #272]	; (800991c <RadioSetRxGenericConfig+0x2d4>)
 800980c:	f001 f8fc 	bl	800aa08 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8009810:	f107 0320 	add.w	r3, r7, #32
 8009814:	4618      	mov	r0, r3
 8009816:	f000 fbc0 	bl	8009f9a <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 800981a:	68bb      	ldr	r3, [r7, #8]
 800981c:	8b9b      	ldrh	r3, [r3, #28]
 800981e:	4618      	mov	r0, r3
 8009820:	f000 fc0a 	bl	800a038 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 8009824:	68bb      	ldr	r3, [r7, #8]
 8009826:	8b1b      	ldrh	r3, [r3, #24]
 8009828:	4618      	mov	r0, r3
 800982a:	f000 fbe5 	bl	8009ff8 <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 800982e:	683b      	ldr	r3, [r7, #0]
 8009830:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8009834:	fb03 f202 	mul.w	r2, r3, r2
 8009838:	68bb      	ldr	r3, [r7, #8]
 800983a:	689b      	ldr	r3, [r3, #8]
 800983c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009840:	4a32      	ldr	r2, [pc, #200]	; (800990c <RadioSetRxGenericConfig+0x2c4>)
 8009842:	6093      	str	r3, [r2, #8]
        break;
 8009844:	e0b9      	b.n	80099ba <RadioSetRxGenericConfig+0x372>
        if( config->lora.PreambleLen == 0 )
 8009846:	68bb      	ldr	r3, [r7, #8]
 8009848:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800984a:	2b00      	cmp	r3, #0
 800984c:	d102      	bne.n	8009854 <RadioSetRxGenericConfig+0x20c>
            return -1;
 800984e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009852:	e0b3      	b.n	80099bc <RadioSetRxGenericConfig+0x374>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 8009854:	68bb      	ldr	r3, [r7, #8]
 8009856:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800985a:	2b01      	cmp	r3, #1
 800985c:	d104      	bne.n	8009868 <RadioSetRxGenericConfig+0x220>
            MaxPayloadLength = config->fsk.MaxPayloadLength;
 800985e:	68bb      	ldr	r3, [r7, #8]
 8009860:	695b      	ldr	r3, [r3, #20]
 8009862:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8009866:	e002      	b.n	800986e <RadioSetRxGenericConfig+0x226>
            MaxPayloadLength = 0xFF;
 8009868:	23ff      	movs	r3, #255	; 0xff
 800986a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 800986e:	68bb      	ldr	r3, [r7, #8]
 8009870:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009872:	2b00      	cmp	r3, #0
 8009874:	bf14      	ite	ne
 8009876:	2301      	movne	r3, #1
 8009878:	2300      	moveq	r3, #0
 800987a:	b2db      	uxtb	r3, r3
 800987c:	4618      	mov	r0, r3
 800987e:	f000 fd53 	bl	800a328 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8009882:	683b      	ldr	r3, [r7, #0]
 8009884:	b2db      	uxtb	r3, r3
 8009886:	4618      	mov	r0, r3
 8009888:	f000 fd5d 	bl	800a346 <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800988c:	4b1f      	ldr	r3, [pc, #124]	; (800990c <RadioSetRxGenericConfig+0x2c4>)
 800988e:	2201      	movs	r2, #1
 8009890:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 8009894:	68bb      	ldr	r3, [r7, #8]
 8009896:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800989a:	4b1c      	ldr	r3, [pc, #112]	; (800990c <RadioSetRxGenericConfig+0x2c4>)
 800989c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 80098a0:	68bb      	ldr	r3, [r7, #8]
 80098a2:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 80098a6:	4b19      	ldr	r3, [pc, #100]	; (800990c <RadioSetRxGenericConfig+0x2c4>)
 80098a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 80098ac:	68bb      	ldr	r3, [r7, #8]
 80098ae:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 80098b2:	4b16      	ldr	r3, [pc, #88]	; (800990c <RadioSetRxGenericConfig+0x2c4>)
 80098b4:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 80098b8:	68bb      	ldr	r3, [r7, #8]
 80098ba:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80098be:	2b02      	cmp	r3, #2
 80098c0:	d010      	beq.n	80098e4 <RadioSetRxGenericConfig+0x29c>
 80098c2:	2b02      	cmp	r3, #2
 80098c4:	dc2c      	bgt.n	8009920 <RadioSetRxGenericConfig+0x2d8>
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d002      	beq.n	80098d0 <RadioSetRxGenericConfig+0x288>
 80098ca:	2b01      	cmp	r3, #1
 80098cc:	d005      	beq.n	80098da <RadioSetRxGenericConfig+0x292>
            break;
 80098ce:	e027      	b.n	8009920 <RadioSetRxGenericConfig+0x2d8>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 80098d0:	4b0e      	ldr	r3, [pc, #56]	; (800990c <RadioSetRxGenericConfig+0x2c4>)
 80098d2:	2200      	movs	r2, #0
 80098d4:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 80098d8:	e023      	b.n	8009922 <RadioSetRxGenericConfig+0x2da>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 80098da:	4b0c      	ldr	r3, [pc, #48]	; (800990c <RadioSetRxGenericConfig+0x2c4>)
 80098dc:	2201      	movs	r2, #1
 80098de:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 80098e2:	e01e      	b.n	8009922 <RadioSetRxGenericConfig+0x2da>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 80098e4:	68bb      	ldr	r3, [r7, #8]
 80098e6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80098ea:	2b0b      	cmp	r3, #11
 80098ec:	d004      	beq.n	80098f8 <RadioSetRxGenericConfig+0x2b0>
 80098ee:	68bb      	ldr	r3, [r7, #8]
 80098f0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80098f4:	2b0c      	cmp	r3, #12
 80098f6:	d104      	bne.n	8009902 <RadioSetRxGenericConfig+0x2ba>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 80098f8:	4b04      	ldr	r3, [pc, #16]	; (800990c <RadioSetRxGenericConfig+0x2c4>)
 80098fa:	2201      	movs	r2, #1
 80098fc:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8009900:	e00f      	b.n	8009922 <RadioSetRxGenericConfig+0x2da>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8009902:	4b02      	ldr	r3, [pc, #8]	; (800990c <RadioSetRxGenericConfig+0x2c4>)
 8009904:	2200      	movs	r2, #0
 8009906:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800990a:	e00a      	b.n	8009922 <RadioSetRxGenericConfig+0x2da>
 800990c:	20000a34 	.word	0x20000a34
 8009910:	20000a30 	.word	0x20000a30
 8009914:	20000aa8 	.word	0x20000aa8
 8009918:	20000a6c 	.word	0x20000a6c
 800991c:	20000a42 	.word	0x20000a42
            break;
 8009920:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8009922:	4b28      	ldr	r3, [pc, #160]	; (80099c4 <RadioSetRxGenericConfig+0x37c>)
 8009924:	2201      	movs	r2, #1
 8009926:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 8009928:	68bb      	ldr	r3, [r7, #8]
 800992a:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 800992c:	4b25      	ldr	r3, [pc, #148]	; (80099c4 <RadioSetRxGenericConfig+0x37c>)
 800992e:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 8009930:	68bb      	ldr	r3, [r7, #8]
 8009932:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 8009936:	4b23      	ldr	r3, [pc, #140]	; (80099c4 <RadioSetRxGenericConfig+0x37c>)
 8009938:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 800993a:	4a22      	ldr	r2, [pc, #136]	; (80099c4 <RadioSetRxGenericConfig+0x37c>)
 800993c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009940:	77d3      	strb	r3, [r2, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 8009942:	68bb      	ldr	r3, [r7, #8]
 8009944:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8009948:	4b1e      	ldr	r3, [pc, #120]	; (80099c4 <RadioSetRxGenericConfig+0x37c>)
 800994a:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 800994e:	68bb      	ldr	r3, [r7, #8]
 8009950:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 8009954:	4b1b      	ldr	r3, [pc, #108]	; (80099c4 <RadioSetRxGenericConfig+0x37c>)
 8009956:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RadioStandby( );
 800995a:	f7ff f9be 	bl	8008cda <RadioStandby>
        RadioSetModem( MODEM_LORA );
 800995e:	2001      	movs	r0, #1
 8009960:	f7fe fb5a 	bl	8008018 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8009964:	4818      	ldr	r0, [pc, #96]	; (80099c8 <RadioSetRxGenericConfig+0x380>)
 8009966:	f000 ff7d 	bl	800a864 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800996a:	4818      	ldr	r0, [pc, #96]	; (80099cc <RadioSetRxGenericConfig+0x384>)
 800996c:	f001 f84c 	bl	800aa08 <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8009970:	4b14      	ldr	r3, [pc, #80]	; (80099c4 <RadioSetRxGenericConfig+0x37c>)
 8009972:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8009976:	2b01      	cmp	r3, #1
 8009978:	d10d      	bne.n	8009996 <RadioSetRxGenericConfig+0x34e>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 800997a:	f240 7036 	movw	r0, #1846	; 0x736
 800997e:	f001 f99f 	bl	800acc0 <SUBGRF_ReadRegister>
 8009982:	4603      	mov	r3, r0
 8009984:	f023 0304 	bic.w	r3, r3, #4
 8009988:	b2db      	uxtb	r3, r3
 800998a:	4619      	mov	r1, r3
 800998c:	f240 7036 	movw	r0, #1846	; 0x736
 8009990:	f001 f982 	bl	800ac98 <SUBGRF_WriteRegister>
 8009994:	e00c      	b.n	80099b0 <RadioSetRxGenericConfig+0x368>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 8009996:	f240 7036 	movw	r0, #1846	; 0x736
 800999a:	f001 f991 	bl	800acc0 <SUBGRF_ReadRegister>
 800999e:	4603      	mov	r3, r0
 80099a0:	f043 0304 	orr.w	r3, r3, #4
 80099a4:	b2db      	uxtb	r3, r3
 80099a6:	4619      	mov	r1, r3
 80099a8:	f240 7036 	movw	r0, #1846	; 0x736
 80099ac:	f001 f974 	bl	800ac98 <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 80099b0:	4b04      	ldr	r3, [pc, #16]	; (80099c4 <RadioSetRxGenericConfig+0x37c>)
 80099b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80099b6:	609a      	str	r2, [r3, #8]
        break;
 80099b8:	bf00      	nop
    }
    return status;
 80099ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 80099bc:	4618      	mov	r0, r3
 80099be:	3730      	adds	r7, #48	; 0x30
 80099c0:	46bd      	mov	sp, r7
 80099c2:	bd80      	pop	{r7, pc}
 80099c4:	20000a34 	.word	0x20000a34
 80099c8:	20000a6c 	.word	0x20000a6c
 80099cc:	20000a42 	.word	0x20000a42

080099d0 <RadioSetTxGenericConfig>:

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t *config, int8_t power,
                                        uint32_t timeout )
{
 80099d0:	b580      	push	{r7, lr}
 80099d2:	b08e      	sub	sp, #56	; 0x38
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	60b9      	str	r1, [r7, #8]
 80099d8:	607b      	str	r3, [r7, #4]
 80099da:	4603      	mov	r3, r0
 80099dc:	73fb      	strb	r3, [r7, #15]
 80099de:	4613      	mov	r3, r2
 80099e0:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    uint8_t syncword[8] = {0};
 80099e2:	2300      	movs	r3, #0
 80099e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80099e6:	2300      	movs	r3, #0
 80099e8:	633b      	str	r3, [r7, #48]	; 0x30
    RadioModems_t radio_modem;
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 80099ea:	f001 fc3c 	bl	800b266 <RFW_DeInit>
    switch( modem )
 80099ee:	7bfb      	ldrb	r3, [r7, #15]
 80099f0:	2b03      	cmp	r3, #3
 80099f2:	f200 8204 	bhi.w	8009dfe <RadioSetTxGenericConfig+0x42e>
 80099f6:	a201      	add	r2, pc, #4	; (adr r2, 80099fc <RadioSetTxGenericConfig+0x2c>)
 80099f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099fc:	08009b81 	.word	0x08009b81
 8009a00:	08009cc9 	.word	0x08009cc9
 8009a04:	08009dc1 	.word	0x08009dc1
 8009a08:	08009a0d 	.word	0x08009a0d
    {
    case GENERIC_MSK:
        if( config->msk.SyncWordLength > 8 )
 8009a0c:	68bb      	ldr	r3, [r7, #8]
 8009a0e:	7c9b      	ldrb	r3, [r3, #18]
 8009a10:	2b08      	cmp	r3, #8
 8009a12:	d902      	bls.n	8009a1a <RadioSetTxGenericConfig+0x4a>
        {
            return -1;
 8009a14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009a18:	e206      	b.n	8009e28 <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8( syncword, config->msk.SyncWord, config->msk.SyncWordLength );
 8009a1a:	68bb      	ldr	r3, [r7, #8]
 8009a1c:	6899      	ldr	r1, [r3, #8]
 8009a1e:	68bb      	ldr	r3, [r7, #8]
 8009a20:	7c9b      	ldrb	r3, [r3, #18]
 8009a22:	b29a      	uxth	r2, r3
 8009a24:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009a28:	4618      	mov	r0, r3
 8009a2a:	f001 fd9f 	bl	800b56c <UTIL_MEM_cpy_8>
        }
        if( ( config->msk.BitRate == 0 ) )
 8009a2e:	68bb      	ldr	r3, [r7, #8]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d102      	bne.n	8009a3c <RadioSetTxGenericConfig+0x6c>
        {
            return -1;
 8009a36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009a3a:	e1f5      	b.n	8009e28 <RadioSetTxGenericConfig+0x458>
        }
        else if( config->msk.BitRate <= 10000 )
 8009a3c:	68bb      	ldr	r3, [r7, #8]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	f242 7210 	movw	r2, #10000	; 0x2710
 8009a44:	4293      	cmp	r3, r2
 8009a46:	d813      	bhi.n	8009a70 <RadioSetTxGenericConfig+0xa0>
        {
            /*max msk modulator datarate is 10kbps*/
            radio_modem = MODEM_MSK;
 8009a48:	2302      	movs	r3, #2
 8009a4a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GMSK;
 8009a4e:	4b99      	ldr	r3, [pc, #612]	; (8009cb4 <RadioSetTxGenericConfig+0x2e4>)
 8009a50:	2203      	movs	r2, #3
 8009a52:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GMSK;
 8009a54:	4b97      	ldr	r3, [pc, #604]	; (8009cb4 <RadioSetTxGenericConfig+0x2e4>)
 8009a56:	2203      	movs	r2, #3
 8009a58:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 8009a5c:	68bb      	ldr	r3, [r7, #8]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	4a94      	ldr	r2, [pc, #592]	; (8009cb4 <RadioSetTxGenericConfig+0x2e4>)
 8009a62:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 8009a64:	68bb      	ldr	r3, [r7, #8]
 8009a66:	7cda      	ldrb	r2, [r3, #19]
 8009a68:	4b92      	ldr	r3, [pc, #584]	; (8009cb4 <RadioSetTxGenericConfig+0x2e4>)
 8009a6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009a6e:	e017      	b.n	8009aa0 <RadioSetTxGenericConfig+0xd0>
        }
        else
        {
            radio_modem = MODEM_FSK;
 8009a70:	2300      	movs	r3, #0
 8009a72:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8009a76:	4b8f      	ldr	r3, [pc, #572]	; (8009cb4 <RadioSetTxGenericConfig+0x2e4>)
 8009a78:	2200      	movs	r2, #0
 8009a7a:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8009a7c:	4b8d      	ldr	r3, [pc, #564]	; (8009cb4 <RadioSetTxGenericConfig+0x2e4>)
 8009a7e:	2200      	movs	r2, #0
 8009a80:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 8009a84:	68bb      	ldr	r3, [r7, #8]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	4a8a      	ldr	r2, [pc, #552]	; (8009cb4 <RadioSetTxGenericConfig+0x2e4>)
 8009a8a:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 8009a8c:	68bb      	ldr	r3, [r7, #8]
 8009a8e:	7cda      	ldrb	r2, [r3, #19]
 8009a90:	4b88      	ldr	r3, [pc, #544]	; (8009cb4 <RadioSetTxGenericConfig+0x2e4>)
 8009a92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            /*do msk with gfsk modulator*/
            SubgRf.ModulationParams.Params.Gfsk.Fdev = config->msk.BitRate / 4;
 8009a96:	68bb      	ldr	r3, [r7, #8]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	089b      	lsrs	r3, r3, #2
 8009a9c:	4a85      	ldr	r2, [pc, #532]	; (8009cb4 <RadioSetTxGenericConfig+0x2e4>)
 8009a9e:	6413      	str	r3, [r2, #64]	; 0x40
        }

        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->msk.PreambleLen ) << 3; // convert byte into bit
 8009aa0:	68bb      	ldr	r3, [r7, #8]
 8009aa2:	685b      	ldr	r3, [r3, #4]
 8009aa4:	b29b      	uxth	r3, r3
 8009aa6:	00db      	lsls	r3, r3, #3
 8009aa8:	b29a      	uxth	r2, r3
 8009aaa:	4b82      	ldr	r3, [pc, #520]	; (8009cb4 <RadioSetTxGenericConfig+0x2e4>)
 8009aac:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 8009aae:	4b81      	ldr	r3, [pc, #516]	; (8009cb4 <RadioSetTxGenericConfig+0x2e4>)
 8009ab0:	2204      	movs	r2, #4
 8009ab2:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->msk.SyncWordLength ) << 3; // convert byte into bit
 8009ab4:	68bb      	ldr	r3, [r7, #8]
 8009ab6:	7c9b      	ldrb	r3, [r3, #18]
 8009ab8:	00db      	lsls	r3, r3, #3
 8009aba:	b2da      	uxtb	r2, r3
 8009abc:	4b7d      	ldr	r3, [pc, #500]	; (8009cb4 <RadioSetTxGenericConfig+0x2e4>)
 8009abe:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 8009ac0:	4b7c      	ldr	r3, [pc, #496]	; (8009cb4 <RadioSetTxGenericConfig+0x2e4>)
 8009ac2:	2200      	movs	r2, #0
 8009ac4:	751a      	strb	r2, [r3, #20]

        if( ( config->msk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 8009ac6:	68bb      	ldr	r3, [r7, #8]
 8009ac8:	7d9b      	ldrb	r3, [r3, #22]
 8009aca:	2b02      	cmp	r3, #2
 8009acc:	d003      	beq.n	8009ad6 <RadioSetTxGenericConfig+0x106>
            || ( config->msk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8009ace:	68bb      	ldr	r3, [r7, #8]
 8009ad0:	7d1b      	ldrb	r3, [r3, #20]
 8009ad2:	2b02      	cmp	r3, #2
 8009ad4:	d12b      	bne.n	8009b2e <RadioSetTxGenericConfig+0x15e>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 8009ad6:	68bb      	ldr	r3, [r7, #8]
 8009ad8:	7d5b      	ldrb	r3, [r3, #21]
 8009ada:	2bf1      	cmp	r3, #241	; 0xf1
 8009adc:	d00a      	beq.n	8009af4 <RadioSetTxGenericConfig+0x124>
 8009ade:	68bb      	ldr	r3, [r7, #8]
 8009ae0:	7d5b      	ldrb	r3, [r3, #21]
 8009ae2:	2bf2      	cmp	r3, #242	; 0xf2
 8009ae4:	d006      	beq.n	8009af4 <RadioSetTxGenericConfig+0x124>
                && ( config->msk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8009ae6:	68bb      	ldr	r3, [r7, #8]
 8009ae8:	7d5b      	ldrb	r3, [r3, #21]
 8009aea:	2b01      	cmp	r3, #1
 8009aec:	d002      	beq.n	8009af4 <RadioSetTxGenericConfig+0x124>
            {
                return -1;
 8009aee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009af2:	e199      	b.n	8009e28 <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            /*msk and fsk are union, no need for copy as fsk/msk struct are on same address*/
            ConfigGeneric.TxConfig = config;
 8009af4:	68bb      	ldr	r3, [r7, #8]
 8009af6:	623b      	str	r3, [r7, #32]
            ConfigGeneric.rtx = CONFIG_TX;
 8009af8:	2301      	movs	r3, #1
 8009afa:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 8009afe:	4b6e      	ldr	r3, [pc, #440]	; (8009cb8 <RadioSetTxGenericConfig+0x2e8>)
 8009b00:	6819      	ldr	r1, [r3, #0]
 8009b02:	f107 0320 	add.w	r3, r7, #32
 8009b06:	4a6d      	ldr	r2, [pc, #436]	; (8009cbc <RadioSetTxGenericConfig+0x2ec>)
 8009b08:	4618      	mov	r0, r3
 8009b0a:	f001 fb9f 	bl	800b24c <RFW_Init>
 8009b0e:	4603      	mov	r3, r0
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d002      	beq.n	8009b1a <RadioSetTxGenericConfig+0x14a>
            {
                return -1;
 8009b14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009b18:	e186      	b.n	8009e28 <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8009b1a:	4b66      	ldr	r3, [pc, #408]	; (8009cb4 <RadioSetTxGenericConfig+0x2e4>)
 8009b1c:	2200      	movs	r2, #0
 8009b1e:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 8009b20:	4b64      	ldr	r3, [pc, #400]	; (8009cb4 <RadioSetTxGenericConfig+0x2e4>)
 8009b22:	2201      	movs	r2, #1
 8009b24:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8009b26:	4b63      	ldr	r3, [pc, #396]	; (8009cb4 <RadioSetTxGenericConfig+0x2e4>)
 8009b28:	2200      	movs	r2, #0
 8009b2a:	755a      	strb	r2, [r3, #21]
        {
 8009b2c:	e00b      	b.n	8009b46 <RadioSetTxGenericConfig+0x176>
        }
        else
        {
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->msk.CrcLength;
 8009b2e:	68bb      	ldr	r3, [r7, #8]
 8009b30:	7d5a      	ldrb	r2, [r3, #21]
 8009b32:	4b60      	ldr	r3, [pc, #384]	; (8009cb4 <RadioSetTxGenericConfig+0x2e4>)
 8009b34:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->msk.Whitening;
 8009b36:	68bb      	ldr	r3, [r7, #8]
 8009b38:	7d9a      	ldrb	r2, [r3, #22]
 8009b3a:	4b5e      	ldr	r3, [pc, #376]	; (8009cb4 <RadioSetTxGenericConfig+0x2e4>)
 8009b3c:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->msk.HeaderType;
 8009b3e:	68bb      	ldr	r3, [r7, #8]
 8009b40:	7d1a      	ldrb	r2, [r3, #20]
 8009b42:	4b5c      	ldr	r3, [pc, #368]	; (8009cb4 <RadioSetTxGenericConfig+0x2e4>)
 8009b44:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 8009b46:	f7ff f8c8 	bl	8008cda <RadioStandby>
        RadioSetModem( radio_modem );
 8009b4a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009b4e:	4618      	mov	r0, r3
 8009b50:	f7fe fa62 	bl	8008018 <RadioSetModem>

        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8009b54:	485a      	ldr	r0, [pc, #360]	; (8009cc0 <RadioSetTxGenericConfig+0x2f0>)
 8009b56:	f000 fe85 	bl	800a864 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8009b5a:	485a      	ldr	r0, [pc, #360]	; (8009cc4 <RadioSetTxGenericConfig+0x2f4>)
 8009b5c:	f000 ff54 	bl	800aa08 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8009b60:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009b64:	4618      	mov	r0, r3
 8009b66:	f000 fa18 	bl	8009f9a <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->msk.whiteSeed );
 8009b6a:	68bb      	ldr	r3, [r7, #8]
 8009b6c:	8a1b      	ldrh	r3, [r3, #16]
 8009b6e:	4618      	mov	r0, r3
 8009b70:	f000 fa62 	bl	800a038 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->msk.CrcPolynomial );
 8009b74:	68bb      	ldr	r3, [r7, #8]
 8009b76:	899b      	ldrh	r3, [r3, #12]
 8009b78:	4618      	mov	r0, r3
 8009b7a:	f000 fa3d 	bl	8009ff8 <SUBGRF_SetCrcPolynomial>
        break;
 8009b7e:	e13f      	b.n	8009e00 <RadioSetTxGenericConfig+0x430>
    case GENERIC_FSK:
        if( config->fsk.BitRate == 0 )
 8009b80:	68bb      	ldr	r3, [r7, #8]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d102      	bne.n	8009b8e <RadioSetTxGenericConfig+0x1be>
        {
            return -1;
 8009b88:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009b8c:	e14c      	b.n	8009e28 <RadioSetTxGenericConfig+0x458>
        }
        if( config->fsk.SyncWordLength > 8 )
 8009b8e:	68bb      	ldr	r3, [r7, #8]
 8009b90:	7c9b      	ldrb	r3, [r3, #18]
 8009b92:	2b08      	cmp	r3, #8
 8009b94:	d902      	bls.n	8009b9c <RadioSetTxGenericConfig+0x1cc>
        {
            return -1;
 8009b96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009b9a:	e145      	b.n	8009e28 <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 8009b9c:	68bb      	ldr	r3, [r7, #8]
 8009b9e:	6899      	ldr	r1, [r3, #8]
 8009ba0:	68bb      	ldr	r3, [r7, #8]
 8009ba2:	7c9b      	ldrb	r3, [r3, #18]
 8009ba4:	b29a      	uxth	r2, r3
 8009ba6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009baa:	4618      	mov	r0, r3
 8009bac:	f001 fcde 	bl	800b56c <UTIL_MEM_cpy_8>
        }
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8009bb0:	4b40      	ldr	r3, [pc, #256]	; (8009cb4 <RadioSetTxGenericConfig+0x2e4>)
 8009bb2:	2200      	movs	r2, #0
 8009bb4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 8009bb8:	68bb      	ldr	r3, [r7, #8]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	4a3d      	ldr	r2, [pc, #244]	; (8009cb4 <RadioSetTxGenericConfig+0x2e4>)
 8009bbe:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 8009bc0:	68bb      	ldr	r3, [r7, #8]
 8009bc2:	7cda      	ldrb	r2, [r3, #19]
 8009bc4:	4b3b      	ldr	r3, [pc, #236]	; (8009cb4 <RadioSetTxGenericConfig+0x2e4>)
 8009bc6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 8009bca:	68bb      	ldr	r3, [r7, #8]
 8009bcc:	699b      	ldr	r3, [r3, #24]
 8009bce:	4a39      	ldr	r2, [pc, #228]	; (8009cb4 <RadioSetTxGenericConfig+0x2e4>)
 8009bd0:	6413      	str	r3, [r2, #64]	; 0x40

        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8009bd2:	4b38      	ldr	r3, [pc, #224]	; (8009cb4 <RadioSetTxGenericConfig+0x2e4>)
 8009bd4:	2200      	movs	r2, #0
 8009bd6:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 8009bd8:	68bb      	ldr	r3, [r7, #8]
 8009bda:	685b      	ldr	r3, [r3, #4]
 8009bdc:	b29b      	uxth	r3, r3
 8009bde:	00db      	lsls	r3, r3, #3
 8009be0:	b29a      	uxth	r2, r3
 8009be2:	4b34      	ldr	r3, [pc, #208]	; (8009cb4 <RadioSetTxGenericConfig+0x2e4>)
 8009be4:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 8009be6:	4b33      	ldr	r3, [pc, #204]	; (8009cb4 <RadioSetTxGenericConfig+0x2e4>)
 8009be8:	2204      	movs	r2, #4
 8009bea:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 8009bec:	68bb      	ldr	r3, [r7, #8]
 8009bee:	7c9b      	ldrb	r3, [r3, #18]
 8009bf0:	00db      	lsls	r3, r3, #3
 8009bf2:	b2da      	uxtb	r2, r3
 8009bf4:	4b2f      	ldr	r3, [pc, #188]	; (8009cb4 <RadioSetTxGenericConfig+0x2e4>)
 8009bf6:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 8009bf8:	4b2e      	ldr	r3, [pc, #184]	; (8009cb4 <RadioSetTxGenericConfig+0x2e4>)
 8009bfa:	2200      	movs	r2, #0
 8009bfc:	751a      	strb	r2, [r3, #20]

        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 8009bfe:	68bb      	ldr	r3, [r7, #8]
 8009c00:	7d9b      	ldrb	r3, [r3, #22]
 8009c02:	2b02      	cmp	r3, #2
 8009c04:	d003      	beq.n	8009c0e <RadioSetTxGenericConfig+0x23e>
            || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8009c06:	68bb      	ldr	r3, [r7, #8]
 8009c08:	7d1b      	ldrb	r3, [r3, #20]
 8009c0a:	2b02      	cmp	r3, #2
 8009c0c:	d12a      	bne.n	8009c64 <RadioSetTxGenericConfig+0x294>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 8009c0e:	68bb      	ldr	r3, [r7, #8]
 8009c10:	7d5b      	ldrb	r3, [r3, #21]
 8009c12:	2bf1      	cmp	r3, #241	; 0xf1
 8009c14:	d00a      	beq.n	8009c2c <RadioSetTxGenericConfig+0x25c>
 8009c16:	68bb      	ldr	r3, [r7, #8]
 8009c18:	7d5b      	ldrb	r3, [r3, #21]
 8009c1a:	2bf2      	cmp	r3, #242	; 0xf2
 8009c1c:	d006      	beq.n	8009c2c <RadioSetTxGenericConfig+0x25c>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8009c1e:	68bb      	ldr	r3, [r7, #8]
 8009c20:	7d5b      	ldrb	r3, [r3, #21]
 8009c22:	2b01      	cmp	r3, #1
 8009c24:	d002      	beq.n	8009c2c <RadioSetTxGenericConfig+0x25c>
            {
                return -1;
 8009c26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009c2a:	e0fd      	b.n	8009e28 <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            ConfigGeneric.rtx = CONFIG_TX;
 8009c2c:	2301      	movs	r3, #1
 8009c2e:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.TxConfig = config;
 8009c30:	68bb      	ldr	r3, [r7, #8]
 8009c32:	617b      	str	r3, [r7, #20]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 8009c34:	4b20      	ldr	r3, [pc, #128]	; (8009cb8 <RadioSetTxGenericConfig+0x2e8>)
 8009c36:	6819      	ldr	r1, [r3, #0]
 8009c38:	f107 0314 	add.w	r3, r7, #20
 8009c3c:	4a1f      	ldr	r2, [pc, #124]	; (8009cbc <RadioSetTxGenericConfig+0x2ec>)
 8009c3e:	4618      	mov	r0, r3
 8009c40:	f001 fb04 	bl	800b24c <RFW_Init>
 8009c44:	4603      	mov	r3, r0
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d002      	beq.n	8009c50 <RadioSetTxGenericConfig+0x280>
            {
                return -1;
 8009c4a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009c4e:	e0eb      	b.n	8009e28 <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8009c50:	4b18      	ldr	r3, [pc, #96]	; (8009cb4 <RadioSetTxGenericConfig+0x2e4>)
 8009c52:	2200      	movs	r2, #0
 8009c54:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 8009c56:	4b17      	ldr	r3, [pc, #92]	; (8009cb4 <RadioSetTxGenericConfig+0x2e4>)
 8009c58:	2201      	movs	r2, #1
 8009c5a:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8009c5c:	4b15      	ldr	r3, [pc, #84]	; (8009cb4 <RadioSetTxGenericConfig+0x2e4>)
 8009c5e:	2200      	movs	r2, #0
 8009c60:	755a      	strb	r2, [r3, #21]
        {
 8009c62:	e00b      	b.n	8009c7c <RadioSetTxGenericConfig+0x2ac>
        }
        else
        {
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 8009c64:	68bb      	ldr	r3, [r7, #8]
 8009c66:	7d5a      	ldrb	r2, [r3, #21]
 8009c68:	4b12      	ldr	r3, [pc, #72]	; (8009cb4 <RadioSetTxGenericConfig+0x2e4>)
 8009c6a:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 8009c6c:	68bb      	ldr	r3, [r7, #8]
 8009c6e:	7d9a      	ldrb	r2, [r3, #22]
 8009c70:	4b10      	ldr	r3, [pc, #64]	; (8009cb4 <RadioSetTxGenericConfig+0x2e4>)
 8009c72:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 8009c74:	68bb      	ldr	r3, [r7, #8]
 8009c76:	7d1a      	ldrb	r2, [r3, #20]
 8009c78:	4b0e      	ldr	r3, [pc, #56]	; (8009cb4 <RadioSetTxGenericConfig+0x2e4>)
 8009c7a:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 8009c7c:	f7ff f82d 	bl	8008cda <RadioStandby>
        RadioSetModem( MODEM_FSK );
 8009c80:	2000      	movs	r0, #0
 8009c82:	f7fe f9c9 	bl	8008018 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8009c86:	480e      	ldr	r0, [pc, #56]	; (8009cc0 <RadioSetTxGenericConfig+0x2f0>)
 8009c88:	f000 fdec 	bl	800a864 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8009c8c:	480d      	ldr	r0, [pc, #52]	; (8009cc4 <RadioSetTxGenericConfig+0x2f4>)
 8009c8e:	f000 febb 	bl	800aa08 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8009c92:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009c96:	4618      	mov	r0, r3
 8009c98:	f000 f97f 	bl	8009f9a <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 8009c9c:	68bb      	ldr	r3, [r7, #8]
 8009c9e:	8a1b      	ldrh	r3, [r3, #16]
 8009ca0:	4618      	mov	r0, r3
 8009ca2:	f000 f9c9 	bl	800a038 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 8009ca6:	68bb      	ldr	r3, [r7, #8]
 8009ca8:	899b      	ldrh	r3, [r3, #12]
 8009caa:	4618      	mov	r0, r3
 8009cac:	f000 f9a4 	bl	8009ff8 <SUBGRF_SetCrcPolynomial>
        break;
 8009cb0:	e0a6      	b.n	8009e00 <RadioSetTxGenericConfig+0x430>
 8009cb2:	bf00      	nop
 8009cb4:	20000a34 	.word	0x20000a34
 8009cb8:	20000a30 	.word	0x20000a30
 8009cbc:	20000a90 	.word	0x20000a90
 8009cc0:	20000a6c 	.word	0x20000a6c
 8009cc4:	20000a42 	.word	0x20000a42
    case GENERIC_LORA:
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8009cc8:	4b59      	ldr	r3, [pc, #356]	; (8009e30 <RadioSetTxGenericConfig+0x460>)
 8009cca:	2201      	movs	r2, #1
 8009ccc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 8009cd0:	68bb      	ldr	r3, [r7, #8]
 8009cd2:	781a      	ldrb	r2, [r3, #0]
 8009cd4:	4b56      	ldr	r3, [pc, #344]	; (8009e30 <RadioSetTxGenericConfig+0x460>)
 8009cd6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 8009cda:	68bb      	ldr	r3, [r7, #8]
 8009cdc:	785a      	ldrb	r2, [r3, #1]
 8009cde:	4b54      	ldr	r3, [pc, #336]	; (8009e30 <RadioSetTxGenericConfig+0x460>)
 8009ce0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 8009ce4:	68bb      	ldr	r3, [r7, #8]
 8009ce6:	789a      	ldrb	r2, [r3, #2]
 8009ce8:	4b51      	ldr	r3, [pc, #324]	; (8009e30 <RadioSetTxGenericConfig+0x460>)
 8009cea:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 8009cee:	68bb      	ldr	r3, [r7, #8]
 8009cf0:	78db      	ldrb	r3, [r3, #3]
 8009cf2:	2b02      	cmp	r3, #2
 8009cf4:	d010      	beq.n	8009d18 <RadioSetTxGenericConfig+0x348>
 8009cf6:	2b02      	cmp	r3, #2
 8009cf8:	dc20      	bgt.n	8009d3c <RadioSetTxGenericConfig+0x36c>
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d002      	beq.n	8009d04 <RadioSetTxGenericConfig+0x334>
 8009cfe:	2b01      	cmp	r3, #1
 8009d00:	d005      	beq.n	8009d0e <RadioSetTxGenericConfig+0x33e>
            {
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
            }
            break;
        default:
            break;
 8009d02:	e01b      	b.n	8009d3c <RadioSetTxGenericConfig+0x36c>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8009d04:	4b4a      	ldr	r3, [pc, #296]	; (8009e30 <RadioSetTxGenericConfig+0x460>)
 8009d06:	2200      	movs	r2, #0
 8009d08:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8009d0c:	e017      	b.n	8009d3e <RadioSetTxGenericConfig+0x36e>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8009d0e:	4b48      	ldr	r3, [pc, #288]	; (8009e30 <RadioSetTxGenericConfig+0x460>)
 8009d10:	2201      	movs	r2, #1
 8009d12:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8009d16:	e012      	b.n	8009d3e <RadioSetTxGenericConfig+0x36e>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 8009d18:	68bb      	ldr	r3, [r7, #8]
 8009d1a:	781b      	ldrb	r3, [r3, #0]
 8009d1c:	2b0b      	cmp	r3, #11
 8009d1e:	d003      	beq.n	8009d28 <RadioSetTxGenericConfig+0x358>
 8009d20:	68bb      	ldr	r3, [r7, #8]
 8009d22:	781b      	ldrb	r3, [r3, #0]
 8009d24:	2b0c      	cmp	r3, #12
 8009d26:	d104      	bne.n	8009d32 <RadioSetTxGenericConfig+0x362>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8009d28:	4b41      	ldr	r3, [pc, #260]	; (8009e30 <RadioSetTxGenericConfig+0x460>)
 8009d2a:	2201      	movs	r2, #1
 8009d2c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8009d30:	e005      	b.n	8009d3e <RadioSetTxGenericConfig+0x36e>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8009d32:	4b3f      	ldr	r3, [pc, #252]	; (8009e30 <RadioSetTxGenericConfig+0x460>)
 8009d34:	2200      	movs	r2, #0
 8009d36:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8009d3a:	e000      	b.n	8009d3e <RadioSetTxGenericConfig+0x36e>
            break;
 8009d3c:	bf00      	nop
        }

        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8009d3e:	4b3c      	ldr	r3, [pc, #240]	; (8009e30 <RadioSetTxGenericConfig+0x460>)
 8009d40:	2201      	movs	r2, #1
 8009d42:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 8009d44:	68bb      	ldr	r3, [r7, #8]
 8009d46:	889a      	ldrh	r2, [r3, #4]
 8009d48:	4b39      	ldr	r3, [pc, #228]	; (8009e30 <RadioSetTxGenericConfig+0x460>)
 8009d4a:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 8009d4c:	68bb      	ldr	r3, [r7, #8]
 8009d4e:	799a      	ldrb	r2, [r3, #6]
 8009d50:	4b37      	ldr	r3, [pc, #220]	; (8009e30 <RadioSetTxGenericConfig+0x460>)
 8009d52:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 8009d54:	68bb      	ldr	r3, [r7, #8]
 8009d56:	79da      	ldrb	r2, [r3, #7]
 8009d58:	4b35      	ldr	r3, [pc, #212]	; (8009e30 <RadioSetTxGenericConfig+0x460>)
 8009d5a:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 8009d5e:	68bb      	ldr	r3, [r7, #8]
 8009d60:	7a1a      	ldrb	r2, [r3, #8]
 8009d62:	4b33      	ldr	r3, [pc, #204]	; (8009e30 <RadioSetTxGenericConfig+0x460>)
 8009d64:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        RadioStandby( );
 8009d68:	f7fe ffb7 	bl	8008cda <RadioStandby>
        RadioSetModem( MODEM_LORA );
 8009d6c:	2001      	movs	r0, #1
 8009d6e:	f7fe f953 	bl	8008018 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8009d72:	4830      	ldr	r0, [pc, #192]	; (8009e34 <RadioSetTxGenericConfig+0x464>)
 8009d74:	f000 fd76 	bl	800a864 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8009d78:	482f      	ldr	r0, [pc, #188]	; (8009e38 <RadioSetTxGenericConfig+0x468>)
 8009d7a:	f000 fe45 	bl	800aa08 <SUBGRF_SetPacketParams>

        /* WORKAROUND - Modulation Quality with 500 kHz LoRa Bandwidth, see STM32WL Erratasheet */
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 8009d7e:	4b2c      	ldr	r3, [pc, #176]	; (8009e30 <RadioSetTxGenericConfig+0x460>)
 8009d80:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009d84:	2b06      	cmp	r3, #6
 8009d86:	d10d      	bne.n	8009da4 <RadioSetTxGenericConfig+0x3d4>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 8009d88:	f640 0089 	movw	r0, #2185	; 0x889
 8009d8c:	f000 ff98 	bl	800acc0 <SUBGRF_ReadRegister>
 8009d90:	4603      	mov	r3, r0
 8009d92:	f023 0304 	bic.w	r3, r3, #4
 8009d96:	b2db      	uxtb	r3, r3
 8009d98:	4619      	mov	r1, r3
 8009d9a:	f640 0089 	movw	r0, #2185	; 0x889
 8009d9e:	f000 ff7b 	bl	800ac98 <SUBGRF_WriteRegister>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
        }
        /* WORKAROUND END */
        break;
 8009da2:	e02d      	b.n	8009e00 <RadioSetTxGenericConfig+0x430>
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 8009da4:	f640 0089 	movw	r0, #2185	; 0x889
 8009da8:	f000 ff8a 	bl	800acc0 <SUBGRF_ReadRegister>
 8009dac:	4603      	mov	r3, r0
 8009dae:	f043 0304 	orr.w	r3, r3, #4
 8009db2:	b2db      	uxtb	r3, r3
 8009db4:	4619      	mov	r1, r3
 8009db6:	f640 0089 	movw	r0, #2185	; 0x889
 8009dba:	f000 ff6d 	bl	800ac98 <SUBGRF_WriteRegister>
        break;
 8009dbe:	e01f      	b.n	8009e00 <RadioSetTxGenericConfig+0x430>
    case GENERIC_BPSK:
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 8009dc0:	68bb      	ldr	r3, [r7, #8]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d004      	beq.n	8009dd2 <RadioSetTxGenericConfig+0x402>
 8009dc8:	68bb      	ldr	r3, [r7, #8]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009dd0:	d902      	bls.n	8009dd8 <RadioSetTxGenericConfig+0x408>
        {
            return -1;
 8009dd2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009dd6:	e027      	b.n	8009e28 <RadioSetTxGenericConfig+0x458>
        }
        RadioSetModem( MODEM_BPSK );
 8009dd8:	2003      	movs	r0, #3
 8009dda:	f7fe f91d 	bl	8008018 <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 8009dde:	4b14      	ldr	r3, [pc, #80]	; (8009e30 <RadioSetTxGenericConfig+0x460>)
 8009de0:	2202      	movs	r2, #2
 8009de2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 8009de6:	68bb      	ldr	r3, [r7, #8]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	4a11      	ldr	r2, [pc, #68]	; (8009e30 <RadioSetTxGenericConfig+0x460>)
 8009dec:	6493      	str	r3, [r2, #72]	; 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 8009dee:	4b10      	ldr	r3, [pc, #64]	; (8009e30 <RadioSetTxGenericConfig+0x460>)
 8009df0:	2216      	movs	r2, #22
 8009df2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8009df6:	480f      	ldr	r0, [pc, #60]	; (8009e34 <RadioSetTxGenericConfig+0x464>)
 8009df8:	f000 fd34 	bl	800a864 <SUBGRF_SetModulationParams>
        break;
 8009dfc:	e000      	b.n	8009e00 <RadioSetTxGenericConfig+0x430>
    default:
        break;
 8009dfe:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 8009e00:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009e04:	4618      	mov	r0, r3
 8009e06:	f001 f863 	bl	800aed0 <SUBGRF_SetRfTxPower>
 8009e0a:	4603      	mov	r3, r0
 8009e0c:	461a      	mov	r2, r3
 8009e0e:	4b08      	ldr	r3, [pc, #32]	; (8009e30 <RadioSetTxGenericConfig+0x460>)
 8009e10:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 8009e14:	4b06      	ldr	r3, [pc, #24]	; (8009e30 <RadioSetTxGenericConfig+0x460>)
 8009e16:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8009e1a:	4618      	mov	r0, r3
 8009e1c:	f001 fa37 	bl	800b28e <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 8009e20:	4a03      	ldr	r2, [pc, #12]	; (8009e30 <RadioSetTxGenericConfig+0x460>)
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	6053      	str	r3, [r2, #4]
    return 0;
 8009e26:	2300      	movs	r3, #0
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 8009e28:	4618      	mov	r0, r3
 8009e2a:	3738      	adds	r7, #56	; 0x38
 8009e2c:	46bd      	mov	sp, r7
 8009e2e:	bd80      	pop	{r7, pc}
 8009e30:	20000a34 	.word	0x20000a34
 8009e34:	20000a6c 	.word	0x20000a6c
 8009e38:	20000a42 	.word	0x20000a42

08009e3c <RadioLrFhssSetCfg>:
    return ( prbs31_val - 1 ) % ( max );
}
#endif /* RADIO_LR_FHSS_IS_ON == 1 */

static radio_status_t RadioLrFhssSetCfg( const radio_lr_fhss_cfg_params_t *cfg_params )
{
 8009e3c:	b480      	push	{r7}
 8009e3e:	b085      	sub	sp, #20
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	6078      	str	r0, [r7, #4]
    radio_status_t status = RADIO_STATUS_UNSUPPORTED_FEATURE;
 8009e44:	2301      	movs	r3, #1
 8009e46:	73fb      	strb	r3, [r7, #15]
    {
        return status;
    }
    SubgRf.lr_fhss.is_lr_fhss_on = true;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    return  status;
 8009e48:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e4a:	4618      	mov	r0, r3
 8009e4c:	3714      	adds	r7, #20
 8009e4e:	46bd      	mov	sp, r7
 8009e50:	bc80      	pop	{r7}
 8009e52:	4770      	bx	lr

08009e54 <RadioLrFhssGetTimeOnAirInMs>:

static radio_status_t RadioLrFhssGetTimeOnAirInMs( const radio_lr_fhss_time_on_air_params_t *params,
                                                    uint32_t *time_on_air_in_ms )
{
 8009e54:	b480      	push	{r7}
 8009e56:	b083      	sub	sp, #12
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	6078      	str	r0, [r7, #4]
 8009e5c:	6039      	str	r1, [r7, #0]
    *time_on_air_in_ms = lr_fhss_get_time_on_air_in_ms( &params->radio_lr_fhss_params.lr_fhss_params,
                                                        params->pld_len_in_bytes );

    return RADIO_STATUS_OK;
#else
    return RADIO_STATUS_UNSUPPORTED_FEATURE;
 8009e5e:	2301      	movs	r3, #1
#endif /* RADIO_LR_FHSS_IS_ON */
 8009e60:	4618      	mov	r0, r3
 8009e62:	370c      	adds	r7, #12
 8009e64:	46bd      	mov	sp, r7
 8009e66:	bc80      	pop	{r7}
 8009e68:	4770      	bx	lr
	...

08009e6c <SUBGRF_Init>:
 */
static DioIrqHandler RadioOnDioIrqCb;

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 8009e6c:	b580      	push	{r7, lr}
 8009e6e:	b084      	sub	sp, #16
 8009e70:	af00      	add	r7, sp, #0
 8009e72:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d002      	beq.n	8009e80 <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 8009e7a:	4a1d      	ldr	r2, [pc, #116]	; (8009ef0 <SUBGRF_Init+0x84>)
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 8009e80:	f7f8 fd3a 	bl	80028f8 <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8009e84:	2002      	movs	r0, #2
 8009e86:	f001 f8ff 	bl	800b088 <Radio_SMPS_Set>

    ImageCalibrated = false;
 8009e8a:	4b1a      	ldr	r3, [pc, #104]	; (8009ef4 <SUBGRF_Init+0x88>)
 8009e8c:	2200      	movs	r2, #0
 8009e8e:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 8009e90:	2000      	movs	r0, #0
 8009e92:	f000 f97d 	bl	800a190 <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 8009e96:	f001 fb3e 	bl	800b516 <RBI_IsTCXO>
 8009e9a:	4603      	mov	r3, r0
 8009e9c:	2b01      	cmp	r3, #1
 8009e9e:	d10e      	bne.n	8009ebe <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 8009ea0:	2140      	movs	r1, #64	; 0x40
 8009ea2:	2001      	movs	r0, #1
 8009ea4:	f000 fb82 	bl	800a5ac <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 8009ea8:	2100      	movs	r1, #0
 8009eaa:	f640 1011 	movw	r0, #2321	; 0x911
 8009eae:	f000 fef3 	bl	800ac98 <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 8009eb2:	237f      	movs	r3, #127	; 0x7f
 8009eb4:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 8009eb6:	7b38      	ldrb	r0, [r7, #12]
 8009eb8:	f000 fa8b 	bl	800a3d2 <SUBGRF_Calibrate>
 8009ebc:	e009      	b.n	8009ed2 <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8009ebe:	2120      	movs	r1, #32
 8009ec0:	f640 1011 	movw	r0, #2321	; 0x911
 8009ec4:	f000 fee8 	bl	800ac98 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8009ec8:	2120      	movs	r1, #32
 8009eca:	f640 1012 	movw	r0, #2322	; 0x912
 8009ece:	f000 fee3 	bl	800ac98 <SUBGRF_WriteRegister>
    }

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8009ed2:	210e      	movs	r1, #14
 8009ed4:	f640 101f 	movw	r0, #2335	; 0x91f
 8009ed8:	f000 fede 	bl	800ac98 <SUBGRF_WriteRegister>

    /* Init RF Switch */
    RBI_Init();
 8009edc:	f001 fa86 	bl	800b3ec <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 8009ee0:	4b05      	ldr	r3, [pc, #20]	; (8009ef8 <SUBGRF_Init+0x8c>)
 8009ee2:	2201      	movs	r2, #1
 8009ee4:	701a      	strb	r2, [r3, #0]
}
 8009ee6:	bf00      	nop
 8009ee8:	3710      	adds	r7, #16
 8009eea:	46bd      	mov	sp, r7
 8009eec:	bd80      	pop	{r7, pc}
 8009eee:	bf00      	nop
 8009ef0:	20000acc 	.word	0x20000acc
 8009ef4:	20000ac8 	.word	0x20000ac8
 8009ef8:	20000ac0 	.word	0x20000ac0

08009efc <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 8009efc:	b480      	push	{r7}
 8009efe:	af00      	add	r7, sp, #0
    return OperatingMode;
 8009f00:	4b02      	ldr	r3, [pc, #8]	; (8009f0c <SUBGRF_GetOperatingMode+0x10>)
 8009f02:	781b      	ldrb	r3, [r3, #0]
}
 8009f04:	4618      	mov	r0, r3
 8009f06:	46bd      	mov	sp, r7
 8009f08:	bc80      	pop	{r7}
 8009f0a:	4770      	bx	lr
 8009f0c:	20000ac0 	.word	0x20000ac0

08009f10 <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 8009f10:	b580      	push	{r7, lr}
 8009f12:	b082      	sub	sp, #8
 8009f14:	af00      	add	r7, sp, #0
 8009f16:	6078      	str	r0, [r7, #4]
 8009f18:	460b      	mov	r3, r1
 8009f1a:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 8009f1c:	78fb      	ldrb	r3, [r7, #3]
 8009f1e:	461a      	mov	r2, r3
 8009f20:	6879      	ldr	r1, [r7, #4]
 8009f22:	2000      	movs	r0, #0
 8009f24:	f000 ff24 	bl	800ad70 <SUBGRF_WriteBuffer>
}
 8009f28:	bf00      	nop
 8009f2a:	3708      	adds	r7, #8
 8009f2c:	46bd      	mov	sp, r7
 8009f2e:	bd80      	pop	{r7, pc}

08009f30 <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 8009f30:	b580      	push	{r7, lr}
 8009f32:	b086      	sub	sp, #24
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	60f8      	str	r0, [r7, #12]
 8009f38:	60b9      	str	r1, [r7, #8]
 8009f3a:	4613      	mov	r3, r2
 8009f3c:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 8009f3e:	2300      	movs	r3, #0
 8009f40:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 8009f42:	f107 0317 	add.w	r3, r7, #23
 8009f46:	4619      	mov	r1, r3
 8009f48:	68b8      	ldr	r0, [r7, #8]
 8009f4a:	f000 fe27 	bl	800ab9c <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 8009f4e:	68bb      	ldr	r3, [r7, #8]
 8009f50:	781b      	ldrb	r3, [r3, #0]
 8009f52:	79fa      	ldrb	r2, [r7, #7]
 8009f54:	429a      	cmp	r2, r3
 8009f56:	d201      	bcs.n	8009f5c <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 8009f58:	2301      	movs	r3, #1
 8009f5a:	e007      	b.n	8009f6c <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 8009f5c:	7df8      	ldrb	r0, [r7, #23]
 8009f5e:	68bb      	ldr	r3, [r7, #8]
 8009f60:	781b      	ldrb	r3, [r3, #0]
 8009f62:	461a      	mov	r2, r3
 8009f64:	68f9      	ldr	r1, [r7, #12]
 8009f66:	f000 ff25 	bl	800adb4 <SUBGRF_ReadBuffer>

    return 0;
 8009f6a:	2300      	movs	r3, #0
}
 8009f6c:	4618      	mov	r0, r3
 8009f6e:	3718      	adds	r7, #24
 8009f70:	46bd      	mov	sp, r7
 8009f72:	bd80      	pop	{r7, pc}

08009f74 <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 8009f74:	b580      	push	{r7, lr}
 8009f76:	b084      	sub	sp, #16
 8009f78:	af00      	add	r7, sp, #0
 8009f7a:	60f8      	str	r0, [r7, #12]
 8009f7c:	460b      	mov	r3, r1
 8009f7e:	607a      	str	r2, [r7, #4]
 8009f80:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 8009f82:	7afb      	ldrb	r3, [r7, #11]
 8009f84:	4619      	mov	r1, r3
 8009f86:	68f8      	ldr	r0, [r7, #12]
 8009f88:	f7ff ffc2 	bl	8009f10 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 8009f8c:	6878      	ldr	r0, [r7, #4]
 8009f8e:	f000 f91b 	bl	800a1c8 <SUBGRF_SetTx>
}
 8009f92:	bf00      	nop
 8009f94:	3710      	adds	r7, #16
 8009f96:	46bd      	mov	sp, r7
 8009f98:	bd80      	pop	{r7, pc}

08009f9a <SUBGRF_SetSyncWord>:

uint8_t SUBGRF_SetSyncWord( uint8_t *syncWord )
{
 8009f9a:	b580      	push	{r7, lr}
 8009f9c:	b082      	sub	sp, #8
 8009f9e:	af00      	add	r7, sp, #0
 8009fa0:	6078      	str	r0, [r7, #4]
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 8009fa2:	2208      	movs	r2, #8
 8009fa4:	6879      	ldr	r1, [r7, #4]
 8009fa6:	f44f 60d8 	mov.w	r0, #1728	; 0x6c0
 8009faa:	f000 fe9d 	bl	800ace8 <SUBGRF_WriteRegisters>
    return 0;
 8009fae:	2300      	movs	r3, #0
}
 8009fb0:	4618      	mov	r0, r3
 8009fb2:	3708      	adds	r7, #8
 8009fb4:	46bd      	mov	sp, r7
 8009fb6:	bd80      	pop	{r7, pc}

08009fb8 <SUBGRF_SetCrcSeed>:

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 8009fb8:	b580      	push	{r7, lr}
 8009fba:	b084      	sub	sp, #16
 8009fbc:	af00      	add	r7, sp, #0
 8009fbe:	4603      	mov	r3, r0
 8009fc0:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 8009fc2:	88fb      	ldrh	r3, [r7, #6]
 8009fc4:	0a1b      	lsrs	r3, r3, #8
 8009fc6:	b29b      	uxth	r3, r3
 8009fc8:	b2db      	uxtb	r3, r3
 8009fca:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 8009fcc:	88fb      	ldrh	r3, [r7, #6]
 8009fce:	b2db      	uxtb	r3, r3
 8009fd0:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 8009fd2:	f000 fb6f 	bl	800a6b4 <SUBGRF_GetPacketType>
 8009fd6:	4603      	mov	r3, r0
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d108      	bne.n	8009fee <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 8009fdc:	f107 030c 	add.w	r3, r7, #12
 8009fe0:	2202      	movs	r2, #2
 8009fe2:	4619      	mov	r1, r3
 8009fe4:	f240 60bc 	movw	r0, #1724	; 0x6bc
 8009fe8:	f000 fe7e 	bl	800ace8 <SUBGRF_WriteRegisters>
            break;
 8009fec:	e000      	b.n	8009ff0 <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 8009fee:	bf00      	nop
    }
}
 8009ff0:	bf00      	nop
 8009ff2:	3710      	adds	r7, #16
 8009ff4:	46bd      	mov	sp, r7
 8009ff6:	bd80      	pop	{r7, pc}

08009ff8 <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 8009ff8:	b580      	push	{r7, lr}
 8009ffa:	b084      	sub	sp, #16
 8009ffc:	af00      	add	r7, sp, #0
 8009ffe:	4603      	mov	r3, r0
 800a000:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 800a002:	88fb      	ldrh	r3, [r7, #6]
 800a004:	0a1b      	lsrs	r3, r3, #8
 800a006:	b29b      	uxth	r3, r3
 800a008:	b2db      	uxtb	r3, r3
 800a00a:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 800a00c:	88fb      	ldrh	r3, [r7, #6]
 800a00e:	b2db      	uxtb	r3, r3
 800a010:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 800a012:	f000 fb4f 	bl	800a6b4 <SUBGRF_GetPacketType>
 800a016:	4603      	mov	r3, r0
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d108      	bne.n	800a02e <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 800a01c:	f107 030c 	add.w	r3, r7, #12
 800a020:	2202      	movs	r2, #2
 800a022:	4619      	mov	r1, r3
 800a024:	f240 60be 	movw	r0, #1726	; 0x6be
 800a028:	f000 fe5e 	bl	800ace8 <SUBGRF_WriteRegisters>
            break;
 800a02c:	e000      	b.n	800a030 <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 800a02e:	bf00      	nop
    }
}
 800a030:	bf00      	nop
 800a032:	3710      	adds	r7, #16
 800a034:	46bd      	mov	sp, r7
 800a036:	bd80      	pop	{r7, pc}

0800a038 <SUBGRF_SetWhiteningSeed>:

void SUBGRF_SetWhiteningSeed( uint16_t seed )
{
 800a038:	b580      	push	{r7, lr}
 800a03a:	b084      	sub	sp, #16
 800a03c:	af00      	add	r7, sp, #0
 800a03e:	4603      	mov	r3, r0
 800a040:	80fb      	strh	r3, [r7, #6]
    uint8_t regValue = 0;
 800a042:	2300      	movs	r3, #0
 800a044:	73fb      	strb	r3, [r7, #15]

    switch( SUBGRF_GetPacketType( ) )
 800a046:	f000 fb35 	bl	800a6b4 <SUBGRF_GetPacketType>
 800a04a:	4603      	mov	r3, r0
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d121      	bne.n	800a094 <SUBGRF_SetWhiteningSeed+0x5c>
    {
        case PACKET_TYPE_GFSK:
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 800a050:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 800a054:	f000 fe34 	bl	800acc0 <SUBGRF_ReadRegister>
 800a058:	4603      	mov	r3, r0
 800a05a:	f023 0301 	bic.w	r3, r3, #1
 800a05e:	73fb      	strb	r3, [r7, #15]
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 800a060:	88fb      	ldrh	r3, [r7, #6]
 800a062:	0a1b      	lsrs	r3, r3, #8
 800a064:	b29b      	uxth	r3, r3
 800a066:	b25b      	sxtb	r3, r3
 800a068:	f003 0301 	and.w	r3, r3, #1
 800a06c:	b25a      	sxtb	r2, r3
 800a06e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a072:	4313      	orrs	r3, r2
 800a074:	b25b      	sxtb	r3, r3
 800a076:	73fb      	strb	r3, [r7, #15]
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 800a078:	7bfb      	ldrb	r3, [r7, #15]
 800a07a:	4619      	mov	r1, r3
 800a07c:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 800a080:	f000 fe0a 	bl	800ac98 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 800a084:	88fb      	ldrh	r3, [r7, #6]
 800a086:	b2db      	uxtb	r3, r3
 800a088:	4619      	mov	r1, r3
 800a08a:	f240 60b9 	movw	r0, #1721	; 0x6b9
 800a08e:	f000 fe03 	bl	800ac98 <SUBGRF_WriteRegister>
            break;
 800a092:	e000      	b.n	800a096 <SUBGRF_SetWhiteningSeed+0x5e>

        default:
            break;
 800a094:	bf00      	nop
    }
}
 800a096:	bf00      	nop
 800a098:	3710      	adds	r7, #16
 800a09a:	46bd      	mov	sp, r7
 800a09c:	bd80      	pop	{r7, pc}

0800a09e <SUBGRF_GetRandom>:

uint32_t SUBGRF_GetRandom( void )
{
 800a09e:	b580      	push	{r7, lr}
 800a0a0:	b082      	sub	sp, #8
 800a0a2:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 800a0a4:	2300      	movs	r3, #0
 800a0a6:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 800a0a8:	2300      	movs	r3, #0
 800a0aa:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 800a0ac:	2300      	movs	r3, #0
 800a0ae:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 800a0b0:	f640 00e2 	movw	r0, #2274	; 0x8e2
 800a0b4:	f000 fe04 	bl	800acc0 <SUBGRF_ReadRegister>
 800a0b8:	4603      	mov	r3, r0
 800a0ba:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 800a0bc:	79fb      	ldrb	r3, [r7, #7]
 800a0be:	f023 0301 	bic.w	r3, r3, #1
 800a0c2:	b2db      	uxtb	r3, r3
 800a0c4:	4619      	mov	r1, r3
 800a0c6:	f640 00e2 	movw	r0, #2274	; 0x8e2
 800a0ca:	f000 fde5 	bl	800ac98 <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 800a0ce:	f640 00e5 	movw	r0, #2277	; 0x8e5
 800a0d2:	f000 fdf5 	bl	800acc0 <SUBGRF_ReadRegister>
 800a0d6:	4603      	mov	r3, r0
 800a0d8:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 800a0da:	79bb      	ldrb	r3, [r7, #6]
 800a0dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a0e0:	b2db      	uxtb	r3, r3
 800a0e2:	4619      	mov	r1, r3
 800a0e4:	f640 00e5 	movw	r0, #2277	; 0x8e5
 800a0e8:	f000 fdd6 	bl	800ac98 <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 800a0ec:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800a0f0:	f000 f88a 	bl	800a208 <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 800a0f4:	463b      	mov	r3, r7
 800a0f6:	2204      	movs	r2, #4
 800a0f8:	4619      	mov	r1, r3
 800a0fa:	f640 0019 	movw	r0, #2073	; 0x819
 800a0fe:	f000 fe15 	bl	800ad2c <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 800a102:	2000      	movs	r0, #0
 800a104:	f000 f844 	bl	800a190 <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 800a108:	79fb      	ldrb	r3, [r7, #7]
 800a10a:	4619      	mov	r1, r3
 800a10c:	f640 00e2 	movw	r0, #2274	; 0x8e2
 800a110:	f000 fdc2 	bl	800ac98 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 800a114:	79bb      	ldrb	r3, [r7, #6]
 800a116:	4619      	mov	r1, r3
 800a118:	f640 00e5 	movw	r0, #2277	; 0x8e5
 800a11c:	f000 fdbc 	bl	800ac98 <SUBGRF_WriteRegister>

    return number;
 800a120:	683b      	ldr	r3, [r7, #0]
}
 800a122:	4618      	mov	r0, r3
 800a124:	3708      	adds	r7, #8
 800a126:	46bd      	mov	sp, r7
 800a128:	bd80      	pop	{r7, pc}
	...

0800a12c <SUBGRF_SetSleep>:

void SUBGRF_SetSleep( SleepParams_t sleepConfig )
{
 800a12c:	b580      	push	{r7, lr}
 800a12e:	b084      	sub	sp, #16
 800a130:	af00      	add	r7, sp, #0
 800a132:	7138      	strb	r0, [r7, #4]
    /* switch the antenna OFF by SW */
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 800a134:	2000      	movs	r0, #0
 800a136:	f001 f999 	bl	800b46c <RBI_ConfigRFSwitch>

    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 800a13a:	2002      	movs	r0, #2
 800a13c:	f000 ffa4 	bl	800b088 <Radio_SMPS_Set>

    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 800a140:	793b      	ldrb	r3, [r7, #4]
 800a142:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800a146:	b2db      	uxtb	r3, r3
 800a148:	009b      	lsls	r3, r3, #2
 800a14a:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 800a14c:	793b      	ldrb	r3, [r7, #4]
 800a14e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800a152:	b2db      	uxtb	r3, r3
 800a154:	005b      	lsls	r3, r3, #1
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 800a156:	b25b      	sxtb	r3, r3
 800a158:	4313      	orrs	r3, r2
 800a15a:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 800a15c:	793b      	ldrb	r3, [r7, #4]
 800a15e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800a162:	b2db      	uxtb	r3, r3
 800a164:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 800a166:	4313      	orrs	r3, r2
 800a168:	b25b      	sxtb	r3, r3
 800a16a:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 800a16c:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 800a16e:	f107 030f 	add.w	r3, r7, #15
 800a172:	2201      	movs	r2, #1
 800a174:	4619      	mov	r1, r3
 800a176:	2084      	movs	r0, #132	; 0x84
 800a178:	f000 fe3e 	bl	800adf8 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 800a17c:	4b03      	ldr	r3, [pc, #12]	; (800a18c <SUBGRF_SetSleep+0x60>)
 800a17e:	2200      	movs	r2, #0
 800a180:	701a      	strb	r2, [r3, #0]
}
 800a182:	bf00      	nop
 800a184:	3710      	adds	r7, #16
 800a186:	46bd      	mov	sp, r7
 800a188:	bd80      	pop	{r7, pc}
 800a18a:	bf00      	nop
 800a18c:	20000ac0 	.word	0x20000ac0

0800a190 <SUBGRF_SetStandby>:

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 800a190:	b580      	push	{r7, lr}
 800a192:	b082      	sub	sp, #8
 800a194:	af00      	add	r7, sp, #0
 800a196:	4603      	mov	r3, r0
 800a198:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 800a19a:	1dfb      	adds	r3, r7, #7
 800a19c:	2201      	movs	r2, #1
 800a19e:	4619      	mov	r1, r3
 800a1a0:	2080      	movs	r0, #128	; 0x80
 800a1a2:	f000 fe29 	bl	800adf8 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 800a1a6:	79fb      	ldrb	r3, [r7, #7]
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d103      	bne.n	800a1b4 <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 800a1ac:	4b05      	ldr	r3, [pc, #20]	; (800a1c4 <SUBGRF_SetStandby+0x34>)
 800a1ae:	2201      	movs	r2, #1
 800a1b0:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 800a1b2:	e002      	b.n	800a1ba <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 800a1b4:	4b03      	ldr	r3, [pc, #12]	; (800a1c4 <SUBGRF_SetStandby+0x34>)
 800a1b6:	2202      	movs	r2, #2
 800a1b8:	701a      	strb	r2, [r3, #0]
}
 800a1ba:	bf00      	nop
 800a1bc:	3708      	adds	r7, #8
 800a1be:	46bd      	mov	sp, r7
 800a1c0:	bd80      	pop	{r7, pc}
 800a1c2:	bf00      	nop
 800a1c4:	20000ac0 	.word	0x20000ac0

0800a1c8 <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 800a1c8:	b580      	push	{r7, lr}
 800a1ca:	b084      	sub	sp, #16
 800a1cc:	af00      	add	r7, sp, #0
 800a1ce:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 800a1d0:	4b0c      	ldr	r3, [pc, #48]	; (800a204 <SUBGRF_SetTx+0x3c>)
 800a1d2:	2204      	movs	r2, #4
 800a1d4:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	0c1b      	lsrs	r3, r3, #16
 800a1da:	b2db      	uxtb	r3, r3
 800a1dc:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	0a1b      	lsrs	r3, r3, #8
 800a1e2:	b2db      	uxtb	r3, r3
 800a1e4:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	b2db      	uxtb	r3, r3
 800a1ea:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 800a1ec:	f107 030c 	add.w	r3, r7, #12
 800a1f0:	2203      	movs	r2, #3
 800a1f2:	4619      	mov	r1, r3
 800a1f4:	2083      	movs	r0, #131	; 0x83
 800a1f6:	f000 fdff 	bl	800adf8 <SUBGRF_WriteCommand>
}
 800a1fa:	bf00      	nop
 800a1fc:	3710      	adds	r7, #16
 800a1fe:	46bd      	mov	sp, r7
 800a200:	bd80      	pop	{r7, pc}
 800a202:	bf00      	nop
 800a204:	20000ac0 	.word	0x20000ac0

0800a208 <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 800a208:	b580      	push	{r7, lr}
 800a20a:	b084      	sub	sp, #16
 800a20c:	af00      	add	r7, sp, #0
 800a20e:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 800a210:	4b0c      	ldr	r3, [pc, #48]	; (800a244 <SUBGRF_SetRx+0x3c>)
 800a212:	2205      	movs	r2, #5
 800a214:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	0c1b      	lsrs	r3, r3, #16
 800a21a:	b2db      	uxtb	r3, r3
 800a21c:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	0a1b      	lsrs	r3, r3, #8
 800a222:	b2db      	uxtb	r3, r3
 800a224:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	b2db      	uxtb	r3, r3
 800a22a:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 800a22c:	f107 030c 	add.w	r3, r7, #12
 800a230:	2203      	movs	r2, #3
 800a232:	4619      	mov	r1, r3
 800a234:	2082      	movs	r0, #130	; 0x82
 800a236:	f000 fddf 	bl	800adf8 <SUBGRF_WriteCommand>
}
 800a23a:	bf00      	nop
 800a23c:	3710      	adds	r7, #16
 800a23e:	46bd      	mov	sp, r7
 800a240:	bd80      	pop	{r7, pc}
 800a242:	bf00      	nop
 800a244:	20000ac0 	.word	0x20000ac0

0800a248 <SUBGRF_SetRxBoosted>:

void SUBGRF_SetRxBoosted( uint32_t timeout )
{
 800a248:	b580      	push	{r7, lr}
 800a24a:	b084      	sub	sp, #16
 800a24c:	af00      	add	r7, sp, #0
 800a24e:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 800a250:	4b0e      	ldr	r3, [pc, #56]	; (800a28c <SUBGRF_SetRxBoosted+0x44>)
 800a252:	2205      	movs	r2, #5
 800a254:	701a      	strb	r2, [r3, #0]

    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 800a256:	2197      	movs	r1, #151	; 0x97
 800a258:	f640 00ac 	movw	r0, #2220	; 0x8ac
 800a25c:	f000 fd1c 	bl	800ac98 <SUBGRF_WriteRegister>

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	0c1b      	lsrs	r3, r3, #16
 800a264:	b2db      	uxtb	r3, r3
 800a266:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	0a1b      	lsrs	r3, r3, #8
 800a26c:	b2db      	uxtb	r3, r3
 800a26e:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	b2db      	uxtb	r3, r3
 800a274:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 800a276:	f107 030c 	add.w	r3, r7, #12
 800a27a:	2203      	movs	r2, #3
 800a27c:	4619      	mov	r1, r3
 800a27e:	2082      	movs	r0, #130	; 0x82
 800a280:	f000 fdba 	bl	800adf8 <SUBGRF_WriteCommand>
}
 800a284:	bf00      	nop
 800a286:	3710      	adds	r7, #16
 800a288:	46bd      	mov	sp, r7
 800a28a:	bd80      	pop	{r7, pc}
 800a28c:	20000ac0 	.word	0x20000ac0

0800a290 <SUBGRF_SetRxDutyCycle>:

void SUBGRF_SetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 800a290:	b580      	push	{r7, lr}
 800a292:	b084      	sub	sp, #16
 800a294:	af00      	add	r7, sp, #0
 800a296:	6078      	str	r0, [r7, #4]
 800a298:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];

    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	0c1b      	lsrs	r3, r3, #16
 800a29e:	b2db      	uxtb	r3, r3
 800a2a0:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	0a1b      	lsrs	r3, r3, #8
 800a2a6:	b2db      	uxtb	r3, r3
 800a2a8:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	b2db      	uxtb	r3, r3
 800a2ae:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 800a2b0:	683b      	ldr	r3, [r7, #0]
 800a2b2:	0c1b      	lsrs	r3, r3, #16
 800a2b4:	b2db      	uxtb	r3, r3
 800a2b6:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 800a2b8:	683b      	ldr	r3, [r7, #0]
 800a2ba:	0a1b      	lsrs	r3, r3, #8
 800a2bc:	b2db      	uxtb	r3, r3
 800a2be:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 800a2c0:	683b      	ldr	r3, [r7, #0]
 800a2c2:	b2db      	uxtb	r3, r3
 800a2c4:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 800a2c6:	f107 0308 	add.w	r3, r7, #8
 800a2ca:	2206      	movs	r2, #6
 800a2cc:	4619      	mov	r1, r3
 800a2ce:	2094      	movs	r0, #148	; 0x94
 800a2d0:	f000 fd92 	bl	800adf8 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 800a2d4:	4b03      	ldr	r3, [pc, #12]	; (800a2e4 <SUBGRF_SetRxDutyCycle+0x54>)
 800a2d6:	2206      	movs	r2, #6
 800a2d8:	701a      	strb	r2, [r3, #0]
}
 800a2da:	bf00      	nop
 800a2dc:	3710      	adds	r7, #16
 800a2de:	46bd      	mov	sp, r7
 800a2e0:	bd80      	pop	{r7, pc}
 800a2e2:	bf00      	nop
 800a2e4:	20000ac0 	.word	0x20000ac0

0800a2e8 <SUBGRF_SetCad>:

void SUBGRF_SetCad( void )
{
 800a2e8:	b580      	push	{r7, lr}
 800a2ea:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 800a2ec:	2200      	movs	r2, #0
 800a2ee:	2100      	movs	r1, #0
 800a2f0:	20c5      	movs	r0, #197	; 0xc5
 800a2f2:	f000 fd81 	bl	800adf8 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 800a2f6:	4b02      	ldr	r3, [pc, #8]	; (800a300 <SUBGRF_SetCad+0x18>)
 800a2f8:	2207      	movs	r2, #7
 800a2fa:	701a      	strb	r2, [r3, #0]
}
 800a2fc:	bf00      	nop
 800a2fe:	bd80      	pop	{r7, pc}
 800a300:	20000ac0 	.word	0x20000ac0

0800a304 <SUBGRF_SetTxContinuousWave>:

void SUBGRF_SetTxContinuousWave( void )
{
 800a304:	b580      	push	{r7, lr}
 800a306:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 800a308:	2200      	movs	r2, #0
 800a30a:	2100      	movs	r1, #0
 800a30c:	20d1      	movs	r0, #209	; 0xd1
 800a30e:	f000 fd73 	bl	800adf8 <SUBGRF_WriteCommand>
}
 800a312:	bf00      	nop
 800a314:	bd80      	pop	{r7, pc}

0800a316 <SUBGRF_SetTxInfinitePreamble>:

void SUBGRF_SetTxInfinitePreamble( void )
{
 800a316:	b580      	push	{r7, lr}
 800a318:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 800a31a:	2200      	movs	r2, #0
 800a31c:	2100      	movs	r1, #0
 800a31e:	20d2      	movs	r0, #210	; 0xd2
 800a320:	f000 fd6a 	bl	800adf8 <SUBGRF_WriteCommand>
}
 800a324:	bf00      	nop
 800a326:	bd80      	pop	{r7, pc}

0800a328 <SUBGRF_SetStopRxTimerOnPreambleDetect>:

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 800a328:	b580      	push	{r7, lr}
 800a32a:	b082      	sub	sp, #8
 800a32c:	af00      	add	r7, sp, #0
 800a32e:	4603      	mov	r3, r0
 800a330:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 800a332:	1dfb      	adds	r3, r7, #7
 800a334:	2201      	movs	r2, #1
 800a336:	4619      	mov	r1, r3
 800a338:	209f      	movs	r0, #159	; 0x9f
 800a33a:	f000 fd5d 	bl	800adf8 <SUBGRF_WriteCommand>
}
 800a33e:	bf00      	nop
 800a340:	3708      	adds	r7, #8
 800a342:	46bd      	mov	sp, r7
 800a344:	bd80      	pop	{r7, pc}

0800a346 <SUBGRF_SetLoRaSymbNumTimeout>:

void SUBGRF_SetLoRaSymbNumTimeout( uint8_t symbNum )
{
 800a346:	b580      	push	{r7, lr}
 800a348:	b084      	sub	sp, #16
 800a34a:	af00      	add	r7, sp, #0
 800a34c:	4603      	mov	r3, r0
 800a34e:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 800a350:	1dfb      	adds	r3, r7, #7
 800a352:	2201      	movs	r2, #1
 800a354:	4619      	mov	r1, r3
 800a356:	20a0      	movs	r0, #160	; 0xa0
 800a358:	f000 fd4e 	bl	800adf8 <SUBGRF_WriteCommand>

    if( symbNum >= 64 )
 800a35c:	79fb      	ldrb	r3, [r7, #7]
 800a35e:	2b3f      	cmp	r3, #63	; 0x3f
 800a360:	d91c      	bls.n	800a39c <SUBGRF_SetLoRaSymbNumTimeout+0x56>
    {
        uint8_t mant = symbNum >> 1;
 800a362:	79fb      	ldrb	r3, [r7, #7]
 800a364:	085b      	lsrs	r3, r3, #1
 800a366:	73fb      	strb	r3, [r7, #15]
        uint8_t exp  = 0;
 800a368:	2300      	movs	r3, #0
 800a36a:	73bb      	strb	r3, [r7, #14]
        uint8_t reg  = 0;
 800a36c:	2300      	movs	r3, #0
 800a36e:	737b      	strb	r3, [r7, #13]

        while( mant > 31 )
 800a370:	e005      	b.n	800a37e <SUBGRF_SetLoRaSymbNumTimeout+0x38>
        {
            mant >>= 2;
 800a372:	7bfb      	ldrb	r3, [r7, #15]
 800a374:	089b      	lsrs	r3, r3, #2
 800a376:	73fb      	strb	r3, [r7, #15]
            exp++;
 800a378:	7bbb      	ldrb	r3, [r7, #14]
 800a37a:	3301      	adds	r3, #1
 800a37c:	73bb      	strb	r3, [r7, #14]
        while( mant > 31 )
 800a37e:	7bfb      	ldrb	r3, [r7, #15]
 800a380:	2b1f      	cmp	r3, #31
 800a382:	d8f6      	bhi.n	800a372 <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
        }

        reg = exp + ( mant << 3 );
 800a384:	7bfb      	ldrb	r3, [r7, #15]
 800a386:	00db      	lsls	r3, r3, #3
 800a388:	b2da      	uxtb	r2, r3
 800a38a:	7bbb      	ldrb	r3, [r7, #14]
 800a38c:	4413      	add	r3, r2
 800a38e:	737b      	strb	r3, [r7, #13]
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 800a390:	7b7b      	ldrb	r3, [r7, #13]
 800a392:	4619      	mov	r1, r3
 800a394:	f240 7006 	movw	r0, #1798	; 0x706
 800a398:	f000 fc7e 	bl	800ac98 <SUBGRF_WriteRegister>
    }
}
 800a39c:	bf00      	nop
 800a39e:	3710      	adds	r7, #16
 800a3a0:	46bd      	mov	sp, r7
 800a3a2:	bd80      	pop	{r7, pc}

0800a3a4 <SUBGRF_SetRegulatorMode>:

void SUBGRF_SetRegulatorMode( void )
{
 800a3a4:	b580      	push	{r7, lr}
 800a3a6:	b082      	sub	sp, #8
 800a3a8:	af00      	add	r7, sp, #0
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 800a3aa:	f001 f8bf 	bl	800b52c <RBI_IsDCDC>
 800a3ae:	4603      	mov	r3, r0
 800a3b0:	2b01      	cmp	r3, #1
 800a3b2:	d102      	bne.n	800a3ba <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 800a3b4:	2301      	movs	r3, #1
 800a3b6:	71fb      	strb	r3, [r7, #7]
 800a3b8:	e001      	b.n	800a3be <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 800a3ba:	2300      	movs	r3, #0
 800a3bc:	71fb      	strb	r3, [r7, #7]
    }
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 800a3be:	1dfb      	adds	r3, r7, #7
 800a3c0:	2201      	movs	r2, #1
 800a3c2:	4619      	mov	r1, r3
 800a3c4:	2096      	movs	r0, #150	; 0x96
 800a3c6:	f000 fd17 	bl	800adf8 <SUBGRF_WriteCommand>
}
 800a3ca:	bf00      	nop
 800a3cc:	3708      	adds	r7, #8
 800a3ce:	46bd      	mov	sp, r7
 800a3d0:	bd80      	pop	{r7, pc}

0800a3d2 <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 800a3d2:	b580      	push	{r7, lr}
 800a3d4:	b084      	sub	sp, #16
 800a3d6:	af00      	add	r7, sp, #0
 800a3d8:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800a3da:	793b      	ldrb	r3, [r7, #4]
 800a3dc:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800a3e0:	b2db      	uxtb	r3, r3
 800a3e2:	019b      	lsls	r3, r3, #6
 800a3e4:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 800a3e6:	793b      	ldrb	r3, [r7, #4]
 800a3e8:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800a3ec:	b2db      	uxtb	r3, r3
 800a3ee:	015b      	lsls	r3, r3, #5
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800a3f0:	b25b      	sxtb	r3, r3
 800a3f2:	4313      	orrs	r3, r2
 800a3f4:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 800a3f6:	793b      	ldrb	r3, [r7, #4]
 800a3f8:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800a3fc:	b2db      	uxtb	r3, r3
 800a3fe:	011b      	lsls	r3, r3, #4
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 800a400:	b25b      	sxtb	r3, r3
 800a402:	4313      	orrs	r3, r2
 800a404:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 800a406:	793b      	ldrb	r3, [r7, #4]
 800a408:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800a40c:	b2db      	uxtb	r3, r3
 800a40e:	00db      	lsls	r3, r3, #3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 800a410:	b25b      	sxtb	r3, r3
 800a412:	4313      	orrs	r3, r2
 800a414:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 800a416:	793b      	ldrb	r3, [r7, #4]
 800a418:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800a41c:	b2db      	uxtb	r3, r3
 800a41e:	009b      	lsls	r3, r3, #2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 800a420:	b25b      	sxtb	r3, r3
 800a422:	4313      	orrs	r3, r2
 800a424:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 800a426:	793b      	ldrb	r3, [r7, #4]
 800a428:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800a42c:	b2db      	uxtb	r3, r3
 800a42e:	005b      	lsls	r3, r3, #1
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 800a430:	b25b      	sxtb	r3, r3
 800a432:	4313      	orrs	r3, r2
 800a434:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 800a436:	793b      	ldrb	r3, [r7, #4]
 800a438:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800a43c:	b2db      	uxtb	r3, r3
 800a43e:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 800a440:	4313      	orrs	r3, r2
 800a442:	b25b      	sxtb	r3, r3
 800a444:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800a446:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 800a448:	f107 030f 	add.w	r3, r7, #15
 800a44c:	2201      	movs	r2, #1
 800a44e:	4619      	mov	r1, r3
 800a450:	2089      	movs	r0, #137	; 0x89
 800a452:	f000 fcd1 	bl	800adf8 <SUBGRF_WriteCommand>
}
 800a456:	bf00      	nop
 800a458:	3710      	adds	r7, #16
 800a45a:	46bd      	mov	sp, r7
 800a45c:	bd80      	pop	{r7, pc}
	...

0800a460 <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 800a460:	b580      	push	{r7, lr}
 800a462:	b084      	sub	sp, #16
 800a464:	af00      	add	r7, sp, #0
 800a466:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	4a1d      	ldr	r2, [pc, #116]	; (800a4e0 <SUBGRF_CalibrateImage+0x80>)
 800a46c:	4293      	cmp	r3, r2
 800a46e:	d904      	bls.n	800a47a <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 800a470:	23e1      	movs	r3, #225	; 0xe1
 800a472:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 800a474:	23e9      	movs	r3, #233	; 0xe9
 800a476:	737b      	strb	r3, [r7, #13]
 800a478:	e027      	b.n	800a4ca <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 850000000 )
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	4a19      	ldr	r2, [pc, #100]	; (800a4e4 <SUBGRF_CalibrateImage+0x84>)
 800a47e:	4293      	cmp	r3, r2
 800a480:	d904      	bls.n	800a48c <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 800a482:	23d7      	movs	r3, #215	; 0xd7
 800a484:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 800a486:	23db      	movs	r3, #219	; 0xdb
 800a488:	737b      	strb	r3, [r7, #13]
 800a48a:	e01e      	b.n	800a4ca <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 770000000 )
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	4a16      	ldr	r2, [pc, #88]	; (800a4e8 <SUBGRF_CalibrateImage+0x88>)
 800a490:	4293      	cmp	r3, r2
 800a492:	d904      	bls.n	800a49e <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 800a494:	23c1      	movs	r3, #193	; 0xc1
 800a496:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 800a498:	23c5      	movs	r3, #197	; 0xc5
 800a49a:	737b      	strb	r3, [r7, #13]
 800a49c:	e015      	b.n	800a4ca <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 460000000 )
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	4a12      	ldr	r2, [pc, #72]	; (800a4ec <SUBGRF_CalibrateImage+0x8c>)
 800a4a2:	4293      	cmp	r3, r2
 800a4a4:	d904      	bls.n	800a4b0 <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 800a4a6:	2375      	movs	r3, #117	; 0x75
 800a4a8:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 800a4aa:	2381      	movs	r3, #129	; 0x81
 800a4ac:	737b      	strb	r3, [r7, #13]
 800a4ae:	e00c      	b.n	800a4ca <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 425000000 )
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	4a0f      	ldr	r2, [pc, #60]	; (800a4f0 <SUBGRF_CalibrateImage+0x90>)
 800a4b4:	4293      	cmp	r3, r2
 800a4b6:	d904      	bls.n	800a4c2 <SUBGRF_CalibrateImage+0x62>
    {
        calFreq[0] = 0x6B;
 800a4b8:	236b      	movs	r3, #107	; 0x6b
 800a4ba:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 800a4bc:	236f      	movs	r3, #111	; 0x6f
 800a4be:	737b      	strb	r3, [r7, #13]
 800a4c0:	e003      	b.n	800a4ca <SUBGRF_CalibrateImage+0x6a>
    }
    else /* freq <= 425000000*/
    {
        /* [ 156MHz - 171MHz ] */
        calFreq[0] = 0x29;
 800a4c2:	2329      	movs	r3, #41	; 0x29
 800a4c4:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x2B ;
 800a4c6:	232b      	movs	r3, #43	; 0x2b
 800a4c8:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 800a4ca:	f107 030c 	add.w	r3, r7, #12
 800a4ce:	2202      	movs	r2, #2
 800a4d0:	4619      	mov	r1, r3
 800a4d2:	2098      	movs	r0, #152	; 0x98
 800a4d4:	f000 fc90 	bl	800adf8 <SUBGRF_WriteCommand>
}
 800a4d8:	bf00      	nop
 800a4da:	3710      	adds	r7, #16
 800a4dc:	46bd      	mov	sp, r7
 800a4de:	bd80      	pop	{r7, pc}
 800a4e0:	35a4e900 	.word	0x35a4e900
 800a4e4:	32a9f880 	.word	0x32a9f880
 800a4e8:	2de54480 	.word	0x2de54480
 800a4ec:	1b6b0b00 	.word	0x1b6b0b00
 800a4f0:	1954fc40 	.word	0x1954fc40

0800a4f4 <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 800a4f4:	b590      	push	{r4, r7, lr}
 800a4f6:	b085      	sub	sp, #20
 800a4f8:	af00      	add	r7, sp, #0
 800a4fa:	4604      	mov	r4, r0
 800a4fc:	4608      	mov	r0, r1
 800a4fe:	4611      	mov	r1, r2
 800a500:	461a      	mov	r2, r3
 800a502:	4623      	mov	r3, r4
 800a504:	71fb      	strb	r3, [r7, #7]
 800a506:	4603      	mov	r3, r0
 800a508:	71bb      	strb	r3, [r7, #6]
 800a50a:	460b      	mov	r3, r1
 800a50c:	717b      	strb	r3, [r7, #5]
 800a50e:	4613      	mov	r3, r2
 800a510:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 800a512:	79fb      	ldrb	r3, [r7, #7]
 800a514:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 800a516:	79bb      	ldrb	r3, [r7, #6]
 800a518:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 800a51a:	797b      	ldrb	r3, [r7, #5]
 800a51c:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 800a51e:	793b      	ldrb	r3, [r7, #4]
 800a520:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 800a522:	f107 030c 	add.w	r3, r7, #12
 800a526:	2204      	movs	r2, #4
 800a528:	4619      	mov	r1, r3
 800a52a:	2095      	movs	r0, #149	; 0x95
 800a52c:	f000 fc64 	bl	800adf8 <SUBGRF_WriteCommand>
}
 800a530:	bf00      	nop
 800a532:	3714      	adds	r7, #20
 800a534:	46bd      	mov	sp, r7
 800a536:	bd90      	pop	{r4, r7, pc}

0800a538 <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 800a538:	b590      	push	{r4, r7, lr}
 800a53a:	b085      	sub	sp, #20
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	4604      	mov	r4, r0
 800a540:	4608      	mov	r0, r1
 800a542:	4611      	mov	r1, r2
 800a544:	461a      	mov	r2, r3
 800a546:	4623      	mov	r3, r4
 800a548:	80fb      	strh	r3, [r7, #6]
 800a54a:	4603      	mov	r3, r0
 800a54c:	80bb      	strh	r3, [r7, #4]
 800a54e:	460b      	mov	r3, r1
 800a550:	807b      	strh	r3, [r7, #2]
 800a552:	4613      	mov	r3, r2
 800a554:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 800a556:	88fb      	ldrh	r3, [r7, #6]
 800a558:	0a1b      	lsrs	r3, r3, #8
 800a55a:	b29b      	uxth	r3, r3
 800a55c:	b2db      	uxtb	r3, r3
 800a55e:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 800a560:	88fb      	ldrh	r3, [r7, #6]
 800a562:	b2db      	uxtb	r3, r3
 800a564:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 800a566:	88bb      	ldrh	r3, [r7, #4]
 800a568:	0a1b      	lsrs	r3, r3, #8
 800a56a:	b29b      	uxth	r3, r3
 800a56c:	b2db      	uxtb	r3, r3
 800a56e:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 800a570:	88bb      	ldrh	r3, [r7, #4]
 800a572:	b2db      	uxtb	r3, r3
 800a574:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 800a576:	887b      	ldrh	r3, [r7, #2]
 800a578:	0a1b      	lsrs	r3, r3, #8
 800a57a:	b29b      	uxth	r3, r3
 800a57c:	b2db      	uxtb	r3, r3
 800a57e:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 800a580:	887b      	ldrh	r3, [r7, #2]
 800a582:	b2db      	uxtb	r3, r3
 800a584:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 800a586:	883b      	ldrh	r3, [r7, #0]
 800a588:	0a1b      	lsrs	r3, r3, #8
 800a58a:	b29b      	uxth	r3, r3
 800a58c:	b2db      	uxtb	r3, r3
 800a58e:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 800a590:	883b      	ldrh	r3, [r7, #0]
 800a592:	b2db      	uxtb	r3, r3
 800a594:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 800a596:	f107 0308 	add.w	r3, r7, #8
 800a59a:	2208      	movs	r2, #8
 800a59c:	4619      	mov	r1, r3
 800a59e:	2008      	movs	r0, #8
 800a5a0:	f000 fc2a 	bl	800adf8 <SUBGRF_WriteCommand>
}
 800a5a4:	bf00      	nop
 800a5a6:	3714      	adds	r7, #20
 800a5a8:	46bd      	mov	sp, r7
 800a5aa:	bd90      	pop	{r4, r7, pc}

0800a5ac <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 800a5ac:	b580      	push	{r7, lr}
 800a5ae:	b084      	sub	sp, #16
 800a5b0:	af00      	add	r7, sp, #0
 800a5b2:	4603      	mov	r3, r0
 800a5b4:	6039      	str	r1, [r7, #0]
 800a5b6:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 800a5b8:	79fb      	ldrb	r3, [r7, #7]
 800a5ba:	f003 0307 	and.w	r3, r3, #7
 800a5be:	b2db      	uxtb	r3, r3
 800a5c0:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800a5c2:	683b      	ldr	r3, [r7, #0]
 800a5c4:	0c1b      	lsrs	r3, r3, #16
 800a5c6:	b2db      	uxtb	r3, r3
 800a5c8:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800a5ca:	683b      	ldr	r3, [r7, #0]
 800a5cc:	0a1b      	lsrs	r3, r3, #8
 800a5ce:	b2db      	uxtb	r3, r3
 800a5d0:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 800a5d2:	683b      	ldr	r3, [r7, #0]
 800a5d4:	b2db      	uxtb	r3, r3
 800a5d6:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 800a5d8:	f107 030c 	add.w	r3, r7, #12
 800a5dc:	2204      	movs	r2, #4
 800a5de:	4619      	mov	r1, r3
 800a5e0:	2097      	movs	r0, #151	; 0x97
 800a5e2:	f000 fc09 	bl	800adf8 <SUBGRF_WriteCommand>
}
 800a5e6:	bf00      	nop
 800a5e8:	3710      	adds	r7, #16
 800a5ea:	46bd      	mov	sp, r7
 800a5ec:	bd80      	pop	{r7, pc}
	...

0800a5f0 <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 800a5f0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800a5f4:	b084      	sub	sp, #16
 800a5f6:	af00      	add	r7, sp, #0
 800a5f8:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 800a5fa:	2300      	movs	r3, #0
 800a5fc:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 800a5fe:	4b1d      	ldr	r3, [pc, #116]	; (800a674 <SUBGRF_SetRfFrequency+0x84>)
 800a600:	781b      	ldrb	r3, [r3, #0]
 800a602:	f083 0301 	eor.w	r3, r3, #1
 800a606:	b2db      	uxtb	r3, r3
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d005      	beq.n	800a618 <SUBGRF_SetRfFrequency+0x28>
    {
        SUBGRF_CalibrateImage( frequency );
 800a60c:	6878      	ldr	r0, [r7, #4]
 800a60e:	f7ff ff27 	bl	800a460 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 800a612:	4b18      	ldr	r3, [pc, #96]	; (800a674 <SUBGRF_SetRfFrequency+0x84>)
 800a614:	2201      	movs	r2, #1
 800a616:	701a      	strb	r2, [r3, #0]
    }
    SX_FREQ_TO_CHANNEL(chan, frequency);
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	2200      	movs	r2, #0
 800a61c:	461c      	mov	r4, r3
 800a61e:	4615      	mov	r5, r2
 800a620:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 800a624:	ea4f 6844 	mov.w	r8, r4, lsl #25
 800a628:	4a13      	ldr	r2, [pc, #76]	; (800a678 <SUBGRF_SetRfFrequency+0x88>)
 800a62a:	f04f 0300 	mov.w	r3, #0
 800a62e:	4640      	mov	r0, r8
 800a630:	4649      	mov	r1, r9
 800a632:	f7f5 fdf5 	bl	8000220 <__aeabi_uldivmod>
 800a636:	4602      	mov	r2, r0
 800a638:	460b      	mov	r3, r1
 800a63a:	4613      	mov	r3, r2
 800a63c:	60fb      	str	r3, [r7, #12]
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	0e1b      	lsrs	r3, r3, #24
 800a642:	b2db      	uxtb	r3, r3
 800a644:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	0c1b      	lsrs	r3, r3, #16
 800a64a:	b2db      	uxtb	r3, r3
 800a64c:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	0a1b      	lsrs	r3, r3, #8
 800a652:	b2db      	uxtb	r3, r3
 800a654:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	b2db      	uxtb	r3, r3
 800a65a:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 800a65c:	f107 0308 	add.w	r3, r7, #8
 800a660:	2204      	movs	r2, #4
 800a662:	4619      	mov	r1, r3
 800a664:	2086      	movs	r0, #134	; 0x86
 800a666:	f000 fbc7 	bl	800adf8 <SUBGRF_WriteCommand>
}
 800a66a:	bf00      	nop
 800a66c:	3710      	adds	r7, #16
 800a66e:	46bd      	mov	sp, r7
 800a670:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800a674:	20000ac8 	.word	0x20000ac8
 800a678:	01e84800 	.word	0x01e84800

0800a67c <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 800a67c:	b580      	push	{r7, lr}
 800a67e:	b082      	sub	sp, #8
 800a680:	af00      	add	r7, sp, #0
 800a682:	4603      	mov	r3, r0
 800a684:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 800a686:	79fa      	ldrb	r2, [r7, #7]
 800a688:	4b09      	ldr	r3, [pc, #36]	; (800a6b0 <SUBGRF_SetPacketType+0x34>)
 800a68a:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 800a68c:	79fb      	ldrb	r3, [r7, #7]
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d104      	bne.n	800a69c <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 800a692:	2100      	movs	r1, #0
 800a694:	f240 60ac 	movw	r0, #1708	; 0x6ac
 800a698:	f000 fafe 	bl	800ac98 <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 800a69c:	1dfb      	adds	r3, r7, #7
 800a69e:	2201      	movs	r2, #1
 800a6a0:	4619      	mov	r1, r3
 800a6a2:	208a      	movs	r0, #138	; 0x8a
 800a6a4:	f000 fba8 	bl	800adf8 <SUBGRF_WriteCommand>
}
 800a6a8:	bf00      	nop
 800a6aa:	3708      	adds	r7, #8
 800a6ac:	46bd      	mov	sp, r7
 800a6ae:	bd80      	pop	{r7, pc}
 800a6b0:	20000ac1 	.word	0x20000ac1

0800a6b4 <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 800a6b4:	b480      	push	{r7}
 800a6b6:	af00      	add	r7, sp, #0
    return PacketType;
 800a6b8:	4b02      	ldr	r3, [pc, #8]	; (800a6c4 <SUBGRF_GetPacketType+0x10>)
 800a6ba:	781b      	ldrb	r3, [r3, #0]
}
 800a6bc:	4618      	mov	r0, r3
 800a6be:	46bd      	mov	sp, r7
 800a6c0:	bc80      	pop	{r7}
 800a6c2:	4770      	bx	lr
 800a6c4:	20000ac1 	.word	0x20000ac1

0800a6c8 <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime )
{
 800a6c8:	b580      	push	{r7, lr}
 800a6ca:	b084      	sub	sp, #16
 800a6cc:	af00      	add	r7, sp, #0
 800a6ce:	4603      	mov	r3, r0
 800a6d0:	71fb      	strb	r3, [r7, #7]
 800a6d2:	460b      	mov	r3, r1
 800a6d4:	71bb      	strb	r3, [r7, #6]
 800a6d6:	4613      	mov	r3, r2
 800a6d8:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];
    int32_t max_power;

    if (paSelect == RFO_LP)
 800a6da:	79fb      	ldrb	r3, [r7, #7]
 800a6dc:	2b01      	cmp	r3, #1
 800a6de:	d149      	bne.n	800a774 <SUBGRF_SetTxParams+0xac>
    {
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 800a6e0:	2000      	movs	r0, #0
 800a6e2:	f000 ff2e 	bl	800b542 <RBI_GetRFOMaxPowerConfig>
 800a6e6:	60f8      	str	r0, [r7, #12]
        if (power >  max_power)
 800a6e8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800a6ec:	68fa      	ldr	r2, [r7, #12]
 800a6ee:	429a      	cmp	r2, r3
 800a6f0:	da01      	bge.n	800a6f6 <SUBGRF_SetTxParams+0x2e>
        {
          power = max_power;
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 14)
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	2b0e      	cmp	r3, #14
 800a6fa:	d10e      	bne.n	800a71a <SUBGRF_SetTxParams+0x52>
        {
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 800a6fc:	2301      	movs	r3, #1
 800a6fe:	2201      	movs	r2, #1
 800a700:	2100      	movs	r1, #0
 800a702:	2004      	movs	r0, #4
 800a704:	f7ff fef6 	bl	800a4f4 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 800a708:	79ba      	ldrb	r2, [r7, #6]
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	b2db      	uxtb	r3, r3
 800a70e:	1ad3      	subs	r3, r2, r3
 800a710:	b2db      	uxtb	r3, r3
 800a712:	330e      	adds	r3, #14
 800a714:	b2db      	uxtb	r3, r3
 800a716:	71bb      	strb	r3, [r7, #6]
 800a718:	e01f      	b.n	800a75a <SUBGRF_SetTxParams+0x92>
        }
        else if (max_power == 10)
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	2b0a      	cmp	r3, #10
 800a71e:	d10e      	bne.n	800a73e <SUBGRF_SetTxParams+0x76>
        {
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 800a720:	2301      	movs	r3, #1
 800a722:	2201      	movs	r2, #1
 800a724:	2100      	movs	r1, #0
 800a726:	2001      	movs	r0, #1
 800a728:	f7ff fee4 	bl	800a4f4 <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 800a72c:	79ba      	ldrb	r2, [r7, #6]
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	b2db      	uxtb	r3, r3
 800a732:	1ad3      	subs	r3, r2, r3
 800a734:	b2db      	uxtb	r3, r3
 800a736:	330d      	adds	r3, #13
 800a738:	b2db      	uxtb	r3, r3
 800a73a:	71bb      	strb	r3, [r7, #6]
 800a73c:	e00d      	b.n	800a75a <SUBGRF_SetTxParams+0x92>
        }
        else /*default 15dBm*/
        {
            SUBGRF_SetPaConfig(0x07, 0x00, 0x01, 0x01);
 800a73e:	2301      	movs	r3, #1
 800a740:	2201      	movs	r2, #1
 800a742:	2100      	movs	r1, #0
 800a744:	2007      	movs	r0, #7
 800a746:	f7ff fed5 	bl	800a4f4 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 800a74a:	79ba      	ldrb	r2, [r7, #6]
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	b2db      	uxtb	r3, r3
 800a750:	1ad3      	subs	r3, r2, r3
 800a752:	b2db      	uxtb	r3, r3
 800a754:	330e      	adds	r3, #14
 800a756:	b2db      	uxtb	r3, r3
 800a758:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -17)
 800a75a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800a75e:	f113 0f11 	cmn.w	r3, #17
 800a762:	da01      	bge.n	800a768 <SUBGRF_SetTxParams+0xa0>
        {
            power = -17;
 800a764:	23ef      	movs	r3, #239	; 0xef
 800a766:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 800a768:	2118      	movs	r1, #24
 800a76a:	f640 00e7 	movw	r0, #2279	; 0x8e7
 800a76e:	f000 fa93 	bl	800ac98 <SUBGRF_WriteRegister>
 800a772:	e067      	b.n	800a844 <SUBGRF_SetTxParams+0x17c>
    }
    else /* rfo_hp*/
    {
        /* WORKAROUND - Better Resistance of the RFO High Power Tx to Antenna Mismatch, see STM32WL Erratasheet*/
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 800a774:	f640 00d8 	movw	r0, #2264	; 0x8d8
 800a778:	f000 faa2 	bl	800acc0 <SUBGRF_ReadRegister>
 800a77c:	4603      	mov	r3, r0
 800a77e:	f043 031e 	orr.w	r3, r3, #30
 800a782:	b2db      	uxtb	r3, r3
 800a784:	4619      	mov	r1, r3
 800a786:	f640 00d8 	movw	r0, #2264	; 0x8d8
 800a78a:	f000 fa85 	bl	800ac98 <SUBGRF_WriteRegister>
        /* WORKAROUND END*/
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 800a78e:	2001      	movs	r0, #1
 800a790:	f000 fed7 	bl	800b542 <RBI_GetRFOMaxPowerConfig>
 800a794:	60f8      	str	r0, [r7, #12]
        if (power > max_power)
 800a796:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800a79a:	68fa      	ldr	r2, [r7, #12]
 800a79c:	429a      	cmp	r2, r3
 800a79e:	da01      	bge.n	800a7a4 <SUBGRF_SetTxParams+0xdc>
        {
            power = max_power;
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 20)
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	2b14      	cmp	r3, #20
 800a7a8:	d10e      	bne.n	800a7c8 <SUBGRF_SetTxParams+0x100>
        {
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 800a7aa:	2301      	movs	r3, #1
 800a7ac:	2200      	movs	r2, #0
 800a7ae:	2105      	movs	r1, #5
 800a7b0:	2003      	movs	r0, #3
 800a7b2:	f7ff fe9f 	bl	800a4f4 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 800a7b6:	79ba      	ldrb	r2, [r7, #6]
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	b2db      	uxtb	r3, r3
 800a7bc:	1ad3      	subs	r3, r2, r3
 800a7be:	b2db      	uxtb	r3, r3
 800a7c0:	3316      	adds	r3, #22
 800a7c2:	b2db      	uxtb	r3, r3
 800a7c4:	71bb      	strb	r3, [r7, #6]
 800a7c6:	e031      	b.n	800a82c <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 17)
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	2b11      	cmp	r3, #17
 800a7cc:	d10e      	bne.n	800a7ec <SUBGRF_SetTxParams+0x124>
        {
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 800a7ce:	2301      	movs	r3, #1
 800a7d0:	2200      	movs	r2, #0
 800a7d2:	2103      	movs	r1, #3
 800a7d4:	2002      	movs	r0, #2
 800a7d6:	f7ff fe8d 	bl	800a4f4 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 800a7da:	79ba      	ldrb	r2, [r7, #6]
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	b2db      	uxtb	r3, r3
 800a7e0:	1ad3      	subs	r3, r2, r3
 800a7e2:	b2db      	uxtb	r3, r3
 800a7e4:	3316      	adds	r3, #22
 800a7e6:	b2db      	uxtb	r3, r3
 800a7e8:	71bb      	strb	r3, [r7, #6]
 800a7ea:	e01f      	b.n	800a82c <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 14)
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	2b0e      	cmp	r3, #14
 800a7f0:	d10e      	bne.n	800a810 <SUBGRF_SetTxParams+0x148>
        {
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 800a7f2:	2301      	movs	r3, #1
 800a7f4:	2200      	movs	r2, #0
 800a7f6:	2102      	movs	r1, #2
 800a7f8:	2002      	movs	r0, #2
 800a7fa:	f7ff fe7b 	bl	800a4f4 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 800a7fe:	79ba      	ldrb	r2, [r7, #6]
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	b2db      	uxtb	r3, r3
 800a804:	1ad3      	subs	r3, r2, r3
 800a806:	b2db      	uxtb	r3, r3
 800a808:	330e      	adds	r3, #14
 800a80a:	b2db      	uxtb	r3, r3
 800a80c:	71bb      	strb	r3, [r7, #6]
 800a80e:	e00d      	b.n	800a82c <SUBGRF_SetTxParams+0x164>
        }
        else /*22dBm*/
        {
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 800a810:	2301      	movs	r3, #1
 800a812:	2200      	movs	r2, #0
 800a814:	2107      	movs	r1, #7
 800a816:	2004      	movs	r0, #4
 800a818:	f7ff fe6c 	bl	800a4f4 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 800a81c:	79ba      	ldrb	r2, [r7, #6]
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	b2db      	uxtb	r3, r3
 800a822:	1ad3      	subs	r3, r2, r3
 800a824:	b2db      	uxtb	r3, r3
 800a826:	3316      	adds	r3, #22
 800a828:	b2db      	uxtb	r3, r3
 800a82a:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -9)
 800a82c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800a830:	f113 0f09 	cmn.w	r3, #9
 800a834:	da01      	bge.n	800a83a <SUBGRF_SetTxParams+0x172>
        {
            power = -9;
 800a836:	23f7      	movs	r3, #247	; 0xf7
 800a838:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 800a83a:	2138      	movs	r1, #56	; 0x38
 800a83c:	f640 00e7 	movw	r0, #2279	; 0x8e7
 800a840:	f000 fa2a 	bl	800ac98 <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 800a844:	79bb      	ldrb	r3, [r7, #6]
 800a846:	723b      	strb	r3, [r7, #8]
    buf[1] = (uint8_t)rampTime;
 800a848:	797b      	ldrb	r3, [r7, #5]
 800a84a:	727b      	strb	r3, [r7, #9]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 800a84c:	f107 0308 	add.w	r3, r7, #8
 800a850:	2202      	movs	r2, #2
 800a852:	4619      	mov	r1, r3
 800a854:	208e      	movs	r0, #142	; 0x8e
 800a856:	f000 facf 	bl	800adf8 <SUBGRF_WriteCommand>
}
 800a85a:	bf00      	nop
 800a85c:	3710      	adds	r7, #16
 800a85e:	46bd      	mov	sp, r7
 800a860:	bd80      	pop	{r7, pc}
	...

0800a864 <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 800a864:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800a868:	b086      	sub	sp, #24
 800a86a:	af00      	add	r7, sp, #0
 800a86c:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 800a86e:	2300      	movs	r3, #0
 800a870:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 800a872:	4a61      	ldr	r2, [pc, #388]	; (800a9f8 <SUBGRF_SetModulationParams+0x194>)
 800a874:	f107 0308 	add.w	r3, r7, #8
 800a878:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a87c:	e883 0003 	stmia.w	r3, {r0, r1}

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	781a      	ldrb	r2, [r3, #0]
 800a884:	4b5d      	ldr	r3, [pc, #372]	; (800a9fc <SUBGRF_SetModulationParams+0x198>)
 800a886:	781b      	ldrb	r3, [r3, #0]
 800a888:	429a      	cmp	r2, r3
 800a88a:	d004      	beq.n	800a896 <SUBGRF_SetModulationParams+0x32>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	781b      	ldrb	r3, [r3, #0]
 800a890:	4618      	mov	r0, r3
 800a892:	f7ff fef3 	bl	800a67c <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	781b      	ldrb	r3, [r3, #0]
 800a89a:	2b03      	cmp	r3, #3
 800a89c:	f200 80a5 	bhi.w	800a9ea <SUBGRF_SetModulationParams+0x186>
 800a8a0:	a201      	add	r2, pc, #4	; (adr r2, 800a8a8 <SUBGRF_SetModulationParams+0x44>)
 800a8a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8a6:	bf00      	nop
 800a8a8:	0800a8b9 	.word	0x0800a8b9
 800a8ac:	0800a979 	.word	0x0800a979
 800a8b0:	0800a93b 	.word	0x0800a93b
 800a8b4:	0800a9a7 	.word	0x0800a9a7
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 800a8b8:	2308      	movs	r3, #8
 800a8ba:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	685b      	ldr	r3, [r3, #4]
 800a8c0:	4a4f      	ldr	r2, [pc, #316]	; (800aa00 <SUBGRF_SetModulationParams+0x19c>)
 800a8c2:	fbb2 f3f3 	udiv	r3, r2, r3
 800a8c6:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 800a8c8:	697b      	ldr	r3, [r7, #20]
 800a8ca:	0c1b      	lsrs	r3, r3, #16
 800a8cc:	b2db      	uxtb	r3, r3
 800a8ce:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 800a8d0:	697b      	ldr	r3, [r7, #20]
 800a8d2:	0a1b      	lsrs	r3, r3, #8
 800a8d4:	b2db      	uxtb	r3, r3
 800a8d6:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 800a8d8:	697b      	ldr	r3, [r7, #20]
 800a8da:	b2db      	uxtb	r3, r3
 800a8dc:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	7b1b      	ldrb	r3, [r3, #12]
 800a8e2:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	7b5b      	ldrb	r3, [r3, #13]
 800a8e8:	733b      	strb	r3, [r7, #12]
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	689b      	ldr	r3, [r3, #8]
 800a8ee:	2200      	movs	r2, #0
 800a8f0:	461c      	mov	r4, r3
 800a8f2:	4615      	mov	r5, r2
 800a8f4:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 800a8f8:	ea4f 6844 	mov.w	r8, r4, lsl #25
 800a8fc:	4a41      	ldr	r2, [pc, #260]	; (800aa04 <SUBGRF_SetModulationParams+0x1a0>)
 800a8fe:	f04f 0300 	mov.w	r3, #0
 800a902:	4640      	mov	r0, r8
 800a904:	4649      	mov	r1, r9
 800a906:	f7f5 fc8b 	bl	8000220 <__aeabi_uldivmod>
 800a90a:	4602      	mov	r2, r0
 800a90c:	460b      	mov	r3, r1
 800a90e:	4613      	mov	r3, r2
 800a910:	617b      	str	r3, [r7, #20]
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 800a912:	697b      	ldr	r3, [r7, #20]
 800a914:	0c1b      	lsrs	r3, r3, #16
 800a916:	b2db      	uxtb	r3, r3
 800a918:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 800a91a:	697b      	ldr	r3, [r7, #20]
 800a91c:	0a1b      	lsrs	r3, r3, #8
 800a91e:	b2db      	uxtb	r3, r3
 800a920:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 800a922:	697b      	ldr	r3, [r7, #20]
 800a924:	b2db      	uxtb	r3, r3
 800a926:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800a928:	7cfb      	ldrb	r3, [r7, #19]
 800a92a:	b29a      	uxth	r2, r3
 800a92c:	f107 0308 	add.w	r3, r7, #8
 800a930:	4619      	mov	r1, r3
 800a932:	208b      	movs	r0, #139	; 0x8b
 800a934:	f000 fa60 	bl	800adf8 <SUBGRF_WriteCommand>
        break;
 800a938:	e058      	b.n	800a9ec <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_BPSK:
        n = 4;
 800a93a:	2304      	movs	r3, #4
 800a93c:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	691b      	ldr	r3, [r3, #16]
 800a942:	4a2f      	ldr	r2, [pc, #188]	; (800aa00 <SUBGRF_SetModulationParams+0x19c>)
 800a944:	fbb2 f3f3 	udiv	r3, r2, r3
 800a948:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 800a94a:	697b      	ldr	r3, [r7, #20]
 800a94c:	0c1b      	lsrs	r3, r3, #16
 800a94e:	b2db      	uxtb	r3, r3
 800a950:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 800a952:	697b      	ldr	r3, [r7, #20]
 800a954:	0a1b      	lsrs	r3, r3, #8
 800a956:	b2db      	uxtb	r3, r3
 800a958:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 800a95a:	697b      	ldr	r3, [r7, #20]
 800a95c:	b2db      	uxtb	r3, r3
 800a95e:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	7d1b      	ldrb	r3, [r3, #20]
 800a964:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800a966:	7cfb      	ldrb	r3, [r7, #19]
 800a968:	b29a      	uxth	r2, r3
 800a96a:	f107 0308 	add.w	r3, r7, #8
 800a96e:	4619      	mov	r1, r3
 800a970:	208b      	movs	r0, #139	; 0x8b
 800a972:	f000 fa41 	bl	800adf8 <SUBGRF_WriteCommand>
        break;
 800a976:	e039      	b.n	800a9ec <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_LORA:
        n = 4;
 800a978:	2304      	movs	r3, #4
 800a97a:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	7e1b      	ldrb	r3, [r3, #24]
 800a980:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	7e5b      	ldrb	r3, [r3, #25]
 800a986:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	7e9b      	ldrb	r3, [r3, #26]
 800a98c:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	7edb      	ldrb	r3, [r3, #27]
 800a992:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800a994:	7cfb      	ldrb	r3, [r7, #19]
 800a996:	b29a      	uxth	r2, r3
 800a998:	f107 0308 	add.w	r3, r7, #8
 800a99c:	4619      	mov	r1, r3
 800a99e:	208b      	movs	r0, #139	; 0x8b
 800a9a0:	f000 fa2a 	bl	800adf8 <SUBGRF_WriteCommand>

        break;
 800a9a4:	e022      	b.n	800a9ec <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_GMSK:
        n = 5;
 800a9a6:	2305      	movs	r3, #5
 800a9a8:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	685b      	ldr	r3, [r3, #4]
 800a9ae:	4a14      	ldr	r2, [pc, #80]	; (800aa00 <SUBGRF_SetModulationParams+0x19c>)
 800a9b0:	fbb2 f3f3 	udiv	r3, r2, r3
 800a9b4:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 800a9b6:	697b      	ldr	r3, [r7, #20]
 800a9b8:	0c1b      	lsrs	r3, r3, #16
 800a9ba:	b2db      	uxtb	r3, r3
 800a9bc:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 800a9be:	697b      	ldr	r3, [r7, #20]
 800a9c0:	0a1b      	lsrs	r3, r3, #8
 800a9c2:	b2db      	uxtb	r3, r3
 800a9c4:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 800a9c6:	697b      	ldr	r3, [r7, #20]
 800a9c8:	b2db      	uxtb	r3, r3
 800a9ca:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	7b1b      	ldrb	r3, [r3, #12]
 800a9d0:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	7b5b      	ldrb	r3, [r3, #13]
 800a9d6:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800a9d8:	7cfb      	ldrb	r3, [r7, #19]
 800a9da:	b29a      	uxth	r2, r3
 800a9dc:	f107 0308 	add.w	r3, r7, #8
 800a9e0:	4619      	mov	r1, r3
 800a9e2:	208b      	movs	r0, #139	; 0x8b
 800a9e4:	f000 fa08 	bl	800adf8 <SUBGRF_WriteCommand>
        break;
 800a9e8:	e000      	b.n	800a9ec <SUBGRF_SetModulationParams+0x188>
    default:
    case PACKET_TYPE_NONE:
      break;
 800a9ea:	bf00      	nop
    }
}
 800a9ec:	bf00      	nop
 800a9ee:	3718      	adds	r7, #24
 800a9f0:	46bd      	mov	sp, r7
 800a9f2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800a9f6:	bf00      	nop
 800a9f8:	0800cb98 	.word	0x0800cb98
 800a9fc:	20000ac1 	.word	0x20000ac1
 800aa00:	3d090000 	.word	0x3d090000
 800aa04:	01e84800 	.word	0x01e84800

0800aa08 <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 800aa08:	b580      	push	{r7, lr}
 800aa0a:	b086      	sub	sp, #24
 800aa0c:	af00      	add	r7, sp, #0
 800aa0e:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 800aa10:	2300      	movs	r3, #0
 800aa12:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 800aa14:	4a48      	ldr	r2, [pc, #288]	; (800ab38 <SUBGRF_SetPacketParams+0x130>)
 800aa16:	f107 030c 	add.w	r3, r7, #12
 800aa1a:	ca07      	ldmia	r2, {r0, r1, r2}
 800aa1c:	c303      	stmia	r3!, {r0, r1}
 800aa1e:	701a      	strb	r2, [r3, #0]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	781a      	ldrb	r2, [r3, #0]
 800aa24:	4b45      	ldr	r3, [pc, #276]	; (800ab3c <SUBGRF_SetPacketParams+0x134>)
 800aa26:	781b      	ldrb	r3, [r3, #0]
 800aa28:	429a      	cmp	r2, r3
 800aa2a:	d004      	beq.n	800aa36 <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	781b      	ldrb	r3, [r3, #0]
 800aa30:	4618      	mov	r0, r3
 800aa32:	f7ff fe23 	bl	800a67c <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	781b      	ldrb	r3, [r3, #0]
 800aa3a:	2b03      	cmp	r3, #3
 800aa3c:	d878      	bhi.n	800ab30 <SUBGRF_SetPacketParams+0x128>
 800aa3e:	a201      	add	r2, pc, #4	; (adr r2, 800aa44 <SUBGRF_SetPacketParams+0x3c>)
 800aa40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa44:	0800aa55 	.word	0x0800aa55
 800aa48:	0800aae5 	.word	0x0800aae5
 800aa4c:	0800aad9 	.word	0x0800aad9
 800aa50:	0800aa55 	.word	0x0800aa55
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	7a5b      	ldrb	r3, [r3, #9]
 800aa58:	2bf1      	cmp	r3, #241	; 0xf1
 800aa5a:	d10a      	bne.n	800aa72 <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 800aa5c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800aa60:	f7ff faaa 	bl	8009fb8 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 800aa64:	f248 0005 	movw	r0, #32773	; 0x8005
 800aa68:	f7ff fac6 	bl	8009ff8 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 800aa6c:	2302      	movs	r3, #2
 800aa6e:	75bb      	strb	r3, [r7, #22]
 800aa70:	e011      	b.n	800aa96 <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	7a5b      	ldrb	r3, [r3, #9]
 800aa76:	2bf2      	cmp	r3, #242	; 0xf2
 800aa78:	d10a      	bne.n	800aa90 <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 800aa7a:	f641 500f 	movw	r0, #7439	; 0x1d0f
 800aa7e:	f7ff fa9b 	bl	8009fb8 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 800aa82:	f241 0021 	movw	r0, #4129	; 0x1021
 800aa86:	f7ff fab7 	bl	8009ff8 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 800aa8a:	2306      	movs	r3, #6
 800aa8c:	75bb      	strb	r3, [r7, #22]
 800aa8e:	e002      	b.n	800aa96 <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	7a5b      	ldrb	r3, [r3, #9]
 800aa94:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 800aa96:	2309      	movs	r3, #9
 800aa98:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	885b      	ldrh	r3, [r3, #2]
 800aa9e:	0a1b      	lsrs	r3, r3, #8
 800aaa0:	b29b      	uxth	r3, r3
 800aaa2:	b2db      	uxtb	r3, r3
 800aaa4:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	885b      	ldrh	r3, [r3, #2]
 800aaaa:	b2db      	uxtb	r3, r3
 800aaac:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	791b      	ldrb	r3, [r3, #4]
 800aab2:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	795b      	ldrb	r3, [r3, #5]
 800aab8:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	799b      	ldrb	r3, [r3, #6]
 800aabe:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	79db      	ldrb	r3, [r3, #7]
 800aac4:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	7a1b      	ldrb	r3, [r3, #8]
 800aaca:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 800aacc:	7dbb      	ldrb	r3, [r7, #22]
 800aace:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	7a9b      	ldrb	r3, [r3, #10]
 800aad4:	753b      	strb	r3, [r7, #20]
        break;
 800aad6:	e022      	b.n	800ab1e <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 800aad8:	2301      	movs	r3, #1
 800aada:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	7b1b      	ldrb	r3, [r3, #12]
 800aae0:	733b      	strb	r3, [r7, #12]
        break;
 800aae2:	e01c      	b.n	800ab1e <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 800aae4:	2306      	movs	r3, #6
 800aae6:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	89db      	ldrh	r3, [r3, #14]
 800aaec:	0a1b      	lsrs	r3, r3, #8
 800aaee:	b29b      	uxth	r3, r3
 800aaf0:	b2db      	uxtb	r3, r3
 800aaf2:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	89db      	ldrh	r3, [r3, #14]
 800aaf8:	b2db      	uxtb	r3, r3
 800aafa:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	7c1a      	ldrb	r2, [r3, #16]
 800ab00:	4b0f      	ldr	r3, [pc, #60]	; (800ab40 <SUBGRF_SetPacketParams+0x138>)
 800ab02:	4611      	mov	r1, r2
 800ab04:	7019      	strb	r1, [r3, #0]
 800ab06:	4613      	mov	r3, r2
 800ab08:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	7c5b      	ldrb	r3, [r3, #17]
 800ab0e:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	7c9b      	ldrb	r3, [r3, #18]
 800ab14:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	7cdb      	ldrb	r3, [r3, #19]
 800ab1a:	747b      	strb	r3, [r7, #17]
        break;
 800ab1c:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 800ab1e:	7dfb      	ldrb	r3, [r7, #23]
 800ab20:	b29a      	uxth	r2, r3
 800ab22:	f107 030c 	add.w	r3, r7, #12
 800ab26:	4619      	mov	r1, r3
 800ab28:	208c      	movs	r0, #140	; 0x8c
 800ab2a:	f000 f965 	bl	800adf8 <SUBGRF_WriteCommand>
 800ab2e:	e000      	b.n	800ab32 <SUBGRF_SetPacketParams+0x12a>
        return;
 800ab30:	bf00      	nop
}
 800ab32:	3718      	adds	r7, #24
 800ab34:	46bd      	mov	sp, r7
 800ab36:	bd80      	pop	{r7, pc}
 800ab38:	0800cba0 	.word	0x0800cba0
 800ab3c:	20000ac1 	.word	0x20000ac1
 800ab40:	20000ac2 	.word	0x20000ac2

0800ab44 <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 800ab44:	b580      	push	{r7, lr}
 800ab46:	b084      	sub	sp, #16
 800ab48:	af00      	add	r7, sp, #0
 800ab4a:	4603      	mov	r3, r0
 800ab4c:	460a      	mov	r2, r1
 800ab4e:	71fb      	strb	r3, [r7, #7]
 800ab50:	4613      	mov	r3, r2
 800ab52:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 800ab54:	79fb      	ldrb	r3, [r7, #7]
 800ab56:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 800ab58:	79bb      	ldrb	r3, [r7, #6]
 800ab5a:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 800ab5c:	f107 030c 	add.w	r3, r7, #12
 800ab60:	2202      	movs	r2, #2
 800ab62:	4619      	mov	r1, r3
 800ab64:	208f      	movs	r0, #143	; 0x8f
 800ab66:	f000 f947 	bl	800adf8 <SUBGRF_WriteCommand>
}
 800ab6a:	bf00      	nop
 800ab6c:	3710      	adds	r7, #16
 800ab6e:	46bd      	mov	sp, r7
 800ab70:	bd80      	pop	{r7, pc}

0800ab72 <SUBGRF_GetRssiInst>:
    status.Fields.ChipMode = ( stat & ( 0x07 << 4 ) ) >> 4;
    return status;
}

int8_t SUBGRF_GetRssiInst( void )
{
 800ab72:	b580      	push	{r7, lr}
 800ab74:	b082      	sub	sp, #8
 800ab76:	af00      	add	r7, sp, #0
    uint8_t buf[1];
    int8_t rssi = 0;
 800ab78:	2300      	movs	r3, #0
 800ab7a:	71fb      	strb	r3, [r7, #7]

    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 800ab7c:	1d3b      	adds	r3, r7, #4
 800ab7e:	2201      	movs	r2, #1
 800ab80:	4619      	mov	r1, r3
 800ab82:	2015      	movs	r0, #21
 800ab84:	f000 f95a 	bl	800ae3c <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 800ab88:	793b      	ldrb	r3, [r7, #4]
 800ab8a:	425b      	negs	r3, r3
 800ab8c:	105b      	asrs	r3, r3, #1
 800ab8e:	71fb      	strb	r3, [r7, #7]
    return rssi;
 800ab90:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 800ab94:	4618      	mov	r0, r3
 800ab96:	3708      	adds	r7, #8
 800ab98:	46bd      	mov	sp, r7
 800ab9a:	bd80      	pop	{r7, pc}

0800ab9c <SUBGRF_GetRxBufferStatus>:

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 800ab9c:	b580      	push	{r7, lr}
 800ab9e:	b084      	sub	sp, #16
 800aba0:	af00      	add	r7, sp, #0
 800aba2:	6078      	str	r0, [r7, #4]
 800aba4:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 800aba6:	f107 030c 	add.w	r3, r7, #12
 800abaa:	2202      	movs	r2, #2
 800abac:	4619      	mov	r1, r3
 800abae:	2013      	movs	r0, #19
 800abb0:	f000 f944 	bl	800ae3c <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 800abb4:	f7ff fd7e 	bl	800a6b4 <SUBGRF_GetPacketType>
 800abb8:	4603      	mov	r3, r0
 800abba:	2b01      	cmp	r3, #1
 800abbc:	d10d      	bne.n	800abda <SUBGRF_GetRxBufferStatus+0x3e>
 800abbe:	4b0c      	ldr	r3, [pc, #48]	; (800abf0 <SUBGRF_GetRxBufferStatus+0x54>)
 800abc0:	781b      	ldrb	r3, [r3, #0]
 800abc2:	b2db      	uxtb	r3, r3
 800abc4:	2b01      	cmp	r3, #1
 800abc6:	d108      	bne.n	800abda <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 800abc8:	f240 7002 	movw	r0, #1794	; 0x702
 800abcc:	f000 f878 	bl	800acc0 <SUBGRF_ReadRegister>
 800abd0:	4603      	mov	r3, r0
 800abd2:	461a      	mov	r2, r3
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	701a      	strb	r2, [r3, #0]
 800abd8:	e002      	b.n	800abe0 <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 800abda:	7b3a      	ldrb	r2, [r7, #12]
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 800abe0:	7b7a      	ldrb	r2, [r7, #13]
 800abe2:	683b      	ldr	r3, [r7, #0]
 800abe4:	701a      	strb	r2, [r3, #0]
}
 800abe6:	bf00      	nop
 800abe8:	3710      	adds	r7, #16
 800abea:	46bd      	mov	sp, r7
 800abec:	bd80      	pop	{r7, pc}
 800abee:	bf00      	nop
 800abf0:	20000ac2 	.word	0x20000ac2

0800abf4 <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 800abf4:	b580      	push	{r7, lr}
 800abf6:	b084      	sub	sp, #16
 800abf8:	af00      	add	r7, sp, #0
 800abfa:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 800abfc:	f107 030c 	add.w	r3, r7, #12
 800ac00:	2203      	movs	r2, #3
 800ac02:	4619      	mov	r1, r3
 800ac04:	2014      	movs	r0, #20
 800ac06:	f000 f919 	bl	800ae3c <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 800ac0a:	f7ff fd53 	bl	800a6b4 <SUBGRF_GetPacketType>
 800ac0e:	4603      	mov	r3, r0
 800ac10:	461a      	mov	r2, r3
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	781b      	ldrb	r3, [r3, #0]
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d002      	beq.n	800ac24 <SUBGRF_GetPacketStatus+0x30>
 800ac1e:	2b01      	cmp	r3, #1
 800ac20:	d013      	beq.n	800ac4a <SUBGRF_GetPacketStatus+0x56>
 800ac22:	e02a      	b.n	800ac7a <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 800ac24:	7b3a      	ldrb	r2, [r7, #12]
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 800ac2a:	7b7b      	ldrb	r3, [r7, #13]
 800ac2c:	425b      	negs	r3, r3
 800ac2e:	105b      	asrs	r3, r3, #1
 800ac30:	b25a      	sxtb	r2, r3
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 800ac36:	7bbb      	ldrb	r3, [r7, #14]
 800ac38:	425b      	negs	r3, r3
 800ac3a:	105b      	asrs	r3, r3, #1
 800ac3c:	b25a      	sxtb	r2, r3
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	2200      	movs	r2, #0
 800ac46:	609a      	str	r2, [r3, #8]
            break;
 800ac48:	e020      	b.n	800ac8c <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 800ac4a:	7b3b      	ldrb	r3, [r7, #12]
 800ac4c:	425b      	negs	r3, r3
 800ac4e:	105b      	asrs	r3, r3, #1
 800ac50:	b25a      	sxtb	r2, r3
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 800ac56:	7b7b      	ldrb	r3, [r7, #13]
 800ac58:	b25b      	sxtb	r3, r3
 800ac5a:	3302      	adds	r3, #2
 800ac5c:	109b      	asrs	r3, r3, #2
 800ac5e:	b25a      	sxtb	r2, r3
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 800ac64:	7bbb      	ldrb	r3, [r7, #14]
 800ac66:	425b      	negs	r3, r3
 800ac68:	105b      	asrs	r3, r3, #1
 800ac6a:	b25a      	sxtb	r2, r3
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 800ac70:	4b08      	ldr	r3, [pc, #32]	; (800ac94 <SUBGRF_GetPacketStatus+0xa0>)
 800ac72:	681a      	ldr	r2, [r3, #0]
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	611a      	str	r2, [r3, #16]
            break;
 800ac78:	e008      	b.n	800ac8c <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 800ac7a:	2214      	movs	r2, #20
 800ac7c:	2100      	movs	r1, #0
 800ac7e:	6878      	ldr	r0, [r7, #4]
 800ac80:	f000 fc93 	bl	800b5aa <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	220f      	movs	r2, #15
 800ac88:	701a      	strb	r2, [r3, #0]
            break;
 800ac8a:	bf00      	nop
    }
}
 800ac8c:	bf00      	nop
 800ac8e:	3710      	adds	r7, #16
 800ac90:	46bd      	mov	sp, r7
 800ac92:	bd80      	pop	{r7, pc}
 800ac94:	20000ac4 	.word	0x20000ac4

0800ac98 <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 800ac98:	b580      	push	{r7, lr}
 800ac9a:	b082      	sub	sp, #8
 800ac9c:	af00      	add	r7, sp, #0
 800ac9e:	4603      	mov	r3, r0
 800aca0:	460a      	mov	r2, r1
 800aca2:	80fb      	strh	r3, [r7, #6]
 800aca4:	4613      	mov	r3, r2
 800aca6:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 800aca8:	1d7a      	adds	r2, r7, #5
 800acaa:	88f9      	ldrh	r1, [r7, #6]
 800acac:	2301      	movs	r3, #1
 800acae:	4803      	ldr	r0, [pc, #12]	; (800acbc <SUBGRF_WriteRegister+0x24>)
 800acb0:	f7fa fdaa 	bl	8005808 <HAL_SUBGHZ_WriteRegisters>
}
 800acb4:	bf00      	nop
 800acb6:	3708      	adds	r7, #8
 800acb8:	46bd      	mov	sp, r7
 800acba:	bd80      	pop	{r7, pc}
 800acbc:	200004cc 	.word	0x200004cc

0800acc0 <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 800acc0:	b580      	push	{r7, lr}
 800acc2:	b084      	sub	sp, #16
 800acc4:	af00      	add	r7, sp, #0
 800acc6:	4603      	mov	r3, r0
 800acc8:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 800acca:	f107 020f 	add.w	r2, r7, #15
 800acce:	88f9      	ldrh	r1, [r7, #6]
 800acd0:	2301      	movs	r3, #1
 800acd2:	4804      	ldr	r0, [pc, #16]	; (800ace4 <SUBGRF_ReadRegister+0x24>)
 800acd4:	f7fa fdf7 	bl	80058c6 <HAL_SUBGHZ_ReadRegisters>
    return data;
 800acd8:	7bfb      	ldrb	r3, [r7, #15]
}
 800acda:	4618      	mov	r0, r3
 800acdc:	3710      	adds	r7, #16
 800acde:	46bd      	mov	sp, r7
 800ace0:	bd80      	pop	{r7, pc}
 800ace2:	bf00      	nop
 800ace4:	200004cc 	.word	0x200004cc

0800ace8 <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 800ace8:	b580      	push	{r7, lr}
 800acea:	b086      	sub	sp, #24
 800acec:	af00      	add	r7, sp, #0
 800acee:	4603      	mov	r3, r0
 800acf0:	6039      	str	r1, [r7, #0]
 800acf2:	80fb      	strh	r3, [r7, #6]
 800acf4:	4613      	mov	r3, r2
 800acf6:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800acf8:	f3ef 8310 	mrs	r3, PRIMASK
 800acfc:	60fb      	str	r3, [r7, #12]
  return(result);
 800acfe:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800ad00:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ad02:	b672      	cpsid	i
}
 800ad04:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 800ad06:	88bb      	ldrh	r3, [r7, #4]
 800ad08:	88f9      	ldrh	r1, [r7, #6]
 800ad0a:	683a      	ldr	r2, [r7, #0]
 800ad0c:	4806      	ldr	r0, [pc, #24]	; (800ad28 <SUBGRF_WriteRegisters+0x40>)
 800ad0e:	f7fa fd7b 	bl	8005808 <HAL_SUBGHZ_WriteRegisters>
 800ad12:	697b      	ldr	r3, [r7, #20]
 800ad14:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ad16:	693b      	ldr	r3, [r7, #16]
 800ad18:	f383 8810 	msr	PRIMASK, r3
}
 800ad1c:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800ad1e:	bf00      	nop
 800ad20:	3718      	adds	r7, #24
 800ad22:	46bd      	mov	sp, r7
 800ad24:	bd80      	pop	{r7, pc}
 800ad26:	bf00      	nop
 800ad28:	200004cc 	.word	0x200004cc

0800ad2c <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 800ad2c:	b580      	push	{r7, lr}
 800ad2e:	b086      	sub	sp, #24
 800ad30:	af00      	add	r7, sp, #0
 800ad32:	4603      	mov	r3, r0
 800ad34:	6039      	str	r1, [r7, #0]
 800ad36:	80fb      	strh	r3, [r7, #6]
 800ad38:	4613      	mov	r3, r2
 800ad3a:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ad3c:	f3ef 8310 	mrs	r3, PRIMASK
 800ad40:	60fb      	str	r3, [r7, #12]
  return(result);
 800ad42:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800ad44:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ad46:	b672      	cpsid	i
}
 800ad48:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 800ad4a:	88bb      	ldrh	r3, [r7, #4]
 800ad4c:	88f9      	ldrh	r1, [r7, #6]
 800ad4e:	683a      	ldr	r2, [r7, #0]
 800ad50:	4806      	ldr	r0, [pc, #24]	; (800ad6c <SUBGRF_ReadRegisters+0x40>)
 800ad52:	f7fa fdb8 	bl	80058c6 <HAL_SUBGHZ_ReadRegisters>
 800ad56:	697b      	ldr	r3, [r7, #20]
 800ad58:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ad5a:	693b      	ldr	r3, [r7, #16]
 800ad5c:	f383 8810 	msr	PRIMASK, r3
}
 800ad60:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800ad62:	bf00      	nop
 800ad64:	3718      	adds	r7, #24
 800ad66:	46bd      	mov	sp, r7
 800ad68:	bd80      	pop	{r7, pc}
 800ad6a:	bf00      	nop
 800ad6c:	200004cc 	.word	0x200004cc

0800ad70 <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 800ad70:	b580      	push	{r7, lr}
 800ad72:	b086      	sub	sp, #24
 800ad74:	af00      	add	r7, sp, #0
 800ad76:	4603      	mov	r3, r0
 800ad78:	6039      	str	r1, [r7, #0]
 800ad7a:	71fb      	strb	r3, [r7, #7]
 800ad7c:	4613      	mov	r3, r2
 800ad7e:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ad80:	f3ef 8310 	mrs	r3, PRIMASK
 800ad84:	60fb      	str	r3, [r7, #12]
  return(result);
 800ad86:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800ad88:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ad8a:	b672      	cpsid	i
}
 800ad8c:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 800ad8e:	79bb      	ldrb	r3, [r7, #6]
 800ad90:	b29b      	uxth	r3, r3
 800ad92:	79f9      	ldrb	r1, [r7, #7]
 800ad94:	683a      	ldr	r2, [r7, #0]
 800ad96:	4806      	ldr	r0, [pc, #24]	; (800adb0 <SUBGRF_WriteBuffer+0x40>)
 800ad98:	f7fa fea9 	bl	8005aee <HAL_SUBGHZ_WriteBuffer>
 800ad9c:	697b      	ldr	r3, [r7, #20]
 800ad9e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ada0:	693b      	ldr	r3, [r7, #16]
 800ada2:	f383 8810 	msr	PRIMASK, r3
}
 800ada6:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800ada8:	bf00      	nop
 800adaa:	3718      	adds	r7, #24
 800adac:	46bd      	mov	sp, r7
 800adae:	bd80      	pop	{r7, pc}
 800adb0:	200004cc 	.word	0x200004cc

0800adb4 <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 800adb4:	b580      	push	{r7, lr}
 800adb6:	b086      	sub	sp, #24
 800adb8:	af00      	add	r7, sp, #0
 800adba:	4603      	mov	r3, r0
 800adbc:	6039      	str	r1, [r7, #0]
 800adbe:	71fb      	strb	r3, [r7, #7]
 800adc0:	4613      	mov	r3, r2
 800adc2:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800adc4:	f3ef 8310 	mrs	r3, PRIMASK
 800adc8:	60fb      	str	r3, [r7, #12]
  return(result);
 800adca:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800adcc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800adce:	b672      	cpsid	i
}
 800add0:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 800add2:	79bb      	ldrb	r3, [r7, #6]
 800add4:	b29b      	uxth	r3, r3
 800add6:	79f9      	ldrb	r1, [r7, #7]
 800add8:	683a      	ldr	r2, [r7, #0]
 800adda:	4806      	ldr	r0, [pc, #24]	; (800adf4 <SUBGRF_ReadBuffer+0x40>)
 800addc:	f7fa feda 	bl	8005b94 <HAL_SUBGHZ_ReadBuffer>
 800ade0:	697b      	ldr	r3, [r7, #20]
 800ade2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ade4:	693b      	ldr	r3, [r7, #16]
 800ade6:	f383 8810 	msr	PRIMASK, r3
}
 800adea:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800adec:	bf00      	nop
 800adee:	3718      	adds	r7, #24
 800adf0:	46bd      	mov	sp, r7
 800adf2:	bd80      	pop	{r7, pc}
 800adf4:	200004cc 	.word	0x200004cc

0800adf8 <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 800adf8:	b580      	push	{r7, lr}
 800adfa:	b086      	sub	sp, #24
 800adfc:	af00      	add	r7, sp, #0
 800adfe:	4603      	mov	r3, r0
 800ae00:	6039      	str	r1, [r7, #0]
 800ae02:	71fb      	strb	r3, [r7, #7]
 800ae04:	4613      	mov	r3, r2
 800ae06:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ae08:	f3ef 8310 	mrs	r3, PRIMASK
 800ae0c:	60fb      	str	r3, [r7, #12]
  return(result);
 800ae0e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800ae10:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ae12:	b672      	cpsid	i
}
 800ae14:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 800ae16:	88bb      	ldrh	r3, [r7, #4]
 800ae18:	79f9      	ldrb	r1, [r7, #7]
 800ae1a:	683a      	ldr	r2, [r7, #0]
 800ae1c:	4806      	ldr	r0, [pc, #24]	; (800ae38 <SUBGRF_WriteCommand+0x40>)
 800ae1e:	f7fa fdb3 	bl	8005988 <HAL_SUBGHZ_ExecSetCmd>
 800ae22:	697b      	ldr	r3, [r7, #20]
 800ae24:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ae26:	693b      	ldr	r3, [r7, #16]
 800ae28:	f383 8810 	msr	PRIMASK, r3
}
 800ae2c:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800ae2e:	bf00      	nop
 800ae30:	3718      	adds	r7, #24
 800ae32:	46bd      	mov	sp, r7
 800ae34:	bd80      	pop	{r7, pc}
 800ae36:	bf00      	nop
 800ae38:	200004cc 	.word	0x200004cc

0800ae3c <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 800ae3c:	b580      	push	{r7, lr}
 800ae3e:	b086      	sub	sp, #24
 800ae40:	af00      	add	r7, sp, #0
 800ae42:	4603      	mov	r3, r0
 800ae44:	6039      	str	r1, [r7, #0]
 800ae46:	71fb      	strb	r3, [r7, #7]
 800ae48:	4613      	mov	r3, r2
 800ae4a:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ae4c:	f3ef 8310 	mrs	r3, PRIMASK
 800ae50:	60fb      	str	r3, [r7, #12]
  return(result);
 800ae52:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800ae54:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ae56:	b672      	cpsid	i
}
 800ae58:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 800ae5a:	88bb      	ldrh	r3, [r7, #4]
 800ae5c:	79f9      	ldrb	r1, [r7, #7]
 800ae5e:	683a      	ldr	r2, [r7, #0]
 800ae60:	4806      	ldr	r0, [pc, #24]	; (800ae7c <SUBGRF_ReadCommand+0x40>)
 800ae62:	f7fa fdf0 	bl	8005a46 <HAL_SUBGHZ_ExecGetCmd>
 800ae66:	697b      	ldr	r3, [r7, #20]
 800ae68:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ae6a:	693b      	ldr	r3, [r7, #16]
 800ae6c:	f383 8810 	msr	PRIMASK, r3
}
 800ae70:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800ae72:	bf00      	nop
 800ae74:	3718      	adds	r7, #24
 800ae76:	46bd      	mov	sp, r7
 800ae78:	bd80      	pop	{r7, pc}
 800ae7a:	bf00      	nop
 800ae7c:	200004cc 	.word	0x200004cc

0800ae80 <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 800ae80:	b580      	push	{r7, lr}
 800ae82:	b084      	sub	sp, #16
 800ae84:	af00      	add	r7, sp, #0
 800ae86:	4603      	mov	r3, r0
 800ae88:	460a      	mov	r2, r1
 800ae8a:	71fb      	strb	r3, [r7, #7]
 800ae8c:	4613      	mov	r3, r2
 800ae8e:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 800ae90:	2301      	movs	r3, #1
 800ae92:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 800ae94:	79bb      	ldrb	r3, [r7, #6]
 800ae96:	2b01      	cmp	r3, #1
 800ae98:	d10d      	bne.n	800aeb6 <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 800ae9a:	79fb      	ldrb	r3, [r7, #7]
 800ae9c:	2b01      	cmp	r3, #1
 800ae9e:	d104      	bne.n	800aeaa <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 800aea0:	2302      	movs	r3, #2
 800aea2:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 800aea4:	2004      	movs	r0, #4
 800aea6:	f000 f8ef 	bl	800b088 <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 800aeaa:	79fb      	ldrb	r3, [r7, #7]
 800aeac:	2b02      	cmp	r3, #2
 800aeae:	d107      	bne.n	800aec0 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 800aeb0:	2303      	movs	r3, #3
 800aeb2:	73fb      	strb	r3, [r7, #15]
 800aeb4:	e004      	b.n	800aec0 <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 800aeb6:	79bb      	ldrb	r3, [r7, #6]
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d101      	bne.n	800aec0 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 800aebc:	2301      	movs	r3, #1
 800aebe:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 800aec0:	7bfb      	ldrb	r3, [r7, #15]
 800aec2:	4618      	mov	r0, r3
 800aec4:	f000 fad2 	bl	800b46c <RBI_ConfigRFSwitch>
}
 800aec8:	bf00      	nop
 800aeca:	3710      	adds	r7, #16
 800aecc:	46bd      	mov	sp, r7
 800aece:	bd80      	pop	{r7, pc}

0800aed0 <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power )
{
 800aed0:	b580      	push	{r7, lr}
 800aed2:	b084      	sub	sp, #16
 800aed4:	af00      	add	r7, sp, #0
 800aed6:	4603      	mov	r3, r0
 800aed8:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 800aeda:	2301      	movs	r3, #1
 800aedc:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 800aede:	f000 fb0f 	bl	800b500 <RBI_GetTxConfig>
 800aee2:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 800aee4:	68bb      	ldr	r3, [r7, #8]
 800aee6:	2b02      	cmp	r3, #2
 800aee8:	d016      	beq.n	800af18 <SUBGRF_SetRfTxPower+0x48>
 800aeea:	68bb      	ldr	r3, [r7, #8]
 800aeec:	2b02      	cmp	r3, #2
 800aeee:	dc16      	bgt.n	800af1e <SUBGRF_SetRfTxPower+0x4e>
 800aef0:	68bb      	ldr	r3, [r7, #8]
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d003      	beq.n	800aefe <SUBGRF_SetRfTxPower+0x2e>
 800aef6:	68bb      	ldr	r3, [r7, #8]
 800aef8:	2b01      	cmp	r3, #1
 800aefa:	d00a      	beq.n	800af12 <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 800aefc:	e00f      	b.n	800af1e <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 800aefe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800af02:	2b0f      	cmp	r3, #15
 800af04:	dd02      	ble.n	800af0c <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 800af06:	2302      	movs	r3, #2
 800af08:	73fb      	strb	r3, [r7, #15]
            break;
 800af0a:	e009      	b.n	800af20 <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 800af0c:	2301      	movs	r3, #1
 800af0e:	73fb      	strb	r3, [r7, #15]
            break;
 800af10:	e006      	b.n	800af20 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 800af12:	2301      	movs	r3, #1
 800af14:	73fb      	strb	r3, [r7, #15]
            break;
 800af16:	e003      	b.n	800af20 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 800af18:	2302      	movs	r3, #2
 800af1a:	73fb      	strb	r3, [r7, #15]
            break;
 800af1c:	e000      	b.n	800af20 <SUBGRF_SetRfTxPower+0x50>
            break;
 800af1e:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 800af20:	f997 1007 	ldrsb.w	r1, [r7, #7]
 800af24:	7bfb      	ldrb	r3, [r7, #15]
 800af26:	2202      	movs	r2, #2
 800af28:	4618      	mov	r0, r3
 800af2a:	f7ff fbcd 	bl	800a6c8 <SUBGRF_SetTxParams>

    return paSelect;
 800af2e:	7bfb      	ldrb	r3, [r7, #15]
}
 800af30:	4618      	mov	r0, r3
 800af32:	3710      	adds	r7, #16
 800af34:	46bd      	mov	sp, r7
 800af36:	bd80      	pop	{r7, pc}

0800af38 <SUBGRF_GetRadioWakeUpTime>:

uint32_t SUBGRF_GetRadioWakeUpTime( void )
{
 800af38:	b480      	push	{r7}
 800af3a:	af00      	add	r7, sp, #0
    return RF_WAKEUP_TIME;
 800af3c:	2301      	movs	r3, #1
}
 800af3e:	4618      	mov	r0, r3
 800af40:	46bd      	mov	sp, r7
 800af42:	bc80      	pop	{r7}
 800af44:	4770      	bx	lr
	...

0800af48 <HAL_SUBGHZ_TxCpltCallback>:

/* HAL_SUBGHz Callbacks definitions */
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800af48:	b580      	push	{r7, lr}
 800af4a:	b082      	sub	sp, #8
 800af4c:	af00      	add	r7, sp, #0
 800af4e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 800af50:	4b03      	ldr	r3, [pc, #12]	; (800af60 <HAL_SUBGHZ_TxCpltCallback+0x18>)
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	2001      	movs	r0, #1
 800af56:	4798      	blx	r3
}
 800af58:	bf00      	nop
 800af5a:	3708      	adds	r7, #8
 800af5c:	46bd      	mov	sp, r7
 800af5e:	bd80      	pop	{r7, pc}
 800af60:	20000acc 	.word	0x20000acc

0800af64 <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800af64:	b580      	push	{r7, lr}
 800af66:	b082      	sub	sp, #8
 800af68:	af00      	add	r7, sp, #0
 800af6a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 800af6c:	4b03      	ldr	r3, [pc, #12]	; (800af7c <HAL_SUBGHZ_RxCpltCallback+0x18>)
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	2002      	movs	r0, #2
 800af72:	4798      	blx	r3
}
 800af74:	bf00      	nop
 800af76:	3708      	adds	r7, #8
 800af78:	46bd      	mov	sp, r7
 800af7a:	bd80      	pop	{r7, pc}
 800af7c:	20000acc 	.word	0x20000acc

0800af80 <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 800af80:	b580      	push	{r7, lr}
 800af82:	b082      	sub	sp, #8
 800af84:	af00      	add	r7, sp, #0
 800af86:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 800af88:	4b03      	ldr	r3, [pc, #12]	; (800af98 <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	2040      	movs	r0, #64	; 0x40
 800af8e:	4798      	blx	r3
}
 800af90:	bf00      	nop
 800af92:	3708      	adds	r7, #8
 800af94:	46bd      	mov	sp, r7
 800af96:	bd80      	pop	{r7, pc}
 800af98:	20000acc 	.word	0x20000acc

0800af9c <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 800af9c:	b580      	push	{r7, lr}
 800af9e:	b082      	sub	sp, #8
 800afa0:	af00      	add	r7, sp, #0
 800afa2:	6078      	str	r0, [r7, #4]
 800afa4:	460b      	mov	r3, r1
 800afa6:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 800afa8:	78fb      	ldrb	r3, [r7, #3]
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d002      	beq.n	800afb4 <HAL_SUBGHZ_CADStatusCallback+0x18>
 800afae:	2b01      	cmp	r3, #1
 800afb0:	d005      	beq.n	800afbe <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 800afb2:	e00a      	b.n	800afca <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 800afb4:	4b07      	ldr	r3, [pc, #28]	; (800afd4 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	2080      	movs	r0, #128	; 0x80
 800afba:	4798      	blx	r3
            break;
 800afbc:	e005      	b.n	800afca <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 800afbe:	4b05      	ldr	r3, [pc, #20]	; (800afd4 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	f44f 7080 	mov.w	r0, #256	; 0x100
 800afc6:	4798      	blx	r3
            break;
 800afc8:	bf00      	nop
    }
}
 800afca:	bf00      	nop
 800afcc:	3708      	adds	r7, #8
 800afce:	46bd      	mov	sp, r7
 800afd0:	bd80      	pop	{r7, pc}
 800afd2:	bf00      	nop
 800afd4:	20000acc 	.word	0x20000acc

0800afd8 <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800afd8:	b580      	push	{r7, lr}
 800afda:	b082      	sub	sp, #8
 800afdc:	af00      	add	r7, sp, #0
 800afde:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 800afe0:	4b04      	ldr	r3, [pc, #16]	; (800aff4 <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	f44f 7000 	mov.w	r0, #512	; 0x200
 800afe8:	4798      	blx	r3
}
 800afea:	bf00      	nop
 800afec:	3708      	adds	r7, #8
 800afee:	46bd      	mov	sp, r7
 800aff0:	bd80      	pop	{r7, pc}
 800aff2:	bf00      	nop
 800aff4:	20000acc 	.word	0x20000acc

0800aff8 <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800aff8:	b580      	push	{r7, lr}
 800affa:	b082      	sub	sp, #8
 800affc:	af00      	add	r7, sp, #0
 800affe:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 800b000:	4b03      	ldr	r3, [pc, #12]	; (800b010 <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	2020      	movs	r0, #32
 800b006:	4798      	blx	r3
}
 800b008:	bf00      	nop
 800b00a:	3708      	adds	r7, #8
 800b00c:	46bd      	mov	sp, r7
 800b00e:	bd80      	pop	{r7, pc}
 800b010:	20000acc 	.word	0x20000acc

0800b014 <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800b014:	b580      	push	{r7, lr}
 800b016:	b082      	sub	sp, #8
 800b018:	af00      	add	r7, sp, #0
 800b01a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 800b01c:	4b03      	ldr	r3, [pc, #12]	; (800b02c <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	2004      	movs	r0, #4
 800b022:	4798      	blx	r3
}
 800b024:	bf00      	nop
 800b026:	3708      	adds	r7, #8
 800b028:	46bd      	mov	sp, r7
 800b02a:	bd80      	pop	{r7, pc}
 800b02c:	20000acc 	.word	0x20000acc

0800b030 <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800b030:	b580      	push	{r7, lr}
 800b032:	b082      	sub	sp, #8
 800b034:	af00      	add	r7, sp, #0
 800b036:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 800b038:	4b03      	ldr	r3, [pc, #12]	; (800b048 <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	2008      	movs	r0, #8
 800b03e:	4798      	blx	r3
}
 800b040:	bf00      	nop
 800b042:	3708      	adds	r7, #8
 800b044:	46bd      	mov	sp, r7
 800b046:	bd80      	pop	{r7, pc}
 800b048:	20000acc 	.word	0x20000acc

0800b04c <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800b04c:	b580      	push	{r7, lr}
 800b04e:	b082      	sub	sp, #8
 800b050:	af00      	add	r7, sp, #0
 800b052:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 800b054:	4b03      	ldr	r3, [pc, #12]	; (800b064 <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	2010      	movs	r0, #16
 800b05a:	4798      	blx	r3
}
 800b05c:	bf00      	nop
 800b05e:	3708      	adds	r7, #8
 800b060:	46bd      	mov	sp, r7
 800b062:	bd80      	pop	{r7, pc}
 800b064:	20000acc 	.word	0x20000acc

0800b068 <HAL_SUBGHZ_LrFhssHopCallback>:

void HAL_SUBGHZ_LrFhssHopCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800b068:	b580      	push	{r7, lr}
 800b06a:	b082      	sub	sp, #8
 800b06c:	af00      	add	r7, sp, #0
 800b06e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
 800b070:	4b04      	ldr	r3, [pc, #16]	; (800b084 <HAL_SUBGHZ_LrFhssHopCallback+0x1c>)
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800b078:	4798      	blx	r3
}
 800b07a:	bf00      	nop
 800b07c:	3708      	adds	r7, #8
 800b07e:	46bd      	mov	sp, r7
 800b080:	bd80      	pop	{r7, pc}
 800b082:	bf00      	nop
 800b084:	20000acc 	.word	0x20000acc

0800b088 <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 800b088:	b580      	push	{r7, lr}
 800b08a:	b084      	sub	sp, #16
 800b08c:	af00      	add	r7, sp, #0
 800b08e:	4603      	mov	r3, r0
 800b090:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 800b092:	f000 fa4b 	bl	800b52c <RBI_IsDCDC>
 800b096:	4603      	mov	r3, r0
 800b098:	2b01      	cmp	r3, #1
 800b09a:	d112      	bne.n	800b0c2 <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 800b09c:	f640 1023 	movw	r0, #2339	; 0x923
 800b0a0:	f7ff fe0e 	bl	800acc0 <SUBGRF_ReadRegister>
 800b0a4:	4603      	mov	r3, r0
 800b0a6:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 800b0a8:	7bfb      	ldrb	r3, [r7, #15]
 800b0aa:	f023 0306 	bic.w	r3, r3, #6
 800b0ae:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 800b0b0:	7bfa      	ldrb	r2, [r7, #15]
 800b0b2:	79fb      	ldrb	r3, [r7, #7]
 800b0b4:	4313      	orrs	r3, r2
 800b0b6:	b2db      	uxtb	r3, r3
 800b0b8:	4619      	mov	r1, r3
 800b0ba:	f640 1023 	movw	r0, #2339	; 0x923
 800b0be:	f7ff fdeb 	bl	800ac98 <SUBGRF_WriteRegister>
  }
}
 800b0c2:	bf00      	nop
 800b0c4:	3710      	adds	r7, #16
 800b0c6:	46bd      	mov	sp, r7
 800b0c8:	bd80      	pop	{r7, pc}
	...

0800b0cc <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
 800b0cc:	b480      	push	{r7}
 800b0ce:	b085      	sub	sp, #20
 800b0d0:	af00      	add	r7, sp, #0
 800b0d2:	6078      	str	r0, [r7, #4]
    uint8_t i;

    if( bandwidth == 0 )
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d101      	bne.n	800b0de <SUBGRF_GetFskBandwidthRegValue+0x12>
    {
        return( 0x1F );
 800b0da:	231f      	movs	r3, #31
 800b0dc:	e016      	b.n	800b10c <SUBGRF_GetFskBandwidthRegValue+0x40>
    }

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 800b0de:	2300      	movs	r3, #0
 800b0e0:	73fb      	strb	r3, [r7, #15]
 800b0e2:	e00f      	b.n	800b104 <SUBGRF_GetFskBandwidthRegValue+0x38>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 800b0e4:	7bfb      	ldrb	r3, [r7, #15]
 800b0e6:	4a0c      	ldr	r2, [pc, #48]	; (800b118 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 800b0e8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b0ec:	687a      	ldr	r2, [r7, #4]
 800b0ee:	429a      	cmp	r2, r3
 800b0f0:	d205      	bcs.n	800b0fe <SUBGRF_GetFskBandwidthRegValue+0x32>
        {
            return FskBandwidths[i].RegValue;
 800b0f2:	7bfb      	ldrb	r3, [r7, #15]
 800b0f4:	4a08      	ldr	r2, [pc, #32]	; (800b118 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 800b0f6:	00db      	lsls	r3, r3, #3
 800b0f8:	4413      	add	r3, r2
 800b0fa:	791b      	ldrb	r3, [r3, #4]
 800b0fc:	e006      	b.n	800b10c <SUBGRF_GetFskBandwidthRegValue+0x40>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 800b0fe:	7bfb      	ldrb	r3, [r7, #15]
 800b100:	3301      	adds	r3, #1
 800b102:	73fb      	strb	r3, [r7, #15]
 800b104:	7bfb      	ldrb	r3, [r7, #15]
 800b106:	2b15      	cmp	r3, #21
 800b108:	d9ec      	bls.n	800b0e4 <SUBGRF_GetFskBandwidthRegValue+0x18>
        }
    }
    // ERROR: Value not found
    while( 1 );
 800b10a:	e7fe      	b.n	800b10a <SUBGRF_GetFskBandwidthRegValue+0x3e>
}
 800b10c:	4618      	mov	r0, r3
 800b10e:	3714      	adds	r7, #20
 800b110:	46bd      	mov	sp, r7
 800b112:	bc80      	pop	{r7}
 800b114:	4770      	bx	lr
 800b116:	bf00      	nop
 800b118:	0800cd30 	.word	0x0800cd30

0800b11c <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 800b11c:	b580      	push	{r7, lr}
 800b11e:	b08a      	sub	sp, #40	; 0x28
 800b120:	af00      	add	r7, sp, #0
 800b122:	6078      	str	r0, [r7, #4]
 800b124:	6039      	str	r1, [r7, #0]
  uint8_t BwMant[] = {4, 8, 10, 12};
 800b126:	4b35      	ldr	r3, [pc, #212]	; (800b1fc <SUBGRF_GetCFO+0xe0>)
 800b128:	60fb      	str	r3, [r7, #12]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSELR ));
 800b12a:	f640 0007 	movw	r0, #2055	; 0x807
 800b12e:	f7ff fdc7 	bl	800acc0 <SUBGRF_ReadRegister>
 800b132:	4603      	mov	r3, r0
 800b134:	77fb      	strb	r3, [r7, #31]
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 800b136:	7ffb      	ldrb	r3, [r7, #31]
 800b138:	08db      	lsrs	r3, r3, #3
 800b13a:	b2db      	uxtb	r3, r3
 800b13c:	f003 0303 	and.w	r3, r3, #3
 800b140:	3328      	adds	r3, #40	; 0x28
 800b142:	443b      	add	r3, r7
 800b144:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 800b148:	77bb      	strb	r3, [r7, #30]
  uint8_t bandwidth_exp = reg & 0x7;
 800b14a:	7ffb      	ldrb	r3, [r7, #31]
 800b14c:	f003 0307 	and.w	r3, r3, #7
 800b150:	777b      	strb	r3, [r7, #29]
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp + 1 )));
 800b152:	7fba      	ldrb	r2, [r7, #30]
 800b154:	7f7b      	ldrb	r3, [r7, #29]
 800b156:	3301      	adds	r3, #1
 800b158:	fa02 f303 	lsl.w	r3, r2, r3
 800b15c:	461a      	mov	r2, r3
 800b15e:	4b28      	ldr	r3, [pc, #160]	; (800b200 <SUBGRF_GetCFO+0xe4>)
 800b160:	fbb3 f3f2 	udiv	r3, r3, r2
 800b164:	61bb      	str	r3, [r7, #24]
  uint32_t cf_osr = cf_fs / bitRate;
 800b166:	69ba      	ldr	r2, [r7, #24]
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b16e:	617b      	str	r3, [r7, #20]
  uint8_t interp = 1;
 800b170:	2301      	movs	r3, #1
 800b172:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 800b176:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b17a:	697a      	ldr	r2, [r7, #20]
 800b17c:	fb02 f303 	mul.w	r3, r2, r3
 800b180:	2b07      	cmp	r3, #7
 800b182:	d802      	bhi.n	800b18a <SUBGRF_GetCFO+0x6e>
  {
    interp = 2;
 800b184:	2302      	movs	r3, #2
 800b186:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  if (cf_osr * interp < 4)
 800b18a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b18e:	697a      	ldr	r2, [r7, #20]
 800b190:	fb02 f303 	mul.w	r3, r2, r3
 800b194:	2b03      	cmp	r3, #3
 800b196:	d802      	bhi.n	800b19e <SUBGRF_GetCFO+0x82>
  {
    interp = 4;
 800b198:	2304      	movs	r3, #4
 800b19a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 800b19e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b1a2:	69bb      	ldr	r3, [r7, #24]
 800b1a4:	fb02 f303 	mul.w	r3, r2, r3
 800b1a8:	613b      	str	r3, [r7, #16]
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_GCFORH ) & 0xF ) << 8;
 800b1aa:	f44f 60d6 	mov.w	r0, #1712	; 0x6b0
 800b1ae:	f7ff fd87 	bl	800acc0 <SUBGRF_ReadRegister>
 800b1b2:	4603      	mov	r3, r0
 800b1b4:	021b      	lsls	r3, r3, #8
 800b1b6:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800b1ba:	623b      	str	r3, [r7, #32]
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_GCFORL );
 800b1bc:	f240 60b1 	movw	r0, #1713	; 0x6b1
 800b1c0:	f7ff fd7e 	bl	800acc0 <SUBGRF_ReadRegister>
 800b1c4:	4603      	mov	r3, r0
 800b1c6:	461a      	mov	r2, r3
 800b1c8:	6a3b      	ldr	r3, [r7, #32]
 800b1ca:	4313      	orrs	r3, r2
 800b1cc:	623b      	str	r3, [r7, #32]
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 800b1ce:	6a3b      	ldr	r3, [r7, #32]
 800b1d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d005      	beq.n	800b1e4 <SUBGRF_GetCFO+0xc8>
  {
    cfo_bin |= 0xFFFFF000;
 800b1d8:	6a3b      	ldr	r3, [r7, #32]
 800b1da:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800b1de:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800b1e2:	623b      	str	r3, [r7, #32]
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 800b1e4:	693b      	ldr	r3, [r7, #16]
 800b1e6:	095b      	lsrs	r3, r3, #5
 800b1e8:	6a3a      	ldr	r2, [r7, #32]
 800b1ea:	fb02 f303 	mul.w	r3, r2, r3
 800b1ee:	11da      	asrs	r2, r3, #7
 800b1f0:	683b      	ldr	r3, [r7, #0]
 800b1f2:	601a      	str	r2, [r3, #0]
}
 800b1f4:	bf00      	nop
 800b1f6:	3728      	adds	r7, #40	; 0x28
 800b1f8:	46bd      	mov	sp, r7
 800b1fa:	bd80      	pop	{r7, pc}
 800b1fc:	0c0a0804 	.word	0x0c0a0804
 800b200:	01e84800 	.word	0x01e84800

0800b204 <RFW_TransmitLongPacket>:
#endif /* RFW_ENABLE == 1 */

/* Exported functions --------------------------------------------------------*/
int32_t RFW_TransmitLongPacket( uint16_t payload_size, uint32_t timeout,
                                void ( *TxLongPacketGetNextChunkCb )( uint8_t **buffer, uint8_t buffer_size ) )
{
 800b204:	b480      	push	{r7}
 800b206:	b087      	sub	sp, #28
 800b208:	af00      	add	r7, sp, #0
 800b20a:	4603      	mov	r3, r0
 800b20c:	60b9      	str	r1, [r7, #8]
 800b20e:	607a      	str	r2, [r7, #4]
 800b210:	81fb      	strh	r3, [r7, #14]
    int32_t status = 0;
 800b212:	2300      	movs	r3, #0
 800b214:	617b      	str	r3, [r7, #20]
        default:
            break;
        }
    }
#else
    status = -1;
 800b216:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b21a:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 800b21c:	697b      	ldr	r3, [r7, #20]
}
 800b21e:	4618      	mov	r0, r3
 800b220:	371c      	adds	r7, #28
 800b222:	46bd      	mov	sp, r7
 800b224:	bc80      	pop	{r7}
 800b226:	4770      	bx	lr

0800b228 <RFW_ReceiveLongPacket>:

int32_t RFW_ReceiveLongPacket( uint8_t boosted_mode, uint32_t timeout,
                               void ( *RxLongPacketStoreChunkCb )( uint8_t *buffer, uint8_t chunk_size ) )
{
 800b228:	b480      	push	{r7}
 800b22a:	b087      	sub	sp, #28
 800b22c:	af00      	add	r7, sp, #0
 800b22e:	4603      	mov	r3, r0
 800b230:	60b9      	str	r1, [r7, #8]
 800b232:	607a      	str	r2, [r7, #4]
 800b234:	73fb      	strb	r3, [r7, #15]
    int32_t status = 0;
 800b236:	2300      	movs	r3, #0
 800b238:	617b      	str	r3, [r7, #20]
        {
            SUBGRF_SetRx( 0xFFFFFF ); /* Rx Continuous */
        }
    }
#else
    status = -1;
 800b23a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b23e:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 800b240:	697b      	ldr	r3, [r7, #20]
}
 800b242:	4618      	mov	r0, r3
 800b244:	371c      	adds	r7, #28
 800b246:	46bd      	mov	sp, r7
 800b248:	bc80      	pop	{r7}
 800b24a:	4770      	bx	lr

0800b24c <RFW_Init>:

int32_t RFW_Init( ConfigGeneric_t *config, RadioEvents_t *RadioEvents, TimerEvent_t *TimeoutTimerEvent )
{
 800b24c:	b480      	push	{r7}
 800b24e:	b085      	sub	sp, #20
 800b250:	af00      	add	r7, sp, #0
 800b252:	60f8      	str	r0, [r7, #12]
 800b254:	60b9      	str	r1, [r7, #8]
 800b256:	607a      	str	r2, [r7, #4]
    RFWPacket.Init.Enable = 1;
    /* Initialize Timer for end of fixed packet, started at sync*/
    TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
    return 0;
#else
    return -1;
 800b258:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
#endif /* RFW_ENABLE == 1 */
}
 800b25c:	4618      	mov	r0, r3
 800b25e:	3714      	adds	r7, #20
 800b260:	46bd      	mov	sp, r7
 800b262:	bc80      	pop	{r7}
 800b264:	4770      	bx	lr

0800b266 <RFW_DeInit>:

void RFW_DeInit( void )
{
 800b266:	b480      	push	{r7}
 800b268:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Enable = 0; /*Disable the RFWPacket decoding*/
#endif /* RFW_ENABLE == 1 */
}
 800b26a:	bf00      	nop
 800b26c:	46bd      	mov	sp, r7
 800b26e:	bc80      	pop	{r7}
 800b270:	4770      	bx	lr

0800b272 <RFW_Is_Init>:

uint8_t RFW_Is_Init( void )
{
 800b272:	b480      	push	{r7}
 800b274:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.Init.Enable;
#else
    return 0;
 800b276:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 800b278:	4618      	mov	r0, r3
 800b27a:	46bd      	mov	sp, r7
 800b27c:	bc80      	pop	{r7}
 800b27e:	4770      	bx	lr

0800b280 <RFW_Is_LongPacketModeEnabled>:

uint8_t RFW_Is_LongPacketModeEnabled( void )
{
 800b280:	b480      	push	{r7}
 800b282:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.LongPacketModeEnable;
#else
    return 0;
 800b284:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 800b286:	4618      	mov	r0, r3
 800b288:	46bd      	mov	sp, r7
 800b28a:	bc80      	pop	{r7}
 800b28c:	4770      	bx	lr

0800b28e <RFW_SetAntSwitch>:

void RFW_SetAntSwitch( uint8_t AntSwitch )
{
 800b28e:	b480      	push	{r7}
 800b290:	b083      	sub	sp, #12
 800b292:	af00      	add	r7, sp, #0
 800b294:	4603      	mov	r3, r0
 800b296:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.AntSwitchPaSelect = AntSwitch;
#endif /* RFW_ENABLE == 1 */
}
 800b298:	bf00      	nop
 800b29a:	370c      	adds	r7, #12
 800b29c:	46bd      	mov	sp, r7
 800b29e:	bc80      	pop	{r7}
 800b2a0:	4770      	bx	lr

0800b2a2 <RFW_TransmitInit>:

int32_t RFW_TransmitInit( uint8_t *inOutBuffer, uint8_t size, uint8_t *outSize )
{
 800b2a2:	b480      	push	{r7}
 800b2a4:	b087      	sub	sp, #28
 800b2a6:	af00      	add	r7, sp, #0
 800b2a8:	60f8      	str	r0, [r7, #12]
 800b2aa:	460b      	mov	r3, r1
 800b2ac:	607a      	str	r2, [r7, #4]
 800b2ae:	72fb      	strb	r3, [r7, #11]
    int32_t status = -1;
 800b2b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b2b4:	617b      	str	r3, [r7, #20]
        RFWPacket.LongPacketModeEnable = 0;

        status = 0;
    }
#endif /* RFW_ENABLE == 1 */
    return status;
 800b2b6:	697b      	ldr	r3, [r7, #20]
}
 800b2b8:	4618      	mov	r0, r3
 800b2ba:	371c      	adds	r7, #28
 800b2bc:	46bd      	mov	sp, r7
 800b2be:	bc80      	pop	{r7}
 800b2c0:	4770      	bx	lr

0800b2c2 <RFW_ReceiveInit>:

int32_t RFW_ReceiveInit( void )
{
 800b2c2:	b480      	push	{r7}
 800b2c4:	af00      	add	r7, sp, #0
    RFWPacket.RxPayloadOffset = 0;

    RFWPacket.LongPacketModeEnable = 0;
    return 0;
#else
    return -1;
 800b2c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
#endif /* RFW_ENABLE == 1 */
}
 800b2ca:	4618      	mov	r0, r3
 800b2cc:	46bd      	mov	sp, r7
 800b2ce:	bc80      	pop	{r7}
 800b2d0:	4770      	bx	lr

0800b2d2 <RFW_DeInit_TxLongPacket>:

void RFW_DeInit_TxLongPacket( void )
{
 800b2d2:	b480      	push	{r7}
 800b2d4:	af00      	add	r7, sp, #0
    /*long packet WA*/
    uint8_t reg = SUBGRF_ReadRegister( SUBGHZ_GPKTCTL1AR );
    SUBGRF_WriteRegister( SUBGHZ_GPKTCTL1AR, reg & ~0x02 ); /* clear infinite_sequence bit */
    SUBGRF_WriteRegister( SUBGHZ_GRTXPLDLEN, 0xFF ); /* RxTxPldLen: reset to 0xFF */
#endif /* RFW_LONGPACKET_ENABLE == 1 */
}
 800b2d6:	bf00      	nop
 800b2d8:	46bd      	mov	sp, r7
 800b2da:	bc80      	pop	{r7}
 800b2dc:	4770      	bx	lr

0800b2de <RFW_ReceivePayload>:

void RFW_ReceivePayload( void )
{
 800b2de:	b480      	push	{r7}
 800b2e0:	af00      	add	r7, sp, #0
        /*timeout*/
        SUBGRF_SetStandby( STDBY_RC );
        RFWPacket.Init.RadioEvents->RxTimeout( );
    }
#endif /* RFW_ENABLE == 1 */
}
 800b2e2:	bf00      	nop
 800b2e4:	46bd      	mov	sp, r7
 800b2e6:	bc80      	pop	{r7}
 800b2e8:	4770      	bx	lr

0800b2ea <RFW_SetRadioModem>:

void RFW_SetRadioModem( RadioModems_t Modem )
{
 800b2ea:	b480      	push	{r7}
 800b2ec:	b083      	sub	sp, #12
 800b2ee:	af00      	add	r7, sp, #0
 800b2f0:	4603      	mov	r3, r0
 800b2f2:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Modem = Modem;
#endif /* RFW_ENABLE == 1 */
}
 800b2f4:	bf00      	nop
 800b2f6:	370c      	adds	r7, #12
 800b2f8:	46bd      	mov	sp, r7
 800b2fa:	bc80      	pop	{r7}
 800b2fc:	4770      	bx	lr

0800b2fe <MX_SubGHz_Phy_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_SubGHz_Phy_Init(void)
{
 800b2fe:	b580      	push	{r7, lr}
 800b300:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_1 */

  /* USER CODE END MX_SubGHz_Phy_Init_1 */
  SystemApp_Init();
 800b302:	f7f7 fb1e 	bl	8002942 <SystemApp_Init>
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_1_1 */

  /* USER CODE END MX_SubGHz_Phy_Init_1_1 */
  SubghzApp_Init();
 800b306:	f000 f809 	bl	800b31c <SubghzApp_Init>
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_2 */

  /* USER CODE END MX_SubGHz_Phy_Init_2 */
}
 800b30a:	bf00      	nop
 800b30c:	bd80      	pop	{r7, pc}

0800b30e <MX_SubGHz_Phy_Process>:

void MX_SubGHz_Phy_Process(void)
{
 800b30e:	b480      	push	{r7}
 800b310:	af00      	add	r7, sp, #0

  /* USER CODE END MX_SubGHz_Phy_Process_1 */
  /* USER CODE BEGIN MX_SubGHz_Phy_Process_OS */

  /* USER CODE END MX_SubGHz_Phy_Process_OS */
}
 800b312:	bf00      	nop
 800b314:	46bd      	mov	sp, r7
 800b316:	bc80      	pop	{r7}
 800b318:	4770      	bx	lr
	...

0800b31c <SubghzApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SubghzApp_Init(void)
{
 800b31c:	b580      	push	{r7, lr}
 800b31e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SubghzApp_Init_1 */

  /* USER CODE END SubghzApp_Init_1 */

  /* Radio initialization */
  RadioEvents.TxDone = OnTxDone;
 800b320:	4b0a      	ldr	r3, [pc, #40]	; (800b34c <SubghzApp_Init+0x30>)
 800b322:	4a0b      	ldr	r2, [pc, #44]	; (800b350 <SubghzApp_Init+0x34>)
 800b324:	601a      	str	r2, [r3, #0]
  RadioEvents.RxDone = OnRxDone;
 800b326:	4b09      	ldr	r3, [pc, #36]	; (800b34c <SubghzApp_Init+0x30>)
 800b328:	4a0a      	ldr	r2, [pc, #40]	; (800b354 <SubghzApp_Init+0x38>)
 800b32a:	609a      	str	r2, [r3, #8]
  RadioEvents.TxTimeout = OnTxTimeout;
 800b32c:	4b07      	ldr	r3, [pc, #28]	; (800b34c <SubghzApp_Init+0x30>)
 800b32e:	4a0a      	ldr	r2, [pc, #40]	; (800b358 <SubghzApp_Init+0x3c>)
 800b330:	605a      	str	r2, [r3, #4]
  RadioEvents.RxTimeout = OnRxTimeout;
 800b332:	4b06      	ldr	r3, [pc, #24]	; (800b34c <SubghzApp_Init+0x30>)
 800b334:	4a09      	ldr	r2, [pc, #36]	; (800b35c <SubghzApp_Init+0x40>)
 800b336:	60da      	str	r2, [r3, #12]
  RadioEvents.RxError = OnRxError;
 800b338:	4b04      	ldr	r3, [pc, #16]	; (800b34c <SubghzApp_Init+0x30>)
 800b33a:	4a09      	ldr	r2, [pc, #36]	; (800b360 <SubghzApp_Init+0x44>)
 800b33c:	611a      	str	r2, [r3, #16]

  Radio.Init(&RadioEvents);
 800b33e:	4b09      	ldr	r3, [pc, #36]	; (800b364 <SubghzApp_Init+0x48>)
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	4802      	ldr	r0, [pc, #8]	; (800b34c <SubghzApp_Init+0x30>)
 800b344:	4798      	blx	r3

  /* USER CODE BEGIN SubghzApp_Init_2 */

  /* USER CODE END SubghzApp_Init_2 */
}
 800b346:	bf00      	nop
 800b348:	bd80      	pop	{r7, pc}
 800b34a:	bf00      	nop
 800b34c:	20000ad0 	.word	0x20000ad0
 800b350:	0800b369 	.word	0x0800b369
 800b354:	0800b375 	.word	0x0800b375
 800b358:	0800b399 	.word	0x0800b399
 800b35c:	0800b3a5 	.word	0x0800b3a5
 800b360:	0800b3b1 	.word	0x0800b3b1
 800b364:	0800cca0 	.word	0x0800cca0

0800b368 <OnTxDone>:

/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/
static void OnTxDone(void)
{
 800b368:	b480      	push	{r7}
 800b36a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnTxDone */
  /* USER CODE END OnTxDone */
}
 800b36c:	bf00      	nop
 800b36e:	46bd      	mov	sp, r7
 800b370:	bc80      	pop	{r7}
 800b372:	4770      	bx	lr

0800b374 <OnRxDone>:

static void OnRxDone(uint8_t *payload, uint16_t size, int16_t rssi, int8_t LoraSnr_FskCfo)
{
 800b374:	b480      	push	{r7}
 800b376:	b085      	sub	sp, #20
 800b378:	af00      	add	r7, sp, #0
 800b37a:	60f8      	str	r0, [r7, #12]
 800b37c:	4608      	mov	r0, r1
 800b37e:	4611      	mov	r1, r2
 800b380:	461a      	mov	r2, r3
 800b382:	4603      	mov	r3, r0
 800b384:	817b      	strh	r3, [r7, #10]
 800b386:	460b      	mov	r3, r1
 800b388:	813b      	strh	r3, [r7, #8]
 800b38a:	4613      	mov	r3, r2
 800b38c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnRxDone */
  /* USER CODE END OnRxDone */
}
 800b38e:	bf00      	nop
 800b390:	3714      	adds	r7, #20
 800b392:	46bd      	mov	sp, r7
 800b394:	bc80      	pop	{r7}
 800b396:	4770      	bx	lr

0800b398 <OnTxTimeout>:

static void OnTxTimeout(void)
{
 800b398:	b480      	push	{r7}
 800b39a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnTxTimeout */
  /* USER CODE END OnTxTimeout */
}
 800b39c:	bf00      	nop
 800b39e:	46bd      	mov	sp, r7
 800b3a0:	bc80      	pop	{r7}
 800b3a2:	4770      	bx	lr

0800b3a4 <OnRxTimeout>:

static void OnRxTimeout(void)
{
 800b3a4:	b480      	push	{r7}
 800b3a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnRxTimeout */
  /* USER CODE END OnRxTimeout */
}
 800b3a8:	bf00      	nop
 800b3aa:	46bd      	mov	sp, r7
 800b3ac:	bc80      	pop	{r7}
 800b3ae:	4770      	bx	lr

0800b3b0 <OnRxError>:

static void OnRxError(void)
{
 800b3b0:	b480      	push	{r7}
 800b3b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnRxError */
  /* USER CODE END OnRxError */
}
 800b3b4:	bf00      	nop
 800b3b6:	46bd      	mov	sp, r7
 800b3b8:	bc80      	pop	{r7}
 800b3ba:	4770      	bx	lr

0800b3bc <LL_AHB2_GRP1_EnableClock>:
{
 800b3bc:	b480      	push	{r7}
 800b3be:	b085      	sub	sp, #20
 800b3c0:	af00      	add	r7, sp, #0
 800b3c2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800b3c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b3c8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b3ca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	4313      	orrs	r3, r2
 800b3d2:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800b3d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b3d8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	4013      	ands	r3, r2
 800b3de:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800b3e0:	68fb      	ldr	r3, [r7, #12]
}
 800b3e2:	bf00      	nop
 800b3e4:	3714      	adds	r7, #20
 800b3e6:	46bd      	mov	sp, r7
 800b3e8:	bc80      	pop	{r7}
 800b3ea:	4770      	bx	lr

0800b3ec <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 800b3ec:	b580      	push	{r7, lr}
 800b3ee:	b086      	sub	sp, #24
 800b3f0:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
#else
  /* 2/ Or implement RBI_Init here */
  int32_t retcode = 0;
 800b3f2:	2300      	movs	r3, #0
 800b3f4:	617b      	str	r3, [r7, #20]
  /* USER CODE BEGIN RBI_Init_2 */
	GPIO_InitTypeDef gpio_init_structure = { 0 };
 800b3f6:	463b      	mov	r3, r7
 800b3f8:	2200      	movs	r2, #0
 800b3fa:	601a      	str	r2, [r3, #0]
 800b3fc:	605a      	str	r2, [r3, #4]
 800b3fe:	609a      	str	r2, [r3, #8]
 800b400:	60da      	str	r2, [r3, #12]
 800b402:	611a      	str	r2, [r3, #16]

	/* Enable the Radio Switch Clock */
	RF_SW_CTRL3_GPIO_CLK_ENABLE();
 800b404:	2004      	movs	r0, #4
 800b406:	f7ff ffd9 	bl	800b3bc <LL_AHB2_GRP1_EnableClock>

	/* Configure the Radio Switch pin */
	gpio_init_structure.Pin = RF_SW_CTRL1_PIN;
 800b40a:	2310      	movs	r3, #16
 800b40c:	603b      	str	r3, [r7, #0]
	gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 800b40e:	2301      	movs	r3, #1
 800b410:	607b      	str	r3, [r7, #4]
	gpio_init_structure.Pull = GPIO_NOPULL;
 800b412:	2300      	movs	r3, #0
 800b414:	60bb      	str	r3, [r7, #8]
	gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b416:	2303      	movs	r3, #3
 800b418:	60fb      	str	r3, [r7, #12]

	HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 800b41a:	463b      	mov	r3, r7
 800b41c:	4619      	mov	r1, r3
 800b41e:	4812      	ldr	r0, [pc, #72]	; (800b468 <RBI_Init+0x7c>)
 800b420:	f7f8 fc4e 	bl	8003cc0 <HAL_GPIO_Init>

	gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 800b424:	2320      	movs	r3, #32
 800b426:	603b      	str	r3, [r7, #0]
	HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 800b428:	463b      	mov	r3, r7
 800b42a:	4619      	mov	r1, r3
 800b42c:	480e      	ldr	r0, [pc, #56]	; (800b468 <RBI_Init+0x7c>)
 800b42e:	f7f8 fc47 	bl	8003cc0 <HAL_GPIO_Init>

	gpio_init_structure.Pin = RF_SW_CTRL3_PIN;
 800b432:	2308      	movs	r3, #8
 800b434:	603b      	str	r3, [r7, #0]
	HAL_GPIO_Init(RF_SW_CTRL3_GPIO_PORT, &gpio_init_structure);
 800b436:	463b      	mov	r3, r7
 800b438:	4619      	mov	r1, r3
 800b43a:	480b      	ldr	r0, [pc, #44]	; (800b468 <RBI_Init+0x7c>)
 800b43c:	f7f8 fc40 	bl	8003cc0 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 800b440:	2200      	movs	r2, #0
 800b442:	2120      	movs	r1, #32
 800b444:	4808      	ldr	r0, [pc, #32]	; (800b468 <RBI_Init+0x7c>)
 800b446:	f7f8 fd9b 	bl	8003f80 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 800b44a:	2200      	movs	r2, #0
 800b44c:	2110      	movs	r1, #16
 800b44e:	4806      	ldr	r0, [pc, #24]	; (800b468 <RBI_Init+0x7c>)
 800b450:	f7f8 fd96 	bl	8003f80 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET);
 800b454:	2200      	movs	r2, #0
 800b456:	2108      	movs	r1, #8
 800b458:	4803      	ldr	r0, [pc, #12]	; (800b468 <RBI_Init+0x7c>)
 800b45a:	f7f8 fd91 	bl	8003f80 <HAL_GPIO_WritePin>
  /* USER CODE END RBI_Init_2 */
  return retcode;
 800b45e:	697b      	ldr	r3, [r7, #20]
#endif  /* USE_BSP_DRIVER  */
}
 800b460:	4618      	mov	r0, r3
 800b462:	3718      	adds	r7, #24
 800b464:	46bd      	mov	sp, r7
 800b466:	bd80      	pop	{r7, pc}
 800b468:	48000800 	.word	0x48000800

0800b46c <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 800b46c:	b580      	push	{r7, lr}
 800b46e:	b084      	sub	sp, #16
 800b470:	af00      	add	r7, sp, #0
 800b472:	4603      	mov	r3, r0
 800b474:	71fb      	strb	r3, [r7, #7]
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
#else
  /* 2/ Or implement RBI_ConfigRFSwitch here */
  int32_t retcode = 0;
 800b476:	2300      	movs	r3, #0
 800b478:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */

	switch (Config) {
 800b47a:	79fb      	ldrb	r3, [r7, #7]
 800b47c:	2b03      	cmp	r3, #3
 800b47e:	d837      	bhi.n	800b4f0 <RBI_ConfigRFSwitch+0x84>
 800b480:	a201      	add	r2, pc, #4	; (adr r2, 800b488 <RBI_ConfigRFSwitch+0x1c>)
 800b482:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b486:	bf00      	nop
 800b488:	0800b499 	.word	0x0800b499
 800b48c:	0800b4af 	.word	0x0800b4af
 800b490:	0800b4c5 	.word	0x0800b4c5
 800b494:	0800b4db 	.word	0x0800b4db
	case RADIO_SWITCH_OFF: {
		/* Turn off switch */
		//		HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN,
		//				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET);
 800b498:	2201      	movs	r2, #1
 800b49a:	2110      	movs	r1, #16
 800b49c:	4817      	ldr	r0, [pc, #92]	; (800b4fc <RBI_ConfigRFSwitch+0x90>)
 800b49e:	f7f8 fd6f 	bl	8003f80 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET);
 800b4a2:	2201      	movs	r2, #1
 800b4a4:	2120      	movs	r1, #32
 800b4a6:	4815      	ldr	r0, [pc, #84]	; (800b4fc <RBI_ConfigRFSwitch+0x90>)
 800b4a8:	f7f8 fd6a 	bl	8003f80 <HAL_GPIO_WritePin>
		break;
 800b4ac:	e021      	b.n	800b4f2 <RBI_ConfigRFSwitch+0x86>
	}
	case RADIO_SWITCH_RX: {
		/*Turns On in Rx Mode the RF Switch */
		//		HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
		HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN,
 800b4ae:	2200      	movs	r2, #0
 800b4b0:	2110      	movs	r1, #16
 800b4b2:	4812      	ldr	r0, [pc, #72]	; (800b4fc <RBI_ConfigRFSwitch+0x90>)
 800b4b4:	f7f8 fd64 	bl	8003f80 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN,
 800b4b8:	2200      	movs	r2, #0
 800b4ba:	2120      	movs	r1, #32
 800b4bc:	480f      	ldr	r0, [pc, #60]	; (800b4fc <RBI_ConfigRFSwitch+0x90>)
 800b4be:	f7f8 fd5f 	bl	8003f80 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		break;
 800b4c2:	e016      	b.n	800b4f2 <RBI_ConfigRFSwitch+0x86>
	}
	case RADIO_SWITCH_RFO_LP: {
		/*Turns On in Tx Low Power the RF Switch */
		//		HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
		HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN,
 800b4c4:	2200      	movs	r2, #0
 800b4c6:	2110      	movs	r1, #16
 800b4c8:	480c      	ldr	r0, [pc, #48]	; (800b4fc <RBI_ConfigRFSwitch+0x90>)
 800b4ca:	f7f8 fd59 	bl	8003f80 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET);
 800b4ce:	2201      	movs	r2, #1
 800b4d0:	2120      	movs	r1, #32
 800b4d2:	480a      	ldr	r0, [pc, #40]	; (800b4fc <RBI_ConfigRFSwitch+0x90>)
 800b4d4:	f7f8 fd54 	bl	8003f80 <HAL_GPIO_WritePin>
		break;
 800b4d8:	e00b      	b.n	800b4f2 <RBI_ConfigRFSwitch+0x86>
	}
	case RADIO_SWITCH_RFO_HP: {
		/*Turns On in Tx High Power the RF Switch */
		//		HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
		HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN,
 800b4da:	2200      	movs	r2, #0
 800b4dc:	2110      	movs	r1, #16
 800b4de:	4807      	ldr	r0, [pc, #28]	; (800b4fc <RBI_ConfigRFSwitch+0x90>)
 800b4e0:	f7f8 fd4e 	bl	8003f80 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET);
 800b4e4:	2201      	movs	r2, #1
 800b4e6:	2120      	movs	r1, #32
 800b4e8:	4804      	ldr	r0, [pc, #16]	; (800b4fc <RBI_ConfigRFSwitch+0x90>)
 800b4ea:	f7f8 fd49 	bl	8003f80 <HAL_GPIO_WritePin>
		break;
 800b4ee:	e000      	b.n	800b4f2 <RBI_ConfigRFSwitch+0x86>
	}
	default:
		break;
 800b4f0:	bf00      	nop
//	default:
//		break;
//	}

  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
 800b4f2:	68fb      	ldr	r3, [r7, #12]
#endif  /* USE_BSP_DRIVER */
}
 800b4f4:	4618      	mov	r0, r3
 800b4f6:	3710      	adds	r7, #16
 800b4f8:	46bd      	mov	sp, r7
 800b4fa:	bd80      	pop	{r7, pc}
 800b4fc:	48000800 	.word	0x48000800

0800b500 <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 800b500:	b480      	push	{r7}
 800b502:	b083      	sub	sp, #12
 800b504:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
#else
  /* 2/ Or implement RBI_GetTxConfig here */
  int32_t retcode = RBI_CONF_RFO;
 800b506:	2300      	movs	r3, #0
 800b508:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
	return RADIO_CONF_RFO_LP_HP;
 800b50a:	2300      	movs	r3, #0
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800b50c:	4618      	mov	r0, r3
 800b50e:	370c      	adds	r7, #12
 800b510:	46bd      	mov	sp, r7
 800b512:	bc80      	pop	{r7}
 800b514:	4770      	bx	lr

0800b516 <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 800b516:	b480      	push	{r7}
 800b518:	b083      	sub	sp, #12
 800b51a:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
#else
  /* 2/ Or implement RBI_IsTCXO here */
  int32_t retcode = IS_TCXO_SUPPORTED;
 800b51c:	2301      	movs	r3, #1
 800b51e:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_IsTCXO_2 */
	return IS_TCXO_SUPPORTED;
 800b520:	2301      	movs	r3, #1
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800b522:	4618      	mov	r0, r3
 800b524:	370c      	adds	r7, #12
 800b526:	46bd      	mov	sp, r7
 800b528:	bc80      	pop	{r7}
 800b52a:	4770      	bx	lr

0800b52c <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 800b52c:	b480      	push	{r7}
 800b52e:	b083      	sub	sp, #12
 800b530:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
#else
  /* 2/ Or implement RBI_IsDCDC here */
  int32_t retcode = IS_DCDC_SUPPORTED;
 800b532:	2301      	movs	r3, #1
 800b534:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_IsDCDC_2 */
	return IS_DCDC_SUPPORTED;
 800b536:	2301      	movs	r3, #1
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800b538:	4618      	mov	r0, r3
 800b53a:	370c      	adds	r7, #12
 800b53c:	46bd      	mov	sp, r7
 800b53e:	bc80      	pop	{r7}
 800b540:	4770      	bx	lr

0800b542 <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 800b542:	b480      	push	{r7}
 800b544:	b085      	sub	sp, #20
 800b546:	af00      	add	r7, sp, #0
 800b548:	4603      	mov	r3, r0
 800b54a:	71fb      	strb	r3, [r7, #7]
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
#else
  /* 2/ Or implement RBI_RBI_GetRFOMaxPowerConfig here */
  int32_t ret = 0;
 800b54c:	2300      	movs	r3, #0
 800b54e:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN RBI_GetRFOMaxPowerConfig_2 */
// #warning user to provide its board code or to call his board driver functions
	if (Config == RBI_RFO_LP_MAXPOWER) {
 800b550:	79fb      	ldrb	r3, [r7, #7]
 800b552:	2b00      	cmp	r3, #0
 800b554:	d102      	bne.n	800b55c <RBI_GetRFOMaxPowerConfig+0x1a>
		ret = 15; /*dBm*/
 800b556:	230f      	movs	r3, #15
 800b558:	60fb      	str	r3, [r7, #12]
 800b55a:	e001      	b.n	800b560 <RBI_GetRFOMaxPowerConfig+0x1e>
	} else {
		ret = 22; /*dBm*/
 800b55c:	2316      	movs	r3, #22
 800b55e:	60fb      	str	r3, [r7, #12]
	}
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
 800b560:	68fb      	ldr	r3, [r7, #12]
#endif  /* USE_BSP_DRIVER  */
}
 800b562:	4618      	mov	r0, r3
 800b564:	3714      	adds	r7, #20
 800b566:	46bd      	mov	sp, r7
 800b568:	bc80      	pop	{r7}
 800b56a:	4770      	bx	lr

0800b56c <UTIL_MEM_cpy_8>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
 800b56c:	b480      	push	{r7}
 800b56e:	b087      	sub	sp, #28
 800b570:	af00      	add	r7, sp, #0
 800b572:	60f8      	str	r0, [r7, #12]
 800b574:	60b9      	str	r1, [r7, #8]
 800b576:	4613      	mov	r3, r2
 800b578:	80fb      	strh	r3, [r7, #6]
  uint8_t* dst8= (uint8_t *) dst;
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	617b      	str	r3, [r7, #20]
  uint8_t* src8= (uint8_t *) src;
 800b57e:	68bb      	ldr	r3, [r7, #8]
 800b580:	613b      	str	r3, [r7, #16]

  while( size-- )
 800b582:	e007      	b.n	800b594 <UTIL_MEM_cpy_8+0x28>
    {
        *dst8++ = *src8++;
 800b584:	693a      	ldr	r2, [r7, #16]
 800b586:	1c53      	adds	r3, r2, #1
 800b588:	613b      	str	r3, [r7, #16]
 800b58a:	697b      	ldr	r3, [r7, #20]
 800b58c:	1c59      	adds	r1, r3, #1
 800b58e:	6179      	str	r1, [r7, #20]
 800b590:	7812      	ldrb	r2, [r2, #0]
 800b592:	701a      	strb	r2, [r3, #0]
  while( size-- )
 800b594:	88fb      	ldrh	r3, [r7, #6]
 800b596:	1e5a      	subs	r2, r3, #1
 800b598:	80fa      	strh	r2, [r7, #6]
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d1f2      	bne.n	800b584 <UTIL_MEM_cpy_8+0x18>
    }
}
 800b59e:	bf00      	nop
 800b5a0:	bf00      	nop
 800b5a2:	371c      	adds	r7, #28
 800b5a4:	46bd      	mov	sp, r7
 800b5a6:	bc80      	pop	{r7}
 800b5a8:	4770      	bx	lr

0800b5aa <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 800b5aa:	b480      	push	{r7}
 800b5ac:	b085      	sub	sp, #20
 800b5ae:	af00      	add	r7, sp, #0
 800b5b0:	6078      	str	r0, [r7, #4]
 800b5b2:	460b      	mov	r3, r1
 800b5b4:	70fb      	strb	r3, [r7, #3]
 800b5b6:	4613      	mov	r3, r2
 800b5b8:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	60fb      	str	r3, [r7, #12]
  while( size-- )
 800b5be:	e004      	b.n	800b5ca <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	1c5a      	adds	r2, r3, #1
 800b5c4:	60fa      	str	r2, [r7, #12]
 800b5c6:	78fa      	ldrb	r2, [r7, #3]
 800b5c8:	701a      	strb	r2, [r3, #0]
  while( size-- )
 800b5ca:	883b      	ldrh	r3, [r7, #0]
 800b5cc:	1e5a      	subs	r2, r3, #1
 800b5ce:	803a      	strh	r2, [r7, #0]
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d1f5      	bne.n	800b5c0 <UTIL_MEM_set_8+0x16>
  }
}
 800b5d4:	bf00      	nop
 800b5d6:	bf00      	nop
 800b5d8:	3714      	adds	r7, #20
 800b5da:	46bd      	mov	sp, r7
 800b5dc:	bc80      	pop	{r7}
 800b5de:	4770      	bx	lr

0800b5e0 <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 800b5e0:	b580      	push	{r7, lr}
 800b5e2:	b084      	sub	sp, #16
 800b5e4:	af00      	add	r7, sp, #0
 800b5e6:	60f8      	str	r0, [r7, #12]
 800b5e8:	60b9      	str	r1, [r7, #8]
 800b5ea:	603b      	str	r3, [r7, #0]
 800b5ec:	4613      	mov	r3, r2
 800b5ee:	71fb      	strb	r3, [r7, #7]
  if((TimerObject != NULL) && (Callback != NULL))
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d023      	beq.n	800b63e <UTIL_TIMER_Create+0x5e>
 800b5f6:	683b      	ldr	r3, [r7, #0]
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d020      	beq.n	800b63e <UTIL_TIMER_Create+0x5e>
  {
    TimerObject->Timestamp = 0U;
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	2200      	movs	r2, #0
 800b600:	601a      	str	r2, [r3, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 800b602:	4b11      	ldr	r3, [pc, #68]	; (800b648 <UTIL_TIMER_Create+0x68>)
 800b604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b606:	68b8      	ldr	r0, [r7, #8]
 800b608:	4798      	blx	r3
 800b60a:	4602      	mov	r2, r0
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	605a      	str	r2, [r3, #4]
    TimerObject->IsPending = 0U;
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	2200      	movs	r2, #0
 800b614:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 0U;
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	2200      	movs	r2, #0
 800b61a:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	2200      	movs	r2, #0
 800b620:	729a      	strb	r2, [r3, #10]
    TimerObject->Callback = Callback;
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	683a      	ldr	r2, [r7, #0]
 800b626:	60da      	str	r2, [r3, #12]
    TimerObject->argument = Argument;
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	69ba      	ldr	r2, [r7, #24]
 800b62c:	611a      	str	r2, [r3, #16]
    TimerObject->Mode = Mode;
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	79fa      	ldrb	r2, [r7, #7]
 800b632:	72da      	strb	r2, [r3, #11]
    TimerObject->Next = NULL;
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	2200      	movs	r2, #0
 800b638:	615a      	str	r2, [r3, #20]
    return UTIL_TIMER_OK;
 800b63a:	2300      	movs	r3, #0
 800b63c:	e000      	b.n	800b640 <UTIL_TIMER_Create+0x60>
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 800b63e:	2301      	movs	r3, #1
  }
}
 800b640:	4618      	mov	r0, r3
 800b642:	3710      	adds	r7, #16
 800b644:	46bd      	mov	sp, r7
 800b646:	bd80      	pop	{r7, pc}
 800b648:	0800cc4c 	.word	0x0800cc4c

0800b64c <UTIL_TIMER_Start>:

UTIL_TIMER_Status_t UTIL_TIMER_Start( UTIL_TIMER_Object_t *TimerObject)
{
 800b64c:	b580      	push	{r7, lr}
 800b64e:	b08a      	sub	sp, #40	; 0x28
 800b650:	af00      	add	r7, sp, #0
 800b652:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 800b654:	2300      	movs	r3, #0
 800b656:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t elapsedTime;
  uint32_t minValue;
  uint32_t ticks;
    
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d056      	beq.n	800b70e <UTIL_TIMER_Start+0xc2>
 800b660:	6878      	ldr	r0, [r7, #4]
 800b662:	f000 f929 	bl	800b8b8 <TimerExists>
 800b666:	4603      	mov	r3, r0
 800b668:	f083 0301 	eor.w	r3, r3, #1
 800b66c:	b2db      	uxtb	r3, r3
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d04d      	beq.n	800b70e <UTIL_TIMER_Start+0xc2>
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	7a5b      	ldrb	r3, [r3, #9]
 800b676:	2b00      	cmp	r3, #0
 800b678:	d149      	bne.n	800b70e <UTIL_TIMER_Start+0xc2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b67a:	f3ef 8310 	mrs	r3, PRIMASK
 800b67e:	613b      	str	r3, [r7, #16]
  return(result);
 800b680:	693b      	ldr	r3, [r7, #16]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 800b682:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800b684:	b672      	cpsid	i
}
 800b686:	bf00      	nop
    ticks = TimerObject->ReloadValue;
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	685b      	ldr	r3, [r3, #4]
 800b68c:	623b      	str	r3, [r7, #32]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 800b68e:	4b24      	ldr	r3, [pc, #144]	; (800b720 <UTIL_TIMER_Start+0xd4>)
 800b690:	6a1b      	ldr	r3, [r3, #32]
 800b692:	4798      	blx	r3
 800b694:	61b8      	str	r0, [r7, #24]
    
    if( ticks < minValue )
 800b696:	6a3a      	ldr	r2, [r7, #32]
 800b698:	69bb      	ldr	r3, [r7, #24]
 800b69a:	429a      	cmp	r2, r3
 800b69c:	d201      	bcs.n	800b6a2 <UTIL_TIMER_Start+0x56>
    {
      ticks = minValue;
 800b69e:	69bb      	ldr	r3, [r7, #24]
 800b6a0:	623b      	str	r3, [r7, #32]
    }
    
    TimerObject->Timestamp = ticks;
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	6a3a      	ldr	r2, [r7, #32]
 800b6a6:	601a      	str	r2, [r3, #0]
    TimerObject->IsPending = 0U;
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	2200      	movs	r2, #0
 800b6ac:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 1U;
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	2201      	movs	r2, #1
 800b6b2:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	2200      	movs	r2, #0
 800b6b8:	729a      	strb	r2, [r3, #10]
    if( TimerListHead == NULL )
 800b6ba:	4b1a      	ldr	r3, [pc, #104]	; (800b724 <UTIL_TIMER_Start+0xd8>)
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d106      	bne.n	800b6d0 <UTIL_TIMER_Start+0x84>
    {
      UTIL_TimerDriver.SetTimerContext();
 800b6c2:	4b17      	ldr	r3, [pc, #92]	; (800b720 <UTIL_TIMER_Start+0xd4>)
 800b6c4:	691b      	ldr	r3, [r3, #16]
 800b6c6:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 800b6c8:	6878      	ldr	r0, [r7, #4]
 800b6ca:	f000 f96b 	bl	800b9a4 <TimerInsertNewHeadTimer>
 800b6ce:	e017      	b.n	800b700 <UTIL_TIMER_Start+0xb4>
    }
    else 
    {
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 800b6d0:	4b13      	ldr	r3, [pc, #76]	; (800b720 <UTIL_TIMER_Start+0xd4>)
 800b6d2:	699b      	ldr	r3, [r3, #24]
 800b6d4:	4798      	blx	r3
 800b6d6:	6178      	str	r0, [r7, #20]
      TimerObject->Timestamp += elapsedTime;
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	681a      	ldr	r2, [r3, #0]
 800b6dc:	697b      	ldr	r3, [r7, #20]
 800b6de:	441a      	add	r2, r3
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	601a      	str	r2, [r3, #0]
      
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	681a      	ldr	r2, [r3, #0]
 800b6e8:	4b0e      	ldr	r3, [pc, #56]	; (800b724 <UTIL_TIMER_Start+0xd8>)
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	429a      	cmp	r2, r3
 800b6f0:	d203      	bcs.n	800b6fa <UTIL_TIMER_Start+0xae>
      {
        TimerInsertNewHeadTimer( TimerObject);
 800b6f2:	6878      	ldr	r0, [r7, #4]
 800b6f4:	f000 f956 	bl	800b9a4 <TimerInsertNewHeadTimer>
 800b6f8:	e002      	b.n	800b700 <UTIL_TIMER_Start+0xb4>
      }
      else
      {
        TimerInsertTimer( TimerObject);
 800b6fa:	6878      	ldr	r0, [r7, #4]
 800b6fc:	f000 f922 	bl	800b944 <TimerInsertTimer>
 800b700:	69fb      	ldr	r3, [r7, #28]
 800b702:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	f383 8810 	msr	PRIMASK, r3
}
 800b70a:	bf00      	nop
  {
 800b70c:	e002      	b.n	800b714 <UTIL_TIMER_Start+0xc8>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret =  UTIL_TIMER_INVALID_PARAM;
 800b70e:	2301      	movs	r3, #1
 800b710:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return ret;
 800b714:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800b718:	4618      	mov	r0, r3
 800b71a:	3728      	adds	r7, #40	; 0x28
 800b71c:	46bd      	mov	sp, r7
 800b71e:	bd80      	pop	{r7, pc}
 800b720:	0800cc4c 	.word	0x0800cc4c
 800b724:	20000aec 	.word	0x20000aec

0800b728 <UTIL_TIMER_Stop>:
  }
  return ret;
}

UTIL_TIMER_Status_t UTIL_TIMER_Stop( UTIL_TIMER_Object_t *TimerObject )
{
 800b728:	b580      	push	{r7, lr}
 800b72a:	b088      	sub	sp, #32
 800b72c:	af00      	add	r7, sp, #0
 800b72e:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 800b730:	2300      	movs	r3, #0
 800b732:	77fb      	strb	r3, [r7, #31]

  if (NULL != TimerObject)
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	2b00      	cmp	r3, #0
 800b738:	d05b      	beq.n	800b7f2 <UTIL_TIMER_Stop+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b73a:	f3ef 8310 	mrs	r3, PRIMASK
 800b73e:	60fb      	str	r3, [r7, #12]
  return(result);
 800b740:	68fb      	ldr	r3, [r7, #12]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 800b742:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800b744:	b672      	cpsid	i
}
 800b746:	bf00      	nop
    UTIL_TIMER_Object_t* prev = TimerListHead;
 800b748:	4b2d      	ldr	r3, [pc, #180]	; (800b800 <UTIL_TIMER_Stop+0xd8>)
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	61bb      	str	r3, [r7, #24]
    UTIL_TIMER_Object_t* cur = TimerListHead;
 800b74e:	4b2c      	ldr	r3, [pc, #176]	; (800b800 <UTIL_TIMER_Stop+0xd8>)
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	617b      	str	r3, [r7, #20]
    TimerObject->IsReloadStopped = 1U;
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	2201      	movs	r2, #1
 800b758:	729a      	strb	r2, [r3, #10]
    
    /* List is empty or the Obj to stop does not exist  */
    if(NULL != TimerListHead)
 800b75a:	4b29      	ldr	r3, [pc, #164]	; (800b800 <UTIL_TIMER_Stop+0xd8>)
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d041      	beq.n	800b7e6 <UTIL_TIMER_Stop+0xbe>
    {
      TimerObject->IsRunning = 0U;
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	2200      	movs	r2, #0
 800b766:	725a      	strb	r2, [r3, #9]
      
      if( TimerListHead == TimerObject ) /* Stop the Head */
 800b768:	4b25      	ldr	r3, [pc, #148]	; (800b800 <UTIL_TIMER_Stop+0xd8>)
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	687a      	ldr	r2, [r7, #4]
 800b76e:	429a      	cmp	r2, r3
 800b770:	d134      	bne.n	800b7dc <UTIL_TIMER_Stop+0xb4>
      {
          TimerListHead->IsPending = 0;
 800b772:	4b23      	ldr	r3, [pc, #140]	; (800b800 <UTIL_TIMER_Stop+0xd8>)
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	2200      	movs	r2, #0
 800b778:	721a      	strb	r2, [r3, #8]
          if( TimerListHead->Next != NULL )
 800b77a:	4b21      	ldr	r3, [pc, #132]	; (800b800 <UTIL_TIMER_Stop+0xd8>)
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	695b      	ldr	r3, [r3, #20]
 800b780:	2b00      	cmp	r3, #0
 800b782:	d00a      	beq.n	800b79a <UTIL_TIMER_Stop+0x72>
          {
            TimerListHead = TimerListHead->Next;
 800b784:	4b1e      	ldr	r3, [pc, #120]	; (800b800 <UTIL_TIMER_Stop+0xd8>)
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	695b      	ldr	r3, [r3, #20]
 800b78a:	4a1d      	ldr	r2, [pc, #116]	; (800b800 <UTIL_TIMER_Stop+0xd8>)
 800b78c:	6013      	str	r3, [r2, #0]
            TimerSetTimeout( TimerListHead );
 800b78e:	4b1c      	ldr	r3, [pc, #112]	; (800b800 <UTIL_TIMER_Stop+0xd8>)
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	4618      	mov	r0, r3
 800b794:	f000 f8ac 	bl	800b8f0 <TimerSetTimeout>
 800b798:	e023      	b.n	800b7e2 <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            UTIL_TimerDriver.StopTimerEvt( );
 800b79a:	4b1a      	ldr	r3, [pc, #104]	; (800b804 <UTIL_TIMER_Stop+0xdc>)
 800b79c:	68db      	ldr	r3, [r3, #12]
 800b79e:	4798      	blx	r3
            TimerListHead = NULL;
 800b7a0:	4b17      	ldr	r3, [pc, #92]	; (800b800 <UTIL_TIMER_Stop+0xd8>)
 800b7a2:	2200      	movs	r2, #0
 800b7a4:	601a      	str	r2, [r3, #0]
 800b7a6:	e01c      	b.n	800b7e2 <UTIL_TIMER_Stop+0xba>
      }
      else /* Stop an object within the list */
      {      
        while( cur != NULL )
        {
          if( cur == TimerObject )
 800b7a8:	697a      	ldr	r2, [r7, #20]
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	429a      	cmp	r2, r3
 800b7ae:	d110      	bne.n	800b7d2 <UTIL_TIMER_Stop+0xaa>
          {
            if( cur->Next != NULL )
 800b7b0:	697b      	ldr	r3, [r7, #20]
 800b7b2:	695b      	ldr	r3, [r3, #20]
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d006      	beq.n	800b7c6 <UTIL_TIMER_Stop+0x9e>
            {
              cur = cur->Next;
 800b7b8:	697b      	ldr	r3, [r7, #20]
 800b7ba:	695b      	ldr	r3, [r3, #20]
 800b7bc:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 800b7be:	69bb      	ldr	r3, [r7, #24]
 800b7c0:	697a      	ldr	r2, [r7, #20]
 800b7c2:	615a      	str	r2, [r3, #20]
            else
            {
              cur = NULL;
              prev->Next = cur;
            }
            break;
 800b7c4:	e00d      	b.n	800b7e2 <UTIL_TIMER_Stop+0xba>
              cur = NULL;
 800b7c6:	2300      	movs	r3, #0
 800b7c8:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 800b7ca:	69bb      	ldr	r3, [r7, #24]
 800b7cc:	697a      	ldr	r2, [r7, #20]
 800b7ce:	615a      	str	r2, [r3, #20]
            break;
 800b7d0:	e007      	b.n	800b7e2 <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            prev = cur;
 800b7d2:	697b      	ldr	r3, [r7, #20]
 800b7d4:	61bb      	str	r3, [r7, #24]
            cur = cur->Next;
 800b7d6:	697b      	ldr	r3, [r7, #20]
 800b7d8:	695b      	ldr	r3, [r3, #20]
 800b7da:	617b      	str	r3, [r7, #20]
        while( cur != NULL )
 800b7dc:	697b      	ldr	r3, [r7, #20]
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d1e2      	bne.n	800b7a8 <UTIL_TIMER_Stop+0x80>
          }
        }   
      }
      ret = UTIL_TIMER_OK;
 800b7e2:	2300      	movs	r3, #0
 800b7e4:	77fb      	strb	r3, [r7, #31]
 800b7e6:	693b      	ldr	r3, [r7, #16]
 800b7e8:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b7ea:	68bb      	ldr	r3, [r7, #8]
 800b7ec:	f383 8810 	msr	PRIMASK, r3
}
 800b7f0:	e001      	b.n	800b7f6 <UTIL_TIMER_Stop+0xce>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret = UTIL_TIMER_INVALID_PARAM;
 800b7f2:	2301      	movs	r3, #1
 800b7f4:	77fb      	strb	r3, [r7, #31]
  }
  return ret;
 800b7f6:	7ffb      	ldrb	r3, [r7, #31]
}
 800b7f8:	4618      	mov	r0, r3
 800b7fa:	3720      	adds	r7, #32
 800b7fc:	46bd      	mov	sp, r7
 800b7fe:	bd80      	pop	{r7, pc}
 800b800:	20000aec 	.word	0x20000aec
 800b804:	0800cc4c 	.word	0x0800cc4c

0800b808 <UTIL_TIMER_SetPeriod>:

UTIL_TIMER_Status_t UTIL_TIMER_SetPeriod(UTIL_TIMER_Object_t *TimerObject, uint32_t NewPeriodValue)
{
 800b808:	b580      	push	{r7, lr}
 800b80a:	b084      	sub	sp, #16
 800b80c:	af00      	add	r7, sp, #0
 800b80e:	6078      	str	r0, [r7, #4]
 800b810:	6039      	str	r1, [r7, #0]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 800b812:	2300      	movs	r3, #0
 800b814:	73fb      	strb	r3, [r7, #15]
  
  if(NULL == TimerObject)
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d102      	bne.n	800b822 <UTIL_TIMER_SetPeriod+0x1a>
  {
	  ret = UTIL_TIMER_INVALID_PARAM;
 800b81c:	2301      	movs	r3, #1
 800b81e:	73fb      	strb	r3, [r7, #15]
 800b820:	e014      	b.n	800b84c <UTIL_TIMER_SetPeriod+0x44>
  }
  else
  {
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 800b822:	4b0d      	ldr	r3, [pc, #52]	; (800b858 <UTIL_TIMER_SetPeriod+0x50>)
 800b824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b826:	6838      	ldr	r0, [r7, #0]
 800b828:	4798      	blx	r3
 800b82a:	4602      	mov	r2, r0
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	605a      	str	r2, [r3, #4]
    if(TimerExists(TimerObject))
 800b830:	6878      	ldr	r0, [r7, #4]
 800b832:	f000 f841 	bl	800b8b8 <TimerExists>
 800b836:	4603      	mov	r3, r0
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d007      	beq.n	800b84c <UTIL_TIMER_SetPeriod+0x44>
    {
      (void)UTIL_TIMER_Stop(TimerObject);
 800b83c:	6878      	ldr	r0, [r7, #4]
 800b83e:	f7ff ff73 	bl	800b728 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 800b842:	6878      	ldr	r0, [r7, #4]
 800b844:	f7ff ff02 	bl	800b64c <UTIL_TIMER_Start>
 800b848:	4603      	mov	r3, r0
 800b84a:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 800b84c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b84e:	4618      	mov	r0, r3
 800b850:	3710      	adds	r7, #16
 800b852:	46bd      	mov	sp, r7
 800b854:	bd80      	pop	{r7, pc}
 800b856:	bf00      	nop
 800b858:	0800cc4c 	.word	0x0800cc4c

0800b85c <UTIL_TIMER_GetCurrentTime>:
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 800b85c:	b580      	push	{r7, lr}
 800b85e:	b082      	sub	sp, #8
 800b860:	af00      	add	r7, sp, #0
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 800b862:	4b06      	ldr	r3, [pc, #24]	; (800b87c <UTIL_TIMER_GetCurrentTime+0x20>)
 800b864:	69db      	ldr	r3, [r3, #28]
 800b866:	4798      	blx	r3
 800b868:	6078      	str	r0, [r7, #4]
  return  UTIL_TimerDriver.Tick2ms(now);
 800b86a:	4b04      	ldr	r3, [pc, #16]	; (800b87c <UTIL_TIMER_GetCurrentTime+0x20>)
 800b86c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b86e:	6878      	ldr	r0, [r7, #4]
 800b870:	4798      	blx	r3
 800b872:	4603      	mov	r3, r0
}
 800b874:	4618      	mov	r0, r3
 800b876:	3708      	adds	r7, #8
 800b878:	46bd      	mov	sp, r7
 800b87a:	bd80      	pop	{r7, pc}
 800b87c:	0800cc4c 	.word	0x0800cc4c

0800b880 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 800b880:	b580      	push	{r7, lr}
 800b882:	b084      	sub	sp, #16
 800b884:	af00      	add	r7, sp, #0
 800b886:	6078      	str	r0, [r7, #4]
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 800b888:	4b0a      	ldr	r3, [pc, #40]	; (800b8b4 <UTIL_TIMER_GetElapsedTime+0x34>)
 800b88a:	69db      	ldr	r3, [r3, #28]
 800b88c:	4798      	blx	r3
 800b88e:	60f8      	str	r0, [r7, #12]
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 800b890:	4b08      	ldr	r3, [pc, #32]	; (800b8b4 <UTIL_TIMER_GetElapsedTime+0x34>)
 800b892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b894:	6878      	ldr	r0, [r7, #4]
 800b896:	4798      	blx	r3
 800b898:	60b8      	str	r0, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 800b89a:	4b06      	ldr	r3, [pc, #24]	; (800b8b4 <UTIL_TIMER_GetElapsedTime+0x34>)
 800b89c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b89e:	68f9      	ldr	r1, [r7, #12]
 800b8a0:	68ba      	ldr	r2, [r7, #8]
 800b8a2:	1a8a      	subs	r2, r1, r2
 800b8a4:	4610      	mov	r0, r2
 800b8a6:	4798      	blx	r3
 800b8a8:	4603      	mov	r3, r0
}
 800b8aa:	4618      	mov	r0, r3
 800b8ac:	3710      	adds	r7, #16
 800b8ae:	46bd      	mov	sp, r7
 800b8b0:	bd80      	pop	{r7, pc}
 800b8b2:	bf00      	nop
 800b8b4:	0800cc4c 	.word	0x0800cc4c

0800b8b8 <TimerExists>:
 *
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
 800b8b8:	b480      	push	{r7}
 800b8ba:	b085      	sub	sp, #20
 800b8bc:	af00      	add	r7, sp, #0
 800b8be:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800b8c0:	4b0a      	ldr	r3, [pc, #40]	; (800b8ec <TimerExists+0x34>)
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 800b8c6:	e008      	b.n	800b8da <TimerExists+0x22>
  {
    if( cur == TimerObject )
 800b8c8:	68fa      	ldr	r2, [r7, #12]
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	429a      	cmp	r2, r3
 800b8ce:	d101      	bne.n	800b8d4 <TimerExists+0x1c>
    {
      return true;
 800b8d0:	2301      	movs	r3, #1
 800b8d2:	e006      	b.n	800b8e2 <TimerExists+0x2a>
    }
    cur = cur->Next;
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	695b      	ldr	r3, [r3, #20]
 800b8d8:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d1f3      	bne.n	800b8c8 <TimerExists+0x10>
  }
  return false;
 800b8e0:	2300      	movs	r3, #0
}
 800b8e2:	4618      	mov	r0, r3
 800b8e4:	3714      	adds	r7, #20
 800b8e6:	46bd      	mov	sp, r7
 800b8e8:	bc80      	pop	{r7}
 800b8ea:	4770      	bx	lr
 800b8ec:	20000aec 	.word	0x20000aec

0800b8f0 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 800b8f0:	b590      	push	{r4, r7, lr}
 800b8f2:	b085      	sub	sp, #20
 800b8f4:	af00      	add	r7, sp, #0
 800b8f6:	6078      	str	r0, [r7, #4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 800b8f8:	4b11      	ldr	r3, [pc, #68]	; (800b940 <TimerSetTimeout+0x50>)
 800b8fa:	6a1b      	ldr	r3, [r3, #32]
 800b8fc:	4798      	blx	r3
 800b8fe:	60f8      	str	r0, [r7, #12]
  TimerObject->IsPending = 1;
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	2201      	movs	r2, #1
 800b904:	721a      	strb	r2, [r3, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	681c      	ldr	r4, [r3, #0]
 800b90a:	4b0d      	ldr	r3, [pc, #52]	; (800b940 <TimerSetTimeout+0x50>)
 800b90c:	699b      	ldr	r3, [r3, #24]
 800b90e:	4798      	blx	r3
 800b910:	4602      	mov	r2, r0
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	4413      	add	r3, r2
 800b916:	429c      	cmp	r4, r3
 800b918:	d207      	bcs.n	800b92a <TimerSetTimeout+0x3a>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 800b91a:	4b09      	ldr	r3, [pc, #36]	; (800b940 <TimerSetTimeout+0x50>)
 800b91c:	699b      	ldr	r3, [r3, #24]
 800b91e:	4798      	blx	r3
 800b920:	4602      	mov	r2, r0
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	441a      	add	r2, r3
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	601a      	str	r2, [r3, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 800b92a:	4b05      	ldr	r3, [pc, #20]	; (800b940 <TimerSetTimeout+0x50>)
 800b92c:	689b      	ldr	r3, [r3, #8]
 800b92e:	687a      	ldr	r2, [r7, #4]
 800b930:	6812      	ldr	r2, [r2, #0]
 800b932:	4610      	mov	r0, r2
 800b934:	4798      	blx	r3
}
 800b936:	bf00      	nop
 800b938:	3714      	adds	r7, #20
 800b93a:	46bd      	mov	sp, r7
 800b93c:	bd90      	pop	{r4, r7, pc}
 800b93e:	bf00      	nop
 800b940:	0800cc4c 	.word	0x0800cc4c

0800b944 <TimerInsertTimer>:
 *     next timer to expire.
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
 800b944:	b480      	push	{r7}
 800b946:	b085      	sub	sp, #20
 800b948:	af00      	add	r7, sp, #0
 800b94a:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800b94c:	4b14      	ldr	r3, [pc, #80]	; (800b9a0 <TimerInsertTimer+0x5c>)
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	60fb      	str	r3, [r7, #12]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 800b952:	4b13      	ldr	r3, [pc, #76]	; (800b9a0 <TimerInsertTimer+0x5c>)
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	695b      	ldr	r3, [r3, #20]
 800b958:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 800b95a:	e012      	b.n	800b982 <TimerInsertTimer+0x3e>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	681a      	ldr	r2, [r3, #0]
 800b960:	68bb      	ldr	r3, [r7, #8]
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	429a      	cmp	r2, r3
 800b966:	d905      	bls.n	800b974 <TimerInsertTimer+0x30>
    {
        cur = next;
 800b968:	68bb      	ldr	r3, [r7, #8]
 800b96a:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 800b96c:	68bb      	ldr	r3, [r7, #8]
 800b96e:	695b      	ldr	r3, [r3, #20]
 800b970:	60bb      	str	r3, [r7, #8]
 800b972:	e006      	b.n	800b982 <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = TimerObject;
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	687a      	ldr	r2, [r7, #4]
 800b978:	615a      	str	r2, [r3, #20]
        TimerObject->Next = next;
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	68ba      	ldr	r2, [r7, #8]
 800b97e:	615a      	str	r2, [r3, #20]
        return;
 800b980:	e009      	b.n	800b996 <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	695b      	ldr	r3, [r3, #20]
 800b986:	2b00      	cmp	r3, #0
 800b988:	d1e8      	bne.n	800b95c <TimerInsertTimer+0x18>

    }
  }
  cur->Next = TimerObject;
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	687a      	ldr	r2, [r7, #4]
 800b98e:	615a      	str	r2, [r3, #20]
  TimerObject->Next = NULL;
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	2200      	movs	r2, #0
 800b994:	615a      	str	r2, [r3, #20]
}
 800b996:	3714      	adds	r7, #20
 800b998:	46bd      	mov	sp, r7
 800b99a:	bc80      	pop	{r7}
 800b99c:	4770      	bx	lr
 800b99e:	bf00      	nop
 800b9a0:	20000aec 	.word	0x20000aec

0800b9a4 <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 800b9a4:	b580      	push	{r7, lr}
 800b9a6:	b084      	sub	sp, #16
 800b9a8:	af00      	add	r7, sp, #0
 800b9aa:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800b9ac:	4b0b      	ldr	r3, [pc, #44]	; (800b9dc <TimerInsertNewHeadTimer+0x38>)
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 800b9b2:	68fb      	ldr	r3, [r7, #12]
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d002      	beq.n	800b9be <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsPending = 0;
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	2200      	movs	r2, #0
 800b9bc:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	68fa      	ldr	r2, [r7, #12]
 800b9c2:	615a      	str	r2, [r3, #20]
  TimerListHead = TimerObject;
 800b9c4:	4a05      	ldr	r2, [pc, #20]	; (800b9dc <TimerInsertNewHeadTimer+0x38>)
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	6013      	str	r3, [r2, #0]
  TimerSetTimeout( TimerListHead );
 800b9ca:	4b04      	ldr	r3, [pc, #16]	; (800b9dc <TimerInsertNewHeadTimer+0x38>)
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	4618      	mov	r0, r3
 800b9d0:	f7ff ff8e 	bl	800b8f0 <TimerSetTimeout>
}
 800b9d4:	bf00      	nop
 800b9d6:	3710      	adds	r7, #16
 800b9d8:	46bd      	mov	sp, r7
 800b9da:	bd80      	pop	{r7, pc}
 800b9dc:	20000aec 	.word	0x20000aec

0800b9e0 <_vsniprintf_r>:
 800b9e0:	b530      	push	{r4, r5, lr}
 800b9e2:	4614      	mov	r4, r2
 800b9e4:	2c00      	cmp	r4, #0
 800b9e6:	b09b      	sub	sp, #108	; 0x6c
 800b9e8:	4605      	mov	r5, r0
 800b9ea:	461a      	mov	r2, r3
 800b9ec:	da05      	bge.n	800b9fa <_vsniprintf_r+0x1a>
 800b9ee:	238b      	movs	r3, #139	; 0x8b
 800b9f0:	6003      	str	r3, [r0, #0]
 800b9f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b9f6:	b01b      	add	sp, #108	; 0x6c
 800b9f8:	bd30      	pop	{r4, r5, pc}
 800b9fa:	f44f 7302 	mov.w	r3, #520	; 0x208
 800b9fe:	f8ad 300c 	strh.w	r3, [sp, #12]
 800ba02:	bf14      	ite	ne
 800ba04:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800ba08:	4623      	moveq	r3, r4
 800ba0a:	9302      	str	r3, [sp, #8]
 800ba0c:	9305      	str	r3, [sp, #20]
 800ba0e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ba12:	9100      	str	r1, [sp, #0]
 800ba14:	9104      	str	r1, [sp, #16]
 800ba16:	f8ad 300e 	strh.w	r3, [sp, #14]
 800ba1a:	4669      	mov	r1, sp
 800ba1c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800ba1e:	f000 f8b5 	bl	800bb8c <_svfiprintf_r>
 800ba22:	1c43      	adds	r3, r0, #1
 800ba24:	bfbc      	itt	lt
 800ba26:	238b      	movlt	r3, #139	; 0x8b
 800ba28:	602b      	strlt	r3, [r5, #0]
 800ba2a:	2c00      	cmp	r4, #0
 800ba2c:	d0e3      	beq.n	800b9f6 <_vsniprintf_r+0x16>
 800ba2e:	9b00      	ldr	r3, [sp, #0]
 800ba30:	2200      	movs	r2, #0
 800ba32:	701a      	strb	r2, [r3, #0]
 800ba34:	e7df      	b.n	800b9f6 <_vsniprintf_r+0x16>
	...

0800ba38 <vsniprintf>:
 800ba38:	b507      	push	{r0, r1, r2, lr}
 800ba3a:	9300      	str	r3, [sp, #0]
 800ba3c:	4613      	mov	r3, r2
 800ba3e:	460a      	mov	r2, r1
 800ba40:	4601      	mov	r1, r0
 800ba42:	4803      	ldr	r0, [pc, #12]	; (800ba50 <vsniprintf+0x18>)
 800ba44:	6800      	ldr	r0, [r0, #0]
 800ba46:	f7ff ffcb 	bl	800b9e0 <_vsniprintf_r>
 800ba4a:	b003      	add	sp, #12
 800ba4c:	f85d fb04 	ldr.w	pc, [sp], #4
 800ba50:	20000064 	.word	0x20000064

0800ba54 <memset>:
 800ba54:	4402      	add	r2, r0
 800ba56:	4603      	mov	r3, r0
 800ba58:	4293      	cmp	r3, r2
 800ba5a:	d100      	bne.n	800ba5e <memset+0xa>
 800ba5c:	4770      	bx	lr
 800ba5e:	f803 1b01 	strb.w	r1, [r3], #1
 800ba62:	e7f9      	b.n	800ba58 <memset+0x4>

0800ba64 <__errno>:
 800ba64:	4b01      	ldr	r3, [pc, #4]	; (800ba6c <__errno+0x8>)
 800ba66:	6818      	ldr	r0, [r3, #0]
 800ba68:	4770      	bx	lr
 800ba6a:	bf00      	nop
 800ba6c:	20000064 	.word	0x20000064

0800ba70 <__libc_init_array>:
 800ba70:	b570      	push	{r4, r5, r6, lr}
 800ba72:	4d0d      	ldr	r5, [pc, #52]	; (800baa8 <__libc_init_array+0x38>)
 800ba74:	4c0d      	ldr	r4, [pc, #52]	; (800baac <__libc_init_array+0x3c>)
 800ba76:	1b64      	subs	r4, r4, r5
 800ba78:	10a4      	asrs	r4, r4, #2
 800ba7a:	2600      	movs	r6, #0
 800ba7c:	42a6      	cmp	r6, r4
 800ba7e:	d109      	bne.n	800ba94 <__libc_init_array+0x24>
 800ba80:	4d0b      	ldr	r5, [pc, #44]	; (800bab0 <__libc_init_array+0x40>)
 800ba82:	4c0c      	ldr	r4, [pc, #48]	; (800bab4 <__libc_init_array+0x44>)
 800ba84:	f000 fc68 	bl	800c358 <_init>
 800ba88:	1b64      	subs	r4, r4, r5
 800ba8a:	10a4      	asrs	r4, r4, #2
 800ba8c:	2600      	movs	r6, #0
 800ba8e:	42a6      	cmp	r6, r4
 800ba90:	d105      	bne.n	800ba9e <__libc_init_array+0x2e>
 800ba92:	bd70      	pop	{r4, r5, r6, pc}
 800ba94:	f855 3b04 	ldr.w	r3, [r5], #4
 800ba98:	4798      	blx	r3
 800ba9a:	3601      	adds	r6, #1
 800ba9c:	e7ee      	b.n	800ba7c <__libc_init_array+0xc>
 800ba9e:	f855 3b04 	ldr.w	r3, [r5], #4
 800baa2:	4798      	blx	r3
 800baa4:	3601      	adds	r6, #1
 800baa6:	e7f2      	b.n	800ba8e <__libc_init_array+0x1e>
 800baa8:	0800ce1c 	.word	0x0800ce1c
 800baac:	0800ce1c 	.word	0x0800ce1c
 800bab0:	0800ce1c 	.word	0x0800ce1c
 800bab4:	0800ce20 	.word	0x0800ce20

0800bab8 <__retarget_lock_acquire_recursive>:
 800bab8:	4770      	bx	lr

0800baba <__retarget_lock_release_recursive>:
 800baba:	4770      	bx	lr

0800babc <memcpy>:
 800babc:	440a      	add	r2, r1
 800babe:	4291      	cmp	r1, r2
 800bac0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800bac4:	d100      	bne.n	800bac8 <memcpy+0xc>
 800bac6:	4770      	bx	lr
 800bac8:	b510      	push	{r4, lr}
 800baca:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bace:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bad2:	4291      	cmp	r1, r2
 800bad4:	d1f9      	bne.n	800baca <memcpy+0xe>
 800bad6:	bd10      	pop	{r4, pc}

0800bad8 <__ssputs_r>:
 800bad8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800badc:	688e      	ldr	r6, [r1, #8]
 800bade:	461f      	mov	r7, r3
 800bae0:	42be      	cmp	r6, r7
 800bae2:	680b      	ldr	r3, [r1, #0]
 800bae4:	4682      	mov	sl, r0
 800bae6:	460c      	mov	r4, r1
 800bae8:	4690      	mov	r8, r2
 800baea:	d82c      	bhi.n	800bb46 <__ssputs_r+0x6e>
 800baec:	898a      	ldrh	r2, [r1, #12]
 800baee:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800baf2:	d026      	beq.n	800bb42 <__ssputs_r+0x6a>
 800baf4:	6965      	ldr	r5, [r4, #20]
 800baf6:	6909      	ldr	r1, [r1, #16]
 800baf8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bafc:	eba3 0901 	sub.w	r9, r3, r1
 800bb00:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bb04:	1c7b      	adds	r3, r7, #1
 800bb06:	444b      	add	r3, r9
 800bb08:	106d      	asrs	r5, r5, #1
 800bb0a:	429d      	cmp	r5, r3
 800bb0c:	bf38      	it	cc
 800bb0e:	461d      	movcc	r5, r3
 800bb10:	0553      	lsls	r3, r2, #21
 800bb12:	d527      	bpl.n	800bb64 <__ssputs_r+0x8c>
 800bb14:	4629      	mov	r1, r5
 800bb16:	f000 f957 	bl	800bdc8 <_malloc_r>
 800bb1a:	4606      	mov	r6, r0
 800bb1c:	b360      	cbz	r0, 800bb78 <__ssputs_r+0xa0>
 800bb1e:	6921      	ldr	r1, [r4, #16]
 800bb20:	464a      	mov	r2, r9
 800bb22:	f7ff ffcb 	bl	800babc <memcpy>
 800bb26:	89a3      	ldrh	r3, [r4, #12]
 800bb28:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bb2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bb30:	81a3      	strh	r3, [r4, #12]
 800bb32:	6126      	str	r6, [r4, #16]
 800bb34:	6165      	str	r5, [r4, #20]
 800bb36:	444e      	add	r6, r9
 800bb38:	eba5 0509 	sub.w	r5, r5, r9
 800bb3c:	6026      	str	r6, [r4, #0]
 800bb3e:	60a5      	str	r5, [r4, #8]
 800bb40:	463e      	mov	r6, r7
 800bb42:	42be      	cmp	r6, r7
 800bb44:	d900      	bls.n	800bb48 <__ssputs_r+0x70>
 800bb46:	463e      	mov	r6, r7
 800bb48:	6820      	ldr	r0, [r4, #0]
 800bb4a:	4632      	mov	r2, r6
 800bb4c:	4641      	mov	r1, r8
 800bb4e:	f000 fb86 	bl	800c25e <memmove>
 800bb52:	68a3      	ldr	r3, [r4, #8]
 800bb54:	1b9b      	subs	r3, r3, r6
 800bb56:	60a3      	str	r3, [r4, #8]
 800bb58:	6823      	ldr	r3, [r4, #0]
 800bb5a:	4433      	add	r3, r6
 800bb5c:	6023      	str	r3, [r4, #0]
 800bb5e:	2000      	movs	r0, #0
 800bb60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb64:	462a      	mov	r2, r5
 800bb66:	f000 fb4b 	bl	800c200 <_realloc_r>
 800bb6a:	4606      	mov	r6, r0
 800bb6c:	2800      	cmp	r0, #0
 800bb6e:	d1e0      	bne.n	800bb32 <__ssputs_r+0x5a>
 800bb70:	6921      	ldr	r1, [r4, #16]
 800bb72:	4650      	mov	r0, sl
 800bb74:	f000 fb9e 	bl	800c2b4 <_free_r>
 800bb78:	230c      	movs	r3, #12
 800bb7a:	f8ca 3000 	str.w	r3, [sl]
 800bb7e:	89a3      	ldrh	r3, [r4, #12]
 800bb80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bb84:	81a3      	strh	r3, [r4, #12]
 800bb86:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bb8a:	e7e9      	b.n	800bb60 <__ssputs_r+0x88>

0800bb8c <_svfiprintf_r>:
 800bb8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb90:	4698      	mov	r8, r3
 800bb92:	898b      	ldrh	r3, [r1, #12]
 800bb94:	061b      	lsls	r3, r3, #24
 800bb96:	b09d      	sub	sp, #116	; 0x74
 800bb98:	4607      	mov	r7, r0
 800bb9a:	460d      	mov	r5, r1
 800bb9c:	4614      	mov	r4, r2
 800bb9e:	d50e      	bpl.n	800bbbe <_svfiprintf_r+0x32>
 800bba0:	690b      	ldr	r3, [r1, #16]
 800bba2:	b963      	cbnz	r3, 800bbbe <_svfiprintf_r+0x32>
 800bba4:	2140      	movs	r1, #64	; 0x40
 800bba6:	f000 f90f 	bl	800bdc8 <_malloc_r>
 800bbaa:	6028      	str	r0, [r5, #0]
 800bbac:	6128      	str	r0, [r5, #16]
 800bbae:	b920      	cbnz	r0, 800bbba <_svfiprintf_r+0x2e>
 800bbb0:	230c      	movs	r3, #12
 800bbb2:	603b      	str	r3, [r7, #0]
 800bbb4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bbb8:	e0d0      	b.n	800bd5c <_svfiprintf_r+0x1d0>
 800bbba:	2340      	movs	r3, #64	; 0x40
 800bbbc:	616b      	str	r3, [r5, #20]
 800bbbe:	2300      	movs	r3, #0
 800bbc0:	9309      	str	r3, [sp, #36]	; 0x24
 800bbc2:	2320      	movs	r3, #32
 800bbc4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bbc8:	f8cd 800c 	str.w	r8, [sp, #12]
 800bbcc:	2330      	movs	r3, #48	; 0x30
 800bbce:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800bd74 <_svfiprintf_r+0x1e8>
 800bbd2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bbd6:	f04f 0901 	mov.w	r9, #1
 800bbda:	4623      	mov	r3, r4
 800bbdc:	469a      	mov	sl, r3
 800bbde:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bbe2:	b10a      	cbz	r2, 800bbe8 <_svfiprintf_r+0x5c>
 800bbe4:	2a25      	cmp	r2, #37	; 0x25
 800bbe6:	d1f9      	bne.n	800bbdc <_svfiprintf_r+0x50>
 800bbe8:	ebba 0b04 	subs.w	fp, sl, r4
 800bbec:	d00b      	beq.n	800bc06 <_svfiprintf_r+0x7a>
 800bbee:	465b      	mov	r3, fp
 800bbf0:	4622      	mov	r2, r4
 800bbf2:	4629      	mov	r1, r5
 800bbf4:	4638      	mov	r0, r7
 800bbf6:	f7ff ff6f 	bl	800bad8 <__ssputs_r>
 800bbfa:	3001      	adds	r0, #1
 800bbfc:	f000 80a9 	beq.w	800bd52 <_svfiprintf_r+0x1c6>
 800bc00:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bc02:	445a      	add	r2, fp
 800bc04:	9209      	str	r2, [sp, #36]	; 0x24
 800bc06:	f89a 3000 	ldrb.w	r3, [sl]
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	f000 80a1 	beq.w	800bd52 <_svfiprintf_r+0x1c6>
 800bc10:	2300      	movs	r3, #0
 800bc12:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bc16:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bc1a:	f10a 0a01 	add.w	sl, sl, #1
 800bc1e:	9304      	str	r3, [sp, #16]
 800bc20:	9307      	str	r3, [sp, #28]
 800bc22:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bc26:	931a      	str	r3, [sp, #104]	; 0x68
 800bc28:	4654      	mov	r4, sl
 800bc2a:	2205      	movs	r2, #5
 800bc2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc30:	4850      	ldr	r0, [pc, #320]	; (800bd74 <_svfiprintf_r+0x1e8>)
 800bc32:	f7f4 faa5 	bl	8000180 <memchr>
 800bc36:	9a04      	ldr	r2, [sp, #16]
 800bc38:	b9d8      	cbnz	r0, 800bc72 <_svfiprintf_r+0xe6>
 800bc3a:	06d0      	lsls	r0, r2, #27
 800bc3c:	bf44      	itt	mi
 800bc3e:	2320      	movmi	r3, #32
 800bc40:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bc44:	0711      	lsls	r1, r2, #28
 800bc46:	bf44      	itt	mi
 800bc48:	232b      	movmi	r3, #43	; 0x2b
 800bc4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bc4e:	f89a 3000 	ldrb.w	r3, [sl]
 800bc52:	2b2a      	cmp	r3, #42	; 0x2a
 800bc54:	d015      	beq.n	800bc82 <_svfiprintf_r+0xf6>
 800bc56:	9a07      	ldr	r2, [sp, #28]
 800bc58:	4654      	mov	r4, sl
 800bc5a:	2000      	movs	r0, #0
 800bc5c:	f04f 0c0a 	mov.w	ip, #10
 800bc60:	4621      	mov	r1, r4
 800bc62:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bc66:	3b30      	subs	r3, #48	; 0x30
 800bc68:	2b09      	cmp	r3, #9
 800bc6a:	d94d      	bls.n	800bd08 <_svfiprintf_r+0x17c>
 800bc6c:	b1b0      	cbz	r0, 800bc9c <_svfiprintf_r+0x110>
 800bc6e:	9207      	str	r2, [sp, #28]
 800bc70:	e014      	b.n	800bc9c <_svfiprintf_r+0x110>
 800bc72:	eba0 0308 	sub.w	r3, r0, r8
 800bc76:	fa09 f303 	lsl.w	r3, r9, r3
 800bc7a:	4313      	orrs	r3, r2
 800bc7c:	9304      	str	r3, [sp, #16]
 800bc7e:	46a2      	mov	sl, r4
 800bc80:	e7d2      	b.n	800bc28 <_svfiprintf_r+0x9c>
 800bc82:	9b03      	ldr	r3, [sp, #12]
 800bc84:	1d19      	adds	r1, r3, #4
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	9103      	str	r1, [sp, #12]
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	bfbb      	ittet	lt
 800bc8e:	425b      	neglt	r3, r3
 800bc90:	f042 0202 	orrlt.w	r2, r2, #2
 800bc94:	9307      	strge	r3, [sp, #28]
 800bc96:	9307      	strlt	r3, [sp, #28]
 800bc98:	bfb8      	it	lt
 800bc9a:	9204      	strlt	r2, [sp, #16]
 800bc9c:	7823      	ldrb	r3, [r4, #0]
 800bc9e:	2b2e      	cmp	r3, #46	; 0x2e
 800bca0:	d10c      	bne.n	800bcbc <_svfiprintf_r+0x130>
 800bca2:	7863      	ldrb	r3, [r4, #1]
 800bca4:	2b2a      	cmp	r3, #42	; 0x2a
 800bca6:	d134      	bne.n	800bd12 <_svfiprintf_r+0x186>
 800bca8:	9b03      	ldr	r3, [sp, #12]
 800bcaa:	1d1a      	adds	r2, r3, #4
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	9203      	str	r2, [sp, #12]
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	bfb8      	it	lt
 800bcb4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800bcb8:	3402      	adds	r4, #2
 800bcba:	9305      	str	r3, [sp, #20]
 800bcbc:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800bd78 <_svfiprintf_r+0x1ec>
 800bcc0:	7821      	ldrb	r1, [r4, #0]
 800bcc2:	2203      	movs	r2, #3
 800bcc4:	4650      	mov	r0, sl
 800bcc6:	f7f4 fa5b 	bl	8000180 <memchr>
 800bcca:	b138      	cbz	r0, 800bcdc <_svfiprintf_r+0x150>
 800bccc:	9b04      	ldr	r3, [sp, #16]
 800bcce:	eba0 000a 	sub.w	r0, r0, sl
 800bcd2:	2240      	movs	r2, #64	; 0x40
 800bcd4:	4082      	lsls	r2, r0
 800bcd6:	4313      	orrs	r3, r2
 800bcd8:	3401      	adds	r4, #1
 800bcda:	9304      	str	r3, [sp, #16]
 800bcdc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bce0:	4826      	ldr	r0, [pc, #152]	; (800bd7c <_svfiprintf_r+0x1f0>)
 800bce2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bce6:	2206      	movs	r2, #6
 800bce8:	f7f4 fa4a 	bl	8000180 <memchr>
 800bcec:	2800      	cmp	r0, #0
 800bcee:	d038      	beq.n	800bd62 <_svfiprintf_r+0x1d6>
 800bcf0:	4b23      	ldr	r3, [pc, #140]	; (800bd80 <_svfiprintf_r+0x1f4>)
 800bcf2:	bb1b      	cbnz	r3, 800bd3c <_svfiprintf_r+0x1b0>
 800bcf4:	9b03      	ldr	r3, [sp, #12]
 800bcf6:	3307      	adds	r3, #7
 800bcf8:	f023 0307 	bic.w	r3, r3, #7
 800bcfc:	3308      	adds	r3, #8
 800bcfe:	9303      	str	r3, [sp, #12]
 800bd00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd02:	4433      	add	r3, r6
 800bd04:	9309      	str	r3, [sp, #36]	; 0x24
 800bd06:	e768      	b.n	800bbda <_svfiprintf_r+0x4e>
 800bd08:	fb0c 3202 	mla	r2, ip, r2, r3
 800bd0c:	460c      	mov	r4, r1
 800bd0e:	2001      	movs	r0, #1
 800bd10:	e7a6      	b.n	800bc60 <_svfiprintf_r+0xd4>
 800bd12:	2300      	movs	r3, #0
 800bd14:	3401      	adds	r4, #1
 800bd16:	9305      	str	r3, [sp, #20]
 800bd18:	4619      	mov	r1, r3
 800bd1a:	f04f 0c0a 	mov.w	ip, #10
 800bd1e:	4620      	mov	r0, r4
 800bd20:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bd24:	3a30      	subs	r2, #48	; 0x30
 800bd26:	2a09      	cmp	r2, #9
 800bd28:	d903      	bls.n	800bd32 <_svfiprintf_r+0x1a6>
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d0c6      	beq.n	800bcbc <_svfiprintf_r+0x130>
 800bd2e:	9105      	str	r1, [sp, #20]
 800bd30:	e7c4      	b.n	800bcbc <_svfiprintf_r+0x130>
 800bd32:	fb0c 2101 	mla	r1, ip, r1, r2
 800bd36:	4604      	mov	r4, r0
 800bd38:	2301      	movs	r3, #1
 800bd3a:	e7f0      	b.n	800bd1e <_svfiprintf_r+0x192>
 800bd3c:	ab03      	add	r3, sp, #12
 800bd3e:	9300      	str	r3, [sp, #0]
 800bd40:	462a      	mov	r2, r5
 800bd42:	4b10      	ldr	r3, [pc, #64]	; (800bd84 <_svfiprintf_r+0x1f8>)
 800bd44:	a904      	add	r1, sp, #16
 800bd46:	4638      	mov	r0, r7
 800bd48:	f3af 8000 	nop.w
 800bd4c:	1c42      	adds	r2, r0, #1
 800bd4e:	4606      	mov	r6, r0
 800bd50:	d1d6      	bne.n	800bd00 <_svfiprintf_r+0x174>
 800bd52:	89ab      	ldrh	r3, [r5, #12]
 800bd54:	065b      	lsls	r3, r3, #25
 800bd56:	f53f af2d 	bmi.w	800bbb4 <_svfiprintf_r+0x28>
 800bd5a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bd5c:	b01d      	add	sp, #116	; 0x74
 800bd5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd62:	ab03      	add	r3, sp, #12
 800bd64:	9300      	str	r3, [sp, #0]
 800bd66:	462a      	mov	r2, r5
 800bd68:	4b06      	ldr	r3, [pc, #24]	; (800bd84 <_svfiprintf_r+0x1f8>)
 800bd6a:	a904      	add	r1, sp, #16
 800bd6c:	4638      	mov	r0, r7
 800bd6e:	f000 f919 	bl	800bfa4 <_printf_i>
 800bd72:	e7eb      	b.n	800bd4c <_svfiprintf_r+0x1c0>
 800bd74:	0800cde0 	.word	0x0800cde0
 800bd78:	0800cde6 	.word	0x0800cde6
 800bd7c:	0800cdea 	.word	0x0800cdea
 800bd80:	00000000 	.word	0x00000000
 800bd84:	0800bad9 	.word	0x0800bad9

0800bd88 <sbrk_aligned>:
 800bd88:	b570      	push	{r4, r5, r6, lr}
 800bd8a:	4e0e      	ldr	r6, [pc, #56]	; (800bdc4 <sbrk_aligned+0x3c>)
 800bd8c:	460c      	mov	r4, r1
 800bd8e:	6831      	ldr	r1, [r6, #0]
 800bd90:	4605      	mov	r5, r0
 800bd92:	b911      	cbnz	r1, 800bd9a <sbrk_aligned+0x12>
 800bd94:	f000 fa7e 	bl	800c294 <_sbrk_r>
 800bd98:	6030      	str	r0, [r6, #0]
 800bd9a:	4621      	mov	r1, r4
 800bd9c:	4628      	mov	r0, r5
 800bd9e:	f000 fa79 	bl	800c294 <_sbrk_r>
 800bda2:	1c43      	adds	r3, r0, #1
 800bda4:	d00a      	beq.n	800bdbc <sbrk_aligned+0x34>
 800bda6:	1cc4      	adds	r4, r0, #3
 800bda8:	f024 0403 	bic.w	r4, r4, #3
 800bdac:	42a0      	cmp	r0, r4
 800bdae:	d007      	beq.n	800bdc0 <sbrk_aligned+0x38>
 800bdb0:	1a21      	subs	r1, r4, r0
 800bdb2:	4628      	mov	r0, r5
 800bdb4:	f000 fa6e 	bl	800c294 <_sbrk_r>
 800bdb8:	3001      	adds	r0, #1
 800bdba:	d101      	bne.n	800bdc0 <sbrk_aligned+0x38>
 800bdbc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800bdc0:	4620      	mov	r0, r4
 800bdc2:	bd70      	pop	{r4, r5, r6, pc}
 800bdc4:	20000c30 	.word	0x20000c30

0800bdc8 <_malloc_r>:
 800bdc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bdcc:	1ccd      	adds	r5, r1, #3
 800bdce:	f025 0503 	bic.w	r5, r5, #3
 800bdd2:	3508      	adds	r5, #8
 800bdd4:	2d0c      	cmp	r5, #12
 800bdd6:	bf38      	it	cc
 800bdd8:	250c      	movcc	r5, #12
 800bdda:	2d00      	cmp	r5, #0
 800bddc:	4607      	mov	r7, r0
 800bdde:	db01      	blt.n	800bde4 <_malloc_r+0x1c>
 800bde0:	42a9      	cmp	r1, r5
 800bde2:	d905      	bls.n	800bdf0 <_malloc_r+0x28>
 800bde4:	230c      	movs	r3, #12
 800bde6:	603b      	str	r3, [r7, #0]
 800bde8:	2600      	movs	r6, #0
 800bdea:	4630      	mov	r0, r6
 800bdec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bdf0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800bec4 <_malloc_r+0xfc>
 800bdf4:	f000 f9f8 	bl	800c1e8 <__malloc_lock>
 800bdf8:	f8d8 3000 	ldr.w	r3, [r8]
 800bdfc:	461c      	mov	r4, r3
 800bdfe:	bb5c      	cbnz	r4, 800be58 <_malloc_r+0x90>
 800be00:	4629      	mov	r1, r5
 800be02:	4638      	mov	r0, r7
 800be04:	f7ff ffc0 	bl	800bd88 <sbrk_aligned>
 800be08:	1c43      	adds	r3, r0, #1
 800be0a:	4604      	mov	r4, r0
 800be0c:	d155      	bne.n	800beba <_malloc_r+0xf2>
 800be0e:	f8d8 4000 	ldr.w	r4, [r8]
 800be12:	4626      	mov	r6, r4
 800be14:	2e00      	cmp	r6, #0
 800be16:	d145      	bne.n	800bea4 <_malloc_r+0xdc>
 800be18:	2c00      	cmp	r4, #0
 800be1a:	d048      	beq.n	800beae <_malloc_r+0xe6>
 800be1c:	6823      	ldr	r3, [r4, #0]
 800be1e:	4631      	mov	r1, r6
 800be20:	4638      	mov	r0, r7
 800be22:	eb04 0903 	add.w	r9, r4, r3
 800be26:	f000 fa35 	bl	800c294 <_sbrk_r>
 800be2a:	4581      	cmp	r9, r0
 800be2c:	d13f      	bne.n	800beae <_malloc_r+0xe6>
 800be2e:	6821      	ldr	r1, [r4, #0]
 800be30:	1a6d      	subs	r5, r5, r1
 800be32:	4629      	mov	r1, r5
 800be34:	4638      	mov	r0, r7
 800be36:	f7ff ffa7 	bl	800bd88 <sbrk_aligned>
 800be3a:	3001      	adds	r0, #1
 800be3c:	d037      	beq.n	800beae <_malloc_r+0xe6>
 800be3e:	6823      	ldr	r3, [r4, #0]
 800be40:	442b      	add	r3, r5
 800be42:	6023      	str	r3, [r4, #0]
 800be44:	f8d8 3000 	ldr.w	r3, [r8]
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d038      	beq.n	800bebe <_malloc_r+0xf6>
 800be4c:	685a      	ldr	r2, [r3, #4]
 800be4e:	42a2      	cmp	r2, r4
 800be50:	d12b      	bne.n	800beaa <_malloc_r+0xe2>
 800be52:	2200      	movs	r2, #0
 800be54:	605a      	str	r2, [r3, #4]
 800be56:	e00f      	b.n	800be78 <_malloc_r+0xb0>
 800be58:	6822      	ldr	r2, [r4, #0]
 800be5a:	1b52      	subs	r2, r2, r5
 800be5c:	d41f      	bmi.n	800be9e <_malloc_r+0xd6>
 800be5e:	2a0b      	cmp	r2, #11
 800be60:	d917      	bls.n	800be92 <_malloc_r+0xca>
 800be62:	1961      	adds	r1, r4, r5
 800be64:	42a3      	cmp	r3, r4
 800be66:	6025      	str	r5, [r4, #0]
 800be68:	bf18      	it	ne
 800be6a:	6059      	strne	r1, [r3, #4]
 800be6c:	6863      	ldr	r3, [r4, #4]
 800be6e:	bf08      	it	eq
 800be70:	f8c8 1000 	streq.w	r1, [r8]
 800be74:	5162      	str	r2, [r4, r5]
 800be76:	604b      	str	r3, [r1, #4]
 800be78:	4638      	mov	r0, r7
 800be7a:	f104 060b 	add.w	r6, r4, #11
 800be7e:	f000 f9b9 	bl	800c1f4 <__malloc_unlock>
 800be82:	f026 0607 	bic.w	r6, r6, #7
 800be86:	1d23      	adds	r3, r4, #4
 800be88:	1af2      	subs	r2, r6, r3
 800be8a:	d0ae      	beq.n	800bdea <_malloc_r+0x22>
 800be8c:	1b9b      	subs	r3, r3, r6
 800be8e:	50a3      	str	r3, [r4, r2]
 800be90:	e7ab      	b.n	800bdea <_malloc_r+0x22>
 800be92:	42a3      	cmp	r3, r4
 800be94:	6862      	ldr	r2, [r4, #4]
 800be96:	d1dd      	bne.n	800be54 <_malloc_r+0x8c>
 800be98:	f8c8 2000 	str.w	r2, [r8]
 800be9c:	e7ec      	b.n	800be78 <_malloc_r+0xb0>
 800be9e:	4623      	mov	r3, r4
 800bea0:	6864      	ldr	r4, [r4, #4]
 800bea2:	e7ac      	b.n	800bdfe <_malloc_r+0x36>
 800bea4:	4634      	mov	r4, r6
 800bea6:	6876      	ldr	r6, [r6, #4]
 800bea8:	e7b4      	b.n	800be14 <_malloc_r+0x4c>
 800beaa:	4613      	mov	r3, r2
 800beac:	e7cc      	b.n	800be48 <_malloc_r+0x80>
 800beae:	230c      	movs	r3, #12
 800beb0:	603b      	str	r3, [r7, #0]
 800beb2:	4638      	mov	r0, r7
 800beb4:	f000 f99e 	bl	800c1f4 <__malloc_unlock>
 800beb8:	e797      	b.n	800bdea <_malloc_r+0x22>
 800beba:	6025      	str	r5, [r4, #0]
 800bebc:	e7dc      	b.n	800be78 <_malloc_r+0xb0>
 800bebe:	605b      	str	r3, [r3, #4]
 800bec0:	deff      	udf	#255	; 0xff
 800bec2:	bf00      	nop
 800bec4:	20000c2c 	.word	0x20000c2c

0800bec8 <_printf_common>:
 800bec8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800becc:	4616      	mov	r6, r2
 800bece:	4699      	mov	r9, r3
 800bed0:	688a      	ldr	r2, [r1, #8]
 800bed2:	690b      	ldr	r3, [r1, #16]
 800bed4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bed8:	4293      	cmp	r3, r2
 800beda:	bfb8      	it	lt
 800bedc:	4613      	movlt	r3, r2
 800bede:	6033      	str	r3, [r6, #0]
 800bee0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bee4:	4607      	mov	r7, r0
 800bee6:	460c      	mov	r4, r1
 800bee8:	b10a      	cbz	r2, 800beee <_printf_common+0x26>
 800beea:	3301      	adds	r3, #1
 800beec:	6033      	str	r3, [r6, #0]
 800beee:	6823      	ldr	r3, [r4, #0]
 800bef0:	0699      	lsls	r1, r3, #26
 800bef2:	bf42      	ittt	mi
 800bef4:	6833      	ldrmi	r3, [r6, #0]
 800bef6:	3302      	addmi	r3, #2
 800bef8:	6033      	strmi	r3, [r6, #0]
 800befa:	6825      	ldr	r5, [r4, #0]
 800befc:	f015 0506 	ands.w	r5, r5, #6
 800bf00:	d106      	bne.n	800bf10 <_printf_common+0x48>
 800bf02:	f104 0a19 	add.w	sl, r4, #25
 800bf06:	68e3      	ldr	r3, [r4, #12]
 800bf08:	6832      	ldr	r2, [r6, #0]
 800bf0a:	1a9b      	subs	r3, r3, r2
 800bf0c:	42ab      	cmp	r3, r5
 800bf0e:	dc26      	bgt.n	800bf5e <_printf_common+0x96>
 800bf10:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bf14:	1e13      	subs	r3, r2, #0
 800bf16:	6822      	ldr	r2, [r4, #0]
 800bf18:	bf18      	it	ne
 800bf1a:	2301      	movne	r3, #1
 800bf1c:	0692      	lsls	r2, r2, #26
 800bf1e:	d42b      	bmi.n	800bf78 <_printf_common+0xb0>
 800bf20:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bf24:	4649      	mov	r1, r9
 800bf26:	4638      	mov	r0, r7
 800bf28:	47c0      	blx	r8
 800bf2a:	3001      	adds	r0, #1
 800bf2c:	d01e      	beq.n	800bf6c <_printf_common+0xa4>
 800bf2e:	6823      	ldr	r3, [r4, #0]
 800bf30:	6922      	ldr	r2, [r4, #16]
 800bf32:	f003 0306 	and.w	r3, r3, #6
 800bf36:	2b04      	cmp	r3, #4
 800bf38:	bf02      	ittt	eq
 800bf3a:	68e5      	ldreq	r5, [r4, #12]
 800bf3c:	6833      	ldreq	r3, [r6, #0]
 800bf3e:	1aed      	subeq	r5, r5, r3
 800bf40:	68a3      	ldr	r3, [r4, #8]
 800bf42:	bf0c      	ite	eq
 800bf44:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bf48:	2500      	movne	r5, #0
 800bf4a:	4293      	cmp	r3, r2
 800bf4c:	bfc4      	itt	gt
 800bf4e:	1a9b      	subgt	r3, r3, r2
 800bf50:	18ed      	addgt	r5, r5, r3
 800bf52:	2600      	movs	r6, #0
 800bf54:	341a      	adds	r4, #26
 800bf56:	42b5      	cmp	r5, r6
 800bf58:	d11a      	bne.n	800bf90 <_printf_common+0xc8>
 800bf5a:	2000      	movs	r0, #0
 800bf5c:	e008      	b.n	800bf70 <_printf_common+0xa8>
 800bf5e:	2301      	movs	r3, #1
 800bf60:	4652      	mov	r2, sl
 800bf62:	4649      	mov	r1, r9
 800bf64:	4638      	mov	r0, r7
 800bf66:	47c0      	blx	r8
 800bf68:	3001      	adds	r0, #1
 800bf6a:	d103      	bne.n	800bf74 <_printf_common+0xac>
 800bf6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bf70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf74:	3501      	adds	r5, #1
 800bf76:	e7c6      	b.n	800bf06 <_printf_common+0x3e>
 800bf78:	18e1      	adds	r1, r4, r3
 800bf7a:	1c5a      	adds	r2, r3, #1
 800bf7c:	2030      	movs	r0, #48	; 0x30
 800bf7e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bf82:	4422      	add	r2, r4
 800bf84:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bf88:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bf8c:	3302      	adds	r3, #2
 800bf8e:	e7c7      	b.n	800bf20 <_printf_common+0x58>
 800bf90:	2301      	movs	r3, #1
 800bf92:	4622      	mov	r2, r4
 800bf94:	4649      	mov	r1, r9
 800bf96:	4638      	mov	r0, r7
 800bf98:	47c0      	blx	r8
 800bf9a:	3001      	adds	r0, #1
 800bf9c:	d0e6      	beq.n	800bf6c <_printf_common+0xa4>
 800bf9e:	3601      	adds	r6, #1
 800bfa0:	e7d9      	b.n	800bf56 <_printf_common+0x8e>
	...

0800bfa4 <_printf_i>:
 800bfa4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bfa8:	7e0f      	ldrb	r7, [r1, #24]
 800bfaa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800bfac:	2f78      	cmp	r7, #120	; 0x78
 800bfae:	4691      	mov	r9, r2
 800bfb0:	4680      	mov	r8, r0
 800bfb2:	460c      	mov	r4, r1
 800bfb4:	469a      	mov	sl, r3
 800bfb6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800bfba:	d807      	bhi.n	800bfcc <_printf_i+0x28>
 800bfbc:	2f62      	cmp	r7, #98	; 0x62
 800bfbe:	d80a      	bhi.n	800bfd6 <_printf_i+0x32>
 800bfc0:	2f00      	cmp	r7, #0
 800bfc2:	f000 80d4 	beq.w	800c16e <_printf_i+0x1ca>
 800bfc6:	2f58      	cmp	r7, #88	; 0x58
 800bfc8:	f000 80c0 	beq.w	800c14c <_printf_i+0x1a8>
 800bfcc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bfd0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bfd4:	e03a      	b.n	800c04c <_printf_i+0xa8>
 800bfd6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bfda:	2b15      	cmp	r3, #21
 800bfdc:	d8f6      	bhi.n	800bfcc <_printf_i+0x28>
 800bfde:	a101      	add	r1, pc, #4	; (adr r1, 800bfe4 <_printf_i+0x40>)
 800bfe0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bfe4:	0800c03d 	.word	0x0800c03d
 800bfe8:	0800c051 	.word	0x0800c051
 800bfec:	0800bfcd 	.word	0x0800bfcd
 800bff0:	0800bfcd 	.word	0x0800bfcd
 800bff4:	0800bfcd 	.word	0x0800bfcd
 800bff8:	0800bfcd 	.word	0x0800bfcd
 800bffc:	0800c051 	.word	0x0800c051
 800c000:	0800bfcd 	.word	0x0800bfcd
 800c004:	0800bfcd 	.word	0x0800bfcd
 800c008:	0800bfcd 	.word	0x0800bfcd
 800c00c:	0800bfcd 	.word	0x0800bfcd
 800c010:	0800c155 	.word	0x0800c155
 800c014:	0800c07d 	.word	0x0800c07d
 800c018:	0800c10f 	.word	0x0800c10f
 800c01c:	0800bfcd 	.word	0x0800bfcd
 800c020:	0800bfcd 	.word	0x0800bfcd
 800c024:	0800c177 	.word	0x0800c177
 800c028:	0800bfcd 	.word	0x0800bfcd
 800c02c:	0800c07d 	.word	0x0800c07d
 800c030:	0800bfcd 	.word	0x0800bfcd
 800c034:	0800bfcd 	.word	0x0800bfcd
 800c038:	0800c117 	.word	0x0800c117
 800c03c:	682b      	ldr	r3, [r5, #0]
 800c03e:	1d1a      	adds	r2, r3, #4
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	602a      	str	r2, [r5, #0]
 800c044:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c048:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c04c:	2301      	movs	r3, #1
 800c04e:	e09f      	b.n	800c190 <_printf_i+0x1ec>
 800c050:	6820      	ldr	r0, [r4, #0]
 800c052:	682b      	ldr	r3, [r5, #0]
 800c054:	0607      	lsls	r7, r0, #24
 800c056:	f103 0104 	add.w	r1, r3, #4
 800c05a:	6029      	str	r1, [r5, #0]
 800c05c:	d501      	bpl.n	800c062 <_printf_i+0xbe>
 800c05e:	681e      	ldr	r6, [r3, #0]
 800c060:	e003      	b.n	800c06a <_printf_i+0xc6>
 800c062:	0646      	lsls	r6, r0, #25
 800c064:	d5fb      	bpl.n	800c05e <_printf_i+0xba>
 800c066:	f9b3 6000 	ldrsh.w	r6, [r3]
 800c06a:	2e00      	cmp	r6, #0
 800c06c:	da03      	bge.n	800c076 <_printf_i+0xd2>
 800c06e:	232d      	movs	r3, #45	; 0x2d
 800c070:	4276      	negs	r6, r6
 800c072:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c076:	485a      	ldr	r0, [pc, #360]	; (800c1e0 <_printf_i+0x23c>)
 800c078:	230a      	movs	r3, #10
 800c07a:	e012      	b.n	800c0a2 <_printf_i+0xfe>
 800c07c:	682b      	ldr	r3, [r5, #0]
 800c07e:	6820      	ldr	r0, [r4, #0]
 800c080:	1d19      	adds	r1, r3, #4
 800c082:	6029      	str	r1, [r5, #0]
 800c084:	0605      	lsls	r5, r0, #24
 800c086:	d501      	bpl.n	800c08c <_printf_i+0xe8>
 800c088:	681e      	ldr	r6, [r3, #0]
 800c08a:	e002      	b.n	800c092 <_printf_i+0xee>
 800c08c:	0641      	lsls	r1, r0, #25
 800c08e:	d5fb      	bpl.n	800c088 <_printf_i+0xe4>
 800c090:	881e      	ldrh	r6, [r3, #0]
 800c092:	4853      	ldr	r0, [pc, #332]	; (800c1e0 <_printf_i+0x23c>)
 800c094:	2f6f      	cmp	r7, #111	; 0x6f
 800c096:	bf0c      	ite	eq
 800c098:	2308      	moveq	r3, #8
 800c09a:	230a      	movne	r3, #10
 800c09c:	2100      	movs	r1, #0
 800c09e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c0a2:	6865      	ldr	r5, [r4, #4]
 800c0a4:	60a5      	str	r5, [r4, #8]
 800c0a6:	2d00      	cmp	r5, #0
 800c0a8:	bfa2      	ittt	ge
 800c0aa:	6821      	ldrge	r1, [r4, #0]
 800c0ac:	f021 0104 	bicge.w	r1, r1, #4
 800c0b0:	6021      	strge	r1, [r4, #0]
 800c0b2:	b90e      	cbnz	r6, 800c0b8 <_printf_i+0x114>
 800c0b4:	2d00      	cmp	r5, #0
 800c0b6:	d04b      	beq.n	800c150 <_printf_i+0x1ac>
 800c0b8:	4615      	mov	r5, r2
 800c0ba:	fbb6 f1f3 	udiv	r1, r6, r3
 800c0be:	fb03 6711 	mls	r7, r3, r1, r6
 800c0c2:	5dc7      	ldrb	r7, [r0, r7]
 800c0c4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c0c8:	4637      	mov	r7, r6
 800c0ca:	42bb      	cmp	r3, r7
 800c0cc:	460e      	mov	r6, r1
 800c0ce:	d9f4      	bls.n	800c0ba <_printf_i+0x116>
 800c0d0:	2b08      	cmp	r3, #8
 800c0d2:	d10b      	bne.n	800c0ec <_printf_i+0x148>
 800c0d4:	6823      	ldr	r3, [r4, #0]
 800c0d6:	07de      	lsls	r6, r3, #31
 800c0d8:	d508      	bpl.n	800c0ec <_printf_i+0x148>
 800c0da:	6923      	ldr	r3, [r4, #16]
 800c0dc:	6861      	ldr	r1, [r4, #4]
 800c0de:	4299      	cmp	r1, r3
 800c0e0:	bfde      	ittt	le
 800c0e2:	2330      	movle	r3, #48	; 0x30
 800c0e4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c0e8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800c0ec:	1b52      	subs	r2, r2, r5
 800c0ee:	6122      	str	r2, [r4, #16]
 800c0f0:	f8cd a000 	str.w	sl, [sp]
 800c0f4:	464b      	mov	r3, r9
 800c0f6:	aa03      	add	r2, sp, #12
 800c0f8:	4621      	mov	r1, r4
 800c0fa:	4640      	mov	r0, r8
 800c0fc:	f7ff fee4 	bl	800bec8 <_printf_common>
 800c100:	3001      	adds	r0, #1
 800c102:	d14a      	bne.n	800c19a <_printf_i+0x1f6>
 800c104:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c108:	b004      	add	sp, #16
 800c10a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c10e:	6823      	ldr	r3, [r4, #0]
 800c110:	f043 0320 	orr.w	r3, r3, #32
 800c114:	6023      	str	r3, [r4, #0]
 800c116:	4833      	ldr	r0, [pc, #204]	; (800c1e4 <_printf_i+0x240>)
 800c118:	2778      	movs	r7, #120	; 0x78
 800c11a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c11e:	6823      	ldr	r3, [r4, #0]
 800c120:	6829      	ldr	r1, [r5, #0]
 800c122:	061f      	lsls	r7, r3, #24
 800c124:	f851 6b04 	ldr.w	r6, [r1], #4
 800c128:	d402      	bmi.n	800c130 <_printf_i+0x18c>
 800c12a:	065f      	lsls	r7, r3, #25
 800c12c:	bf48      	it	mi
 800c12e:	b2b6      	uxthmi	r6, r6
 800c130:	07df      	lsls	r7, r3, #31
 800c132:	bf48      	it	mi
 800c134:	f043 0320 	orrmi.w	r3, r3, #32
 800c138:	6029      	str	r1, [r5, #0]
 800c13a:	bf48      	it	mi
 800c13c:	6023      	strmi	r3, [r4, #0]
 800c13e:	b91e      	cbnz	r6, 800c148 <_printf_i+0x1a4>
 800c140:	6823      	ldr	r3, [r4, #0]
 800c142:	f023 0320 	bic.w	r3, r3, #32
 800c146:	6023      	str	r3, [r4, #0]
 800c148:	2310      	movs	r3, #16
 800c14a:	e7a7      	b.n	800c09c <_printf_i+0xf8>
 800c14c:	4824      	ldr	r0, [pc, #144]	; (800c1e0 <_printf_i+0x23c>)
 800c14e:	e7e4      	b.n	800c11a <_printf_i+0x176>
 800c150:	4615      	mov	r5, r2
 800c152:	e7bd      	b.n	800c0d0 <_printf_i+0x12c>
 800c154:	682b      	ldr	r3, [r5, #0]
 800c156:	6826      	ldr	r6, [r4, #0]
 800c158:	6961      	ldr	r1, [r4, #20]
 800c15a:	1d18      	adds	r0, r3, #4
 800c15c:	6028      	str	r0, [r5, #0]
 800c15e:	0635      	lsls	r5, r6, #24
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	d501      	bpl.n	800c168 <_printf_i+0x1c4>
 800c164:	6019      	str	r1, [r3, #0]
 800c166:	e002      	b.n	800c16e <_printf_i+0x1ca>
 800c168:	0670      	lsls	r0, r6, #25
 800c16a:	d5fb      	bpl.n	800c164 <_printf_i+0x1c0>
 800c16c:	8019      	strh	r1, [r3, #0]
 800c16e:	2300      	movs	r3, #0
 800c170:	6123      	str	r3, [r4, #16]
 800c172:	4615      	mov	r5, r2
 800c174:	e7bc      	b.n	800c0f0 <_printf_i+0x14c>
 800c176:	682b      	ldr	r3, [r5, #0]
 800c178:	1d1a      	adds	r2, r3, #4
 800c17a:	602a      	str	r2, [r5, #0]
 800c17c:	681d      	ldr	r5, [r3, #0]
 800c17e:	6862      	ldr	r2, [r4, #4]
 800c180:	2100      	movs	r1, #0
 800c182:	4628      	mov	r0, r5
 800c184:	f7f3 fffc 	bl	8000180 <memchr>
 800c188:	b108      	cbz	r0, 800c18e <_printf_i+0x1ea>
 800c18a:	1b40      	subs	r0, r0, r5
 800c18c:	6060      	str	r0, [r4, #4]
 800c18e:	6863      	ldr	r3, [r4, #4]
 800c190:	6123      	str	r3, [r4, #16]
 800c192:	2300      	movs	r3, #0
 800c194:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c198:	e7aa      	b.n	800c0f0 <_printf_i+0x14c>
 800c19a:	6923      	ldr	r3, [r4, #16]
 800c19c:	462a      	mov	r2, r5
 800c19e:	4649      	mov	r1, r9
 800c1a0:	4640      	mov	r0, r8
 800c1a2:	47d0      	blx	sl
 800c1a4:	3001      	adds	r0, #1
 800c1a6:	d0ad      	beq.n	800c104 <_printf_i+0x160>
 800c1a8:	6823      	ldr	r3, [r4, #0]
 800c1aa:	079b      	lsls	r3, r3, #30
 800c1ac:	d413      	bmi.n	800c1d6 <_printf_i+0x232>
 800c1ae:	68e0      	ldr	r0, [r4, #12]
 800c1b0:	9b03      	ldr	r3, [sp, #12]
 800c1b2:	4298      	cmp	r0, r3
 800c1b4:	bfb8      	it	lt
 800c1b6:	4618      	movlt	r0, r3
 800c1b8:	e7a6      	b.n	800c108 <_printf_i+0x164>
 800c1ba:	2301      	movs	r3, #1
 800c1bc:	4632      	mov	r2, r6
 800c1be:	4649      	mov	r1, r9
 800c1c0:	4640      	mov	r0, r8
 800c1c2:	47d0      	blx	sl
 800c1c4:	3001      	adds	r0, #1
 800c1c6:	d09d      	beq.n	800c104 <_printf_i+0x160>
 800c1c8:	3501      	adds	r5, #1
 800c1ca:	68e3      	ldr	r3, [r4, #12]
 800c1cc:	9903      	ldr	r1, [sp, #12]
 800c1ce:	1a5b      	subs	r3, r3, r1
 800c1d0:	42ab      	cmp	r3, r5
 800c1d2:	dcf2      	bgt.n	800c1ba <_printf_i+0x216>
 800c1d4:	e7eb      	b.n	800c1ae <_printf_i+0x20a>
 800c1d6:	2500      	movs	r5, #0
 800c1d8:	f104 0619 	add.w	r6, r4, #25
 800c1dc:	e7f5      	b.n	800c1ca <_printf_i+0x226>
 800c1de:	bf00      	nop
 800c1e0:	0800cdf1 	.word	0x0800cdf1
 800c1e4:	0800ce02 	.word	0x0800ce02

0800c1e8 <__malloc_lock>:
 800c1e8:	4801      	ldr	r0, [pc, #4]	; (800c1f0 <__malloc_lock+0x8>)
 800c1ea:	f7ff bc65 	b.w	800bab8 <__retarget_lock_acquire_recursive>
 800c1ee:	bf00      	nop
 800c1f0:	20000c28 	.word	0x20000c28

0800c1f4 <__malloc_unlock>:
 800c1f4:	4801      	ldr	r0, [pc, #4]	; (800c1fc <__malloc_unlock+0x8>)
 800c1f6:	f7ff bc60 	b.w	800baba <__retarget_lock_release_recursive>
 800c1fa:	bf00      	nop
 800c1fc:	20000c28 	.word	0x20000c28

0800c200 <_realloc_r>:
 800c200:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c204:	4680      	mov	r8, r0
 800c206:	4614      	mov	r4, r2
 800c208:	460e      	mov	r6, r1
 800c20a:	b921      	cbnz	r1, 800c216 <_realloc_r+0x16>
 800c20c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c210:	4611      	mov	r1, r2
 800c212:	f7ff bdd9 	b.w	800bdc8 <_malloc_r>
 800c216:	b92a      	cbnz	r2, 800c224 <_realloc_r+0x24>
 800c218:	f000 f84c 	bl	800c2b4 <_free_r>
 800c21c:	4625      	mov	r5, r4
 800c21e:	4628      	mov	r0, r5
 800c220:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c224:	f000 f890 	bl	800c348 <_malloc_usable_size_r>
 800c228:	4284      	cmp	r4, r0
 800c22a:	4607      	mov	r7, r0
 800c22c:	d802      	bhi.n	800c234 <_realloc_r+0x34>
 800c22e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c232:	d812      	bhi.n	800c25a <_realloc_r+0x5a>
 800c234:	4621      	mov	r1, r4
 800c236:	4640      	mov	r0, r8
 800c238:	f7ff fdc6 	bl	800bdc8 <_malloc_r>
 800c23c:	4605      	mov	r5, r0
 800c23e:	2800      	cmp	r0, #0
 800c240:	d0ed      	beq.n	800c21e <_realloc_r+0x1e>
 800c242:	42bc      	cmp	r4, r7
 800c244:	4622      	mov	r2, r4
 800c246:	4631      	mov	r1, r6
 800c248:	bf28      	it	cs
 800c24a:	463a      	movcs	r2, r7
 800c24c:	f7ff fc36 	bl	800babc <memcpy>
 800c250:	4631      	mov	r1, r6
 800c252:	4640      	mov	r0, r8
 800c254:	f000 f82e 	bl	800c2b4 <_free_r>
 800c258:	e7e1      	b.n	800c21e <_realloc_r+0x1e>
 800c25a:	4635      	mov	r5, r6
 800c25c:	e7df      	b.n	800c21e <_realloc_r+0x1e>

0800c25e <memmove>:
 800c25e:	4288      	cmp	r0, r1
 800c260:	b510      	push	{r4, lr}
 800c262:	eb01 0402 	add.w	r4, r1, r2
 800c266:	d902      	bls.n	800c26e <memmove+0x10>
 800c268:	4284      	cmp	r4, r0
 800c26a:	4623      	mov	r3, r4
 800c26c:	d807      	bhi.n	800c27e <memmove+0x20>
 800c26e:	1e43      	subs	r3, r0, #1
 800c270:	42a1      	cmp	r1, r4
 800c272:	d008      	beq.n	800c286 <memmove+0x28>
 800c274:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c278:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c27c:	e7f8      	b.n	800c270 <memmove+0x12>
 800c27e:	4402      	add	r2, r0
 800c280:	4601      	mov	r1, r0
 800c282:	428a      	cmp	r2, r1
 800c284:	d100      	bne.n	800c288 <memmove+0x2a>
 800c286:	bd10      	pop	{r4, pc}
 800c288:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c28c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c290:	e7f7      	b.n	800c282 <memmove+0x24>
	...

0800c294 <_sbrk_r>:
 800c294:	b538      	push	{r3, r4, r5, lr}
 800c296:	4d06      	ldr	r5, [pc, #24]	; (800c2b0 <_sbrk_r+0x1c>)
 800c298:	2300      	movs	r3, #0
 800c29a:	4604      	mov	r4, r0
 800c29c:	4608      	mov	r0, r1
 800c29e:	602b      	str	r3, [r5, #0]
 800c2a0:	f7f6 fb76 	bl	8002990 <_sbrk>
 800c2a4:	1c43      	adds	r3, r0, #1
 800c2a6:	d102      	bne.n	800c2ae <_sbrk_r+0x1a>
 800c2a8:	682b      	ldr	r3, [r5, #0]
 800c2aa:	b103      	cbz	r3, 800c2ae <_sbrk_r+0x1a>
 800c2ac:	6023      	str	r3, [r4, #0]
 800c2ae:	bd38      	pop	{r3, r4, r5, pc}
 800c2b0:	20000c34 	.word	0x20000c34

0800c2b4 <_free_r>:
 800c2b4:	b538      	push	{r3, r4, r5, lr}
 800c2b6:	4605      	mov	r5, r0
 800c2b8:	2900      	cmp	r1, #0
 800c2ba:	d041      	beq.n	800c340 <_free_r+0x8c>
 800c2bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c2c0:	1f0c      	subs	r4, r1, #4
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	bfb8      	it	lt
 800c2c6:	18e4      	addlt	r4, r4, r3
 800c2c8:	f7ff ff8e 	bl	800c1e8 <__malloc_lock>
 800c2cc:	4a1d      	ldr	r2, [pc, #116]	; (800c344 <_free_r+0x90>)
 800c2ce:	6813      	ldr	r3, [r2, #0]
 800c2d0:	b933      	cbnz	r3, 800c2e0 <_free_r+0x2c>
 800c2d2:	6063      	str	r3, [r4, #4]
 800c2d4:	6014      	str	r4, [r2, #0]
 800c2d6:	4628      	mov	r0, r5
 800c2d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c2dc:	f7ff bf8a 	b.w	800c1f4 <__malloc_unlock>
 800c2e0:	42a3      	cmp	r3, r4
 800c2e2:	d908      	bls.n	800c2f6 <_free_r+0x42>
 800c2e4:	6820      	ldr	r0, [r4, #0]
 800c2e6:	1821      	adds	r1, r4, r0
 800c2e8:	428b      	cmp	r3, r1
 800c2ea:	bf01      	itttt	eq
 800c2ec:	6819      	ldreq	r1, [r3, #0]
 800c2ee:	685b      	ldreq	r3, [r3, #4]
 800c2f0:	1809      	addeq	r1, r1, r0
 800c2f2:	6021      	streq	r1, [r4, #0]
 800c2f4:	e7ed      	b.n	800c2d2 <_free_r+0x1e>
 800c2f6:	461a      	mov	r2, r3
 800c2f8:	685b      	ldr	r3, [r3, #4]
 800c2fa:	b10b      	cbz	r3, 800c300 <_free_r+0x4c>
 800c2fc:	42a3      	cmp	r3, r4
 800c2fe:	d9fa      	bls.n	800c2f6 <_free_r+0x42>
 800c300:	6811      	ldr	r1, [r2, #0]
 800c302:	1850      	adds	r0, r2, r1
 800c304:	42a0      	cmp	r0, r4
 800c306:	d10b      	bne.n	800c320 <_free_r+0x6c>
 800c308:	6820      	ldr	r0, [r4, #0]
 800c30a:	4401      	add	r1, r0
 800c30c:	1850      	adds	r0, r2, r1
 800c30e:	4283      	cmp	r3, r0
 800c310:	6011      	str	r1, [r2, #0]
 800c312:	d1e0      	bne.n	800c2d6 <_free_r+0x22>
 800c314:	6818      	ldr	r0, [r3, #0]
 800c316:	685b      	ldr	r3, [r3, #4]
 800c318:	6053      	str	r3, [r2, #4]
 800c31a:	4408      	add	r0, r1
 800c31c:	6010      	str	r0, [r2, #0]
 800c31e:	e7da      	b.n	800c2d6 <_free_r+0x22>
 800c320:	d902      	bls.n	800c328 <_free_r+0x74>
 800c322:	230c      	movs	r3, #12
 800c324:	602b      	str	r3, [r5, #0]
 800c326:	e7d6      	b.n	800c2d6 <_free_r+0x22>
 800c328:	6820      	ldr	r0, [r4, #0]
 800c32a:	1821      	adds	r1, r4, r0
 800c32c:	428b      	cmp	r3, r1
 800c32e:	bf04      	itt	eq
 800c330:	6819      	ldreq	r1, [r3, #0]
 800c332:	685b      	ldreq	r3, [r3, #4]
 800c334:	6063      	str	r3, [r4, #4]
 800c336:	bf04      	itt	eq
 800c338:	1809      	addeq	r1, r1, r0
 800c33a:	6021      	streq	r1, [r4, #0]
 800c33c:	6054      	str	r4, [r2, #4]
 800c33e:	e7ca      	b.n	800c2d6 <_free_r+0x22>
 800c340:	bd38      	pop	{r3, r4, r5, pc}
 800c342:	bf00      	nop
 800c344:	20000c2c 	.word	0x20000c2c

0800c348 <_malloc_usable_size_r>:
 800c348:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c34c:	1f18      	subs	r0, r3, #4
 800c34e:	2b00      	cmp	r3, #0
 800c350:	bfbc      	itt	lt
 800c352:	580b      	ldrlt	r3, [r1, r0]
 800c354:	18c0      	addlt	r0, r0, r3
 800c356:	4770      	bx	lr

0800c358 <_init>:
 800c358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c35a:	bf00      	nop
 800c35c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c35e:	bc08      	pop	{r3}
 800c360:	469e      	mov	lr, r3
 800c362:	4770      	bx	lr

0800c364 <_fini>:
 800c364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c366:	bf00      	nop
 800c368:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c36a:	bc08      	pop	{r3}
 800c36c:	469e      	mov	lr, r3
 800c36e:	4770      	bx	lr
