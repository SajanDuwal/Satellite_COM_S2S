
Satellite_COM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c3d0  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b90  0800c510  0800c510  0001c510  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d0a0  0800d0a0  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  0800d0a0  0800d0a0  0001d0a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d0a8  0800d0a8  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d0a8  0800d0a8  0001d0a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d0ac  0800d0ac  0001d0ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  0800d0b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c00  20000068  0800d118  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000c68  0800d118  00020c68  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020092  2**0
                  CONTENTS, READONLY
 13 .debug_info   00022337  00000000  00000000  000200d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004ef2  00000000  00000000  0004240c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001f48  00000000  00000000  00047300  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000017e4  00000000  00000000  00049248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022524  00000000  00000000  0004aa2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00023453  00000000  00000000  0006cf50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c4759  00000000  00000000  000903a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000085c4  00000000  00000000  00154afc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  0015d0c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000068 	.word	0x20000068
 800015c:	00000000 	.word	0x00000000
 8000160:	0800c4f8 	.word	0x0800c4f8

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000006c 	.word	0x2000006c
 800017c:	0800c4f8 	.word	0x0800c4f8

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000230:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000234:	f000 b970 	b.w	8000518 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9e08      	ldr	r6, [sp, #32]
 8000256:	460d      	mov	r5, r1
 8000258:	4604      	mov	r4, r0
 800025a:	460f      	mov	r7, r1
 800025c:	2b00      	cmp	r3, #0
 800025e:	d14a      	bne.n	80002f6 <__udivmoddi4+0xa6>
 8000260:	428a      	cmp	r2, r1
 8000262:	4694      	mov	ip, r2
 8000264:	d965      	bls.n	8000332 <__udivmoddi4+0xe2>
 8000266:	fab2 f382 	clz	r3, r2
 800026a:	b143      	cbz	r3, 800027e <__udivmoddi4+0x2e>
 800026c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000270:	f1c3 0220 	rsb	r2, r3, #32
 8000274:	409f      	lsls	r7, r3
 8000276:	fa20 f202 	lsr.w	r2, r0, r2
 800027a:	4317      	orrs	r7, r2
 800027c:	409c      	lsls	r4, r3
 800027e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000282:	fa1f f58c 	uxth.w	r5, ip
 8000286:	fbb7 f1fe 	udiv	r1, r7, lr
 800028a:	0c22      	lsrs	r2, r4, #16
 800028c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000290:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000294:	fb01 f005 	mul.w	r0, r1, r5
 8000298:	4290      	cmp	r0, r2
 800029a:	d90a      	bls.n	80002b2 <__udivmoddi4+0x62>
 800029c:	eb1c 0202 	adds.w	r2, ip, r2
 80002a0:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 80002a4:	f080 811b 	bcs.w	80004de <__udivmoddi4+0x28e>
 80002a8:	4290      	cmp	r0, r2
 80002aa:	f240 8118 	bls.w	80004de <__udivmoddi4+0x28e>
 80002ae:	3902      	subs	r1, #2
 80002b0:	4462      	add	r2, ip
 80002b2:	1a12      	subs	r2, r2, r0
 80002b4:	b2a4      	uxth	r4, r4
 80002b6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002ba:	fb0e 2210 	mls	r2, lr, r0, r2
 80002be:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002c2:	fb00 f505 	mul.w	r5, r0, r5
 80002c6:	42a5      	cmp	r5, r4
 80002c8:	d90a      	bls.n	80002e0 <__udivmoddi4+0x90>
 80002ca:	eb1c 0404 	adds.w	r4, ip, r4
 80002ce:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002d2:	f080 8106 	bcs.w	80004e2 <__udivmoddi4+0x292>
 80002d6:	42a5      	cmp	r5, r4
 80002d8:	f240 8103 	bls.w	80004e2 <__udivmoddi4+0x292>
 80002dc:	4464      	add	r4, ip
 80002de:	3802      	subs	r0, #2
 80002e0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002e4:	1b64      	subs	r4, r4, r5
 80002e6:	2100      	movs	r1, #0
 80002e8:	b11e      	cbz	r6, 80002f2 <__udivmoddi4+0xa2>
 80002ea:	40dc      	lsrs	r4, r3
 80002ec:	2300      	movs	r3, #0
 80002ee:	e9c6 4300 	strd	r4, r3, [r6]
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d908      	bls.n	800030c <__udivmoddi4+0xbc>
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	f000 80ec 	beq.w	80004d8 <__udivmoddi4+0x288>
 8000300:	2100      	movs	r1, #0
 8000302:	e9c6 0500 	strd	r0, r5, [r6]
 8000306:	4608      	mov	r0, r1
 8000308:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030c:	fab3 f183 	clz	r1, r3
 8000310:	2900      	cmp	r1, #0
 8000312:	d149      	bne.n	80003a8 <__udivmoddi4+0x158>
 8000314:	42ab      	cmp	r3, r5
 8000316:	d302      	bcc.n	800031e <__udivmoddi4+0xce>
 8000318:	4282      	cmp	r2, r0
 800031a:	f200 80f7 	bhi.w	800050c <__udivmoddi4+0x2bc>
 800031e:	1a84      	subs	r4, r0, r2
 8000320:	eb65 0203 	sbc.w	r2, r5, r3
 8000324:	2001      	movs	r0, #1
 8000326:	4617      	mov	r7, r2
 8000328:	2e00      	cmp	r6, #0
 800032a:	d0e2      	beq.n	80002f2 <__udivmoddi4+0xa2>
 800032c:	e9c6 4700 	strd	r4, r7, [r6]
 8000330:	e7df      	b.n	80002f2 <__udivmoddi4+0xa2>
 8000332:	b902      	cbnz	r2, 8000336 <__udivmoddi4+0xe6>
 8000334:	deff      	udf	#255	; 0xff
 8000336:	fab2 f382 	clz	r3, r2
 800033a:	2b00      	cmp	r3, #0
 800033c:	f040 808f 	bne.w	800045e <__udivmoddi4+0x20e>
 8000340:	1a8a      	subs	r2, r1, r2
 8000342:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000346:	fa1f fe8c 	uxth.w	lr, ip
 800034a:	2101      	movs	r1, #1
 800034c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000350:	fb07 2015 	mls	r0, r7, r5, r2
 8000354:	0c22      	lsrs	r2, r4, #16
 8000356:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800035a:	fb0e f005 	mul.w	r0, lr, r5
 800035e:	4290      	cmp	r0, r2
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x124>
 8000362:	eb1c 0202 	adds.w	r2, ip, r2
 8000366:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x122>
 800036c:	4290      	cmp	r0, r2
 800036e:	f200 80ca 	bhi.w	8000506 <__udivmoddi4+0x2b6>
 8000372:	4645      	mov	r5, r8
 8000374:	1a12      	subs	r2, r2, r0
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb2 f0f7 	udiv	r0, r2, r7
 800037c:	fb07 2210 	mls	r2, r7, r0, r2
 8000380:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000384:	fb0e fe00 	mul.w	lr, lr, r0
 8000388:	45a6      	cmp	lr, r4
 800038a:	d908      	bls.n	800039e <__udivmoddi4+0x14e>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000394:	d202      	bcs.n	800039c <__udivmoddi4+0x14c>
 8000396:	45a6      	cmp	lr, r4
 8000398:	f200 80ba 	bhi.w	8000510 <__udivmoddi4+0x2c0>
 800039c:	4610      	mov	r0, r2
 800039e:	eba4 040e 	sub.w	r4, r4, lr
 80003a2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003a6:	e79f      	b.n	80002e8 <__udivmoddi4+0x98>
 80003a8:	f1c1 0720 	rsb	r7, r1, #32
 80003ac:	408b      	lsls	r3, r1
 80003ae:	fa22 fc07 	lsr.w	ip, r2, r7
 80003b2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003b6:	fa05 f401 	lsl.w	r4, r5, r1
 80003ba:	fa20 f307 	lsr.w	r3, r0, r7
 80003be:	40fd      	lsrs	r5, r7
 80003c0:	4323      	orrs	r3, r4
 80003c2:	fa00 f901 	lsl.w	r9, r0, r1
 80003c6:	ea4f 401c 	mov.w	r0, ip, lsr #16
 80003ca:	fa1f fe8c 	uxth.w	lr, ip
 80003ce:	fbb5 f8f0 	udiv	r8, r5, r0
 80003d2:	0c1c      	lsrs	r4, r3, #16
 80003d4:	fb00 5518 	mls	r5, r0, r8, r5
 80003d8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003dc:	fb08 f50e 	mul.w	r5, r8, lr
 80003e0:	42a5      	cmp	r5, r4
 80003e2:	fa02 f201 	lsl.w	r2, r2, r1
 80003e6:	d90b      	bls.n	8000400 <__udivmoddi4+0x1b0>
 80003e8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ec:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003f0:	f080 8087 	bcs.w	8000502 <__udivmoddi4+0x2b2>
 80003f4:	42a5      	cmp	r5, r4
 80003f6:	f240 8084 	bls.w	8000502 <__udivmoddi4+0x2b2>
 80003fa:	f1a8 0802 	sub.w	r8, r8, #2
 80003fe:	4464      	add	r4, ip
 8000400:	1b64      	subs	r4, r4, r5
 8000402:	b29d      	uxth	r5, r3
 8000404:	fbb4 f3f0 	udiv	r3, r4, r0
 8000408:	fb00 4413 	mls	r4, r0, r3, r4
 800040c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000410:	fb03 fe0e 	mul.w	lr, r3, lr
 8000414:	45a6      	cmp	lr, r4
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x1da>
 8000418:	eb1c 0404 	adds.w	r4, ip, r4
 800041c:	f103 30ff 	add.w	r0, r3, #4294967295	; 0xffffffff
 8000420:	d26b      	bcs.n	80004fa <__udivmoddi4+0x2aa>
 8000422:	45a6      	cmp	lr, r4
 8000424:	d969      	bls.n	80004fa <__udivmoddi4+0x2aa>
 8000426:	3b02      	subs	r3, #2
 8000428:	4464      	add	r4, ip
 800042a:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 800042e:	fba0 8302 	umull	r8, r3, r0, r2
 8000432:	eba4 040e 	sub.w	r4, r4, lr
 8000436:	429c      	cmp	r4, r3
 8000438:	46c6      	mov	lr, r8
 800043a:	461d      	mov	r5, r3
 800043c:	d355      	bcc.n	80004ea <__udivmoddi4+0x29a>
 800043e:	d052      	beq.n	80004e6 <__udivmoddi4+0x296>
 8000440:	b156      	cbz	r6, 8000458 <__udivmoddi4+0x208>
 8000442:	ebb9 030e 	subs.w	r3, r9, lr
 8000446:	eb64 0405 	sbc.w	r4, r4, r5
 800044a:	fa04 f707 	lsl.w	r7, r4, r7
 800044e:	40cb      	lsrs	r3, r1
 8000450:	40cc      	lsrs	r4, r1
 8000452:	431f      	orrs	r7, r3
 8000454:	e9c6 7400 	strd	r7, r4, [r6]
 8000458:	2100      	movs	r1, #0
 800045a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045e:	f1c3 0120 	rsb	r1, r3, #32
 8000462:	fa02 fc03 	lsl.w	ip, r2, r3
 8000466:	fa20 f201 	lsr.w	r2, r0, r1
 800046a:	fa25 f101 	lsr.w	r1, r5, r1
 800046e:	409d      	lsls	r5, r3
 8000470:	432a      	orrs	r2, r5
 8000472:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000476:	fa1f fe8c 	uxth.w	lr, ip
 800047a:	fbb1 f0f7 	udiv	r0, r1, r7
 800047e:	fb07 1510 	mls	r5, r7, r0, r1
 8000482:	0c11      	lsrs	r1, r2, #16
 8000484:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000488:	fb00 f50e 	mul.w	r5, r0, lr
 800048c:	428d      	cmp	r5, r1
 800048e:	fa04 f403 	lsl.w	r4, r4, r3
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x256>
 8000494:	eb1c 0101 	adds.w	r1, ip, r1
 8000498:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800049c:	d22f      	bcs.n	80004fe <__udivmoddi4+0x2ae>
 800049e:	428d      	cmp	r5, r1
 80004a0:	d92d      	bls.n	80004fe <__udivmoddi4+0x2ae>
 80004a2:	3802      	subs	r0, #2
 80004a4:	4461      	add	r1, ip
 80004a6:	1b49      	subs	r1, r1, r5
 80004a8:	b292      	uxth	r2, r2
 80004aa:	fbb1 f5f7 	udiv	r5, r1, r7
 80004ae:	fb07 1115 	mls	r1, r7, r5, r1
 80004b2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b6:	fb05 f10e 	mul.w	r1, r5, lr
 80004ba:	4291      	cmp	r1, r2
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x280>
 80004be:	eb1c 0202 	adds.w	r2, ip, r2
 80004c2:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004c6:	d216      	bcs.n	80004f6 <__udivmoddi4+0x2a6>
 80004c8:	4291      	cmp	r1, r2
 80004ca:	d914      	bls.n	80004f6 <__udivmoddi4+0x2a6>
 80004cc:	3d02      	subs	r5, #2
 80004ce:	4462      	add	r2, ip
 80004d0:	1a52      	subs	r2, r2, r1
 80004d2:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d6:	e739      	b.n	800034c <__udivmoddi4+0xfc>
 80004d8:	4631      	mov	r1, r6
 80004da:	4630      	mov	r0, r6
 80004dc:	e709      	b.n	80002f2 <__udivmoddi4+0xa2>
 80004de:	4639      	mov	r1, r7
 80004e0:	e6e7      	b.n	80002b2 <__udivmoddi4+0x62>
 80004e2:	4610      	mov	r0, r2
 80004e4:	e6fc      	b.n	80002e0 <__udivmoddi4+0x90>
 80004e6:	45c1      	cmp	r9, r8
 80004e8:	d2aa      	bcs.n	8000440 <__udivmoddi4+0x1f0>
 80004ea:	ebb8 0e02 	subs.w	lr, r8, r2
 80004ee:	eb63 050c 	sbc.w	r5, r3, ip
 80004f2:	3801      	subs	r0, #1
 80004f4:	e7a4      	b.n	8000440 <__udivmoddi4+0x1f0>
 80004f6:	4645      	mov	r5, r8
 80004f8:	e7ea      	b.n	80004d0 <__udivmoddi4+0x280>
 80004fa:	4603      	mov	r3, r0
 80004fc:	e795      	b.n	800042a <__udivmoddi4+0x1da>
 80004fe:	4640      	mov	r0, r8
 8000500:	e7d1      	b.n	80004a6 <__udivmoddi4+0x256>
 8000502:	46d0      	mov	r8, sl
 8000504:	e77c      	b.n	8000400 <__udivmoddi4+0x1b0>
 8000506:	3d02      	subs	r5, #2
 8000508:	4462      	add	r2, ip
 800050a:	e733      	b.n	8000374 <__udivmoddi4+0x124>
 800050c:	4608      	mov	r0, r1
 800050e:	e70b      	b.n	8000328 <__udivmoddi4+0xd8>
 8000510:	4464      	add	r4, ip
 8000512:	3802      	subs	r0, #2
 8000514:	e743      	b.n	800039e <__udivmoddi4+0x14e>
 8000516:	bf00      	nop

08000518 <__aeabi_idiv0>:
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop

0800051c <updatePacket>:
uint8_t ax_buffer[150] = { 0 };
uint8_t ax_buff_stuffed[150] = { 0 };

uint8_t info_packet[INFO_LENGTH];

void updatePacket(uint8_t *OBC_Rx_buffer) {
 800051c:	b480      	push	{r7}
 800051e:	b087      	sub	sp, #28
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
	info_packet[0] = OBC_Rx_buffer[1];  	// Packet Type
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	785a      	ldrb	r2, [r3, #1]
 8000528:	4b14      	ldr	r3, [pc, #80]	; (800057c <updatePacket+0x60>)
 800052a:	701a      	strb	r2, [r3, #0]
	int j = 1;
 800052c:	2301      	movs	r3, #1
 800052e:	617b      	str	r3, [r7, #20]
	int k = 3;
 8000530:	2303      	movs	r3, #3
 8000532:	613b      	str	r3, [r7, #16]
	int len_of_payload = OBC_Rx_buffer[2];  // length of info_field
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	3302      	adds	r3, #2
 8000538:	781b      	ldrb	r3, [r3, #0]
 800053a:	60bb      	str	r3, [r7, #8]
//	myDebug("\nlen_of_payload: %d\r\n", len_of_payload);
	for (int i = 0; i < len_of_payload; i++) {
 800053c:	2300      	movs	r3, #0
 800053e:	60fb      	str	r3, [r7, #12]
 8000540:	e011      	b.n	8000566 <updatePacket+0x4a>
		info_packet[j] = OBC_Rx_buffer[k];
 8000542:	693b      	ldr	r3, [r7, #16]
 8000544:	687a      	ldr	r2, [r7, #4]
 8000546:	4413      	add	r3, r2
 8000548:	7819      	ldrb	r1, [r3, #0]
 800054a:	4a0c      	ldr	r2, [pc, #48]	; (800057c <updatePacket+0x60>)
 800054c:	697b      	ldr	r3, [r7, #20]
 800054e:	4413      	add	r3, r2
 8000550:	460a      	mov	r2, r1
 8000552:	701a      	strb	r2, [r3, #0]
		j++;
 8000554:	697b      	ldr	r3, [r7, #20]
 8000556:	3301      	adds	r3, #1
 8000558:	617b      	str	r3, [r7, #20]
		k++;
 800055a:	693b      	ldr	r3, [r7, #16]
 800055c:	3301      	adds	r3, #1
 800055e:	613b      	str	r3, [r7, #16]
	for (int i = 0; i < len_of_payload; i++) {
 8000560:	68fb      	ldr	r3, [r7, #12]
 8000562:	3301      	adds	r3, #1
 8000564:	60fb      	str	r3, [r7, #12]
 8000566:	68fa      	ldr	r2, [r7, #12]
 8000568:	68bb      	ldr	r3, [r7, #8]
 800056a:	429a      	cmp	r2, r3
 800056c:	dbe9      	blt.n	8000542 <updatePacket+0x26>
//	myDebug("info_packet: 0x%x\r\n", info_packet);
//	for (int i = 0; i < len_of_payload; i++) {
//		myDebug("%02x ", info_packet[i]);
//	}
//	myDebug("\r\n");
}
 800056e:	bf00      	nop
 8000570:	bf00      	nop
 8000572:	371c      	adds	r7, #28
 8000574:	46bd      	mov	sp, r7
 8000576:	bc80      	pop	{r7}
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop
 800057c:	200001b4 	.word	0x200001b4

08000580 <getHDLCPacket>:

void getHDLCPacket(uint8_t *data, uint8_t data_len) {
 8000580:	b580      	push	{r7, lr}
 8000582:	b086      	sub	sp, #24
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
 8000588:	460b      	mov	r3, r1
 800058a:	70fb      	strb	r3, [r7, #3]
//	for (int j = 0; j < data_len; j++) {
//		myDebug("%02x ", data[j]);
//	}
//	myDebug("\r\n");

	uint16_t crc = 0;
 800058c:	2300      	movs	r3, #0
 800058e:	81fb      	strh	r3, [r7, #14]
	crc = calculateCRC_CCITT_AX25(data, data_len);
 8000590:	78fb      	ldrb	r3, [r7, #3]
 8000592:	4619      	mov	r1, r3
 8000594:	6878      	ldr	r0, [r7, #4]
 8000596:	f000 f965 	bl	8000864 <calculateCRC_CCITT_AX25>
 800059a:	4603      	mov	r3, r0
 800059c:	81fb      	strh	r3, [r7, #14]

	temp_tx_buffer[0] = 0x7e;
 800059e:	4b22      	ldr	r3, [pc, #136]	; (8000628 <getHDLCPacket+0xa8>)
 80005a0:	227e      	movs	r2, #126	; 0x7e
 80005a2:	701a      	strb	r2, [r3, #0]

	int i = 1;
 80005a4:	2301      	movs	r3, #1
 80005a6:	617b      	str	r3, [r7, #20]
	for (int k = 0; k < data_len; k++) {
 80005a8:	2300      	movs	r3, #0
 80005aa:	613b      	str	r3, [r7, #16]
 80005ac:	e00e      	b.n	80005cc <getHDLCPacket+0x4c>
		temp_tx_buffer[i] = data[k];
 80005ae:	693b      	ldr	r3, [r7, #16]
 80005b0:	687a      	ldr	r2, [r7, #4]
 80005b2:	4413      	add	r3, r2
 80005b4:	7819      	ldrb	r1, [r3, #0]
 80005b6:	4a1c      	ldr	r2, [pc, #112]	; (8000628 <getHDLCPacket+0xa8>)
 80005b8:	697b      	ldr	r3, [r7, #20]
 80005ba:	4413      	add	r3, r2
 80005bc:	460a      	mov	r2, r1
 80005be:	701a      	strb	r2, [r3, #0]
		i++;
 80005c0:	697b      	ldr	r3, [r7, #20]
 80005c2:	3301      	adds	r3, #1
 80005c4:	617b      	str	r3, [r7, #20]
	for (int k = 0; k < data_len; k++) {
 80005c6:	693b      	ldr	r3, [r7, #16]
 80005c8:	3301      	adds	r3, #1
 80005ca:	613b      	str	r3, [r7, #16]
 80005cc:	78fb      	ldrb	r3, [r7, #3]
 80005ce:	693a      	ldr	r2, [r7, #16]
 80005d0:	429a      	cmp	r2, r3
 80005d2:	dbec      	blt.n	80005ae <getHDLCPacket+0x2e>
	}

	// Store CRC result in the packet array
	temp_tx_buffer[i] = (crc >> 8) & 0xFF; // Most significant byte
 80005d4:	89fb      	ldrh	r3, [r7, #14]
 80005d6:	0a1b      	lsrs	r3, r3, #8
 80005d8:	b29b      	uxth	r3, r3
 80005da:	b2d9      	uxtb	r1, r3
 80005dc:	4a12      	ldr	r2, [pc, #72]	; (8000628 <getHDLCPacket+0xa8>)
 80005de:	697b      	ldr	r3, [r7, #20]
 80005e0:	4413      	add	r3, r2
 80005e2:	460a      	mov	r2, r1
 80005e4:	701a      	strb	r2, [r3, #0]
	i++;
 80005e6:	697b      	ldr	r3, [r7, #20]
 80005e8:	3301      	adds	r3, #1
 80005ea:	617b      	str	r3, [r7, #20]
	temp_tx_buffer[i] = crc & 0xFF;        // Least significant byte
 80005ec:	89fb      	ldrh	r3, [r7, #14]
 80005ee:	b2d9      	uxtb	r1, r3
 80005f0:	4a0d      	ldr	r2, [pc, #52]	; (8000628 <getHDLCPacket+0xa8>)
 80005f2:	697b      	ldr	r3, [r7, #20]
 80005f4:	4413      	add	r3, r2
 80005f6:	460a      	mov	r2, r1
 80005f8:	701a      	strb	r2, [r3, #0]
	i++;
 80005fa:	697b      	ldr	r3, [r7, #20]
 80005fc:	3301      	adds	r3, #1
 80005fe:	617b      	str	r3, [r7, #20]

	temp_tx_buffer[i] = 0x7e;
 8000600:	4a09      	ldr	r2, [pc, #36]	; (8000628 <getHDLCPacket+0xa8>)
 8000602:	697b      	ldr	r3, [r7, #20]
 8000604:	4413      	add	r3, r2
 8000606:	227e      	movs	r2, #126	; 0x7e
 8000608:	701a      	strb	r2, [r3, #0]
//	for (int j = 0; j < destuffed_size - 1; j++) {
//		myDebug("%02x ", tem[j]);
//	}
//	myDebug("\r\n");

	memset(ax_buffer, '\0', sizeof(ax_buffer));
 800060a:	2296      	movs	r2, #150	; 0x96
 800060c:	2100      	movs	r1, #0
 800060e:	4807      	ldr	r0, [pc, #28]	; (800062c <getHDLCPacket+0xac>)
 8000610:	f00b faf0 	bl	800bbf4 <memset>
	memset(ax_buff_stuffed, '\0', sizeof(ax_buff_stuffed));
 8000614:	2296      	movs	r2, #150	; 0x96
 8000616:	2100      	movs	r1, #0
 8000618:	4805      	ldr	r0, [pc, #20]	; (8000630 <getHDLCPacket+0xb0>)
 800061a:	f00b faeb 	bl	800bbf4 <memset>

}
 800061e:	bf00      	nop
 8000620:	3718      	adds	r7, #24
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	200003a0 	.word	0x200003a0
 800062c:	20000084 	.word	0x20000084
 8000630:	2000011c 	.word	0x2000011c

08000634 <getAX25Packet>:

void getAX25Packet(uint8_t *OBC_data_Field, uint8_t size) {
 8000634:	b580      	push	{r7, lr}
 8000636:	b086      	sub	sp, #24
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
 800063c:	460b      	mov	r3, r1
 800063e:	70fb      	strb	r3, [r7, #3]

	updatePacket(OBC_data_Field);
 8000640:	6878      	ldr	r0, [r7, #4]
 8000642:	f7ff ff6b 	bl	800051c <updatePacket>

	//destination field   9N2SI -0
	ax_buffer[0] = 0x72; //	ASCII->9, HEX->0x39, 1 bit shifted->0b01110010, Shifted HEX->0x72
 8000646:	4b2f      	ldr	r3, [pc, #188]	; (8000704 <getAX25Packet+0xd0>)
 8000648:	2272      	movs	r2, #114	; 0x72
 800064a:	701a      	strb	r2, [r3, #0]
	ax_buffer[1] = 0x9C; //	ASCII->N, HEX->0x4E, 1 bit shifted->0b10011100, Shifted HEX->0x9C
 800064c:	4b2d      	ldr	r3, [pc, #180]	; (8000704 <getAX25Packet+0xd0>)
 800064e:	229c      	movs	r2, #156	; 0x9c
 8000650:	705a      	strb	r2, [r3, #1]
	ax_buffer[2] = 0x64; //	ASCII->2, HEX->0x32, 1 bit shifted->0b01100100, Shifted HEX->0x64
 8000652:	4b2c      	ldr	r3, [pc, #176]	; (8000704 <getAX25Packet+0xd0>)
 8000654:	2264      	movs	r2, #100	; 0x64
 8000656:	709a      	strb	r2, [r3, #2]
	ax_buffer[3] = 0xA6; //	ASCII->S, HEX->0x53, 1 bit shifted->0b10100110, Shifted HEX->0xA6
 8000658:	4b2a      	ldr	r3, [pc, #168]	; (8000704 <getAX25Packet+0xd0>)
 800065a:	22a6      	movs	r2, #166	; 0xa6
 800065c:	70da      	strb	r2, [r3, #3]
	ax_buffer[4] = 0x64; //	ASCII->I, HEX->0x49, 1 bit shifted->0b10010010, Shifted HEX->0x92
 800065e:	4b29      	ldr	r3, [pc, #164]	; (8000704 <getAX25Packet+0xd0>)
 8000660:	2264      	movs	r2, #100	; 0x64
 8000662:	711a      	strb	r2, [r3, #4]
	ax_buffer[5] = 0x40; //	ASCII-> , HEX->0x20, 1 bit shifted->0b01000000, Shifted HEX->0x40
 8000664:	4b27      	ldr	r3, [pc, #156]	; (8000704 <getAX25Packet+0xd0>)
 8000666:	2240      	movs	r2, #64	; 0x40
 8000668:	715a      	strb	r2, [r3, #5]
	ax_buffer[6] = 0xE0; //	0b111SSID0, SSID->0000 and LSB is set to 0; if more addresses follow, HEX->0xE0
 800066a:	4b26      	ldr	r3, [pc, #152]	; (8000704 <getAX25Packet+0xd0>)
 800066c:	22e0      	movs	r2, #224	; 0xe0
 800066e:	719a      	strb	r2, [r3, #6]

	//source field   9N2SI -0
	ax_buffer[7] = 0x72; //	ASCII->9, HEX->0x39, 1 bit shifted->0b01110010, Shifted HEX->0x72
 8000670:	4b24      	ldr	r3, [pc, #144]	; (8000704 <getAX25Packet+0xd0>)
 8000672:	2272      	movs	r2, #114	; 0x72
 8000674:	71da      	strb	r2, [r3, #7]
	ax_buffer[8] = 0x9C; //	ASCII->N, HEX->0x4E, 1 bit shifted->0b10011100, Shifted HEX->0x9C
 8000676:	4b23      	ldr	r3, [pc, #140]	; (8000704 <getAX25Packet+0xd0>)
 8000678:	229c      	movs	r2, #156	; 0x9c
 800067a:	721a      	strb	r2, [r3, #8]
	ax_buffer[9] = 0x64; //	ASCII->2, HEX->0x32, 1 bit shifted->0b01100100, Shifted HEX->0x64
 800067c:	4b21      	ldr	r3, [pc, #132]	; (8000704 <getAX25Packet+0xd0>)
 800067e:	2264      	movs	r2, #100	; 0x64
 8000680:	725a      	strb	r2, [r3, #9]
	ax_buffer[10] = 0xA6; //	ASCII->S, HEX->0x53, 1 bit shifted->0b10100110, Shifted HEX->0xA6
 8000682:	4b20      	ldr	r3, [pc, #128]	; (8000704 <getAX25Packet+0xd0>)
 8000684:	22a6      	movs	r2, #166	; 0xa6
 8000686:	729a      	strb	r2, [r3, #10]
	ax_buffer[11] = 0x64; //	ASCII->I, HEX->0x49, 1 bit shifted->0b10010010, Shifted HEX->0x92
 8000688:	4b1e      	ldr	r3, [pc, #120]	; (8000704 <getAX25Packet+0xd0>)
 800068a:	2264      	movs	r2, #100	; 0x64
 800068c:	72da      	strb	r2, [r3, #11]
	ax_buffer[12] = 0x40; //	ASCII-> , HEX->0x20, 1 bit shifted->0b01000000, Shifted HEX->0x40
 800068e:	4b1d      	ldr	r3, [pc, #116]	; (8000704 <getAX25Packet+0xd0>)
 8000690:	2240      	movs	r2, #64	; 0x40
 8000692:	731a      	strb	r2, [r3, #12]
	ax_buffer[13] = 0x61; //	0b011SSID1, SSID->0000 and LSB is set to 1 if this is the last address, HEX->0x61
 8000694:	4b1b      	ldr	r3, [pc, #108]	; (8000704 <getAX25Packet+0xd0>)
 8000696:	2261      	movs	r2, #97	; 0x61
 8000698:	735a      	strb	r2, [r3, #13]

	//control bit
	ax_buffer[14] = 0x03; //  Unnumbered Information Frame, AX.25 is always 0b00000011 i.e 0x03 in HEX
 800069a:	4b1a      	ldr	r3, [pc, #104]	; (8000704 <getAX25Packet+0xd0>)
 800069c:	2203      	movs	r2, #3
 800069e:	739a      	strb	r2, [r3, #14]

	//protocol identifier
	ax_buffer[15] = 0xF0; //	No Layer-3 Implemented so, 0b11110000 i.e 0xF0 in HEX
 80006a0:	4b18      	ldr	r3, [pc, #96]	; (8000704 <getAX25Packet+0xd0>)
 80006a2:	22f0      	movs	r2, #240	; 0xf0
 80006a4:	73da      	strb	r2, [r3, #15]

	int i = 16;
 80006a6:	2310      	movs	r3, #16
 80006a8:	617b      	str	r3, [r7, #20]

	for (int k = 0; k < size; k++) {
 80006aa:	2300      	movs	r3, #0
 80006ac:	613b      	str	r3, [r7, #16]
 80006ae:	e00e      	b.n	80006ce <getAX25Packet+0x9a>
		ax_buffer[i] = info_packet[k];
 80006b0:	4a15      	ldr	r2, [pc, #84]	; (8000708 <getAX25Packet+0xd4>)
 80006b2:	693b      	ldr	r3, [r7, #16]
 80006b4:	4413      	add	r3, r2
 80006b6:	7819      	ldrb	r1, [r3, #0]
 80006b8:	4a12      	ldr	r2, [pc, #72]	; (8000704 <getAX25Packet+0xd0>)
 80006ba:	697b      	ldr	r3, [r7, #20]
 80006bc:	4413      	add	r3, r2
 80006be:	460a      	mov	r2, r1
 80006c0:	701a      	strb	r2, [r3, #0]
		i++;
 80006c2:	697b      	ldr	r3, [r7, #20]
 80006c4:	3301      	adds	r3, #1
 80006c6:	617b      	str	r3, [r7, #20]
	for (int k = 0; k < size; k++) {
 80006c8:	693b      	ldr	r3, [r7, #16]
 80006ca:	3301      	adds	r3, #1
 80006cc:	613b      	str	r3, [r7, #16]
 80006ce:	78fb      	ldrb	r3, [r7, #3]
 80006d0:	693a      	ldr	r2, [r7, #16]
 80006d2:	429a      	cmp	r2, r3
 80006d4:	dbec      	blt.n	80006b0 <getAX25Packet+0x7c>
	}

//	myDebug("Before Bit stuffing:");
	myDebug("\nReal Data, Length: %d bytes", i);
 80006d6:	6979      	ldr	r1, [r7, #20]
 80006d8:	480c      	ldr	r0, [pc, #48]	; (800070c <getAX25Packet+0xd8>)
 80006da:	f000 f837 	bl	800074c <myDebug>
	myDebug("\r\n");
 80006de:	480c      	ldr	r0, [pc, #48]	; (8000710 <getAX25Packet+0xdc>)
 80006e0:	f000 f834 	bl	800074c <myDebug>
//		myDebug("%02x ", ax_buffer[j]);
//	}
//	myDebug("\r\n");

	// Bit Stuffing
	int stuffed_size = bit_stuffing(ax_buffer, ax_buff_stuffed, i);
 80006e4:	697a      	ldr	r2, [r7, #20]
 80006e6:	490b      	ldr	r1, [pc, #44]	; (8000714 <getAX25Packet+0xe0>)
 80006e8:	4806      	ldr	r0, [pc, #24]	; (8000704 <getAX25Packet+0xd0>)
 80006ea:	f000 f8fa 	bl	80008e2 <bit_stuffing>
 80006ee:	60f8      	str	r0, [r7, #12]

	getHDLCPacket(ax_buff_stuffed, stuffed_size);
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	b2db      	uxtb	r3, r3
 80006f4:	4619      	mov	r1, r3
 80006f6:	4807      	ldr	r0, [pc, #28]	; (8000714 <getAX25Packet+0xe0>)
 80006f8:	f7ff ff42 	bl	8000580 <getHDLCPacket>
}
 80006fc:	bf00      	nop
 80006fe:	3718      	adds	r7, #24
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	20000084 	.word	0x20000084
 8000708:	200001b4 	.word	0x200001b4
 800070c:	0800c510 	.word	0x0800c510
 8000710:	0800c530 	.word	0x0800c530
 8000714:	2000011c 	.word	0x2000011c

08000718 <delay_us>:
 *      Author: sajanduwal
 */

#include "com_debug.h"

void delay_us(uint32_t us) {
 8000718:	b480      	push	{r7}
 800071a:	b085      	sub	sp, #20
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
	uint32_t delay_counter_disp;
	__HAL_TIM_SET_COUNTER(&htim2, 0);  // set the counter value a 0
 8000720:	4b09      	ldr	r3, [pc, #36]	; (8000748 <delay_us+0x30>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	2200      	movs	r2, #0
 8000726:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim2) < us)
 8000728:	e002      	b.n	8000730 <delay_us+0x18>
		delay_counter_disp++;
 800072a:	68fb      	ldr	r3, [r7, #12]
 800072c:	3301      	adds	r3, #1
 800072e:	60fb      	str	r3, [r7, #12]
	while (__HAL_TIM_GET_COUNTER(&htim2) < us)
 8000730:	4b05      	ldr	r3, [pc, #20]	; (8000748 <delay_us+0x30>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000736:	687a      	ldr	r2, [r7, #4]
 8000738:	429a      	cmp	r2, r3
 800073a:	d8f6      	bhi.n	800072a <delay_us+0x12>
	// wait for the counter to reach the us input in the parameter
}
 800073c:	bf00      	nop
 800073e:	bf00      	nop
 8000740:	3714      	adds	r7, #20
 8000742:	46bd      	mov	sp, r7
 8000744:	bc80      	pop	{r7}
 8000746:	4770      	bx	lr
 8000748:	20000510 	.word	0x20000510

0800074c <myDebug>:

void myDebug(const char *fmt, ...) {
 800074c:	b40f      	push	{r0, r1, r2, r3}
 800074e:	b580      	push	{r7, lr}
 8000750:	b082      	sub	sp, #8
 8000752:	af00      	add	r7, sp, #0
	static char temp[100];
	va_list args;
	va_start(args, fmt);
 8000754:	f107 0314 	add.w	r3, r7, #20
 8000758:	603b      	str	r3, [r7, #0]
	vsnprintf(temp, sizeof(temp), fmt, args);
 800075a:	683b      	ldr	r3, [r7, #0]
 800075c:	693a      	ldr	r2, [r7, #16]
 800075e:	2164      	movs	r1, #100	; 0x64
 8000760:	480a      	ldr	r0, [pc, #40]	; (800078c <myDebug+0x40>)
 8000762:	f00b fa39 	bl	800bbd8 <vsniprintf>
	va_end(args);
	int len = bufferSize(temp);
 8000766:	4809      	ldr	r0, [pc, #36]	; (800078c <myDebug+0x40>)
 8000768:	f000 f814 	bl	8000794 <bufferSize>
 800076c:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*) temp, len, 1000);
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	b29a      	uxth	r2, r3
 8000772:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000776:	4905      	ldr	r1, [pc, #20]	; (800078c <myDebug+0x40>)
 8000778:	4805      	ldr	r0, [pc, #20]	; (8000790 <myDebug+0x44>)
 800077a:	f006 f800 	bl	800677e <HAL_UART_Transmit>
}
 800077e:	bf00      	nop
 8000780:	3708      	adds	r7, #8
 8000782:	46bd      	mov	sp, r7
 8000784:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000788:	b004      	add	sp, #16
 800078a:	4770      	bx	lr
 800078c:	20000218 	.word	0x20000218
 8000790:	200005f4 	.word	0x200005f4

08000794 <bufferSize>:

int bufferSize(char *buffer) {
 8000794:	b480      	push	{r7}
 8000796:	b085      	sub	sp, #20
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
	int i = 0;
 800079c:	2300      	movs	r3, #0
 800079e:	60fb      	str	r3, [r7, #12]
	while (*buffer++ != '\0')
 80007a0:	e002      	b.n	80007a8 <bufferSize+0x14>
		i++;
 80007a2:	68fb      	ldr	r3, [r7, #12]
 80007a4:	3301      	adds	r3, #1
 80007a6:	60fb      	str	r3, [r7, #12]
	while (*buffer++ != '\0')
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	1c5a      	adds	r2, r3, #1
 80007ac:	607a      	str	r2, [r7, #4]
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d1f6      	bne.n	80007a2 <bufferSize+0xe>
	return i;
 80007b4:	68fb      	ldr	r3, [r7, #12]
}
 80007b6:	4618      	mov	r0, r3
 80007b8:	3714      	adds	r7, #20
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bc80      	pop	{r7}
 80007be:	4770      	bx	lr

080007c0 <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_DMAMUX1
  *         @arg @ref LL_AHB1_GRP1_PERIPH_CRC
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80007c0:	b480      	push	{r7}
 80007c2:	b085      	sub	sp, #20
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80007c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007cc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80007ce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	4313      	orrs	r3, r2
 80007d6:	648b      	str	r3, [r1, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80007d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007dc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	4013      	ands	r3, r2
 80007e2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80007e4:	68fb      	ldr	r3, [r7, #12]
}
 80007e6:	bf00      	nop
 80007e8:	3714      	adds	r7, #20
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bc80      	pop	{r7}
 80007ee:	4770      	bx	lr

080007f0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80007f4:	2004      	movs	r0, #4
 80007f6:	f7ff ffe3 	bl	80007c0 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007fa:	2001      	movs	r0, #1
 80007fc:	f7ff ffe0 	bl	80007c0 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000800:	2200      	movs	r2, #0
 8000802:	2100      	movs	r1, #0
 8000804:	200b      	movs	r0, #11
 8000806:	f002 ff74 	bl	80036f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800080a:	200b      	movs	r0, #11
 800080c:	f002 ff8b 	bl	8003726 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000810:	2200      	movs	r2, #0
 8000812:	2100      	movs	r1, #0
 8000814:	200c      	movs	r0, #12
 8000816:	f002 ff6c 	bl	80036f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800081a:	200c      	movs	r0, #12
 800081c:	f002 ff83 	bl	8003726 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000820:	2200      	movs	r2, #0
 8000822:	2100      	movs	r1, #0
 8000824:	200d      	movs	r0, #13
 8000826:	f002 ff64 	bl	80036f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 800082a:	200d      	movs	r0, #13
 800082c:	f002 ff7b 	bl	8003726 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000830:	2200      	movs	r2, #0
 8000832:	2100      	movs	r1, #0
 8000834:	200e      	movs	r0, #14
 8000836:	f002 ff5c 	bl	80036f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 800083a:	200e      	movs	r0, #14
 800083c:	f002 ff73 	bl	8003726 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000840:	2200      	movs	r2, #0
 8000842:	2100      	movs	r1, #0
 8000844:	200f      	movs	r0, #15
 8000846:	f002 ff54 	bl	80036f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800084a:	200f      	movs	r0, #15
 800084c:	f002 ff6b 	bl	8003726 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8000850:	2200      	movs	r2, #0
 8000852:	2100      	movs	r1, #0
 8000854:	2010      	movs	r0, #16
 8000856:	f002 ff4c 	bl	80036f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 800085a:	2010      	movs	r0, #16
 800085c:	f002 ff63 	bl	8003726 <HAL_NVIC_EnableIRQ>

}
 8000860:	bf00      	nop
 8000862:	bd80      	pop	{r7, pc}

08000864 <calculateCRC_CCITT_AX25>:
 */

#include "error_handler.h"

// Function to calculate CRC-CCITT for AX.25 frames
uint16_t calculateCRC_CCITT_AX25(const uint8_t *data, size_t length) {
 8000864:	b480      	push	{r7}
 8000866:	b087      	sub	sp, #28
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
 800086c:	6039      	str	r1, [r7, #0]
	uint16_t crc = 0xFFFF; // Initialize CRC register with 0xFFFF
 800086e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000872:	82fb      	strh	r3, [r7, #22]
	uint16_t CRC_POLY = 0x1021; // CRC polynomial for CCITT (0x1021)
 8000874:	f241 0321 	movw	r3, #4129	; 0x1021
 8000878:	817b      	strh	r3, [r7, #10]

	// Iterate through each byte of the input data
	for (size_t i = 0; i < length; i++) {
 800087a:	2300      	movs	r3, #0
 800087c:	613b      	str	r3, [r7, #16]
 800087e:	e026      	b.n	80008ce <calculateCRC_CCITT_AX25+0x6a>
		crc ^= ((uint16_t) data[i] << 8); // XOR CRC with next byte of input data
 8000880:	687a      	ldr	r2, [r7, #4]
 8000882:	693b      	ldr	r3, [r7, #16]
 8000884:	4413      	add	r3, r2
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	021b      	lsls	r3, r3, #8
 800088a:	b21a      	sxth	r2, r3
 800088c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000890:	4053      	eors	r3, r2
 8000892:	b21b      	sxth	r3, r3
 8000894:	82fb      	strh	r3, [r7, #22]

		// Iterate through each bit of the current byte
		for (int j = 0; j < 8; j++) {
 8000896:	2300      	movs	r3, #0
 8000898:	60fb      	str	r3, [r7, #12]
 800089a:	e012      	b.n	80008c2 <calculateCRC_CCITT_AX25+0x5e>
			if (crc & 0x8000) { // If MSB of CRC is 1
 800089c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	da08      	bge.n	80008b6 <calculateCRC_CCITT_AX25+0x52>
				crc = (crc << 1) ^ CRC_POLY; // Left shift CRC and XOR with polynomial
 80008a4:	8afb      	ldrh	r3, [r7, #22]
 80008a6:	005b      	lsls	r3, r3, #1
 80008a8:	b21a      	sxth	r2, r3
 80008aa:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80008ae:	4053      	eors	r3, r2
 80008b0:	b21b      	sxth	r3, r3
 80008b2:	82fb      	strh	r3, [r7, #22]
 80008b4:	e002      	b.n	80008bc <calculateCRC_CCITT_AX25+0x58>
			} else {
				crc <<= 1; // Left shift CRC
 80008b6:	8afb      	ldrh	r3, [r7, #22]
 80008b8:	005b      	lsls	r3, r3, #1
 80008ba:	82fb      	strh	r3, [r7, #22]
		for (int j = 0; j < 8; j++) {
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	3301      	adds	r3, #1
 80008c0:	60fb      	str	r3, [r7, #12]
 80008c2:	68fb      	ldr	r3, [r7, #12]
 80008c4:	2b07      	cmp	r3, #7
 80008c6:	dde9      	ble.n	800089c <calculateCRC_CCITT_AX25+0x38>
	for (size_t i = 0; i < length; i++) {
 80008c8:	693b      	ldr	r3, [r7, #16]
 80008ca:	3301      	adds	r3, #1
 80008cc:	613b      	str	r3, [r7, #16]
 80008ce:	693a      	ldr	r2, [r7, #16]
 80008d0:	683b      	ldr	r3, [r7, #0]
 80008d2:	429a      	cmp	r2, r3
 80008d4:	d3d4      	bcc.n	8000880 <calculateCRC_CCITT_AX25+0x1c>
			}
		}
	}

	return crc; // Return calculated CRC
 80008d6:	8afb      	ldrh	r3, [r7, #22]
}
 80008d8:	4618      	mov	r0, r3
 80008da:	371c      	adds	r7, #28
 80008dc:	46bd      	mov	sp, r7
 80008de:	bc80      	pop	{r7}
 80008e0:	4770      	bx	lr

080008e2 <bit_stuffing>:
	}
	crcReg = crcReg ^ 0xFFFF;						// Final XOR with 0xFFFF
	return crcReg;
}

int bit_stuffing(uint8_t *data, uint8_t *output_data, int length) {
 80008e2:	b480      	push	{r7}
 80008e4:	b08f      	sub	sp, #60	; 0x3c
 80008e6:	af00      	add	r7, sp, #0
 80008e8:	60f8      	str	r0, [r7, #12]
 80008ea:	60b9      	str	r1, [r7, #8]
 80008ec:	607a      	str	r2, [r7, #4]
	int out_index = 0;
 80008ee:	2300      	movs	r3, #0
 80008f0:	637b      	str	r3, [r7, #52]	; 0x34
	int bit_count = 0; // Count of consecutive 1 bits
 80008f2:	2300      	movs	r3, #0
 80008f4:	633b      	str	r3, [r7, #48]	; 0x30
	uint8_t current_byte = 0;
 80008f6:	2300      	movs	r3, #0
 80008f8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	int bit_pos = 7;
 80008fc:	2307      	movs	r3, #7
 80008fe:	62bb      	str	r3, [r7, #40]	; 0x28
	int stuffed_size = 0; // Track size of output data after bit stuffing
 8000900:	2300      	movs	r3, #0
 8000902:	627b      	str	r3, [r7, #36]	; 0x24
	int bits_stuffed = 0; // Number of bits stuffed since last size increase
 8000904:	2300      	movs	r3, #0
 8000906:	623b      	str	r3, [r7, #32]

	//myDebug("Error handler: before Bit stuffing \n");

	for (int i = 0; i < length; i++) {
 8000908:	2300      	movs	r3, #0
 800090a:	61fb      	str	r3, [r7, #28]
 800090c:	e078      	b.n	8000a00 <bit_stuffing+0x11e>
		for (int bit = 7; bit >= 0; bit--) {
 800090e:	2307      	movs	r3, #7
 8000910:	61bb      	str	r3, [r7, #24]
 8000912:	e06f      	b.n	80009f4 <bit_stuffing+0x112>
			int bit_val = (data[i] >> bit) & 1;
 8000914:	69fb      	ldr	r3, [r7, #28]
 8000916:	68fa      	ldr	r2, [r7, #12]
 8000918:	4413      	add	r3, r2
 800091a:	781b      	ldrb	r3, [r3, #0]
 800091c:	461a      	mov	r2, r3
 800091e:	69bb      	ldr	r3, [r7, #24]
 8000920:	fa42 f303 	asr.w	r3, r2, r3
 8000924:	f003 0301 	and.w	r3, r3, #1
 8000928:	613b      	str	r3, [r7, #16]

			//	myDebug("%d ", bit_val);

			current_byte |= (bit_val << bit_pos);
 800092a:	693a      	ldr	r2, [r7, #16]
 800092c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800092e:	fa02 f303 	lsl.w	r3, r2, r3
 8000932:	b25a      	sxtb	r2, r3
 8000934:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8000938:	4313      	orrs	r3, r2
 800093a:	b25b      	sxtb	r3, r3
 800093c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			bit_pos--;
 8000940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000942:	3b01      	subs	r3, #1
 8000944:	62bb      	str	r3, [r7, #40]	; 0x28

			if (bit_val) {
 8000946:	693b      	ldr	r3, [r7, #16]
 8000948:	2b00      	cmp	r3, #0
 800094a:	d02f      	beq.n	80009ac <bit_stuffing+0xca>
				bit_count++;
 800094c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800094e:	3301      	adds	r3, #1
 8000950:	633b      	str	r3, [r7, #48]	; 0x30
				if (bit_count == 5) {
 8000952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000954:	2b05      	cmp	r3, #5
 8000956:	d12b      	bne.n	80009b0 <bit_stuffing+0xce>
					// Insert a 0 bit after five consecutive 1s
					if (bit_pos < 0) {
 8000958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800095a:	2b00      	cmp	r3, #0
 800095c:	da10      	bge.n	8000980 <bit_stuffing+0x9e>
						output_data[out_index++] = current_byte;
 800095e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000960:	1c5a      	adds	r2, r3, #1
 8000962:	637a      	str	r2, [r7, #52]	; 0x34
 8000964:	461a      	mov	r2, r3
 8000966:	68bb      	ldr	r3, [r7, #8]
 8000968:	4413      	add	r3, r2
 800096a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800096e:	701a      	strb	r2, [r3, #0]
						stuffed_size++;
 8000970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000972:	3301      	adds	r3, #1
 8000974:	627b      	str	r3, [r7, #36]	; 0x24
						current_byte = 0;
 8000976:	2300      	movs	r3, #0
 8000978:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						bit_pos = 7;
 800097c:	2307      	movs	r3, #7
 800097e:	62bb      	str	r3, [r7, #40]	; 0x28
					}
					current_byte &= ~(1 << bit_pos);
 8000980:	2201      	movs	r2, #1
 8000982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000984:	fa02 f303 	lsl.w	r3, r2, r3
 8000988:	b25b      	sxtb	r3, r3
 800098a:	43db      	mvns	r3, r3
 800098c:	b25a      	sxtb	r2, r3
 800098e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8000992:	4013      	ands	r3, r2
 8000994:	b25b      	sxtb	r3, r3
 8000996:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					bit_pos--;
 800099a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800099c:	3b01      	subs	r3, #1
 800099e:	62bb      	str	r3, [r7, #40]	; 0x28
					bits_stuffed++;
 80009a0:	6a3b      	ldr	r3, [r7, #32]
 80009a2:	3301      	adds	r3, #1
 80009a4:	623b      	str	r3, [r7, #32]
					bit_count = 0;
 80009a6:	2300      	movs	r3, #0
 80009a8:	633b      	str	r3, [r7, #48]	; 0x30
 80009aa:	e001      	b.n	80009b0 <bit_stuffing+0xce>
				}
			} else {
				bit_count = 0;
 80009ac:	2300      	movs	r3, #0
 80009ae:	633b      	str	r3, [r7, #48]	; 0x30
			}

			if (bit_pos < 0) {
 80009b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	da10      	bge.n	80009d8 <bit_stuffing+0xf6>
				output_data[out_index++] = current_byte;
 80009b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80009b8:	1c5a      	adds	r2, r3, #1
 80009ba:	637a      	str	r2, [r7, #52]	; 0x34
 80009bc:	461a      	mov	r2, r3
 80009be:	68bb      	ldr	r3, [r7, #8]
 80009c0:	4413      	add	r3, r2
 80009c2:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80009c6:	701a      	strb	r2, [r3, #0]
				stuffed_size++;
 80009c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009ca:	3301      	adds	r3, #1
 80009cc:	627b      	str	r3, [r7, #36]	; 0x24
				current_byte = 0;
 80009ce:	2300      	movs	r3, #0
 80009d0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				bit_pos = 7;
 80009d4:	2307      	movs	r3, #7
 80009d6:	62bb      	str	r3, [r7, #40]	; 0x28
			}

			// Check if we've stuffed enough bits to increase size
			if (bits_stuffed >= 9 && bit_pos >= 0) {
 80009d8:	6a3b      	ldr	r3, [r7, #32]
 80009da:	2b08      	cmp	r3, #8
 80009dc:	dd07      	ble.n	80009ee <bit_stuffing+0x10c>
 80009de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	db04      	blt.n	80009ee <bit_stuffing+0x10c>
				stuffed_size++;
 80009e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009e6:	3301      	adds	r3, #1
 80009e8:	627b      	str	r3, [r7, #36]	; 0x24
				bits_stuffed = 0; // Reset bits_stuffed after increasing size
 80009ea:	2300      	movs	r3, #0
 80009ec:	623b      	str	r3, [r7, #32]
		for (int bit = 7; bit >= 0; bit--) {
 80009ee:	69bb      	ldr	r3, [r7, #24]
 80009f0:	3b01      	subs	r3, #1
 80009f2:	61bb      	str	r3, [r7, #24]
 80009f4:	69bb      	ldr	r3, [r7, #24]
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	da8c      	bge.n	8000914 <bit_stuffing+0x32>
	for (int i = 0; i < length; i++) {
 80009fa:	69fb      	ldr	r3, [r7, #28]
 80009fc:	3301      	adds	r3, #1
 80009fe:	61fb      	str	r3, [r7, #28]
 8000a00:	69fa      	ldr	r2, [r7, #28]
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	429a      	cmp	r2, r3
 8000a06:	db82      	blt.n	800090e <bit_stuffing+0x2c>
			}
		}
	}
	//myDebug("\n");

	if (bit_pos < 7) {
 8000a08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a0a:	2b06      	cmp	r3, #6
 8000a0c:	dc0b      	bgt.n	8000a26 <bit_stuffing+0x144>
		output_data[out_index++] = current_byte;
 8000a0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a10:	1c5a      	adds	r2, r3, #1
 8000a12:	637a      	str	r2, [r7, #52]	; 0x34
 8000a14:	461a      	mov	r2, r3
 8000a16:	68bb      	ldr	r3, [r7, #8]
 8000a18:	4413      	add	r3, r2
 8000a1a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8000a1e:	701a      	strb	r2, [r3, #0]
		stuffed_size++;
 8000a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a22:	3301      	adds	r3, #1
 8000a24:	627b      	str	r3, [r7, #36]	; 0x24
//		}
//	}
//	myDebug("\n");


	for(int i = 0; i < length; i++){
 8000a26:	2300      	movs	r3, #0
 8000a28:	617b      	str	r3, [r7, #20]
 8000a2a:	e00a      	b.n	8000a42 <bit_stuffing+0x160>
		output_data[i] = data[i];
 8000a2c:	697b      	ldr	r3, [r7, #20]
 8000a2e:	68fa      	ldr	r2, [r7, #12]
 8000a30:	441a      	add	r2, r3
 8000a32:	697b      	ldr	r3, [r7, #20]
 8000a34:	68b9      	ldr	r1, [r7, #8]
 8000a36:	440b      	add	r3, r1
 8000a38:	7812      	ldrb	r2, [r2, #0]
 8000a3a:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < length; i++){
 8000a3c:	697b      	ldr	r3, [r7, #20]
 8000a3e:	3301      	adds	r3, #1
 8000a40:	617b      	str	r3, [r7, #20]
 8000a42:	697a      	ldr	r2, [r7, #20]
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	429a      	cmp	r2, r3
 8000a48:	dbf0      	blt.n	8000a2c <bit_stuffing+0x14a>
	}

	out_index = length;
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	637b      	str	r3, [r7, #52]	; 0x34

	return out_index; // Return the size of output data after bit stuffing
 8000a4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8000a50:	4618      	mov	r0, r3
 8000a52:	373c      	adds	r7, #60	; 0x3c
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bc80      	pop	{r7}
 8000a58:	4770      	bx	lr

08000a5a <bit_destuffing>:

int bit_destuffing(uint8_t *data, uint8_t *output_data, int length) {
 8000a5a:	b480      	push	{r7}
 8000a5c:	b08d      	sub	sp, #52	; 0x34
 8000a5e:	af00      	add	r7, sp, #0
 8000a60:	60f8      	str	r0, [r7, #12]
 8000a62:	60b9      	str	r1, [r7, #8]
 8000a64:	607a      	str	r2, [r7, #4]
	int out_index = 0;
 8000a66:	2300      	movs	r3, #0
 8000a68:	62fb      	str	r3, [r7, #44]	; 0x2c
	int bit_count = 0;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t current_byte = 0;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	int bit_pos = 7;
 8000a74:	2307      	movs	r3, #7
 8000a76:	623b      	str	r3, [r7, #32]

	for (int i = 0; i < length; i++) {
 8000a78:	2300      	movs	r3, #0
 8000a7a:	61fb      	str	r3, [r7, #28]
 8000a7c:	e052      	b.n	8000b24 <bit_destuffing+0xca>
		for (int bit = 7; bit >= 0; bit--) {
 8000a7e:	2307      	movs	r3, #7
 8000a80:	61bb      	str	r3, [r7, #24]
 8000a82:	e049      	b.n	8000b18 <bit_destuffing+0xbe>
			int bit_val = (data[i] >> bit) & 1;
 8000a84:	69fb      	ldr	r3, [r7, #28]
 8000a86:	68fa      	ldr	r2, [r7, #12]
 8000a88:	4413      	add	r3, r2
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	461a      	mov	r2, r3
 8000a8e:	69bb      	ldr	r3, [r7, #24]
 8000a90:	fa42 f303 	asr.w	r3, r2, r3
 8000a94:	f003 0301 	and.w	r3, r3, #1
 8000a98:	613b      	str	r3, [r7, #16]

			if (bit_val) {
 8000a9a:	693b      	ldr	r3, [r7, #16]
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d011      	beq.n	8000ac4 <bit_destuffing+0x6a>
				bit_count++;
 8000aa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000aa2:	3301      	adds	r3, #1
 8000aa4:	62bb      	str	r3, [r7, #40]	; 0x28
				current_byte |= (bit_val << bit_pos);
 8000aa6:	693a      	ldr	r2, [r7, #16]
 8000aa8:	6a3b      	ldr	r3, [r7, #32]
 8000aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8000aae:	b25a      	sxtb	r2, r3
 8000ab0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8000ab4:	4313      	orrs	r3, r2
 8000ab6:	b25b      	sxtb	r3, r3
 8000ab8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				bit_pos--;
 8000abc:	6a3b      	ldr	r3, [r7, #32]
 8000abe:	3b01      	subs	r3, #1
 8000ac0:	623b      	str	r3, [r7, #32]
 8000ac2:	e015      	b.n	8000af0 <bit_destuffing+0x96>
			} else {
				if (bit_count == 5) {
 8000ac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ac6:	2b05      	cmp	r3, #5
 8000ac8:	d102      	bne.n	8000ad0 <bit_destuffing+0x76>
					// Skip this bit as it is a stuffed bit
					bit_count = 0;
 8000aca:	2300      	movs	r3, #0
 8000acc:	62bb      	str	r3, [r7, #40]	; 0x28
					continue;
 8000ace:	e020      	b.n	8000b12 <bit_destuffing+0xb8>
				} else {
					bit_count = 0;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	62bb      	str	r3, [r7, #40]	; 0x28
					current_byte |= (bit_val << bit_pos);
 8000ad4:	693a      	ldr	r2, [r7, #16]
 8000ad6:	6a3b      	ldr	r3, [r7, #32]
 8000ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8000adc:	b25a      	sxtb	r2, r3
 8000ade:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8000ae2:	4313      	orrs	r3, r2
 8000ae4:	b25b      	sxtb	r3, r3
 8000ae6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					bit_pos--;
 8000aea:	6a3b      	ldr	r3, [r7, #32]
 8000aec:	3b01      	subs	r3, #1
 8000aee:	623b      	str	r3, [r7, #32]
				}
			}

			if (bit_pos < 0) {
 8000af0:	6a3b      	ldr	r3, [r7, #32]
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	da0d      	bge.n	8000b12 <bit_destuffing+0xb8>
				output_data[out_index++] = current_byte;
 8000af6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000af8:	1c5a      	adds	r2, r3, #1
 8000afa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8000afc:	461a      	mov	r2, r3
 8000afe:	68bb      	ldr	r3, [r7, #8]
 8000b00:	4413      	add	r3, r2
 8000b02:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8000b06:	701a      	strb	r2, [r3, #0]
				current_byte = 0;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				bit_pos = 7;
 8000b0e:	2307      	movs	r3, #7
 8000b10:	623b      	str	r3, [r7, #32]
		for (int bit = 7; bit >= 0; bit--) {
 8000b12:	69bb      	ldr	r3, [r7, #24]
 8000b14:	3b01      	subs	r3, #1
 8000b16:	61bb      	str	r3, [r7, #24]
 8000b18:	69bb      	ldr	r3, [r7, #24]
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	dab2      	bge.n	8000a84 <bit_destuffing+0x2a>
	for (int i = 0; i < length; i++) {
 8000b1e:	69fb      	ldr	r3, [r7, #28]
 8000b20:	3301      	adds	r3, #1
 8000b22:	61fb      	str	r3, [r7, #28]
 8000b24:	69fa      	ldr	r2, [r7, #28]
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	429a      	cmp	r2, r3
 8000b2a:	dba8      	blt.n	8000a7e <bit_destuffing+0x24>
			}
		}
	}

	// Ensure the last byte is written if it's partially filled
	if (bit_pos < 7) {
 8000b2c:	6a3b      	ldr	r3, [r7, #32]
 8000b2e:	2b06      	cmp	r3, #6
 8000b30:	dc08      	bgt.n	8000b44 <bit_destuffing+0xea>
		output_data[out_index++] = current_byte;
 8000b32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b34:	1c5a      	adds	r2, r3, #1
 8000b36:	62fa      	str	r2, [r7, #44]	; 0x2c
 8000b38:	461a      	mov	r2, r3
 8000b3a:	68bb      	ldr	r3, [r7, #8]
 8000b3c:	4413      	add	r3, r2
 8000b3e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8000b42:	701a      	strb	r2, [r3, #0]
//		}
//	}
//	myDebug("\n");


	for(int i = 0; i < length; i++){
 8000b44:	2300      	movs	r3, #0
 8000b46:	617b      	str	r3, [r7, #20]
 8000b48:	e00a      	b.n	8000b60 <bit_destuffing+0x106>
		output_data[i] = data[i];
 8000b4a:	697b      	ldr	r3, [r7, #20]
 8000b4c:	68fa      	ldr	r2, [r7, #12]
 8000b4e:	441a      	add	r2, r3
 8000b50:	697b      	ldr	r3, [r7, #20]
 8000b52:	68b9      	ldr	r1, [r7, #8]
 8000b54:	440b      	add	r3, r1
 8000b56:	7812      	ldrb	r2, [r2, #0]
 8000b58:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < length; i++){
 8000b5a:	697b      	ldr	r3, [r7, #20]
 8000b5c:	3301      	adds	r3, #1
 8000b5e:	617b      	str	r3, [r7, #20]
 8000b60:	697a      	ldr	r2, [r7, #20]
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	429a      	cmp	r2, r3
 8000b66:	dbf0      	blt.n	8000b4a <bit_destuffing+0xf0>
	}

	out_index = length;
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	62fb      	str	r3, [r7, #44]	; 0x2c


	return out_index;
 8000b6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8000b6e:	4618      	mov	r0, r3
 8000b70:	3734      	adds	r7, #52	; 0x34
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bc80      	pop	{r7}
 8000b76:	4770      	bx	lr

08000b78 <check_packet_type>:

int check_packet_type(uint8_t *OBC_UART) {
 8000b78:	b480      	push	{r7}
 8000b7a:	b085      	sub	sp, #20
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
	uint8_t packet_type_true = 0;
 8000b80:	2300      	movs	r3, #0
 8000b82:	73fb      	strb	r3, [r7, #15]
	switch (OBC_UART[1]) {
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	3301      	adds	r3, #1
 8000b88:	781b      	ldrb	r3, [r3, #0]
 8000b8a:	2bb2      	cmp	r3, #178	; 0xb2
 8000b8c:	d01e      	beq.n	8000bcc <check_packet_type+0x54>
 8000b8e:	2bb2      	cmp	r3, #178	; 0xb2
 8000b90:	dc2e      	bgt.n	8000bf0 <check_packet_type+0x78>
 8000b92:	2bb1      	cmp	r3, #177	; 0xb1
 8000b94:	d017      	beq.n	8000bc6 <check_packet_type+0x4e>
 8000b96:	2bb1      	cmp	r3, #177	; 0xb1
 8000b98:	dc2a      	bgt.n	8000bf0 <check_packet_type+0x78>
 8000b9a:	2b0d      	cmp	r3, #13
 8000b9c:	dc10      	bgt.n	8000bc0 <check_packet_type+0x48>
 8000b9e:	2b0a      	cmp	r3, #10
 8000ba0:	db26      	blt.n	8000bf0 <check_packet_type+0x78>
 8000ba2:	3b0a      	subs	r3, #10
 8000ba4:	2b03      	cmp	r3, #3
 8000ba6:	d823      	bhi.n	8000bf0 <check_packet_type+0x78>
 8000ba8:	a201      	add	r2, pc, #4	; (adr r2, 8000bb0 <check_packet_type+0x38>)
 8000baa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bae:	bf00      	nop
 8000bb0:	08000bd9 	.word	0x08000bd9
 8000bb4:	08000bdf 	.word	0x08000bdf
 8000bb8:	08000be5 	.word	0x08000be5
 8000bbc:	08000beb 	.word	0x08000beb
 8000bc0:	2bac      	cmp	r3, #172	; 0xac
 8000bc2:	d006      	beq.n	8000bd2 <check_packet_type+0x5a>
 8000bc4:	e014      	b.n	8000bf0 <check_packet_type+0x78>

	case 0xb1:						// beacon_type_1
		packet_type_true = 1;
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	73fb      	strb	r3, [r7, #15]
		break;
 8000bca:	e013      	b.n	8000bf4 <check_packet_type+0x7c>

	case 0xb2:						// beacon_type_2
		packet_type_true = 1;
 8000bcc:	2301      	movs	r3, #1
 8000bce:	73fb      	strb	r3, [r7, #15]
		break;
 8000bd0:	e010      	b.n	8000bf4 <check_packet_type+0x7c>

	case 0xac:						// ack
		packet_type_true = 1;
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	73fb      	strb	r3, [r7, #15]
		break;
 8000bd6:	e00d      	b.n	8000bf4 <check_packet_type+0x7c>

	case 0x0a:						// digipeater packet
		packet_type_true = 1;
 8000bd8:	2301      	movs	r3, #1
 8000bda:	73fb      	strb	r3, [r7, #15]
		break;
 8000bdc:	e00a      	b.n	8000bf4 <check_packet_type+0x7c>

	case 0x0b:						// epdm
		packet_type_true = 1;
 8000bde:	2301      	movs	r3, #1
 8000be0:	73fb      	strb	r3, [r7, #15]
		break;
 8000be2:	e007      	b.n	8000bf4 <check_packet_type+0x7c>

	case 0x0c:						// camera
		packet_type_true = 1;
 8000be4:	2301      	movs	r3, #1
 8000be6:	73fb      	strb	r3, [r7, #15]
		break;
 8000be8:	e004      	b.n	8000bf4 <check_packet_type+0x7c>

	case 0x0d:						// adcs
		packet_type_true = 1;
 8000bea:	2301      	movs	r3, #1
 8000bec:	73fb      	strb	r3, [r7, #15]
		break;
 8000bee:	e001      	b.n	8000bf4 <check_packet_type+0x7c>

	default:
		packet_type_true = 0;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	73fb      	strb	r3, [r7, #15]
	}

	return packet_type_true;
 8000bf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	3714      	adds	r7, #20
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bc80      	pop	{r7}
 8000bfe:	4770      	bx	lr

08000c00 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b085      	sub	sp, #20
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000c08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c0c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000c0e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	4313      	orrs	r3, r2
 8000c16:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000c18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c1c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	4013      	ands	r3, r2
 8000c22:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000c24:	68fb      	ldr	r3, [r7, #12]
}
 8000c26:	bf00      	nop
 8000c28:	3714      	adds	r7, #20
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bc80      	pop	{r7}
 8000c2e:	4770      	bx	lr

08000c30 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b086      	sub	sp, #24
 8000c34:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c36:	1d3b      	adds	r3, r7, #4
 8000c38:	2200      	movs	r2, #0
 8000c3a:	601a      	str	r2, [r3, #0]
 8000c3c:	605a      	str	r2, [r3, #4]
 8000c3e:	609a      	str	r2, [r3, #8]
 8000c40:	60da      	str	r2, [r3, #12]
 8000c42:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c44:	2001      	movs	r0, #1
 8000c46:	f7ff ffdb 	bl	8000c00 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c4a:	2002      	movs	r0, #2
 8000c4c:	f7ff ffd8 	bl	8000c00 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c50:	2004      	movs	r0, #4
 8000c52:	f7ff ffd5 	bl	8000c00 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8000c56:	2200      	movs	r2, #0
 8000c58:	f44f 410a 	mov.w	r1, #35328	; 0x8a00
 8000c5c:	481f      	ldr	r0, [pc, #124]	; (8000cdc <MX_GPIO_Init+0xac>)
 8000c5e:	f003 fa5f 	bl	8004120 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FE_CTRL3_Pin|FE_CTRL2_Pin|FE_CTRL1_Pin, GPIO_PIN_RESET);
 8000c62:	2200      	movs	r2, #0
 8000c64:	2138      	movs	r1, #56	; 0x38
 8000c66:	481e      	ldr	r0, [pc, #120]	; (8000ce0 <MX_GPIO_Init+0xb0>)
 8000c68:	f003 fa5a 	bl	8004120 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 8000c6c:	f44f 430a 	mov.w	r3, #35328	; 0x8a00
 8000c70:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c72:	2301      	movs	r3, #1
 8000c74:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c76:	2300      	movs	r3, #0
 8000c78:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c7a:	2302      	movs	r3, #2
 8000c7c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c7e:	1d3b      	adds	r3, r7, #4
 8000c80:	4619      	mov	r1, r3
 8000c82:	4816      	ldr	r0, [pc, #88]	; (8000cdc <MX_GPIO_Init+0xac>)
 8000c84:	f003 f8ec 	bl	8003e60 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = FE_CTRL3_Pin|FE_CTRL2_Pin|FE_CTRL1_Pin;
 8000c88:	2338      	movs	r3, #56	; 0x38
 8000c8a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c90:	2300      	movs	r3, #0
 8000c92:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c94:	2303      	movs	r3, #3
 8000c96:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c98:	1d3b      	adds	r3, r7, #4
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	4810      	ldr	r0, [pc, #64]	; (8000ce0 <MX_GPIO_Init+0xb0>)
 8000c9e:	f003 f8df 	bl	8003e60 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = B1_Pin|B2_Pin;
 8000ca2:	2303      	movs	r3, #3
 8000ca4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ca6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000caa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cac:	2301      	movs	r3, #1
 8000cae:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cb0:	1d3b      	adds	r3, r7, #4
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cb8:	f003 f8d2 	bl	8003e60 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B3_Pin;
 8000cbc:	2340      	movs	r3, #64	; 0x40
 8000cbe:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000cc0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000cc4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B3_GPIO_Port, &GPIO_InitStruct);
 8000cca:	1d3b      	adds	r3, r7, #4
 8000ccc:	4619      	mov	r1, r3
 8000cce:	4804      	ldr	r0, [pc, #16]	; (8000ce0 <MX_GPIO_Init+0xb0>)
 8000cd0:	f003 f8c6 	bl	8003e60 <HAL_GPIO_Init>

}
 8000cd4:	bf00      	nop
 8000cd6:	3718      	adds	r7, #24
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	48000400 	.word	0x48000400
 8000ce0:	48000800 	.word	0x48000800

08000ce4 <enableReqPA>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void enableReqPA() {
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af00      	add	r7, sp, #0

	myDebug("\nCOM ACK Command TX to OBC, Length: %d bytes\r\n",
 8000cea:	212b      	movs	r1, #43	; 0x2b
 8000cec:	481e      	ldr	r0, [pc, #120]	; (8000d68 <enableReqPA+0x84>)
 8000cee:	f7ff fd2d 	bl	800074c <myDebug>
			sizeof(COM_UART_TX));

	if (HAL_UART_Transmit(&huart2, COM_UART_TX, com_uart_tx_p_len, 1000)
 8000cf2:	4b1e      	ldr	r3, [pc, #120]	; (8000d6c <enableReqPA+0x88>)
 8000cf4:	781b      	ldrb	r3, [r3, #0]
 8000cf6:	b29a      	uxth	r2, r3
 8000cf8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cfc:	491c      	ldr	r1, [pc, #112]	; (8000d70 <enableReqPA+0x8c>)
 8000cfe:	481d      	ldr	r0, [pc, #116]	; (8000d74 <enableReqPA+0x90>)
 8000d00:	f005 fd3d 	bl	800677e <HAL_UART_Transmit>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d00b      	beq.n	8000d22 <enableReqPA+0x3e>
			== HAL_OK
			|| HAL_UART_Transmit(&hlpuart1, COM_UART_TX, com_uart_tx_p_len,
 8000d0a:	4b18      	ldr	r3, [pc, #96]	; (8000d6c <enableReqPA+0x88>)
 8000d0c:	781b      	ldrb	r3, [r3, #0]
 8000d0e:	b29a      	uxth	r2, r3
 8000d10:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d14:	4916      	ldr	r1, [pc, #88]	; (8000d70 <enableReqPA+0x8c>)
 8000d16:	4818      	ldr	r0, [pc, #96]	; (8000d78 <enableReqPA+0x94>)
 8000d18:	f005 fd31 	bl	800677e <HAL_UART_Transmit>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d11d      	bne.n	8000d5e <enableReqPA+0x7a>
					1000) == HAL_OK) {

		IS_EN_REQ_PA = 1;
 8000d22:	4b16      	ldr	r3, [pc, #88]	; (8000d7c <enableReqPA+0x98>)
 8000d24:	2201      	movs	r2, #1
 8000d26:	601a      	str	r2, [r3, #0]

		obc_ilen = COM_UART_TX[2];
 8000d28:	4b11      	ldr	r3, [pc, #68]	; (8000d70 <enableReqPA+0x8c>)
 8000d2a:	789a      	ldrb	r2, [r3, #2]
 8000d2c:	4b14      	ldr	r3, [pc, #80]	; (8000d80 <enableReqPA+0x9c>)
 8000d2e:	701a      	strb	r2, [r3, #0]

		for (int i = 0; i < sizeof(COM_UART_TX); i++) {
 8000d30:	2300      	movs	r3, #0
 8000d32:	607b      	str	r3, [r7, #4]
 8000d34:	e00a      	b.n	8000d4c <enableReqPA+0x68>
			myDebug("%02x ", COM_UART_TX[i]);
 8000d36:	4a0e      	ldr	r2, [pc, #56]	; (8000d70 <enableReqPA+0x8c>)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	4413      	add	r3, r2
 8000d3c:	781b      	ldrb	r3, [r3, #0]
 8000d3e:	4619      	mov	r1, r3
 8000d40:	4810      	ldr	r0, [pc, #64]	; (8000d84 <enableReqPA+0xa0>)
 8000d42:	f7ff fd03 	bl	800074c <myDebug>
		for (int i = 0; i < sizeof(COM_UART_TX); i++) {
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	3301      	adds	r3, #1
 8000d4a:	607b      	str	r3, [r7, #4]
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	2b2a      	cmp	r3, #42	; 0x2a
 8000d50:	d9f1      	bls.n	8000d36 <enableReqPA+0x52>
		}

		myDebug("\r\n");
 8000d52:	480d      	ldr	r0, [pc, #52]	; (8000d88 <enableReqPA+0xa4>)
 8000d54:	f7ff fcfa 	bl	800074c <myDebug>

		myDebug("\n-------- OBC, ACK Waiting from OBC------- ");
 8000d58:	480c      	ldr	r0, [pc, #48]	; (8000d8c <enableReqPA+0xa8>)
 8000d5a:	f7ff fcf7 	bl	800074c <myDebug>
	}
}
 8000d5e:	bf00      	nop
 8000d60:	3708      	adds	r7, #8
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	0800c534 	.word	0x0800c534
 8000d6c:	20000002 	.word	0x20000002
 8000d70:	20000370 	.word	0x20000370
 8000d74:	20000688 	.word	0x20000688
 8000d78:	20000560 	.word	0x20000560
 8000d7c:	200004f0 	.word	0x200004f0
 8000d80:	20000316 	.word	0x20000316
 8000d84:	0800c564 	.word	0x0800c564
 8000d88:	0800c56c 	.word	0x0800c56c
 8000d8c:	0800c570 	.word	0x0800c570

08000d90 <countsDataBetweenFlags>:

int countsDataBetweenFlags(uint8_t *data, int data_length) {
 8000d90:	b480      	push	{r7}
 8000d92:	b087      	sub	sp, #28
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
 8000d98:	6039      	str	r1, [r7, #0]
	int found_first_7e = 0;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	617b      	str	r3, [r7, #20]
	int start_index = 0, end_index = 0;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	613b      	str	r3, [r7, #16]
 8000da2:	2300      	movs	r3, #0
 8000da4:	60fb      	str	r3, [r7, #12]

	for (int i = 0; i < data_length; i++) {
 8000da6:	2300      	movs	r3, #0
 8000da8:	60bb      	str	r3, [r7, #8]
 8000daa:	e013      	b.n	8000dd4 <countsDataBetweenFlags+0x44>
		if (data[i] == 0x7e) {
 8000dac:	68bb      	ldr	r3, [r7, #8]
 8000dae:	687a      	ldr	r2, [r7, #4]
 8000db0:	4413      	add	r3, r2
 8000db2:	781b      	ldrb	r3, [r3, #0]
 8000db4:	2b7e      	cmp	r3, #126	; 0x7e
 8000db6:	d10a      	bne.n	8000dce <countsDataBetweenFlags+0x3e>
			if (!found_first_7e) {
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d104      	bne.n	8000dc8 <countsDataBetweenFlags+0x38>
				found_first_7e = 1;
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	617b      	str	r3, [r7, #20]
				start_index = i;
 8000dc2:	68bb      	ldr	r3, [r7, #8]
 8000dc4:	613b      	str	r3, [r7, #16]
 8000dc6:	e002      	b.n	8000dce <countsDataBetweenFlags+0x3e>
			} else {
				end_index = i;
 8000dc8:	68bb      	ldr	r3, [r7, #8]
 8000dca:	60fb      	str	r3, [r7, #12]
				break;
 8000dcc:	e006      	b.n	8000ddc <countsDataBetweenFlags+0x4c>
	for (int i = 0; i < data_length; i++) {
 8000dce:	68bb      	ldr	r3, [r7, #8]
 8000dd0:	3301      	adds	r3, #1
 8000dd2:	60bb      	str	r3, [r7, #8]
 8000dd4:	68ba      	ldr	r2, [r7, #8]
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	429a      	cmp	r2, r3
 8000dda:	dbe7      	blt.n	8000dac <countsDataBetweenFlags+0x1c>
			}
		}
	}

	if (end_index > start_index) {
 8000ddc:	68fa      	ldr	r2, [r7, #12]
 8000dde:	693b      	ldr	r3, [r7, #16]
 8000de0:	429a      	cmp	r2, r3
 8000de2:	dd04      	ble.n	8000dee <countsDataBetweenFlags+0x5e>
		return end_index - start_index + 1;
 8000de4:	68fa      	ldr	r2, [r7, #12]
 8000de6:	693b      	ldr	r3, [r7, #16]
 8000de8:	1ad3      	subs	r3, r2, r3
 8000dea:	3301      	adds	r3, #1
 8000dec:	e001      	b.n	8000df2 <countsDataBetweenFlags+0x62>
	} else {
		return -1; // Return -1 if two 0x7E flags are not found
 8000dee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	}
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	371c      	adds	r7, #28
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bc80      	pop	{r7}
 8000dfa:	4770      	bx	lr

08000dfc <setPacketParams>:

void setPacketParams(uint8_t buffer_length) {
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b082      	sub	sp, #8
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	4603      	mov	r3, r0
 8000e04:	71fb      	strb	r3, [r7, #7]
	pkt_params.PacketType = PACKET_TYPE_GFSK;
 8000e06:	4b11      	ldr	r3, [pc, #68]	; (8000e4c <setPacketParams+0x50>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	701a      	strb	r2, [r3, #0]
	pkt_params.Params.Gfsk.PayloadLength = buffer_length;
 8000e0c:	4a0f      	ldr	r2, [pc, #60]	; (8000e4c <setPacketParams+0x50>)
 8000e0e:	79fb      	ldrb	r3, [r7, #7]
 8000e10:	7213      	strb	r3, [r2, #8]
	pkt_params.Params.Gfsk.PreambleLength = 8;
 8000e12:	4b0e      	ldr	r3, [pc, #56]	; (8000e4c <setPacketParams+0x50>)
 8000e14:	2208      	movs	r2, #8
 8000e16:	805a      	strh	r2, [r3, #2]
	pkt_params.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8000e18:	4b0c      	ldr	r3, [pc, #48]	; (8000e4c <setPacketParams+0x50>)
 8000e1a:	2204      	movs	r2, #4
 8000e1c:	711a      	strb	r2, [r3, #4]
	pkt_params.Params.Gfsk.SyncWordLength = 3 << 3;
 8000e1e:	4b0b      	ldr	r3, [pc, #44]	; (8000e4c <setPacketParams+0x50>)
 8000e20:	2218      	movs	r2, #24
 8000e22:	715a      	strb	r2, [r3, #5]
	pkt_params.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8000e24:	4b09      	ldr	r3, [pc, #36]	; (8000e4c <setPacketParams+0x50>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	719a      	strb	r2, [r3, #6]
	pkt_params.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 8000e2a:	4b08      	ldr	r3, [pc, #32]	; (8000e4c <setPacketParams+0x50>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	71da      	strb	r2, [r3, #7]
	pkt_params.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8000e30:	4b06      	ldr	r3, [pc, #24]	; (8000e4c <setPacketParams+0x50>)
 8000e32:	22f2      	movs	r2, #242	; 0xf2
 8000e34:	725a      	strb	r2, [r3, #9]
	pkt_params.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8000e36:	4b05      	ldr	r3, [pc, #20]	; (8000e4c <setPacketParams+0x50>)
 8000e38:	2201      	movs	r2, #1
 8000e3a:	729a      	strb	r2, [r3, #10]
	SUBGRF_SetPacketParams(&pkt_params);
 8000e3c:	4803      	ldr	r0, [pc, #12]	; (8000e4c <setPacketParams+0x50>)
 8000e3e:	f009 feb3 	bl	800aba8 <SUBGRF_SetPacketParams>

}
 8000e42:	bf00      	nop
 8000e44:	3708      	adds	r7, #8
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	2000027c 	.word	0x2000027c

08000e50 <setModulationParams>:
void setModulationParams(unsigned long bitRate, unsigned long fDev) {
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
 8000e58:	6039      	str	r1, [r7, #0]
	mod_params.PacketType = PACKET_TYPE_GFSK;
 8000e5a:	4b0b      	ldr	r3, [pc, #44]	; (8000e88 <setModulationParams+0x38>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	701a      	strb	r2, [r3, #0]
	mod_params.Params.Gfsk.Bandwidth = RX_BW_29300;
 8000e60:	4b09      	ldr	r3, [pc, #36]	; (8000e88 <setModulationParams+0x38>)
 8000e62:	220d      	movs	r2, #13
 8000e64:	735a      	strb	r2, [r3, #13]
	mod_params.Params.Gfsk.BitRate = bitRate;
 8000e66:	4a08      	ldr	r2, [pc, #32]	; (8000e88 <setModulationParams+0x38>)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	6053      	str	r3, [r2, #4]
	mod_params.Params.Gfsk.Fdev = fDev;
 8000e6c:	4a06      	ldr	r2, [pc, #24]	; (8000e88 <setModulationParams+0x38>)
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	6093      	str	r3, [r2, #8]
	mod_params.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8000e72:	4b05      	ldr	r3, [pc, #20]	; (8000e88 <setModulationParams+0x38>)
 8000e74:	220b      	movs	r2, #11
 8000e76:	731a      	strb	r2, [r3, #12]
	SUBGRF_SetModulationParams(&mod_params);
 8000e78:	4803      	ldr	r0, [pc, #12]	; (8000e88 <setModulationParams+0x38>)
 8000e7a:	f009 fdc3 	bl	800aa04 <SUBGRF_SetModulationParams>

}
 8000e7e:	bf00      	nop
 8000e80:	3708      	adds	r7, #8
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	20000290 	.word	0x20000290

08000e8c <radioConfig>:

void radioConfig(uint8_t *buffer, uint8_t buffer_len) {
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b084      	sub	sp, #16
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
 8000e94:	460b      	mov	r3, r1
 8000e96:	70fb      	strb	r3, [r7, #3]
	SUBGRF_SetBufferBaseAddress(0x00, 0x00);
 8000e98:	2100      	movs	r1, #0
 8000e9a:	2000      	movs	r0, #0
 8000e9c:	f009 ff22 	bl	800ace4 <SUBGRF_SetBufferBaseAddress>
	SUBGRF_SetPayload(buffer, buffer_len);
 8000ea0:	78fb      	ldrb	r3, [r7, #3]
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	6878      	ldr	r0, [r7, #4]
 8000ea6:	f009 f903 	bl	800a0b0 <SUBGRF_SetPayload>
	SUBGRF_SetSyncWord(( uint8_t[] ) { 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00,
 8000eaa:	4a0f      	ldr	r2, [pc, #60]	; (8000ee8 <radioConfig+0x5c>)
 8000eac:	f107 0308 	add.w	r3, r7, #8
 8000eb0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000eb4:	e883 0003 	stmia.w	r3, {r0, r1}
 8000eb8:	f107 0308 	add.w	r3, r7, #8
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f009 f93c 	bl	800a13a <SUBGRF_SetSyncWord>
					0x00 });
	SUBGRF_SetWhiteningSeed(0x01FF);
 8000ec2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8000ec6:	f009 f987 	bl	800a1d8 <SUBGRF_SetWhiteningSeed>
	SUBGRF_SetPaConfig(PA_DUTY_CYCLE, HP_MAX, PA_SEL, 0x01);
 8000eca:	2301      	movs	r3, #1
 8000ecc:	2201      	movs	r2, #1
 8000ece:	2100      	movs	r1, #0
 8000ed0:	2007      	movs	r0, #7
 8000ed2:	f009 fbdf 	bl	800a694 <SUBGRF_SetPaConfig>
	SUBGRF_SetTxParams(RFO_LP, POWER, RAMP_TIME);
 8000ed6:	2202      	movs	r2, #2
 8000ed8:	210e      	movs	r1, #14
 8000eda:	2001      	movs	r0, #1
 8000edc:	f009 fcc4 	bl	800a868 <SUBGRF_SetTxParams>
}
 8000ee0:	bf00      	nop
 8000ee2:	3710      	adds	r7, #16
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	0800c59c 	.word	0x0800c59c

08000eec <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b088      	sub	sp, #32
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
	if (huart == &huart2 || huart == &hlpuart1 || huart == &huart1) {
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	4a9f      	ldr	r2, [pc, #636]	; (8001174 <HAL_UART_RxCpltCallback+0x288>)
 8000ef8:	4293      	cmp	r3, r2
 8000efa:	d008      	beq.n	8000f0e <HAL_UART_RxCpltCallback+0x22>
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	4a9e      	ldr	r2, [pc, #632]	; (8001178 <HAL_UART_RxCpltCallback+0x28c>)
 8000f00:	4293      	cmp	r3, r2
 8000f02:	d004      	beq.n	8000f0e <HAL_UART_RxCpltCallback+0x22>
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	4a9d      	ldr	r2, [pc, #628]	; (800117c <HAL_UART_RxCpltCallback+0x290>)
 8000f08:	4293      	cmp	r3, r2
 8000f0a:	f040 8227 	bne.w	800135c <HAL_UART_RxCpltCallback+0x470>

		if (OBC_HANDSHAKE_FLAG) {
 8000f0e:	4b9c      	ldr	r3, [pc, #624]	; (8001180 <HAL_UART_RxCpltCallback+0x294>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	f000 8222 	beq.w	800135c <HAL_UART_RxCpltCallback+0x470>

			uint8_t header = 0x00;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	72fb      	strb	r3, [r7, #11]

			if (OBC_UART_RX[0] == header || OBC_UART_RX[0] != 0x53) {
 8000f1c:	4b99      	ldr	r3, [pc, #612]	; (8001184 <HAL_UART_RxCpltCallback+0x298>)
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	7afa      	ldrb	r2, [r7, #11]
 8000f22:	429a      	cmp	r2, r3
 8000f24:	d003      	beq.n	8000f2e <HAL_UART_RxCpltCallback+0x42>
 8000f26:	4b97      	ldr	r3, [pc, #604]	; (8001184 <HAL_UART_RxCpltCallback+0x298>)
 8000f28:	781b      	ldrb	r3, [r3, #0]
 8000f2a:	2b53      	cmp	r3, #83	; 0x53
 8000f2c:	d011      	beq.n	8000f52 <HAL_UART_RxCpltCallback+0x66>

				for (int loop1 = 0; loop1 < sizeof(OBC_UART_RX); loop1++) {
 8000f2e:	2300      	movs	r3, #0
 8000f30:	61fb      	str	r3, [r7, #28]
 8000f32:	e00b      	b.n	8000f4c <HAL_UART_RxCpltCallback+0x60>
					OBC_UART_RX[loop1] = OBC_UART_RX[loop1 + 1];
 8000f34:	69fb      	ldr	r3, [r7, #28]
 8000f36:	3301      	adds	r3, #1
 8000f38:	4a92      	ldr	r2, [pc, #584]	; (8001184 <HAL_UART_RxCpltCallback+0x298>)
 8000f3a:	5cd1      	ldrb	r1, [r2, r3]
 8000f3c:	4a91      	ldr	r2, [pc, #580]	; (8001184 <HAL_UART_RxCpltCallback+0x298>)
 8000f3e:	69fb      	ldr	r3, [r7, #28]
 8000f40:	4413      	add	r3, r2
 8000f42:	460a      	mov	r2, r1
 8000f44:	701a      	strb	r2, [r3, #0]
				for (int loop1 = 0; loop1 < sizeof(OBC_UART_RX); loop1++) {
 8000f46:	69fb      	ldr	r3, [r7, #28]
 8000f48:	3301      	adds	r3, #1
 8000f4a:	61fb      	str	r3, [r7, #28]
 8000f4c:	69fb      	ldr	r3, [r7, #28]
 8000f4e:	2b54      	cmp	r3, #84	; 0x54
 8000f50:	d9f0      	bls.n	8000f34 <HAL_UART_RxCpltCallback+0x48>
				}
			}

			if (IS_EN_REQ_PA) {
 8000f52:	4b8d      	ldr	r3, [pc, #564]	; (8001188 <HAL_UART_RxCpltCallback+0x29c>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d006      	beq.n	8000f68 <HAL_UART_RxCpltCallback+0x7c>

				IS_EN_REQ_PA = 0;
 8000f5a:	4b8b      	ldr	r3, [pc, #556]	; (8001188 <HAL_UART_RxCpltCallback+0x29c>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	601a      	str	r2, [r3, #0]

				OBC_SUCCESS_DATA_RX_FLAG = 1;
 8000f60:	4b8a      	ldr	r3, [pc, #552]	; (800118c <HAL_UART_RxCpltCallback+0x2a0>)
 8000f62:	2201      	movs	r2, #1
 8000f64:	601a      	str	r2, [r3, #0]
 8000f66:	e1e9      	b.n	800133c <HAL_UART_RxCpltCallback+0x450>

			} else {

				IS_EN_REQ_PA = 0;
 8000f68:	4b87      	ldr	r3, [pc, #540]	; (8001188 <HAL_UART_RxCpltCallback+0x29c>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	601a      	str	r2, [r3, #0]

				packet_type_true = check_packet_type(OBC_UART_RX);
 8000f6e:	4885      	ldr	r0, [pc, #532]	; (8001184 <HAL_UART_RxCpltCallback+0x298>)
 8000f70:	f7ff fe02 	bl	8000b78 <check_packet_type>
 8000f74:	4603      	mov	r3, r0
 8000f76:	4a86      	ldr	r2, [pc, #536]	; (8001190 <HAL_UART_RxCpltCallback+0x2a4>)
 8000f78:	6013      	str	r3, [r2, #0]

				if (packet_type_true) {
 8000f7a:	4b85      	ldr	r3, [pc, #532]	; (8001190 <HAL_UART_RxCpltCallback+0x2a4>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	f000 819f 	beq.w	80012c2 <HAL_UART_RxCpltCallback+0x3d6>

					if (DIGIPEATER_STATUS == 1 && BEACON_COUNT == 0
 8000f84:	4b83      	ldr	r3, [pc, #524]	; (8001194 <HAL_UART_RxCpltCallback+0x2a8>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	2b01      	cmp	r3, #1
 8000f8a:	f040 813f 	bne.w	800120c <HAL_UART_RxCpltCallback+0x320>
 8000f8e:	4b82      	ldr	r3, [pc, #520]	; (8001198 <HAL_UART_RxCpltCallback+0x2ac>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	f040 813a 	bne.w	800120c <HAL_UART_RxCpltCallback+0x320>
							&& DIGIPEATER_RX_FLAG == 1) {
 8000f98:	4b80      	ldr	r3, [pc, #512]	; (800119c <HAL_UART_RxCpltCallback+0x2b0>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	2b01      	cmp	r3, #1
 8000f9e:	f040 8135 	bne.w	800120c <HAL_UART_RxCpltCallback+0x320>

						OBC_SUCCESS_DATA_RX_FLAG = 0;
 8000fa2:	4b7a      	ldr	r3, [pc, #488]	; (800118c <HAL_UART_RxCpltCallback+0x2a0>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	601a      	str	r2, [r3, #0]
//					for (int i = 0; i < sizeof(OBC_UART_RX); i++) {
//						myDebug("%02x ", OBC_UART_RX[i]);
//					}
//					myDebug("\r\n");

						if (OBC_UART_RX[0] == 0x53 && OBC_UART_RX[83] == 0x7E) {
 8000fa8:	4b76      	ldr	r3, [pc, #472]	; (8001184 <HAL_UART_RxCpltCallback+0x298>)
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	2b53      	cmp	r3, #83	; 0x53
 8000fae:	f040 80a1 	bne.w	80010f4 <HAL_UART_RxCpltCallback+0x208>
 8000fb2:	4b74      	ldr	r3, [pc, #464]	; (8001184 <HAL_UART_RxCpltCallback+0x298>)
 8000fb4:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8000fb8:	2b7e      	cmp	r3, #126	; 0x7e
 8000fba:	f040 809b 	bne.w	80010f4 <HAL_UART_RxCpltCallback+0x208>
							myDebug(
 8000fbe:	4878      	ldr	r0, [pc, #480]	; (80011a0 <HAL_UART_RxCpltCallback+0x2b4>)
 8000fc0:	f7ff fbc4 	bl	800074c <myDebug>
									"--> Correct Digipeater Data received from OBC\n");
							obc_ilen = OBC_UART_RX[2];  //len of info
 8000fc4:	4b6f      	ldr	r3, [pc, #444]	; (8001184 <HAL_UART_RxCpltCallback+0x298>)
 8000fc6:	789a      	ldrb	r2, [r3, #2]
 8000fc8:	4b76      	ldr	r3, [pc, #472]	; (80011a4 <HAL_UART_RxCpltCallback+0x2b8>)
 8000fca:	701a      	strb	r2, [r3, #0]
							PACKET_TYPE = OBC_UART_RX[1]; //packet_type
 8000fcc:	4b6d      	ldr	r3, [pc, #436]	; (8001184 <HAL_UART_RxCpltCallback+0x298>)
 8000fce:	785a      	ldrb	r2, [r3, #1]
 8000fd0:	4b75      	ldr	r3, [pc, #468]	; (80011a8 <HAL_UART_RxCpltCallback+0x2bc>)
 8000fd2:	701a      	strb	r2, [r3, #0]
							DIGIPEATER_FLAG = 1;
 8000fd4:	4b75      	ldr	r3, [pc, #468]	; (80011ac <HAL_UART_RxCpltCallback+0x2c0>)
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	601a      	str	r2, [r3, #0]

							getAX25Packet(OBC_UART_RX, obc_ilen);
 8000fda:	4b72      	ldr	r3, [pc, #456]	; (80011a4 <HAL_UART_RxCpltCallback+0x2b8>)
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	4619      	mov	r1, r3
 8000fe0:	4868      	ldr	r0, [pc, #416]	; (8001184 <HAL_UART_RxCpltCallback+0x298>)
 8000fe2:	f7ff fb27 	bl	8000634 <getAX25Packet>

							tx_buffer_len = countsDataBetweenFlags(
 8000fe6:	2196      	movs	r1, #150	; 0x96
 8000fe8:	4871      	ldr	r0, [pc, #452]	; (80011b0 <HAL_UART_RxCpltCallback+0x2c4>)
 8000fea:	f7ff fed1 	bl	8000d90 <countsDataBetweenFlags>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	4a70      	ldr	r2, [pc, #448]	; (80011b4 <HAL_UART_RxCpltCallback+0x2c8>)
 8000ff2:	6013      	str	r3, [r2, #0]
									temp_tx_buffer, sizeof(temp_tx_buffer));

//						myDebug(		"Digipeater Packet complete, ready to TX: 0x%x\r\n", temp_tx_buffer);
							for (int j = 0; j < tx_buffer_len; j++) {
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	61bb      	str	r3, [r7, #24]
 8000ff8:	e00b      	b.n	8001012 <HAL_UART_RxCpltCallback+0x126>
								tx_buffer[j] = temp_tx_buffer[j];
 8000ffa:	4a6d      	ldr	r2, [pc, #436]	; (80011b0 <HAL_UART_RxCpltCallback+0x2c4>)
 8000ffc:	69bb      	ldr	r3, [r7, #24]
 8000ffe:	4413      	add	r3, r2
 8001000:	7819      	ldrb	r1, [r3, #0]
 8001002:	4a6d      	ldr	r2, [pc, #436]	; (80011b8 <HAL_UART_RxCpltCallback+0x2cc>)
 8001004:	69bb      	ldr	r3, [r7, #24]
 8001006:	4413      	add	r3, r2
 8001008:	460a      	mov	r2, r1
 800100a:	701a      	strb	r2, [r3, #0]
							for (int j = 0; j < tx_buffer_len; j++) {
 800100c:	69bb      	ldr	r3, [r7, #24]
 800100e:	3301      	adds	r3, #1
 8001010:	61bb      	str	r3, [r7, #24]
 8001012:	4b68      	ldr	r3, [pc, #416]	; (80011b4 <HAL_UART_RxCpltCallback+0x2c8>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	69ba      	ldr	r2, [r7, #24]
 8001018:	429a      	cmp	r2, r3
 800101a:	dbee      	blt.n	8000ffa <HAL_UART_RxCpltCallback+0x10e>
//							myDebug("%02x ", tx_buffer[j]);
							}
//						myDebug("\r\n");
//						myDebug("size of tx_buffer = %d\r\n", tx_buffer_len);

							memset(OBC_UART_RX, '\0', obc_ilen);
 800101c:	4b61      	ldr	r3, [pc, #388]	; (80011a4 <HAL_UART_RxCpltCallback+0x2b8>)
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	461a      	mov	r2, r3
 8001022:	2100      	movs	r1, #0
 8001024:	4857      	ldr	r0, [pc, #348]	; (8001184 <HAL_UART_RxCpltCallback+0x298>)
 8001026:	f00a fde5 	bl	800bbf4 <memset>
							memset(temp_tx_buffer, '\0',
 800102a:	2296      	movs	r2, #150	; 0x96
 800102c:	2100      	movs	r1, #0
 800102e:	4860      	ldr	r0, [pc, #384]	; (80011b0 <HAL_UART_RxCpltCallback+0x2c4>)
 8001030:	f00a fde0 	bl	800bbf4 <memset>
									sizeof(temp_tx_buffer));

							delay_us(500000);
 8001034:	4861      	ldr	r0, [pc, #388]	; (80011bc <HAL_UART_RxCpltCallback+0x2d0>)
 8001036:	f7ff fb6f 	bl	8000718 <delay_us>

							setPacketParams(tx_buffer_len);
 800103a:	4b5e      	ldr	r3, [pc, #376]	; (80011b4 <HAL_UART_RxCpltCallback+0x2c8>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	b2db      	uxtb	r3, r3
 8001040:	4618      	mov	r0, r3
 8001042:	f7ff fedb 	bl	8000dfc <setPacketParams>
							setModulationParams(GFSK_BR_1200,
 8001046:	f640 31b8 	movw	r1, #3000	; 0xbb8
 800104a:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 800104e:	f7ff feff 	bl	8000e50 <setModulationParams>
							GFSK_FDEV_1200);
							radioConfig(tx_buffer, tx_buffer_len);
 8001052:	4b58      	ldr	r3, [pc, #352]	; (80011b4 <HAL_UART_RxCpltCallback+0x2c8>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	b2db      	uxtb	r3, r3
 8001058:	4619      	mov	r1, r3
 800105a:	4857      	ldr	r0, [pc, #348]	; (80011b8 <HAL_UART_RxCpltCallback+0x2cc>)
 800105c:	f7ff ff16 	bl	8000e8c <radioConfig>

							myDebug(
 8001060:	4857      	ldr	r0, [pc, #348]	; (80011c0 <HAL_UART_RxCpltCallback+0x2d4>)
 8001062:	f7ff fb73 	bl	800074c <myDebug>
									"\n########## TX Configuration: ##########\n");

							myDebug("FREQUENCY MODS: DOWNLINK FREQ: %lu Hz\r\n",
 8001066:	4957      	ldr	r1, [pc, #348]	; (80011c4 <HAL_UART_RxCpltCallback+0x2d8>)
 8001068:	4857      	ldr	r0, [pc, #348]	; (80011c8 <HAL_UART_RxCpltCallback+0x2dc>)
 800106a:	f7ff fb6f 	bl	800074c <myDebug>
							FREQ_437_MHZ);
							myDebug("Bit Rate: 	%d\n\r",
 800106e:	4b57      	ldr	r3, [pc, #348]	; (80011cc <HAL_UART_RxCpltCallback+0x2e0>)
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	4619      	mov	r1, r3
 8001074:	4856      	ldr	r0, [pc, #344]	; (80011d0 <HAL_UART_RxCpltCallback+0x2e4>)
 8001076:	f7ff fb69 	bl	800074c <myDebug>
									mod_params.Params.Gfsk.BitRate);
							myDebug("Frequency Deviation: 	%d\n\r",
 800107a:	4b54      	ldr	r3, [pc, #336]	; (80011cc <HAL_UART_RxCpltCallback+0x2e0>)
 800107c:	689b      	ldr	r3, [r3, #8]
 800107e:	4619      	mov	r1, r3
 8001080:	4854      	ldr	r0, [pc, #336]	; (80011d4 <HAL_UART_RxCpltCallback+0x2e8>)
 8001082:	f7ff fb63 	bl	800074c <myDebug>
									mod_params.Params.Gfsk.Fdev);
							myDebug("RECEVING BANDWIDTH: 	%d\n\r",
									mod_params.Params.Gfsk.Bandwidth);
 8001086:	4b51      	ldr	r3, [pc, #324]	; (80011cc <HAL_UART_RxCpltCallback+0x2e0>)
 8001088:	7b5b      	ldrb	r3, [r3, #13]
							myDebug("RECEVING BANDWIDTH: 	%d\n\r",
 800108a:	4619      	mov	r1, r3
 800108c:	4852      	ldr	r0, [pc, #328]	; (80011d8 <HAL_UART_RxCpltCallback+0x2ec>)
 800108e:	f7ff fb5d 	bl	800074c <myDebug>
							myDebug("Packet Type 			%d\n\r",
									pkt_params.PacketType);
 8001092:	4b52      	ldr	r3, [pc, #328]	; (80011dc <HAL_UART_RxCpltCallback+0x2f0>)
 8001094:	781b      	ldrb	r3, [r3, #0]
							myDebug("Packet Type 			%d\n\r",
 8001096:	4619      	mov	r1, r3
 8001098:	4851      	ldr	r0, [pc, #324]	; (80011e0 <HAL_UART_RxCpltCallback+0x2f4>)
 800109a:	f7ff fb57 	bl	800074c <myDebug>
							myDebug("PayloadLength 			%d\n\r",
									pkt_params.Params.Gfsk.PayloadLength);
 800109e:	4b4f      	ldr	r3, [pc, #316]	; (80011dc <HAL_UART_RxCpltCallback+0x2f0>)
 80010a0:	7a1b      	ldrb	r3, [r3, #8]
							myDebug("PayloadLength 			%d\n\r",
 80010a2:	4619      	mov	r1, r3
 80010a4:	484f      	ldr	r0, [pc, #316]	; (80011e4 <HAL_UART_RxCpltCallback+0x2f8>)
 80010a6:	f7ff fb51 	bl	800074c <myDebug>
							myDebug("PreambleLength 		%d\n\r",
									pkt_params.Params.Gfsk.PreambleLength);
 80010aa:	4b4c      	ldr	r3, [pc, #304]	; (80011dc <HAL_UART_RxCpltCallback+0x2f0>)
 80010ac:	885b      	ldrh	r3, [r3, #2]
							myDebug("PreambleLength 		%d\n\r",
 80010ae:	4619      	mov	r1, r3
 80010b0:	484d      	ldr	r0, [pc, #308]	; (80011e8 <HAL_UART_RxCpltCallback+0x2fc>)
 80010b2:	f7ff fb4b 	bl	800074c <myDebug>
							myDebug("PreambleMinDetect		%d\n\r",
									pkt_params.Params.Gfsk.PreambleMinDetect);
 80010b6:	4b49      	ldr	r3, [pc, #292]	; (80011dc <HAL_UART_RxCpltCallback+0x2f0>)
 80010b8:	791b      	ldrb	r3, [r3, #4]
							myDebug("PreambleMinDetect		%d\n\r",
 80010ba:	4619      	mov	r1, r3
 80010bc:	484b      	ldr	r0, [pc, #300]	; (80011ec <HAL_UART_RxCpltCallback+0x300>)
 80010be:	f7ff fb45 	bl	800074c <myDebug>
							myDebug("HeaderType 			%d\n\r",
									pkt_params.Params.Gfsk.HeaderType);
 80010c2:	4b46      	ldr	r3, [pc, #280]	; (80011dc <HAL_UART_RxCpltCallback+0x2f0>)
 80010c4:	79db      	ldrb	r3, [r3, #7]
							myDebug("HeaderType 			%d\n\r",
 80010c6:	4619      	mov	r1, r3
 80010c8:	4849      	ldr	r0, [pc, #292]	; (80011f0 <HAL_UART_RxCpltCallback+0x304>)
 80010ca:	f7ff fb3f 	bl	800074c <myDebug>
							myDebug(
 80010ce:	4849      	ldr	r0, [pc, #292]	; (80011f4 <HAL_UART_RxCpltCallback+0x308>)
 80010d0:	f7ff fb3c 	bl	800074c <myDebug>
									"__________*******************__________\r\n");

							SUBGRF_SetRfFrequency(FREQ_437_MHZ);
 80010d4:	483b      	ldr	r0, [pc, #236]	; (80011c4 <HAL_UART_RxCpltCallback+0x2d8>)
 80010d6:	f009 fb5b 	bl	800a790 <SUBGRF_SetRfFrequency>
							SUBGRF_SetSwitch(RFO_LP, RFSWITCH_TX);
 80010da:	2101      	movs	r1, #1
 80010dc:	2001      	movs	r0, #1
 80010de:	f009 ff9f 	bl	800b020 <SUBGRF_SetSwitch>
							SUBGRF_SendPayload(tx_buffer, tx_buffer_len, 0);
 80010e2:	4b34      	ldr	r3, [pc, #208]	; (80011b4 <HAL_UART_RxCpltCallback+0x2c8>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	b2db      	uxtb	r3, r3
 80010e8:	2200      	movs	r2, #0
 80010ea:	4619      	mov	r1, r3
 80010ec:	4832      	ldr	r0, [pc, #200]	; (80011b8 <HAL_UART_RxCpltCallback+0x2cc>)
 80010ee:	f009 f811 	bl	800a114 <SUBGRF_SendPayload>
						if (OBC_UART_RX[0] == 0x53 && OBC_UART_RX[83] == 0x7E) {
 80010f2:	e122      	b.n	800133a <HAL_UART_RxCpltCallback+0x44e>

						} else {
							myDebug(
 80010f4:	4840      	ldr	r0, [pc, #256]	; (80011f8 <HAL_UART_RxCpltCallback+0x30c>)
 80010f6:	f7ff fb29 	bl	800074c <myDebug>
									"*** Incorrect Digipeater Data received from OBC\n");
							if (HAL_UART_Transmit(&huart2, OBC_UART_RX,
 80010fa:	4b40      	ldr	r3, [pc, #256]	; (80011fc <HAL_UART_RxCpltCallback+0x310>)
 80010fc:	781b      	ldrb	r3, [r3, #0]
 80010fe:	b29a      	uxth	r2, r3
 8001100:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001104:	491f      	ldr	r1, [pc, #124]	; (8001184 <HAL_UART_RxCpltCallback+0x298>)
 8001106:	481b      	ldr	r0, [pc, #108]	; (8001174 <HAL_UART_RxCpltCallback+0x288>)
 8001108:	f005 fb39 	bl	800677e <HAL_UART_Transmit>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d00c      	beq.n	800112c <HAL_UART_RxCpltCallback+0x240>
									obc_plen, 2000) == HAL_OK
									|| HAL_UART_Transmit(&hlpuart1, OBC_UART_RX,
 8001112:	4b3a      	ldr	r3, [pc, #232]	; (80011fc <HAL_UART_RxCpltCallback+0x310>)
 8001114:	781b      	ldrb	r3, [r3, #0]
 8001116:	b29a      	uxth	r2, r3
 8001118:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800111c:	4919      	ldr	r1, [pc, #100]	; (8001184 <HAL_UART_RxCpltCallback+0x298>)
 800111e:	4816      	ldr	r0, [pc, #88]	; (8001178 <HAL_UART_RxCpltCallback+0x28c>)
 8001120:	f005 fb2d 	bl	800677e <HAL_UART_Transmit>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	f040 8107 	bne.w	800133a <HAL_UART_RxCpltCallback+0x44e>
											obc_plen, 2000) == HAL_OK) {
								myDebug(
 800112c:	2155      	movs	r1, #85	; 0x55
 800112e:	4834      	ldr	r0, [pc, #208]	; (8001200 <HAL_UART_RxCpltCallback+0x314>)
 8001130:	f7ff fb0c 	bl	800074c <myDebug>
										"*** Incorrect Digipeater Data re-transmit to OBC, Length: %d bytes\r\n",
										sizeof(OBC_UART_RX));

								for (int i = 0; i < sizeof(OBC_UART_RX); i++) {
 8001134:	2300      	movs	r3, #0
 8001136:	617b      	str	r3, [r7, #20]
 8001138:	e00a      	b.n	8001150 <HAL_UART_RxCpltCallback+0x264>
									myDebug("%02x ", OBC_UART_RX[i]);
 800113a:	4a12      	ldr	r2, [pc, #72]	; (8001184 <HAL_UART_RxCpltCallback+0x298>)
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	4413      	add	r3, r2
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	4619      	mov	r1, r3
 8001144:	482f      	ldr	r0, [pc, #188]	; (8001204 <HAL_UART_RxCpltCallback+0x318>)
 8001146:	f7ff fb01 	bl	800074c <myDebug>
								for (int i = 0; i < sizeof(OBC_UART_RX); i++) {
 800114a:	697b      	ldr	r3, [r7, #20]
 800114c:	3301      	adds	r3, #1
 800114e:	617b      	str	r3, [r7, #20]
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	2b54      	cmp	r3, #84	; 0x54
 8001154:	d9f1      	bls.n	800113a <HAL_UART_RxCpltCallback+0x24e>
								}

								myDebug("\r\n");
 8001156:	482c      	ldr	r0, [pc, #176]	; (8001208 <HAL_UART_RxCpltCallback+0x31c>)
 8001158:	f7ff faf8 	bl	800074c <myDebug>

								memset(OBC_UART_RX, '\0', sizeof(OBC_UART_RX));
 800115c:	2255      	movs	r2, #85	; 0x55
 800115e:	2100      	movs	r1, #0
 8001160:	4808      	ldr	r0, [pc, #32]	; (8001184 <HAL_UART_RxCpltCallback+0x298>)
 8001162:	f00a fd47 	bl	800bbf4 <memset>

								OBC_SUCCESS_DATA_RX_FLAG = 0;
 8001166:	4b09      	ldr	r3, [pc, #36]	; (800118c <HAL_UART_RxCpltCallback+0x2a0>)
 8001168:	2200      	movs	r2, #0
 800116a:	601a      	str	r2, [r3, #0]
								DIGIPEATER_FLAG = 0;
 800116c:	4b0f      	ldr	r3, [pc, #60]	; (80011ac <HAL_UART_RxCpltCallback+0x2c0>)
 800116e:	2200      	movs	r2, #0
 8001170:	601a      	str	r2, [r3, #0]
						if (OBC_UART_RX[0] == 0x53 && OBC_UART_RX[83] == 0x7E) {
 8001172:	e0e2      	b.n	800133a <HAL_UART_RxCpltCallback+0x44e>
 8001174:	20000688 	.word	0x20000688
 8001178:	20000560 	.word	0x20000560
 800117c:	200005f4 	.word	0x200005f4
 8001180:	200004d4 	.word	0x200004d4
 8001184:	20000318 	.word	0x20000318
 8001188:	200004f0 	.word	0x200004f0
 800118c:	2000039c 	.word	0x2000039c
 8001190:	200004e8 	.word	0x200004e8
 8001194:	200004d8 	.word	0x200004d8
 8001198:	20000004 	.word	0x20000004
 800119c:	200004e4 	.word	0x200004e4
 80011a0:	0800c5a4 	.word	0x0800c5a4
 80011a4:	20000316 	.word	0x20000316
 80011a8:	200004dc 	.word	0x200004dc
 80011ac:	200004e0 	.word	0x200004e0
 80011b0:	200003a0 	.word	0x200003a0
 80011b4:	200004d0 	.word	0x200004d0
 80011b8:	20000438 	.word	0x20000438
 80011bc:	0007a120 	.word	0x0007a120
 80011c0:	0800c5d4 	.word	0x0800c5d4
 80011c4:	1a11d018 	.word	0x1a11d018
 80011c8:	0800c600 	.word	0x0800c600
 80011cc:	20000290 	.word	0x20000290
 80011d0:	0800c628 	.word	0x0800c628
 80011d4:	0800c638 	.word	0x0800c638
 80011d8:	0800c654 	.word	0x0800c654
 80011dc:	2000027c 	.word	0x2000027c
 80011e0:	0800c670 	.word	0x0800c670
 80011e4:	0800c684 	.word	0x0800c684
 80011e8:	0800c69c 	.word	0x0800c69c
 80011ec:	0800c6b4 	.word	0x0800c6b4
 80011f0:	0800c6cc 	.word	0x0800c6cc
 80011f4:	0800c6e0 	.word	0x0800c6e0
 80011f8:	0800c70c 	.word	0x0800c70c
 80011fc:	20000001 	.word	0x20000001
 8001200:	0800c740 	.word	0x0800c740
 8001204:	0800c564 	.word	0x0800c564
 8001208:	0800c56c 	.word	0x0800c56c
//					for (int i = 0; i < sizeof(OBC_UART_RX); i++) {
//						myDebug("%02x ", OBC_UART_RX[i]);
//					}
//					myDebug("\r\n");

						if (OBC_UART_RX[0] == 0x53
 800120c:	4b55      	ldr	r3, [pc, #340]	; (8001364 <HAL_UART_RxCpltCallback+0x478>)
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	2b53      	cmp	r3, #83	; 0x53
 8001212:	d11a      	bne.n	800124a <HAL_UART_RxCpltCallback+0x35e>
								&& OBC_UART_RX[(83)] == 0x7E) {
 8001214:	4b53      	ldr	r3, [pc, #332]	; (8001364 <HAL_UART_RxCpltCallback+0x478>)
 8001216:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800121a:	2b7e      	cmp	r3, #126	; 0x7e
 800121c:	d115      	bne.n	800124a <HAL_UART_RxCpltCallback+0x35e>
//						myDebug("--> Correct command received from OBC\n");
							obc_ilen = OBC_UART_RX[2];  //len of info
 800121e:	4b51      	ldr	r3, [pc, #324]	; (8001364 <HAL_UART_RxCpltCallback+0x478>)
 8001220:	789a      	ldrb	r2, [r3, #2]
 8001222:	4b51      	ldr	r3, [pc, #324]	; (8001368 <HAL_UART_RxCpltCallback+0x47c>)
 8001224:	701a      	strb	r2, [r3, #0]
							PACKET_TYPE = OBC_UART_RX[1]; //packet_type
 8001226:	4b4f      	ldr	r3, [pc, #316]	; (8001364 <HAL_UART_RxCpltCallback+0x478>)
 8001228:	785a      	ldrb	r2, [r3, #1]
 800122a:	4b50      	ldr	r3, [pc, #320]	; (800136c <HAL_UART_RxCpltCallback+0x480>)
 800122c:	701a      	strb	r2, [r3, #0]

							if (PACKET_TYPE == 0xB1) {
 800122e:	4b4f      	ldr	r3, [pc, #316]	; (800136c <HAL_UART_RxCpltCallback+0x480>)
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	2bb1      	cmp	r3, #177	; 0xb1
 8001234:	d105      	bne.n	8001242 <HAL_UART_RxCpltCallback+0x356>
								BEACON_COUNT = 2;
 8001236:	4b4e      	ldr	r3, [pc, #312]	; (8001370 <HAL_UART_RxCpltCallback+0x484>)
 8001238:	2202      	movs	r2, #2
 800123a:	601a      	str	r2, [r3, #0]
								COUNT_BEACON = 2;
 800123c:	4b4d      	ldr	r3, [pc, #308]	; (8001374 <HAL_UART_RxCpltCallback+0x488>)
 800123e:	2202      	movs	r2, #2
 8001240:	601a      	str	r2, [r3, #0]
							}

							OBC_SUCCESS_DATA_RX_FLAG = 1;
 8001242:	4b4d      	ldr	r3, [pc, #308]	; (8001378 <HAL_UART_RxCpltCallback+0x48c>)
 8001244:	2201      	movs	r2, #1
 8001246:	601a      	str	r2, [r3, #0]
 8001248:	e078      	b.n	800133c <HAL_UART_RxCpltCallback+0x450>
						} else {
							myDebug(
 800124a:	484c      	ldr	r0, [pc, #304]	; (800137c <HAL_UART_RxCpltCallback+0x490>)
 800124c:	f7ff fa7e 	bl	800074c <myDebug>
									"*** Incorrect command received from OBC\n");
							if (HAL_UART_Transmit(&huart2, OBC_UART_RX,
 8001250:	4b4b      	ldr	r3, [pc, #300]	; (8001380 <HAL_UART_RxCpltCallback+0x494>)
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	b29a      	uxth	r2, r3
 8001256:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800125a:	4942      	ldr	r1, [pc, #264]	; (8001364 <HAL_UART_RxCpltCallback+0x478>)
 800125c:	4849      	ldr	r0, [pc, #292]	; (8001384 <HAL_UART_RxCpltCallback+0x498>)
 800125e:	f005 fa8e 	bl	800677e <HAL_UART_Transmit>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d00b      	beq.n	8001280 <HAL_UART_RxCpltCallback+0x394>
									obc_plen, 2000) == HAL_OK
									|| HAL_UART_Transmit(&hlpuart1, OBC_UART_RX,
 8001268:	4b45      	ldr	r3, [pc, #276]	; (8001380 <HAL_UART_RxCpltCallback+0x494>)
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	b29a      	uxth	r2, r3
 800126e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001272:	493c      	ldr	r1, [pc, #240]	; (8001364 <HAL_UART_RxCpltCallback+0x478>)
 8001274:	4844      	ldr	r0, [pc, #272]	; (8001388 <HAL_UART_RxCpltCallback+0x49c>)
 8001276:	f005 fa82 	bl	800677e <HAL_UART_Transmit>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d15d      	bne.n	800133c <HAL_UART_RxCpltCallback+0x450>
											obc_plen, 2000) == HAL_OK) {
								myDebug(
 8001280:	2155      	movs	r1, #85	; 0x55
 8001282:	4842      	ldr	r0, [pc, #264]	; (800138c <HAL_UART_RxCpltCallback+0x4a0>)
 8001284:	f7ff fa62 	bl	800074c <myDebug>
										"*** Incorrect command re-transmit to OBC, Length: %d bytes\r\n",
										sizeof(OBC_UART_RX));

								for (int i = 0; i < sizeof(OBC_UART_RX); i++) {
 8001288:	2300      	movs	r3, #0
 800128a:	613b      	str	r3, [r7, #16]
 800128c:	e00a      	b.n	80012a4 <HAL_UART_RxCpltCallback+0x3b8>
									myDebug("%02x ", OBC_UART_RX[i]);
 800128e:	4a35      	ldr	r2, [pc, #212]	; (8001364 <HAL_UART_RxCpltCallback+0x478>)
 8001290:	693b      	ldr	r3, [r7, #16]
 8001292:	4413      	add	r3, r2
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	4619      	mov	r1, r3
 8001298:	483d      	ldr	r0, [pc, #244]	; (8001390 <HAL_UART_RxCpltCallback+0x4a4>)
 800129a:	f7ff fa57 	bl	800074c <myDebug>
								for (int i = 0; i < sizeof(OBC_UART_RX); i++) {
 800129e:	693b      	ldr	r3, [r7, #16]
 80012a0:	3301      	adds	r3, #1
 80012a2:	613b      	str	r3, [r7, #16]
 80012a4:	693b      	ldr	r3, [r7, #16]
 80012a6:	2b54      	cmp	r3, #84	; 0x54
 80012a8:	d9f1      	bls.n	800128e <HAL_UART_RxCpltCallback+0x3a2>
								}

								myDebug("\r\n");
 80012aa:	483a      	ldr	r0, [pc, #232]	; (8001394 <HAL_UART_RxCpltCallback+0x4a8>)
 80012ac:	f7ff fa4e 	bl	800074c <myDebug>

								memset(OBC_UART_RX, '\0', sizeof(OBC_UART_RX));
 80012b0:	2255      	movs	r2, #85	; 0x55
 80012b2:	2100      	movs	r1, #0
 80012b4:	482b      	ldr	r0, [pc, #172]	; (8001364 <HAL_UART_RxCpltCallback+0x478>)
 80012b6:	f00a fc9d 	bl	800bbf4 <memset>

								OBC_SUCCESS_DATA_RX_FLAG = 0;
 80012ba:	4b2f      	ldr	r3, [pc, #188]	; (8001378 <HAL_UART_RxCpltCallback+0x48c>)
 80012bc:	2200      	movs	r2, #0
 80012be:	601a      	str	r2, [r3, #0]
 80012c0:	e03c      	b.n	800133c <HAL_UART_RxCpltCallback+0x450>
							}
						}
					}
				} else {
					myDebug("*** Incorrect packet type received from OBC\n");
 80012c2:	4835      	ldr	r0, [pc, #212]	; (8001398 <HAL_UART_RxCpltCallback+0x4ac>)
 80012c4:	f7ff fa42 	bl	800074c <myDebug>

					if (HAL_UART_Transmit(&huart2, OBC_UART_RX, obc_plen, 1000)
 80012c8:	4b2d      	ldr	r3, [pc, #180]	; (8001380 <HAL_UART_RxCpltCallback+0x494>)
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	b29a      	uxth	r2, r3
 80012ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012d2:	4924      	ldr	r1, [pc, #144]	; (8001364 <HAL_UART_RxCpltCallback+0x478>)
 80012d4:	482b      	ldr	r0, [pc, #172]	; (8001384 <HAL_UART_RxCpltCallback+0x498>)
 80012d6:	f005 fa52 	bl	800677e <HAL_UART_Transmit>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d00b      	beq.n	80012f8 <HAL_UART_RxCpltCallback+0x40c>
							== HAL_OK
							|| HAL_UART_Transmit(&hlpuart1, OBC_UART_RX,
 80012e0:	4b27      	ldr	r3, [pc, #156]	; (8001380 <HAL_UART_RxCpltCallback+0x494>)
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	b29a      	uxth	r2, r3
 80012e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012ea:	491e      	ldr	r1, [pc, #120]	; (8001364 <HAL_UART_RxCpltCallback+0x478>)
 80012ec:	4826      	ldr	r0, [pc, #152]	; (8001388 <HAL_UART_RxCpltCallback+0x49c>)
 80012ee:	f005 fa46 	bl	800677e <HAL_UART_Transmit>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d121      	bne.n	800133c <HAL_UART_RxCpltCallback+0x450>
									obc_plen, 1000) == HAL_OK) {
						myDebug(
 80012f8:	2155      	movs	r1, #85	; 0x55
 80012fa:	4828      	ldr	r0, [pc, #160]	; (800139c <HAL_UART_RxCpltCallback+0x4b0>)
 80012fc:	f7ff fa26 	bl	800074c <myDebug>
								"*** Incorrect command re-transmit to OBC, Length: %d\r\n",
								sizeof(OBC_UART_RX));

						for (int i = 0; i < sizeof(OBC_UART_RX); i++) {
 8001300:	2300      	movs	r3, #0
 8001302:	60fb      	str	r3, [r7, #12]
 8001304:	e00a      	b.n	800131c <HAL_UART_RxCpltCallback+0x430>
							myDebug("%02x ", OBC_UART_RX[i]);
 8001306:	4a17      	ldr	r2, [pc, #92]	; (8001364 <HAL_UART_RxCpltCallback+0x478>)
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	4413      	add	r3, r2
 800130c:	781b      	ldrb	r3, [r3, #0]
 800130e:	4619      	mov	r1, r3
 8001310:	481f      	ldr	r0, [pc, #124]	; (8001390 <HAL_UART_RxCpltCallback+0x4a4>)
 8001312:	f7ff fa1b 	bl	800074c <myDebug>
						for (int i = 0; i < sizeof(OBC_UART_RX); i++) {
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	3301      	adds	r3, #1
 800131a:	60fb      	str	r3, [r7, #12]
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	2b54      	cmp	r3, #84	; 0x54
 8001320:	d9f1      	bls.n	8001306 <HAL_UART_RxCpltCallback+0x41a>
						}

						myDebug("\r\n");
 8001322:	481c      	ldr	r0, [pc, #112]	; (8001394 <HAL_UART_RxCpltCallback+0x4a8>)
 8001324:	f7ff fa12 	bl	800074c <myDebug>

						memset(OBC_UART_RX, '\0', sizeof(OBC_UART_RX));
 8001328:	2255      	movs	r2, #85	; 0x55
 800132a:	2100      	movs	r1, #0
 800132c:	480d      	ldr	r0, [pc, #52]	; (8001364 <HAL_UART_RxCpltCallback+0x478>)
 800132e:	f00a fc61 	bl	800bbf4 <memset>

						OBC_SUCCESS_DATA_RX_FLAG = 0;
 8001332:	4b11      	ldr	r3, [pc, #68]	; (8001378 <HAL_UART_RxCpltCallback+0x48c>)
 8001334:	2200      	movs	r2, #0
 8001336:	601a      	str	r2, [r3, #0]
 8001338:	e000      	b.n	800133c <HAL_UART_RxCpltCallback+0x450>
						if (OBC_UART_RX[0] == 0x53 && OBC_UART_RX[83] == 0x7E) {
 800133a:	bf00      	nop
					}
				}
			}

			HAL_UART_Receive_DMA(&huart2, OBC_UART_RX, obc_plen);
 800133c:	4b10      	ldr	r3, [pc, #64]	; (8001380 <HAL_UART_RxCpltCallback+0x494>)
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	b29b      	uxth	r3, r3
 8001342:	461a      	mov	r2, r3
 8001344:	4907      	ldr	r1, [pc, #28]	; (8001364 <HAL_UART_RxCpltCallback+0x478>)
 8001346:	480f      	ldr	r0, [pc, #60]	; (8001384 <HAL_UART_RxCpltCallback+0x498>)
 8001348:	f005 fb64 	bl	8006a14 <HAL_UART_Receive_DMA>

			HAL_UART_Receive_DMA(&hlpuart1, OBC_UART_RX, obc_plen);
 800134c:	4b0c      	ldr	r3, [pc, #48]	; (8001380 <HAL_UART_RxCpltCallback+0x494>)
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	b29b      	uxth	r3, r3
 8001352:	461a      	mov	r2, r3
 8001354:	4903      	ldr	r1, [pc, #12]	; (8001364 <HAL_UART_RxCpltCallback+0x478>)
 8001356:	480c      	ldr	r0, [pc, #48]	; (8001388 <HAL_UART_RxCpltCallback+0x49c>)
 8001358:	f005 fb5c 	bl	8006a14 <HAL_UART_Receive_DMA>
		}
	}
}
 800135c:	bf00      	nop
 800135e:	3720      	adds	r7, #32
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}
 8001364:	20000318 	.word	0x20000318
 8001368:	20000316 	.word	0x20000316
 800136c:	200004dc 	.word	0x200004dc
 8001370:	20000004 	.word	0x20000004
 8001374:	20000008 	.word	0x20000008
 8001378:	2000039c 	.word	0x2000039c
 800137c:	0800c788 	.word	0x0800c788
 8001380:	20000001 	.word	0x20000001
 8001384:	20000688 	.word	0x20000688
 8001388:	20000560 	.word	0x20000560
 800138c:	0800c7b4 	.word	0x0800c7b4
 8001390:	0800c564 	.word	0x0800c564
 8001394:	0800c56c 	.word	0x0800c56c
 8001398:	0800c7f4 	.word	0x0800c7f4
 800139c:	0800c824 	.word	0x0800c824

080013a0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80013a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80013a4:	b0b5      	sub	sp, #212	; 0xd4
 80013a6:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80013a8:	f002 f860 	bl	800346c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80013ac:	f000 fe88 	bl	80020c0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80013b0:	f7ff fc3e 	bl	8000c30 <MX_GPIO_Init>
	MX_DMA_Init();
 80013b4:	f7ff fa1c 	bl	80007f0 <MX_DMA_Init>
	MX_USART2_UART_Init();
 80013b8:	f001 fddc 	bl	8002f74 <MX_USART2_UART_Init>
	MX_LPUART1_UART_Init();
 80013bc:	f001 fd42 	bl	8002e44 <MX_LPUART1_UART_Init>
	MX_USART1_UART_Init();
 80013c0:	f001 fd8c 	bl	8002edc <MX_USART1_UART_Init>
	MX_SubGHz_Phy_Init();
 80013c4:	f00a f86b 	bl	800b49e <MX_SubGHz_Phy_Init>
	MX_TIM2_Init();
 80013c8:	f001 fc06 	bl	8002bd8 <MX_TIM2_Init>
	/* USER CODE BEGIN 2 */

	HAL_TIM_Base_Start(&htim2);
 80013cc:	489d      	ldr	r0, [pc, #628]	; (8001644 <main+0x2a4>)
 80013ce:	f004 feff 	bl	80061d0 <HAL_TIM_Base_Start>

	myDebug("########## Slippers2Sat SATELLITE COM: BEGIN ##########\r\n");
 80013d2:	489d      	ldr	r0, [pc, #628]	; (8001648 <main+0x2a8>)
 80013d4:	f7ff f9ba 	bl	800074c <myDebug>
	myDebug("########## COMMUNICATION PARAMETERS ##########\r\n");
 80013d8:	489c      	ldr	r0, [pc, #624]	; (800164c <main+0x2ac>)
 80013da:	f7ff f9b7 	bl	800074c <myDebug>
	myDebug("Modulation: GFSK PACKET\r\n");
 80013de:	489c      	ldr	r0, [pc, #624]	; (8001650 <main+0x2b0>)
 80013e0:	f7ff f9b4 	bl	800074c <myDebug>
	myDebug("FREQUENCY MODES: DOWNLINK FREQ: %luHz and UPLINK FREQ: %lu Hz\r\n",
 80013e4:	4a9b      	ldr	r2, [pc, #620]	; (8001654 <main+0x2b4>)
 80013e6:	499c      	ldr	r1, [pc, #624]	; (8001658 <main+0x2b8>)
 80013e8:	489c      	ldr	r0, [pc, #624]	; (800165c <main+0x2bc>)
 80013ea:	f7ff f9af 	bl	800074c <myDebug>
	FREQ_437_MHZ, FREQ_435_MHZ);
	myDebug("STM32 BSP_SubGHz-WL Radio: Low Power\n");
 80013ee:	489c      	ldr	r0, [pc, #624]	; (8001660 <main+0x2c0>)
 80013f0:	f7ff f9ac 	bl	800074c <myDebug>
	myDebug(
 80013f4:	230e      	movs	r3, #14
 80013f6:	9300      	str	r3, [sp, #0]
 80013f8:	2301      	movs	r3, #1
 80013fa:	2200      	movs	r2, #0
 80013fc:	2107      	movs	r1, #7
 80013fe:	4899      	ldr	r0, [pc, #612]	; (8001664 <main+0x2c4>)
 8001400:	f7ff f9a4 	bl	800074c <myDebug>
			"POWER CONFIG:::- \n"
					"\t PA_DUTY_CYCLE: %x, HP_MAX: %x, PA_SEL: %x, POWER TX: %u dBm\r\n",
			PA_DUTY_CYCLE, HP_MAX, PA_SEL, POWER);

	myDebug("\n########## Wait for Handshake ##########\r\n");
 8001404:	4898      	ldr	r0, [pc, #608]	; (8001668 <main+0x2c8>)
 8001406:	f7ff f9a1 	bl	800074c <myDebug>

	while (OBC_HANDSHAKE_FLAG == 0) {
 800140a:	e001      	b.n	8001410 <main+0x70>
		WAIT_FOR_HANDSHAKE();
 800140c:	f001 f9a4 	bl	8002758 <WAIT_FOR_HANDSHAKE>
	while (OBC_HANDSHAKE_FLAG == 0) {
 8001410:	4b96      	ldr	r3, [pc, #600]	; (800166c <main+0x2cc>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d0f9      	beq.n	800140c <main+0x6c>
	}

	SUBGRF_Init(DioIrqHndlr);
 8001418:	4895      	ldr	r0, [pc, #596]	; (8001670 <main+0x2d0>)
 800141a:	f008 fdf7 	bl	800a00c <SUBGRF_Init>

	SUBGRF_SetDioIrqParams(
 800141e:	2300      	movs	r3, #0
 8001420:	2200      	movs	r2, #0
 8001422:	f240 210f 	movw	r1, #527	; 0x20f
 8001426:	f240 200f 	movw	r0, #527	; 0x20f
 800142a:	f009 f955 	bl	800a6d8 <SUBGRF_SetDioIrqParams>
					| IRQ_RX_TX_TIMEOUT | IRQ_SYNCWORD_VALID,
			IRQ_TX_DONE | IRQ_PREAMBLE_DETECTED | IRQ_RX_DONE
					| IRQ_RX_TX_TIMEOUT | IRQ_SYNCWORD_VALID, IRQ_RADIO_NONE,
			IRQ_RADIO_NONE);

	setPacketParams(rx_buffer_len);
 800142e:	4b91      	ldr	r3, [pc, #580]	; (8001674 <main+0x2d4>)
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	4618      	mov	r0, r3
 8001434:	f7ff fce2 	bl	8000dfc <setPacketParams>
	setModulationParams(GFSK_BR_1200, GFSK_FDEV_1200);
 8001438:	f640 31b8 	movw	r1, #3000	; 0xbb8
 800143c:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8001440:	f7ff fd06 	bl	8000e50 <setModulationParams>
	radioConfig(rx_buffer, rx_buffer_len);
 8001444:	4b8b      	ldr	r3, [pc, #556]	; (8001674 <main+0x2d4>)
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	4619      	mov	r1, r3
 800144a:	488b      	ldr	r0, [pc, #556]	; (8001678 <main+0x2d8>)
 800144c:	f7ff fd1e 	bl	8000e8c <radioConfig>

	myDebug(
 8001450:	488a      	ldr	r0, [pc, #552]	; (800167c <main+0x2dc>)
 8001452:	f7ff f97b 	bl	800074c <myDebug>
			"\n########## Operation Starts, Perform any one operation: ##########\r\n");
	myDebug("1. Transmit from Satellite\r\n");
 8001456:	488a      	ldr	r0, [pc, #552]	; (8001680 <main+0x2e0>)
 8001458:	f7ff f978 	bl	800074c <myDebug>
	myDebug("2. Wait to receive GS Command\r\n");
 800145c:	4889      	ldr	r0, [pc, #548]	; (8001684 <main+0x2e4>)
 800145e:	f7ff f975 	bl	800074c <myDebug>

	myDebug("\n########## RX Configuration: ##########\n");
 8001462:	4889      	ldr	r0, [pc, #548]	; (8001688 <main+0x2e8>)
 8001464:	f7ff f972 	bl	800074c <myDebug>

	myDebug("FREQUENCY MODS: UPLINK FREQ: %lu Hz\r\n", FREQ_435_MHZ);
 8001468:	497a      	ldr	r1, [pc, #488]	; (8001654 <main+0x2b4>)
 800146a:	4888      	ldr	r0, [pc, #544]	; (800168c <main+0x2ec>)
 800146c:	f7ff f96e 	bl	800074c <myDebug>
	myDebug("Bit Rate: 	%d\n\r", mod_params.Params.Gfsk.BitRate);
 8001470:	4b87      	ldr	r3, [pc, #540]	; (8001690 <main+0x2f0>)
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	4619      	mov	r1, r3
 8001476:	4887      	ldr	r0, [pc, #540]	; (8001694 <main+0x2f4>)
 8001478:	f7ff f968 	bl	800074c <myDebug>
	myDebug("Frequency Deviation: 	%d\n\r", mod_params.Params.Gfsk.Fdev);
 800147c:	4b84      	ldr	r3, [pc, #528]	; (8001690 <main+0x2f0>)
 800147e:	689b      	ldr	r3, [r3, #8]
 8001480:	4619      	mov	r1, r3
 8001482:	4885      	ldr	r0, [pc, #532]	; (8001698 <main+0x2f8>)
 8001484:	f7ff f962 	bl	800074c <myDebug>
	myDebug("RECEVING BANDWIDTH: 	%d\n\r", mod_params.Params.Gfsk.Bandwidth);
 8001488:	4b81      	ldr	r3, [pc, #516]	; (8001690 <main+0x2f0>)
 800148a:	7b5b      	ldrb	r3, [r3, #13]
 800148c:	4619      	mov	r1, r3
 800148e:	4883      	ldr	r0, [pc, #524]	; (800169c <main+0x2fc>)
 8001490:	f7ff f95c 	bl	800074c <myDebug>
	myDebug("Packet Type 			%d\n\r", pkt_params.PacketType);
 8001494:	4b82      	ldr	r3, [pc, #520]	; (80016a0 <main+0x300>)
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	4619      	mov	r1, r3
 800149a:	4882      	ldr	r0, [pc, #520]	; (80016a4 <main+0x304>)
 800149c:	f7ff f956 	bl	800074c <myDebug>
	myDebug("PayloadLength 			%d\n\r", pkt_params.Params.Gfsk.PayloadLength);
 80014a0:	4b7f      	ldr	r3, [pc, #508]	; (80016a0 <main+0x300>)
 80014a2:	7a1b      	ldrb	r3, [r3, #8]
 80014a4:	4619      	mov	r1, r3
 80014a6:	4880      	ldr	r0, [pc, #512]	; (80016a8 <main+0x308>)
 80014a8:	f7ff f950 	bl	800074c <myDebug>
	myDebug("PreambleLength 		%d\n\r", pkt_params.Params.Gfsk.PreambleLength);
 80014ac:	4b7c      	ldr	r3, [pc, #496]	; (80016a0 <main+0x300>)
 80014ae:	885b      	ldrh	r3, [r3, #2]
 80014b0:	4619      	mov	r1, r3
 80014b2:	487e      	ldr	r0, [pc, #504]	; (80016ac <main+0x30c>)
 80014b4:	f7ff f94a 	bl	800074c <myDebug>
	myDebug("PreambleMinDetect		%d\n\r",
			pkt_params.Params.Gfsk.PreambleMinDetect);
 80014b8:	4b79      	ldr	r3, [pc, #484]	; (80016a0 <main+0x300>)
 80014ba:	791b      	ldrb	r3, [r3, #4]
	myDebug("PreambleMinDetect		%d\n\r",
 80014bc:	4619      	mov	r1, r3
 80014be:	487c      	ldr	r0, [pc, #496]	; (80016b0 <main+0x310>)
 80014c0:	f7ff f944 	bl	800074c <myDebug>
	myDebug("HeaderType 			%d\n\r", pkt_params.Params.Gfsk.HeaderType);
 80014c4:	4b76      	ldr	r3, [pc, #472]	; (80016a0 <main+0x300>)
 80014c6:	79db      	ldrb	r3, [r3, #7]
 80014c8:	4619      	mov	r1, r3
 80014ca:	487a      	ldr	r0, [pc, #488]	; (80016b4 <main+0x314>)
 80014cc:	f7ff f93e 	bl	800074c <myDebug>
	myDebug("__________*******************__________\r\n");
 80014d0:	4879      	ldr	r0, [pc, #484]	; (80016b8 <main+0x318>)
 80014d2:	f7ff f93b 	bl	800074c <myDebug>

	SUBGRF_SetRfFrequency(FREQ_435_MHZ);
 80014d6:	485f      	ldr	r0, [pc, #380]	; (8001654 <main+0x2b4>)
 80014d8:	f009 f95a 	bl	800a790 <SUBGRF_SetRfFrequency>
	SUBGRF_SetSwitch(RFO_LP, RFSWITCH_RX); /*Set RF switch*/
 80014dc:	2100      	movs	r1, #0
 80014de:	2001      	movs	r0, #1
 80014e0:	f009 fd9e 	bl	800b020 <SUBGRF_SetSwitch>
	SUBGRF_SetRxBoosted(0xFFFFFF);
 80014e4:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80014e8:	f008 ff7e 	bl	800a3e8 <SUBGRF_SetRxBoosted>

	HAL_UART_Receive_DMA(&huart2, OBC_UART_RX, obc_plen);
 80014ec:	4b73      	ldr	r3, [pc, #460]	; (80016bc <main+0x31c>)
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	b29b      	uxth	r3, r3
 80014f2:	461a      	mov	r2, r3
 80014f4:	4972      	ldr	r1, [pc, #456]	; (80016c0 <main+0x320>)
 80014f6:	4873      	ldr	r0, [pc, #460]	; (80016c4 <main+0x324>)
 80014f8:	f005 fa8c 	bl	8006a14 <HAL_UART_Receive_DMA>

	HAL_UART_Receive_DMA(&hlpuart1, OBC_UART_RX, obc_plen);
 80014fc:	4b6f      	ldr	r3, [pc, #444]	; (80016bc <main+0x31c>)
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	b29b      	uxth	r3, r3
 8001502:	461a      	mov	r2, r3
 8001504:	496e      	ldr	r1, [pc, #440]	; (80016c0 <main+0x320>)
 8001506:	4870      	ldr	r0, [pc, #448]	; (80016c8 <main+0x328>)
 8001508:	f005 fa84 	bl	8006a14 <HAL_UART_Receive_DMA>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */
		MX_SubGHz_Phy_Process();
 800150c:	f009 ffcf 	bl	800b4ae <MX_SubGHz_Phy_Process>

		/* USER CODE BEGIN 3 */

		delay_us(500000);
 8001510:	486e      	ldr	r0, [pc, #440]	; (80016cc <main+0x32c>)
 8001512:	f7ff f901 	bl	8000718 <delay_us>

		if (OBC_SUCCESS_DATA_RX_FLAG) {
 8001516:	4b6e      	ldr	r3, [pc, #440]	; (80016d0 <main+0x330>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	2b00      	cmp	r3, #0
 800151c:	f000 80e6 	beq.w	80016ec <main+0x34c>

			getAX25Packet(OBC_UART_RX, obc_ilen);
 8001520:	4b6c      	ldr	r3, [pc, #432]	; (80016d4 <main+0x334>)
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	4619      	mov	r1, r3
 8001526:	4866      	ldr	r0, [pc, #408]	; (80016c0 <main+0x320>)
 8001528:	f7ff f884 	bl	8000634 <getAX25Packet>

			tx_buffer_len = countsDataBetweenFlags(temp_tx_buffer,
 800152c:	2196      	movs	r1, #150	; 0x96
 800152e:	486a      	ldr	r0, [pc, #424]	; (80016d8 <main+0x338>)
 8001530:	f7ff fc2e 	bl	8000d90 <countsDataBetweenFlags>
 8001534:	4603      	mov	r3, r0
 8001536:	4a69      	ldr	r2, [pc, #420]	; (80016dc <main+0x33c>)
 8001538:	6013      	str	r3, [r2, #0]
					sizeof(temp_tx_buffer));

//			myDebug("AX.25 complete GS packet ready to TX: 0x%x\r\n",ntemp_tx_buffer);
			for (int j = 0; j < tx_buffer_len; j++) {
 800153a:	2300      	movs	r3, #0
 800153c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001540:	e00f      	b.n	8001562 <main+0x1c2>
				tx_buffer[j] = temp_tx_buffer[j];
 8001542:	4a65      	ldr	r2, [pc, #404]	; (80016d8 <main+0x338>)
 8001544:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001548:	4413      	add	r3, r2
 800154a:	7819      	ldrb	r1, [r3, #0]
 800154c:	4a64      	ldr	r2, [pc, #400]	; (80016e0 <main+0x340>)
 800154e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001552:	4413      	add	r3, r2
 8001554:	460a      	mov	r2, r1
 8001556:	701a      	strb	r2, [r3, #0]
			for (int j = 0; j < tx_buffer_len; j++) {
 8001558:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800155c:	3301      	adds	r3, #1
 800155e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001562:	4b5e      	ldr	r3, [pc, #376]	; (80016dc <main+0x33c>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800156a:	429a      	cmp	r2, r3
 800156c:	dbe9      	blt.n	8001542 <main+0x1a2>
//				myDebug("%02x ", tx_buffer[j]);
			}
//			myDebug("\r\n");
//			myDebug("size of tx_buffer = %d\r\n", tx_buffer_len);

			memset(OBC_UART_RX, '\0', obc_ilen);
 800156e:	4b59      	ldr	r3, [pc, #356]	; (80016d4 <main+0x334>)
 8001570:	781b      	ldrb	r3, [r3, #0]
 8001572:	461a      	mov	r2, r3
 8001574:	2100      	movs	r1, #0
 8001576:	4852      	ldr	r0, [pc, #328]	; (80016c0 <main+0x320>)
 8001578:	f00a fb3c 	bl	800bbf4 <memset>
			memset(temp_tx_buffer, '\0', sizeof(temp_tx_buffer));
 800157c:	2296      	movs	r2, #150	; 0x96
 800157e:	2100      	movs	r1, #0
 8001580:	4855      	ldr	r0, [pc, #340]	; (80016d8 <main+0x338>)
 8001582:	f00a fb37 	bl	800bbf4 <memset>

			setPacketParams(tx_buffer_len);
 8001586:	4b55      	ldr	r3, [pc, #340]	; (80016dc <main+0x33c>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	b2db      	uxtb	r3, r3
 800158c:	4618      	mov	r0, r3
 800158e:	f7ff fc35 	bl	8000dfc <setPacketParams>
			setModulationParams(GFSK_BR_4800, GFSK_FDEV_4800);
 8001592:	f642 61e0 	movw	r1, #12000	; 0x2ee0
 8001596:	f44f 5096 	mov.w	r0, #4800	; 0x12c0
 800159a:	f7ff fc59 	bl	8000e50 <setModulationParams>
			radioConfig(tx_buffer, tx_buffer_len);
 800159e:	4b4f      	ldr	r3, [pc, #316]	; (80016dc <main+0x33c>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	b2db      	uxtb	r3, r3
 80015a4:	4619      	mov	r1, r3
 80015a6:	484e      	ldr	r0, [pc, #312]	; (80016e0 <main+0x340>)
 80015a8:	f7ff fc70 	bl	8000e8c <radioConfig>

			myDebug("\n########## TX Configuration: ##########\n");
 80015ac:	484d      	ldr	r0, [pc, #308]	; (80016e4 <main+0x344>)
 80015ae:	f7ff f8cd 	bl	800074c <myDebug>

			myDebug("FREQUENCY MODS: DOWNLINK FREQ: %lu Hz\r\n",
 80015b2:	4929      	ldr	r1, [pc, #164]	; (8001658 <main+0x2b8>)
 80015b4:	484c      	ldr	r0, [pc, #304]	; (80016e8 <main+0x348>)
 80015b6:	f7ff f8c9 	bl	800074c <myDebug>
			FREQ_437_MHZ);
			myDebug("Bit Rate: 	%d\n\r", mod_params.Params.Gfsk.BitRate);
 80015ba:	4b35      	ldr	r3, [pc, #212]	; (8001690 <main+0x2f0>)
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	4619      	mov	r1, r3
 80015c0:	4834      	ldr	r0, [pc, #208]	; (8001694 <main+0x2f4>)
 80015c2:	f7ff f8c3 	bl	800074c <myDebug>
			myDebug("Frequency Deviation: 	%d\n\r",
 80015c6:	4b32      	ldr	r3, [pc, #200]	; (8001690 <main+0x2f0>)
 80015c8:	689b      	ldr	r3, [r3, #8]
 80015ca:	4619      	mov	r1, r3
 80015cc:	4832      	ldr	r0, [pc, #200]	; (8001698 <main+0x2f8>)
 80015ce:	f7ff f8bd 	bl	800074c <myDebug>
					mod_params.Params.Gfsk.Fdev);
			myDebug("RECEVING BANDWIDTH: 	%d\n\r",
					mod_params.Params.Gfsk.Bandwidth);
 80015d2:	4b2f      	ldr	r3, [pc, #188]	; (8001690 <main+0x2f0>)
 80015d4:	7b5b      	ldrb	r3, [r3, #13]
			myDebug("RECEVING BANDWIDTH: 	%d\n\r",
 80015d6:	4619      	mov	r1, r3
 80015d8:	4830      	ldr	r0, [pc, #192]	; (800169c <main+0x2fc>)
 80015da:	f7ff f8b7 	bl	800074c <myDebug>
			myDebug("Packet Type 			%d\n\r", pkt_params.PacketType);
 80015de:	4b30      	ldr	r3, [pc, #192]	; (80016a0 <main+0x300>)
 80015e0:	781b      	ldrb	r3, [r3, #0]
 80015e2:	4619      	mov	r1, r3
 80015e4:	482f      	ldr	r0, [pc, #188]	; (80016a4 <main+0x304>)
 80015e6:	f7ff f8b1 	bl	800074c <myDebug>
			myDebug("PayloadLength 			%d\n\r",
					pkt_params.Params.Gfsk.PayloadLength);
 80015ea:	4b2d      	ldr	r3, [pc, #180]	; (80016a0 <main+0x300>)
 80015ec:	7a1b      	ldrb	r3, [r3, #8]
			myDebug("PayloadLength 			%d\n\r",
 80015ee:	4619      	mov	r1, r3
 80015f0:	482d      	ldr	r0, [pc, #180]	; (80016a8 <main+0x308>)
 80015f2:	f7ff f8ab 	bl	800074c <myDebug>
			myDebug("PreambleLength 		%d\n\r",
					pkt_params.Params.Gfsk.PreambleLength);
 80015f6:	4b2a      	ldr	r3, [pc, #168]	; (80016a0 <main+0x300>)
 80015f8:	885b      	ldrh	r3, [r3, #2]
			myDebug("PreambleLength 		%d\n\r",
 80015fa:	4619      	mov	r1, r3
 80015fc:	482b      	ldr	r0, [pc, #172]	; (80016ac <main+0x30c>)
 80015fe:	f7ff f8a5 	bl	800074c <myDebug>
			myDebug("PreambleMinDetect		%d\n\r",
					pkt_params.Params.Gfsk.PreambleMinDetect);
 8001602:	4b27      	ldr	r3, [pc, #156]	; (80016a0 <main+0x300>)
 8001604:	791b      	ldrb	r3, [r3, #4]
			myDebug("PreambleMinDetect		%d\n\r",
 8001606:	4619      	mov	r1, r3
 8001608:	4829      	ldr	r0, [pc, #164]	; (80016b0 <main+0x310>)
 800160a:	f7ff f89f 	bl	800074c <myDebug>
			myDebug("HeaderType 			%d\n\r", pkt_params.Params.Gfsk.HeaderType);
 800160e:	4b24      	ldr	r3, [pc, #144]	; (80016a0 <main+0x300>)
 8001610:	79db      	ldrb	r3, [r3, #7]
 8001612:	4619      	mov	r1, r3
 8001614:	4827      	ldr	r0, [pc, #156]	; (80016b4 <main+0x314>)
 8001616:	f7ff f899 	bl	800074c <myDebug>
			myDebug("__________*******************__________\r\n");
 800161a:	4827      	ldr	r0, [pc, #156]	; (80016b8 <main+0x318>)
 800161c:	f7ff f896 	bl	800074c <myDebug>

			SUBGRF_SetRfFrequency(FREQ_437_MHZ);
 8001620:	480d      	ldr	r0, [pc, #52]	; (8001658 <main+0x2b8>)
 8001622:	f009 f8b5 	bl	800a790 <SUBGRF_SetRfFrequency>
			SUBGRF_SetSwitch(RFO_LP, RFSWITCH_TX);
 8001626:	2101      	movs	r1, #1
 8001628:	2001      	movs	r0, #1
 800162a:	f009 fcf9 	bl	800b020 <SUBGRF_SetSwitch>
			SUBGRF_SendPayload(tx_buffer, tx_buffer_len, 0);
 800162e:	4b2b      	ldr	r3, [pc, #172]	; (80016dc <main+0x33c>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	b2db      	uxtb	r3, r3
 8001634:	2200      	movs	r2, #0
 8001636:	4619      	mov	r1, r3
 8001638:	4829      	ldr	r0, [pc, #164]	; (80016e0 <main+0x340>)
 800163a:	f008 fd6b 	bl	800a114 <SUBGRF_SendPayload>
 800163e:	f000 bd1b 	b.w	8002078 <main+0xcd8>
 8001642:	bf00      	nop
 8001644:	20000510 	.word	0x20000510
 8001648:	0800c85c 	.word	0x0800c85c
 800164c:	0800c898 	.word	0x0800c898
 8001650:	0800c8cc 	.word	0x0800c8cc
 8001654:	19f25968 	.word	0x19f25968
 8001658:	1a11d018 	.word	0x1a11d018
 800165c:	0800c8e8 	.word	0x0800c8e8
 8001660:	0800c928 	.word	0x0800c928
 8001664:	0800c950 	.word	0x0800c950
 8001668:	0800c9a4 	.word	0x0800c9a4
 800166c:	200004d4 	.word	0x200004d4
 8001670:	08002181 	.word	0x08002181
 8001674:	20000000 	.word	0x20000000
 8001678:	200002ac 	.word	0x200002ac
 800167c:	0800c9d0 	.word	0x0800c9d0
 8001680:	0800ca18 	.word	0x0800ca18
 8001684:	0800ca38 	.word	0x0800ca38
 8001688:	0800ca58 	.word	0x0800ca58
 800168c:	0800ca84 	.word	0x0800ca84
 8001690:	20000290 	.word	0x20000290
 8001694:	0800c628 	.word	0x0800c628
 8001698:	0800c638 	.word	0x0800c638
 800169c:	0800c654 	.word	0x0800c654
 80016a0:	2000027c 	.word	0x2000027c
 80016a4:	0800c670 	.word	0x0800c670
 80016a8:	0800c684 	.word	0x0800c684
 80016ac:	0800c69c 	.word	0x0800c69c
 80016b0:	0800c6b4 	.word	0x0800c6b4
 80016b4:	0800c6cc 	.word	0x0800c6cc
 80016b8:	0800c6e0 	.word	0x0800c6e0
 80016bc:	20000001 	.word	0x20000001
 80016c0:	20000318 	.word	0x20000318
 80016c4:	20000688 	.word	0x20000688
 80016c8:	20000560 	.word	0x20000560
 80016cc:	0007a120 	.word	0x0007a120
 80016d0:	2000039c 	.word	0x2000039c
 80016d4:	20000316 	.word	0x20000316
 80016d8:	200003a0 	.word	0x200003a0
 80016dc:	200004d0 	.word	0x200004d0
 80016e0:	20000438 	.word	0x20000438
 80016e4:	0800c5d4 	.word	0x0800c5d4
 80016e8:	0800c600 	.word	0x0800c600

		} else if (RX_FLAG == 1) {
 80016ec:	4bb6      	ldr	r3, [pc, #728]	; (80019c8 <main+0x628>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	2b01      	cmp	r3, #1
 80016f2:	f040 84c1 	bne.w	8002078 <main+0xcd8>
 80016f6:	466b      	mov	r3, sp
 80016f8:	60bb      	str	r3, [r7, #8]
			RX_FLAG = 0;
 80016fa:	4bb3      	ldr	r3, [pc, #716]	; (80019c8 <main+0x628>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	601a      	str	r2, [r3, #0]

			uint8_t temp_rx_buffer_len = 0;
 8001700:	2300      	movs	r3, #0
 8001702:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
			temp_rx_buffer_len = countsDataBetweenFlags(rx_buffer,
 8001706:	4bb1      	ldr	r3, [pc, #708]	; (80019cc <main+0x62c>)
 8001708:	781b      	ldrb	r3, [r3, #0]
 800170a:	4619      	mov	r1, r3
 800170c:	48b0      	ldr	r0, [pc, #704]	; (80019d0 <main+0x630>)
 800170e:	f7ff fb3f 	bl	8000d90 <countsDataBetweenFlags>
 8001712:	4603      	mov	r3, r0
 8001714:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
					rx_buffer_len); // 7e...7e, size

			uint8_t crc_buff_len = temp_rx_buffer_len - 4;
 8001718:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 800171c:	3b04      	subs	r3, #4
 800171e:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
			uint8_t crc_buff[crc_buff_len];
 8001722:	f897 208a 	ldrb.w	r2, [r7, #138]	; 0x8a
 8001726:	4611      	mov	r1, r2
 8001728:	60f9      	str	r1, [r7, #12]
 800172a:	460b      	mov	r3, r1
 800172c:	3b01      	subs	r3, #1
 800172e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001732:	b2cb      	uxtb	r3, r1
 8001734:	2200      	movs	r2, #0
 8001736:	4698      	mov	r8, r3
 8001738:	4691      	mov	r9, r2
 800173a:	f04f 0200 	mov.w	r2, #0
 800173e:	f04f 0300 	mov.w	r3, #0
 8001742:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001746:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800174a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800174e:	b2cb      	uxtb	r3, r1
 8001750:	2200      	movs	r2, #0
 8001752:	469a      	mov	sl, r3
 8001754:	4693      	mov	fp, r2
 8001756:	f04f 0200 	mov.w	r2, #0
 800175a:	f04f 0300 	mov.w	r3, #0
 800175e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001762:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001766:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800176a:	460b      	mov	r3, r1
 800176c:	3307      	adds	r3, #7
 800176e:	08db      	lsrs	r3, r3, #3
 8001770:	00db      	lsls	r3, r3, #3
 8001772:	ebad 0d03 	sub.w	sp, sp, r3
 8001776:	ab02      	add	r3, sp, #8
 8001778:	3300      	adds	r3, #0
 800177a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

			int j = 0;
 800177e:	2300      	movs	r3, #0
 8001780:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
			for (int i = 1; i <= crc_buff_len; i++) {
 8001784:	2301      	movs	r3, #1
 8001786:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800178a:	e015      	b.n	80017b8 <main+0x418>
				crc_buff[j] = rx_buffer[i]; // index 1 to previous byte of crc
 800178c:	4a90      	ldr	r2, [pc, #576]	; (80019d0 <main+0x630>)
 800178e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001792:	4413      	add	r3, r2
 8001794:	7819      	ldrb	r1, [r3, #0]
 8001796:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800179a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800179e:	4413      	add	r3, r2
 80017a0:	460a      	mov	r2, r1
 80017a2:	701a      	strb	r2, [r3, #0]
				//				myDebug("%02x ", crc_buff[j]);
				j++;
 80017a4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80017a8:	3301      	adds	r3, #1
 80017aa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
			for (int i = 1; i <= crc_buff_len; i++) {
 80017ae:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80017b2:	3301      	adds	r3, #1
 80017b4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80017b8:	f897 308a 	ldrb.w	r3, [r7, #138]	; 0x8a
 80017bc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80017c0:	429a      	cmp	r2, r3
 80017c2:	dde3      	ble.n	800178c <main+0x3ec>
			}

			memset(rx_buffer, '\0', sizeof(rx_buffer));
 80017c4:	2269      	movs	r2, #105	; 0x69
 80017c6:	2100      	movs	r1, #0
 80017c8:	4881      	ldr	r0, [pc, #516]	; (80019d0 <main+0x630>)
 80017ca:	f00a fa13 	bl	800bbf4 <memset>

			uint8_t gs_cmd_buff[100];
			int gs_cmd_len = bit_destuffing(crc_buff, gs_cmd_buff,
 80017ce:	f897 208a 	ldrb.w	r2, [r7, #138]	; 0x8a
 80017d2:	f107 0310 	add.w	r3, r7, #16
 80017d6:	4619      	mov	r1, r3
 80017d8:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 80017dc:	f7ff f93d 	bl	8000a5a <bit_destuffing>
 80017e0:	67f8      	str	r0, [r7, #124]	; 0x7c
					crc_buff_len);
			//gs_cmd_len--;

			uint8_t main_gs_cmd[gs_cmd_len];
 80017e2:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
 80017e4:	1e63      	subs	r3, r4, #1
 80017e6:	67bb      	str	r3, [r7, #120]	; 0x78
 80017e8:	4622      	mov	r2, r4
 80017ea:	2300      	movs	r3, #0
 80017ec:	4615      	mov	r5, r2
 80017ee:	461e      	mov	r6, r3
 80017f0:	f04f 0200 	mov.w	r2, #0
 80017f4:	f04f 0300 	mov.w	r3, #0
 80017f8:	00f3      	lsls	r3, r6, #3
 80017fa:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 80017fe:	00ea      	lsls	r2, r5, #3
 8001800:	4622      	mov	r2, r4
 8001802:	2300      	movs	r3, #0
 8001804:	603a      	str	r2, [r7, #0]
 8001806:	607b      	str	r3, [r7, #4]
 8001808:	f04f 0200 	mov.w	r2, #0
 800180c:	f04f 0300 	mov.w	r3, #0
 8001810:	6879      	ldr	r1, [r7, #4]
 8001812:	00cb      	lsls	r3, r1, #3
 8001814:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001818:	4684      	mov	ip, r0
 800181a:	ea43 735c 	orr.w	r3, r3, ip, lsr #29
 800181e:	4601      	mov	r1, r0
 8001820:	00ca      	lsls	r2, r1, #3
 8001822:	4623      	mov	r3, r4
 8001824:	3307      	adds	r3, #7
 8001826:	08db      	lsrs	r3, r3, #3
 8001828:	00db      	lsls	r3, r3, #3
 800182a:	ebad 0d03 	sub.w	sp, sp, r3
 800182e:	ab02      	add	r3, sp, #8
 8001830:	3300      	adds	r3, #0
 8001832:	677b      	str	r3, [r7, #116]	; 0x74
			for (int i = 0; i < gs_cmd_len; i++) {
 8001834:	2300      	movs	r3, #0
 8001836:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800183a:	e010      	b.n	800185e <main+0x4be>
				main_gs_cmd[i] = gs_cmd_buff[i];
 800183c:	f107 0210 	add.w	r2, r7, #16
 8001840:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001844:	4413      	add	r3, r2
 8001846:	7819      	ldrb	r1, [r3, #0]
 8001848:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800184a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800184e:	4413      	add	r3, r2
 8001850:	460a      	mov	r2, r1
 8001852:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < gs_cmd_len; i++) {
 8001854:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001858:	3301      	adds	r3, #1
 800185a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800185e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8001862:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001864:	429a      	cmp	r2, r3
 8001866:	dbe9      	blt.n	800183c <main+0x49c>
			}

			if (COUNT_BEACON == 1) { // first beacon tx
 8001868:	4b5a      	ldr	r3, [pc, #360]	; (80019d4 <main+0x634>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	2b01      	cmp	r3, #1
 800186e:	f040 811b 	bne.w	8001aa8 <main+0x708>

				if ((main_gs_cmd[18] == 0xDF && main_gs_cmd[19] == 0xAB
 8001872:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001874:	7c9b      	ldrb	r3, [r3, #18]
 8001876:	2bdf      	cmp	r3, #223	; 0xdf
 8001878:	d107      	bne.n	800188a <main+0x4ea>
 800187a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800187c:	7cdb      	ldrb	r3, [r3, #19]
 800187e:	2bab      	cmp	r3, #171	; 0xab
 8001880:	d103      	bne.n	800188a <main+0x4ea>
						&& main_gs_cmd[20] == 0xD1) // Enable Digipeater Mission
 8001882:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001884:	7d1b      	ldrb	r3, [r3, #20]
 8001886:	2bd1      	cmp	r3, #209	; 0xd1
 8001888:	d00b      	beq.n	80018a2 <main+0x502>
						|| (main_gs_cmd[18] == 0x53 && main_gs_cmd[19] == 0x02
 800188a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800188c:	7c9b      	ldrb	r3, [r3, #18]
 800188e:	2b53      	cmp	r3, #83	; 0x53
 8001890:	d13b      	bne.n	800190a <main+0x56a>
 8001892:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001894:	7cdb      	ldrb	r3, [r3, #19]
 8001896:	2b02      	cmp	r3, #2
 8001898:	d137      	bne.n	800190a <main+0x56a>
								&& main_gs_cmd[20] == 0x53)) { // Digipeater Packet
 800189a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800189c:	7d1b      	ldrb	r3, [r3, #20]
 800189e:	2b53      	cmp	r3, #83	; 0x53
 80018a0:	d133      	bne.n	800190a <main+0x56a>

					myDebug("\n********GS Command failed: 0x%x\r\n");
 80018a2:	484d      	ldr	r0, [pc, #308]	; (80019d8 <main+0x638>)
 80018a4:	f7fe ff52 	bl	800074c <myDebug>

					COM_UART_TX[0] = 0x53;  //header
 80018a8:	4b4c      	ldr	r3, [pc, #304]	; (80019dc <main+0x63c>)
 80018aa:	2253      	movs	r2, #83	; 0x53
 80018ac:	701a      	strb	r2, [r3, #0]
					COM_UART_TX[1] = 0xac;  //packet_type
 80018ae:	4b4b      	ldr	r3, [pc, #300]	; (80019dc <main+0x63c>)
 80018b0:	22ac      	movs	r2, #172	; 0xac
 80018b2:	705a      	strb	r2, [r3, #1]
					COM_UART_TX[2] = 0x04;  //length_of_info
 80018b4:	4b49      	ldr	r3, [pc, #292]	; (80019dc <main+0x63c>)
 80018b6:	2204      	movs	r2, #4
 80018b8:	709a      	strb	r2, [r3, #2]
					COM_UART_TX[3] = 0x02;  //mcu_no
 80018ba:	4b48      	ldr	r3, [pc, #288]	; (80019dc <main+0x63c>)
 80018bc:	2202      	movs	r2, #2
 80018be:	70da      	strb	r2, [r3, #3]
					COM_UART_TX[4] = 0xfc;	//false_command
 80018c0:	4b46      	ldr	r3, [pc, #280]	; (80019dc <main+0x63c>)
 80018c2:	22fc      	movs	r2, #252	; 0xfc
 80018c4:	711a      	strb	r2, [r3, #4]
					COM_UART_TX[5] = 0xee;  // error_prefix
 80018c6:	4b45      	ldr	r3, [pc, #276]	; (80019dc <main+0x63c>)
 80018c8:	22ee      	movs	r2, #238	; 0xee
 80018ca:	715a      	strb	r2, [r3, #5]

					for (int i = 6; i < com_uart_tx_p_len; i++) {
 80018cc:	2306      	movs	r3, #6
 80018ce:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80018d2:	e00a      	b.n	80018ea <main+0x54a>
						COM_UART_TX[i] = 0x00;
 80018d4:	4a41      	ldr	r2, [pc, #260]	; (80019dc <main+0x63c>)
 80018d6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80018da:	4413      	add	r3, r2
 80018dc:	2200      	movs	r2, #0
 80018de:	701a      	strb	r2, [r3, #0]
					for (int i = 6; i < com_uart_tx_p_len; i++) {
 80018e0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80018e4:	3301      	adds	r3, #1
 80018e6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80018ea:	4b3d      	ldr	r3, [pc, #244]	; (80019e0 <main+0x640>)
 80018ec:	781b      	ldrb	r3, [r3, #0]
 80018ee:	461a      	mov	r2, r3
 80018f0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80018f4:	4293      	cmp	r3, r2
 80018f6:	dbed      	blt.n	80018d4 <main+0x534>
					}

					enableReqPA();
 80018f8:	f7ff f9f4 	bl	8000ce4 <enableReqPA>

					memset(main_gs_cmd, '\0', sizeof(main_gs_cmd));
 80018fc:	4623      	mov	r3, r4
 80018fe:	461a      	mov	r2, r3
 8001900:	2100      	movs	r1, #0
 8001902:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8001904:	f00a f976 	bl	800bbf4 <memset>
 8001908:	e3b4      	b.n	8002074 <main+0xcd4>

				} else if (main_gs_cmd[18] == 0xFD && main_gs_cmd[19] == 0xBA
 800190a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800190c:	7c9b      	ldrb	r3, [r3, #18]
 800190e:	2bfd      	cmp	r3, #253	; 0xfd
 8001910:	d172      	bne.n	80019f8 <main+0x658>
 8001912:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001914:	7cdb      	ldrb	r3, [r3, #19]
 8001916:	2bba      	cmp	r3, #186	; 0xba
 8001918:	d16e      	bne.n	80019f8 <main+0x658>
						&& main_gs_cmd[20] == 0xD0) { // Digipeater Disable
 800191a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800191c:	7d1b      	ldrb	r3, [r3, #20]
 800191e:	2bd0      	cmp	r3, #208	; 0xd0
 8001920:	d16a      	bne.n	80019f8 <main+0x658>

					BEACON_COUNT = 2;
 8001922:	4b30      	ldr	r3, [pc, #192]	; (80019e4 <main+0x644>)
 8001924:	2202      	movs	r2, #2
 8001926:	601a      	str	r2, [r3, #0]
					OBC_SUCCESS_DATA_RX_FLAG = 0;
 8001928:	4b2f      	ldr	r3, [pc, #188]	; (80019e8 <main+0x648>)
 800192a:	2200      	movs	r2, #0
 800192c:	601a      	str	r2, [r3, #0]
					DIGIPEATER_STATUS = 0;
 800192e:	4b2f      	ldr	r3, [pc, #188]	; (80019ec <main+0x64c>)
 8001930:	2200      	movs	r2, #0
 8001932:	601a      	str	r2, [r3, #0]
					DIGIPEATER_FLAG = 0;
 8001934:	4b2e      	ldr	r3, [pc, #184]	; (80019f0 <main+0x650>)
 8001936:	2200      	movs	r2, #0
 8001938:	601a      	str	r2, [r3, #0]

					myDebug("\n-------> Digipeater MODE OFF\n\n");
 800193a:	482e      	ldr	r0, [pc, #184]	; (80019f4 <main+0x654>)
 800193c:	f7fe ff06 	bl	800074c <myDebug>

					COM_UART_TX[0] = 0x53;	//header
 8001940:	4b26      	ldr	r3, [pc, #152]	; (80019dc <main+0x63c>)
 8001942:	2253      	movs	r2, #83	; 0x53
 8001944:	701a      	strb	r2, [r3, #0]
					COM_UART_TX[1] = 0xac;	//packet_ type
 8001946:	4b25      	ldr	r3, [pc, #148]	; (80019dc <main+0x63c>)
 8001948:	22ac      	movs	r2, #172	; 0xac
 800194a:	705a      	strb	r2, [r3, #1]
					COM_UART_TX[2] = 0x04;	//length of info
 800194c:	4b23      	ldr	r3, [pc, #140]	; (80019dc <main+0x63c>)
 800194e:	2204      	movs	r2, #4
 8001950:	709a      	strb	r2, [r3, #2]
					COM_UART_TX[3] = 0x02;	//mcu_no
 8001952:	4b22      	ldr	r3, [pc, #136]	; (80019dc <main+0x63c>)
 8001954:	2202      	movs	r2, #2
 8001956:	70da      	strb	r2, [r3, #3]
					COM_UART_TX[4] = 0x00;	//Digipeater OFF
 8001958:	4b20      	ldr	r3, [pc, #128]	; (80019dc <main+0x63c>)
 800195a:	2200      	movs	r2, #0
 800195c:	711a      	strb	r2, [r3, #4]
					COM_UART_TX[5] = 0xdd;	//Digipeater prefix
 800195e:	4b1f      	ldr	r3, [pc, #124]	; (80019dc <main+0x63c>)
 8001960:	22dd      	movs	r2, #221	; 0xdd
 8001962:	715a      	strb	r2, [r3, #5]

					for (int i = 6; i < com_uart_tx_p_len; i++) {
 8001964:	2306      	movs	r3, #6
 8001966:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800196a:	e00a      	b.n	8001982 <main+0x5e2>
						COM_UART_TX[i] = 0x00;
 800196c:	4a1b      	ldr	r2, [pc, #108]	; (80019dc <main+0x63c>)
 800196e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001972:	4413      	add	r3, r2
 8001974:	2200      	movs	r2, #0
 8001976:	701a      	strb	r2, [r3, #0]
					for (int i = 6; i < com_uart_tx_p_len; i++) {
 8001978:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800197c:	3301      	adds	r3, #1
 800197e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001982:	4b17      	ldr	r3, [pc, #92]	; (80019e0 <main+0x640>)
 8001984:	781b      	ldrb	r3, [r3, #0]
 8001986:	461a      	mov	r2, r3
 8001988:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800198c:	4293      	cmp	r3, r2
 800198e:	dbed      	blt.n	800196c <main+0x5cc>
					}

					enableReqPA();
 8001990:	f7ff f9a8 	bl	8000ce4 <enableReqPA>

					memset(main_gs_cmd, '\0', sizeof(main_gs_cmd));
 8001994:	4623      	mov	r3, r4
 8001996:	461a      	mov	r2, r3
 8001998:	2100      	movs	r1, #0
 800199a:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800199c:	f00a f92a 	bl	800bbf4 <memset>
					memset(rx_buffer, '\0', sizeof(rx_buffer));
 80019a0:	2269      	movs	r2, #105	; 0x69
 80019a2:	2100      	movs	r1, #0
 80019a4:	480a      	ldr	r0, [pc, #40]	; (80019d0 <main+0x630>)
 80019a6:	f00a f925 	bl	800bbf4 <memset>
					memset(crc_buff, '\0', sizeof(crc_buff));
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	461a      	mov	r2, r3
 80019ae:	2100      	movs	r1, #0
 80019b0:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 80019b4:	f00a f91e 	bl	800bbf4 <memset>
					memset(gs_cmd_buff, '\0', sizeof(gs_cmd_buff));
 80019b8:	f107 0310 	add.w	r3, r7, #16
 80019bc:	2264      	movs	r2, #100	; 0x64
 80019be:	2100      	movs	r1, #0
 80019c0:	4618      	mov	r0, r3
 80019c2:	f00a f917 	bl	800bbf4 <memset>
 80019c6:	e355      	b.n	8002074 <main+0xcd4>
 80019c8:	200004ec 	.word	0x200004ec
 80019cc:	20000000 	.word	0x20000000
 80019d0:	200002ac 	.word	0x200002ac
 80019d4:	20000008 	.word	0x20000008
 80019d8:	0800caac 	.word	0x0800caac
 80019dc:	20000370 	.word	0x20000370
 80019e0:	20000002 	.word	0x20000002
 80019e4:	20000004 	.word	0x20000004
 80019e8:	2000039c 	.word	0x2000039c
 80019ec:	200004d8 	.word	0x200004d8
 80019f0:	200004e0 	.word	0x200004e0
 80019f4:	0800cad0 	.word	0x0800cad0

				} else {
					myDebug("\nCommand sent to OBC, Length: %d bytes\r\n",
 80019f8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80019fa:	48a2      	ldr	r0, [pc, #648]	; (8001c84 <main+0x8e4>)
 80019fc:	f7fe fea6 	bl	800074c <myDebug>
							gs_cmd_len);
					if (HAL_UART_Transmit(&huart2, main_gs_cmd,
 8001a00:	b2a2      	uxth	r2, r4
 8001a02:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001a06:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8001a08:	489f      	ldr	r0, [pc, #636]	; (8001c88 <main+0x8e8>)
 8001a0a:	f004 feb8 	bl	800677e <HAL_UART_Transmit>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d00a      	beq.n	8001a2a <main+0x68a>
							sizeof(main_gs_cmd), 2000) == HAL_OK
							|| HAL_UART_Transmit(&hlpuart1, main_gs_cmd,
 8001a14:	b2a2      	uxth	r2, r4
 8001a16:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001a1a:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8001a1c:	489b      	ldr	r0, [pc, #620]	; (8001c8c <main+0x8ec>)
 8001a1e:	f004 feae 	bl	800677e <HAL_UART_Transmit>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	f000 8325 	beq.w	8002074 <main+0xcd4>
									sizeof(main_gs_cmd), 2000)) {

						for (int i = 0; i < gs_cmd_len; i++) {
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8001a30:	e00d      	b.n	8001a4e <main+0x6ae>
							myDebug("%02x ", main_gs_cmd[i]);
 8001a32:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001a34:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001a38:	4413      	add	r3, r2
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	4894      	ldr	r0, [pc, #592]	; (8001c90 <main+0x8f0>)
 8001a40:	f7fe fe84 	bl	800074c <myDebug>
						for (int i = 0; i < gs_cmd_len; i++) {
 8001a44:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001a48:	3301      	adds	r3, #1
 8001a4a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8001a4e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8001a52:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001a54:	429a      	cmp	r2, r3
 8001a56:	dbec      	blt.n	8001a32 <main+0x692>
						}

						SUBGRF_SetRfFrequency(FREQ_435_MHZ);
 8001a58:	488e      	ldr	r0, [pc, #568]	; (8001c94 <main+0x8f4>)
 8001a5a:	f008 fe99 	bl	800a790 <SUBGRF_SetRfFrequency>
						SUBGRF_SetSwitch(RFO_LP, RFSWITCH_RX); /*Set RF switch*/
 8001a5e:	2100      	movs	r1, #0
 8001a60:	2001      	movs	r0, #1
 8001a62:	f009 fadd 	bl	800b020 <SUBGRF_SetSwitch>
						SUBGRF_SetRxBoosted(0xFFFFFF);
 8001a66:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8001a6a:	f008 fcbd 	bl	800a3e8 <SUBGRF_SetRxBoosted>

						memset(main_gs_cmd, '\0', sizeof(main_gs_cmd));
 8001a6e:	4623      	mov	r3, r4
 8001a70:	461a      	mov	r2, r3
 8001a72:	2100      	movs	r1, #0
 8001a74:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8001a76:	f00a f8bd 	bl	800bbf4 <memset>
						memset(rx_buffer, '\0', sizeof(rx_buffer));
 8001a7a:	2269      	movs	r2, #105	; 0x69
 8001a7c:	2100      	movs	r1, #0
 8001a7e:	4886      	ldr	r0, [pc, #536]	; (8001c98 <main+0x8f8>)
 8001a80:	f00a f8b8 	bl	800bbf4 <memset>
						memset(crc_buff, '\0', sizeof(crc_buff));
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	461a      	mov	r2, r3
 8001a88:	2100      	movs	r1, #0
 8001a8a:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8001a8e:	f00a f8b1 	bl	800bbf4 <memset>
						memset(gs_cmd_buff, '\0', sizeof(gs_cmd_buff));
 8001a92:	f107 0310 	add.w	r3, r7, #16
 8001a96:	2264      	movs	r2, #100	; 0x64
 8001a98:	2100      	movs	r1, #0
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f00a f8aa 	bl	800bbf4 <memset>

						myDebug("\n\n_____OBC__RECEIVER_____\r\n");
 8001aa0:	487e      	ldr	r0, [pc, #504]	; (8001c9c <main+0x8fc>)
 8001aa2:	f7fe fe53 	bl	800074c <myDebug>
 8001aa6:	e2e5      	b.n	8002074 <main+0xcd4>
					}

				}
			} else if (COUNT_BEACON == 0) {
 8001aa8:	4b7d      	ldr	r3, [pc, #500]	; (8001ca0 <main+0x900>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	f040 82e1 	bne.w	8002074 <main+0xcd4>
				if (DIGIPEATER_STATUS == 1) {
 8001ab2:	4b7c      	ldr	r3, [pc, #496]	; (8001ca4 <main+0x904>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	2b01      	cmp	r3, #1
 8001ab8:	f040 8170 	bne.w	8001d9c <main+0x9fc>
					if (main_gs_cmd[18] == 0xFD && main_gs_cmd[19] == 0xBA
 8001abc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001abe:	7c9b      	ldrb	r3, [r3, #18]
 8001ac0:	2bfd      	cmp	r3, #253	; 0xfd
 8001ac2:	d15a      	bne.n	8001b7a <main+0x7da>
 8001ac4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001ac6:	7cdb      	ldrb	r3, [r3, #19]
 8001ac8:	2bba      	cmp	r3, #186	; 0xba
 8001aca:	d156      	bne.n	8001b7a <main+0x7da>
							&& main_gs_cmd[20] == 0xD0) {
 8001acc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001ace:	7d1b      	ldrb	r3, [r3, #20]
 8001ad0:	2bd0      	cmp	r3, #208	; 0xd0
 8001ad2:	d152      	bne.n	8001b7a <main+0x7da>

						BEACON_COUNT = 2;
 8001ad4:	4b74      	ldr	r3, [pc, #464]	; (8001ca8 <main+0x908>)
 8001ad6:	2202      	movs	r2, #2
 8001ad8:	601a      	str	r2, [r3, #0]
						OBC_SUCCESS_DATA_RX_FLAG = 0;
 8001ada:	4b74      	ldr	r3, [pc, #464]	; (8001cac <main+0x90c>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	601a      	str	r2, [r3, #0]
						DIGIPEATER_STATUS = 0;
 8001ae0:	4b70      	ldr	r3, [pc, #448]	; (8001ca4 <main+0x904>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	601a      	str	r2, [r3, #0]
						DIGIPEATER_FLAG = 0;
 8001ae6:	4b72      	ldr	r3, [pc, #456]	; (8001cb0 <main+0x910>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	601a      	str	r2, [r3, #0]

						myDebug("\n-------> Digipeater MODE OFF\n\n");
 8001aec:	4871      	ldr	r0, [pc, #452]	; (8001cb4 <main+0x914>)
 8001aee:	f7fe fe2d 	bl	800074c <myDebug>

						COM_UART_TX[0] = 0x53;	//header
 8001af2:	4b71      	ldr	r3, [pc, #452]	; (8001cb8 <main+0x918>)
 8001af4:	2253      	movs	r2, #83	; 0x53
 8001af6:	701a      	strb	r2, [r3, #0]
						COM_UART_TX[1] = 0xac;	//packet_ type
 8001af8:	4b6f      	ldr	r3, [pc, #444]	; (8001cb8 <main+0x918>)
 8001afa:	22ac      	movs	r2, #172	; 0xac
 8001afc:	705a      	strb	r2, [r3, #1]
						COM_UART_TX[2] = 0x04;	//length of info
 8001afe:	4b6e      	ldr	r3, [pc, #440]	; (8001cb8 <main+0x918>)
 8001b00:	2204      	movs	r2, #4
 8001b02:	709a      	strb	r2, [r3, #2]
						COM_UART_TX[3] = 0x02;	//mcu_no
 8001b04:	4b6c      	ldr	r3, [pc, #432]	; (8001cb8 <main+0x918>)
 8001b06:	2202      	movs	r2, #2
 8001b08:	70da      	strb	r2, [r3, #3]
						COM_UART_TX[4] = 0x00;	//Digipeater OFF
 8001b0a:	4b6b      	ldr	r3, [pc, #428]	; (8001cb8 <main+0x918>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	711a      	strb	r2, [r3, #4]
						COM_UART_TX[5] = 0xdd;	//Digipeater prefix
 8001b10:	4b69      	ldr	r3, [pc, #420]	; (8001cb8 <main+0x918>)
 8001b12:	22dd      	movs	r2, #221	; 0xdd
 8001b14:	715a      	strb	r2, [r3, #5]

						for (int i = 6; i < com_uart_tx_p_len; i++) {
 8001b16:	2306      	movs	r3, #6
 8001b18:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001b1c:	e00a      	b.n	8001b34 <main+0x794>
							COM_UART_TX[i] = 0x00;
 8001b1e:	4a66      	ldr	r2, [pc, #408]	; (8001cb8 <main+0x918>)
 8001b20:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001b24:	4413      	add	r3, r2
 8001b26:	2200      	movs	r2, #0
 8001b28:	701a      	strb	r2, [r3, #0]
						for (int i = 6; i < com_uart_tx_p_len; i++) {
 8001b2a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001b2e:	3301      	adds	r3, #1
 8001b30:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001b34:	4b61      	ldr	r3, [pc, #388]	; (8001cbc <main+0x91c>)
 8001b36:	781b      	ldrb	r3, [r3, #0]
 8001b38:	461a      	mov	r2, r3
 8001b3a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	dbed      	blt.n	8001b1e <main+0x77e>
						}

						enableReqPA();
 8001b42:	f7ff f8cf 	bl	8000ce4 <enableReqPA>

						memset(main_gs_cmd, '\0', sizeof(main_gs_cmd));
 8001b46:	4623      	mov	r3, r4
 8001b48:	461a      	mov	r2, r3
 8001b4a:	2100      	movs	r1, #0
 8001b4c:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8001b4e:	f00a f851 	bl	800bbf4 <memset>
						memset(rx_buffer, '\0', sizeof(rx_buffer));
 8001b52:	2269      	movs	r2, #105	; 0x69
 8001b54:	2100      	movs	r1, #0
 8001b56:	4850      	ldr	r0, [pc, #320]	; (8001c98 <main+0x8f8>)
 8001b58:	f00a f84c 	bl	800bbf4 <memset>
						memset(crc_buff, '\0', sizeof(crc_buff));
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	461a      	mov	r2, r3
 8001b60:	2100      	movs	r1, #0
 8001b62:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8001b66:	f00a f845 	bl	800bbf4 <memset>
						memset(gs_cmd_buff, '\0', sizeof(gs_cmd_buff));
 8001b6a:	f107 0310 	add.w	r3, r7, #16
 8001b6e:	2264      	movs	r2, #100	; 0x64
 8001b70:	2100      	movs	r1, #0
 8001b72:	4618      	mov	r0, r3
 8001b74:	f00a f83e 	bl	800bbf4 <memset>
 8001b78:	e27c      	b.n	8002074 <main+0xcd4>

					} else if (main_gs_cmd[18] == 0xDF
 8001b7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001b7c:	7c9b      	ldrb	r3, [r3, #18]
 8001b7e:	2bdf      	cmp	r3, #223	; 0xdf
 8001b80:	d157      	bne.n	8001c32 <main+0x892>
							&& main_gs_cmd[19] == 0xAB
 8001b82:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001b84:	7cdb      	ldrb	r3, [r3, #19]
 8001b86:	2bab      	cmp	r3, #171	; 0xab
 8001b88:	d153      	bne.n	8001c32 <main+0x892>
							&& main_gs_cmd[20] == 0xD1) { //Digipeater on
 8001b8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001b8c:	7d1b      	ldrb	r3, [r3, #20]
 8001b8e:	2bd1      	cmp	r3, #209	; 0xd1
 8001b90:	d14f      	bne.n	8001c32 <main+0x892>

						BEACON_COUNT = 0;
 8001b92:	4b45      	ldr	r3, [pc, #276]	; (8001ca8 <main+0x908>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	601a      	str	r2, [r3, #0]
						OBC_SUCCESS_DATA_RX_FLAG = 0;
 8001b98:	4b44      	ldr	r3, [pc, #272]	; (8001cac <main+0x90c>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	601a      	str	r2, [r3, #0]
						DIGIPEATER_STATUS = 1;
 8001b9e:	4b41      	ldr	r3, [pc, #260]	; (8001ca4 <main+0x904>)
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	601a      	str	r2, [r3, #0]

						myDebug("\n-------> Digipeater MODE ON\n\n");
 8001ba4:	4846      	ldr	r0, [pc, #280]	; (8001cc0 <main+0x920>)
 8001ba6:	f7fe fdd1 	bl	800074c <myDebug>

						COM_UART_TX[0] = 0x53;	//header
 8001baa:	4b43      	ldr	r3, [pc, #268]	; (8001cb8 <main+0x918>)
 8001bac:	2253      	movs	r2, #83	; 0x53
 8001bae:	701a      	strb	r2, [r3, #0]
						COM_UART_TX[1] = 0xac;	//packet_ type
 8001bb0:	4b41      	ldr	r3, [pc, #260]	; (8001cb8 <main+0x918>)
 8001bb2:	22ac      	movs	r2, #172	; 0xac
 8001bb4:	705a      	strb	r2, [r3, #1]
						COM_UART_TX[2] = 0x04;	//length of info
 8001bb6:	4b40      	ldr	r3, [pc, #256]	; (8001cb8 <main+0x918>)
 8001bb8:	2204      	movs	r2, #4
 8001bba:	709a      	strb	r2, [r3, #2]
						COM_UART_TX[3] = 0x02;	//mcu_no
 8001bbc:	4b3e      	ldr	r3, [pc, #248]	; (8001cb8 <main+0x918>)
 8001bbe:	2202      	movs	r2, #2
 8001bc0:	70da      	strb	r2, [r3, #3]
						COM_UART_TX[4] = 0x01;	//Digipeater ON
 8001bc2:	4b3d      	ldr	r3, [pc, #244]	; (8001cb8 <main+0x918>)
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	711a      	strb	r2, [r3, #4]
						COM_UART_TX[5] = 0xdd;	//Digipeater prefix
 8001bc8:	4b3b      	ldr	r3, [pc, #236]	; (8001cb8 <main+0x918>)
 8001bca:	22dd      	movs	r2, #221	; 0xdd
 8001bcc:	715a      	strb	r2, [r3, #5]

						for (int i = 6; i < com_uart_tx_p_len; i++) {
 8001bce:	2306      	movs	r3, #6
 8001bd0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8001bd4:	e00a      	b.n	8001bec <main+0x84c>
							COM_UART_TX[i] = 0x00;
 8001bd6:	4a38      	ldr	r2, [pc, #224]	; (8001cb8 <main+0x918>)
 8001bd8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001bdc:	4413      	add	r3, r2
 8001bde:	2200      	movs	r2, #0
 8001be0:	701a      	strb	r2, [r3, #0]
						for (int i = 6; i < com_uart_tx_p_len; i++) {
 8001be2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001be6:	3301      	adds	r3, #1
 8001be8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8001bec:	4b33      	ldr	r3, [pc, #204]	; (8001cbc <main+0x91c>)
 8001bee:	781b      	ldrb	r3, [r3, #0]
 8001bf0:	461a      	mov	r2, r3
 8001bf2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	dbed      	blt.n	8001bd6 <main+0x836>
						}

						enableReqPA();
 8001bfa:	f7ff f873 	bl	8000ce4 <enableReqPA>

						memset(main_gs_cmd, '\0', sizeof(main_gs_cmd));
 8001bfe:	4623      	mov	r3, r4
 8001c00:	461a      	mov	r2, r3
 8001c02:	2100      	movs	r1, #0
 8001c04:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8001c06:	f009 fff5 	bl	800bbf4 <memset>
						memset(rx_buffer, '\0', sizeof(rx_buffer));
 8001c0a:	2269      	movs	r2, #105	; 0x69
 8001c0c:	2100      	movs	r1, #0
 8001c0e:	4822      	ldr	r0, [pc, #136]	; (8001c98 <main+0x8f8>)
 8001c10:	f009 fff0 	bl	800bbf4 <memset>
						memset(crc_buff, '\0', sizeof(crc_buff));
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	461a      	mov	r2, r3
 8001c18:	2100      	movs	r1, #0
 8001c1a:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8001c1e:	f009 ffe9 	bl	800bbf4 <memset>
						memset(gs_cmd_buff, '\0', sizeof(gs_cmd_buff));
 8001c22:	f107 0310 	add.w	r3, r7, #16
 8001c26:	2264      	movs	r2, #100	; 0x64
 8001c28:	2100      	movs	r1, #0
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f009 ffe2 	bl	800bbf4 <memset>
 8001c30:	e220      	b.n	8002074 <main+0xcd4>

					} else if (main_gs_cmd[18] == 0x53
 8001c32:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001c34:	7c9b      	ldrb	r3, [r3, #18]
 8001c36:	2b53      	cmp	r3, #83	; 0x53
 8001c38:	d17c      	bne.n	8001d34 <main+0x994>
							&& main_gs_cmd[19] == 0x02
 8001c3a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001c3c:	7cdb      	ldrb	r3, [r3, #19]
 8001c3e:	2b02      	cmp	r3, #2
 8001c40:	d178      	bne.n	8001d34 <main+0x994>
							&& main_gs_cmd[20] == 0x53) { // if digipeater packet
 8001c42:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001c44:	7d1b      	ldrb	r3, [r3, #20]
 8001c46:	2b53      	cmp	r3, #83	; 0x53
 8001c48:	d174      	bne.n	8001d34 <main+0x994>
						myDebug(
 8001c4a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8001c4c:	481d      	ldr	r0, [pc, #116]	; (8001cc4 <main+0x924>)
 8001c4e:	f7fe fd7d 	bl	800074c <myDebug>
								"\nDigipeater packet sent to OBC, Length: %d bytes\r\n",
								gs_cmd_len);
						if (HAL_UART_Transmit(&huart2, main_gs_cmd,
 8001c52:	b2a2      	uxth	r2, r4
 8001c54:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001c58:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8001c5a:	480b      	ldr	r0, [pc, #44]	; (8001c88 <main+0x8e8>)
 8001c5c:	f004 fd8f 	bl	800677e <HAL_UART_Transmit>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d00a      	beq.n	8001c7c <main+0x8dc>
								sizeof(main_gs_cmd), 2000) == HAL_OK
								|| HAL_UART_Transmit(&hlpuart1, main_gs_cmd,
 8001c66:	b2a2      	uxth	r2, r4
 8001c68:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001c6c:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8001c6e:	4807      	ldr	r0, [pc, #28]	; (8001c8c <main+0x8ec>)
 8001c70:	f004 fd85 	bl	800677e <HAL_UART_Transmit>
 8001c74:	4603      	mov	r3, r0
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	f040 81fb 	bne.w	8002072 <main+0xcd2>
										sizeof(main_gs_cmd), 2000) == HAL_OK) {

							for (int i = 0; i < gs_cmd_len; i++) {
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001c82:	e02f      	b.n	8001ce4 <main+0x944>
 8001c84:	0800caf0 	.word	0x0800caf0
 8001c88:	20000688 	.word	0x20000688
 8001c8c:	20000560 	.word	0x20000560
 8001c90:	0800c564 	.word	0x0800c564
 8001c94:	19f25968 	.word	0x19f25968
 8001c98:	200002ac 	.word	0x200002ac
 8001c9c:	0800cb1c 	.word	0x0800cb1c
 8001ca0:	20000008 	.word	0x20000008
 8001ca4:	200004d8 	.word	0x200004d8
 8001ca8:	20000004 	.word	0x20000004
 8001cac:	2000039c 	.word	0x2000039c
 8001cb0:	200004e0 	.word	0x200004e0
 8001cb4:	0800cad0 	.word	0x0800cad0
 8001cb8:	20000370 	.word	0x20000370
 8001cbc:	20000002 	.word	0x20000002
 8001cc0:	0800cb38 	.word	0x0800cb38
 8001cc4:	0800cb58 	.word	0x0800cb58
								myDebug("%02x ", main_gs_cmd[i]);
 8001cc8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001cca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001cce:	4413      	add	r3, r2
 8001cd0:	781b      	ldrb	r3, [r3, #0]
 8001cd2:	4619      	mov	r1, r3
 8001cd4:	48b1      	ldr	r0, [pc, #708]	; (8001f9c <main+0xbfc>)
 8001cd6:	f7fe fd39 	bl	800074c <myDebug>
							for (int i = 0; i < gs_cmd_len; i++) {
 8001cda:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001cde:	3301      	adds	r3, #1
 8001ce0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001ce4:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8001ce8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001cea:	429a      	cmp	r2, r3
 8001cec:	dbec      	blt.n	8001cc8 <main+0x928>
							}

							myDebug("\r\n");
 8001cee:	48ac      	ldr	r0, [pc, #688]	; (8001fa0 <main+0xc00>)
 8001cf0:	f7fe fd2c 	bl	800074c <myDebug>

							memset(main_gs_cmd, '\0', sizeof(main_gs_cmd));
 8001cf4:	4623      	mov	r3, r4
 8001cf6:	461a      	mov	r2, r3
 8001cf8:	2100      	movs	r1, #0
 8001cfa:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8001cfc:	f009 ff7a 	bl	800bbf4 <memset>
							memset(rx_buffer, '\0', sizeof(rx_buffer));
 8001d00:	2269      	movs	r2, #105	; 0x69
 8001d02:	2100      	movs	r1, #0
 8001d04:	48a7      	ldr	r0, [pc, #668]	; (8001fa4 <main+0xc04>)
 8001d06:	f009 ff75 	bl	800bbf4 <memset>
							memset(crc_buff, '\0', sizeof(crc_buff));
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	461a      	mov	r2, r3
 8001d0e:	2100      	movs	r1, #0
 8001d10:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8001d14:	f009 ff6e 	bl	800bbf4 <memset>
							memset(gs_cmd_buff, '\0', sizeof(gs_cmd_buff));
 8001d18:	f107 0310 	add.w	r3, r7, #16
 8001d1c:	2264      	movs	r2, #100	; 0x64
 8001d1e:	2100      	movs	r1, #0
 8001d20:	4618      	mov	r0, r3
 8001d22:	f009 ff67 	bl	800bbf4 <memset>

							myDebug(
 8001d26:	48a0      	ldr	r0, [pc, #640]	; (8001fa8 <main+0xc08>)
 8001d28:	f7fe fd10 	bl	800074c <myDebug>
									"\n\n_____DIGIPEATER_OBC__RECEIVER_____\r\n");
							DIGIPEATER_RX_FLAG = 1;
 8001d2c:	4b9f      	ldr	r3, [pc, #636]	; (8001fac <main+0xc0c>)
 8001d2e:	2201      	movs	r2, #1
 8001d30:	601a      	str	r2, [r3, #0]
						if (HAL_UART_Transmit(&huart2, main_gs_cmd,
 8001d32:	e19e      	b.n	8002072 <main+0xcd2>
						}
					} else {
						myDebug("\n********GS Command failed: 0x%x\r\n");
 8001d34:	489e      	ldr	r0, [pc, #632]	; (8001fb0 <main+0xc10>)
 8001d36:	f7fe fd09 	bl	800074c <myDebug>

						COM_UART_TX[0] = 0x53;	//header
 8001d3a:	4b9e      	ldr	r3, [pc, #632]	; (8001fb4 <main+0xc14>)
 8001d3c:	2253      	movs	r2, #83	; 0x53
 8001d3e:	701a      	strb	r2, [r3, #0]
						COM_UART_TX[1] = 0xac;	//packet_ type
 8001d40:	4b9c      	ldr	r3, [pc, #624]	; (8001fb4 <main+0xc14>)
 8001d42:	22ac      	movs	r2, #172	; 0xac
 8001d44:	705a      	strb	r2, [r3, #1]
						COM_UART_TX[2] = 0x04;	//length of info
 8001d46:	4b9b      	ldr	r3, [pc, #620]	; (8001fb4 <main+0xc14>)
 8001d48:	2204      	movs	r2, #4
 8001d4a:	709a      	strb	r2, [r3, #2]
						COM_UART_TX[3] = 0x02;	//mcu_no
 8001d4c:	4b99      	ldr	r3, [pc, #612]	; (8001fb4 <main+0xc14>)
 8001d4e:	2202      	movs	r2, #2
 8001d50:	70da      	strb	r2, [r3, #3]
						COM_UART_TX[4] = 0xfc;	//false command
 8001d52:	4b98      	ldr	r3, [pc, #608]	; (8001fb4 <main+0xc14>)
 8001d54:	22fc      	movs	r2, #252	; 0xfc
 8001d56:	711a      	strb	r2, [r3, #4]
						COM_UART_TX[5] = 0xee;	//error prefix
 8001d58:	4b96      	ldr	r3, [pc, #600]	; (8001fb4 <main+0xc14>)
 8001d5a:	22ee      	movs	r2, #238	; 0xee
 8001d5c:	715a      	strb	r2, [r3, #5]

						for (int i = 6; i < com_uart_tx_p_len; i++) {
 8001d5e:	2306      	movs	r3, #6
 8001d60:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001d64:	e00a      	b.n	8001d7c <main+0x9dc>
							COM_UART_TX[i] = 0x00;
 8001d66:	4a93      	ldr	r2, [pc, #588]	; (8001fb4 <main+0xc14>)
 8001d68:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001d6c:	4413      	add	r3, r2
 8001d6e:	2200      	movs	r2, #0
 8001d70:	701a      	strb	r2, [r3, #0]
						for (int i = 6; i < com_uart_tx_p_len; i++) {
 8001d72:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001d76:	3301      	adds	r3, #1
 8001d78:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001d7c:	4b8e      	ldr	r3, [pc, #568]	; (8001fb8 <main+0xc18>)
 8001d7e:	781b      	ldrb	r3, [r3, #0]
 8001d80:	461a      	mov	r2, r3
 8001d82:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001d86:	4293      	cmp	r3, r2
 8001d88:	dbed      	blt.n	8001d66 <main+0x9c6>
						}

						enableReqPA();
 8001d8a:	f7fe ffab 	bl	8000ce4 <enableReqPA>

						memset(main_gs_cmd, '\0', sizeof(main_gs_cmd));
 8001d8e:	4623      	mov	r3, r4
 8001d90:	461a      	mov	r2, r3
 8001d92:	2100      	movs	r1, #0
 8001d94:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8001d96:	f009 ff2d 	bl	800bbf4 <memset>
 8001d9a:	e16b      	b.n	8002074 <main+0xcd4>

					}
				} else if (DIGIPEATER_STATUS == 0) {
 8001d9c:	4b87      	ldr	r3, [pc, #540]	; (8001fbc <main+0xc1c>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	f040 8167 	bne.w	8002074 <main+0xcd4>
					if (main_gs_cmd[18] == 0xFD && main_gs_cmd[19] == 0xBA
 8001da6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001da8:	7c9b      	ldrb	r3, [r3, #18]
 8001daa:	2bfd      	cmp	r3, #253	; 0xfd
 8001dac:	d15a      	bne.n	8001e64 <main+0xac4>
 8001dae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001db0:	7cdb      	ldrb	r3, [r3, #19]
 8001db2:	2bba      	cmp	r3, #186	; 0xba
 8001db4:	d156      	bne.n	8001e64 <main+0xac4>
							&& main_gs_cmd[20] == 0xD0) {
 8001db6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001db8:	7d1b      	ldrb	r3, [r3, #20]
 8001dba:	2bd0      	cmp	r3, #208	; 0xd0
 8001dbc:	d152      	bne.n	8001e64 <main+0xac4>

						BEACON_COUNT = 2;
 8001dbe:	4b80      	ldr	r3, [pc, #512]	; (8001fc0 <main+0xc20>)
 8001dc0:	2202      	movs	r2, #2
 8001dc2:	601a      	str	r2, [r3, #0]
						OBC_SUCCESS_DATA_RX_FLAG = 0;
 8001dc4:	4b7f      	ldr	r3, [pc, #508]	; (8001fc4 <main+0xc24>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	601a      	str	r2, [r3, #0]
						DIGIPEATER_STATUS = 0;
 8001dca:	4b7c      	ldr	r3, [pc, #496]	; (8001fbc <main+0xc1c>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	601a      	str	r2, [r3, #0]
						DIGIPEATER_FLAG = 0;
 8001dd0:	4b7d      	ldr	r3, [pc, #500]	; (8001fc8 <main+0xc28>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	601a      	str	r2, [r3, #0]

						myDebug("\n-------> Digipeater MODE OFF\n\n");
 8001dd6:	487d      	ldr	r0, [pc, #500]	; (8001fcc <main+0xc2c>)
 8001dd8:	f7fe fcb8 	bl	800074c <myDebug>

						COM_UART_TX[0] = 0x53;	//header
 8001ddc:	4b75      	ldr	r3, [pc, #468]	; (8001fb4 <main+0xc14>)
 8001dde:	2253      	movs	r2, #83	; 0x53
 8001de0:	701a      	strb	r2, [r3, #0]
						COM_UART_TX[1] = 0xac;	//packet_ type
 8001de2:	4b74      	ldr	r3, [pc, #464]	; (8001fb4 <main+0xc14>)
 8001de4:	22ac      	movs	r2, #172	; 0xac
 8001de6:	705a      	strb	r2, [r3, #1]
						COM_UART_TX[2] = 0x04;	//length of info
 8001de8:	4b72      	ldr	r3, [pc, #456]	; (8001fb4 <main+0xc14>)
 8001dea:	2204      	movs	r2, #4
 8001dec:	709a      	strb	r2, [r3, #2]
						COM_UART_TX[3] = 0x02;	//mcu_no
 8001dee:	4b71      	ldr	r3, [pc, #452]	; (8001fb4 <main+0xc14>)
 8001df0:	2202      	movs	r2, #2
 8001df2:	70da      	strb	r2, [r3, #3]
						COM_UART_TX[4] = 0x00;	//Digipeater OFF
 8001df4:	4b6f      	ldr	r3, [pc, #444]	; (8001fb4 <main+0xc14>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	711a      	strb	r2, [r3, #4]
						COM_UART_TX[5] = 0xdd;	//Digipeater prefix
 8001dfa:	4b6e      	ldr	r3, [pc, #440]	; (8001fb4 <main+0xc14>)
 8001dfc:	22dd      	movs	r2, #221	; 0xdd
 8001dfe:	715a      	strb	r2, [r3, #5]

						for (int i = 6; i < com_uart_tx_p_len; i++) {
 8001e00:	2306      	movs	r3, #6
 8001e02:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001e06:	e00a      	b.n	8001e1e <main+0xa7e>
							COM_UART_TX[i] = 0x00;
 8001e08:	4a6a      	ldr	r2, [pc, #424]	; (8001fb4 <main+0xc14>)
 8001e0a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001e0e:	4413      	add	r3, r2
 8001e10:	2200      	movs	r2, #0
 8001e12:	701a      	strb	r2, [r3, #0]
						for (int i = 6; i < com_uart_tx_p_len; i++) {
 8001e14:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001e18:	3301      	adds	r3, #1
 8001e1a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001e1e:	4b66      	ldr	r3, [pc, #408]	; (8001fb8 <main+0xc18>)
 8001e20:	781b      	ldrb	r3, [r3, #0]
 8001e22:	461a      	mov	r2, r3
 8001e24:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	dbed      	blt.n	8001e08 <main+0xa68>
						}

						enableReqPA();
 8001e2c:	f7fe ff5a 	bl	8000ce4 <enableReqPA>

						memset(main_gs_cmd, '\0', sizeof(main_gs_cmd));
 8001e30:	4623      	mov	r3, r4
 8001e32:	461a      	mov	r2, r3
 8001e34:	2100      	movs	r1, #0
 8001e36:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8001e38:	f009 fedc 	bl	800bbf4 <memset>
						memset(rx_buffer, '\0', sizeof(rx_buffer));
 8001e3c:	2269      	movs	r2, #105	; 0x69
 8001e3e:	2100      	movs	r1, #0
 8001e40:	4858      	ldr	r0, [pc, #352]	; (8001fa4 <main+0xc04>)
 8001e42:	f009 fed7 	bl	800bbf4 <memset>
						memset(crc_buff, '\0', sizeof(crc_buff));
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	461a      	mov	r2, r3
 8001e4a:	2100      	movs	r1, #0
 8001e4c:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8001e50:	f009 fed0 	bl	800bbf4 <memset>
						memset(gs_cmd_buff, '\0', sizeof(gs_cmd_buff));
 8001e54:	f107 0310 	add.w	r3, r7, #16
 8001e58:	2264      	movs	r2, #100	; 0x64
 8001e5a:	2100      	movs	r1, #0
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f009 fec9 	bl	800bbf4 <memset>
 8001e62:	e107      	b.n	8002074 <main+0xcd4>

					} else if (main_gs_cmd[18] == 0xDF
 8001e64:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001e66:	7c9b      	ldrb	r3, [r3, #18]
 8001e68:	2bdf      	cmp	r3, #223	; 0xdf
 8001e6a:	d157      	bne.n	8001f1c <main+0xb7c>
							&& main_gs_cmd[19] == 0xAB
 8001e6c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001e6e:	7cdb      	ldrb	r3, [r3, #19]
 8001e70:	2bab      	cmp	r3, #171	; 0xab
 8001e72:	d153      	bne.n	8001f1c <main+0xb7c>
							&& main_gs_cmd[20] == 0xD1) {
 8001e74:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001e76:	7d1b      	ldrb	r3, [r3, #20]
 8001e78:	2bd1      	cmp	r3, #209	; 0xd1
 8001e7a:	d14f      	bne.n	8001f1c <main+0xb7c>

						BEACON_COUNT = 0;
 8001e7c:	4b50      	ldr	r3, [pc, #320]	; (8001fc0 <main+0xc20>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	601a      	str	r2, [r3, #0]
						OBC_SUCCESS_DATA_RX_FLAG = 0;
 8001e82:	4b50      	ldr	r3, [pc, #320]	; (8001fc4 <main+0xc24>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	601a      	str	r2, [r3, #0]
						DIGIPEATER_STATUS = 1;
 8001e88:	4b4c      	ldr	r3, [pc, #304]	; (8001fbc <main+0xc1c>)
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	601a      	str	r2, [r3, #0]

						myDebug("\n-------> Digipeater MODE ON\n\n");
 8001e8e:	4850      	ldr	r0, [pc, #320]	; (8001fd0 <main+0xc30>)
 8001e90:	f7fe fc5c 	bl	800074c <myDebug>

						COM_UART_TX[0] = 0x53;	//header
 8001e94:	4b47      	ldr	r3, [pc, #284]	; (8001fb4 <main+0xc14>)
 8001e96:	2253      	movs	r2, #83	; 0x53
 8001e98:	701a      	strb	r2, [r3, #0]
						COM_UART_TX[1] = 0xac;	//packet_ type
 8001e9a:	4b46      	ldr	r3, [pc, #280]	; (8001fb4 <main+0xc14>)
 8001e9c:	22ac      	movs	r2, #172	; 0xac
 8001e9e:	705a      	strb	r2, [r3, #1]
						COM_UART_TX[2] = 0x04;	//length of info
 8001ea0:	4b44      	ldr	r3, [pc, #272]	; (8001fb4 <main+0xc14>)
 8001ea2:	2204      	movs	r2, #4
 8001ea4:	709a      	strb	r2, [r3, #2]
						COM_UART_TX[3] = 0x02;	//mcu_no
 8001ea6:	4b43      	ldr	r3, [pc, #268]	; (8001fb4 <main+0xc14>)
 8001ea8:	2202      	movs	r2, #2
 8001eaa:	70da      	strb	r2, [r3, #3]
						COM_UART_TX[4] = 0x01;	//Digipeater ON
 8001eac:	4b41      	ldr	r3, [pc, #260]	; (8001fb4 <main+0xc14>)
 8001eae:	2201      	movs	r2, #1
 8001eb0:	711a      	strb	r2, [r3, #4]
						COM_UART_TX[5] = 0xdd;	//Digipeater prefix
 8001eb2:	4b40      	ldr	r3, [pc, #256]	; (8001fb4 <main+0xc14>)
 8001eb4:	22dd      	movs	r2, #221	; 0xdd
 8001eb6:	715a      	strb	r2, [r3, #5]

						for (int i = 6; i < com_uart_tx_p_len; i++) {
 8001eb8:	2306      	movs	r3, #6
 8001eba:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001ebe:	e00a      	b.n	8001ed6 <main+0xb36>
							COM_UART_TX[i] = 0x00;
 8001ec0:	4a3c      	ldr	r2, [pc, #240]	; (8001fb4 <main+0xc14>)
 8001ec2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001ec6:	4413      	add	r3, r2
 8001ec8:	2200      	movs	r2, #0
 8001eca:	701a      	strb	r2, [r3, #0]
						for (int i = 6; i < com_uart_tx_p_len; i++) {
 8001ecc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001ed0:	3301      	adds	r3, #1
 8001ed2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001ed6:	4b38      	ldr	r3, [pc, #224]	; (8001fb8 <main+0xc18>)
 8001ed8:	781b      	ldrb	r3, [r3, #0]
 8001eda:	461a      	mov	r2, r3
 8001edc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	dbed      	blt.n	8001ec0 <main+0xb20>
						}

						enableReqPA();
 8001ee4:	f7fe fefe 	bl	8000ce4 <enableReqPA>

						memset(main_gs_cmd, '\0', sizeof(main_gs_cmd));
 8001ee8:	4623      	mov	r3, r4
 8001eea:	461a      	mov	r2, r3
 8001eec:	2100      	movs	r1, #0
 8001eee:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8001ef0:	f009 fe80 	bl	800bbf4 <memset>
						memset(rx_buffer, '\0', sizeof(rx_buffer));
 8001ef4:	2269      	movs	r2, #105	; 0x69
 8001ef6:	2100      	movs	r1, #0
 8001ef8:	482a      	ldr	r0, [pc, #168]	; (8001fa4 <main+0xc04>)
 8001efa:	f009 fe7b 	bl	800bbf4 <memset>
						memset(crc_buff, '\0', sizeof(crc_buff));
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	461a      	mov	r2, r3
 8001f02:	2100      	movs	r1, #0
 8001f04:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8001f08:	f009 fe74 	bl	800bbf4 <memset>
						memset(gs_cmd_buff, '\0', sizeof(gs_cmd_buff));
 8001f0c:	f107 0310 	add.w	r3, r7, #16
 8001f10:	2264      	movs	r2, #100	; 0x64
 8001f12:	2100      	movs	r1, #0
 8001f14:	4618      	mov	r0, r3
 8001f16:	f009 fe6d 	bl	800bbf4 <memset>
 8001f1a:	e0ab      	b.n	8002074 <main+0xcd4>

					} else if (main_gs_cmd[18] == 0x53
 8001f1c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f1e:	7c9b      	ldrb	r3, [r3, #18]
 8001f20:	2b53      	cmp	r3, #83	; 0x53
 8001f22:	d157      	bne.n	8001fd4 <main+0xc34>
							&& main_gs_cmd[19] == 0x02
 8001f24:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f26:	7cdb      	ldrb	r3, [r3, #19]
 8001f28:	2b02      	cmp	r3, #2
 8001f2a:	d153      	bne.n	8001fd4 <main+0xc34>
							&& main_gs_cmd[20] == 0x53) { // Digipeater Packet
 8001f2c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f2e:	7d1b      	ldrb	r3, [r3, #20]
 8001f30:	2b53      	cmp	r3, #83	; 0x53
 8001f32:	d14f      	bne.n	8001fd4 <main+0xc34>

						myDebug("\n********GS Command failed: 0x%x\r\n");
 8001f34:	481e      	ldr	r0, [pc, #120]	; (8001fb0 <main+0xc10>)
 8001f36:	f7fe fc09 	bl	800074c <myDebug>

						COM_UART_TX[0] = 0x53;	//header
 8001f3a:	4b1e      	ldr	r3, [pc, #120]	; (8001fb4 <main+0xc14>)
 8001f3c:	2253      	movs	r2, #83	; 0x53
 8001f3e:	701a      	strb	r2, [r3, #0]
						COM_UART_TX[1] = 0xac;	//packet_ type
 8001f40:	4b1c      	ldr	r3, [pc, #112]	; (8001fb4 <main+0xc14>)
 8001f42:	22ac      	movs	r2, #172	; 0xac
 8001f44:	705a      	strb	r2, [r3, #1]
						COM_UART_TX[2] = 0x04;	//length of info
 8001f46:	4b1b      	ldr	r3, [pc, #108]	; (8001fb4 <main+0xc14>)
 8001f48:	2204      	movs	r2, #4
 8001f4a:	709a      	strb	r2, [r3, #2]
						COM_UART_TX[3] = 0x02;	//mcu_no
 8001f4c:	4b19      	ldr	r3, [pc, #100]	; (8001fb4 <main+0xc14>)
 8001f4e:	2202      	movs	r2, #2
 8001f50:	70da      	strb	r2, [r3, #3]
						COM_UART_TX[4] = 0xfc;	//false command
 8001f52:	4b18      	ldr	r3, [pc, #96]	; (8001fb4 <main+0xc14>)
 8001f54:	22fc      	movs	r2, #252	; 0xfc
 8001f56:	711a      	strb	r2, [r3, #4]
						COM_UART_TX[5] = 0xee;	//error prefix
 8001f58:	4b16      	ldr	r3, [pc, #88]	; (8001fb4 <main+0xc14>)
 8001f5a:	22ee      	movs	r2, #238	; 0xee
 8001f5c:	715a      	strb	r2, [r3, #5]

						for (int i = 6; i < com_uart_tx_p_len; i++) {
 8001f5e:	2306      	movs	r3, #6
 8001f60:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001f64:	e00a      	b.n	8001f7c <main+0xbdc>
							COM_UART_TX[i] = 0x00;
 8001f66:	4a13      	ldr	r2, [pc, #76]	; (8001fb4 <main+0xc14>)
 8001f68:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001f6c:	4413      	add	r3, r2
 8001f6e:	2200      	movs	r2, #0
 8001f70:	701a      	strb	r2, [r3, #0]
						for (int i = 6; i < com_uart_tx_p_len; i++) {
 8001f72:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001f76:	3301      	adds	r3, #1
 8001f78:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001f7c:	4b0e      	ldr	r3, [pc, #56]	; (8001fb8 <main+0xc18>)
 8001f7e:	781b      	ldrb	r3, [r3, #0]
 8001f80:	461a      	mov	r2, r3
 8001f82:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001f86:	4293      	cmp	r3, r2
 8001f88:	dbed      	blt.n	8001f66 <main+0xbc6>
						}

						enableReqPA();
 8001f8a:	f7fe feab 	bl	8000ce4 <enableReqPA>

						memset(main_gs_cmd, '\0', sizeof(main_gs_cmd));
 8001f8e:	4623      	mov	r3, r4
 8001f90:	461a      	mov	r2, r3
 8001f92:	2100      	movs	r1, #0
 8001f94:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8001f96:	f009 fe2d 	bl	800bbf4 <memset>
 8001f9a:	e06b      	b.n	8002074 <main+0xcd4>
 8001f9c:	0800c564 	.word	0x0800c564
 8001fa0:	0800c56c 	.word	0x0800c56c
 8001fa4:	200002ac 	.word	0x200002ac
 8001fa8:	0800cb8c 	.word	0x0800cb8c
 8001fac:	200004e4 	.word	0x200004e4
 8001fb0:	0800caac 	.word	0x0800caac
 8001fb4:	20000370 	.word	0x20000370
 8001fb8:	20000002 	.word	0x20000002
 8001fbc:	200004d8 	.word	0x200004d8
 8001fc0:	20000004 	.word	0x20000004
 8001fc4:	2000039c 	.word	0x2000039c
 8001fc8:	200004e0 	.word	0x200004e0
 8001fcc:	0800cad0 	.word	0x0800cad0
 8001fd0:	0800cb38 	.word	0x0800cb38

					} else {
						myDebug("\nCommand sent to OBC, Length: %d bytes\r\n",
 8001fd4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8001fd6:	4831      	ldr	r0, [pc, #196]	; (800209c <main+0xcfc>)
 8001fd8:	f7fe fbb8 	bl	800074c <myDebug>
								gs_cmd_len);

						if (HAL_UART_Transmit(&huart2, main_gs_cmd,
 8001fdc:	b2a2      	uxth	r2, r4
 8001fde:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001fe2:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8001fe4:	482e      	ldr	r0, [pc, #184]	; (80020a0 <main+0xd00>)
 8001fe6:	f004 fbca 	bl	800677e <HAL_UART_Transmit>
 8001fea:	4603      	mov	r3, r0
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d009      	beq.n	8002004 <main+0xc64>
								sizeof(main_gs_cmd), 2000) == HAL_OK
								|| HAL_UART_Transmit(&hlpuart1, main_gs_cmd,
 8001ff0:	b2a2      	uxth	r2, r4
 8001ff2:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001ff6:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8001ff8:	482a      	ldr	r0, [pc, #168]	; (80020a4 <main+0xd04>)
 8001ffa:	f004 fbc0 	bl	800677e <HAL_UART_Transmit>
 8001ffe:	4603      	mov	r3, r0
 8002000:	2b00      	cmp	r3, #0
 8002002:	d137      	bne.n	8002074 <main+0xcd4>
										sizeof(main_gs_cmd), 2000) == HAL_OK) {

							for (int i = 0; i < gs_cmd_len; i++) {
 8002004:	2300      	movs	r3, #0
 8002006:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800200a:	e00d      	b.n	8002028 <main+0xc88>
								myDebug("%02x ", main_gs_cmd[i]);
 800200c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800200e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002012:	4413      	add	r3, r2
 8002014:	781b      	ldrb	r3, [r3, #0]
 8002016:	4619      	mov	r1, r3
 8002018:	4823      	ldr	r0, [pc, #140]	; (80020a8 <main+0xd08>)
 800201a:	f7fe fb97 	bl	800074c <myDebug>
							for (int i = 0; i < gs_cmd_len; i++) {
 800201e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002022:	3301      	adds	r3, #1
 8002024:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002028:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800202c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800202e:	429a      	cmp	r2, r3
 8002030:	dbec      	blt.n	800200c <main+0xc6c>
							}

							myDebug("\r\n");
 8002032:	481e      	ldr	r0, [pc, #120]	; (80020ac <main+0xd0c>)
 8002034:	f7fe fb8a 	bl	800074c <myDebug>

							memset(main_gs_cmd, '\0', sizeof(main_gs_cmd));
 8002038:	4623      	mov	r3, r4
 800203a:	461a      	mov	r2, r3
 800203c:	2100      	movs	r1, #0
 800203e:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8002040:	f009 fdd8 	bl	800bbf4 <memset>
							memset(rx_buffer, '\0', sizeof(rx_buffer));
 8002044:	2269      	movs	r2, #105	; 0x69
 8002046:	2100      	movs	r1, #0
 8002048:	4819      	ldr	r0, [pc, #100]	; (80020b0 <main+0xd10>)
 800204a:	f009 fdd3 	bl	800bbf4 <memset>
							memset(crc_buff, '\0', sizeof(crc_buff));
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	461a      	mov	r2, r3
 8002052:	2100      	movs	r1, #0
 8002054:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8002058:	f009 fdcc 	bl	800bbf4 <memset>
							memset(gs_cmd_buff, '\0', sizeof(gs_cmd_buff));
 800205c:	f107 0310 	add.w	r3, r7, #16
 8002060:	2264      	movs	r2, #100	; 0x64
 8002062:	2100      	movs	r1, #0
 8002064:	4618      	mov	r0, r3
 8002066:	f009 fdc5 	bl	800bbf4 <memset>

							myDebug("\n\n_____OBC__RECEIVER_____\r\n");
 800206a:	4812      	ldr	r0, [pc, #72]	; (80020b4 <main+0xd14>)
 800206c:	f7fe fb6e 	bl	800074c <myDebug>
 8002070:	e000      	b.n	8002074 <main+0xcd4>
						if (HAL_UART_Transmit(&huart2, main_gs_cmd,
 8002072:	bf00      	nop
 8002074:	f8d7 d008 	ldr.w	sp, [r7, #8]
					}
				}
			}
		}

		HAL_UART_Receive_DMA(&huart2, OBC_UART_RX, obc_plen);
 8002078:	4b0f      	ldr	r3, [pc, #60]	; (80020b8 <main+0xd18>)
 800207a:	781b      	ldrb	r3, [r3, #0]
 800207c:	b29b      	uxth	r3, r3
 800207e:	461a      	mov	r2, r3
 8002080:	490e      	ldr	r1, [pc, #56]	; (80020bc <main+0xd1c>)
 8002082:	4807      	ldr	r0, [pc, #28]	; (80020a0 <main+0xd00>)
 8002084:	f004 fcc6 	bl	8006a14 <HAL_UART_Receive_DMA>

		HAL_UART_Receive_DMA(&hlpuart1, OBC_UART_RX, obc_plen);
 8002088:	4b0b      	ldr	r3, [pc, #44]	; (80020b8 <main+0xd18>)
 800208a:	781b      	ldrb	r3, [r3, #0]
 800208c:	b29b      	uxth	r3, r3
 800208e:	461a      	mov	r2, r3
 8002090:	490a      	ldr	r1, [pc, #40]	; (80020bc <main+0xd1c>)
 8002092:	4804      	ldr	r0, [pc, #16]	; (80020a4 <main+0xd04>)
 8002094:	f004 fcbe 	bl	8006a14 <HAL_UART_Receive_DMA>
		MX_SubGHz_Phy_Process();
 8002098:	f7ff ba38 	b.w	800150c <main+0x16c>
 800209c:	0800caf0 	.word	0x0800caf0
 80020a0:	20000688 	.word	0x20000688
 80020a4:	20000560 	.word	0x20000560
 80020a8:	0800c564 	.word	0x0800c564
 80020ac:	0800c56c 	.word	0x0800c56c
 80020b0:	200002ac 	.word	0x200002ac
 80020b4:	0800cb1c 	.word	0x0800cb1c
 80020b8:	20000001 	.word	0x20000001
 80020bc:	20000318 	.word	0x20000318

080020c0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b09a      	sub	sp, #104	; 0x68
 80020c4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80020c6:	f107 0320 	add.w	r3, r7, #32
 80020ca:	2248      	movs	r2, #72	; 0x48
 80020cc:	2100      	movs	r1, #0
 80020ce:	4618      	mov	r0, r3
 80020d0:	f009 fd90 	bl	800bbf4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80020d4:	1d3b      	adds	r3, r7, #4
 80020d6:	2200      	movs	r2, #0
 80020d8:	601a      	str	r2, [r3, #0]
 80020da:	605a      	str	r2, [r3, #4]
 80020dc:	609a      	str	r2, [r3, #8]
 80020de:	60da      	str	r2, [r3, #12]
 80020e0:	611a      	str	r2, [r3, #16]
 80020e2:	615a      	str	r2, [r3, #20]
 80020e4:	619a      	str	r2, [r3, #24]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80020e6:	4b25      	ldr	r3, [pc, #148]	; (800217c <SystemClock_Config+0xbc>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80020ee:	4a23      	ldr	r2, [pc, #140]	; (800217c <SystemClock_Config+0xbc>)
 80020f0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80020f4:	6013      	str	r3, [r2, #0]
 80020f6:	4b21      	ldr	r3, [pc, #132]	; (800217c <SystemClock_Config+0xbc>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80020fe:	603b      	str	r3, [r7, #0]
 8002100:	683b      	ldr	r3, [r7, #0]

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002102:	2301      	movs	r3, #1
 8002104:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS_PWR;
 8002106:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800210a:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.HSEDiv = RCC_HSE_DIV1;
 800210c:	2300      	movs	r3, #0
 800210e:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002110:	2302      	movs	r3, #2
 8002112:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002114:	2303      	movs	r3, #3
 8002116:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8002118:	2310      	movs	r3, #16
 800211a:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLN = 6;
 800211c:	2306      	movs	r3, #6
 800211e:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002120:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002124:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002126:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800212a:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800212c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002130:	663b      	str	r3, [r7, #96]	; 0x60
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8002132:	f107 0320 	add.w	r3, r7, #32
 8002136:	4618      	mov	r0, r3
 8002138:	f002 fadc 	bl	80046f4 <HAL_RCC_OscConfig>
 800213c:	4603      	mov	r3, r0
 800213e:	2b00      	cmp	r3, #0
 8002140:	d001      	beq.n	8002146 <SystemClock_Config+0x86>
		Error_Handler();
 8002142:	f000 fb03 	bl	800274c <Error_Handler>
	}

	/** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3 | RCC_CLOCKTYPE_HCLK
 8002146:	234f      	movs	r3, #79	; 0x4f
 8002148:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800214a:	2303      	movs	r3, #3
 800214c:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800214e:	2300      	movs	r3, #0
 8002150:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002152:	2300      	movs	r3, #0
 8002154:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002156:	2300      	movs	r3, #0
 8002158:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 800215a:	2300      	movs	r3, #0
 800215c:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 800215e:	1d3b      	adds	r3, r7, #4
 8002160:	2102      	movs	r1, #2
 8002162:	4618      	mov	r0, r3
 8002164:	f002 fe48 	bl	8004df8 <HAL_RCC_ClockConfig>
 8002168:	4603      	mov	r3, r0
 800216a:	2b00      	cmp	r3, #0
 800216c:	d001      	beq.n	8002172 <SystemClock_Config+0xb2>
		Error_Handler();
 800216e:	f000 faed 	bl	800274c <Error_Handler>
	}
}
 8002172:	bf00      	nop
 8002174:	3768      	adds	r7, #104	; 0x68
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop
 800217c:	58000400 	.word	0x58000400

08002180 <DioIrqHndlr>:

/* USER CODE BEGIN 4 */
void DioIrqHndlr(RadioIrqMasks_t radioIrq) {
 8002180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002184:	b09f      	sub	sp, #124	; 0x7c
 8002186:	af00      	add	r7, sp, #0
 8002188:	4603      	mov	r3, r0
 800218a:	81fb      	strh	r3, [r7, #14]
	if (radioIrq == IRQ_TX_DONE) {
 800218c:	89fb      	ldrh	r3, [r7, #14]
 800218e:	2b01      	cmp	r3, #1
 8002190:	f040 8156 	bne.w	8002440 <DioIrqHndlr+0x2c0>
		OBC_SUCCESS_DATA_RX_FLAG = 0;
 8002194:	4b87      	ldr	r3, [pc, #540]	; (80023b4 <DioIrqHndlr+0x234>)
 8002196:	2200      	movs	r2, #0
 8002198:	601a      	str	r2, [r3, #0]

		myDebug("\nSatellite Data Transmitted Successful, Length: %d bytes\r\n",
 800219a:	4b87      	ldr	r3, [pc, #540]	; (80023b8 <DioIrqHndlr+0x238>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4619      	mov	r1, r3
 80021a0:	4886      	ldr	r0, [pc, #536]	; (80023bc <DioIrqHndlr+0x23c>)
 80021a2:	f7fe fad3 	bl	800074c <myDebug>
				tx_buffer_len);
		for (int i = 0; i < tx_buffer_len; i++) {
 80021a6:	2300      	movs	r3, #0
 80021a8:	677b      	str	r3, [r7, #116]	; 0x74
 80021aa:	e00a      	b.n	80021c2 <DioIrqHndlr+0x42>
			myDebug("%02x ", tx_buffer[i]);
 80021ac:	4a84      	ldr	r2, [pc, #528]	; (80023c0 <DioIrqHndlr+0x240>)
 80021ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80021b0:	4413      	add	r3, r2
 80021b2:	781b      	ldrb	r3, [r3, #0]
 80021b4:	4619      	mov	r1, r3
 80021b6:	4883      	ldr	r0, [pc, #524]	; (80023c4 <DioIrqHndlr+0x244>)
 80021b8:	f7fe fac8 	bl	800074c <myDebug>
		for (int i = 0; i < tx_buffer_len; i++) {
 80021bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80021be:	3301      	adds	r3, #1
 80021c0:	677b      	str	r3, [r7, #116]	; 0x74
 80021c2:	4b7d      	ldr	r3, [pc, #500]	; (80023b8 <DioIrqHndlr+0x238>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80021c8:	429a      	cmp	r2, r3
 80021ca:	dbef      	blt.n	80021ac <DioIrqHndlr+0x2c>
		}
		myDebug("\r\n");
 80021cc:	487e      	ldr	r0, [pc, #504]	; (80023c8 <DioIrqHndlr+0x248>)
 80021ce:	f7fe fabd 	bl	800074c <myDebug>

		myDebug("\n########## Sending TX done response to OBC ##########\n");
 80021d2:	487e      	ldr	r0, [pc, #504]	; (80023cc <DioIrqHndlr+0x24c>)
 80021d4:	f7fe faba 	bl	800074c <myDebug>

		uint8_t tx_done_response[43];

		tx_done_response[0] = 0x42;	//header
 80021d8:	2342      	movs	r3, #66	; 0x42
 80021da:	743b      	strb	r3, [r7, #16]
		tx_done_response[1] = 0xac;	//packet_ type
 80021dc:	23ac      	movs	r3, #172	; 0xac
 80021de:	747b      	strb	r3, [r7, #17]
		tx_done_response[2] = 0x04;	//length of info
 80021e0:	2304      	movs	r3, #4
 80021e2:	74bb      	strb	r3, [r7, #18]
		tx_done_response[3] = 0x02;	//mcu_no
 80021e4:	2302      	movs	r3, #2
 80021e6:	74fb      	strb	r3, [r7, #19]
		tx_done_response[4] = 0x4d;	//tx_done prefix
 80021e8:	234d      	movs	r3, #77	; 0x4d
 80021ea:	753b      	strb	r3, [r7, #20]
		tx_done_response[5] = 0x4d;	//tx_done prefix
 80021ec:	234d      	movs	r3, #77	; 0x4d
 80021ee:	757b      	strb	r3, [r7, #21]

		for (int i = 6; i < 43; i++) {
 80021f0:	2306      	movs	r3, #6
 80021f2:	673b      	str	r3, [r7, #112]	; 0x70
 80021f4:	e008      	b.n	8002208 <DioIrqHndlr+0x88>
			tx_done_response[i] = 0x4d;
 80021f6:	f107 0210 	add.w	r2, r7, #16
 80021fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80021fc:	4413      	add	r3, r2
 80021fe:	224d      	movs	r2, #77	; 0x4d
 8002200:	701a      	strb	r2, [r3, #0]
		for (int i = 6; i < 43; i++) {
 8002202:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002204:	3301      	adds	r3, #1
 8002206:	673b      	str	r3, [r7, #112]	; 0x70
 8002208:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800220a:	2b2a      	cmp	r3, #42	; 0x2a
 800220c:	ddf3      	ble.n	80021f6 <DioIrqHndlr+0x76>
		}

		if (HAL_UART_Transmit(&huart2, tx_done_response,
 800220e:	f107 0110 	add.w	r1, r7, #16
 8002212:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002216:	222b      	movs	r2, #43	; 0x2b
 8002218:	486d      	ldr	r0, [pc, #436]	; (80023d0 <DioIrqHndlr+0x250>)
 800221a:	f004 fab0 	bl	800677e <HAL_UART_Transmit>
 800221e:	4603      	mov	r3, r0
 8002220:	2b00      	cmp	r3, #0
 8002222:	d00a      	beq.n	800223a <DioIrqHndlr+0xba>
				sizeof(tx_done_response), 2000) == HAL_OK
				|| HAL_UART_Transmit(&hlpuart1, tx_done_response,
 8002224:	f107 0110 	add.w	r1, r7, #16
 8002228:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800222c:	222b      	movs	r2, #43	; 0x2b
 800222e:	4869      	ldr	r0, [pc, #420]	; (80023d4 <DioIrqHndlr+0x254>)
 8002230:	f004 faa5 	bl	800677e <HAL_UART_Transmit>
 8002234:	4603      	mov	r3, r0
 8002236:	2b00      	cmp	r3, #0
 8002238:	d114      	bne.n	8002264 <DioIrqHndlr+0xe4>
						sizeof(tx_done_response), 2000) == HAL_OK) {

			for (int i = 0; i < sizeof(tx_done_response); i++) {
 800223a:	2300      	movs	r3, #0
 800223c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800223e:	e00b      	b.n	8002258 <DioIrqHndlr+0xd8>
				myDebug("%02x ", tx_done_response[i]);
 8002240:	f107 0210 	add.w	r2, r7, #16
 8002244:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002246:	4413      	add	r3, r2
 8002248:	781b      	ldrb	r3, [r3, #0]
 800224a:	4619      	mov	r1, r3
 800224c:	485d      	ldr	r0, [pc, #372]	; (80023c4 <DioIrqHndlr+0x244>)
 800224e:	f7fe fa7d 	bl	800074c <myDebug>
			for (int i = 0; i < sizeof(tx_done_response); i++) {
 8002252:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002254:	3301      	adds	r3, #1
 8002256:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002258:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800225a:	2b2a      	cmp	r3, #42	; 0x2a
 800225c:	d9f0      	bls.n	8002240 <DioIrqHndlr+0xc0>
			}

			myDebug("\r\n");
 800225e:	485a      	ldr	r0, [pc, #360]	; (80023c8 <DioIrqHndlr+0x248>)
 8002260:	f7fe fa74 	bl	800074c <myDebug>

		}

		memset(tx_buffer, '\0', sizeof(tx_buffer));
 8002264:	2296      	movs	r2, #150	; 0x96
 8002266:	2100      	movs	r1, #0
 8002268:	4855      	ldr	r0, [pc, #340]	; (80023c0 <DioIrqHndlr+0x240>)
 800226a:	f009 fcc3 	bl	800bbf4 <memset>

		if (PACKET_TYPE == 0xB1 || PACKET_TYPE == 0xB2) {
 800226e:	4b5a      	ldr	r3, [pc, #360]	; (80023d8 <DioIrqHndlr+0x258>)
 8002270:	781b      	ldrb	r3, [r3, #0]
 8002272:	2bb1      	cmp	r3, #177	; 0xb1
 8002274:	d003      	beq.n	800227e <DioIrqHndlr+0xfe>
 8002276:	4b58      	ldr	r3, [pc, #352]	; (80023d8 <DioIrqHndlr+0x258>)
 8002278:	781b      	ldrb	r3, [r3, #0]
 800227a:	2bb2      	cmp	r3, #178	; 0xb2
 800227c:	d10c      	bne.n	8002298 <DioIrqHndlr+0x118>
			BEACON_COUNT--;
 800227e:	4b57      	ldr	r3, [pc, #348]	; (80023dc <DioIrqHndlr+0x25c>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	3b01      	subs	r3, #1
 8002284:	4a55      	ldr	r2, [pc, #340]	; (80023dc <DioIrqHndlr+0x25c>)
 8002286:	6013      	str	r3, [r2, #0]
			COUNT_BEACON--;
 8002288:	4b55      	ldr	r3, [pc, #340]	; (80023e0 <DioIrqHndlr+0x260>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	3b01      	subs	r3, #1
 800228e:	4a54      	ldr	r2, [pc, #336]	; (80023e0 <DioIrqHndlr+0x260>)
 8002290:	6013      	str	r3, [r2, #0]
			PACKET_TYPE = 0;
 8002292:	4b51      	ldr	r3, [pc, #324]	; (80023d8 <DioIrqHndlr+0x258>)
 8002294:	2200      	movs	r2, #0
 8002296:	701a      	strb	r2, [r3, #0]
		}

		if (DIGIPEATER_FLAG) {
 8002298:	4b52      	ldr	r3, [pc, #328]	; (80023e4 <DioIrqHndlr+0x264>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d00e      	beq.n	80022be <DioIrqHndlr+0x13e>
			BEACON_COUNT = 2;
 80022a0:	4b4e      	ldr	r3, [pc, #312]	; (80023dc <DioIrqHndlr+0x25c>)
 80022a2:	2202      	movs	r2, #2
 80022a4:	601a      	str	r2, [r3, #0]
			OBC_SUCCESS_DATA_RX_FLAG = 0;
 80022a6:	4b43      	ldr	r3, [pc, #268]	; (80023b4 <DioIrqHndlr+0x234>)
 80022a8:	2200      	movs	r2, #0
 80022aa:	601a      	str	r2, [r3, #0]
			DIGIPEATER_STATUS = 0;
 80022ac:	4b4e      	ldr	r3, [pc, #312]	; (80023e8 <DioIrqHndlr+0x268>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	601a      	str	r2, [r3, #0]
			DIGIPEATER_FLAG = 0;
 80022b2:	4b4c      	ldr	r3, [pc, #304]	; (80023e4 <DioIrqHndlr+0x264>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	601a      	str	r2, [r3, #0]
			DIGIPEATER_RX_FLAG = 0;
 80022b8:	4b4c      	ldr	r3, [pc, #304]	; (80023ec <DioIrqHndlr+0x26c>)
 80022ba:	2200      	movs	r2, #0
 80022bc:	601a      	str	r2, [r3, #0]
		}

		if (BEACON_COUNT == 0) {
 80022be:	4b47      	ldr	r3, [pc, #284]	; (80023dc <DioIrqHndlr+0x25c>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d109      	bne.n	80022da <DioIrqHndlr+0x15a>
			OBC_SUCCESS_DATA_RX_FLAG = 0;
 80022c6:	4b3b      	ldr	r3, [pc, #236]	; (80023b4 <DioIrqHndlr+0x234>)
 80022c8:	2200      	movs	r2, #0
 80022ca:	601a      	str	r2, [r3, #0]
			DIGIPEATER_STATUS = 1;
 80022cc:	4b46      	ldr	r3, [pc, #280]	; (80023e8 <DioIrqHndlr+0x268>)
 80022ce:	2201      	movs	r2, #1
 80022d0:	601a      	str	r2, [r3, #0]
			myDebug("\n########## Digipeater Mode Configuration: ##########\n");
 80022d2:	4847      	ldr	r0, [pc, #284]	; (80023f0 <DioIrqHndlr+0x270>)
 80022d4:	f7fe fa3a 	bl	800074c <myDebug>
 80022d8:	e002      	b.n	80022e0 <DioIrqHndlr+0x160>
		} else {
			DIGIPEATER_STATUS = 0;
 80022da:	4b43      	ldr	r3, [pc, #268]	; (80023e8 <DioIrqHndlr+0x268>)
 80022dc:	2200      	movs	r2, #0
 80022de:	601a      	str	r2, [r3, #0]
		}

		delay_us(500000);
 80022e0:	4844      	ldr	r0, [pc, #272]	; (80023f4 <DioIrqHndlr+0x274>)
 80022e2:	f7fe fa19 	bl	8000718 <delay_us>

		setPacketParams(rx_buffer_len);
 80022e6:	4b44      	ldr	r3, [pc, #272]	; (80023f8 <DioIrqHndlr+0x278>)
 80022e8:	781b      	ldrb	r3, [r3, #0]
 80022ea:	4618      	mov	r0, r3
 80022ec:	f7fe fd86 	bl	8000dfc <setPacketParams>
		setModulationParams(GFSK_BR_1200, GFSK_FDEV_1200);
 80022f0:	f640 31b8 	movw	r1, #3000	; 0xbb8
 80022f4:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 80022f8:	f7fe fdaa 	bl	8000e50 <setModulationParams>
		radioConfig(rx_buffer, rx_buffer_len);
 80022fc:	4b3e      	ldr	r3, [pc, #248]	; (80023f8 <DioIrqHndlr+0x278>)
 80022fe:	781b      	ldrb	r3, [r3, #0]
 8002300:	4619      	mov	r1, r3
 8002302:	483e      	ldr	r0, [pc, #248]	; (80023fc <DioIrqHndlr+0x27c>)
 8002304:	f7fe fdc2 	bl	8000e8c <radioConfig>

		myDebug("\n########## RX Configuration: ##########\n");
 8002308:	483d      	ldr	r0, [pc, #244]	; (8002400 <DioIrqHndlr+0x280>)
 800230a:	f7fe fa1f 	bl	800074c <myDebug>

		myDebug("FREQUENCY MODS: UPLINK FREQ: %lu Hz\r\n",
 800230e:	493d      	ldr	r1, [pc, #244]	; (8002404 <DioIrqHndlr+0x284>)
 8002310:	483d      	ldr	r0, [pc, #244]	; (8002408 <DioIrqHndlr+0x288>)
 8002312:	f7fe fa1b 	bl	800074c <myDebug>
		FREQ_435_MHZ);
		myDebug("Bit Rate: 	%d\n\r", mod_params.Params.Gfsk.BitRate);
 8002316:	4b3d      	ldr	r3, [pc, #244]	; (800240c <DioIrqHndlr+0x28c>)
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	4619      	mov	r1, r3
 800231c:	483c      	ldr	r0, [pc, #240]	; (8002410 <DioIrqHndlr+0x290>)
 800231e:	f7fe fa15 	bl	800074c <myDebug>
		myDebug("Frequency Deviation: 	%d\n\r", mod_params.Params.Gfsk.Fdev);
 8002322:	4b3a      	ldr	r3, [pc, #232]	; (800240c <DioIrqHndlr+0x28c>)
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	4619      	mov	r1, r3
 8002328:	483a      	ldr	r0, [pc, #232]	; (8002414 <DioIrqHndlr+0x294>)
 800232a:	f7fe fa0f 	bl	800074c <myDebug>
		myDebug("RECEVING BANDWIDTH: 	%d\n\r",
				mod_params.Params.Gfsk.Bandwidth);
 800232e:	4b37      	ldr	r3, [pc, #220]	; (800240c <DioIrqHndlr+0x28c>)
 8002330:	7b5b      	ldrb	r3, [r3, #13]
		myDebug("RECEVING BANDWIDTH: 	%d\n\r",
 8002332:	4619      	mov	r1, r3
 8002334:	4838      	ldr	r0, [pc, #224]	; (8002418 <DioIrqHndlr+0x298>)
 8002336:	f7fe fa09 	bl	800074c <myDebug>
		myDebug("Packet Type 			%d\n\r", pkt_params.PacketType);
 800233a:	4b38      	ldr	r3, [pc, #224]	; (800241c <DioIrqHndlr+0x29c>)
 800233c:	781b      	ldrb	r3, [r3, #0]
 800233e:	4619      	mov	r1, r3
 8002340:	4837      	ldr	r0, [pc, #220]	; (8002420 <DioIrqHndlr+0x2a0>)
 8002342:	f7fe fa03 	bl	800074c <myDebug>
		myDebug("PayloadLength 			%d\n\r",
				pkt_params.Params.Gfsk.PayloadLength);
 8002346:	4b35      	ldr	r3, [pc, #212]	; (800241c <DioIrqHndlr+0x29c>)
 8002348:	7a1b      	ldrb	r3, [r3, #8]
		myDebug("PayloadLength 			%d\n\r",
 800234a:	4619      	mov	r1, r3
 800234c:	4835      	ldr	r0, [pc, #212]	; (8002424 <DioIrqHndlr+0x2a4>)
 800234e:	f7fe f9fd 	bl	800074c <myDebug>
		myDebug("PreambleLength 		%d\n\r",
				pkt_params.Params.Gfsk.PreambleLength);
 8002352:	4b32      	ldr	r3, [pc, #200]	; (800241c <DioIrqHndlr+0x29c>)
 8002354:	885b      	ldrh	r3, [r3, #2]
		myDebug("PreambleLength 		%d\n\r",
 8002356:	4619      	mov	r1, r3
 8002358:	4833      	ldr	r0, [pc, #204]	; (8002428 <DioIrqHndlr+0x2a8>)
 800235a:	f7fe f9f7 	bl	800074c <myDebug>
		myDebug("PreambleMinDetect		%d\n\r",
				pkt_params.Params.Gfsk.PreambleMinDetect);
 800235e:	4b2f      	ldr	r3, [pc, #188]	; (800241c <DioIrqHndlr+0x29c>)
 8002360:	791b      	ldrb	r3, [r3, #4]
		myDebug("PreambleMinDetect		%d\n\r",
 8002362:	4619      	mov	r1, r3
 8002364:	4831      	ldr	r0, [pc, #196]	; (800242c <DioIrqHndlr+0x2ac>)
 8002366:	f7fe f9f1 	bl	800074c <myDebug>
		myDebug("HeaderType 			%d\n\r", pkt_params.Params.Gfsk.HeaderType);
 800236a:	4b2c      	ldr	r3, [pc, #176]	; (800241c <DioIrqHndlr+0x29c>)
 800236c:	79db      	ldrb	r3, [r3, #7]
 800236e:	4619      	mov	r1, r3
 8002370:	482f      	ldr	r0, [pc, #188]	; (8002430 <DioIrqHndlr+0x2b0>)
 8002372:	f7fe f9eb 	bl	800074c <myDebug>
		myDebug("__________*******************__________\r\n");
 8002376:	482f      	ldr	r0, [pc, #188]	; (8002434 <DioIrqHndlr+0x2b4>)
 8002378:	f7fe f9e8 	bl	800074c <myDebug>

		SUBGRF_SetRfFrequency(FREQ_435_MHZ);
 800237c:	4821      	ldr	r0, [pc, #132]	; (8002404 <DioIrqHndlr+0x284>)
 800237e:	f008 fa07 	bl	800a790 <SUBGRF_SetRfFrequency>
		SUBGRF_SetSwitch(RFO_LP, RFSWITCH_RX); /*Set RF switch*/
 8002382:	2100      	movs	r1, #0
 8002384:	2001      	movs	r0, #1
 8002386:	f008 fe4b 	bl	800b020 <SUBGRF_SetSwitch>
		SUBGRF_SetRxBoosted(0xFFFFFF);
 800238a:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800238e:	f008 f82b 	bl	800a3e8 <SUBGRF_SetRxBoosted>

		HAL_UART_Receive_DMA(&huart2, OBC_UART_RX, obc_plen);
 8002392:	4b29      	ldr	r3, [pc, #164]	; (8002438 <DioIrqHndlr+0x2b8>)
 8002394:	781b      	ldrb	r3, [r3, #0]
 8002396:	b29b      	uxth	r3, r3
 8002398:	461a      	mov	r2, r3
 800239a:	4928      	ldr	r1, [pc, #160]	; (800243c <DioIrqHndlr+0x2bc>)
 800239c:	480c      	ldr	r0, [pc, #48]	; (80023d0 <DioIrqHndlr+0x250>)
 800239e:	f004 fb39 	bl	8006a14 <HAL_UART_Receive_DMA>

		HAL_UART_Receive_DMA(&hlpuart1, OBC_UART_RX, obc_plen);
 80023a2:	4b25      	ldr	r3, [pc, #148]	; (8002438 <DioIrqHndlr+0x2b8>)
 80023a4:	781b      	ldrb	r3, [r3, #0]
 80023a6:	b29b      	uxth	r3, r3
 80023a8:	461a      	mov	r2, r3
 80023aa:	4924      	ldr	r1, [pc, #144]	; (800243c <DioIrqHndlr+0x2bc>)
 80023ac:	4809      	ldr	r0, [pc, #36]	; (80023d4 <DioIrqHndlr+0x254>)
 80023ae:	f004 fb31 	bl	8006a14 <HAL_UART_Receive_DMA>
 80023b2:	e1a6      	b.n	8002702 <DioIrqHndlr+0x582>
 80023b4:	2000039c 	.word	0x2000039c
 80023b8:	200004d0 	.word	0x200004d0
 80023bc:	0800cbb4 	.word	0x0800cbb4
 80023c0:	20000438 	.word	0x20000438
 80023c4:	0800c564 	.word	0x0800c564
 80023c8:	0800c56c 	.word	0x0800c56c
 80023cc:	0800cbf0 	.word	0x0800cbf0
 80023d0:	20000688 	.word	0x20000688
 80023d4:	20000560 	.word	0x20000560
 80023d8:	200004dc 	.word	0x200004dc
 80023dc:	20000004 	.word	0x20000004
 80023e0:	20000008 	.word	0x20000008
 80023e4:	200004e0 	.word	0x200004e0
 80023e8:	200004d8 	.word	0x200004d8
 80023ec:	200004e4 	.word	0x200004e4
 80023f0:	0800cc28 	.word	0x0800cc28
 80023f4:	0007a120 	.word	0x0007a120
 80023f8:	20000000 	.word	0x20000000
 80023fc:	200002ac 	.word	0x200002ac
 8002400:	0800ca58 	.word	0x0800ca58
 8002404:	19f25968 	.word	0x19f25968
 8002408:	0800ca84 	.word	0x0800ca84
 800240c:	20000290 	.word	0x20000290
 8002410:	0800c628 	.word	0x0800c628
 8002414:	0800c638 	.word	0x0800c638
 8002418:	0800c654 	.word	0x0800c654
 800241c:	2000027c 	.word	0x2000027c
 8002420:	0800c670 	.word	0x0800c670
 8002424:	0800c684 	.word	0x0800c684
 8002428:	0800c69c 	.word	0x0800c69c
 800242c:	0800c6b4 	.word	0x0800c6b4
 8002430:	0800c6cc 	.word	0x0800c6cc
 8002434:	0800c6e0 	.word	0x0800c6e0
 8002438:	20000001 	.word	0x20000001
 800243c:	20000318 	.word	0x20000318

		return;

	}

	if (radioIrq == IRQ_RX_DONE) {
 8002440:	89fb      	ldrh	r3, [r7, #14]
 8002442:	2b02      	cmp	r3, #2
 8002444:	f040 812a 	bne.w	800269c <DioIrqHndlr+0x51c>
		SUBGRF_GetPayload(rx_buffer, &rx_buffer_len, RX_BUFF_LENGTH);
 8002448:	2269      	movs	r2, #105	; 0x69
 800244a:	49b0      	ldr	r1, [pc, #704]	; (800270c <DioIrqHndlr+0x58c>)
 800244c:	48b0      	ldr	r0, [pc, #704]	; (8002710 <DioIrqHndlr+0x590>)
 800244e:	f007 fe3f 	bl	800a0d0 <SUBGRF_GetPayload>
		rssi_value = SUBGRF_GetRssiInst();
 8002452:	f008 fc5e 	bl	800ad12 <SUBGRF_GetRssiInst>
 8002456:	4603      	mov	r3, r0
 8002458:	b2da      	uxtb	r2, r3
 800245a:	4bae      	ldr	r3, [pc, #696]	; (8002714 <DioIrqHndlr+0x594>)
 800245c:	701a      	strb	r2, [r3, #0]
		myDebug("\nGS Command Received: 0x%x\r\n");
 800245e:	48ae      	ldr	r0, [pc, #696]	; (8002718 <DioIrqHndlr+0x598>)
 8002460:	f7fe f974 	bl	800074c <myDebug>

		uint8_t temp_rx_buffer_len = 0;
 8002464:	2300      	movs	r3, #0
 8002466:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
		temp_rx_buffer_len = countsDataBetweenFlags(rx_buffer, rx_buffer_len); // 7e...7e, size
 800246a:	4ba8      	ldr	r3, [pc, #672]	; (800270c <DioIrqHndlr+0x58c>)
 800246c:	781b      	ldrb	r3, [r3, #0]
 800246e:	4619      	mov	r1, r3
 8002470:	48a7      	ldr	r0, [pc, #668]	; (8002710 <DioIrqHndlr+0x590>)
 8002472:	f7fe fc8d 	bl	8000d90 <countsDataBetweenFlags>
 8002476:	4603      	mov	r3, r0
 8002478:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

		if (temp_rx_buffer_len != -1) {
 800247c:	466b      	mov	r3, sp
 800247e:	60bb      	str	r3, [r7, #8]

			uint8_t temp_check_buff[temp_rx_buffer_len];
 8002480:	f897 605b 	ldrb.w	r6, [r7, #91]	; 0x5b
 8002484:	4633      	mov	r3, r6
 8002486:	3b01      	subs	r3, #1
 8002488:	657b      	str	r3, [r7, #84]	; 0x54
 800248a:	b2f3      	uxtb	r3, r6
 800248c:	2200      	movs	r2, #0
 800248e:	603b      	str	r3, [r7, #0]
 8002490:	607a      	str	r2, [r7, #4]
 8002492:	f04f 0200 	mov.w	r2, #0
 8002496:	f04f 0300 	mov.w	r3, #0
 800249a:	6879      	ldr	r1, [r7, #4]
 800249c:	00cb      	lsls	r3, r1, #3
 800249e:	e9d7 0100 	ldrd	r0, r1, [r7]
 80024a2:	4684      	mov	ip, r0
 80024a4:	ea43 735c 	orr.w	r3, r3, ip, lsr #29
 80024a8:	4601      	mov	r1, r0
 80024aa:	00ca      	lsls	r2, r1, #3
 80024ac:	b2f3      	uxtb	r3, r6
 80024ae:	2200      	movs	r2, #0
 80024b0:	469a      	mov	sl, r3
 80024b2:	4693      	mov	fp, r2
 80024b4:	f04f 0200 	mov.w	r2, #0
 80024b8:	f04f 0300 	mov.w	r3, #0
 80024bc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80024c0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80024c4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80024c8:	4633      	mov	r3, r6
 80024ca:	3307      	adds	r3, #7
 80024cc:	08db      	lsrs	r3, r3, #3
 80024ce:	00db      	lsls	r3, r3, #3
 80024d0:	ebad 0d03 	sub.w	sp, sp, r3
 80024d4:	466b      	mov	r3, sp
 80024d6:	3300      	adds	r3, #0
 80024d8:	653b      	str	r3, [r7, #80]	; 0x50
			for (int i = 0; i < temp_rx_buffer_len; i++) {
 80024da:	2300      	movs	r3, #0
 80024dc:	66bb      	str	r3, [r7, #104]	; 0x68
 80024de:	e013      	b.n	8002508 <DioIrqHndlr+0x388>
				temp_check_buff[i] = rx_buffer[i];
 80024e0:	4a8b      	ldr	r2, [pc, #556]	; (8002710 <DioIrqHndlr+0x590>)
 80024e2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80024e4:	4413      	add	r3, r2
 80024e6:	7819      	ldrb	r1, [r3, #0]
 80024e8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80024ea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80024ec:	4413      	add	r3, r2
 80024ee:	460a      	mov	r2, r1
 80024f0:	701a      	strb	r2, [r3, #0]
				myDebug("%02x ", temp_check_buff[i]); //display 7e to 7e
 80024f2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80024f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80024f6:	4413      	add	r3, r2
 80024f8:	781b      	ldrb	r3, [r3, #0]
 80024fa:	4619      	mov	r1, r3
 80024fc:	4887      	ldr	r0, [pc, #540]	; (800271c <DioIrqHndlr+0x59c>)
 80024fe:	f7fe f925 	bl	800074c <myDebug>
			for (int i = 0; i < temp_rx_buffer_len; i++) {
 8002502:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002504:	3301      	adds	r3, #1
 8002506:	66bb      	str	r3, [r7, #104]	; 0x68
 8002508:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800250c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800250e:	429a      	cmp	r2, r3
 8002510:	dbe6      	blt.n	80024e0 <DioIrqHndlr+0x360>
			}
			myDebug("\r\n");
 8002512:	4883      	ldr	r0, [pc, #524]	; (8002720 <DioIrqHndlr+0x5a0>)
 8002514:	f7fe f91a 	bl	800074c <myDebug>

			uint8_t crc_buff_len = temp_rx_buffer_len - 4;
 8002518:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800251c:	3b04      	subs	r3, #4
 800251e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			uint8_t crc_buff[crc_buff_len];
 8002522:	f897 104f 	ldrb.w	r1, [r7, #79]	; 0x4f
 8002526:	460b      	mov	r3, r1
 8002528:	3b01      	subs	r3, #1
 800252a:	64bb      	str	r3, [r7, #72]	; 0x48
 800252c:	b2cb      	uxtb	r3, r1
 800252e:	2200      	movs	r2, #0
 8002530:	4698      	mov	r8, r3
 8002532:	4691      	mov	r9, r2
 8002534:	f04f 0200 	mov.w	r2, #0
 8002538:	f04f 0300 	mov.w	r3, #0
 800253c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002540:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002544:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002548:	b2cb      	uxtb	r3, r1
 800254a:	2200      	movs	r2, #0
 800254c:	461c      	mov	r4, r3
 800254e:	4615      	mov	r5, r2
 8002550:	f04f 0200 	mov.w	r2, #0
 8002554:	f04f 0300 	mov.w	r3, #0
 8002558:	00eb      	lsls	r3, r5, #3
 800255a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800255e:	00e2      	lsls	r2, r4, #3
 8002560:	460b      	mov	r3, r1
 8002562:	3307      	adds	r3, #7
 8002564:	08db      	lsrs	r3, r3, #3
 8002566:	00db      	lsls	r3, r3, #3
 8002568:	ebad 0d03 	sub.w	sp, sp, r3
 800256c:	466b      	mov	r3, sp
 800256e:	3300      	adds	r3, #0
 8002570:	647b      	str	r3, [r7, #68]	; 0x44

			//			myDebug("\nGS Command Testing: 0x%x\r\n");

			int j = 0;
 8002572:	2300      	movs	r3, #0
 8002574:	667b      	str	r3, [r7, #100]	; 0x64
			for (int i = 1; i <= crc_buff_len; i++) {
 8002576:	2301      	movs	r3, #1
 8002578:	663b      	str	r3, [r7, #96]	; 0x60
 800257a:	e00e      	b.n	800259a <DioIrqHndlr+0x41a>
				crc_buff[j] = temp_check_buff[i]; // index 1 to previous byte of crc
 800257c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800257e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002580:	4413      	add	r3, r2
 8002582:	7819      	ldrb	r1, [r3, #0]
 8002584:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002586:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002588:	4413      	add	r3, r2
 800258a:	460a      	mov	r2, r1
 800258c:	701a      	strb	r2, [r3, #0]
				//				myDebug("%02x ", crc_buff[j]);
				j++;
 800258e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002590:	3301      	adds	r3, #1
 8002592:	667b      	str	r3, [r7, #100]	; 0x64
			for (int i = 1; i <= crc_buff_len; i++) {
 8002594:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002596:	3301      	adds	r3, #1
 8002598:	663b      	str	r3, [r7, #96]	; 0x60
 800259a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800259e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80025a0:	429a      	cmp	r2, r3
 80025a2:	ddeb      	ble.n	800257c <DioIrqHndlr+0x3fc>
			}
			myDebug("\r\n");
 80025a4:	485e      	ldr	r0, [pc, #376]	; (8002720 <DioIrqHndlr+0x5a0>)
 80025a6:	f7fe f8d1 	bl	800074c <myDebug>

			uint16_t crc = 0;
 80025aa:	2300      	movs	r3, #0
 80025ac:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
			crc = calculateCRC_CCITT_AX25(crc_buff, crc_buff_len);
 80025b0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80025b4:	4619      	mov	r1, r3
 80025b6:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80025b8:	f7fe f954 	bl	8000864 <calculateCRC_CCITT_AX25>
 80025bc:	4603      	mov	r3, r0
 80025be:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

			uint8_t calc_crc[2];
			calc_crc[0] = (crc >> 8) & 0xFF;
 80025c2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80025c6:	0a1b      	lsrs	r3, r3, #8
 80025c8:	b29b      	uxth	r3, r3
 80025ca:	b2db      	uxtb	r3, r3
 80025cc:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
			calc_crc[1] = crc & 0xFF;
 80025d0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80025d4:	b2db      	uxtb	r3, r3
 80025d6:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

			uint8_t msb_crc = temp_check_buff[temp_rx_buffer_len - 3];
 80025da:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80025de:	3b03      	subs	r3, #3
 80025e0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80025e2:	5cd3      	ldrb	r3, [r2, r3]
 80025e4:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
			uint8_t lsb_crc = temp_check_buff[temp_rx_buffer_len - 2];
 80025e8:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80025ec:	3b02      	subs	r3, #2
 80025ee:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80025f0:	5cd3      	ldrb	r3, [r2, r3]
 80025f2:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40

			if (calc_crc[0] == msb_crc && calc_crc[1] == lsb_crc) {
 80025f6:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80025fa:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 80025fe:	429a      	cmp	r2, r3
 8002600:	d10f      	bne.n	8002622 <DioIrqHndlr+0x4a2>
 8002602:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8002606:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 800260a:	429a      	cmp	r2, r3
 800260c:	d109      	bne.n	8002622 <DioIrqHndlr+0x4a2>
				//				myDebug("GS Command checksum correct: 0x%x\r\n");
				memset(temp_check_buff, '\0', sizeof(temp_check_buff));
 800260e:	4633      	mov	r3, r6
 8002610:	461a      	mov	r2, r3
 8002612:	2100      	movs	r1, #0
 8002614:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8002616:	f009 faed 	bl	800bbf4 <memset>
				RX_FLAG = 1;
 800261a:	4b42      	ldr	r3, [pc, #264]	; (8002724 <DioIrqHndlr+0x5a4>)
 800261c:	2201      	movs	r2, #1
 800261e:	601a      	str	r2, [r3, #0]
 8002620:	e02a      	b.n	8002678 <DioIrqHndlr+0x4f8>

			} else {

				myDebug("\n********GS Command checksum incorrect: 0x%x\r\n");
 8002622:	4841      	ldr	r0, [pc, #260]	; (8002728 <DioIrqHndlr+0x5a8>)
 8002624:	f7fe f892 	bl	800074c <myDebug>

				RX_FLAG = 0;
 8002628:	4b3e      	ldr	r3, [pc, #248]	; (8002724 <DioIrqHndlr+0x5a4>)
 800262a:	2200      	movs	r2, #0
 800262c:	601a      	str	r2, [r3, #0]

				COM_UART_TX[0] = 0x53;	//header
 800262e:	4b3f      	ldr	r3, [pc, #252]	; (800272c <DioIrqHndlr+0x5ac>)
 8002630:	2253      	movs	r2, #83	; 0x53
 8002632:	701a      	strb	r2, [r3, #0]
				COM_UART_TX[1] = 0xac;	//packet_ type
 8002634:	4b3d      	ldr	r3, [pc, #244]	; (800272c <DioIrqHndlr+0x5ac>)
 8002636:	22ac      	movs	r2, #172	; 0xac
 8002638:	705a      	strb	r2, [r3, #1]
				COM_UART_TX[2] = 0x04;	//length of info
 800263a:	4b3c      	ldr	r3, [pc, #240]	; (800272c <DioIrqHndlr+0x5ac>)
 800263c:	2204      	movs	r2, #4
 800263e:	709a      	strb	r2, [r3, #2]
				COM_UART_TX[3] = 0x02;	//mcu_no
 8002640:	4b3a      	ldr	r3, [pc, #232]	; (800272c <DioIrqHndlr+0x5ac>)
 8002642:	2202      	movs	r2, #2
 8002644:	70da      	strb	r2, [r3, #3]
				COM_UART_TX[4] = 0xcc;	//checksum_error
 8002646:	4b39      	ldr	r3, [pc, #228]	; (800272c <DioIrqHndlr+0x5ac>)
 8002648:	22cc      	movs	r2, #204	; 0xcc
 800264a:	711a      	strb	r2, [r3, #4]
				COM_UART_TX[5] = 0xee;	//error prefix
 800264c:	4b37      	ldr	r3, [pc, #220]	; (800272c <DioIrqHndlr+0x5ac>)
 800264e:	22ee      	movs	r2, #238	; 0xee
 8002650:	715a      	strb	r2, [r3, #5]

				for (int i = 6; i < com_uart_tx_p_len; i++) {
 8002652:	2306      	movs	r3, #6
 8002654:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002656:	e007      	b.n	8002668 <DioIrqHndlr+0x4e8>
					COM_UART_TX[i] = 0x00;
 8002658:	4a34      	ldr	r2, [pc, #208]	; (800272c <DioIrqHndlr+0x5ac>)
 800265a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800265c:	4413      	add	r3, r2
 800265e:	2200      	movs	r2, #0
 8002660:	701a      	strb	r2, [r3, #0]
				for (int i = 6; i < com_uart_tx_p_len; i++) {
 8002662:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002664:	3301      	adds	r3, #1
 8002666:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002668:	4b31      	ldr	r3, [pc, #196]	; (8002730 <DioIrqHndlr+0x5b0>)
 800266a:	781b      	ldrb	r3, [r3, #0]
 800266c:	461a      	mov	r2, r3
 800266e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002670:	4293      	cmp	r3, r2
 8002672:	dbf1      	blt.n	8002658 <DioIrqHndlr+0x4d8>
				}

				enableReqPA();
 8002674:	f7fe fb36 	bl	8000ce4 <enableReqPA>
 8002678:	f8d7 d008 	ldr.w	sp, [r7, #8]
			}

			enableReqPA();
		}

		HAL_UART_Receive_DMA(&huart2, OBC_UART_RX, obc_plen);
 800267c:	4b2d      	ldr	r3, [pc, #180]	; (8002734 <DioIrqHndlr+0x5b4>)
 800267e:	781b      	ldrb	r3, [r3, #0]
 8002680:	b29b      	uxth	r3, r3
 8002682:	461a      	mov	r2, r3
 8002684:	492c      	ldr	r1, [pc, #176]	; (8002738 <DioIrqHndlr+0x5b8>)
 8002686:	482d      	ldr	r0, [pc, #180]	; (800273c <DioIrqHndlr+0x5bc>)
 8002688:	f004 f9c4 	bl	8006a14 <HAL_UART_Receive_DMA>

		HAL_UART_Receive_DMA(&hlpuart1, OBC_UART_RX, obc_plen);
 800268c:	4b29      	ldr	r3, [pc, #164]	; (8002734 <DioIrqHndlr+0x5b4>)
 800268e:	781b      	ldrb	r3, [r3, #0]
 8002690:	b29b      	uxth	r3, r3
 8002692:	461a      	mov	r2, r3
 8002694:	4928      	ldr	r1, [pc, #160]	; (8002738 <DioIrqHndlr+0x5b8>)
 8002696:	482a      	ldr	r0, [pc, #168]	; (8002740 <DioIrqHndlr+0x5c0>)
 8002698:	f004 f9bc 	bl	8006a14 <HAL_UART_Receive_DMA>

	}

	if (radioIrq == IRQ_RX_TX_TIMEOUT) {
 800269c:	89fb      	ldrh	r3, [r7, #14]
 800269e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80026a2:	d12e      	bne.n	8002702 <DioIrqHndlr+0x582>

		setPacketParams(rx_buffer_len);
 80026a4:	4b19      	ldr	r3, [pc, #100]	; (800270c <DioIrqHndlr+0x58c>)
 80026a6:	781b      	ldrb	r3, [r3, #0]
 80026a8:	4618      	mov	r0, r3
 80026aa:	f7fe fba7 	bl	8000dfc <setPacketParams>
		setModulationParams(GFSK_BR_1200, GFSK_FDEV_1200);
 80026ae:	f640 31b8 	movw	r1, #3000	; 0xbb8
 80026b2:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 80026b6:	f7fe fbcb 	bl	8000e50 <setModulationParams>
		radioConfig(rx_buffer, rx_buffer_len);
 80026ba:	4b14      	ldr	r3, [pc, #80]	; (800270c <DioIrqHndlr+0x58c>)
 80026bc:	781b      	ldrb	r3, [r3, #0]
 80026be:	4619      	mov	r1, r3
 80026c0:	4813      	ldr	r0, [pc, #76]	; (8002710 <DioIrqHndlr+0x590>)
 80026c2:	f7fe fbe3 	bl	8000e8c <radioConfig>

		myDebug("\n########## RX TX TIMEOUT ##########\n");
 80026c6:	481f      	ldr	r0, [pc, #124]	; (8002744 <DioIrqHndlr+0x5c4>)
 80026c8:	f7fe f840 	bl	800074c <myDebug>

		SUBGRF_SetRfFrequency(FREQ_435_MHZ);
 80026cc:	481e      	ldr	r0, [pc, #120]	; (8002748 <DioIrqHndlr+0x5c8>)
 80026ce:	f008 f85f 	bl	800a790 <SUBGRF_SetRfFrequency>
		SUBGRF_SetSwitch(RFO_LP, RFSWITCH_RX); /*Set RF switch*/
 80026d2:	2100      	movs	r1, #0
 80026d4:	2001      	movs	r0, #1
 80026d6:	f008 fca3 	bl	800b020 <SUBGRF_SetSwitch>
		SUBGRF_SetRxBoosted(0xFFFFFF);
 80026da:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80026de:	f007 fe83 	bl	800a3e8 <SUBGRF_SetRxBoosted>

		HAL_UART_Receive_DMA(&huart2, OBC_UART_RX, obc_plen);
 80026e2:	4b14      	ldr	r3, [pc, #80]	; (8002734 <DioIrqHndlr+0x5b4>)
 80026e4:	781b      	ldrb	r3, [r3, #0]
 80026e6:	b29b      	uxth	r3, r3
 80026e8:	461a      	mov	r2, r3
 80026ea:	4913      	ldr	r1, [pc, #76]	; (8002738 <DioIrqHndlr+0x5b8>)
 80026ec:	4813      	ldr	r0, [pc, #76]	; (800273c <DioIrqHndlr+0x5bc>)
 80026ee:	f004 f991 	bl	8006a14 <HAL_UART_Receive_DMA>

		HAL_UART_Receive_DMA(&hlpuart1, OBC_UART_RX, obc_plen);
 80026f2:	4b10      	ldr	r3, [pc, #64]	; (8002734 <DioIrqHndlr+0x5b4>)
 80026f4:	781b      	ldrb	r3, [r3, #0]
 80026f6:	b29b      	uxth	r3, r3
 80026f8:	461a      	mov	r2, r3
 80026fa:	490f      	ldr	r1, [pc, #60]	; (8002738 <DioIrqHndlr+0x5b8>)
 80026fc:	4810      	ldr	r0, [pc, #64]	; (8002740 <DioIrqHndlr+0x5c0>)
 80026fe:	f004 f989 	bl	8006a14 <HAL_UART_Receive_DMA>
	}

}
 8002702:	377c      	adds	r7, #124	; 0x7c
 8002704:	46bd      	mov	sp, r7
 8002706:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800270a:	bf00      	nop
 800270c:	20000000 	.word	0x20000000
 8002710:	200002ac 	.word	0x200002ac
 8002714:	20000315 	.word	0x20000315
 8002718:	0800cc60 	.word	0x0800cc60
 800271c:	0800c564 	.word	0x0800c564
 8002720:	0800c56c 	.word	0x0800c56c
 8002724:	200004ec 	.word	0x200004ec
 8002728:	0800cc80 	.word	0x0800cc80
 800272c:	20000370 	.word	0x20000370
 8002730:	20000002 	.word	0x20000002
 8002734:	20000001 	.word	0x20000001
 8002738:	20000318 	.word	0x20000318
 800273c:	20000688 	.word	0x20000688
 8002740:	20000560 	.word	0x20000560
 8002744:	0800ccb0 	.word	0x0800ccb0
 8002748:	19f25968 	.word	0x19f25968

0800274c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800274c:	b480      	push	{r7}
 800274e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002750:	b672      	cpsid	i
}
 8002752:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002754:	e7fe      	b.n	8002754 <Error_Handler+0x8>
	...

08002758 <WAIT_FOR_HANDSHAKE>:
#define ACK_LENGTH	(7)

extern uint8_t OBC_HANDSHAKE_FLAG;
uint8_t MainCMDHs[ACK_LENGTH];

void WAIT_FOR_HANDSHAKE() {
 8002758:	b580      	push	{r7, lr}
 800275a:	b086      	sub	sp, #24
 800275c:	af00      	add	r7, sp, #0

	memset(MainCMDHs, '\0', ACK_LENGTH);
 800275e:	2207      	movs	r2, #7
 8002760:	2100      	movs	r1, #0
 8002762:	486c      	ldr	r0, [pc, #432]	; (8002914 <WAIT_FOR_HANDSHAKE+0x1bc>)
 8002764:	f009 fa46 	bl	800bbf4 <memset>
	OBC_HANDSHAKE_FLAG = 0;
 8002768:	4b6b      	ldr	r3, [pc, #428]	; (8002918 <WAIT_FOR_HANDSHAKE+0x1c0>)
 800276a:	2200      	movs	r2, #0
 800276c:	701a      	strb	r2, [r3, #0]
	if (HAL_UART_Receive(&huart2, MainCMDHs, ACK_LENGTH, 7000) == HAL_OK
 800276e:	f641 3358 	movw	r3, #7000	; 0x1b58
 8002772:	2207      	movs	r2, #7
 8002774:	4967      	ldr	r1, [pc, #412]	; (8002914 <WAIT_FOR_HANDSHAKE+0x1bc>)
 8002776:	4869      	ldr	r0, [pc, #420]	; (800291c <WAIT_FOR_HANDSHAKE+0x1c4>)
 8002778:	f004 f887 	bl	800688a <HAL_UART_Receive>
 800277c:	4603      	mov	r3, r0
 800277e:	2b00      	cmp	r3, #0
 8002780:	d00a      	beq.n	8002798 <WAIT_FOR_HANDSHAKE+0x40>
			|| HAL_UART_Receive(&hlpuart1, MainCMDHs, ACK_LENGTH, 7000)
 8002782:	f641 3358 	movw	r3, #7000	; 0x1b58
 8002786:	2207      	movs	r2, #7
 8002788:	4962      	ldr	r1, [pc, #392]	; (8002914 <WAIT_FOR_HANDSHAKE+0x1bc>)
 800278a:	4865      	ldr	r0, [pc, #404]	; (8002920 <WAIT_FOR_HANDSHAKE+0x1c8>)
 800278c:	f004 f87d 	bl	800688a <HAL_UART_Receive>
 8002790:	4603      	mov	r3, r0
 8002792:	2b00      	cmp	r3, #0
 8002794:	f040 80aa 	bne.w	80028ec <WAIT_FOR_HANDSHAKE+0x194>
					== HAL_OK) {
		myDebug("--> Handshake command received from OBC: 0x%x\r\n");
 8002798:	4862      	ldr	r0, [pc, #392]	; (8002924 <WAIT_FOR_HANDSHAKE+0x1cc>)
 800279a:	f7fd ffd7 	bl	800074c <myDebug>
		for (int i = 0; i < (ACK_LENGTH); i++) {
 800279e:	2300      	movs	r3, #0
 80027a0:	617b      	str	r3, [r7, #20]
 80027a2:	e00a      	b.n	80027ba <WAIT_FOR_HANDSHAKE+0x62>
			myDebug("%02x ", MainCMDHs[i]);
 80027a4:	4a5b      	ldr	r2, [pc, #364]	; (8002914 <WAIT_FOR_HANDSHAKE+0x1bc>)
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	4413      	add	r3, r2
 80027aa:	781b      	ldrb	r3, [r3, #0]
 80027ac:	4619      	mov	r1, r3
 80027ae:	485e      	ldr	r0, [pc, #376]	; (8002928 <WAIT_FOR_HANDSHAKE+0x1d0>)
 80027b0:	f7fd ffcc 	bl	800074c <myDebug>
		for (int i = 0; i < (ACK_LENGTH); i++) {
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	3301      	adds	r3, #1
 80027b8:	617b      	str	r3, [r7, #20]
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	2b06      	cmp	r3, #6
 80027be:	ddf1      	ble.n	80027a4 <WAIT_FOR_HANDSHAKE+0x4c>
		}
		myDebug("\n");
 80027c0:	485a      	ldr	r0, [pc, #360]	; (800292c <WAIT_FOR_HANDSHAKE+0x1d4>)
 80027c2:	f7fd ffc3 	bl	800074c <myDebug>

		uint8_t header = 0x00;
 80027c6:	2300      	movs	r3, #0
 80027c8:	71fb      	strb	r3, [r7, #7]

		if (MainCMDHs[0] == header) {
 80027ca:	4b52      	ldr	r3, [pc, #328]	; (8002914 <WAIT_FOR_HANDSHAKE+0x1bc>)
 80027cc:	781b      	ldrb	r3, [r3, #0]
 80027ce:	79fa      	ldrb	r2, [r7, #7]
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d111      	bne.n	80027f8 <WAIT_FOR_HANDSHAKE+0xa0>

			for (int loop1 = 0; loop1 < sizeof(MainCMDHs); loop1++) {
 80027d4:	2300      	movs	r3, #0
 80027d6:	613b      	str	r3, [r7, #16]
 80027d8:	e00b      	b.n	80027f2 <WAIT_FOR_HANDSHAKE+0x9a>
				MainCMDHs[loop1] = MainCMDHs[loop1 + 1];
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	3301      	adds	r3, #1
 80027de:	4a4d      	ldr	r2, [pc, #308]	; (8002914 <WAIT_FOR_HANDSHAKE+0x1bc>)
 80027e0:	5cd1      	ldrb	r1, [r2, r3]
 80027e2:	4a4c      	ldr	r2, [pc, #304]	; (8002914 <WAIT_FOR_HANDSHAKE+0x1bc>)
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	4413      	add	r3, r2
 80027e8:	460a      	mov	r2, r1
 80027ea:	701a      	strb	r2, [r3, #0]
			for (int loop1 = 0; loop1 < sizeof(MainCMDHs); loop1++) {
 80027ec:	693b      	ldr	r3, [r7, #16]
 80027ee:	3301      	adds	r3, #1
 80027f0:	613b      	str	r3, [r7, #16]
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	2b06      	cmp	r3, #6
 80027f6:	d9f0      	bls.n	80027da <WAIT_FOR_HANDSHAKE+0x82>
			}
		}

		if (MainCMDHs[0] == ACK_HEAD && MainCMDHs[5] == ACK_TAIL) {
 80027f8:	4b46      	ldr	r3, [pc, #280]	; (8002914 <WAIT_FOR_HANDSHAKE+0x1bc>)
 80027fa:	781b      	ldrb	r3, [r3, #0]
 80027fc:	2b53      	cmp	r3, #83	; 0x53
 80027fe:	d13a      	bne.n	8002876 <WAIT_FOR_HANDSHAKE+0x11e>
 8002800:	4b44      	ldr	r3, [pc, #272]	; (8002914 <WAIT_FOR_HANDSHAKE+0x1bc>)
 8002802:	795b      	ldrb	r3, [r3, #5]
 8002804:	2b7e      	cmp	r3, #126	; 0x7e
 8002806:	d136      	bne.n	8002876 <WAIT_FOR_HANDSHAKE+0x11e>
			myDebug("--> Command Acknowledged successful!\n");
 8002808:	4849      	ldr	r0, [pc, #292]	; (8002930 <WAIT_FOR_HANDSHAKE+0x1d8>)
 800280a:	f7fd ff9f 	bl	800074c <myDebug>
			if (HAL_UART_Transmit(&huart2, MainCMDHs, ACK_LENGTH, 2000)
 800280e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002812:	2207      	movs	r2, #7
 8002814:	493f      	ldr	r1, [pc, #252]	; (8002914 <WAIT_FOR_HANDSHAKE+0x1bc>)
 8002816:	4841      	ldr	r0, [pc, #260]	; (800291c <WAIT_FOR_HANDSHAKE+0x1c4>)
 8002818:	f003 ffb1 	bl	800677e <HAL_UART_Transmit>
 800281c:	4603      	mov	r3, r0
 800281e:	2b00      	cmp	r3, #0
 8002820:	d009      	beq.n	8002836 <WAIT_FOR_HANDSHAKE+0xde>
					== HAL_OK
					|| HAL_UART_Transmit(&hlpuart1, MainCMDHs, ACK_LENGTH, 2000)
 8002822:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002826:	2207      	movs	r2, #7
 8002828:	493a      	ldr	r1, [pc, #232]	; (8002914 <WAIT_FOR_HANDSHAKE+0x1bc>)
 800282a:	483d      	ldr	r0, [pc, #244]	; (8002920 <WAIT_FOR_HANDSHAKE+0x1c8>)
 800282c:	f003 ffa7 	bl	800677e <HAL_UART_Transmit>
 8002830:	4603      	mov	r3, r0
 8002832:	2b00      	cmp	r3, #0
 8002834:	d158      	bne.n	80028e8 <WAIT_FOR_HANDSHAKE+0x190>
							== HAL_OK) {
				myDebug("--> Handshake ACK, re-transmit to OBC: \n");
 8002836:	483f      	ldr	r0, [pc, #252]	; (8002934 <WAIT_FOR_HANDSHAKE+0x1dc>)
 8002838:	f7fd ff88 	bl	800074c <myDebug>
				for (int i = 0; i < (ACK_LENGTH); i++) {
 800283c:	2300      	movs	r3, #0
 800283e:	60fb      	str	r3, [r7, #12]
 8002840:	e00a      	b.n	8002858 <WAIT_FOR_HANDSHAKE+0x100>
					myDebug("%02x ", MainCMDHs[i]);
 8002842:	4a34      	ldr	r2, [pc, #208]	; (8002914 <WAIT_FOR_HANDSHAKE+0x1bc>)
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	4413      	add	r3, r2
 8002848:	781b      	ldrb	r3, [r3, #0]
 800284a:	4619      	mov	r1, r3
 800284c:	4836      	ldr	r0, [pc, #216]	; (8002928 <WAIT_FOR_HANDSHAKE+0x1d0>)
 800284e:	f7fd ff7d 	bl	800074c <myDebug>
				for (int i = 0; i < (ACK_LENGTH); i++) {
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	3301      	adds	r3, #1
 8002856:	60fb      	str	r3, [r7, #12]
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	2b06      	cmp	r3, #6
 800285c:	ddf1      	ble.n	8002842 <WAIT_FOR_HANDSHAKE+0xea>
				}
				myDebug("\n");
 800285e:	4833      	ldr	r0, [pc, #204]	; (800292c <WAIT_FOR_HANDSHAKE+0x1d4>)
 8002860:	f7fd ff74 	bl	800074c <myDebug>
				OBC_HANDSHAKE_FLAG = 1;
 8002864:	4b2c      	ldr	r3, [pc, #176]	; (8002918 <WAIT_FOR_HANDSHAKE+0x1c0>)
 8002866:	2201      	movs	r2, #1
 8002868:	701a      	strb	r2, [r3, #0]
				memset(MainCMDHs, '\0', ACK_LENGTH);
 800286a:	2207      	movs	r2, #7
 800286c:	2100      	movs	r1, #0
 800286e:	4829      	ldr	r0, [pc, #164]	; (8002914 <WAIT_FOR_HANDSHAKE+0x1bc>)
 8002870:	f009 f9c0 	bl	800bbf4 <memset>
			if (HAL_UART_Transmit(&huart2, MainCMDHs, ACK_LENGTH, 2000)
 8002874:	e038      	b.n	80028e8 <WAIT_FOR_HANDSHAKE+0x190>
			}
		} else {
			myDebug("*** Unknown Handshake command received!\n");
 8002876:	4830      	ldr	r0, [pc, #192]	; (8002938 <WAIT_FOR_HANDSHAKE+0x1e0>)
 8002878:	f7fd ff68 	bl	800074c <myDebug>
			if (HAL_UART_Transmit(&huart2, MainCMDHs, ACK_LENGTH, 2000)
 800287c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002880:	2207      	movs	r2, #7
 8002882:	4924      	ldr	r1, [pc, #144]	; (8002914 <WAIT_FOR_HANDSHAKE+0x1bc>)
 8002884:	4825      	ldr	r0, [pc, #148]	; (800291c <WAIT_FOR_HANDSHAKE+0x1c4>)
 8002886:	f003 ff7a 	bl	800677e <HAL_UART_Transmit>
 800288a:	4603      	mov	r3, r0
 800288c:	2b00      	cmp	r3, #0
 800288e:	d009      	beq.n	80028a4 <WAIT_FOR_HANDSHAKE+0x14c>
					== HAL_OK
					|| HAL_UART_Transmit(&hlpuart1, MainCMDHs, ACK_LENGTH, 7000)
 8002890:	f641 3358 	movw	r3, #7000	; 0x1b58
 8002894:	2207      	movs	r2, #7
 8002896:	491f      	ldr	r1, [pc, #124]	; (8002914 <WAIT_FOR_HANDSHAKE+0x1bc>)
 8002898:	4821      	ldr	r0, [pc, #132]	; (8002920 <WAIT_FOR_HANDSHAKE+0x1c8>)
 800289a:	f003 ff70 	bl	800677e <HAL_UART_Transmit>
 800289e:	4603      	mov	r3, r0
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d131      	bne.n	8002908 <WAIT_FOR_HANDSHAKE+0x1b0>
							== HAL_OK) {
				myDebug("--> Unknown Handshake ACK, re-transmit to OBC.\n");
 80028a4:	4825      	ldr	r0, [pc, #148]	; (800293c <WAIT_FOR_HANDSHAKE+0x1e4>)
 80028a6:	f7fd ff51 	bl	800074c <myDebug>
				for (int i = 0; i < (ACK_LENGTH); i++) {
 80028aa:	2300      	movs	r3, #0
 80028ac:	60bb      	str	r3, [r7, #8]
 80028ae:	e00a      	b.n	80028c6 <WAIT_FOR_HANDSHAKE+0x16e>
					myDebug("%02x ", MainCMDHs[i]);
 80028b0:	4a18      	ldr	r2, [pc, #96]	; (8002914 <WAIT_FOR_HANDSHAKE+0x1bc>)
 80028b2:	68bb      	ldr	r3, [r7, #8]
 80028b4:	4413      	add	r3, r2
 80028b6:	781b      	ldrb	r3, [r3, #0]
 80028b8:	4619      	mov	r1, r3
 80028ba:	481b      	ldr	r0, [pc, #108]	; (8002928 <WAIT_FOR_HANDSHAKE+0x1d0>)
 80028bc:	f7fd ff46 	bl	800074c <myDebug>
				for (int i = 0; i < (ACK_LENGTH); i++) {
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	3301      	adds	r3, #1
 80028c4:	60bb      	str	r3, [r7, #8]
 80028c6:	68bb      	ldr	r3, [r7, #8]
 80028c8:	2b06      	cmp	r3, #6
 80028ca:	ddf1      	ble.n	80028b0 <WAIT_FOR_HANDSHAKE+0x158>
				}
				myDebug("\n");
 80028cc:	4817      	ldr	r0, [pc, #92]	; (800292c <WAIT_FOR_HANDSHAKE+0x1d4>)
 80028ce:	f7fd ff3d 	bl	800074c <myDebug>
				memset(MainCMDHs, '\0', ACK_LENGTH);
 80028d2:	2207      	movs	r2, #7
 80028d4:	2100      	movs	r1, #0
 80028d6:	480f      	ldr	r0, [pc, #60]	; (8002914 <WAIT_FOR_HANDSHAKE+0x1bc>)
 80028d8:	f009 f98c 	bl	800bbf4 <memset>
				OBC_HANDSHAKE_FLAG = 0;
 80028dc:	4b0e      	ldr	r3, [pc, #56]	; (8002918 <WAIT_FOR_HANDSHAKE+0x1c0>)
 80028de:	2200      	movs	r2, #0
 80028e0:	701a      	strb	r2, [r3, #0]
				WAIT_FOR_HANDSHAKE();
 80028e2:	f7ff ff39 	bl	8002758 <WAIT_FOR_HANDSHAKE>
					== HAL_OK) {
 80028e6:	e00f      	b.n	8002908 <WAIT_FOR_HANDSHAKE+0x1b0>
			if (HAL_UART_Transmit(&huart2, MainCMDHs, ACK_LENGTH, 2000)
 80028e8:	bf00      	nop
					== HAL_OK) {
 80028ea:	e00d      	b.n	8002908 <WAIT_FOR_HANDSHAKE+0x1b0>
			}
		}
	} else {
		OBC_HANDSHAKE_FLAG = 0;
 80028ec:	4b0a      	ldr	r3, [pc, #40]	; (8002918 <WAIT_FOR_HANDSHAKE+0x1c0>)
 80028ee:	2200      	movs	r2, #0
 80028f0:	701a      	strb	r2, [r3, #0]
		myDebug("*** Handshake Command receive failed, try again!\n");
 80028f2:	4813      	ldr	r0, [pc, #76]	; (8002940 <WAIT_FOR_HANDSHAKE+0x1e8>)
 80028f4:	f7fd ff2a 	bl	800074c <myDebug>
		memset(MainCMDHs, '\0', ACK_LENGTH);
 80028f8:	2207      	movs	r2, #7
 80028fa:	2100      	movs	r1, #0
 80028fc:	4805      	ldr	r0, [pc, #20]	; (8002914 <WAIT_FOR_HANDSHAKE+0x1bc>)
 80028fe:	f009 f979 	bl	800bbf4 <memset>
		WAIT_FOR_HANDSHAKE();
 8002902:	f7ff ff29 	bl	8002758 <WAIT_FOR_HANDSHAKE>
	}
}
 8002906:	e000      	b.n	800290a <WAIT_FOR_HANDSHAKE+0x1b2>
					== HAL_OK) {
 8002908:	bf00      	nop
}
 800290a:	bf00      	nop
 800290c:	3718      	adds	r7, #24
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}
 8002912:	bf00      	nop
 8002914:	200004f4 	.word	0x200004f4
 8002918:	200004d4 	.word	0x200004d4
 800291c:	20000688 	.word	0x20000688
 8002920:	20000560 	.word	0x20000560
 8002924:	0800ccd8 	.word	0x0800ccd8
 8002928:	0800cd08 	.word	0x0800cd08
 800292c:	0800cd10 	.word	0x0800cd10
 8002930:	0800cd14 	.word	0x0800cd14
 8002934:	0800cd3c 	.word	0x0800cd3c
 8002938:	0800cd68 	.word	0x0800cd68
 800293c:	0800cd94 	.word	0x0800cd94
 8002940:	0800cdc4 	.word	0x0800cdc4

08002944 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002944:	b480      	push	{r7}
 8002946:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002948:	bf00      	nop
 800294a:	46bd      	mov	sp, r7
 800294c:	bc80      	pop	{r7}
 800294e:	4770      	bx	lr

08002950 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002950:	b480      	push	{r7}
 8002952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002954:	e7fe      	b.n	8002954 <NMI_Handler+0x4>

08002956 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002956:	b480      	push	{r7}
 8002958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800295a:	e7fe      	b.n	800295a <HardFault_Handler+0x4>

0800295c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800295c:	b480      	push	{r7}
 800295e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002960:	e7fe      	b.n	8002960 <MemManage_Handler+0x4>

08002962 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002962:	b480      	push	{r7}
 8002964:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002966:	e7fe      	b.n	8002966 <BusFault_Handler+0x4>

08002968 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002968:	b480      	push	{r7}
 800296a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800296c:	e7fe      	b.n	800296c <UsageFault_Handler+0x4>

0800296e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800296e:	b480      	push	{r7}
 8002970:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002972:	bf00      	nop
 8002974:	46bd      	mov	sp, r7
 8002976:	bc80      	pop	{r7}
 8002978:	4770      	bx	lr

0800297a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800297a:	b480      	push	{r7}
 800297c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800297e:	bf00      	nop
 8002980:	46bd      	mov	sp, r7
 8002982:	bc80      	pop	{r7}
 8002984:	4770      	bx	lr

08002986 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002986:	b480      	push	{r7}
 8002988:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800298a:	bf00      	nop
 800298c:	46bd      	mov	sp, r7
 800298e:	bc80      	pop	{r7}
 8002990:	4770      	bx	lr

08002992 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002992:	b580      	push	{r7, lr}
 8002994:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002996:	f000 fdc3 	bl	8003520 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800299a:	bf00      	nop
 800299c:	bd80      	pop	{r7, pc}
	...

080029a0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 1 Interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 80029a4:	4802      	ldr	r0, [pc, #8]	; (80029b0 <DMA1_Channel1_IRQHandler+0x10>)
 80029a6:	f001 f8bd 	bl	8003b24 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80029aa:	bf00      	nop
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	bf00      	nop
 80029b0:	2000071c 	.word	0x2000071c

080029b4 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 2 Interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 80029b8:	4802      	ldr	r0, [pc, #8]	; (80029c4 <DMA1_Channel2_IRQHandler+0x10>)
 80029ba:	f001 f8b3 	bl	8003b24 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80029be:	bf00      	nop
 80029c0:	bd80      	pop	{r7, pc}
 80029c2:	bf00      	nop
 80029c4:	2000077c 	.word	0x2000077c

080029c8 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 3 Interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80029cc:	4802      	ldr	r0, [pc, #8]	; (80029d8 <DMA1_Channel3_IRQHandler+0x10>)
 80029ce:	f001 f8a9 	bl	8003b24 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80029d2:	bf00      	nop
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	200007dc 	.word	0x200007dc

080029dc <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 4 Interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80029e0:	4802      	ldr	r0, [pc, #8]	; (80029ec <DMA1_Channel4_IRQHandler+0x10>)
 80029e2:	f001 f89f 	bl	8003b24 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80029e6:	bf00      	nop
 80029e8:	bd80      	pop	{r7, pc}
 80029ea:	bf00      	nop
 80029ec:	2000083c 	.word	0x2000083c

080029f0 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 5 Interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80029f4:	4802      	ldr	r0, [pc, #8]	; (8002a00 <DMA1_Channel5_IRQHandler+0x10>)
 80029f6:	f001 f895 	bl	8003b24 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80029fa:	bf00      	nop
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	bf00      	nop
 8002a00:	2000089c 	.word	0x2000089c

08002a04 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 6 Interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002a08:	4802      	ldr	r0, [pc, #8]	; (8002a14 <DMA1_Channel6_IRQHandler+0x10>)
 8002a0a:	f001 f88b 	bl	8003b24 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8002a0e:	bf00      	nop
 8002a10:	bd80      	pop	{r7, pc}
 8002a12:	bf00      	nop
 8002a14:	200008fc 	.word	0x200008fc

08002a18 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 Interrupt.
  */
void USART1_IRQHandler(void)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002a1c:	4802      	ldr	r0, [pc, #8]	; (8002a28 <USART1_IRQHandler+0x10>)
 8002a1e:	f004 f845 	bl	8006aac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002a22:	bf00      	nop
 8002a24:	bd80      	pop	{r7, pc}
 8002a26:	bf00      	nop
 8002a28:	200005f4 	.word	0x200005f4

08002a2c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002a30:	4802      	ldr	r0, [pc, #8]	; (8002a3c <USART2_IRQHandler+0x10>)
 8002a32:	f004 f83b 	bl	8006aac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002a36:	bf00      	nop
 8002a38:	bd80      	pop	{r7, pc}
 8002a3a:	bf00      	nop
 8002a3c:	20000688 	.word	0x20000688

08002a40 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 Interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8002a44:	4802      	ldr	r0, [pc, #8]	; (8002a50 <LPUART1_IRQHandler+0x10>)
 8002a46:	f004 f831 	bl	8006aac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8002a4a:	bf00      	nop
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	20000560 	.word	0x20000560

08002a54 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 8002a58:	4802      	ldr	r0, [pc, #8]	; (8002a64 <SUBGHZ_Radio_IRQHandler+0x10>)
 8002a5a:	f003 f9c3 	bl	8005de4 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 8002a5e:	bf00      	nop
 8002a60:	bd80      	pop	{r7, pc}
 8002a62:	bf00      	nop
 8002a64:	200004fc 	.word	0x200004fc

08002a68 <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b085      	sub	sp, #20
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 8002a70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a74:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002a76:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	664b      	str	r3, [r1, #100]	; 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 8002a80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a84:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	4013      	ands	r3, r2
 8002a8a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
}
 8002a8e:	bf00      	nop
 8002a90:	3714      	adds	r7, #20
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bc80      	pop	{r7}
 8002a96:	4770      	bx	lr

08002a98 <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 8002a9c:	4b06      	ldr	r3, [pc, #24]	; (8002ab8 <MX_SUBGHZ_Init+0x20>)
 8002a9e:	2208      	movs	r2, #8
 8002aa0:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 8002aa2:	4805      	ldr	r0, [pc, #20]	; (8002ab8 <MX_SUBGHZ_Init+0x20>)
 8002aa4:	f002 ff1c 	bl	80058e0 <HAL_SUBGHZ_Init>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d001      	beq.n	8002ab2 <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 8002aae:	f7ff fe4d 	bl	800274c <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 8002ab2:	bf00      	nop
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	bf00      	nop
 8002ab8:	200004fc 	.word	0x200004fc

08002abc <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b082      	sub	sp, #8
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 8002ac4:	2001      	movs	r0, #1
 8002ac6:	f7ff ffcf 	bl	8002a68 <LL_APB3_GRP1_EnableClock>

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 8002aca:	2200      	movs	r2, #0
 8002acc:	2100      	movs	r1, #0
 8002ace:	2032      	movs	r0, #50	; 0x32
 8002ad0:	f000 fe0f 	bl	80036f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 8002ad4:	2032      	movs	r0, #50	; 0x32
 8002ad6:	f000 fe26 	bl	8003726 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 8002ada:	bf00      	nop
 8002adc:	3708      	adds	r7, #8
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}

08002ae2 <SystemApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SystemApp_Init(void)
{
 8002ae2:	b480      	push	{r7}
 8002ae4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SystemApp_Init_1 */

  /* USER CODE END SystemApp_Init_1 */

}
 8002ae6:	bf00      	nop
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bc80      	pop	{r7}
 8002aec:	4770      	bx	lr
	...

08002af0 <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b082      	sub	sp, #8
 8002af4:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002af6:	2300      	movs	r3, #0
 8002af8:	607b      	str	r3, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  if (SYS_TimerInitialisedFlag == 0)
 8002afa:	4b06      	ldr	r3, [pc, #24]	; (8002b14 <HAL_GetTick+0x24>)
 8002afc:	781b      	ldrb	r3, [r3, #0]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d002      	beq.n	8002b08 <HAL_GetTick+0x18>

    /* USER CODE END HAL_GetTick_EarlyCall */
  }
  else
  {
    ret = TIMER_IF_GetTimerValue();
 8002b02:	f000 f908 	bl	8002d16 <TIMER_IF_GetTimerValue>
 8002b06:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
  return ret;
 8002b08:	687b      	ldr	r3, [r7, #4]
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	3708      	adds	r7, #8
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	bf00      	nop
 8002b14:	20000508 	.word	0x20000508

08002b18 <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b082      	sub	sp, #8
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	4618      	mov	r0, r3
 8002b24:	f000 f925 	bl	8002d72 <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 8002b28:	bf00      	nop
 8002b2a:	3708      	adds	r7, #8
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}

08002b30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b086      	sub	sp, #24
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b38:	4a14      	ldr	r2, [pc, #80]	; (8002b8c <_sbrk+0x5c>)
 8002b3a:	4b15      	ldr	r3, [pc, #84]	; (8002b90 <_sbrk+0x60>)
 8002b3c:	1ad3      	subs	r3, r2, r3
 8002b3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b44:	4b13      	ldr	r3, [pc, #76]	; (8002b94 <_sbrk+0x64>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d102      	bne.n	8002b52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b4c:	4b11      	ldr	r3, [pc, #68]	; (8002b94 <_sbrk+0x64>)
 8002b4e:	4a12      	ldr	r2, [pc, #72]	; (8002b98 <_sbrk+0x68>)
 8002b50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b52:	4b10      	ldr	r3, [pc, #64]	; (8002b94 <_sbrk+0x64>)
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	4413      	add	r3, r2
 8002b5a:	693a      	ldr	r2, [r7, #16]
 8002b5c:	429a      	cmp	r2, r3
 8002b5e:	d207      	bcs.n	8002b70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002b60:	f009 f850 	bl	800bc04 <__errno>
 8002b64:	4603      	mov	r3, r0
 8002b66:	220c      	movs	r2, #12
 8002b68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002b6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002b6e:	e009      	b.n	8002b84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002b70:	4b08      	ldr	r3, [pc, #32]	; (8002b94 <_sbrk+0x64>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002b76:	4b07      	ldr	r3, [pc, #28]	; (8002b94 <_sbrk+0x64>)
 8002b78:	681a      	ldr	r2, [r3, #0]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	4413      	add	r3, r2
 8002b7e:	4a05      	ldr	r2, [pc, #20]	; (8002b94 <_sbrk+0x64>)
 8002b80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002b82:	68fb      	ldr	r3, [r7, #12]
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	3718      	adds	r7, #24
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}
 8002b8c:	20010000 	.word	0x20010000
 8002b90:	00000400 	.word	0x00000400
 8002b94:	2000050c 	.word	0x2000050c
 8002b98:	20000c68 	.word	0x20000c68

08002b9c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8002ba0:	bf00      	nop
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bc80      	pop	{r7}
 8002ba6:	4770      	bx	lr

08002ba8 <LL_APB1_GRP1_EnableClock>:
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b085      	sub	sp, #20
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002bb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bb4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002bb6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002bc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bc4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	4013      	ands	r3, r2
 8002bca:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
}
 8002bce:	bf00      	nop
 8002bd0:	3714      	adds	r7, #20
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bc80      	pop	{r7}
 8002bd6:	4770      	bx	lr

08002bd8 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b088      	sub	sp, #32
 8002bdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002bde:	f107 0310 	add.w	r3, r7, #16
 8002be2:	2200      	movs	r2, #0
 8002be4:	601a      	str	r2, [r3, #0]
 8002be6:	605a      	str	r2, [r3, #4]
 8002be8:	609a      	str	r2, [r3, #8]
 8002bea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002bec:	1d3b      	adds	r3, r7, #4
 8002bee:	2200      	movs	r2, #0
 8002bf0:	601a      	str	r2, [r3, #0]
 8002bf2:	605a      	str	r2, [r3, #4]
 8002bf4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002bf6:	4b1d      	ldr	r3, [pc, #116]	; (8002c6c <MX_TIM2_Init+0x94>)
 8002bf8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002bfc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 48-1;
 8002bfe:	4b1b      	ldr	r3, [pc, #108]	; (8002c6c <MX_TIM2_Init+0x94>)
 8002c00:	222f      	movs	r2, #47	; 0x2f
 8002c02:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c04:	4b19      	ldr	r3, [pc, #100]	; (8002c6c <MX_TIM2_Init+0x94>)
 8002c06:	2200      	movs	r2, #0
 8002c08:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000001-1;
 8002c0a:	4b18      	ldr	r3, [pc, #96]	; (8002c6c <MX_TIM2_Init+0x94>)
 8002c0c:	4a18      	ldr	r2, [pc, #96]	; (8002c70 <MX_TIM2_Init+0x98>)
 8002c0e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c10:	4b16      	ldr	r3, [pc, #88]	; (8002c6c <MX_TIM2_Init+0x94>)
 8002c12:	2200      	movs	r2, #0
 8002c14:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002c16:	4b15      	ldr	r3, [pc, #84]	; (8002c6c <MX_TIM2_Init+0x94>)
 8002c18:	2280      	movs	r2, #128	; 0x80
 8002c1a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002c1c:	4813      	ldr	r0, [pc, #76]	; (8002c6c <MX_TIM2_Init+0x94>)
 8002c1e:	f003 fa7f 	bl	8006120 <HAL_TIM_Base_Init>
 8002c22:	4603      	mov	r3, r0
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d001      	beq.n	8002c2c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002c28:	f7ff fd90 	bl	800274c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c30:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002c32:	f107 0310 	add.w	r3, r7, #16
 8002c36:	4619      	mov	r1, r3
 8002c38:	480c      	ldr	r0, [pc, #48]	; (8002c6c <MX_TIM2_Init+0x94>)
 8002c3a:	f003 fb0d 	bl	8006258 <HAL_TIM_ConfigClockSource>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d001      	beq.n	8002c48 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002c44:	f7ff fd82 	bl	800274c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002c50:	1d3b      	adds	r3, r7, #4
 8002c52:	4619      	mov	r1, r3
 8002c54:	4805      	ldr	r0, [pc, #20]	; (8002c6c <MX_TIM2_Init+0x94>)
 8002c56:	f003 fcc3 	bl	80065e0 <HAL_TIMEx_MasterConfigSynchronization>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d001      	beq.n	8002c64 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002c60:	f7ff fd74 	bl	800274c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002c64:	bf00      	nop
 8002c66:	3720      	adds	r7, #32
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}
 8002c6c:	20000510 	.word	0x20000510
 8002c70:	000f4240 	.word	0x000f4240

08002c74 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b082      	sub	sp, #8
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c84:	d102      	bne.n	8002c8c <HAL_TIM_Base_MspInit+0x18>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002c86:	2001      	movs	r0, #1
 8002c88:	f7ff ff8e 	bl	8002ba8 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002c8c:	bf00      	nop
 8002c8e:	3708      	adds	r7, #8
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}

08002c94 <TIMER_IF_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
UTIL_TIMER_Status_t TIMER_IF_Init(void)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b083      	sub	sp, #12
 8002c98:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_Init */

  /* USER CODE END TIMER_IF_Init */
  return ret;
 8002c9e:	79fb      	ldrb	r3, [r7, #7]
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	370c      	adds	r7, #12
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bc80      	pop	{r7}
 8002ca8:	4770      	bx	lr

08002caa <TIMER_IF_StartTimer>:

UTIL_TIMER_Status_t TIMER_IF_StartTimer(uint32_t timeout)
{
 8002caa:	b480      	push	{r7}
 8002cac:	b085      	sub	sp, #20
 8002cae:	af00      	add	r7, sp, #0
 8002cb0:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN TIMER_IF_StartTimer */

  /* USER CODE END TIMER_IF_StartTimer */
  return ret;
 8002cb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	3714      	adds	r7, #20
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bc80      	pop	{r7}
 8002cc0:	4770      	bx	lr

08002cc2 <TIMER_IF_StopTimer>:

UTIL_TIMER_Status_t TIMER_IF_StopTimer(void)
{
 8002cc2:	b480      	push	{r7}
 8002cc4:	b083      	sub	sp, #12
 8002cc6:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_StopTimer */

  /* USER CODE END TIMER_IF_StopTimer */
  return ret;
 8002ccc:	79fb      	ldrb	r3, [r7, #7]
}
 8002cce:	4618      	mov	r0, r3
 8002cd0:	370c      	adds	r7, #12
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bc80      	pop	{r7}
 8002cd6:	4770      	bx	lr

08002cd8 <TIMER_IF_SetTimerContext>:

uint32_t TIMER_IF_SetTimerContext(void)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_SetTimerContext */

  /* USER CODE END TIMER_IF_SetTimerContext */

  /*return time context*/
  return RtcTimerContext;
 8002cdc:	4b02      	ldr	r3, [pc, #8]	; (8002ce8 <TIMER_IF_SetTimerContext+0x10>)
 8002cde:	681b      	ldr	r3, [r3, #0]
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bc80      	pop	{r7}
 8002ce6:	4770      	bx	lr
 8002ce8:	2000055c 	.word	0x2000055c

08002cec <TIMER_IF_GetTimerContext>:

uint32_t TIMER_IF_GetTimerContext(void)
{
 8002cec:	b480      	push	{r7}
 8002cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_GetTimerContext */

  /* USER CODE END TIMER_IF_GetTimerContext */

  /*return time context*/
  return RtcTimerContext;
 8002cf0:	4b02      	ldr	r3, [pc, #8]	; (8002cfc <TIMER_IF_GetTimerContext+0x10>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bc80      	pop	{r7}
 8002cfa:	4770      	bx	lr
 8002cfc:	2000055c 	.word	0x2000055c

08002d00 <TIMER_IF_GetTimerElapsedTime>:

uint32_t TIMER_IF_GetTimerElapsedTime(void)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b083      	sub	sp, #12
 8002d04:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002d06:	2300      	movs	r3, #0
 8002d08:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime */
  return ret;
 8002d0a:	687b      	ldr	r3, [r7, #4]
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	370c      	adds	r7, #12
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bc80      	pop	{r7}
 8002d14:	4770      	bx	lr

08002d16 <TIMER_IF_GetTimerValue>:

uint32_t TIMER_IF_GetTimerValue(void)
{
 8002d16:	b480      	push	{r7}
 8002d18:	b083      	sub	sp, #12
 8002d1a:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerValue */

  /* USER CODE END TIMER_IF_GetTimerValue */
  return ret;
 8002d20:	687b      	ldr	r3, [r7, #4]
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	370c      	adds	r7, #12
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bc80      	pop	{r7}
 8002d2a:	4770      	bx	lr

08002d2c <TIMER_IF_GetMinimumTimeout>:

uint32_t TIMER_IF_GetMinimumTimeout(void)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b083      	sub	sp, #12
 8002d30:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002d32:	2300      	movs	r3, #0
 8002d34:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout */

  /* USER CODE END TIMER_IF_GetMinimumTimeout */
  return ret;
 8002d36:	687b      	ldr	r3, [r7, #4]
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	370c      	adds	r7, #12
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bc80      	pop	{r7}
 8002d40:	4770      	bx	lr

08002d42 <TIMER_IF_Convert_ms2Tick>:

uint32_t TIMER_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 8002d42:	b480      	push	{r7}
 8002d44:	b085      	sub	sp, #20
 8002d46:	af00      	add	r7, sp, #0
 8002d48:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick */

  /* USER CODE END TIMER_IF_Convert_ms2Tick */
  return ret;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	3714      	adds	r7, #20
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bc80      	pop	{r7}
 8002d58:	4770      	bx	lr

08002d5a <TIMER_IF_Convert_Tick2ms>:

uint32_t TIMER_IF_Convert_Tick2ms(uint32_t tick)
{
 8002d5a:	b480      	push	{r7}
 8002d5c:	b085      	sub	sp, #20
 8002d5e:	af00      	add	r7, sp, #0
 8002d60:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8002d62:	2300      	movs	r3, #0
 8002d64:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms */

  /* USER CODE END TIMER_IF_Convert_Tick2ms */
  return ret;
 8002d66:	68fb      	ldr	r3, [r7, #12]
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	3714      	adds	r7, #20
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bc80      	pop	{r7}
 8002d70:	4770      	bx	lr

08002d72 <TIMER_IF_DelayMs>:

void TIMER_IF_DelayMs(uint32_t delay)
{
 8002d72:	b480      	push	{r7}
 8002d74:	b083      	sub	sp, #12
 8002d76:	af00      	add	r7, sp, #0
 8002d78:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_DelayMs */

  /* USER CODE END TIMER_IF_DelayMs */
}
 8002d7a:	bf00      	nop
 8002d7c:	370c      	adds	r7, #12
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bc80      	pop	{r7}
 8002d82:	4770      	bx	lr

08002d84 <LL_AHB2_GRP1_EnableClock>:
{
 8002d84:	b480      	push	{r7}
 8002d86:	b085      	sub	sp, #20
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002d8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d90:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002d92:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002d9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002da0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	4013      	ands	r3, r2
 8002da6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002da8:	68fb      	ldr	r3, [r7, #12]
}
 8002daa:	bf00      	nop
 8002dac:	3714      	adds	r7, #20
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bc80      	pop	{r7}
 8002db2:	4770      	bx	lr

08002db4 <LL_APB1_GRP1_EnableClock>:
{
 8002db4:	b480      	push	{r7}
 8002db6:	b085      	sub	sp, #20
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002dbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dc0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002dc2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002dcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dd0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
}
 8002dda:	bf00      	nop
 8002ddc:	3714      	adds	r7, #20
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bc80      	pop	{r7}
 8002de2:	4770      	bx	lr

08002de4 <LL_APB1_GRP2_EnableClock>:
{
 8002de4:	b480      	push	{r7}
 8002de6:	b085      	sub	sp, #20
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR2, Periphs);
 8002dec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002df0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002df2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	65cb      	str	r3, [r1, #92]	; 0x5c
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8002dfc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e00:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	4013      	ands	r3, r2
 8002e06:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002e08:	68fb      	ldr	r3, [r7, #12]
}
 8002e0a:	bf00      	nop
 8002e0c:	3714      	adds	r7, #20
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bc80      	pop	{r7}
 8002e12:	4770      	bx	lr

08002e14 <LL_APB2_GRP1_EnableClock>:
{
 8002e14:	b480      	push	{r7}
 8002e16:	b085      	sub	sp, #20
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002e1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e20:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002e22:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002e2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e30:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	4013      	ands	r3, r2
 8002e36:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002e38:	68fb      	ldr	r3, [r7, #12]
}
 8002e3a:	bf00      	nop
 8002e3c:	3714      	adds	r7, #20
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bc80      	pop	{r7}
 8002e42:	4770      	bx	lr

08002e44 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8002e48:	4b22      	ldr	r3, [pc, #136]	; (8002ed4 <MX_LPUART1_UART_Init+0x90>)
 8002e4a:	4a23      	ldr	r2, [pc, #140]	; (8002ed8 <MX_LPUART1_UART_Init+0x94>)
 8002e4c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8002e4e:	4b21      	ldr	r3, [pc, #132]	; (8002ed4 <MX_LPUART1_UART_Init+0x90>)
 8002e50:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002e54:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002e56:	4b1f      	ldr	r3, [pc, #124]	; (8002ed4 <MX_LPUART1_UART_Init+0x90>)
 8002e58:	2200      	movs	r2, #0
 8002e5a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8002e5c:	4b1d      	ldr	r3, [pc, #116]	; (8002ed4 <MX_LPUART1_UART_Init+0x90>)
 8002e5e:	2200      	movs	r2, #0
 8002e60:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8002e62:	4b1c      	ldr	r3, [pc, #112]	; (8002ed4 <MX_LPUART1_UART_Init+0x90>)
 8002e64:	2200      	movs	r2, #0
 8002e66:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8002e68:	4b1a      	ldr	r3, [pc, #104]	; (8002ed4 <MX_LPUART1_UART_Init+0x90>)
 8002e6a:	220c      	movs	r2, #12
 8002e6c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e6e:	4b19      	ldr	r3, [pc, #100]	; (8002ed4 <MX_LPUART1_UART_Init+0x90>)
 8002e70:	2200      	movs	r2, #0
 8002e72:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002e74:	4b17      	ldr	r3, [pc, #92]	; (8002ed4 <MX_LPUART1_UART_Init+0x90>)
 8002e76:	2200      	movs	r2, #0
 8002e78:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002e7a:	4b16      	ldr	r3, [pc, #88]	; (8002ed4 <MX_LPUART1_UART_Init+0x90>)
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002e80:	4b14      	ldr	r3, [pc, #80]	; (8002ed4 <MX_LPUART1_UART_Init+0x90>)
 8002e82:	2200      	movs	r2, #0
 8002e84:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8002e86:	4b13      	ldr	r3, [pc, #76]	; (8002ed4 <MX_LPUART1_UART_Init+0x90>)
 8002e88:	2200      	movs	r2, #0
 8002e8a:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8002e8c:	4811      	ldr	r0, [pc, #68]	; (8002ed4 <MX_LPUART1_UART_Init+0x90>)
 8002e8e:	f003 fc26 	bl	80066de <HAL_UART_Init>
 8002e92:	4603      	mov	r3, r0
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d001      	beq.n	8002e9c <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8002e98:	f7ff fc58 	bl	800274c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002e9c:	2100      	movs	r1, #0
 8002e9e:	480d      	ldr	r0, [pc, #52]	; (8002ed4 <MX_LPUART1_UART_Init+0x90>)
 8002ea0:	f005 f84e 	bl	8007f40 <HAL_UARTEx_SetTxFifoThreshold>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d001      	beq.n	8002eae <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002eaa:	f7ff fc4f 	bl	800274c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002eae:	2100      	movs	r1, #0
 8002eb0:	4808      	ldr	r0, [pc, #32]	; (8002ed4 <MX_LPUART1_UART_Init+0x90>)
 8002eb2:	f005 f883 	bl	8007fbc <HAL_UARTEx_SetRxFifoThreshold>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d001      	beq.n	8002ec0 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002ebc:	f7ff fc46 	bl	800274c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8002ec0:	4804      	ldr	r0, [pc, #16]	; (8002ed4 <MX_LPUART1_UART_Init+0x90>)
 8002ec2:	f005 f805 	bl	8007ed0 <HAL_UARTEx_DisableFifoMode>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d001      	beq.n	8002ed0 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002ecc:	f7ff fc3e 	bl	800274c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8002ed0:	bf00      	nop
 8002ed2:	bd80      	pop	{r7, pc}
 8002ed4:	20000560 	.word	0x20000560
 8002ed8:	40008000 	.word	0x40008000

08002edc <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002ee0:	4b22      	ldr	r3, [pc, #136]	; (8002f6c <MX_USART1_UART_Init+0x90>)
 8002ee2:	4a23      	ldr	r2, [pc, #140]	; (8002f70 <MX_USART1_UART_Init+0x94>)
 8002ee4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002ee6:	4b21      	ldr	r3, [pc, #132]	; (8002f6c <MX_USART1_UART_Init+0x90>)
 8002ee8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002eec:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002eee:	4b1f      	ldr	r3, [pc, #124]	; (8002f6c <MX_USART1_UART_Init+0x90>)
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002ef4:	4b1d      	ldr	r3, [pc, #116]	; (8002f6c <MX_USART1_UART_Init+0x90>)
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002efa:	4b1c      	ldr	r3, [pc, #112]	; (8002f6c <MX_USART1_UART_Init+0x90>)
 8002efc:	2200      	movs	r2, #0
 8002efe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002f00:	4b1a      	ldr	r3, [pc, #104]	; (8002f6c <MX_USART1_UART_Init+0x90>)
 8002f02:	220c      	movs	r2, #12
 8002f04:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f06:	4b19      	ldr	r3, [pc, #100]	; (8002f6c <MX_USART1_UART_Init+0x90>)
 8002f08:	2200      	movs	r2, #0
 8002f0a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f0c:	4b17      	ldr	r3, [pc, #92]	; (8002f6c <MX_USART1_UART_Init+0x90>)
 8002f0e:	2200      	movs	r2, #0
 8002f10:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002f12:	4b16      	ldr	r3, [pc, #88]	; (8002f6c <MX_USART1_UART_Init+0x90>)
 8002f14:	2200      	movs	r2, #0
 8002f16:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002f18:	4b14      	ldr	r3, [pc, #80]	; (8002f6c <MX_USART1_UART_Init+0x90>)
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002f1e:	4b13      	ldr	r3, [pc, #76]	; (8002f6c <MX_USART1_UART_Init+0x90>)
 8002f20:	2200      	movs	r2, #0
 8002f22:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002f24:	4811      	ldr	r0, [pc, #68]	; (8002f6c <MX_USART1_UART_Init+0x90>)
 8002f26:	f003 fbda 	bl	80066de <HAL_UART_Init>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d001      	beq.n	8002f34 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002f30:	f7ff fc0c 	bl	800274c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002f34:	2100      	movs	r1, #0
 8002f36:	480d      	ldr	r0, [pc, #52]	; (8002f6c <MX_USART1_UART_Init+0x90>)
 8002f38:	f005 f802 	bl	8007f40 <HAL_UARTEx_SetTxFifoThreshold>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d001      	beq.n	8002f46 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002f42:	f7ff fc03 	bl	800274c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002f46:	2100      	movs	r1, #0
 8002f48:	4808      	ldr	r0, [pc, #32]	; (8002f6c <MX_USART1_UART_Init+0x90>)
 8002f4a:	f005 f837 	bl	8007fbc <HAL_UARTEx_SetRxFifoThreshold>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d001      	beq.n	8002f58 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002f54:	f7ff fbfa 	bl	800274c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002f58:	4804      	ldr	r0, [pc, #16]	; (8002f6c <MX_USART1_UART_Init+0x90>)
 8002f5a:	f004 ffb9 	bl	8007ed0 <HAL_UARTEx_DisableFifoMode>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d001      	beq.n	8002f68 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002f64:	f7ff fbf2 	bl	800274c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002f68:	bf00      	nop
 8002f6a:	bd80      	pop	{r7, pc}
 8002f6c:	200005f4 	.word	0x200005f4
 8002f70:	40013800 	.word	0x40013800

08002f74 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002f78:	4b22      	ldr	r3, [pc, #136]	; (8003004 <MX_USART2_UART_Init+0x90>)
 8002f7a:	4a23      	ldr	r2, [pc, #140]	; (8003008 <MX_USART2_UART_Init+0x94>)
 8002f7c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002f7e:	4b21      	ldr	r3, [pc, #132]	; (8003004 <MX_USART2_UART_Init+0x90>)
 8002f80:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002f84:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002f86:	4b1f      	ldr	r3, [pc, #124]	; (8003004 <MX_USART2_UART_Init+0x90>)
 8002f88:	2200      	movs	r2, #0
 8002f8a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002f8c:	4b1d      	ldr	r3, [pc, #116]	; (8003004 <MX_USART2_UART_Init+0x90>)
 8002f8e:	2200      	movs	r2, #0
 8002f90:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002f92:	4b1c      	ldr	r3, [pc, #112]	; (8003004 <MX_USART2_UART_Init+0x90>)
 8002f94:	2200      	movs	r2, #0
 8002f96:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002f98:	4b1a      	ldr	r3, [pc, #104]	; (8003004 <MX_USART2_UART_Init+0x90>)
 8002f9a:	220c      	movs	r2, #12
 8002f9c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f9e:	4b19      	ldr	r3, [pc, #100]	; (8003004 <MX_USART2_UART_Init+0x90>)
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002fa4:	4b17      	ldr	r3, [pc, #92]	; (8003004 <MX_USART2_UART_Init+0x90>)
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002faa:	4b16      	ldr	r3, [pc, #88]	; (8003004 <MX_USART2_UART_Init+0x90>)
 8002fac:	2200      	movs	r2, #0
 8002fae:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002fb0:	4b14      	ldr	r3, [pc, #80]	; (8003004 <MX_USART2_UART_Init+0x90>)
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002fb6:	4b13      	ldr	r3, [pc, #76]	; (8003004 <MX_USART2_UART_Init+0x90>)
 8002fb8:	2200      	movs	r2, #0
 8002fba:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002fbc:	4811      	ldr	r0, [pc, #68]	; (8003004 <MX_USART2_UART_Init+0x90>)
 8002fbe:	f003 fb8e 	bl	80066de <HAL_UART_Init>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d001      	beq.n	8002fcc <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002fc8:	f7ff fbc0 	bl	800274c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002fcc:	2100      	movs	r1, #0
 8002fce:	480d      	ldr	r0, [pc, #52]	; (8003004 <MX_USART2_UART_Init+0x90>)
 8002fd0:	f004 ffb6 	bl	8007f40 <HAL_UARTEx_SetTxFifoThreshold>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d001      	beq.n	8002fde <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8002fda:	f7ff fbb7 	bl	800274c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002fde:	2100      	movs	r1, #0
 8002fe0:	4808      	ldr	r0, [pc, #32]	; (8003004 <MX_USART2_UART_Init+0x90>)
 8002fe2:	f004 ffeb 	bl	8007fbc <HAL_UARTEx_SetRxFifoThreshold>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d001      	beq.n	8002ff0 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8002fec:	f7ff fbae 	bl	800274c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002ff0:	4804      	ldr	r0, [pc, #16]	; (8003004 <MX_USART2_UART_Init+0x90>)
 8002ff2:	f004 ff6d 	bl	8007ed0 <HAL_UARTEx_DisableFifoMode>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d001      	beq.n	8003000 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002ffc:	f7ff fba6 	bl	800274c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003000:	bf00      	nop
 8003002:	bd80      	pop	{r7, pc}
 8003004:	20000688 	.word	0x20000688
 8003008:	40004400 	.word	0x40004400

0800300c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b096      	sub	sp, #88	; 0x58
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003014:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003018:	2200      	movs	r2, #0
 800301a:	601a      	str	r2, [r3, #0]
 800301c:	605a      	str	r2, [r3, #4]
 800301e:	609a      	str	r2, [r3, #8]
 8003020:	60da      	str	r2, [r3, #12]
 8003022:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003024:	f107 030c 	add.w	r3, r7, #12
 8003028:	2238      	movs	r2, #56	; 0x38
 800302a:	2100      	movs	r1, #0
 800302c:	4618      	mov	r0, r3
 800302e:	f008 fde1 	bl	800bbf4 <memset>
  if(uartHandle->Instance==LPUART1)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a99      	ldr	r2, [pc, #612]	; (800329c <HAL_UART_MspInit+0x290>)
 8003038:	4293      	cmp	r3, r2
 800303a:	f040 8092 	bne.w	8003162 <HAL_UART_MspInit+0x156>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800303e:	2320      	movs	r3, #32
 8003040:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8003042:	2300      	movs	r3, #0
 8003044:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003046:	f107 030c 	add.w	r3, r7, #12
 800304a:	4618      	mov	r0, r3
 800304c:	f002 fa94 	bl	8005578 <HAL_RCCEx_PeriphCLKConfig>
 8003050:	4603      	mov	r3, r0
 8003052:	2b00      	cmp	r3, #0
 8003054:	d001      	beq.n	800305a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8003056:	f7ff fb79 	bl	800274c <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800305a:	2001      	movs	r0, #1
 800305c:	f7ff fec2 	bl	8002de4 <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003060:	2004      	movs	r0, #4
 8003062:	f7ff fe8f 	bl	8002d84 <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PC1     ------> LPUART1_TX
    PC0     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 8003066:	2303      	movs	r3, #3
 8003068:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800306a:	2302      	movs	r3, #2
 800306c:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800306e:	2300      	movs	r3, #0
 8003070:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003072:	2300      	movs	r3, #0
 8003074:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8003076:	2308      	movs	r3, #8
 8003078:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800307a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800307e:	4619      	mov	r1, r3
 8003080:	4887      	ldr	r0, [pc, #540]	; (80032a0 <HAL_UART_MspInit+0x294>)
 8003082:	f000 feed 	bl	8003e60 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel1;
 8003086:	4b87      	ldr	r3, [pc, #540]	; (80032a4 <HAL_UART_MspInit+0x298>)
 8003088:	4a87      	ldr	r2, [pc, #540]	; (80032a8 <HAL_UART_MspInit+0x29c>)
 800308a:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 800308c:	4b85      	ldr	r3, [pc, #532]	; (80032a4 <HAL_UART_MspInit+0x298>)
 800308e:	2215      	movs	r2, #21
 8003090:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003092:	4b84      	ldr	r3, [pc, #528]	; (80032a4 <HAL_UART_MspInit+0x298>)
 8003094:	2200      	movs	r2, #0
 8003096:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003098:	4b82      	ldr	r3, [pc, #520]	; (80032a4 <HAL_UART_MspInit+0x298>)
 800309a:	2200      	movs	r2, #0
 800309c:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800309e:	4b81      	ldr	r3, [pc, #516]	; (80032a4 <HAL_UART_MspInit+0x298>)
 80030a0:	2280      	movs	r2, #128	; 0x80
 80030a2:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80030a4:	4b7f      	ldr	r3, [pc, #508]	; (80032a4 <HAL_UART_MspInit+0x298>)
 80030a6:	2200      	movs	r2, #0
 80030a8:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80030aa:	4b7e      	ldr	r3, [pc, #504]	; (80032a4 <HAL_UART_MspInit+0x298>)
 80030ac:	2200      	movs	r2, #0
 80030ae:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_NORMAL;
 80030b0:	4b7c      	ldr	r3, [pc, #496]	; (80032a4 <HAL_UART_MspInit+0x298>)
 80030b2:	2200      	movs	r2, #0
 80030b4:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80030b6:	4b7b      	ldr	r3, [pc, #492]	; (80032a4 <HAL_UART_MspInit+0x298>)
 80030b8:	2200      	movs	r2, #0
 80030ba:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 80030bc:	4879      	ldr	r0, [pc, #484]	; (80032a4 <HAL_UART_MspInit+0x298>)
 80030be:	f000 fb4d 	bl	800375c <HAL_DMA_Init>
 80030c2:	4603      	mov	r3, r0
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d001      	beq.n	80030cc <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 80030c8:	f7ff fb40 	bl	800274c <Error_Handler>
    }

    if (HAL_DMA_ConfigChannelAttributes(&hdma_lpuart1_rx, DMA_CHANNEL_NPRIV) != HAL_OK)
 80030cc:	2110      	movs	r1, #16
 80030ce:	4875      	ldr	r0, [pc, #468]	; (80032a4 <HAL_UART_MspInit+0x298>)
 80030d0:	f000 fdee 	bl	8003cb0 <HAL_DMA_ConfigChannelAttributes>
 80030d4:	4603      	mov	r3, r0
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d001      	beq.n	80030de <HAL_UART_MspInit+0xd2>
    {
      Error_Handler();
 80030da:	f7ff fb37 	bl	800274c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	4a70      	ldr	r2, [pc, #448]	; (80032a4 <HAL_UART_MspInit+0x298>)
 80030e2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80030e6:	4a6f      	ldr	r2, [pc, #444]	; (80032a4 <HAL_UART_MspInit+0x298>)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel2;
 80030ec:	4b6f      	ldr	r3, [pc, #444]	; (80032ac <HAL_UART_MspInit+0x2a0>)
 80030ee:	4a70      	ldr	r2, [pc, #448]	; (80032b0 <HAL_UART_MspInit+0x2a4>)
 80030f0:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 80030f2:	4b6e      	ldr	r3, [pc, #440]	; (80032ac <HAL_UART_MspInit+0x2a0>)
 80030f4:	2216      	movs	r2, #22
 80030f6:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80030f8:	4b6c      	ldr	r3, [pc, #432]	; (80032ac <HAL_UART_MspInit+0x2a0>)
 80030fa:	2210      	movs	r2, #16
 80030fc:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80030fe:	4b6b      	ldr	r3, [pc, #428]	; (80032ac <HAL_UART_MspInit+0x2a0>)
 8003100:	2200      	movs	r2, #0
 8003102:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003104:	4b69      	ldr	r3, [pc, #420]	; (80032ac <HAL_UART_MspInit+0x2a0>)
 8003106:	2280      	movs	r2, #128	; 0x80
 8003108:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800310a:	4b68      	ldr	r3, [pc, #416]	; (80032ac <HAL_UART_MspInit+0x2a0>)
 800310c:	2200      	movs	r2, #0
 800310e:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003110:	4b66      	ldr	r3, [pc, #408]	; (80032ac <HAL_UART_MspInit+0x2a0>)
 8003112:	2200      	movs	r2, #0
 8003114:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8003116:	4b65      	ldr	r3, [pc, #404]	; (80032ac <HAL_UART_MspInit+0x2a0>)
 8003118:	2200      	movs	r2, #0
 800311a:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800311c:	4b63      	ldr	r3, [pc, #396]	; (80032ac <HAL_UART_MspInit+0x2a0>)
 800311e:	2200      	movs	r2, #0
 8003120:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8003122:	4862      	ldr	r0, [pc, #392]	; (80032ac <HAL_UART_MspInit+0x2a0>)
 8003124:	f000 fb1a 	bl	800375c <HAL_DMA_Init>
 8003128:	4603      	mov	r3, r0
 800312a:	2b00      	cmp	r3, #0
 800312c:	d001      	beq.n	8003132 <HAL_UART_MspInit+0x126>
    {
      Error_Handler();
 800312e:	f7ff fb0d 	bl	800274c <Error_Handler>
    }

    if (HAL_DMA_ConfigChannelAttributes(&hdma_lpuart1_tx, DMA_CHANNEL_NPRIV) != HAL_OK)
 8003132:	2110      	movs	r1, #16
 8003134:	485d      	ldr	r0, [pc, #372]	; (80032ac <HAL_UART_MspInit+0x2a0>)
 8003136:	f000 fdbb 	bl	8003cb0 <HAL_DMA_ConfigChannelAttributes>
 800313a:	4603      	mov	r3, r0
 800313c:	2b00      	cmp	r3, #0
 800313e:	d001      	beq.n	8003144 <HAL_UART_MspInit+0x138>
    {
      Error_Handler();
 8003140:	f7ff fb04 	bl	800274c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	4a59      	ldr	r2, [pc, #356]	; (80032ac <HAL_UART_MspInit+0x2a0>)
 8003148:	67da      	str	r2, [r3, #124]	; 0x7c
 800314a:	4a58      	ldr	r2, [pc, #352]	; (80032ac <HAL_UART_MspInit+0x2a0>)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8003150:	2200      	movs	r2, #0
 8003152:	2100      	movs	r1, #0
 8003154:	2026      	movs	r0, #38	; 0x26
 8003156:	f000 facc 	bl	80036f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 800315a:	2026      	movs	r0, #38	; 0x26
 800315c:	f000 fae3 	bl	8003726 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003160:	e14c      	b.n	80033fc <HAL_UART_MspInit+0x3f0>
  else if(uartHandle->Instance==USART1)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a53      	ldr	r2, [pc, #332]	; (80032b4 <HAL_UART_MspInit+0x2a8>)
 8003168:	4293      	cmp	r3, r2
 800316a:	f040 80ad 	bne.w	80032c8 <HAL_UART_MspInit+0x2bc>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800316e:	2301      	movs	r3, #1
 8003170:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003172:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8003176:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003178:	f107 030c 	add.w	r3, r7, #12
 800317c:	4618      	mov	r0, r3
 800317e:	f002 f9fb 	bl	8005578 <HAL_RCCEx_PeriphCLKConfig>
 8003182:	4603      	mov	r3, r0
 8003184:	2b00      	cmp	r3, #0
 8003186:	d001      	beq.n	800318c <HAL_UART_MspInit+0x180>
      Error_Handler();
 8003188:	f7ff fae0 	bl	800274c <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 800318c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003190:	f7ff fe40 	bl	8002e14 <LL_APB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003194:	2001      	movs	r0, #1
 8003196:	f7ff fdf5 	bl	8002d84 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 800319a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800319e:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031a0:	2302      	movs	r3, #2
 80031a2:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031a4:	2300      	movs	r3, #0
 80031a6:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031a8:	2300      	movs	r3, #0
 80031aa:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80031ac:	2307      	movs	r3, #7
 80031ae:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031b0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80031b4:	4619      	mov	r1, r3
 80031b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80031ba:	f000 fe51 	bl	8003e60 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel3;
 80031be:	4b3e      	ldr	r3, [pc, #248]	; (80032b8 <HAL_UART_MspInit+0x2ac>)
 80031c0:	4a3e      	ldr	r2, [pc, #248]	; (80032bc <HAL_UART_MspInit+0x2b0>)
 80031c2:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 80031c4:	4b3c      	ldr	r3, [pc, #240]	; (80032b8 <HAL_UART_MspInit+0x2ac>)
 80031c6:	2211      	movs	r2, #17
 80031c8:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80031ca:	4b3b      	ldr	r3, [pc, #236]	; (80032b8 <HAL_UART_MspInit+0x2ac>)
 80031cc:	2200      	movs	r2, #0
 80031ce:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80031d0:	4b39      	ldr	r3, [pc, #228]	; (80032b8 <HAL_UART_MspInit+0x2ac>)
 80031d2:	2200      	movs	r2, #0
 80031d4:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80031d6:	4b38      	ldr	r3, [pc, #224]	; (80032b8 <HAL_UART_MspInit+0x2ac>)
 80031d8:	2280      	movs	r2, #128	; 0x80
 80031da:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80031dc:	4b36      	ldr	r3, [pc, #216]	; (80032b8 <HAL_UART_MspInit+0x2ac>)
 80031de:	2200      	movs	r2, #0
 80031e0:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80031e2:	4b35      	ldr	r3, [pc, #212]	; (80032b8 <HAL_UART_MspInit+0x2ac>)
 80031e4:	2200      	movs	r2, #0
 80031e6:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80031e8:	4b33      	ldr	r3, [pc, #204]	; (80032b8 <HAL_UART_MspInit+0x2ac>)
 80031ea:	2200      	movs	r2, #0
 80031ec:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80031ee:	4b32      	ldr	r3, [pc, #200]	; (80032b8 <HAL_UART_MspInit+0x2ac>)
 80031f0:	2200      	movs	r2, #0
 80031f2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80031f4:	4830      	ldr	r0, [pc, #192]	; (80032b8 <HAL_UART_MspInit+0x2ac>)
 80031f6:	f000 fab1 	bl	800375c <HAL_DMA_Init>
 80031fa:	4603      	mov	r3, r0
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d001      	beq.n	8003204 <HAL_UART_MspInit+0x1f8>
      Error_Handler();
 8003200:	f7ff faa4 	bl	800274c <Error_Handler>
    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart1_rx, DMA_CHANNEL_NPRIV) != HAL_OK)
 8003204:	2110      	movs	r1, #16
 8003206:	482c      	ldr	r0, [pc, #176]	; (80032b8 <HAL_UART_MspInit+0x2ac>)
 8003208:	f000 fd52 	bl	8003cb0 <HAL_DMA_ConfigChannelAttributes>
 800320c:	4603      	mov	r3, r0
 800320e:	2b00      	cmp	r3, #0
 8003210:	d001      	beq.n	8003216 <HAL_UART_MspInit+0x20a>
      Error_Handler();
 8003212:	f7ff fa9b 	bl	800274c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	4a27      	ldr	r2, [pc, #156]	; (80032b8 <HAL_UART_MspInit+0x2ac>)
 800321a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800321e:	4a26      	ldr	r2, [pc, #152]	; (80032b8 <HAL_UART_MspInit+0x2ac>)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6293      	str	r3, [r2, #40]	; 0x28
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8003224:	4b26      	ldr	r3, [pc, #152]	; (80032c0 <HAL_UART_MspInit+0x2b4>)
 8003226:	4a27      	ldr	r2, [pc, #156]	; (80032c4 <HAL_UART_MspInit+0x2b8>)
 8003228:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 800322a:	4b25      	ldr	r3, [pc, #148]	; (80032c0 <HAL_UART_MspInit+0x2b4>)
 800322c:	2212      	movs	r2, #18
 800322e:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003230:	4b23      	ldr	r3, [pc, #140]	; (80032c0 <HAL_UART_MspInit+0x2b4>)
 8003232:	2210      	movs	r2, #16
 8003234:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003236:	4b22      	ldr	r3, [pc, #136]	; (80032c0 <HAL_UART_MspInit+0x2b4>)
 8003238:	2200      	movs	r2, #0
 800323a:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800323c:	4b20      	ldr	r3, [pc, #128]	; (80032c0 <HAL_UART_MspInit+0x2b4>)
 800323e:	2280      	movs	r2, #128	; 0x80
 8003240:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003242:	4b1f      	ldr	r3, [pc, #124]	; (80032c0 <HAL_UART_MspInit+0x2b4>)
 8003244:	2200      	movs	r2, #0
 8003246:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003248:	4b1d      	ldr	r3, [pc, #116]	; (80032c0 <HAL_UART_MspInit+0x2b4>)
 800324a:	2200      	movs	r2, #0
 800324c:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800324e:	4b1c      	ldr	r3, [pc, #112]	; (80032c0 <HAL_UART_MspInit+0x2b4>)
 8003250:	2200      	movs	r2, #0
 8003252:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003254:	4b1a      	ldr	r3, [pc, #104]	; (80032c0 <HAL_UART_MspInit+0x2b4>)
 8003256:	2200      	movs	r2, #0
 8003258:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800325a:	4819      	ldr	r0, [pc, #100]	; (80032c0 <HAL_UART_MspInit+0x2b4>)
 800325c:	f000 fa7e 	bl	800375c <HAL_DMA_Init>
 8003260:	4603      	mov	r3, r0
 8003262:	2b00      	cmp	r3, #0
 8003264:	d001      	beq.n	800326a <HAL_UART_MspInit+0x25e>
      Error_Handler();
 8003266:	f7ff fa71 	bl	800274c <Error_Handler>
    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart1_tx, DMA_CHANNEL_NPRIV) != HAL_OK)
 800326a:	2110      	movs	r1, #16
 800326c:	4814      	ldr	r0, [pc, #80]	; (80032c0 <HAL_UART_MspInit+0x2b4>)
 800326e:	f000 fd1f 	bl	8003cb0 <HAL_DMA_ConfigChannelAttributes>
 8003272:	4603      	mov	r3, r0
 8003274:	2b00      	cmp	r3, #0
 8003276:	d001      	beq.n	800327c <HAL_UART_MspInit+0x270>
      Error_Handler();
 8003278:	f7ff fa68 	bl	800274c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	4a10      	ldr	r2, [pc, #64]	; (80032c0 <HAL_UART_MspInit+0x2b4>)
 8003280:	67da      	str	r2, [r3, #124]	; 0x7c
 8003282:	4a0f      	ldr	r2, [pc, #60]	; (80032c0 <HAL_UART_MspInit+0x2b4>)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003288:	2200      	movs	r2, #0
 800328a:	2100      	movs	r1, #0
 800328c:	2024      	movs	r0, #36	; 0x24
 800328e:	f000 fa30 	bl	80036f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003292:	2024      	movs	r0, #36	; 0x24
 8003294:	f000 fa47 	bl	8003726 <HAL_NVIC_EnableIRQ>
}
 8003298:	e0b0      	b.n	80033fc <HAL_UART_MspInit+0x3f0>
 800329a:	bf00      	nop
 800329c:	40008000 	.word	0x40008000
 80032a0:	48000800 	.word	0x48000800
 80032a4:	2000071c 	.word	0x2000071c
 80032a8:	40020008 	.word	0x40020008
 80032ac:	2000077c 	.word	0x2000077c
 80032b0:	4002001c 	.word	0x4002001c
 80032b4:	40013800 	.word	0x40013800
 80032b8:	200007dc 	.word	0x200007dc
 80032bc:	40020030 	.word	0x40020030
 80032c0:	2000083c 	.word	0x2000083c
 80032c4:	40020044 	.word	0x40020044
  else if(uartHandle->Instance==USART2)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a4d      	ldr	r2, [pc, #308]	; (8003404 <HAL_UART_MspInit+0x3f8>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	f040 8094 	bne.w	80033fc <HAL_UART_MspInit+0x3f0>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80032d4:	2302      	movs	r3, #2
 80032d6:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80032d8:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 80032dc:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80032de:	f107 030c 	add.w	r3, r7, #12
 80032e2:	4618      	mov	r0, r3
 80032e4:	f002 f948 	bl	8005578 <HAL_RCCEx_PeriphCLKConfig>
 80032e8:	4603      	mov	r3, r0
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d001      	beq.n	80032f2 <HAL_UART_MspInit+0x2e6>
      Error_Handler();
 80032ee:	f7ff fa2d 	bl	800274c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80032f2:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80032f6:	f7ff fd5d 	bl	8002db4 <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032fa:	2001      	movs	r0, #1
 80032fc:	f7ff fd42 	bl	8002d84 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = T_VCP_RX_Pin|T_VCP_RXA2_Pin;
 8003300:	230c      	movs	r3, #12
 8003302:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003304:	2302      	movs	r3, #2
 8003306:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003308:	2300      	movs	r3, #0
 800330a:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800330c:	2300      	movs	r3, #0
 800330e:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003310:	2307      	movs	r3, #7
 8003312:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003314:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003318:	4619      	mov	r1, r3
 800331a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800331e:	f000 fd9f 	bl	8003e60 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel5;
 8003322:	4b39      	ldr	r3, [pc, #228]	; (8003408 <HAL_UART_MspInit+0x3fc>)
 8003324:	4a39      	ldr	r2, [pc, #228]	; (800340c <HAL_UART_MspInit+0x400>)
 8003326:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8003328:	4b37      	ldr	r3, [pc, #220]	; (8003408 <HAL_UART_MspInit+0x3fc>)
 800332a:	2213      	movs	r2, #19
 800332c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800332e:	4b36      	ldr	r3, [pc, #216]	; (8003408 <HAL_UART_MspInit+0x3fc>)
 8003330:	2200      	movs	r2, #0
 8003332:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003334:	4b34      	ldr	r3, [pc, #208]	; (8003408 <HAL_UART_MspInit+0x3fc>)
 8003336:	2200      	movs	r2, #0
 8003338:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800333a:	4b33      	ldr	r3, [pc, #204]	; (8003408 <HAL_UART_MspInit+0x3fc>)
 800333c:	2280      	movs	r2, #128	; 0x80
 800333e:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003340:	4b31      	ldr	r3, [pc, #196]	; (8003408 <HAL_UART_MspInit+0x3fc>)
 8003342:	2200      	movs	r2, #0
 8003344:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003346:	4b30      	ldr	r3, [pc, #192]	; (8003408 <HAL_UART_MspInit+0x3fc>)
 8003348:	2200      	movs	r2, #0
 800334a:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800334c:	4b2e      	ldr	r3, [pc, #184]	; (8003408 <HAL_UART_MspInit+0x3fc>)
 800334e:	2200      	movs	r2, #0
 8003350:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003352:	4b2d      	ldr	r3, [pc, #180]	; (8003408 <HAL_UART_MspInit+0x3fc>)
 8003354:	2200      	movs	r2, #0
 8003356:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003358:	482b      	ldr	r0, [pc, #172]	; (8003408 <HAL_UART_MspInit+0x3fc>)
 800335a:	f000 f9ff 	bl	800375c <HAL_DMA_Init>
 800335e:	4603      	mov	r3, r0
 8003360:	2b00      	cmp	r3, #0
 8003362:	d001      	beq.n	8003368 <HAL_UART_MspInit+0x35c>
      Error_Handler();
 8003364:	f7ff f9f2 	bl	800274c <Error_Handler>
    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart2_rx, DMA_CHANNEL_NPRIV) != HAL_OK)
 8003368:	2110      	movs	r1, #16
 800336a:	4827      	ldr	r0, [pc, #156]	; (8003408 <HAL_UART_MspInit+0x3fc>)
 800336c:	f000 fca0 	bl	8003cb0 <HAL_DMA_ConfigChannelAttributes>
 8003370:	4603      	mov	r3, r0
 8003372:	2b00      	cmp	r3, #0
 8003374:	d001      	beq.n	800337a <HAL_UART_MspInit+0x36e>
      Error_Handler();
 8003376:	f7ff f9e9 	bl	800274c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	4a22      	ldr	r2, [pc, #136]	; (8003408 <HAL_UART_MspInit+0x3fc>)
 800337e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8003382:	4a21      	ldr	r2, [pc, #132]	; (8003408 <HAL_UART_MspInit+0x3fc>)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6293      	str	r3, [r2, #40]	; 0x28
    hdma_usart2_tx.Instance = DMA1_Channel6;
 8003388:	4b21      	ldr	r3, [pc, #132]	; (8003410 <HAL_UART_MspInit+0x404>)
 800338a:	4a22      	ldr	r2, [pc, #136]	; (8003414 <HAL_UART_MspInit+0x408>)
 800338c:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 800338e:	4b20      	ldr	r3, [pc, #128]	; (8003410 <HAL_UART_MspInit+0x404>)
 8003390:	2214      	movs	r2, #20
 8003392:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003394:	4b1e      	ldr	r3, [pc, #120]	; (8003410 <HAL_UART_MspInit+0x404>)
 8003396:	2210      	movs	r2, #16
 8003398:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800339a:	4b1d      	ldr	r3, [pc, #116]	; (8003410 <HAL_UART_MspInit+0x404>)
 800339c:	2200      	movs	r2, #0
 800339e:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80033a0:	4b1b      	ldr	r3, [pc, #108]	; (8003410 <HAL_UART_MspInit+0x404>)
 80033a2:	2280      	movs	r2, #128	; 0x80
 80033a4:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80033a6:	4b1a      	ldr	r3, [pc, #104]	; (8003410 <HAL_UART_MspInit+0x404>)
 80033a8:	2200      	movs	r2, #0
 80033aa:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80033ac:	4b18      	ldr	r3, [pc, #96]	; (8003410 <HAL_UART_MspInit+0x404>)
 80033ae:	2200      	movs	r2, #0
 80033b0:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80033b2:	4b17      	ldr	r3, [pc, #92]	; (8003410 <HAL_UART_MspInit+0x404>)
 80033b4:	2200      	movs	r2, #0
 80033b6:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80033b8:	4b15      	ldr	r3, [pc, #84]	; (8003410 <HAL_UART_MspInit+0x404>)
 80033ba:	2200      	movs	r2, #0
 80033bc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80033be:	4814      	ldr	r0, [pc, #80]	; (8003410 <HAL_UART_MspInit+0x404>)
 80033c0:	f000 f9cc 	bl	800375c <HAL_DMA_Init>
 80033c4:	4603      	mov	r3, r0
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d001      	beq.n	80033ce <HAL_UART_MspInit+0x3c2>
      Error_Handler();
 80033ca:	f7ff f9bf 	bl	800274c <Error_Handler>
    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart2_tx, DMA_CHANNEL_NPRIV) != HAL_OK)
 80033ce:	2110      	movs	r1, #16
 80033d0:	480f      	ldr	r0, [pc, #60]	; (8003410 <HAL_UART_MspInit+0x404>)
 80033d2:	f000 fc6d 	bl	8003cb0 <HAL_DMA_ConfigChannelAttributes>
 80033d6:	4603      	mov	r3, r0
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d001      	beq.n	80033e0 <HAL_UART_MspInit+0x3d4>
      Error_Handler();
 80033dc:	f7ff f9b6 	bl	800274c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	4a0b      	ldr	r2, [pc, #44]	; (8003410 <HAL_UART_MspInit+0x404>)
 80033e4:	67da      	str	r2, [r3, #124]	; 0x7c
 80033e6:	4a0a      	ldr	r2, [pc, #40]	; (8003410 <HAL_UART_MspInit+0x404>)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80033ec:	2200      	movs	r2, #0
 80033ee:	2100      	movs	r1, #0
 80033f0:	2025      	movs	r0, #37	; 0x25
 80033f2:	f000 f97e 	bl	80036f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80033f6:	2025      	movs	r0, #37	; 0x25
 80033f8:	f000 f995 	bl	8003726 <HAL_NVIC_EnableIRQ>
}
 80033fc:	bf00      	nop
 80033fe:	3758      	adds	r7, #88	; 0x58
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}
 8003404:	40004400 	.word	0x40004400
 8003408:	2000089c 	.word	0x2000089c
 800340c:	40020058 	.word	0x40020058
 8003410:	200008fc 	.word	0x200008fc
 8003414:	4002006c 	.word	0x4002006c

08003418 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003418:	480d      	ldr	r0, [pc, #52]	; (8003450 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800341a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800341c:	f7ff fbbe 	bl	8002b9c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003420:	480c      	ldr	r0, [pc, #48]	; (8003454 <LoopForever+0x6>)
  ldr r1, =_edata
 8003422:	490d      	ldr	r1, [pc, #52]	; (8003458 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003424:	4a0d      	ldr	r2, [pc, #52]	; (800345c <LoopForever+0xe>)
  movs r3, #0
 8003426:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003428:	e002      	b.n	8003430 <LoopCopyDataInit>

0800342a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800342a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800342c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800342e:	3304      	adds	r3, #4

08003430 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003430:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003432:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003434:	d3f9      	bcc.n	800342a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003436:	4a0a      	ldr	r2, [pc, #40]	; (8003460 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003438:	4c0a      	ldr	r4, [pc, #40]	; (8003464 <LoopForever+0x16>)
  movs r3, #0
 800343a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800343c:	e001      	b.n	8003442 <LoopFillZerobss>

0800343e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800343e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003440:	3204      	adds	r2, #4

08003442 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003442:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003444:	d3fb      	bcc.n	800343e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003446:	f008 fbe3 	bl	800bc10 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800344a:	f7fd ffa9 	bl	80013a0 <main>

0800344e <LoopForever>:

LoopForever:
    b LoopForever
 800344e:	e7fe      	b.n	800344e <LoopForever>
  ldr   r0, =_estack
 8003450:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8003454:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003458:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 800345c:	0800d0b0 	.word	0x0800d0b0
  ldr r2, =_sbss
 8003460:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8003464:	20000c68 	.word	0x20000c68

08003468 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003468:	e7fe      	b.n	8003468 <ADC_IRQHandler>
	...

0800346c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b082      	sub	sp, #8
 8003470:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003472:	2300      	movs	r3, #0
 8003474:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003476:	2003      	movs	r0, #3
 8003478:	f000 f930 	bl	80036dc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800347c:	f001 fe9e 	bl	80051bc <HAL_RCC_GetHCLKFreq>
 8003480:	4603      	mov	r3, r0
 8003482:	4a09      	ldr	r2, [pc, #36]	; (80034a8 <HAL_Init+0x3c>)
 8003484:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003486:	2000      	movs	r0, #0
 8003488:	f000 f810 	bl	80034ac <HAL_InitTick>
 800348c:	4603      	mov	r3, r0
 800348e:	2b00      	cmp	r3, #0
 8003490:	d002      	beq.n	8003498 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	71fb      	strb	r3, [r7, #7]
 8003496:	e001      	b.n	800349c <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003498:	f7ff fa54 	bl	8002944 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800349c:	79fb      	ldrb	r3, [r7, #7]
}
 800349e:	4618      	mov	r0, r3
 80034a0:	3708      	adds	r7, #8
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}
 80034a6:	bf00      	nop
 80034a8:	2000000c 	.word	0x2000000c

080034ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b084      	sub	sp, #16
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80034b4:	2300      	movs	r3, #0
 80034b6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80034b8:	4b17      	ldr	r3, [pc, #92]	; (8003518 <HAL_InitTick+0x6c>)
 80034ba:	781b      	ldrb	r3, [r3, #0]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d024      	beq.n	800350a <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80034c0:	f001 fe7c 	bl	80051bc <HAL_RCC_GetHCLKFreq>
 80034c4:	4602      	mov	r2, r0
 80034c6:	4b14      	ldr	r3, [pc, #80]	; (8003518 <HAL_InitTick+0x6c>)
 80034c8:	781b      	ldrb	r3, [r3, #0]
 80034ca:	4619      	mov	r1, r3
 80034cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80034d0:	fbb3 f3f1 	udiv	r3, r3, r1
 80034d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80034d8:	4618      	mov	r0, r3
 80034da:	f000 f932 	bl	8003742 <HAL_SYSTICK_Config>
 80034de:	4603      	mov	r3, r0
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d10f      	bne.n	8003504 <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2b0f      	cmp	r3, #15
 80034e8:	d809      	bhi.n	80034fe <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80034ea:	2200      	movs	r2, #0
 80034ec:	6879      	ldr	r1, [r7, #4]
 80034ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80034f2:	f000 f8fe 	bl	80036f2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80034f6:	4a09      	ldr	r2, [pc, #36]	; (800351c <HAL_InitTick+0x70>)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6013      	str	r3, [r2, #0]
 80034fc:	e007      	b.n	800350e <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	73fb      	strb	r3, [r7, #15]
 8003502:	e004      	b.n	800350e <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003504:	2301      	movs	r3, #1
 8003506:	73fb      	strb	r3, [r7, #15]
 8003508:	e001      	b.n	800350e <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800350e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003510:	4618      	mov	r0, r3
 8003512:	3710      	adds	r7, #16
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}
 8003518:	20000014 	.word	0x20000014
 800351c:	20000010 	.word	0x20000010

08003520 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003520:	b480      	push	{r7}
 8003522:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003524:	4b05      	ldr	r3, [pc, #20]	; (800353c <HAL_IncTick+0x1c>)
 8003526:	781b      	ldrb	r3, [r3, #0]
 8003528:	461a      	mov	r2, r3
 800352a:	4b05      	ldr	r3, [pc, #20]	; (8003540 <HAL_IncTick+0x20>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4413      	add	r3, r2
 8003530:	4a03      	ldr	r2, [pc, #12]	; (8003540 <HAL_IncTick+0x20>)
 8003532:	6013      	str	r3, [r2, #0]
}
 8003534:	bf00      	nop
 8003536:	46bd      	mov	sp, r7
 8003538:	bc80      	pop	{r7}
 800353a:	4770      	bx	lr
 800353c:	20000014 	.word	0x20000014
 8003540:	2000095c 	.word	0x2000095c

08003544 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003544:	b480      	push	{r7}
 8003546:	b085      	sub	sp, #20
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	f003 0307 	and.w	r3, r3, #7
 8003552:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003554:	4b0c      	ldr	r3, [pc, #48]	; (8003588 <__NVIC_SetPriorityGrouping+0x44>)
 8003556:	68db      	ldr	r3, [r3, #12]
 8003558:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800355a:	68ba      	ldr	r2, [r7, #8]
 800355c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003560:	4013      	ands	r3, r2
 8003562:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800356c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003570:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003574:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003576:	4a04      	ldr	r2, [pc, #16]	; (8003588 <__NVIC_SetPriorityGrouping+0x44>)
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	60d3      	str	r3, [r2, #12]
}
 800357c:	bf00      	nop
 800357e:	3714      	adds	r7, #20
 8003580:	46bd      	mov	sp, r7
 8003582:	bc80      	pop	{r7}
 8003584:	4770      	bx	lr
 8003586:	bf00      	nop
 8003588:	e000ed00 	.word	0xe000ed00

0800358c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800358c:	b480      	push	{r7}
 800358e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003590:	4b04      	ldr	r3, [pc, #16]	; (80035a4 <__NVIC_GetPriorityGrouping+0x18>)
 8003592:	68db      	ldr	r3, [r3, #12]
 8003594:	0a1b      	lsrs	r3, r3, #8
 8003596:	f003 0307 	and.w	r3, r3, #7
}
 800359a:	4618      	mov	r0, r3
 800359c:	46bd      	mov	sp, r7
 800359e:	bc80      	pop	{r7}
 80035a0:	4770      	bx	lr
 80035a2:	bf00      	nop
 80035a4:	e000ed00 	.word	0xe000ed00

080035a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035a8:	b480      	push	{r7}
 80035aa:	b083      	sub	sp, #12
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	4603      	mov	r3, r0
 80035b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	db0b      	blt.n	80035d2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035ba:	79fb      	ldrb	r3, [r7, #7]
 80035bc:	f003 021f 	and.w	r2, r3, #31
 80035c0:	4906      	ldr	r1, [pc, #24]	; (80035dc <__NVIC_EnableIRQ+0x34>)
 80035c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035c6:	095b      	lsrs	r3, r3, #5
 80035c8:	2001      	movs	r0, #1
 80035ca:	fa00 f202 	lsl.w	r2, r0, r2
 80035ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80035d2:	bf00      	nop
 80035d4:	370c      	adds	r7, #12
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bc80      	pop	{r7}
 80035da:	4770      	bx	lr
 80035dc:	e000e100 	.word	0xe000e100

080035e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b083      	sub	sp, #12
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	4603      	mov	r3, r0
 80035e8:	6039      	str	r1, [r7, #0]
 80035ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	db0a      	blt.n	800360a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	b2da      	uxtb	r2, r3
 80035f8:	490c      	ldr	r1, [pc, #48]	; (800362c <__NVIC_SetPriority+0x4c>)
 80035fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035fe:	0112      	lsls	r2, r2, #4
 8003600:	b2d2      	uxtb	r2, r2
 8003602:	440b      	add	r3, r1
 8003604:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003608:	e00a      	b.n	8003620 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	b2da      	uxtb	r2, r3
 800360e:	4908      	ldr	r1, [pc, #32]	; (8003630 <__NVIC_SetPriority+0x50>)
 8003610:	79fb      	ldrb	r3, [r7, #7]
 8003612:	f003 030f 	and.w	r3, r3, #15
 8003616:	3b04      	subs	r3, #4
 8003618:	0112      	lsls	r2, r2, #4
 800361a:	b2d2      	uxtb	r2, r2
 800361c:	440b      	add	r3, r1
 800361e:	761a      	strb	r2, [r3, #24]
}
 8003620:	bf00      	nop
 8003622:	370c      	adds	r7, #12
 8003624:	46bd      	mov	sp, r7
 8003626:	bc80      	pop	{r7}
 8003628:	4770      	bx	lr
 800362a:	bf00      	nop
 800362c:	e000e100 	.word	0xe000e100
 8003630:	e000ed00 	.word	0xe000ed00

08003634 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003634:	b480      	push	{r7}
 8003636:	b089      	sub	sp, #36	; 0x24
 8003638:	af00      	add	r7, sp, #0
 800363a:	60f8      	str	r0, [r7, #12]
 800363c:	60b9      	str	r1, [r7, #8]
 800363e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	f003 0307 	and.w	r3, r3, #7
 8003646:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003648:	69fb      	ldr	r3, [r7, #28]
 800364a:	f1c3 0307 	rsb	r3, r3, #7
 800364e:	2b04      	cmp	r3, #4
 8003650:	bf28      	it	cs
 8003652:	2304      	movcs	r3, #4
 8003654:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003656:	69fb      	ldr	r3, [r7, #28]
 8003658:	3304      	adds	r3, #4
 800365a:	2b06      	cmp	r3, #6
 800365c:	d902      	bls.n	8003664 <NVIC_EncodePriority+0x30>
 800365e:	69fb      	ldr	r3, [r7, #28]
 8003660:	3b03      	subs	r3, #3
 8003662:	e000      	b.n	8003666 <NVIC_EncodePriority+0x32>
 8003664:	2300      	movs	r3, #0
 8003666:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003668:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800366c:	69bb      	ldr	r3, [r7, #24]
 800366e:	fa02 f303 	lsl.w	r3, r2, r3
 8003672:	43da      	mvns	r2, r3
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	401a      	ands	r2, r3
 8003678:	697b      	ldr	r3, [r7, #20]
 800367a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800367c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	fa01 f303 	lsl.w	r3, r1, r3
 8003686:	43d9      	mvns	r1, r3
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800368c:	4313      	orrs	r3, r2
         );
}
 800368e:	4618      	mov	r0, r3
 8003690:	3724      	adds	r7, #36	; 0x24
 8003692:	46bd      	mov	sp, r7
 8003694:	bc80      	pop	{r7}
 8003696:	4770      	bx	lr

08003698 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b082      	sub	sp, #8
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	3b01      	subs	r3, #1
 80036a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80036a8:	d301      	bcc.n	80036ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80036aa:	2301      	movs	r3, #1
 80036ac:	e00f      	b.n	80036ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80036ae:	4a0a      	ldr	r2, [pc, #40]	; (80036d8 <SysTick_Config+0x40>)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	3b01      	subs	r3, #1
 80036b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80036b6:	210f      	movs	r1, #15
 80036b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80036bc:	f7ff ff90 	bl	80035e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80036c0:	4b05      	ldr	r3, [pc, #20]	; (80036d8 <SysTick_Config+0x40>)
 80036c2:	2200      	movs	r2, #0
 80036c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80036c6:	4b04      	ldr	r3, [pc, #16]	; (80036d8 <SysTick_Config+0x40>)
 80036c8:	2207      	movs	r2, #7
 80036ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80036cc:	2300      	movs	r3, #0
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	3708      	adds	r7, #8
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}
 80036d6:	bf00      	nop
 80036d8:	e000e010 	.word	0xe000e010

080036dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b082      	sub	sp, #8
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80036e4:	6878      	ldr	r0, [r7, #4]
 80036e6:	f7ff ff2d 	bl	8003544 <__NVIC_SetPriorityGrouping>
}
 80036ea:	bf00      	nop
 80036ec:	3708      	adds	r7, #8
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}

080036f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036f2:	b580      	push	{r7, lr}
 80036f4:	b086      	sub	sp, #24
 80036f6:	af00      	add	r7, sp, #0
 80036f8:	4603      	mov	r3, r0
 80036fa:	60b9      	str	r1, [r7, #8]
 80036fc:	607a      	str	r2, [r7, #4]
 80036fe:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003700:	f7ff ff44 	bl	800358c <__NVIC_GetPriorityGrouping>
 8003704:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003706:	687a      	ldr	r2, [r7, #4]
 8003708:	68b9      	ldr	r1, [r7, #8]
 800370a:	6978      	ldr	r0, [r7, #20]
 800370c:	f7ff ff92 	bl	8003634 <NVIC_EncodePriority>
 8003710:	4602      	mov	r2, r0
 8003712:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003716:	4611      	mov	r1, r2
 8003718:	4618      	mov	r0, r3
 800371a:	f7ff ff61 	bl	80035e0 <__NVIC_SetPriority>
}
 800371e:	bf00      	nop
 8003720:	3718      	adds	r7, #24
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}

08003726 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003726:	b580      	push	{r7, lr}
 8003728:	b082      	sub	sp, #8
 800372a:	af00      	add	r7, sp, #0
 800372c:	4603      	mov	r3, r0
 800372e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003730:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003734:	4618      	mov	r0, r3
 8003736:	f7ff ff37 	bl	80035a8 <__NVIC_EnableIRQ>
}
 800373a:	bf00      	nop
 800373c:	3708      	adds	r7, #8
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}

08003742 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003742:	b580      	push	{r7, lr}
 8003744:	b082      	sub	sp, #8
 8003746:	af00      	add	r7, sp, #0
 8003748:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	f7ff ffa4 	bl	8003698 <SysTick_Config>
 8003750:	4603      	mov	r3, r0
}
 8003752:	4618      	mov	r0, r3
 8003754:	3708      	adds	r7, #8
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}
	...

0800375c <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b082      	sub	sp, #8
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d101      	bne.n	800376e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	e08e      	b.n	800388c <HAL_DMA_Init+0x130>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	461a      	mov	r2, r3
 8003774:	4b47      	ldr	r3, [pc, #284]	; (8003894 <HAL_DMA_Init+0x138>)
 8003776:	429a      	cmp	r2, r3
 8003778:	d80f      	bhi.n	800379a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	461a      	mov	r2, r3
 8003780:	4b45      	ldr	r3, [pc, #276]	; (8003898 <HAL_DMA_Init+0x13c>)
 8003782:	4413      	add	r3, r2
 8003784:	4a45      	ldr	r2, [pc, #276]	; (800389c <HAL_DMA_Init+0x140>)
 8003786:	fba2 2303 	umull	r2, r3, r2, r3
 800378a:	091b      	lsrs	r3, r3, #4
 800378c:	009a      	lsls	r2, r3, #2
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	4a42      	ldr	r2, [pc, #264]	; (80038a0 <HAL_DMA_Init+0x144>)
 8003796:	641a      	str	r2, [r3, #64]	; 0x40
 8003798:	e00e      	b.n	80037b8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	461a      	mov	r2, r3
 80037a0:	4b40      	ldr	r3, [pc, #256]	; (80038a4 <HAL_DMA_Init+0x148>)
 80037a2:	4413      	add	r3, r2
 80037a4:	4a3d      	ldr	r2, [pc, #244]	; (800389c <HAL_DMA_Init+0x140>)
 80037a6:	fba2 2303 	umull	r2, r3, r2, r3
 80037aa:	091b      	lsrs	r3, r3, #4
 80037ac:	009a      	lsls	r2, r3, #2
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	4a3c      	ldr	r2, [pc, #240]	; (80038a8 <HAL_DMA_Init+0x14c>)
 80037b6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2202      	movs	r2, #2
 80037bc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	687a      	ldr	r2, [r7, #4]
 80037c8:	6812      	ldr	r2, [r2, #0]
 80037ca:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80037ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037d2:	6013      	str	r3, [r2, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	6819      	ldr	r1, [r3, #0]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	689a      	ldr	r2, [r3, #8]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	68db      	ldr	r3, [r3, #12]
 80037e2:	431a      	orrs	r2, r3
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	691b      	ldr	r3, [r3, #16]
 80037e8:	431a      	orrs	r2, r3
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	695b      	ldr	r3, [r3, #20]
 80037ee:	431a      	orrs	r2, r3
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	699b      	ldr	r3, [r3, #24]
 80037f4:	431a      	orrs	r2, r3
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	69db      	ldr	r3, [r3, #28]
 80037fa:	431a      	orrs	r2, r3
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6a1b      	ldr	r3, [r3, #32]
 8003800:	431a      	orrs	r2, r3
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	430a      	orrs	r2, r1
 8003808:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	f000 fabc 	bl	8003d88 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003818:	d102      	bne.n	8003820 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2200      	movs	r2, #0
 800381e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	685a      	ldr	r2, [r3, #4]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003828:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800382c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003832:	687a      	ldr	r2, [r7, #4]
 8003834:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003836:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d010      	beq.n	8003862 <HAL_DMA_Init+0x106>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	2b04      	cmp	r3, #4
 8003846:	d80c      	bhi.n	8003862 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003848:	6878      	ldr	r0, [r7, #4]
 800384a:	f000 fae5 	bl	8003e18 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003852:	2200      	movs	r2, #0
 8003854:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800385a:	687a      	ldr	r2, [r7, #4]
 800385c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800385e:	605a      	str	r2, [r3, #4]
 8003860:	e008      	b.n	8003874 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = NULL;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2200      	movs	r2, #0
 8003866:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = NULL;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2200      	movs	r2, #0
 800386c:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2200      	movs	r2, #0
 8003872:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2200      	movs	r2, #0
 8003878:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2201      	movs	r2, #1
 800387e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2200      	movs	r2, #0
 8003886:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800388a:	2300      	movs	r3, #0
}
 800388c:	4618      	mov	r0, r3
 800388e:	3708      	adds	r7, #8
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}
 8003894:	40020407 	.word	0x40020407
 8003898:	bffdfff8 	.word	0xbffdfff8
 800389c:	cccccccd 	.word	0xcccccccd
 80038a0:	40020000 	.word	0x40020000
 80038a4:	bffdfbf8 	.word	0xbffdfbf8
 80038a8:	40020400 	.word	0x40020400

080038ac <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b086      	sub	sp, #24
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	60f8      	str	r0, [r7, #12]
 80038b4:	60b9      	str	r1, [r7, #8]
 80038b6:	607a      	str	r2, [r7, #4]
 80038b8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80038ba:	2300      	movs	r3, #0
 80038bc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80038c4:	2b01      	cmp	r3, #1
 80038c6:	d101      	bne.n	80038cc <HAL_DMA_Start_IT+0x20>
 80038c8:	2302      	movs	r3, #2
 80038ca:	e069      	b.n	80039a0 <HAL_DMA_Start_IT+0xf4>
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2201      	movs	r2, #1
 80038d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (hdma->State == HAL_DMA_STATE_READY)
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80038da:	b2db      	uxtb	r3, r3
 80038dc:	2b01      	cmp	r3, #1
 80038de:	d155      	bne.n	800398c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	2202      	movs	r2, #2
 80038e4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	2200      	movs	r2, #0
 80038ec:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	681a      	ldr	r2, [r3, #0]
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f022 0201 	bic.w	r2, r2, #1
 80038fc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	687a      	ldr	r2, [r7, #4]
 8003902:	68b9      	ldr	r1, [r7, #8]
 8003904:	68f8      	ldr	r0, [r7, #12]
 8003906:	f000 fa02 	bl	8003d0e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800390e:	2b00      	cmp	r3, #0
 8003910:	d008      	beq.n	8003924 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	681a      	ldr	r2, [r3, #0]
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f042 020e 	orr.w	r2, r2, #14
 8003920:	601a      	str	r2, [r3, #0]
 8003922:	e00f      	b.n	8003944 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	681a      	ldr	r2, [r3, #0]
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f022 0204 	bic.w	r2, r2, #4
 8003932:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f042 020a 	orr.w	r2, r2, #10
 8003942:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800394e:	2b00      	cmp	r3, #0
 8003950:	d007      	beq.n	8003962 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003956:	681a      	ldr	r2, [r3, #0]
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800395c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003960:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != NULL)
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003966:	2b00      	cmp	r3, #0
 8003968:	d007      	beq.n	800397a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800396e:	681a      	ldr	r2, [r3, #0]
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003974:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003978:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	681a      	ldr	r2, [r3, #0]
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f042 0201 	orr.w	r2, r2, #1
 8003988:	601a      	str	r2, [r3, #0]
 800398a:	e008      	b.n	800399e <HAL_DMA_Start_IT+0xf2>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	2280      	movs	r2, #128	; 0x80
 8003990:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	2200      	movs	r2, #0
 8003996:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Return error status */
    status = HAL_ERROR;
 800399a:	2301      	movs	r3, #1
 800399c:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800399e:	7dfb      	ldrb	r3, [r7, #23]
}
 80039a0:	4618      	mov	r0, r3
 80039a2:	3718      	adds	r7, #24
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd80      	pop	{r7, pc}

080039a8 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80039a8:	b480      	push	{r7}
 80039aa:	b083      	sub	sp, #12
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d101      	bne.n	80039ba <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80039b6:	2301      	movs	r3, #1
 80039b8:	e04f      	b.n	8003a5a <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80039c0:	b2db      	uxtb	r3, r3
 80039c2:	2b02      	cmp	r3, #2
 80039c4:	d008      	beq.n	80039d8 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2204      	movs	r2, #4
 80039ca:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2200      	movs	r2, #0
 80039d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80039d4:	2301      	movs	r3, #1
 80039d6:	e040      	b.n	8003a5a <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	681a      	ldr	r2, [r3, #0]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f022 020e 	bic.w	r2, r2, #14
 80039e6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039ec:	681a      	ldr	r2, [r3, #0]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039f2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80039f6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	681a      	ldr	r2, [r3, #0]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f022 0201 	bic.w	r2, r2, #1
 8003a06:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a0c:	f003 021c 	and.w	r2, r3, #28
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a14:	2101      	movs	r1, #1
 8003a16:	fa01 f202 	lsl.w	r2, r1, r2
 8003a1a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a20:	687a      	ldr	r2, [r7, #4]
 8003a22:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003a24:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d00c      	beq.n	8003a48 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a32:	681a      	ldr	r2, [r3, #0]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a38:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a3c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a42:	687a      	ldr	r2, [r7, #4]
 8003a44:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003a46:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2200      	movs	r2, #0
 8003a54:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8003a58:	2300      	movs	r3, #0
}
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	370c      	adds	r7, #12
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bc80      	pop	{r7}
 8003a62:	4770      	bx	lr

08003a64 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b084      	sub	sp, #16
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003a76:	b2db      	uxtb	r3, r3
 8003a78:	2b02      	cmp	r3, #2
 8003a7a:	d005      	beq.n	8003a88 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2204      	movs	r2, #4
 8003a80:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003a82:	2301      	movs	r3, #1
 8003a84:	73fb      	strb	r3, [r7, #15]
 8003a86:	e047      	b.n	8003b18 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	681a      	ldr	r2, [r3, #0]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f022 020e 	bic.w	r2, r2, #14
 8003a96:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	681a      	ldr	r2, [r3, #0]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f022 0201 	bic.w	r2, r2, #1
 8003aa6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003aac:	681a      	ldr	r2, [r3, #0]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ab2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003ab6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003abc:	f003 021c 	and.w	r2, r3, #28
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac4:	2101      	movs	r1, #1
 8003ac6:	fa01 f202 	lsl.w	r2, r1, r2
 8003aca:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ad0:	687a      	ldr	r2, [r7, #4]
 8003ad2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003ad4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d00c      	beq.n	8003af8 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ae2:	681a      	ldr	r2, [r3, #0]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ae8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003aec:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003af2:	687a      	ldr	r2, [r7, #4]
 8003af4:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003af6:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2201      	movs	r2, #1
 8003afc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2200      	movs	r2, #0
 8003b04:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d003      	beq.n	8003b18 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b14:	6878      	ldr	r0, [r7, #4]
 8003b16:	4798      	blx	r3
    }
  }
  return status;
 8003b18:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	3710      	adds	r7, #16
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}
	...

08003b24 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b084      	sub	sp, #16
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b40:	f003 031c 	and.w	r3, r3, #28
 8003b44:	2204      	movs	r2, #4
 8003b46:	409a      	lsls	r2, r3
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	4013      	ands	r3, r2
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d027      	beq.n	8003ba0 <HAL_DMA_IRQHandler+0x7c>
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	f003 0304 	and.w	r3, r3, #4
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d022      	beq.n	8003ba0 <HAL_DMA_IRQHandler+0x7c>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f003 0320 	and.w	r3, r3, #32
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d107      	bne.n	8003b78 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	681a      	ldr	r2, [r3, #0]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f022 0204 	bic.w	r2, r2, #4
 8003b76:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b7c:	f003 021c 	and.w	r2, r3, #28
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b84:	2104      	movs	r1, #4
 8003b86:	fa01 f202 	lsl.w	r2, r1, r2
 8003b8a:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	f000 8081 	beq.w	8003c98 <HAL_DMA_IRQHandler+0x174>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8003b9e:	e07b      	b.n	8003c98 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ba4:	f003 031c 	and.w	r3, r3, #28
 8003ba8:	2202      	movs	r2, #2
 8003baa:	409a      	lsls	r2, r3
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	4013      	ands	r3, r2
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d03d      	beq.n	8003c30 <HAL_DMA_IRQHandler+0x10c>
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	f003 0302 	and.w	r3, r3, #2
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d038      	beq.n	8003c30 <HAL_DMA_IRQHandler+0x10c>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f003 0320 	and.w	r3, r3, #32
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d10b      	bne.n	8003be4 <HAL_DMA_IRQHandler+0xc0>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	681a      	ldr	r2, [r3, #0]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f022 020a 	bic.w	r2, r2, #10
 8003bda:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2201      	movs	r2, #1
 8003be0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	461a      	mov	r2, r3
 8003bea:	4b2e      	ldr	r3, [pc, #184]	; (8003ca4 <HAL_DMA_IRQHandler+0x180>)
 8003bec:	429a      	cmp	r2, r3
 8003bee:	d909      	bls.n	8003c04 <HAL_DMA_IRQHandler+0xe0>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bf4:	f003 031c 	and.w	r3, r3, #28
 8003bf8:	4a2b      	ldr	r2, [pc, #172]	; (8003ca8 <HAL_DMA_IRQHandler+0x184>)
 8003bfa:	2102      	movs	r1, #2
 8003bfc:	fa01 f303 	lsl.w	r3, r1, r3
 8003c00:	6053      	str	r3, [r2, #4]
 8003c02:	e008      	b.n	8003c16 <HAL_DMA_IRQHandler+0xf2>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c08:	f003 031c 	and.w	r3, r3, #28
 8003c0c:	4a27      	ldr	r2, [pc, #156]	; (8003cac <HAL_DMA_IRQHandler+0x188>)
 8003c0e:	2102      	movs	r1, #2
 8003c10:	fa01 f303 	lsl.w	r3, r1, r3
 8003c14:	6053      	str	r3, [r2, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      if (hdma->XferCpltCallback != NULL)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d038      	beq.n	8003c98 <HAL_DMA_IRQHandler+0x174>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8003c2e:	e033      	b.n	8003c98 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c34:	f003 031c 	and.w	r3, r3, #28
 8003c38:	2208      	movs	r2, #8
 8003c3a:	409a      	lsls	r2, r3
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	4013      	ands	r3, r2
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d02a      	beq.n	8003c9a <HAL_DMA_IRQHandler+0x176>
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	f003 0308 	and.w	r3, r3, #8
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d025      	beq.n	8003c9a <HAL_DMA_IRQHandler+0x176>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	681a      	ldr	r2, [r3, #0]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f022 020e 	bic.w	r2, r2, #14
 8003c5c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c62:	f003 021c 	and.w	r2, r3, #28
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c6a:	2101      	movs	r1, #1
 8003c6c:	fa01 f202 	lsl.w	r2, r1, r2
 8003c70:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2201      	movs	r2, #1
 8003c76:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2200      	movs	r2, #0
 8003c84:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d004      	beq.n	8003c9a <HAL_DMA_IRQHandler+0x176>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c94:	6878      	ldr	r0, [r7, #4]
 8003c96:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003c98:	bf00      	nop
 8003c9a:	bf00      	nop
}
 8003c9c:	3710      	adds	r7, #16
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}
 8003ca2:	bf00      	nop
 8003ca4:	40020080 	.word	0x40020080
 8003ca8:	40020400 	.word	0x40020400
 8003cac:	40020000 	.word	0x40020000

08003cb0 <HAL_DMA_ConfigChannelAttributes>:
  * @param ChannelAttributes specifies the DMA channel secure/privilege attributes.
  *        This parameter can be a one or a combination of @ref DMA_Channel_Attributes
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *hdma, uint32_t ChannelAttributes)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b085      	sub	sp, #20
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
 8003cb8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003cba:	2300      	movs	r3, #0
 8003cbc:	72fb      	strb	r3, [r7, #11]
#if defined (CORE_CM0PLUS)
  uint32_t ccr_SECM;
#endif /* CORE_CM0PLUS */

  /* Check the DMA peripheral handle */
  if (hdma == NULL)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d103      	bne.n	8003ccc <HAL_DMA_ConfigChannelAttributes+0x1c>
  {
    status = HAL_ERROR;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	72fb      	strb	r3, [r7, #11]
    return status;
 8003cc8:	7afb      	ldrb	r3, [r7, #11]
 8003cca:	e01b      	b.n	8003d04 <HAL_DMA_ConfigChannelAttributes+0x54>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Read CCR register */
  ccr = READ_REG(hdma->Instance->CCR);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	60fb      	str	r3, [r7, #12]

  /* Apply any requested privilege/non-privilege attributes */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) != 0U)
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	f003 0310 	and.w	r3, r3, #16
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d00d      	beq.n	8003cfa <HAL_DMA_ConfigChannelAttributes+0x4a>
  {
    if ((ChannelAttributes & DMA_CCR_PRIV) != 0U)
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d004      	beq.n	8003cf2 <HAL_DMA_ConfigChannelAttributes+0x42>
    {
      SET_BIT(ccr, DMA_CCR_PRIV);
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003cee:	60fb      	str	r3, [r7, #12]
 8003cf0:	e003      	b.n	8003cfa <HAL_DMA_ConfigChannelAttributes+0x4a>
    }
    else
    {
      CLEAR_BIT(ccr, DMA_CCR_PRIV);
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003cf8:	60fb      	str	r3, [r7, #12]
  }

#endif /* CORE_CM0PLUS */

  /* Update CCR Register: PRIV, SECM, SCEC, DSEC bits */
  WRITE_REG(hdma->Instance->CCR, ccr);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	68fa      	ldr	r2, [r7, #12]
 8003d00:	601a      	str	r2, [r3, #0]

  return status;
 8003d02:	7afb      	ldrb	r3, [r7, #11]
}
 8003d04:	4618      	mov	r0, r3
 8003d06:	3714      	adds	r7, #20
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bc80      	pop	{r7}
 8003d0c:	4770      	bx	lr

08003d0e <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003d0e:	b480      	push	{r7}
 8003d10:	b085      	sub	sp, #20
 8003d12:	af00      	add	r7, sp, #0
 8003d14:	60f8      	str	r0, [r7, #12]
 8003d16:	60b9      	str	r1, [r7, #8]
 8003d18:	607a      	str	r2, [r7, #4]
 8003d1a:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d20:	68fa      	ldr	r2, [r7, #12]
 8003d22:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003d24:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != NULL)
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d004      	beq.n	8003d38 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d32:	68fa      	ldr	r2, [r7, #12]
 8003d34:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003d36:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d3c:	f003 021c 	and.w	r2, r3, #28
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d44:	2101      	movs	r1, #1
 8003d46:	fa01 f202 	lsl.w	r2, r1, r2
 8003d4a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	683a      	ldr	r2, [r7, #0]
 8003d52:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	689b      	ldr	r3, [r3, #8]
 8003d58:	2b10      	cmp	r3, #16
 8003d5a:	d108      	bne.n	8003d6e <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	687a      	ldr	r2, [r7, #4]
 8003d62:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	68ba      	ldr	r2, [r7, #8]
 8003d6a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003d6c:	e007      	b.n	8003d7e <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	68ba      	ldr	r2, [r7, #8]
 8003d74:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	687a      	ldr	r2, [r7, #4]
 8003d7c:	60da      	str	r2, [r3, #12]
}
 8003d7e:	bf00      	nop
 8003d80:	3714      	adds	r7, #20
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bc80      	pop	{r7}
 8003d86:	4770      	bx	lr

08003d88 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	b085      	sub	sp, #20
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	461a      	mov	r2, r3
 8003d96:	4b1c      	ldr	r3, [pc, #112]	; (8003e08 <DMA_CalcDMAMUXChannelBaseAndMask+0x80>)
 8003d98:	429a      	cmp	r2, r3
 8003d9a:	d813      	bhi.n	8003dc4 <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003da0:	089b      	lsrs	r3, r3, #2
 8003da2:	009b      	lsls	r3, r3, #2
 8003da4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003da8:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8003dac:	687a      	ldr	r2, [r7, #4]
 8003dae:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	b2db      	uxtb	r3, r3
 8003db6:	3b08      	subs	r3, #8
 8003db8:	4a14      	ldr	r2, [pc, #80]	; (8003e0c <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8003dba:	fba2 2303 	umull	r2, r3, r2, r3
 8003dbe:	091b      	lsrs	r3, r3, #4
 8003dc0:	60fb      	str	r3, [r7, #12]
 8003dc2:	e011      	b.n	8003de8 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dc8:	089b      	lsrs	r3, r3, #2
 8003dca:	009a      	lsls	r2, r3, #2
 8003dcc:	4b10      	ldr	r3, [pc, #64]	; (8003e10 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 8003dce:	4413      	add	r3, r2
 8003dd0:	687a      	ldr	r2, [r7, #4]
 8003dd2:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	b2db      	uxtb	r3, r3
 8003dda:	3b08      	subs	r3, #8
 8003ddc:	4a0b      	ldr	r2, [pc, #44]	; (8003e0c <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8003dde:	fba2 2303 	umull	r2, r3, r2, r3
 8003de2:	091b      	lsrs	r3, r3, #4
 8003de4:	3307      	adds	r3, #7
 8003de6:	60fb      	str	r3, [r7, #12]
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	4a0a      	ldr	r2, [pc, #40]	; (8003e14 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 8003dec:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	f003 031f 	and.w	r3, r3, #31
 8003df4:	2201      	movs	r2, #1
 8003df6:	409a      	lsls	r2, r3
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003dfc:	bf00      	nop
 8003dfe:	3714      	adds	r7, #20
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bc80      	pop	{r7}
 8003e04:	4770      	bx	lr
 8003e06:	bf00      	nop
 8003e08:	40020407 	.word	0x40020407
 8003e0c:	cccccccd 	.word	0xcccccccd
 8003e10:	4002081c 	.word	0x4002081c
 8003e14:	40020880 	.word	0x40020880

08003e18 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b085      	sub	sp, #20
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e28:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003e2a:	68fa      	ldr	r2, [r7, #12]
 8003e2c:	4b0a      	ldr	r3, [pc, #40]	; (8003e58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003e2e:	4413      	add	r3, r2
 8003e30:	009b      	lsls	r3, r3, #2
 8003e32:	461a      	mov	r2, r3
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	4a08      	ldr	r2, [pc, #32]	; (8003e5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003e3c:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	3b01      	subs	r3, #1
 8003e42:	f003 0303 	and.w	r3, r3, #3
 8003e46:	2201      	movs	r2, #1
 8003e48:	409a      	lsls	r2, r3
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003e4e:	bf00      	nop
 8003e50:	3714      	adds	r7, #20
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bc80      	pop	{r7}
 8003e56:	4770      	bx	lr
 8003e58:	1000823f 	.word	0x1000823f
 8003e5c:	40020940 	.word	0x40020940

08003e60 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e60:	b480      	push	{r7}
 8003e62:	b087      	sub	sp, #28
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
 8003e68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e6e:	e140      	b.n	80040f2 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	681a      	ldr	r2, [r3, #0]
 8003e74:	2101      	movs	r1, #1
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	fa01 f303 	lsl.w	r3, r1, r3
 8003e7c:	4013      	ands	r3, r2
 8003e7e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	f000 8132 	beq.w	80040ec <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	f003 0303 	and.w	r3, r3, #3
 8003e90:	2b01      	cmp	r3, #1
 8003e92:	d005      	beq.n	8003ea0 <HAL_GPIO_Init+0x40>
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	f003 0303 	and.w	r3, r3, #3
 8003e9c:	2b02      	cmp	r3, #2
 8003e9e:	d130      	bne.n	8003f02 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	689b      	ldr	r3, [r3, #8]
 8003ea4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	005b      	lsls	r3, r3, #1
 8003eaa:	2203      	movs	r2, #3
 8003eac:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb0:	43db      	mvns	r3, r3
 8003eb2:	693a      	ldr	r2, [r7, #16]
 8003eb4:	4013      	ands	r3, r2
 8003eb6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	68da      	ldr	r2, [r3, #12]
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	005b      	lsls	r3, r3, #1
 8003ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec4:	693a      	ldr	r2, [r7, #16]
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	693a      	ldr	r2, [r7, #16]
 8003ece:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003ed6:	2201      	movs	r2, #1
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	fa02 f303 	lsl.w	r3, r2, r3
 8003ede:	43db      	mvns	r3, r3
 8003ee0:	693a      	ldr	r2, [r7, #16]
 8003ee2:	4013      	ands	r3, r2
 8003ee4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	091b      	lsrs	r3, r3, #4
 8003eec:	f003 0201 	and.w	r2, r3, #1
 8003ef0:	697b      	ldr	r3, [r7, #20]
 8003ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef6:	693a      	ldr	r2, [r7, #16]
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	693a      	ldr	r2, [r7, #16]
 8003f00:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	f003 0303 	and.w	r3, r3, #3
 8003f0a:	2b03      	cmp	r3, #3
 8003f0c:	d017      	beq.n	8003f3e <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	68db      	ldr	r3, [r3, #12]
 8003f12:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	005b      	lsls	r3, r3, #1
 8003f18:	2203      	movs	r2, #3
 8003f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f1e:	43db      	mvns	r3, r3
 8003f20:	693a      	ldr	r2, [r7, #16]
 8003f22:	4013      	ands	r3, r2
 8003f24:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	689a      	ldr	r2, [r3, #8]
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	005b      	lsls	r3, r3, #1
 8003f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f32:	693a      	ldr	r2, [r7, #16]
 8003f34:	4313      	orrs	r3, r2
 8003f36:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	693a      	ldr	r2, [r7, #16]
 8003f3c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	f003 0303 	and.w	r3, r3, #3
 8003f46:	2b02      	cmp	r3, #2
 8003f48:	d123      	bne.n	8003f92 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	08da      	lsrs	r2, r3, #3
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	3208      	adds	r2, #8
 8003f52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f56:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003f58:	697b      	ldr	r3, [r7, #20]
 8003f5a:	f003 0307 	and.w	r3, r3, #7
 8003f5e:	009b      	lsls	r3, r3, #2
 8003f60:	220f      	movs	r2, #15
 8003f62:	fa02 f303 	lsl.w	r3, r2, r3
 8003f66:	43db      	mvns	r3, r3
 8003f68:	693a      	ldr	r2, [r7, #16]
 8003f6a:	4013      	ands	r3, r2
 8003f6c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	691a      	ldr	r2, [r3, #16]
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	f003 0307 	and.w	r3, r3, #7
 8003f78:	009b      	lsls	r3, r3, #2
 8003f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f7e:	693a      	ldr	r2, [r7, #16]
 8003f80:	4313      	orrs	r3, r2
 8003f82:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	08da      	lsrs	r2, r3, #3
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	3208      	adds	r2, #8
 8003f8c:	6939      	ldr	r1, [r7, #16]
 8003f8e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	005b      	lsls	r3, r3, #1
 8003f9c:	2203      	movs	r2, #3
 8003f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003fa2:	43db      	mvns	r3, r3
 8003fa4:	693a      	ldr	r2, [r7, #16]
 8003fa6:	4013      	ands	r3, r2
 8003fa8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	f003 0203 	and.w	r2, r3, #3
 8003fb2:	697b      	ldr	r3, [r7, #20]
 8003fb4:	005b      	lsls	r3, r3, #1
 8003fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8003fba:	693a      	ldr	r2, [r7, #16]
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	693a      	ldr	r2, [r7, #16]
 8003fc4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	f000 808c 	beq.w	80040ec <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8003fd4:	4a4e      	ldr	r2, [pc, #312]	; (8004110 <HAL_GPIO_Init+0x2b0>)
 8003fd6:	697b      	ldr	r3, [r7, #20]
 8003fd8:	089b      	lsrs	r3, r3, #2
 8003fda:	3302      	adds	r3, #2
 8003fdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fe0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8003fe2:	697b      	ldr	r3, [r7, #20]
 8003fe4:	f003 0303 	and.w	r3, r3, #3
 8003fe8:	009b      	lsls	r3, r3, #2
 8003fea:	2207      	movs	r2, #7
 8003fec:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff0:	43db      	mvns	r3, r3
 8003ff2:	693a      	ldr	r2, [r7, #16]
 8003ff4:	4013      	ands	r3, r2
 8003ff6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003ffe:	d00d      	beq.n	800401c <HAL_GPIO_Init+0x1bc>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	4a44      	ldr	r2, [pc, #272]	; (8004114 <HAL_GPIO_Init+0x2b4>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d007      	beq.n	8004018 <HAL_GPIO_Init+0x1b8>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	4a43      	ldr	r2, [pc, #268]	; (8004118 <HAL_GPIO_Init+0x2b8>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d101      	bne.n	8004014 <HAL_GPIO_Init+0x1b4>
 8004010:	2302      	movs	r3, #2
 8004012:	e004      	b.n	800401e <HAL_GPIO_Init+0x1be>
 8004014:	2307      	movs	r3, #7
 8004016:	e002      	b.n	800401e <HAL_GPIO_Init+0x1be>
 8004018:	2301      	movs	r3, #1
 800401a:	e000      	b.n	800401e <HAL_GPIO_Init+0x1be>
 800401c:	2300      	movs	r3, #0
 800401e:	697a      	ldr	r2, [r7, #20]
 8004020:	f002 0203 	and.w	r2, r2, #3
 8004024:	0092      	lsls	r2, r2, #2
 8004026:	4093      	lsls	r3, r2
 8004028:	693a      	ldr	r2, [r7, #16]
 800402a:	4313      	orrs	r3, r2
 800402c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800402e:	4938      	ldr	r1, [pc, #224]	; (8004110 <HAL_GPIO_Init+0x2b0>)
 8004030:	697b      	ldr	r3, [r7, #20]
 8004032:	089b      	lsrs	r3, r3, #2
 8004034:	3302      	adds	r3, #2
 8004036:	693a      	ldr	r2, [r7, #16]
 8004038:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800403c:	4b37      	ldr	r3, [pc, #220]	; (800411c <HAL_GPIO_Init+0x2bc>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	43db      	mvns	r3, r3
 8004046:	693a      	ldr	r2, [r7, #16]
 8004048:	4013      	ands	r3, r2
 800404a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004054:	2b00      	cmp	r3, #0
 8004056:	d003      	beq.n	8004060 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8004058:	693a      	ldr	r2, [r7, #16]
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	4313      	orrs	r3, r2
 800405e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004060:	4a2e      	ldr	r2, [pc, #184]	; (800411c <HAL_GPIO_Init+0x2bc>)
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004066:	4b2d      	ldr	r3, [pc, #180]	; (800411c <HAL_GPIO_Init+0x2bc>)
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	43db      	mvns	r3, r3
 8004070:	693a      	ldr	r2, [r7, #16]
 8004072:	4013      	ands	r3, r2
 8004074:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800407e:	2b00      	cmp	r3, #0
 8004080:	d003      	beq.n	800408a <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8004082:	693a      	ldr	r2, [r7, #16]
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	4313      	orrs	r3, r2
 8004088:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800408a:	4a24      	ldr	r2, [pc, #144]	; (800411c <HAL_GPIO_Init+0x2bc>)
 800408c:	693b      	ldr	r3, [r7, #16]
 800408e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8004090:	4b22      	ldr	r3, [pc, #136]	; (800411c <HAL_GPIO_Init+0x2bc>)
 8004092:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004096:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	43db      	mvns	r3, r3
 800409c:	693a      	ldr	r2, [r7, #16]
 800409e:	4013      	ands	r3, r2
 80040a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d003      	beq.n	80040b6 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 80040ae:	693a      	ldr	r2, [r7, #16]
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	4313      	orrs	r3, r2
 80040b4:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 80040b6:	4a19      	ldr	r2, [pc, #100]	; (800411c <HAL_GPIO_Init+0x2bc>)
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 80040be:	4b17      	ldr	r3, [pc, #92]	; (800411c <HAL_GPIO_Init+0x2bc>)
 80040c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040c4:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	43db      	mvns	r3, r3
 80040ca:	693a      	ldr	r2, [r7, #16]
 80040cc:	4013      	ands	r3, r2
 80040ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d003      	beq.n	80040e4 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80040dc:	693a      	ldr	r2, [r7, #16]
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	4313      	orrs	r3, r2
 80040e2:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 80040e4:	4a0d      	ldr	r2, [pc, #52]	; (800411c <HAL_GPIO_Init+0x2bc>)
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	3301      	adds	r3, #1
 80040f0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	681a      	ldr	r2, [r3, #0]
 80040f6:	697b      	ldr	r3, [r7, #20]
 80040f8:	fa22 f303 	lsr.w	r3, r2, r3
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	f47f aeb7 	bne.w	8003e70 <HAL_GPIO_Init+0x10>
  }
}
 8004102:	bf00      	nop
 8004104:	bf00      	nop
 8004106:	371c      	adds	r7, #28
 8004108:	46bd      	mov	sp, r7
 800410a:	bc80      	pop	{r7}
 800410c:	4770      	bx	lr
 800410e:	bf00      	nop
 8004110:	40010000 	.word	0x40010000
 8004114:	48000400 	.word	0x48000400
 8004118:	48000800 	.word	0x48000800
 800411c:	58000800 	.word	0x58000800

08004120 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004120:	b480      	push	{r7}
 8004122:	b083      	sub	sp, #12
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
 8004128:	460b      	mov	r3, r1
 800412a:	807b      	strh	r3, [r7, #2]
 800412c:	4613      	mov	r3, r2
 800412e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004130:	787b      	ldrb	r3, [r7, #1]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d003      	beq.n	800413e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004136:	887a      	ldrh	r2, [r7, #2]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800413c:	e002      	b.n	8004144 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800413e:	887a      	ldrh	r2, [r7, #2]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004144:	bf00      	nop
 8004146:	370c      	adds	r7, #12
 8004148:	46bd      	mov	sp, r7
 800414a:	bc80      	pop	{r7}
 800414c:	4770      	bx	lr
	...

08004150 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004150:	b480      	push	{r7}
 8004152:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004154:	4b04      	ldr	r3, [pc, #16]	; (8004168 <HAL_PWR_EnableBkUpAccess+0x18>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a03      	ldr	r2, [pc, #12]	; (8004168 <HAL_PWR_EnableBkUpAccess+0x18>)
 800415a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800415e:	6013      	str	r3, [r2, #0]
}
 8004160:	bf00      	nop
 8004162:	46bd      	mov	sp, r7
 8004164:	bc80      	pop	{r7}
 8004166:	4770      	bx	lr
 8004168:	58000400 	.word	0x58000400

0800416c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800416c:	b480      	push	{r7}
 800416e:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8004170:	4b03      	ldr	r3, [pc, #12]	; (8004180 <HAL_PWREx_GetVoltageRange+0x14>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8004178:	4618      	mov	r0, r3
 800417a:	46bd      	mov	sp, r7
 800417c:	bc80      	pop	{r7}
 800417e:	4770      	bx	lr
 8004180:	58000400 	.word	0x58000400

08004184 <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 8004184:	b480      	push	{r7}
 8004186:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8004188:	4b06      	ldr	r3, [pc, #24]	; (80041a4 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004190:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004194:	d101      	bne.n	800419a <LL_PWR_IsEnabledBkUpAccess+0x16>
 8004196:	2301      	movs	r3, #1
 8004198:	e000      	b.n	800419c <LL_PWR_IsEnabledBkUpAccess+0x18>
 800419a:	2300      	movs	r3, #0
}
 800419c:	4618      	mov	r0, r3
 800419e:	46bd      	mov	sp, r7
 80041a0:	bc80      	pop	{r7}
 80041a2:	4770      	bx	lr
 80041a4:	58000400 	.word	0x58000400

080041a8 <LL_RCC_HSE_EnableTcxo>:
  * @note PB0 must be configured in analog mode prior enabling VDDTCXO supply
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_EnableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableTcxo(void)
{
 80041a8:	b480      	push	{r7}
 80041aa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80041ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80041b6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80041ba:	6013      	str	r3, [r2, #0]
}
 80041bc:	bf00      	nop
 80041be:	46bd      	mov	sp, r7
 80041c0:	bc80      	pop	{r7}
 80041c2:	4770      	bx	lr

080041c4 <LL_RCC_HSE_DisableTcxo>:
  * @brief  Disable HSE VDDTCXO output on package pin PB0-VDDTCXO
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_DisableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_DisableTcxo(void)
{
 80041c4:	b480      	push	{r7}
 80041c6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80041c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80041d2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80041d6:	6013      	str	r3, [r2, #0]
}
 80041d8:	bf00      	nop
 80041da:	46bd      	mov	sp, r7
 80041dc:	bc80      	pop	{r7}
 80041de:	4770      	bx	lr

080041e0 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler  division by 2
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 80041e0:	b480      	push	{r7}
 80041e2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80041e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80041ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80041f2:	d101      	bne.n	80041f8 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80041f4:	2301      	movs	r3, #1
 80041f6:	e000      	b.n	80041fa <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80041f8:	2300      	movs	r3, #0
}
 80041fa:	4618      	mov	r0, r3
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bc80      	pop	{r7}
 8004200:	4770      	bx	lr

08004202 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8004202:	b480      	push	{r7}
 8004204:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8004206:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004210:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004214:	6013      	str	r3, [r2, #0]
}
 8004216:	bf00      	nop
 8004218:	46bd      	mov	sp, r7
 800421a:	bc80      	pop	{r7}
 800421c:	4770      	bx	lr

0800421e <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 800421e:	b480      	push	{r7}
 8004220:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8004222:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800422c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004230:	6013      	str	r3, [r2, #0]
}
 8004232:	bf00      	nop
 8004234:	46bd      	mov	sp, r7
 8004236:	bc80      	pop	{r7}
 8004238:	4770      	bx	lr

0800423a <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 800423a:	b480      	push	{r7}
 800423c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800423e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004248:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800424c:	d101      	bne.n	8004252 <LL_RCC_HSE_IsReady+0x18>
 800424e:	2301      	movs	r3, #1
 8004250:	e000      	b.n	8004254 <LL_RCC_HSE_IsReady+0x1a>
 8004252:	2300      	movs	r3, #0
}
 8004254:	4618      	mov	r0, r3
 8004256:	46bd      	mov	sp, r7
 8004258:	bc80      	pop	{r7}
 800425a:	4770      	bx	lr

0800425c <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 800425c:	b480      	push	{r7}
 800425e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8004260:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800426a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800426e:	6013      	str	r3, [r2, #0]
}
 8004270:	bf00      	nop
 8004272:	46bd      	mov	sp, r7
 8004274:	bc80      	pop	{r7}
 8004276:	4770      	bx	lr

08004278 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8004278:	b480      	push	{r7}
 800427a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800427c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004286:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800428a:	6013      	str	r3, [r2, #0]
}
 800428c:	bf00      	nop
 800428e:	46bd      	mov	sp, r7
 8004290:	bc80      	pop	{r7}
 8004292:	4770      	bx	lr

08004294 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8004294:	b480      	push	{r7}
 8004296:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8004298:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042a6:	d101      	bne.n	80042ac <LL_RCC_HSI_IsReady+0x18>
 80042a8:	2301      	movs	r3, #1
 80042aa:	e000      	b.n	80042ae <LL_RCC_HSI_IsReady+0x1a>
 80042ac:	2300      	movs	r3, #0
}
 80042ae:	4618      	mov	r0, r3
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bc80      	pop	{r7}
 80042b4:	4770      	bx	lr

080042b6 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 80042b6:	b480      	push	{r7}
 80042b8:	b083      	sub	sp, #12
 80042ba:	af00      	add	r7, sp, #0
 80042bc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80042be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	061b      	lsls	r3, r3, #24
 80042cc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80042d0:	4313      	orrs	r3, r2
 80042d2:	604b      	str	r3, [r1, #4]
}
 80042d4:	bf00      	nop
 80042d6:	370c      	adds	r7, #12
 80042d8:	46bd      	mov	sp, r7
 80042da:	bc80      	pop	{r7}
 80042dc:	4770      	bx	lr

080042de <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 80042de:	b480      	push	{r7}
 80042e0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80042e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042ea:	f003 0302 	and.w	r3, r3, #2
 80042ee:	2b02      	cmp	r3, #2
 80042f0:	d101      	bne.n	80042f6 <LL_RCC_LSE_IsReady+0x18>
 80042f2:	2301      	movs	r3, #1
 80042f4:	e000      	b.n	80042f8 <LL_RCC_LSE_IsReady+0x1a>
 80042f6:	2300      	movs	r3, #0
}
 80042f8:	4618      	mov	r0, r3
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bc80      	pop	{r7}
 80042fe:	4770      	bx	lr

08004300 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 8004300:	b480      	push	{r7}
 8004302:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8004304:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004308:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800430c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004310:	f043 0301 	orr.w	r3, r3, #1
 8004314:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004318:	bf00      	nop
 800431a:	46bd      	mov	sp, r7
 800431c:	bc80      	pop	{r7}
 800431e:	4770      	bx	lr

08004320 <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 8004320:	b480      	push	{r7}
 8004322:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8004324:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004328:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800432c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004330:	f023 0301 	bic.w	r3, r3, #1
 8004334:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004338:	bf00      	nop
 800433a:	46bd      	mov	sp, r7
 800433c:	bc80      	pop	{r7}
 800433e:	4770      	bx	lr

08004340 <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 8004340:	b480      	push	{r7}
 8004342:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8004344:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004348:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800434c:	f003 0302 	and.w	r3, r3, #2
 8004350:	2b02      	cmp	r3, #2
 8004352:	d101      	bne.n	8004358 <LL_RCC_LSI_IsReady+0x18>
 8004354:	2301      	movs	r3, #1
 8004356:	e000      	b.n	800435a <LL_RCC_LSI_IsReady+0x1a>
 8004358:	2300      	movs	r3, #0
}
 800435a:	4618      	mov	r0, r3
 800435c:	46bd      	mov	sp, r7
 800435e:	bc80      	pop	{r7}
 8004360:	4770      	bx	lr

08004362 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8004362:	b480      	push	{r7}
 8004364:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8004366:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004370:	f043 0301 	orr.w	r3, r3, #1
 8004374:	6013      	str	r3, [r2, #0]
}
 8004376:	bf00      	nop
 8004378:	46bd      	mov	sp, r7
 800437a:	bc80      	pop	{r7}
 800437c:	4770      	bx	lr

0800437e <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 800437e:	b480      	push	{r7}
 8004380:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8004382:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800438c:	f023 0301 	bic.w	r3, r3, #1
 8004390:	6013      	str	r3, [r2, #0]
}
 8004392:	bf00      	nop
 8004394:	46bd      	mov	sp, r7
 8004396:	bc80      	pop	{r7}
 8004398:	4770      	bx	lr

0800439a <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 800439a:	b480      	push	{r7}
 800439c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800439e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f003 0302 	and.w	r3, r3, #2
 80043a8:	2b02      	cmp	r3, #2
 80043aa:	d101      	bne.n	80043b0 <LL_RCC_MSI_IsReady+0x16>
 80043ac:	2301      	movs	r3, #1
 80043ae:	e000      	b.n	80043b2 <LL_RCC_MSI_IsReady+0x18>
 80043b0:	2300      	movs	r3, #0
}
 80043b2:	4618      	mov	r0, r3
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bc80      	pop	{r7}
 80043b8:	4770      	bx	lr

080043ba <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 80043ba:	b480      	push	{r7}
 80043bc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 80043be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f003 0308 	and.w	r3, r3, #8
 80043c8:	2b08      	cmp	r3, #8
 80043ca:	d101      	bne.n	80043d0 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 80043cc:	2301      	movs	r3, #1
 80043ce:	e000      	b.n	80043d2 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 80043d0:	2300      	movs	r3, #0
}
 80043d2:	4618      	mov	r0, r3
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bc80      	pop	{r7}
 80043d8:	4770      	bx	lr

080043da <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 80043da:	b480      	push	{r7}
 80043dc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 80043de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80043e8:	4618      	mov	r0, r3
 80043ea:	46bd      	mov	sp, r7
 80043ec:	bc80      	pop	{r7}
 80043ee:	4770      	bx	lr

080043f0 <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 80043f0:	b480      	push	{r7}
 80043f2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 80043f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043fc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8004400:	4618      	mov	r0, r3
 8004402:	46bd      	mov	sp, r7
 8004404:	bc80      	pop	{r7}
 8004406:	4770      	bx	lr

08004408 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8004408:	b480      	push	{r7}
 800440a:	b083      	sub	sp, #12
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8004410:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	021b      	lsls	r3, r3, #8
 800441e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004422:	4313      	orrs	r3, r2
 8004424:	604b      	str	r3, [r1, #4]
}
 8004426:	bf00      	nop
 8004428:	370c      	adds	r7, #12
 800442a:	46bd      	mov	sp, r7
 800442c:	bc80      	pop	{r7}
 800442e:	4770      	bx	lr

08004430 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8004430:	b480      	push	{r7}
 8004432:	b083      	sub	sp, #12
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8004438:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800443c:	689b      	ldr	r3, [r3, #8]
 800443e:	f023 0203 	bic.w	r2, r3, #3
 8004442:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	4313      	orrs	r3, r2
 800444a:	608b      	str	r3, [r1, #8]
}
 800444c:	bf00      	nop
 800444e:	370c      	adds	r7, #12
 8004450:	46bd      	mov	sp, r7
 8004452:	bc80      	pop	{r7}
 8004454:	4770      	bx	lr

08004456 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8004456:	b480      	push	{r7}
 8004458:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800445a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800445e:	689b      	ldr	r3, [r3, #8]
 8004460:	f003 030c 	and.w	r3, r3, #12
}
 8004464:	4618      	mov	r0, r3
 8004466:	46bd      	mov	sp, r7
 8004468:	bc80      	pop	{r7}
 800446a:	4770      	bx	lr

0800446c <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800446c:	b480      	push	{r7}
 800446e:	b083      	sub	sp, #12
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8004474:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004478:	689b      	ldr	r3, [r3, #8]
 800447a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800447e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	4313      	orrs	r3, r2
 8004486:	608b      	str	r3, [r1, #8]
}
 8004488:	bf00      	nop
 800448a:	370c      	adds	r7, #12
 800448c:	46bd      	mov	sp, r7
 800448e:	bc80      	pop	{r7}
 8004490:	4770      	bx	lr

08004492 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8004492:	b480      	push	{r7}
 8004494:	b083      	sub	sp, #12
 8004496:	af00      	add	r7, sp, #0
 8004498:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800449a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800449e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80044a2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80044a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	4313      	orrs	r3, r2
 80044ae:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80044b2:	bf00      	nop
 80044b4:	370c      	adds	r7, #12
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bc80      	pop	{r7}
 80044ba:	4770      	bx	lr

080044bc <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 80044bc:	b480      	push	{r7}
 80044be:	b083      	sub	sp, #12
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80044c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044c8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80044cc:	f023 020f 	bic.w	r2, r3, #15
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	091b      	lsrs	r3, r3, #4
 80044d4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80044d8:	4313      	orrs	r3, r2
 80044da:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80044de:	bf00      	nop
 80044e0:	370c      	adds	r7, #12
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bc80      	pop	{r7}
 80044e6:	4770      	bx	lr

080044e8 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80044e8:	b480      	push	{r7}
 80044ea:	b083      	sub	sp, #12
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80044f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044f4:	689b      	ldr	r3, [r3, #8]
 80044f6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80044fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	4313      	orrs	r3, r2
 8004502:	608b      	str	r3, [r1, #8]
}
 8004504:	bf00      	nop
 8004506:	370c      	adds	r7, #12
 8004508:	46bd      	mov	sp, r7
 800450a:	bc80      	pop	{r7}
 800450c:	4770      	bx	lr

0800450e <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 800450e:	b480      	push	{r7}
 8004510:	b083      	sub	sp, #12
 8004512:	af00      	add	r7, sp, #0
 8004514:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8004516:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800451a:	689b      	ldr	r3, [r3, #8]
 800451c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004520:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	4313      	orrs	r3, r2
 8004528:	608b      	str	r3, [r1, #8]
}
 800452a:	bf00      	nop
 800452c:	370c      	adds	r7, #12
 800452e:	46bd      	mov	sp, r7
 8004530:	bc80      	pop	{r7}
 8004532:	4770      	bx	lr

08004534 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8004534:	b480      	push	{r7}
 8004536:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8004538:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800453c:	689b      	ldr	r3, [r3, #8]
 800453e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004542:	4618      	mov	r0, r3
 8004544:	46bd      	mov	sp, r7
 8004546:	bc80      	pop	{r7}
 8004548:	4770      	bx	lr

0800454a <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 800454a:	b480      	push	{r7}
 800454c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800454e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004552:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004556:	011b      	lsls	r3, r3, #4
 8004558:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800455c:	4618      	mov	r0, r3
 800455e:	46bd      	mov	sp, r7
 8004560:	bc80      	pop	{r7}
 8004562:	4770      	bx	lr

08004564 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8004564:	b480      	push	{r7}
 8004566:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8004568:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800456c:	689b      	ldr	r3, [r3, #8]
 800456e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8004572:	4618      	mov	r0, r3
 8004574:	46bd      	mov	sp, r7
 8004576:	bc80      	pop	{r7}
 8004578:	4770      	bx	lr

0800457a <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 800457a:	b480      	push	{r7}
 800457c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800457e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004582:	689b      	ldr	r3, [r3, #8]
 8004584:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8004588:	4618      	mov	r0, r3
 800458a:	46bd      	mov	sp, r7
 800458c:	bc80      	pop	{r7}
 800458e:	4770      	bx	lr

08004590 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8004590:	b480      	push	{r7}
 8004592:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8004594:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800459e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80045a2:	6013      	str	r3, [r2, #0]
}
 80045a4:	bf00      	nop
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bc80      	pop	{r7}
 80045aa:	4770      	bx	lr

080045ac <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80045ac:	b480      	push	{r7}
 80045ae:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80045b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80045ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80045be:	6013      	str	r3, [r2, #0]
}
 80045c0:	bf00      	nop
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bc80      	pop	{r7}
 80045c6:	4770      	bx	lr

080045c8 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80045c8:	b480      	push	{r7}
 80045ca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80045cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045d6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80045da:	d101      	bne.n	80045e0 <LL_RCC_PLL_IsReady+0x18>
 80045dc:	2301      	movs	r3, #1
 80045de:	e000      	b.n	80045e2 <LL_RCC_PLL_IsReady+0x1a>
 80045e0:	2300      	movs	r3, #0
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bc80      	pop	{r7}
 80045e8:	4770      	bx	lr

080045ea <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80045ea:	b480      	push	{r7}
 80045ec:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80045ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045f2:	68db      	ldr	r3, [r3, #12]
 80045f4:	0a1b      	lsrs	r3, r3, #8
 80045f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80045fa:	4618      	mov	r0, r3
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bc80      	pop	{r7}
 8004600:	4770      	bx	lr

08004602 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8004602:	b480      	push	{r7}
 8004604:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8004606:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800460a:	68db      	ldr	r3, [r3, #12]
 800460c:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8004610:	4618      	mov	r0, r3
 8004612:	46bd      	mov	sp, r7
 8004614:	bc80      	pop	{r7}
 8004616:	4770      	bx	lr

08004618 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8004618:	b480      	push	{r7}
 800461a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800461c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004620:	68db      	ldr	r3, [r3, #12]
 8004622:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8004626:	4618      	mov	r0, r3
 8004628:	46bd      	mov	sp, r7
 800462a:	bc80      	pop	{r7}
 800462c:	4770      	bx	lr

0800462e <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800462e:	b480      	push	{r7}
 8004630:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8004632:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004636:	68db      	ldr	r3, [r3, #12]
 8004638:	f003 0303 	and.w	r3, r3, #3
}
 800463c:	4618      	mov	r0, r3
 800463e:	46bd      	mov	sp, r7
 8004640:	bc80      	pop	{r7}
 8004642:	4770      	bx	lr

08004644 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8004644:	b480      	push	{r7}
 8004646:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8004648:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800464c:	689b      	ldr	r3, [r3, #8]
 800464e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004652:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004656:	d101      	bne.n	800465c <LL_RCC_IsActiveFlag_HPRE+0x18>
 8004658:	2301      	movs	r3, #1
 800465a:	e000      	b.n	800465e <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800465c:	2300      	movs	r3, #0
}
 800465e:	4618      	mov	r0, r3
 8004660:	46bd      	mov	sp, r7
 8004662:	bc80      	pop	{r7}
 8004664:	4770      	bx	lr

08004666 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8004666:	b480      	push	{r7}
 8004668:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800466a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800466e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004672:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004676:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800467a:	d101      	bne.n	8004680 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 800467c:	2301      	movs	r3, #1
 800467e:	e000      	b.n	8004682 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8004680:	2300      	movs	r3, #0
}
 8004682:	4618      	mov	r0, r3
 8004684:	46bd      	mov	sp, r7
 8004686:	bc80      	pop	{r7}
 8004688:	4770      	bx	lr

0800468a <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 800468a:	b480      	push	{r7}
 800468c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800468e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004692:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004696:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800469a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800469e:	d101      	bne.n	80046a4 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80046a0:	2301      	movs	r3, #1
 80046a2:	e000      	b.n	80046a6 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80046a4:	2300      	movs	r3, #0
}
 80046a6:	4618      	mov	r0, r3
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bc80      	pop	{r7}
 80046ac:	4770      	bx	lr

080046ae <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80046ae:	b480      	push	{r7}
 80046b0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80046b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046b6:	689b      	ldr	r3, [r3, #8]
 80046b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80046c0:	d101      	bne.n	80046c6 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80046c2:	2301      	movs	r3, #1
 80046c4:	e000      	b.n	80046c8 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80046c6:	2300      	movs	r3, #0
}
 80046c8:	4618      	mov	r0, r3
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bc80      	pop	{r7}
 80046ce:	4770      	bx	lr

080046d0 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 80046d0:	b480      	push	{r7}
 80046d2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80046d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046d8:	689b      	ldr	r3, [r3, #8]
 80046da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80046de:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80046e2:	d101      	bne.n	80046e8 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80046e4:	2301      	movs	r3, #1
 80046e6:	e000      	b.n	80046ea <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80046e8:	2300      	movs	r3, #0
}
 80046ea:	4618      	mov	r0, r3
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bc80      	pop	{r7}
 80046f0:	4770      	bx	lr
	...

080046f4 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b088      	sub	sp, #32
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d101      	bne.n	8004706 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004702:	2301      	movs	r3, #1
 8004704:	e36f      	b.n	8004de6 <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004706:	f7ff fea6 	bl	8004456 <LL_RCC_GetSysClkSource>
 800470a:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800470c:	f7ff ff8f 	bl	800462e <LL_RCC_PLL_GetMainSource>
 8004710:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f003 0320 	and.w	r3, r3, #32
 800471a:	2b00      	cmp	r3, #0
 800471c:	f000 80c4 	beq.w	80048a8 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004720:	69fb      	ldr	r3, [r7, #28]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d005      	beq.n	8004732 <HAL_RCC_OscConfig+0x3e>
 8004726:	69fb      	ldr	r3, [r7, #28]
 8004728:	2b0c      	cmp	r3, #12
 800472a:	d176      	bne.n	800481a <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 800472c:	69bb      	ldr	r3, [r7, #24]
 800472e:	2b01      	cmp	r3, #1
 8004730:	d173      	bne.n	800481a <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6a1b      	ldr	r3, [r3, #32]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d101      	bne.n	800473e <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800473a:	2301      	movs	r3, #1
 800473c:	e353      	b.n	8004de6 <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004742:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f003 0308 	and.w	r3, r3, #8
 800474c:	2b00      	cmp	r3, #0
 800474e:	d005      	beq.n	800475c <HAL_RCC_OscConfig+0x68>
 8004750:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800475a:	e006      	b.n	800476a <HAL_RCC_OscConfig+0x76>
 800475c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004760:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004764:	091b      	lsrs	r3, r3, #4
 8004766:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800476a:	4293      	cmp	r3, r2
 800476c:	d222      	bcs.n	80047b4 <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004772:	4618      	mov	r0, r3
 8004774:	f000 fd5a 	bl	800522c <RCC_SetFlashLatencyFromMSIRange>
 8004778:	4603      	mov	r3, r0
 800477a:	2b00      	cmp	r3, #0
 800477c:	d001      	beq.n	8004782 <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 800477e:	2301      	movs	r3, #1
 8004780:	e331      	b.n	8004de6 <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004782:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800478c:	f043 0308 	orr.w	r3, r3, #8
 8004790:	6013      	str	r3, [r2, #0]
 8004792:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047a0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80047a4:	4313      	orrs	r3, r2
 80047a6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ac:	4618      	mov	r0, r3
 80047ae:	f7ff fe2b 	bl	8004408 <LL_RCC_MSI_SetCalibTrimming>
 80047b2:	e021      	b.n	80047f8 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80047b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80047be:	f043 0308 	orr.w	r3, r3, #8
 80047c2:	6013      	str	r3, [r2, #0]
 80047c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047d2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80047d6:	4313      	orrs	r3, r2
 80047d8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047de:	4618      	mov	r0, r3
 80047e0:	f7ff fe12 	bl	8004408 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047e8:	4618      	mov	r0, r3
 80047ea:	f000 fd1f 	bl	800522c <RCC_SetFlashLatencyFromMSIRange>
 80047ee:	4603      	mov	r3, r0
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d001      	beq.n	80047f8 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 80047f4:	2301      	movs	r3, #1
 80047f6:	e2f6      	b.n	8004de6 <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80047f8:	f000 fce0 	bl	80051bc <HAL_RCC_GetHCLKFreq>
 80047fc:	4603      	mov	r3, r0
 80047fe:	4aa7      	ldr	r2, [pc, #668]	; (8004a9c <HAL_RCC_OscConfig+0x3a8>)
 8004800:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 8004802:	4ba7      	ldr	r3, [pc, #668]	; (8004aa0 <HAL_RCC_OscConfig+0x3ac>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4618      	mov	r0, r3
 8004808:	f7fe fe50 	bl	80034ac <HAL_InitTick>
 800480c:	4603      	mov	r3, r0
 800480e:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8004810:	7cfb      	ldrb	r3, [r7, #19]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d047      	beq.n	80048a6 <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 8004816:	7cfb      	ldrb	r3, [r7, #19]
 8004818:	e2e5      	b.n	8004de6 <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6a1b      	ldr	r3, [r3, #32]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d02c      	beq.n	800487c <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004822:	f7ff fd9e 	bl	8004362 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004826:	f7fe f963 	bl	8002af0 <HAL_GetTick>
 800482a:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800482c:	e008      	b.n	8004840 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800482e:	f7fe f95f 	bl	8002af0 <HAL_GetTick>
 8004832:	4602      	mov	r2, r0
 8004834:	697b      	ldr	r3, [r7, #20]
 8004836:	1ad3      	subs	r3, r2, r3
 8004838:	2b02      	cmp	r3, #2
 800483a:	d901      	bls.n	8004840 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 800483c:	2303      	movs	r3, #3
 800483e:	e2d2      	b.n	8004de6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 8004840:	f7ff fdab 	bl	800439a <LL_RCC_MSI_IsReady>
 8004844:	4603      	mov	r3, r0
 8004846:	2b00      	cmp	r3, #0
 8004848:	d0f1      	beq.n	800482e <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800484a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004854:	f043 0308 	orr.w	r3, r3, #8
 8004858:	6013      	str	r3, [r2, #0]
 800485a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004868:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800486c:	4313      	orrs	r3, r2
 800486e:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004874:	4618      	mov	r0, r3
 8004876:	f7ff fdc7 	bl	8004408 <LL_RCC_MSI_SetCalibTrimming>
 800487a:	e015      	b.n	80048a8 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800487c:	f7ff fd7f 	bl	800437e <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004880:	f7fe f936 	bl	8002af0 <HAL_GetTick>
 8004884:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8004886:	e008      	b.n	800489a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004888:	f7fe f932 	bl	8002af0 <HAL_GetTick>
 800488c:	4602      	mov	r2, r0
 800488e:	697b      	ldr	r3, [r7, #20]
 8004890:	1ad3      	subs	r3, r2, r3
 8004892:	2b02      	cmp	r3, #2
 8004894:	d901      	bls.n	800489a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8004896:	2303      	movs	r3, #3
 8004898:	e2a5      	b.n	8004de6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 800489a:	f7ff fd7e 	bl	800439a <LL_RCC_MSI_IsReady>
 800489e:	4603      	mov	r3, r0
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d1f1      	bne.n	8004888 <HAL_RCC_OscConfig+0x194>
 80048a4:	e000      	b.n	80048a8 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80048a6:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f003 0301 	and.w	r3, r3, #1
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d058      	beq.n	8004966 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80048b4:	69fb      	ldr	r3, [r7, #28]
 80048b6:	2b08      	cmp	r3, #8
 80048b8:	d005      	beq.n	80048c6 <HAL_RCC_OscConfig+0x1d2>
 80048ba:	69fb      	ldr	r3, [r7, #28]
 80048bc:	2b0c      	cmp	r3, #12
 80048be:	d108      	bne.n	80048d2 <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80048c0:	69bb      	ldr	r3, [r7, #24]
 80048c2:	2b03      	cmp	r3, #3
 80048c4:	d105      	bne.n	80048d2 <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d14b      	bne.n	8004966 <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 80048ce:	2301      	movs	r3, #1
 80048d0:	e289      	b.n	8004de6 <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 80048d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	689b      	ldr	r3, [r3, #8]
 80048e0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80048e4:	4313      	orrs	r3, r2
 80048e6:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048f0:	d102      	bne.n	80048f8 <HAL_RCC_OscConfig+0x204>
 80048f2:	f7ff fc86 	bl	8004202 <LL_RCC_HSE_Enable>
 80048f6:	e00d      	b.n	8004914 <HAL_RCC_OscConfig+0x220>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8004900:	d104      	bne.n	800490c <HAL_RCC_OscConfig+0x218>
 8004902:	f7ff fc51 	bl	80041a8 <LL_RCC_HSE_EnableTcxo>
 8004906:	f7ff fc7c 	bl	8004202 <LL_RCC_HSE_Enable>
 800490a:	e003      	b.n	8004914 <HAL_RCC_OscConfig+0x220>
 800490c:	f7ff fc87 	bl	800421e <LL_RCC_HSE_Disable>
 8004910:	f7ff fc58 	bl	80041c4 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d012      	beq.n	8004942 <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800491c:	f7fe f8e8 	bl	8002af0 <HAL_GetTick>
 8004920:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8004922:	e008      	b.n	8004936 <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004924:	f7fe f8e4 	bl	8002af0 <HAL_GetTick>
 8004928:	4602      	mov	r2, r0
 800492a:	697b      	ldr	r3, [r7, #20]
 800492c:	1ad3      	subs	r3, r2, r3
 800492e:	2b64      	cmp	r3, #100	; 0x64
 8004930:	d901      	bls.n	8004936 <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 8004932:	2303      	movs	r3, #3
 8004934:	e257      	b.n	8004de6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 8004936:	f7ff fc80 	bl	800423a <LL_RCC_HSE_IsReady>
 800493a:	4603      	mov	r3, r0
 800493c:	2b00      	cmp	r3, #0
 800493e:	d0f1      	beq.n	8004924 <HAL_RCC_OscConfig+0x230>
 8004940:	e011      	b.n	8004966 <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004942:	f7fe f8d5 	bl	8002af0 <HAL_GetTick>
 8004946:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8004948:	e008      	b.n	800495c <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800494a:	f7fe f8d1 	bl	8002af0 <HAL_GetTick>
 800494e:	4602      	mov	r2, r0
 8004950:	697b      	ldr	r3, [r7, #20]
 8004952:	1ad3      	subs	r3, r2, r3
 8004954:	2b64      	cmp	r3, #100	; 0x64
 8004956:	d901      	bls.n	800495c <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8004958:	2303      	movs	r3, #3
 800495a:	e244      	b.n	8004de6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 800495c:	f7ff fc6d 	bl	800423a <LL_RCC_HSE_IsReady>
 8004960:	4603      	mov	r3, r0
 8004962:	2b00      	cmp	r3, #0
 8004964:	d1f1      	bne.n	800494a <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f003 0302 	and.w	r3, r3, #2
 800496e:	2b00      	cmp	r3, #0
 8004970:	d046      	beq.n	8004a00 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8004972:	69fb      	ldr	r3, [r7, #28]
 8004974:	2b04      	cmp	r3, #4
 8004976:	d005      	beq.n	8004984 <HAL_RCC_OscConfig+0x290>
 8004978:	69fb      	ldr	r3, [r7, #28]
 800497a:	2b0c      	cmp	r3, #12
 800497c:	d10e      	bne.n	800499c <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800497e:	69bb      	ldr	r3, [r7, #24]
 8004980:	2b02      	cmp	r3, #2
 8004982:	d10b      	bne.n	800499c <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	691b      	ldr	r3, [r3, #16]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d101      	bne.n	8004990 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 800498c:	2301      	movs	r3, #1
 800498e:	e22a      	b.n	8004de6 <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	695b      	ldr	r3, [r3, #20]
 8004994:	4618      	mov	r0, r3
 8004996:	f7ff fc8e 	bl	80042b6 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800499a:	e031      	b.n	8004a00 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	691b      	ldr	r3, [r3, #16]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d019      	beq.n	80049d8 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80049a4:	f7ff fc5a 	bl	800425c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049a8:	f7fe f8a2 	bl	8002af0 <HAL_GetTick>
 80049ac:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80049ae:	e008      	b.n	80049c2 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80049b0:	f7fe f89e 	bl	8002af0 <HAL_GetTick>
 80049b4:	4602      	mov	r2, r0
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	1ad3      	subs	r3, r2, r3
 80049ba:	2b02      	cmp	r3, #2
 80049bc:	d901      	bls.n	80049c2 <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 80049be:	2303      	movs	r3, #3
 80049c0:	e211      	b.n	8004de6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 80049c2:	f7ff fc67 	bl	8004294 <LL_RCC_HSI_IsReady>
 80049c6:	4603      	mov	r3, r0
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d0f1      	beq.n	80049b0 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	695b      	ldr	r3, [r3, #20]
 80049d0:	4618      	mov	r0, r3
 80049d2:	f7ff fc70 	bl	80042b6 <LL_RCC_HSI_SetCalibTrimming>
 80049d6:	e013      	b.n	8004a00 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80049d8:	f7ff fc4e 	bl	8004278 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049dc:	f7fe f888 	bl	8002af0 <HAL_GetTick>
 80049e0:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80049e2:	e008      	b.n	80049f6 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80049e4:	f7fe f884 	bl	8002af0 <HAL_GetTick>
 80049e8:	4602      	mov	r2, r0
 80049ea:	697b      	ldr	r3, [r7, #20]
 80049ec:	1ad3      	subs	r3, r2, r3
 80049ee:	2b02      	cmp	r3, #2
 80049f0:	d901      	bls.n	80049f6 <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 80049f2:	2303      	movs	r3, #3
 80049f4:	e1f7      	b.n	8004de6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 80049f6:	f7ff fc4d 	bl	8004294 <LL_RCC_HSI_IsReady>
 80049fa:	4603      	mov	r3, r0
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d1f1      	bne.n	80049e4 <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f003 0308 	and.w	r3, r3, #8
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d06e      	beq.n	8004aea <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	699b      	ldr	r3, [r3, #24]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d056      	beq.n	8004ac2 <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 8004a14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a18:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a1c:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	69da      	ldr	r2, [r3, #28]
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	f003 0310 	and.w	r3, r3, #16
 8004a28:	429a      	cmp	r2, r3
 8004a2a:	d031      	beq.n	8004a90 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	f003 0302 	and.w	r3, r3, #2
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d006      	beq.n	8004a44 <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d101      	bne.n	8004a44 <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 8004a40:	2301      	movs	r3, #1
 8004a42:	e1d0      	b.n	8004de6 <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	f003 0301 	and.w	r3, r3, #1
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d013      	beq.n	8004a76 <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 8004a4e:	f7ff fc67 	bl	8004320 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004a52:	f7fe f84d 	bl	8002af0 <HAL_GetTick>
 8004a56:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8004a58:	e008      	b.n	8004a6c <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a5a:	f7fe f849 	bl	8002af0 <HAL_GetTick>
 8004a5e:	4602      	mov	r2, r0
 8004a60:	697b      	ldr	r3, [r7, #20]
 8004a62:	1ad3      	subs	r3, r2, r3
 8004a64:	2b11      	cmp	r3, #17
 8004a66:	d901      	bls.n	8004a6c <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 8004a68:	2303      	movs	r3, #3
 8004a6a:	e1bc      	b.n	8004de6 <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 8004a6c:	f7ff fc68 	bl	8004340 <LL_RCC_LSI_IsReady>
 8004a70:	4603      	mov	r3, r0
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d1f1      	bne.n	8004a5a <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8004a76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a7e:	f023 0210 	bic.w	r2, r3, #16
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	69db      	ldr	r3, [r3, #28]
 8004a86:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a90:	f7ff fc36 	bl	8004300 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a94:	f7fe f82c 	bl	8002af0 <HAL_GetTick>
 8004a98:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8004a9a:	e00c      	b.n	8004ab6 <HAL_RCC_OscConfig+0x3c2>
 8004a9c:	2000000c 	.word	0x2000000c
 8004aa0:	20000010 	.word	0x20000010
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004aa4:	f7fe f824 	bl	8002af0 <HAL_GetTick>
 8004aa8:	4602      	mov	r2, r0
 8004aaa:	697b      	ldr	r3, [r7, #20]
 8004aac:	1ad3      	subs	r3, r2, r3
 8004aae:	2b11      	cmp	r3, #17
 8004ab0:	d901      	bls.n	8004ab6 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8004ab2:	2303      	movs	r3, #3
 8004ab4:	e197      	b.n	8004de6 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 8004ab6:	f7ff fc43 	bl	8004340 <LL_RCC_LSI_IsReady>
 8004aba:	4603      	mov	r3, r0
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d0f1      	beq.n	8004aa4 <HAL_RCC_OscConfig+0x3b0>
 8004ac0:	e013      	b.n	8004aea <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ac2:	f7ff fc2d 	bl	8004320 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ac6:	f7fe f813 	bl	8002af0 <HAL_GetTick>
 8004aca:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8004acc:	e008      	b.n	8004ae0 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ace:	f7fe f80f 	bl	8002af0 <HAL_GetTick>
 8004ad2:	4602      	mov	r2, r0
 8004ad4:	697b      	ldr	r3, [r7, #20]
 8004ad6:	1ad3      	subs	r3, r2, r3
 8004ad8:	2b11      	cmp	r3, #17
 8004ada:	d901      	bls.n	8004ae0 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8004adc:	2303      	movs	r3, #3
 8004ade:	e182      	b.n	8004de6 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 8004ae0:	f7ff fc2e 	bl	8004340 <LL_RCC_LSI_IsReady>
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d1f1      	bne.n	8004ace <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f003 0304 	and.w	r3, r3, #4
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	f000 80d8 	beq.w	8004ca8 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8004af8:	f7ff fb44 	bl	8004184 <LL_PWR_IsEnabledBkUpAccess>
 8004afc:	4603      	mov	r3, r0
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d113      	bne.n	8004b2a <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8004b02:	f7ff fb25 	bl	8004150 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b06:	f7fd fff3 	bl	8002af0 <HAL_GetTick>
 8004b0a:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8004b0c:	e008      	b.n	8004b20 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b0e:	f7fd ffef 	bl	8002af0 <HAL_GetTick>
 8004b12:	4602      	mov	r2, r0
 8004b14:	697b      	ldr	r3, [r7, #20]
 8004b16:	1ad3      	subs	r3, r2, r3
 8004b18:	2b02      	cmp	r3, #2
 8004b1a:	d901      	bls.n	8004b20 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8004b1c:	2303      	movs	r3, #3
 8004b1e:	e162      	b.n	8004de6 <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8004b20:	f7ff fb30 	bl	8004184 <LL_PWR_IsEnabledBkUpAccess>
 8004b24:	4603      	mov	r3, r0
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d0f1      	beq.n	8004b0e <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	68db      	ldr	r3, [r3, #12]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d07b      	beq.n	8004c2a <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	68db      	ldr	r3, [r3, #12]
 8004b36:	2b85      	cmp	r3, #133	; 0x85
 8004b38:	d003      	beq.n	8004b42 <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	68db      	ldr	r3, [r3, #12]
 8004b3e:	2b05      	cmp	r3, #5
 8004b40:	d109      	bne.n	8004b56 <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004b42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b4a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b4e:	f043 0304 	orr.w	r3, r3, #4
 8004b52:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b56:	f7fd ffcb 	bl	8002af0 <HAL_GetTick>
 8004b5a:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004b5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b64:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b68:	f043 0301 	orr.w	r3, r3, #1
 8004b6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8004b70:	e00a      	b.n	8004b88 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b72:	f7fd ffbd 	bl	8002af0 <HAL_GetTick>
 8004b76:	4602      	mov	r2, r0
 8004b78:	697b      	ldr	r3, [r7, #20]
 8004b7a:	1ad3      	subs	r3, r2, r3
 8004b7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d901      	bls.n	8004b88 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 8004b84:	2303      	movs	r3, #3
 8004b86:	e12e      	b.n	8004de6 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 8004b88:	f7ff fba9 	bl	80042de <LL_RCC_LSE_IsReady>
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d0ef      	beq.n	8004b72 <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	68db      	ldr	r3, [r3, #12]
 8004b96:	2b81      	cmp	r3, #129	; 0x81
 8004b98:	d003      	beq.n	8004ba2 <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	68db      	ldr	r3, [r3, #12]
 8004b9e:	2b85      	cmp	r3, #133	; 0x85
 8004ba0:	d121      	bne.n	8004be6 <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ba2:	f7fd ffa5 	bl	8002af0 <HAL_GetTick>
 8004ba6:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004ba8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bb0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004bb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bb8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8004bbc:	e00a      	b.n	8004bd4 <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bbe:	f7fd ff97 	bl	8002af0 <HAL_GetTick>
 8004bc2:	4602      	mov	r2, r0
 8004bc4:	697b      	ldr	r3, [r7, #20]
 8004bc6:	1ad3      	subs	r3, r2, r3
 8004bc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d901      	bls.n	8004bd4 <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 8004bd0:	2303      	movs	r3, #3
 8004bd2:	e108      	b.n	8004de6 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8004bd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bdc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d0ec      	beq.n	8004bbe <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8004be4:	e060      	b.n	8004ca8 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004be6:	f7fd ff83 	bl	8002af0 <HAL_GetTick>
 8004bea:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004bec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bf4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004bf8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004bfc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004c00:	e00a      	b.n	8004c18 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c02:	f7fd ff75 	bl	8002af0 <HAL_GetTick>
 8004c06:	4602      	mov	r2, r0
 8004c08:	697b      	ldr	r3, [r7, #20]
 8004c0a:	1ad3      	subs	r3, r2, r3
 8004c0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d901      	bls.n	8004c18 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8004c14:	2303      	movs	r3, #3
 8004c16:	e0e6      	b.n	8004de6 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004c18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d1ec      	bne.n	8004c02 <HAL_RCC_OscConfig+0x50e>
 8004c28:	e03e      	b.n	8004ca8 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c2a:	f7fd ff61 	bl	8002af0 <HAL_GetTick>
 8004c2e:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004c30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c38:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c3c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004c44:	e00a      	b.n	8004c5c <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c46:	f7fd ff53 	bl	8002af0 <HAL_GetTick>
 8004c4a:	4602      	mov	r2, r0
 8004c4c:	697b      	ldr	r3, [r7, #20]
 8004c4e:	1ad3      	subs	r3, r2, r3
 8004c50:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d901      	bls.n	8004c5c <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8004c58:	2303      	movs	r3, #3
 8004c5a:	e0c4      	b.n	8004de6 <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004c5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d1ec      	bne.n	8004c46 <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c6c:	f7fd ff40 	bl	8002af0 <HAL_GetTick>
 8004c70:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004c72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c7a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c7e:	f023 0301 	bic.w	r3, r3, #1
 8004c82:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8004c86:	e00a      	b.n	8004c9e <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c88:	f7fd ff32 	bl	8002af0 <HAL_GetTick>
 8004c8c:	4602      	mov	r2, r0
 8004c8e:	697b      	ldr	r3, [r7, #20]
 8004c90:	1ad3      	subs	r3, r2, r3
 8004c92:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d901      	bls.n	8004c9e <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 8004c9a:	2303      	movs	r3, #3
 8004c9c:	e0a3      	b.n	8004de6 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 8004c9e:	f7ff fb1e 	bl	80042de <LL_RCC_LSE_IsReady>
 8004ca2:	4603      	mov	r3, r0
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d1ef      	bne.n	8004c88 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	f000 8099 	beq.w	8004de4 <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004cb2:	69fb      	ldr	r3, [r7, #28]
 8004cb4:	2b0c      	cmp	r3, #12
 8004cb6:	d06c      	beq.n	8004d92 <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cbc:	2b02      	cmp	r3, #2
 8004cbe:	d14b      	bne.n	8004d58 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cc0:	f7ff fc74 	bl	80045ac <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cc4:	f7fd ff14 	bl	8002af0 <HAL_GetTick>
 8004cc8:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8004cca:	e008      	b.n	8004cde <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ccc:	f7fd ff10 	bl	8002af0 <HAL_GetTick>
 8004cd0:	4602      	mov	r2, r0
 8004cd2:	697b      	ldr	r3, [r7, #20]
 8004cd4:	1ad3      	subs	r3, r2, r3
 8004cd6:	2b0a      	cmp	r3, #10
 8004cd8:	d901      	bls.n	8004cde <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 8004cda:	2303      	movs	r3, #3
 8004cdc:	e083      	b.n	8004de6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8004cde:	f7ff fc73 	bl	80045c8 <LL_RCC_PLL_IsReady>
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d1f1      	bne.n	8004ccc <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004ce8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cec:	68da      	ldr	r2, [r3, #12]
 8004cee:	4b40      	ldr	r3, [pc, #256]	; (8004df0 <HAL_RCC_OscConfig+0x6fc>)
 8004cf0:	4013      	ands	r3, r2
 8004cf2:	687a      	ldr	r2, [r7, #4]
 8004cf4:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8004cf6:	687a      	ldr	r2, [r7, #4]
 8004cf8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004cfa:	4311      	orrs	r1, r2
 8004cfc:	687a      	ldr	r2, [r7, #4]
 8004cfe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004d00:	0212      	lsls	r2, r2, #8
 8004d02:	4311      	orrs	r1, r2
 8004d04:	687a      	ldr	r2, [r7, #4]
 8004d06:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004d08:	4311      	orrs	r1, r2
 8004d0a:	687a      	ldr	r2, [r7, #4]
 8004d0c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004d0e:	4311      	orrs	r1, r2
 8004d10:	687a      	ldr	r2, [r7, #4]
 8004d12:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004d14:	430a      	orrs	r2, r1
 8004d16:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004d1a:	4313      	orrs	r3, r2
 8004d1c:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d1e:	f7ff fc37 	bl	8004590 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004d22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d26:	68db      	ldr	r3, [r3, #12]
 8004d28:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004d2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d30:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d32:	f7fd fedd 	bl	8002af0 <HAL_GetTick>
 8004d36:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8004d38:	e008      	b.n	8004d4c <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d3a:	f7fd fed9 	bl	8002af0 <HAL_GetTick>
 8004d3e:	4602      	mov	r2, r0
 8004d40:	697b      	ldr	r3, [r7, #20]
 8004d42:	1ad3      	subs	r3, r2, r3
 8004d44:	2b0a      	cmp	r3, #10
 8004d46:	d901      	bls.n	8004d4c <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 8004d48:	2303      	movs	r3, #3
 8004d4a:	e04c      	b.n	8004de6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 8004d4c:	f7ff fc3c 	bl	80045c8 <LL_RCC_PLL_IsReady>
 8004d50:	4603      	mov	r3, r0
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d0f1      	beq.n	8004d3a <HAL_RCC_OscConfig+0x646>
 8004d56:	e045      	b.n	8004de4 <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d58:	f7ff fc28 	bl	80045ac <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d5c:	f7fd fec8 	bl	8002af0 <HAL_GetTick>
 8004d60:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8004d62:	e008      	b.n	8004d76 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d64:	f7fd fec4 	bl	8002af0 <HAL_GetTick>
 8004d68:	4602      	mov	r2, r0
 8004d6a:	697b      	ldr	r3, [r7, #20]
 8004d6c:	1ad3      	subs	r3, r2, r3
 8004d6e:	2b0a      	cmp	r3, #10
 8004d70:	d901      	bls.n	8004d76 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8004d72:	2303      	movs	r3, #3
 8004d74:	e037      	b.n	8004de6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8004d76:	f7ff fc27 	bl	80045c8 <LL_RCC_PLL_IsReady>
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d1f1      	bne.n	8004d64 <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8004d80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d84:	68da      	ldr	r2, [r3, #12]
 8004d86:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004d8a:	4b1a      	ldr	r3, [pc, #104]	; (8004df4 <HAL_RCC_OscConfig+0x700>)
 8004d8c:	4013      	ands	r3, r2
 8004d8e:	60cb      	str	r3, [r1, #12]
 8004d90:	e028      	b.n	8004de4 <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d96:	2b01      	cmp	r3, #1
 8004d98:	d101      	bne.n	8004d9e <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	e023      	b.n	8004de6 <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004d9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004da2:	68db      	ldr	r3, [r3, #12]
 8004da4:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8004da6:	69bb      	ldr	r3, [r7, #24]
 8004da8:	f003 0203 	and.w	r2, r3, #3
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004db0:	429a      	cmp	r2, r3
 8004db2:	d115      	bne.n	8004de0 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8004db4:	69bb      	ldr	r3, [r7, #24]
 8004db6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dbe:	429a      	cmp	r2, r3
 8004dc0:	d10e      	bne.n	8004de0 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8004dc2:	69bb      	ldr	r3, [r7, #24]
 8004dc4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dcc:	021b      	lsls	r3, r3, #8
 8004dce:	429a      	cmp	r2, r3
 8004dd0:	d106      	bne.n	8004de0 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8004dd2:	69bb      	ldr	r3, [r7, #24]
 8004dd4:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ddc:	429a      	cmp	r2, r3
 8004dde:	d001      	beq.n	8004de4 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 8004de0:	2301      	movs	r3, #1
 8004de2:	e000      	b.n	8004de6 <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 8004de4:	2300      	movs	r3, #0
}
 8004de6:	4618      	mov	r0, r3
 8004de8:	3720      	adds	r7, #32
 8004dea:	46bd      	mov	sp, r7
 8004dec:	bd80      	pop	{r7, pc}
 8004dee:	bf00      	nop
 8004df0:	11c1808c 	.word	0x11c1808c
 8004df4:	eefefffc 	.word	0xeefefffc

08004df8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b084      	sub	sp, #16
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
 8004e00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d101      	bne.n	8004e0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004e08:	2301      	movs	r3, #1
 8004e0a:	e12c      	b.n	8005066 <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004e0c:	4b98      	ldr	r3, [pc, #608]	; (8005070 <HAL_RCC_ClockConfig+0x278>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f003 0307 	and.w	r3, r3, #7
 8004e14:	683a      	ldr	r2, [r7, #0]
 8004e16:	429a      	cmp	r2, r3
 8004e18:	d91b      	bls.n	8004e52 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e1a:	4b95      	ldr	r3, [pc, #596]	; (8005070 <HAL_RCC_ClockConfig+0x278>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f023 0207 	bic.w	r2, r3, #7
 8004e22:	4993      	ldr	r1, [pc, #588]	; (8005070 <HAL_RCC_ClockConfig+0x278>)
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	4313      	orrs	r3, r2
 8004e28:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004e2a:	f7fd fe61 	bl	8002af0 <HAL_GetTick>
 8004e2e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e30:	e008      	b.n	8004e44 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004e32:	f7fd fe5d 	bl	8002af0 <HAL_GetTick>
 8004e36:	4602      	mov	r2, r0
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	1ad3      	subs	r3, r2, r3
 8004e3c:	2b02      	cmp	r3, #2
 8004e3e:	d901      	bls.n	8004e44 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8004e40:	2303      	movs	r3, #3
 8004e42:	e110      	b.n	8005066 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e44:	4b8a      	ldr	r3, [pc, #552]	; (8005070 <HAL_RCC_ClockConfig+0x278>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f003 0307 	and.w	r3, r3, #7
 8004e4c:	683a      	ldr	r2, [r7, #0]
 8004e4e:	429a      	cmp	r2, r3
 8004e50:	d1ef      	bne.n	8004e32 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f003 0302 	and.w	r3, r3, #2
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d016      	beq.n	8004e8c <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	689b      	ldr	r3, [r3, #8]
 8004e62:	4618      	mov	r0, r3
 8004e64:	f7ff fb02 	bl	800446c <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004e68:	f7fd fe42 	bl	8002af0 <HAL_GetTick>
 8004e6c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004e6e:	e008      	b.n	8004e82 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004e70:	f7fd fe3e 	bl	8002af0 <HAL_GetTick>
 8004e74:	4602      	mov	r2, r0
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	1ad3      	subs	r3, r2, r3
 8004e7a:	2b02      	cmp	r3, #2
 8004e7c:	d901      	bls.n	8004e82 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8004e7e:	2303      	movs	r3, #3
 8004e80:	e0f1      	b.n	8005066 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004e82:	f7ff fbdf 	bl	8004644 <LL_RCC_IsActiveFlag_HPRE>
 8004e86:	4603      	mov	r3, r0
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d0f1      	beq.n	8004e70 <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f003 0320 	and.w	r3, r3, #32
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d016      	beq.n	8004ec6 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	695b      	ldr	r3, [r3, #20]
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	f7ff faf8 	bl	8004492 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004ea2:	f7fd fe25 	bl	8002af0 <HAL_GetTick>
 8004ea6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004ea8:	e008      	b.n	8004ebc <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004eaa:	f7fd fe21 	bl	8002af0 <HAL_GetTick>
 8004eae:	4602      	mov	r2, r0
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	1ad3      	subs	r3, r2, r3
 8004eb4:	2b02      	cmp	r3, #2
 8004eb6:	d901      	bls.n	8004ebc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8004eb8:	2303      	movs	r3, #3
 8004eba:	e0d4      	b.n	8005066 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004ebc:	f7ff fbd3 	bl	8004666 <LL_RCC_IsActiveFlag_C2HPRE>
 8004ec0:	4603      	mov	r3, r0
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d0f1      	beq.n	8004eaa <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d016      	beq.n	8004f00 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	699b      	ldr	r3, [r3, #24]
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	f7ff faf0 	bl	80044bc <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004edc:	f7fd fe08 	bl	8002af0 <HAL_GetTick>
 8004ee0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8004ee2:	e008      	b.n	8004ef6 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004ee4:	f7fd fe04 	bl	8002af0 <HAL_GetTick>
 8004ee8:	4602      	mov	r2, r0
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	1ad3      	subs	r3, r2, r3
 8004eee:	2b02      	cmp	r3, #2
 8004ef0:	d901      	bls.n	8004ef6 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8004ef2:	2303      	movs	r3, #3
 8004ef4:	e0b7      	b.n	8005066 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8004ef6:	f7ff fbc8 	bl	800468a <LL_RCC_IsActiveFlag_SHDHPRE>
 8004efa:	4603      	mov	r3, r0
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d0f1      	beq.n	8004ee4 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f003 0304 	and.w	r3, r3, #4
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d016      	beq.n	8004f3a <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	68db      	ldr	r3, [r3, #12]
 8004f10:	4618      	mov	r0, r3
 8004f12:	f7ff fae9 	bl	80044e8 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004f16:	f7fd fdeb 	bl	8002af0 <HAL_GetTick>
 8004f1a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004f1c:	e008      	b.n	8004f30 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004f1e:	f7fd fde7 	bl	8002af0 <HAL_GetTick>
 8004f22:	4602      	mov	r2, r0
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	1ad3      	subs	r3, r2, r3
 8004f28:	2b02      	cmp	r3, #2
 8004f2a:	d901      	bls.n	8004f30 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8004f2c:	2303      	movs	r3, #3
 8004f2e:	e09a      	b.n	8005066 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004f30:	f7ff fbbd 	bl	80046ae <LL_RCC_IsActiveFlag_PPRE1>
 8004f34:	4603      	mov	r3, r0
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d0f1      	beq.n	8004f1e <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f003 0308 	and.w	r3, r3, #8
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d017      	beq.n	8004f76 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	691b      	ldr	r3, [r3, #16]
 8004f4a:	00db      	lsls	r3, r3, #3
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	f7ff fade 	bl	800450e <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004f52:	f7fd fdcd 	bl	8002af0 <HAL_GetTick>
 8004f56:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004f58:	e008      	b.n	8004f6c <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004f5a:	f7fd fdc9 	bl	8002af0 <HAL_GetTick>
 8004f5e:	4602      	mov	r2, r0
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	1ad3      	subs	r3, r2, r3
 8004f64:	2b02      	cmp	r3, #2
 8004f66:	d901      	bls.n	8004f6c <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8004f68:	2303      	movs	r3, #3
 8004f6a:	e07c      	b.n	8005066 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004f6c:	f7ff fbb0 	bl	80046d0 <LL_RCC_IsActiveFlag_PPRE2>
 8004f70:	4603      	mov	r3, r0
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d0f1      	beq.n	8004f5a <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f003 0301 	and.w	r3, r3, #1
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d043      	beq.n	800500a <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	2b02      	cmp	r3, #2
 8004f88:	d106      	bne.n	8004f98 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8004f8a:	f7ff f956 	bl	800423a <LL_RCC_HSE_IsReady>
 8004f8e:	4603      	mov	r3, r0
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d11e      	bne.n	8004fd2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004f94:	2301      	movs	r3, #1
 8004f96:	e066      	b.n	8005066 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	685b      	ldr	r3, [r3, #4]
 8004f9c:	2b03      	cmp	r3, #3
 8004f9e:	d106      	bne.n	8004fae <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8004fa0:	f7ff fb12 	bl	80045c8 <LL_RCC_PLL_IsReady>
 8004fa4:	4603      	mov	r3, r0
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d113      	bne.n	8004fd2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004faa:	2301      	movs	r3, #1
 8004fac:	e05b      	b.n	8005066 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d106      	bne.n	8004fc4 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8004fb6:	f7ff f9f0 	bl	800439a <LL_RCC_MSI_IsReady>
 8004fba:	4603      	mov	r3, r0
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d108      	bne.n	8004fd2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004fc0:	2301      	movs	r3, #1
 8004fc2:	e050      	b.n	8005066 <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8004fc4:	f7ff f966 	bl	8004294 <LL_RCC_HSI_IsReady>
 8004fc8:	4603      	mov	r3, r0
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d101      	bne.n	8004fd2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004fce:	2301      	movs	r3, #1
 8004fd0:	e049      	b.n	8005066 <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	f7ff fa2a 	bl	8004430 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004fdc:	f7fd fd88 	bl	8002af0 <HAL_GetTick>
 8004fe0:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fe2:	e00a      	b.n	8004ffa <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004fe4:	f7fd fd84 	bl	8002af0 <HAL_GetTick>
 8004fe8:	4602      	mov	r2, r0
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	1ad3      	subs	r3, r2, r3
 8004fee:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d901      	bls.n	8004ffa <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8004ff6:	2303      	movs	r3, #3
 8004ff8:	e035      	b.n	8005066 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ffa:	f7ff fa2c 	bl	8004456 <LL_RCC_GetSysClkSource>
 8004ffe:	4602      	mov	r2, r0
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	009b      	lsls	r3, r3, #2
 8005006:	429a      	cmp	r2, r3
 8005008:	d1ec      	bne.n	8004fe4 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800500a:	4b19      	ldr	r3, [pc, #100]	; (8005070 <HAL_RCC_ClockConfig+0x278>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f003 0307 	and.w	r3, r3, #7
 8005012:	683a      	ldr	r2, [r7, #0]
 8005014:	429a      	cmp	r2, r3
 8005016:	d21b      	bcs.n	8005050 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005018:	4b15      	ldr	r3, [pc, #84]	; (8005070 <HAL_RCC_ClockConfig+0x278>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f023 0207 	bic.w	r2, r3, #7
 8005020:	4913      	ldr	r1, [pc, #76]	; (8005070 <HAL_RCC_ClockConfig+0x278>)
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	4313      	orrs	r3, r2
 8005026:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005028:	f7fd fd62 	bl	8002af0 <HAL_GetTick>
 800502c:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800502e:	e008      	b.n	8005042 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005030:	f7fd fd5e 	bl	8002af0 <HAL_GetTick>
 8005034:	4602      	mov	r2, r0
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	1ad3      	subs	r3, r2, r3
 800503a:	2b02      	cmp	r3, #2
 800503c:	d901      	bls.n	8005042 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800503e:	2303      	movs	r3, #3
 8005040:	e011      	b.n	8005066 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005042:	4b0b      	ldr	r3, [pc, #44]	; (8005070 <HAL_RCC_ClockConfig+0x278>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f003 0307 	and.w	r3, r3, #7
 800504a:	683a      	ldr	r2, [r7, #0]
 800504c:	429a      	cmp	r2, r3
 800504e:	d1ef      	bne.n	8005030 <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005050:	f000 f8b4 	bl	80051bc <HAL_RCC_GetHCLKFreq>
 8005054:	4603      	mov	r3, r0
 8005056:	4a07      	ldr	r2, [pc, #28]	; (8005074 <HAL_RCC_ClockConfig+0x27c>)
 8005058:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 800505a:	4b07      	ldr	r3, [pc, #28]	; (8005078 <HAL_RCC_ClockConfig+0x280>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4618      	mov	r0, r3
 8005060:	f7fe fa24 	bl	80034ac <HAL_InitTick>
 8005064:	4603      	mov	r3, r0
}
 8005066:	4618      	mov	r0, r3
 8005068:	3710      	adds	r7, #16
 800506a:	46bd      	mov	sp, r7
 800506c:	bd80      	pop	{r7, pc}
 800506e:	bf00      	nop
 8005070:	58004000 	.word	0x58004000
 8005074:	2000000c 	.word	0x2000000c
 8005078:	20000010 	.word	0x20000010

0800507c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800507c:	b590      	push	{r4, r7, lr}
 800507e:	b087      	sub	sp, #28
 8005080:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8005082:	2300      	movs	r3, #0
 8005084:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8005086:	2300      	movs	r3, #0
 8005088:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800508a:	f7ff f9e4 	bl	8004456 <LL_RCC_GetSysClkSource>
 800508e:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005090:	f7ff facd 	bl	800462e <LL_RCC_PLL_GetMainSource>
 8005094:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005096:	68bb      	ldr	r3, [r7, #8]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d005      	beq.n	80050a8 <HAL_RCC_GetSysClockFreq+0x2c>
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	2b0c      	cmp	r3, #12
 80050a0:	d139      	bne.n	8005116 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2b01      	cmp	r3, #1
 80050a6:	d136      	bne.n	8005116 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80050a8:	f7ff f987 	bl	80043ba <LL_RCC_MSI_IsEnabledRangeSelect>
 80050ac:	4603      	mov	r3, r0
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d115      	bne.n	80050de <HAL_RCC_GetSysClockFreq+0x62>
 80050b2:	f7ff f982 	bl	80043ba <LL_RCC_MSI_IsEnabledRangeSelect>
 80050b6:	4603      	mov	r3, r0
 80050b8:	2b01      	cmp	r3, #1
 80050ba:	d106      	bne.n	80050ca <HAL_RCC_GetSysClockFreq+0x4e>
 80050bc:	f7ff f98d 	bl	80043da <LL_RCC_MSI_GetRange>
 80050c0:	4603      	mov	r3, r0
 80050c2:	0a1b      	lsrs	r3, r3, #8
 80050c4:	f003 030f 	and.w	r3, r3, #15
 80050c8:	e005      	b.n	80050d6 <HAL_RCC_GetSysClockFreq+0x5a>
 80050ca:	f7ff f991 	bl	80043f0 <LL_RCC_MSI_GetRangeAfterStandby>
 80050ce:	4603      	mov	r3, r0
 80050d0:	0a1b      	lsrs	r3, r3, #8
 80050d2:	f003 030f 	and.w	r3, r3, #15
 80050d6:	4a36      	ldr	r2, [pc, #216]	; (80051b0 <HAL_RCC_GetSysClockFreq+0x134>)
 80050d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050dc:	e014      	b.n	8005108 <HAL_RCC_GetSysClockFreq+0x8c>
 80050de:	f7ff f96c 	bl	80043ba <LL_RCC_MSI_IsEnabledRangeSelect>
 80050e2:	4603      	mov	r3, r0
 80050e4:	2b01      	cmp	r3, #1
 80050e6:	d106      	bne.n	80050f6 <HAL_RCC_GetSysClockFreq+0x7a>
 80050e8:	f7ff f977 	bl	80043da <LL_RCC_MSI_GetRange>
 80050ec:	4603      	mov	r3, r0
 80050ee:	091b      	lsrs	r3, r3, #4
 80050f0:	f003 030f 	and.w	r3, r3, #15
 80050f4:	e005      	b.n	8005102 <HAL_RCC_GetSysClockFreq+0x86>
 80050f6:	f7ff f97b 	bl	80043f0 <LL_RCC_MSI_GetRangeAfterStandby>
 80050fa:	4603      	mov	r3, r0
 80050fc:	091b      	lsrs	r3, r3, #4
 80050fe:	f003 030f 	and.w	r3, r3, #15
 8005102:	4a2b      	ldr	r2, [pc, #172]	; (80051b0 <HAL_RCC_GetSysClockFreq+0x134>)
 8005104:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005108:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800510a:	68bb      	ldr	r3, [r7, #8]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d115      	bne.n	800513c <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8005110:	693b      	ldr	r3, [r7, #16]
 8005112:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005114:	e012      	b.n	800513c <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	2b04      	cmp	r3, #4
 800511a:	d102      	bne.n	8005122 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800511c:	4b25      	ldr	r3, [pc, #148]	; (80051b4 <HAL_RCC_GetSysClockFreq+0x138>)
 800511e:	617b      	str	r3, [r7, #20]
 8005120:	e00c      	b.n	800513c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005122:	68bb      	ldr	r3, [r7, #8]
 8005124:	2b08      	cmp	r3, #8
 8005126:	d109      	bne.n	800513c <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005128:	f7ff f85a 	bl	80041e0 <LL_RCC_HSE_IsEnabledDiv2>
 800512c:	4603      	mov	r3, r0
 800512e:	2b01      	cmp	r3, #1
 8005130:	d102      	bne.n	8005138 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8005132:	4b20      	ldr	r3, [pc, #128]	; (80051b4 <HAL_RCC_GetSysClockFreq+0x138>)
 8005134:	617b      	str	r3, [r7, #20]
 8005136:	e001      	b.n	800513c <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8005138:	4b1f      	ldr	r3, [pc, #124]	; (80051b8 <HAL_RCC_GetSysClockFreq+0x13c>)
 800513a:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800513c:	f7ff f98b 	bl	8004456 <LL_RCC_GetSysClkSource>
 8005140:	4603      	mov	r3, r0
 8005142:	2b0c      	cmp	r3, #12
 8005144:	d12f      	bne.n	80051a6 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8005146:	f7ff fa72 	bl	800462e <LL_RCC_PLL_GetMainSource>
 800514a:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2b02      	cmp	r3, #2
 8005150:	d003      	beq.n	800515a <HAL_RCC_GetSysClockFreq+0xde>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2b03      	cmp	r3, #3
 8005156:	d003      	beq.n	8005160 <HAL_RCC_GetSysClockFreq+0xe4>
 8005158:	e00d      	b.n	8005176 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800515a:	4b16      	ldr	r3, [pc, #88]	; (80051b4 <HAL_RCC_GetSysClockFreq+0x138>)
 800515c:	60fb      	str	r3, [r7, #12]
        break;
 800515e:	e00d      	b.n	800517c <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005160:	f7ff f83e 	bl	80041e0 <LL_RCC_HSE_IsEnabledDiv2>
 8005164:	4603      	mov	r3, r0
 8005166:	2b01      	cmp	r3, #1
 8005168:	d102      	bne.n	8005170 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800516a:	4b12      	ldr	r3, [pc, #72]	; (80051b4 <HAL_RCC_GetSysClockFreq+0x138>)
 800516c:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800516e:	e005      	b.n	800517c <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8005170:	4b11      	ldr	r3, [pc, #68]	; (80051b8 <HAL_RCC_GetSysClockFreq+0x13c>)
 8005172:	60fb      	str	r3, [r7, #12]
        break;
 8005174:	e002      	b.n	800517c <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8005176:	693b      	ldr	r3, [r7, #16]
 8005178:	60fb      	str	r3, [r7, #12]
        break;
 800517a:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800517c:	f7ff fa35 	bl	80045ea <LL_RCC_PLL_GetN>
 8005180:	4602      	mov	r2, r0
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	fb03 f402 	mul.w	r4, r3, r2
 8005188:	f7ff fa46 	bl	8004618 <LL_RCC_PLL_GetDivider>
 800518c:	4603      	mov	r3, r0
 800518e:	091b      	lsrs	r3, r3, #4
 8005190:	3301      	adds	r3, #1
 8005192:	fbb4 f4f3 	udiv	r4, r4, r3
 8005196:	f7ff fa34 	bl	8004602 <LL_RCC_PLL_GetR>
 800519a:	4603      	mov	r3, r0
 800519c:	0f5b      	lsrs	r3, r3, #29
 800519e:	3301      	adds	r3, #1
 80051a0:	fbb4 f3f3 	udiv	r3, r4, r3
 80051a4:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80051a6:	697b      	ldr	r3, [r7, #20]
}
 80051a8:	4618      	mov	r0, r3
 80051aa:	371c      	adds	r7, #28
 80051ac:	46bd      	mov	sp, r7
 80051ae:	bd90      	pop	{r4, r7, pc}
 80051b0:	0800ce98 	.word	0x0800ce98
 80051b4:	00f42400 	.word	0x00f42400
 80051b8:	01e84800 	.word	0x01e84800

080051bc <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80051bc:	b598      	push	{r3, r4, r7, lr}
 80051be:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80051c0:	f7ff ff5c 	bl	800507c <HAL_RCC_GetSysClockFreq>
 80051c4:	4604      	mov	r4, r0
 80051c6:	f7ff f9b5 	bl	8004534 <LL_RCC_GetAHBPrescaler>
 80051ca:	4603      	mov	r3, r0
 80051cc:	091b      	lsrs	r3, r3, #4
 80051ce:	f003 030f 	and.w	r3, r3, #15
 80051d2:	4a03      	ldr	r2, [pc, #12]	; (80051e0 <HAL_RCC_GetHCLKFreq+0x24>)
 80051d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051d8:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80051dc:	4618      	mov	r0, r3
 80051de:	bd98      	pop	{r3, r4, r7, pc}
 80051e0:	0800ce38 	.word	0x0800ce38

080051e4 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80051e4:	b598      	push	{r3, r4, r7, lr}
 80051e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80051e8:	f7ff ffe8 	bl	80051bc <HAL_RCC_GetHCLKFreq>
 80051ec:	4604      	mov	r4, r0
 80051ee:	f7ff f9b9 	bl	8004564 <LL_RCC_GetAPB1Prescaler>
 80051f2:	4603      	mov	r3, r0
 80051f4:	0a1b      	lsrs	r3, r3, #8
 80051f6:	4a03      	ldr	r2, [pc, #12]	; (8005204 <HAL_RCC_GetPCLK1Freq+0x20>)
 80051f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051fc:	fa24 f303 	lsr.w	r3, r4, r3
}
 8005200:	4618      	mov	r0, r3
 8005202:	bd98      	pop	{r3, r4, r7, pc}
 8005204:	0800ce78 	.word	0x0800ce78

08005208 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005208:	b598      	push	{r3, r4, r7, lr}
 800520a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 800520c:	f7ff ffd6 	bl	80051bc <HAL_RCC_GetHCLKFreq>
 8005210:	4604      	mov	r4, r0
 8005212:	f7ff f9b2 	bl	800457a <LL_RCC_GetAPB2Prescaler>
 8005216:	4603      	mov	r3, r0
 8005218:	0adb      	lsrs	r3, r3, #11
 800521a:	4a03      	ldr	r2, [pc, #12]	; (8005228 <HAL_RCC_GetPCLK2Freq+0x20>)
 800521c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005220:	fa24 f303 	lsr.w	r3, r4, r3
}
 8005224:	4618      	mov	r0, r3
 8005226:	bd98      	pop	{r3, r4, r7, pc}
 8005228:	0800ce78 	.word	0x0800ce78

0800522c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 800522c:	b590      	push	{r4, r7, lr}
 800522e:	b085      	sub	sp, #20
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	091b      	lsrs	r3, r3, #4
 8005238:	f003 030f 	and.w	r3, r3, #15
 800523c:	4a10      	ldr	r2, [pc, #64]	; (8005280 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 800523e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005242:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8005244:	f7ff f981 	bl	800454a <LL_RCC_GetAHB3Prescaler>
 8005248:	4603      	mov	r3, r0
 800524a:	091b      	lsrs	r3, r3, #4
 800524c:	f003 030f 	and.w	r3, r3, #15
 8005250:	4a0c      	ldr	r2, [pc, #48]	; (8005284 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8005252:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005256:	68fa      	ldr	r2, [r7, #12]
 8005258:	fbb2 f3f3 	udiv	r3, r2, r3
 800525c:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800525e:	68bb      	ldr	r3, [r7, #8]
 8005260:	4a09      	ldr	r2, [pc, #36]	; (8005288 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8005262:	fba2 2303 	umull	r2, r3, r2, r3
 8005266:	0c9c      	lsrs	r4, r3, #18
 8005268:	f7fe ff80 	bl	800416c <HAL_PWREx_GetVoltageRange>
 800526c:	4603      	mov	r3, r0
 800526e:	4619      	mov	r1, r3
 8005270:	4620      	mov	r0, r4
 8005272:	f000 f80b 	bl	800528c <RCC_SetFlashLatency>
 8005276:	4603      	mov	r3, r0
}
 8005278:	4618      	mov	r0, r3
 800527a:	3714      	adds	r7, #20
 800527c:	46bd      	mov	sp, r7
 800527e:	bd90      	pop	{r4, r7, pc}
 8005280:	0800ce98 	.word	0x0800ce98
 8005284:	0800ce38 	.word	0x0800ce38
 8005288:	431bde83 	.word	0x431bde83

0800528c <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b08e      	sub	sp, #56	; 0x38
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
 8005294:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8005296:	4a3a      	ldr	r2, [pc, #232]	; (8005380 <RCC_SetFlashLatency+0xf4>)
 8005298:	f107 0320 	add.w	r3, r7, #32
 800529c:	e892 0003 	ldmia.w	r2, {r0, r1}
 80052a0:	6018      	str	r0, [r3, #0]
 80052a2:	3304      	adds	r3, #4
 80052a4:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 80052a6:	4a37      	ldr	r2, [pc, #220]	; (8005384 <RCC_SetFlashLatency+0xf8>)
 80052a8:	f107 0318 	add.w	r3, r7, #24
 80052ac:	e892 0003 	ldmia.w	r2, {r0, r1}
 80052b0:	6018      	str	r0, [r3, #0]
 80052b2:	3304      	adds	r3, #4
 80052b4:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 80052b6:	4a34      	ldr	r2, [pc, #208]	; (8005388 <RCC_SetFlashLatency+0xfc>)
 80052b8:	f107 030c 	add.w	r3, r7, #12
 80052bc:	ca07      	ldmia	r2, {r0, r1, r2}
 80052be:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80052c2:	2300      	movs	r3, #0
 80052c4:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80052cc:	d11b      	bne.n	8005306 <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80052ce:	2300      	movs	r3, #0
 80052d0:	633b      	str	r3, [r7, #48]	; 0x30
 80052d2:	e014      	b.n	80052fe <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80052d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052d6:	005b      	lsls	r3, r3, #1
 80052d8:	3338      	adds	r3, #56	; 0x38
 80052da:	443b      	add	r3, r7
 80052dc:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80052e0:	461a      	mov	r2, r3
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d807      	bhi.n	80052f8 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80052e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052ea:	009b      	lsls	r3, r3, #2
 80052ec:	3338      	adds	r3, #56	; 0x38
 80052ee:	443b      	add	r3, r7
 80052f0:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80052f4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80052f6:	e021      	b.n	800533c <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80052f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052fa:	3301      	adds	r3, #1
 80052fc:	633b      	str	r3, [r7, #48]	; 0x30
 80052fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005300:	2b02      	cmp	r3, #2
 8005302:	d9e7      	bls.n	80052d4 <RCC_SetFlashLatency+0x48>
 8005304:	e01a      	b.n	800533c <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005306:	2300      	movs	r3, #0
 8005308:	62fb      	str	r3, [r7, #44]	; 0x2c
 800530a:	e014      	b.n	8005336 <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800530c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800530e:	005b      	lsls	r3, r3, #1
 8005310:	3338      	adds	r3, #56	; 0x38
 8005312:	443b      	add	r3, r7
 8005314:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8005318:	461a      	mov	r2, r3
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	4293      	cmp	r3, r2
 800531e:	d807      	bhi.n	8005330 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8005320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005322:	009b      	lsls	r3, r3, #2
 8005324:	3338      	adds	r3, #56	; 0x38
 8005326:	443b      	add	r3, r7
 8005328:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800532c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800532e:	e005      	b.n	800533c <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005332:	3301      	adds	r3, #1
 8005334:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005338:	2b02      	cmp	r3, #2
 800533a:	d9e7      	bls.n	800530c <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800533c:	4b13      	ldr	r3, [pc, #76]	; (800538c <RCC_SetFlashLatency+0x100>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f023 0207 	bic.w	r2, r3, #7
 8005344:	4911      	ldr	r1, [pc, #68]	; (800538c <RCC_SetFlashLatency+0x100>)
 8005346:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005348:	4313      	orrs	r3, r2
 800534a:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800534c:	f7fd fbd0 	bl	8002af0 <HAL_GetTick>
 8005350:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8005352:	e008      	b.n	8005366 <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005354:	f7fd fbcc 	bl	8002af0 <HAL_GetTick>
 8005358:	4602      	mov	r2, r0
 800535a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800535c:	1ad3      	subs	r3, r2, r3
 800535e:	2b02      	cmp	r3, #2
 8005360:	d901      	bls.n	8005366 <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 8005362:	2303      	movs	r3, #3
 8005364:	e007      	b.n	8005376 <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8005366:	4b09      	ldr	r3, [pc, #36]	; (800538c <RCC_SetFlashLatency+0x100>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f003 0307 	and.w	r3, r3, #7
 800536e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005370:	429a      	cmp	r2, r3
 8005372:	d1ef      	bne.n	8005354 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8005374:	2300      	movs	r3, #0
}
 8005376:	4618      	mov	r0, r3
 8005378:	3738      	adds	r7, #56	; 0x38
 800537a:	46bd      	mov	sp, r7
 800537c:	bd80      	pop	{r7, pc}
 800537e:	bf00      	nop
 8005380:	0800cdf8 	.word	0x0800cdf8
 8005384:	0800ce00 	.word	0x0800ce00
 8005388:	0800ce08 	.word	0x0800ce08
 800538c:	58004000 	.word	0x58004000

08005390 <LL_RCC_LSE_IsReady>:
{
 8005390:	b480      	push	{r7}
 8005392:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005394:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005398:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800539c:	f003 0302 	and.w	r3, r3, #2
 80053a0:	2b02      	cmp	r3, #2
 80053a2:	d101      	bne.n	80053a8 <LL_RCC_LSE_IsReady+0x18>
 80053a4:	2301      	movs	r3, #1
 80053a6:	e000      	b.n	80053aa <LL_RCC_LSE_IsReady+0x1a>
 80053a8:	2300      	movs	r3, #0
}
 80053aa:	4618      	mov	r0, r3
 80053ac:	46bd      	mov	sp, r7
 80053ae:	bc80      	pop	{r7}
 80053b0:	4770      	bx	lr

080053b2 <LL_RCC_SetUSARTClockSource>:
{
 80053b2:	b480      	push	{r7}
 80053b4:	b083      	sub	sp, #12
 80053b6:	af00      	add	r7, sp, #0
 80053b8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 80053ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053be:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	0c1b      	lsrs	r3, r3, #16
 80053c6:	43db      	mvns	r3, r3
 80053c8:	401a      	ands	r2, r3
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	b29b      	uxth	r3, r3
 80053ce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80053d2:	4313      	orrs	r3, r2
 80053d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80053d8:	bf00      	nop
 80053da:	370c      	adds	r7, #12
 80053dc:	46bd      	mov	sp, r7
 80053de:	bc80      	pop	{r7}
 80053e0:	4770      	bx	lr

080053e2 <LL_RCC_SetI2SClockSource>:
{
 80053e2:	b480      	push	{r7}
 80053e4:	b083      	sub	sp, #12
 80053e6:	af00      	add	r7, sp, #0
 80053e8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 80053ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053f2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80053f6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	4313      	orrs	r3, r2
 80053fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005402:	bf00      	nop
 8005404:	370c      	adds	r7, #12
 8005406:	46bd      	mov	sp, r7
 8005408:	bc80      	pop	{r7}
 800540a:	4770      	bx	lr

0800540c <LL_RCC_SetLPUARTClockSource>:
{
 800540c:	b480      	push	{r7}
 800540e:	b083      	sub	sp, #12
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8005414:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005418:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800541c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005420:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	4313      	orrs	r3, r2
 8005428:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800542c:	bf00      	nop
 800542e:	370c      	adds	r7, #12
 8005430:	46bd      	mov	sp, r7
 8005432:	bc80      	pop	{r7}
 8005434:	4770      	bx	lr

08005436 <LL_RCC_SetI2CClockSource>:
{
 8005436:	b480      	push	{r7}
 8005438:	b083      	sub	sp, #12
 800543a:	af00      	add	r7, sp, #0
 800543c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800543e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005442:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	091b      	lsrs	r3, r3, #4
 800544a:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800544e:	43db      	mvns	r3, r3
 8005450:	401a      	ands	r2, r3
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	011b      	lsls	r3, r3, #4
 8005456:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800545a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800545e:	4313      	orrs	r3, r2
 8005460:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005464:	bf00      	nop
 8005466:	370c      	adds	r7, #12
 8005468:	46bd      	mov	sp, r7
 800546a:	bc80      	pop	{r7}
 800546c:	4770      	bx	lr

0800546e <LL_RCC_SetLPTIMClockSource>:
{
 800546e:	b480      	push	{r7}
 8005470:	b083      	sub	sp, #12
 8005472:	af00      	add	r7, sp, #0
 8005474:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8005476:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800547a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	0c1b      	lsrs	r3, r3, #16
 8005482:	041b      	lsls	r3, r3, #16
 8005484:	43db      	mvns	r3, r3
 8005486:	401a      	ands	r2, r3
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	041b      	lsls	r3, r3, #16
 800548c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005490:	4313      	orrs	r3, r2
 8005492:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005496:	bf00      	nop
 8005498:	370c      	adds	r7, #12
 800549a:	46bd      	mov	sp, r7
 800549c:	bc80      	pop	{r7}
 800549e:	4770      	bx	lr

080054a0 <LL_RCC_SetRNGClockSource>:
{
 80054a0:	b480      	push	{r7}
 80054a2:	b083      	sub	sp, #12
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80054a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054b0:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80054b4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	4313      	orrs	r3, r2
 80054bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80054c0:	bf00      	nop
 80054c2:	370c      	adds	r7, #12
 80054c4:	46bd      	mov	sp, r7
 80054c6:	bc80      	pop	{r7}
 80054c8:	4770      	bx	lr

080054ca <LL_RCC_SetADCClockSource>:
{
 80054ca:	b480      	push	{r7}
 80054cc:	b083      	sub	sp, #12
 80054ce:	af00      	add	r7, sp, #0
 80054d0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80054d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054da:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80054de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	4313      	orrs	r3, r2
 80054e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80054ea:	bf00      	nop
 80054ec:	370c      	adds	r7, #12
 80054ee:	46bd      	mov	sp, r7
 80054f0:	bc80      	pop	{r7}
 80054f2:	4770      	bx	lr

080054f4 <LL_RCC_SetRTCClockSource>:
{
 80054f4:	b480      	push	{r7}
 80054f6:	b083      	sub	sp, #12
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80054fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005500:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005504:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005508:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	4313      	orrs	r3, r2
 8005510:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8005514:	bf00      	nop
 8005516:	370c      	adds	r7, #12
 8005518:	46bd      	mov	sp, r7
 800551a:	bc80      	pop	{r7}
 800551c:	4770      	bx	lr

0800551e <LL_RCC_GetRTCClockSource>:
{
 800551e:	b480      	push	{r7}
 8005520:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8005522:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005526:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800552a:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 800552e:	4618      	mov	r0, r3
 8005530:	46bd      	mov	sp, r7
 8005532:	bc80      	pop	{r7}
 8005534:	4770      	bx	lr

08005536 <LL_RCC_ForceBackupDomainReset>:
{
 8005536:	b480      	push	{r7}
 8005538:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800553a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800553e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005542:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005546:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800554a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800554e:	bf00      	nop
 8005550:	46bd      	mov	sp, r7
 8005552:	bc80      	pop	{r7}
 8005554:	4770      	bx	lr

08005556 <LL_RCC_ReleaseBackupDomainReset>:
{
 8005556:	b480      	push	{r7}
 8005558:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800555a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800555e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005562:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005566:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800556a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800556e:	bf00      	nop
 8005570:	46bd      	mov	sp, r7
 8005572:	bc80      	pop	{r7}
 8005574:	4770      	bx	lr
	...

08005578 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b086      	sub	sp, #24
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8005580:	2300      	movs	r3, #0
 8005582:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8005584:	2300      	movs	r3, #0
 8005586:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8005588:	2300      	movs	r3, #0
 800558a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005594:	2b00      	cmp	r3, #0
 8005596:	d058      	beq.n	800564a <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8005598:	f7fe fdda 	bl	8004150 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800559c:	f7fd faa8 	bl	8002af0 <HAL_GetTick>
 80055a0:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 80055a2:	e009      	b.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055a4:	f7fd faa4 	bl	8002af0 <HAL_GetTick>
 80055a8:	4602      	mov	r2, r0
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	1ad3      	subs	r3, r2, r3
 80055ae:	2b02      	cmp	r3, #2
 80055b0:	d902      	bls.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 80055b2:	2303      	movs	r3, #3
 80055b4:	74fb      	strb	r3, [r7, #19]
        break;
 80055b6:	e006      	b.n	80055c6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 80055b8:	4b7b      	ldr	r3, [pc, #492]	; (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055c4:	d1ee      	bne.n	80055a4 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 80055c6:	7cfb      	ldrb	r3, [r7, #19]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d13c      	bne.n	8005646 <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 80055cc:	f7ff ffa7 	bl	800551e <LL_RCC_GetRTCClockSource>
 80055d0:	4602      	mov	r2, r0
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055d6:	429a      	cmp	r2, r3
 80055d8:	d00f      	beq.n	80055fa <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80055da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055e6:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80055e8:	f7ff ffa5 	bl	8005536 <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 80055ec:	f7ff ffb3 	bl	8005556 <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80055f0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80055f4:	697b      	ldr	r3, [r7, #20]
 80055f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 80055fa:	697b      	ldr	r3, [r7, #20]
 80055fc:	f003 0302 	and.w	r3, r3, #2
 8005600:	2b00      	cmp	r3, #0
 8005602:	d014      	beq.n	800562e <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005604:	f7fd fa74 	bl	8002af0 <HAL_GetTick>
 8005608:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 800560a:	e00b      	b.n	8005624 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800560c:	f7fd fa70 	bl	8002af0 <HAL_GetTick>
 8005610:	4602      	mov	r2, r0
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	1ad3      	subs	r3, r2, r3
 8005616:	f241 3288 	movw	r2, #5000	; 0x1388
 800561a:	4293      	cmp	r3, r2
 800561c:	d902      	bls.n	8005624 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 800561e:	2303      	movs	r3, #3
 8005620:	74fb      	strb	r3, [r7, #19]
            break;
 8005622:	e004      	b.n	800562e <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8005624:	f7ff feb4 	bl	8005390 <LL_RCC_LSE_IsReady>
 8005628:	4603      	mov	r3, r0
 800562a:	2b01      	cmp	r3, #1
 800562c:	d1ee      	bne.n	800560c <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 800562e:	7cfb      	ldrb	r3, [r7, #19]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d105      	bne.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005638:	4618      	mov	r0, r3
 800563a:	f7ff ff5b 	bl	80054f4 <LL_RCC_SetRTCClockSource>
 800563e:	e004      	b.n	800564a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005640:	7cfb      	ldrb	r3, [r7, #19]
 8005642:	74bb      	strb	r3, [r7, #18]
 8005644:	e001      	b.n	800564a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005646:	7cfb      	ldrb	r3, [r7, #19]
 8005648:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f003 0301 	and.w	r3, r3, #1
 8005652:	2b00      	cmp	r3, #0
 8005654:	d004      	beq.n	8005660 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	685b      	ldr	r3, [r3, #4]
 800565a:	4618      	mov	r0, r3
 800565c:	f7ff fea9 	bl	80053b2 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f003 0302 	and.w	r3, r3, #2
 8005668:	2b00      	cmp	r3, #0
 800566a:	d004      	beq.n	8005676 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	689b      	ldr	r3, [r3, #8]
 8005670:	4618      	mov	r0, r3
 8005672:	f7ff fe9e 	bl	80053b2 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f003 0320 	and.w	r3, r3, #32
 800567e:	2b00      	cmp	r3, #0
 8005680:	d004      	beq.n	800568c <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	691b      	ldr	r3, [r3, #16]
 8005686:	4618      	mov	r0, r3
 8005688:	f7ff fec0 	bl	800540c <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005694:	2b00      	cmp	r3, #0
 8005696:	d004      	beq.n	80056a2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6a1b      	ldr	r3, [r3, #32]
 800569c:	4618      	mov	r0, r3
 800569e:	f7ff fee6 	bl	800546e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d004      	beq.n	80056b8 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056b2:	4618      	mov	r0, r3
 80056b4:	f7ff fedb 	bl	800546e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d004      	beq.n	80056ce <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056c8:	4618      	mov	r0, r3
 80056ca:	f7ff fed0 	bl	800546e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d004      	beq.n	80056e4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	695b      	ldr	r3, [r3, #20]
 80056de:	4618      	mov	r0, r3
 80056e0:	f7ff fea9 	bl	8005436 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d004      	beq.n	80056fa <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	699b      	ldr	r3, [r3, #24]
 80056f4:	4618      	mov	r0, r3
 80056f6:	f7ff fe9e 	bl	8005436 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005702:	2b00      	cmp	r3, #0
 8005704:	d004      	beq.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	69db      	ldr	r3, [r3, #28]
 800570a:	4618      	mov	r0, r3
 800570c:	f7ff fe93 	bl	8005436 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f003 0310 	and.w	r3, r3, #16
 8005718:	2b00      	cmp	r3, #0
 800571a:	d011      	beq.n	8005740 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	68db      	ldr	r3, [r3, #12]
 8005720:	4618      	mov	r0, r3
 8005722:	f7ff fe5e 	bl	80053e2 <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	68db      	ldr	r3, [r3, #12]
 800572a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800572e:	d107      	bne.n	8005740 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8005730:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005734:	68db      	ldr	r3, [r3, #12]
 8005736:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800573a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800573e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005748:	2b00      	cmp	r3, #0
 800574a:	d010      	beq.n	800576e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005750:	4618      	mov	r0, r3
 8005752:	f7ff fea5 	bl	80054a0 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800575a:	2b00      	cmp	r3, #0
 800575c:	d107      	bne.n	800576e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800575e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005762:	68db      	ldr	r3, [r3, #12]
 8005764:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005768:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800576c:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005776:	2b00      	cmp	r3, #0
 8005778:	d011      	beq.n	800579e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800577e:	4618      	mov	r0, r3
 8005780:	f7ff fea3 	bl	80054ca <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005788:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800578c:	d107      	bne.n	800579e <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800578e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005792:	68db      	ldr	r3, [r3, #12]
 8005794:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005798:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800579c:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 800579e:	7cbb      	ldrb	r3, [r7, #18]
}
 80057a0:	4618      	mov	r0, r3
 80057a2:	3718      	adds	r7, #24
 80057a4:	46bd      	mov	sp, r7
 80057a6:	bd80      	pop	{r7, pc}
 80057a8:	58000400 	.word	0x58000400

080057ac <LL_PWR_SetRadioBusyTrigger>:
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_NONE
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_WU_IT
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRadioBusyTrigger(uint32_t RadioBusyTrigger)
{
 80057ac:	b480      	push	{r7}
 80057ae:	b083      	sub	sp, #12
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 80057b4:	4b06      	ldr	r3, [pc, #24]	; (80057d0 <LL_PWR_SetRadioBusyTrigger+0x24>)
 80057b6:	689b      	ldr	r3, [r3, #8]
 80057b8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80057bc:	4904      	ldr	r1, [pc, #16]	; (80057d0 <LL_PWR_SetRadioBusyTrigger+0x24>)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	4313      	orrs	r3, r2
 80057c2:	608b      	str	r3, [r1, #8]
}
 80057c4:	bf00      	nop
 80057c6:	370c      	adds	r7, #12
 80057c8:	46bd      	mov	sp, r7
 80057ca:	bc80      	pop	{r7}
 80057cc:	4770      	bx	lr
 80057ce:	bf00      	nop
 80057d0:	58000400 	.word	0x58000400

080057d4 <LL_PWR_UnselectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level high.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_UnselectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_UnselectSUBGHZSPI_NSS(void)
{
 80057d4:	b480      	push	{r7}
 80057d6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80057d8:	4b05      	ldr	r3, [pc, #20]	; (80057f0 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 80057da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057de:	4a04      	ldr	r2, [pc, #16]	; (80057f0 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 80057e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80057e8:	bf00      	nop
 80057ea:	46bd      	mov	sp, r7
 80057ec:	bc80      	pop	{r7}
 80057ee:	4770      	bx	lr
 80057f0:	58000400 	.word	0x58000400

080057f4 <LL_PWR_SelectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level low.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_SelectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SelectSUBGHZSPI_NSS(void)
{
 80057f4:	b480      	push	{r7}
 80057f6:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80057f8:	4b05      	ldr	r3, [pc, #20]	; (8005810 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 80057fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057fe:	4a04      	ldr	r2, [pc, #16]	; (8005810 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8005800:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005804:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005808:	bf00      	nop
 800580a:	46bd      	mov	sp, r7
 800580c:	bc80      	pop	{r7}
 800580e:	4770      	bx	lr
 8005810:	58000400 	.word	0x58000400

08005814 <LL_PWR_ClearFlag_RFBUSY>:
  * @brief  Clear radio busy flag
  * @rmtoll SCR          CRFBUSYF      LL_PWR_ClearFlag_RFBUSY
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_RFBUSY(void)
{
 8005814:	b480      	push	{r7}
 8005816:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8005818:	4b03      	ldr	r3, [pc, #12]	; (8005828 <LL_PWR_ClearFlag_RFBUSY+0x14>)
 800581a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800581e:	619a      	str	r2, [r3, #24]
}
 8005820:	bf00      	nop
 8005822:	46bd      	mov	sp, r7
 8005824:	bc80      	pop	{r7}
 8005826:	4770      	bx	lr
 8005828:	58000400 	.word	0x58000400

0800582c <LL_PWR_IsActiveFlag_RFBUSYS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYS       LL_PWR_IsActiveFlag_RFBUSYS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYS(void)
{
 800582c:	b480      	push	{r7}
 800582e:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8005830:	4b06      	ldr	r3, [pc, #24]	; (800584c <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 8005832:	695b      	ldr	r3, [r3, #20]
 8005834:	f003 0302 	and.w	r3, r3, #2
 8005838:	2b02      	cmp	r3, #2
 800583a:	d101      	bne.n	8005840 <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 800583c:	2301      	movs	r3, #1
 800583e:	e000      	b.n	8005842 <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 8005840:	2300      	movs	r3, #0
}
 8005842:	4618      	mov	r0, r3
 8005844:	46bd      	mov	sp, r7
 8005846:	bc80      	pop	{r7}
 8005848:	4770      	bx	lr
 800584a:	bf00      	nop
 800584c:	58000400 	.word	0x58000400

08005850 <LL_PWR_IsActiveFlag_RFBUSYMS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYMS      LL_PWR_IsActiveFlag_RFBUSYMS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYMS(void)
{
 8005850:	b480      	push	{r7}
 8005852:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8005854:	4b06      	ldr	r3, [pc, #24]	; (8005870 <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 8005856:	695b      	ldr	r3, [r3, #20]
 8005858:	f003 0304 	and.w	r3, r3, #4
 800585c:	2b04      	cmp	r3, #4
 800585e:	d101      	bne.n	8005864 <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 8005860:	2301      	movs	r3, #1
 8005862:	e000      	b.n	8005866 <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 8005864:	2300      	movs	r3, #0
}
 8005866:	4618      	mov	r0, r3
 8005868:	46bd      	mov	sp, r7
 800586a:	bc80      	pop	{r7}
 800586c:	4770      	bx	lr
 800586e:	bf00      	nop
 8005870:	58000400 	.word	0x58000400

08005874 <LL_RCC_RF_DisableReset>:
{
 8005874:	b480      	push	{r7}
 8005876:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8005878:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800587c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005880:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005884:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005888:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800588c:	bf00      	nop
 800588e:	46bd      	mov	sp, r7
 8005890:	bc80      	pop	{r7}
 8005892:	4770      	bx	lr

08005894 <LL_RCC_IsRFUnderReset>:
{
 8005894:	b480      	push	{r7}
 8005896:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8005898:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800589c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80058a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80058a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80058a8:	d101      	bne.n	80058ae <LL_RCC_IsRFUnderReset+0x1a>
 80058aa:	2301      	movs	r3, #1
 80058ac:	e000      	b.n	80058b0 <LL_RCC_IsRFUnderReset+0x1c>
 80058ae:	2300      	movs	r3, #0
}
 80058b0:	4618      	mov	r0, r3
 80058b2:	46bd      	mov	sp, r7
 80058b4:	bc80      	pop	{r7}
 80058b6:	4770      	bx	lr

080058b8 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 80058b8:	b480      	push	{r7}
 80058ba:	b083      	sub	sp, #12
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80058c0:	4b06      	ldr	r3, [pc, #24]	; (80058dc <LL_EXTI_EnableIT_32_63+0x24>)
 80058c2:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80058c6:	4905      	ldr	r1, [pc, #20]	; (80058dc <LL_EXTI_EnableIT_32_63+0x24>)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	4313      	orrs	r3, r2
 80058cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80058d0:	bf00      	nop
 80058d2:	370c      	adds	r7, #12
 80058d4:	46bd      	mov	sp, r7
 80058d6:	bc80      	pop	{r7}
 80058d8:	4770      	bx	lr
 80058da:	bf00      	nop
 80058dc:	58000800 	.word	0x58000800

080058e0 <HAL_SUBGHZ_Init>:
  *         set the state to HAL_SUBGHZ_STATE_RESET_RF_READY with __HAL_SUBGHZ_RESET_HANDLE_STATE_RF_READY
  *         to avoid the reset of Radio peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b084      	sub	sp, #16
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  HAL_SUBGHZ_StateTypeDef subghz_state;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d103      	bne.n	80058f6 <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 80058ee:	2301      	movs	r3, #1
 80058f0:	73fb      	strb	r3, [r7, #15]
    return status;
 80058f2:	7bfb      	ldrb	r3, [r7, #15]
 80058f4:	e052      	b.n	800599c <HAL_SUBGHZ_Init+0xbc>
  }
  else
  {
    status = HAL_OK;
 80058f6:	2300      	movs	r3, #0
 80058f8:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  subghz_state = hsubghz->State;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	799b      	ldrb	r3, [r3, #6]
 80058fe:	73bb      	strb	r3, [r7, #14]
  if ((subghz_state == HAL_SUBGHZ_STATE_RESET) ||
 8005900:	7bbb      	ldrb	r3, [r7, #14]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d002      	beq.n	800590c <HAL_SUBGHZ_Init+0x2c>
 8005906:	7bbb      	ldrb	r3, [r7, #14]
 8005908:	2b03      	cmp	r3, #3
 800590a:	d109      	bne.n	8005920 <HAL_SUBGHZ_Init+0x40>
      (subghz_state == HAL_SUBGHZ_STATE_RESET_RF_READY))
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2200      	movs	r2, #0
 8005910:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 8005912:	6878      	ldr	r0, [r7, #4]
 8005914:	f7fd f8d2 	bl	8002abc <HAL_SUBGHZ_MspInit>
#if defined(CM0PLUS)
    /* Enable EXTI 44 : Radio IRQ ITs for CPU2 */
    LL_C2_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
#else
    /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
    LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 8005918:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800591c:	f7ff ffcc 	bl	80058b8 <LL_EXTI_EnableIT_32_63>
#endif /* CM0PLUS */
  }

  if (subghz_state == HAL_SUBGHZ_STATE_RESET)
 8005920:	7bbb      	ldrb	r3, [r7, #14]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d126      	bne.n	8005974 <HAL_SUBGHZ_Init+0x94>
  {
    /* Reinitialize Radio peripheral only if SUBGHZ is in full RESET state */
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2202      	movs	r2, #2
 800592a:	719a      	strb	r2, [r3, #6]

    /* De-asserts the reset signal of the Radio peripheral */
    LL_RCC_RF_DisableReset();
 800592c:	f7ff ffa2 	bl	8005874 <LL_RCC_RF_DisableReset>

    /* Verify that Radio in reset status flag is set */
    count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8005930:	4b1c      	ldr	r3, [pc, #112]	; (80059a4 <HAL_SUBGHZ_Init+0xc4>)
 8005932:	681a      	ldr	r2, [r3, #0]
 8005934:	4613      	mov	r3, r2
 8005936:	00db      	lsls	r3, r3, #3
 8005938:	1a9b      	subs	r3, r3, r2
 800593a:	009b      	lsls	r3, r3, #2
 800593c:	0cdb      	lsrs	r3, r3, #19
 800593e:	2264      	movs	r2, #100	; 0x64
 8005940:	fb02 f303 	mul.w	r3, r2, r3
 8005944:	60bb      	str	r3, [r7, #8]

    do
    {
      if (count == 0U)
 8005946:	68bb      	ldr	r3, [r7, #8]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d105      	bne.n	8005958 <HAL_SUBGHZ_Init+0x78>
      {
        status  = HAL_ERROR;
 800594c:	2301      	movs	r3, #1
 800594e:	73fb      	strb	r3, [r7, #15]
        hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2201      	movs	r2, #1
 8005954:	609a      	str	r2, [r3, #8]
        break;
 8005956:	e007      	b.n	8005968 <HAL_SUBGHZ_Init+0x88>
      }
      count--;
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	3b01      	subs	r3, #1
 800595c:	60bb      	str	r3, [r7, #8]
    } while (LL_RCC_IsRFUnderReset() != 0UL);
 800595e:	f7ff ff99 	bl	8005894 <LL_RCC_IsRFUnderReset>
 8005962:	4603      	mov	r3, r0
 8005964:	2b00      	cmp	r3, #0
 8005966:	d1ee      	bne.n	8005946 <HAL_SUBGHZ_Init+0x66>

    /* Asserts the reset signal of the Radio peripheral */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8005968:	f7ff ff34 	bl	80057d4 <LL_PWR_UnselectSUBGHZSPI_NSS>
#if defined(CM0PLUS)
    /* Enable wakeup signal of the Radio peripheral */
    LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
    /* Enable wakeup signal of the Radio peripheral */
    LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 800596c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8005970:	f7ff ff1c 	bl	80057ac <LL_PWR_SetRadioBusyTrigger>
#endif /* CM0PLUS */
  }

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 8005974:	f7ff ff4e 	bl	8005814 <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 8005978:	7bfb      	ldrb	r3, [r7, #15]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d10a      	bne.n	8005994 <HAL_SUBGHZ_Init+0xb4>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4618      	mov	r0, r3
 8005984:	f000 faac 	bl	8005ee0 <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2201      	movs	r2, #1
 800598c:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2200      	movs	r2, #0
 8005992:	609a      	str	r2, [r3, #8]
  }

  hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2201      	movs	r2, #1
 8005998:	719a      	strb	r2, [r3, #6]

  return status;
 800599a:	7bfb      	ldrb	r3, [r7, #15]
}
 800599c:	4618      	mov	r0, r3
 800599e:	3710      	adds	r7, #16
 80059a0:	46bd      	mov	sp, r7
 80059a2:	bd80      	pop	{r7, pc}
 80059a4:	2000000c 	.word	0x2000000c

080059a8 <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b086      	sub	sp, #24
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	60f8      	str	r0, [r7, #12]
 80059b0:	607a      	str	r2, [r7, #4]
 80059b2:	461a      	mov	r2, r3
 80059b4:	460b      	mov	r3, r1
 80059b6:	817b      	strh	r3, [r7, #10]
 80059b8:	4613      	mov	r3, r2
 80059ba:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	799b      	ldrb	r3, [r3, #6]
 80059c0:	b2db      	uxtb	r3, r3
 80059c2:	2b01      	cmp	r3, #1
 80059c4:	d14a      	bne.n	8005a5c <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	795b      	ldrb	r3, [r3, #5]
 80059ca:	2b01      	cmp	r3, #1
 80059cc:	d101      	bne.n	80059d2 <HAL_SUBGHZ_WriteRegisters+0x2a>
 80059ce:	2302      	movs	r3, #2
 80059d0:	e045      	b.n	8005a5e <HAL_SUBGHZ_WriteRegisters+0xb6>
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	2201      	movs	r2, #1
 80059d6:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	2202      	movs	r2, #2
 80059dc:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80059de:	68f8      	ldr	r0, [r7, #12]
 80059e0:	f000 fb4c 	bl	800607c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80059e4:	f7ff ff06 	bl	80057f4 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 80059e8:	210d      	movs	r1, #13
 80059ea:	68f8      	ldr	r0, [r7, #12]
 80059ec:	f000 fa98 	bl	8005f20 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 80059f0:	897b      	ldrh	r3, [r7, #10]
 80059f2:	0a1b      	lsrs	r3, r3, #8
 80059f4:	b29b      	uxth	r3, r3
 80059f6:	b2db      	uxtb	r3, r3
 80059f8:	4619      	mov	r1, r3
 80059fa:	68f8      	ldr	r0, [r7, #12]
 80059fc:	f000 fa90 	bl	8005f20 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8005a00:	897b      	ldrh	r3, [r7, #10]
 8005a02:	b2db      	uxtb	r3, r3
 8005a04:	4619      	mov	r1, r3
 8005a06:	68f8      	ldr	r0, [r7, #12]
 8005a08:	f000 fa8a 	bl	8005f20 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	82bb      	strh	r3, [r7, #20]
 8005a10:	e00a      	b.n	8005a28 <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8005a12:	8abb      	ldrh	r3, [r7, #20]
 8005a14:	687a      	ldr	r2, [r7, #4]
 8005a16:	4413      	add	r3, r2
 8005a18:	781b      	ldrb	r3, [r3, #0]
 8005a1a:	4619      	mov	r1, r3
 8005a1c:	68f8      	ldr	r0, [r7, #12]
 8005a1e:	f000 fa7f 	bl	8005f20 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8005a22:	8abb      	ldrh	r3, [r7, #20]
 8005a24:	3301      	adds	r3, #1
 8005a26:	82bb      	strh	r3, [r7, #20]
 8005a28:	8aba      	ldrh	r2, [r7, #20]
 8005a2a:	893b      	ldrh	r3, [r7, #8]
 8005a2c:	429a      	cmp	r2, r3
 8005a2e:	d3f0      	bcc.n	8005a12 <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8005a30:	f7ff fed0 	bl	80057d4 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8005a34:	68f8      	ldr	r0, [r7, #12]
 8005a36:	f000 fb45 	bl	80060c4 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	689b      	ldr	r3, [r3, #8]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d002      	beq.n	8005a48 <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 8005a42:	2301      	movs	r3, #1
 8005a44:	75fb      	strb	r3, [r7, #23]
 8005a46:	e001      	b.n	8005a4c <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 8005a48:	2300      	movs	r3, #0
 8005a4a:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	2201      	movs	r2, #1
 8005a50:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	2200      	movs	r2, #0
 8005a56:	715a      	strb	r2, [r3, #5]

    return status;
 8005a58:	7dfb      	ldrb	r3, [r7, #23]
 8005a5a:	e000      	b.n	8005a5e <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8005a5c:	2302      	movs	r3, #2
  }
}
 8005a5e:	4618      	mov	r0, r3
 8005a60:	3718      	adds	r7, #24
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bd80      	pop	{r7, pc}

08005a66 <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 8005a66:	b580      	push	{r7, lr}
 8005a68:	b088      	sub	sp, #32
 8005a6a:	af00      	add	r7, sp, #0
 8005a6c:	60f8      	str	r0, [r7, #12]
 8005a6e:	607a      	str	r2, [r7, #4]
 8005a70:	461a      	mov	r2, r3
 8005a72:	460b      	mov	r3, r1
 8005a74:	817b      	strh	r3, [r7, #10]
 8005a76:	4613      	mov	r3, r2
 8005a78:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	799b      	ldrb	r3, [r3, #6]
 8005a82:	b2db      	uxtb	r3, r3
 8005a84:	2b01      	cmp	r3, #1
 8005a86:	d14a      	bne.n	8005b1e <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	795b      	ldrb	r3, [r3, #5]
 8005a8c:	2b01      	cmp	r3, #1
 8005a8e:	d101      	bne.n	8005a94 <HAL_SUBGHZ_ReadRegisters+0x2e>
 8005a90:	2302      	movs	r3, #2
 8005a92:	e045      	b.n	8005b20 <HAL_SUBGHZ_ReadRegisters+0xba>
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	2201      	movs	r2, #1
 8005a98:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8005a9a:	68f8      	ldr	r0, [r7, #12]
 8005a9c:	f000 faee 	bl	800607c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8005aa0:	f7ff fea8 	bl	80057f4 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 8005aa4:	211d      	movs	r1, #29
 8005aa6:	68f8      	ldr	r0, [r7, #12]
 8005aa8:	f000 fa3a 	bl	8005f20 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8005aac:	897b      	ldrh	r3, [r7, #10]
 8005aae:	0a1b      	lsrs	r3, r3, #8
 8005ab0:	b29b      	uxth	r3, r3
 8005ab2:	b2db      	uxtb	r3, r3
 8005ab4:	4619      	mov	r1, r3
 8005ab6:	68f8      	ldr	r0, [r7, #12]
 8005ab8:	f000 fa32 	bl	8005f20 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8005abc:	897b      	ldrh	r3, [r7, #10]
 8005abe:	b2db      	uxtb	r3, r3
 8005ac0:	4619      	mov	r1, r3
 8005ac2:	68f8      	ldr	r0, [r7, #12]
 8005ac4:	f000 fa2c 	bl	8005f20 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 8005ac8:	2100      	movs	r1, #0
 8005aca:	68f8      	ldr	r0, [r7, #12]
 8005acc:	f000 fa28 	bl	8005f20 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	82fb      	strh	r3, [r7, #22]
 8005ad4:	e009      	b.n	8005aea <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8005ad6:	69b9      	ldr	r1, [r7, #24]
 8005ad8:	68f8      	ldr	r0, [r7, #12]
 8005ada:	f000 fa77 	bl	8005fcc <SUBGHZSPI_Receive>
      pData++;
 8005ade:	69bb      	ldr	r3, [r7, #24]
 8005ae0:	3301      	adds	r3, #1
 8005ae2:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8005ae4:	8afb      	ldrh	r3, [r7, #22]
 8005ae6:	3301      	adds	r3, #1
 8005ae8:	82fb      	strh	r3, [r7, #22]
 8005aea:	8afa      	ldrh	r2, [r7, #22]
 8005aec:	893b      	ldrh	r3, [r7, #8]
 8005aee:	429a      	cmp	r2, r3
 8005af0:	d3f1      	bcc.n	8005ad6 <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8005af2:	f7ff fe6f 	bl	80057d4 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8005af6:	68f8      	ldr	r0, [r7, #12]
 8005af8:	f000 fae4 	bl	80060c4 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	689b      	ldr	r3, [r3, #8]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d002      	beq.n	8005b0a <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 8005b04:	2301      	movs	r3, #1
 8005b06:	77fb      	strb	r3, [r7, #31]
 8005b08:	e001      	b.n	8005b0e <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	2201      	movs	r2, #1
 8005b12:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	2200      	movs	r2, #0
 8005b18:	715a      	strb	r2, [r3, #5]

    return status;
 8005b1a:	7ffb      	ldrb	r3, [r7, #31]
 8005b1c:	e000      	b.n	8005b20 <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 8005b1e:	2302      	movs	r3, #2
  }
}
 8005b20:	4618      	mov	r0, r3
 8005b22:	3720      	adds	r7, #32
 8005b24:	46bd      	mov	sp, r7
 8005b26:	bd80      	pop	{r7, pc}

08005b28 <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b086      	sub	sp, #24
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	60f8      	str	r0, [r7, #12]
 8005b30:	607a      	str	r2, [r7, #4]
 8005b32:	461a      	mov	r2, r3
 8005b34:	460b      	mov	r3, r1
 8005b36:	72fb      	strb	r3, [r7, #11]
 8005b38:	4613      	mov	r3, r2
 8005b3a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0U]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	799b      	ldrb	r3, [r3, #6]
 8005b40:	b2db      	uxtb	r3, r3
 8005b42:	2b01      	cmp	r3, #1
 8005b44:	d14a      	bne.n	8005bdc <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	795b      	ldrb	r3, [r3, #5]
 8005b4a:	2b01      	cmp	r3, #1
 8005b4c:	d101      	bne.n	8005b52 <HAL_SUBGHZ_ExecSetCmd+0x2a>
 8005b4e:	2302      	movs	r3, #2
 8005b50:	e045      	b.n	8005bde <HAL_SUBGHZ_ExecSetCmd+0xb6>
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	2201      	movs	r2, #1
 8005b56:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8005b58:	68f8      	ldr	r0, [r7, #12]
 8005b5a:	f000 fa8f 	bl	800607c <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 8005b5e:	7afb      	ldrb	r3, [r7, #11]
 8005b60:	2b84      	cmp	r3, #132	; 0x84
 8005b62:	d002      	beq.n	8005b6a <HAL_SUBGHZ_ExecSetCmd+0x42>
 8005b64:	7afb      	ldrb	r3, [r7, #11]
 8005b66:	2b94      	cmp	r3, #148	; 0x94
 8005b68:	d103      	bne.n	8005b72 <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	2201      	movs	r2, #1
 8005b6e:	711a      	strb	r2, [r3, #4]
 8005b70:	e002      	b.n	8005b78 <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	2200      	movs	r2, #0
 8005b76:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8005b78:	f7ff fe3c 	bl	80057f4 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8005b7c:	7afb      	ldrb	r3, [r7, #11]
 8005b7e:	4619      	mov	r1, r3
 8005b80:	68f8      	ldr	r0, [r7, #12]
 8005b82:	f000 f9cd 	bl	8005f20 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8005b86:	2300      	movs	r3, #0
 8005b88:	82bb      	strh	r3, [r7, #20]
 8005b8a:	e00a      	b.n	8005ba2 <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8005b8c:	8abb      	ldrh	r3, [r7, #20]
 8005b8e:	687a      	ldr	r2, [r7, #4]
 8005b90:	4413      	add	r3, r2
 8005b92:	781b      	ldrb	r3, [r3, #0]
 8005b94:	4619      	mov	r1, r3
 8005b96:	68f8      	ldr	r0, [r7, #12]
 8005b98:	f000 f9c2 	bl	8005f20 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8005b9c:	8abb      	ldrh	r3, [r7, #20]
 8005b9e:	3301      	adds	r3, #1
 8005ba0:	82bb      	strh	r3, [r7, #20]
 8005ba2:	8aba      	ldrh	r2, [r7, #20]
 8005ba4:	893b      	ldrh	r3, [r7, #8]
 8005ba6:	429a      	cmp	r2, r3
 8005ba8:	d3f0      	bcc.n	8005b8c <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8005baa:	f7ff fe13 	bl	80057d4 <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 8005bae:	7afb      	ldrb	r3, [r7, #11]
 8005bb0:	2b84      	cmp	r3, #132	; 0x84
 8005bb2:	d002      	beq.n	8005bba <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 8005bb4:	68f8      	ldr	r0, [r7, #12]
 8005bb6:	f000 fa85 	bl	80060c4 <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	689b      	ldr	r3, [r3, #8]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d002      	beq.n	8005bc8 <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	75fb      	strb	r3, [r7, #23]
 8005bc6:	e001      	b.n	8005bcc <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 8005bc8:	2300      	movs	r3, #0
 8005bca:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	2201      	movs	r2, #1
 8005bd0:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	715a      	strb	r2, [r3, #5]

    return status;
 8005bd8:	7dfb      	ldrb	r3, [r7, #23]
 8005bda:	e000      	b.n	8005bde <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8005bdc:	2302      	movs	r3, #2
  }
}
 8005bde:	4618      	mov	r0, r3
 8005be0:	3718      	adds	r7, #24
 8005be2:	46bd      	mov	sp, r7
 8005be4:	bd80      	pop	{r7, pc}

08005be6 <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8005be6:	b580      	push	{r7, lr}
 8005be8:	b088      	sub	sp, #32
 8005bea:	af00      	add	r7, sp, #0
 8005bec:	60f8      	str	r0, [r7, #12]
 8005bee:	607a      	str	r2, [r7, #4]
 8005bf0:	461a      	mov	r2, r3
 8005bf2:	460b      	mov	r3, r1
 8005bf4:	72fb      	strb	r3, [r7, #11]
 8005bf6:	4613      	mov	r3, r2
 8005bf8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	799b      	ldrb	r3, [r3, #6]
 8005c02:	b2db      	uxtb	r3, r3
 8005c04:	2b01      	cmp	r3, #1
 8005c06:	d13d      	bne.n	8005c84 <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	795b      	ldrb	r3, [r3, #5]
 8005c0c:	2b01      	cmp	r3, #1
 8005c0e:	d101      	bne.n	8005c14 <HAL_SUBGHZ_ExecGetCmd+0x2e>
 8005c10:	2302      	movs	r3, #2
 8005c12:	e038      	b.n	8005c86 <HAL_SUBGHZ_ExecGetCmd+0xa0>
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	2201      	movs	r2, #1
 8005c18:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8005c1a:	68f8      	ldr	r0, [r7, #12]
 8005c1c:	f000 fa2e 	bl	800607c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8005c20:	f7ff fde8 	bl	80057f4 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8005c24:	7afb      	ldrb	r3, [r7, #11]
 8005c26:	4619      	mov	r1, r3
 8005c28:	68f8      	ldr	r0, [r7, #12]
 8005c2a:	f000 f979 	bl	8005f20 <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8005c2e:	2100      	movs	r1, #0
 8005c30:	68f8      	ldr	r0, [r7, #12]
 8005c32:	f000 f975 	bl	8005f20 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8005c36:	2300      	movs	r3, #0
 8005c38:	82fb      	strh	r3, [r7, #22]
 8005c3a:	e009      	b.n	8005c50 <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8005c3c:	69b9      	ldr	r1, [r7, #24]
 8005c3e:	68f8      	ldr	r0, [r7, #12]
 8005c40:	f000 f9c4 	bl	8005fcc <SUBGHZSPI_Receive>
      pData++;
 8005c44:	69bb      	ldr	r3, [r7, #24]
 8005c46:	3301      	adds	r3, #1
 8005c48:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8005c4a:	8afb      	ldrh	r3, [r7, #22]
 8005c4c:	3301      	adds	r3, #1
 8005c4e:	82fb      	strh	r3, [r7, #22]
 8005c50:	8afa      	ldrh	r2, [r7, #22]
 8005c52:	893b      	ldrh	r3, [r7, #8]
 8005c54:	429a      	cmp	r2, r3
 8005c56:	d3f1      	bcc.n	8005c3c <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8005c58:	f7ff fdbc 	bl	80057d4 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8005c5c:	68f8      	ldr	r0, [r7, #12]
 8005c5e:	f000 fa31 	bl	80060c4 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	689b      	ldr	r3, [r3, #8]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d002      	beq.n	8005c70 <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	77fb      	strb	r3, [r7, #31]
 8005c6e:	e001      	b.n	8005c74 <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 8005c70:	2300      	movs	r3, #0
 8005c72:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	2201      	movs	r2, #1
 8005c78:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	715a      	strb	r2, [r3, #5]

    return status;
 8005c80:	7ffb      	ldrb	r3, [r7, #31]
 8005c82:	e000      	b.n	8005c86 <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8005c84:	2302      	movs	r3, #2
  }
}
 8005c86:	4618      	mov	r0, r3
 8005c88:	3720      	adds	r7, #32
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	bd80      	pop	{r7, pc}

08005c8e <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 8005c8e:	b580      	push	{r7, lr}
 8005c90:	b086      	sub	sp, #24
 8005c92:	af00      	add	r7, sp, #0
 8005c94:	60f8      	str	r0, [r7, #12]
 8005c96:	607a      	str	r2, [r7, #4]
 8005c98:	461a      	mov	r2, r3
 8005c9a:	460b      	mov	r3, r1
 8005c9c:	72fb      	strb	r3, [r7, #11]
 8005c9e:	4613      	mov	r3, r2
 8005ca0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	799b      	ldrb	r3, [r3, #6]
 8005ca6:	b2db      	uxtb	r3, r3
 8005ca8:	2b01      	cmp	r3, #1
 8005caa:	d13e      	bne.n	8005d2a <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	795b      	ldrb	r3, [r3, #5]
 8005cb0:	2b01      	cmp	r3, #1
 8005cb2:	d101      	bne.n	8005cb8 <HAL_SUBGHZ_WriteBuffer+0x2a>
 8005cb4:	2302      	movs	r3, #2
 8005cb6:	e039      	b.n	8005d2c <HAL_SUBGHZ_WriteBuffer+0x9e>
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	2201      	movs	r2, #1
 8005cbc:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8005cbe:	68f8      	ldr	r0, [r7, #12]
 8005cc0:	f000 f9dc 	bl	800607c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8005cc4:	f7ff fd96 	bl	80057f4 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 8005cc8:	210e      	movs	r1, #14
 8005cca:	68f8      	ldr	r0, [r7, #12]
 8005ccc:	f000 f928 	bl	8005f20 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8005cd0:	7afb      	ldrb	r3, [r7, #11]
 8005cd2:	4619      	mov	r1, r3
 8005cd4:	68f8      	ldr	r0, [r7, #12]
 8005cd6:	f000 f923 	bl	8005f20 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8005cda:	2300      	movs	r3, #0
 8005cdc:	82bb      	strh	r3, [r7, #20]
 8005cde:	e00a      	b.n	8005cf6 <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8005ce0:	8abb      	ldrh	r3, [r7, #20]
 8005ce2:	687a      	ldr	r2, [r7, #4]
 8005ce4:	4413      	add	r3, r2
 8005ce6:	781b      	ldrb	r3, [r3, #0]
 8005ce8:	4619      	mov	r1, r3
 8005cea:	68f8      	ldr	r0, [r7, #12]
 8005cec:	f000 f918 	bl	8005f20 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8005cf0:	8abb      	ldrh	r3, [r7, #20]
 8005cf2:	3301      	adds	r3, #1
 8005cf4:	82bb      	strh	r3, [r7, #20]
 8005cf6:	8aba      	ldrh	r2, [r7, #20]
 8005cf8:	893b      	ldrh	r3, [r7, #8]
 8005cfa:	429a      	cmp	r2, r3
 8005cfc:	d3f0      	bcc.n	8005ce0 <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8005cfe:	f7ff fd69 	bl	80057d4 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8005d02:	68f8      	ldr	r0, [r7, #12]
 8005d04:	f000 f9de 	bl	80060c4 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	689b      	ldr	r3, [r3, #8]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d002      	beq.n	8005d16 <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 8005d10:	2301      	movs	r3, #1
 8005d12:	75fb      	strb	r3, [r7, #23]
 8005d14:	e001      	b.n	8005d1a <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 8005d16:	2300      	movs	r3, #0
 8005d18:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	2201      	movs	r2, #1
 8005d1e:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	2200      	movs	r2, #0
 8005d24:	715a      	strb	r2, [r3, #5]

    return status;
 8005d26:	7dfb      	ldrb	r3, [r7, #23]
 8005d28:	e000      	b.n	8005d2c <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8005d2a:	2302      	movs	r3, #2
  }
}
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	3718      	adds	r7, #24
 8005d30:	46bd      	mov	sp, r7
 8005d32:	bd80      	pop	{r7, pc}

08005d34 <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b088      	sub	sp, #32
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	60f8      	str	r0, [r7, #12]
 8005d3c:	607a      	str	r2, [r7, #4]
 8005d3e:	461a      	mov	r2, r3
 8005d40:	460b      	mov	r3, r1
 8005d42:	72fb      	strb	r3, [r7, #11]
 8005d44:	4613      	mov	r3, r2
 8005d46:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	799b      	ldrb	r3, [r3, #6]
 8005d50:	b2db      	uxtb	r3, r3
 8005d52:	2b01      	cmp	r3, #1
 8005d54:	d141      	bne.n	8005dda <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	795b      	ldrb	r3, [r3, #5]
 8005d5a:	2b01      	cmp	r3, #1
 8005d5c:	d101      	bne.n	8005d62 <HAL_SUBGHZ_ReadBuffer+0x2e>
 8005d5e:	2302      	movs	r3, #2
 8005d60:	e03c      	b.n	8005ddc <HAL_SUBGHZ_ReadBuffer+0xa8>
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	2201      	movs	r2, #1
 8005d66:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8005d68:	68f8      	ldr	r0, [r7, #12]
 8005d6a:	f000 f987 	bl	800607c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8005d6e:	f7ff fd41 	bl	80057f4 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 8005d72:	211e      	movs	r1, #30
 8005d74:	68f8      	ldr	r0, [r7, #12]
 8005d76:	f000 f8d3 	bl	8005f20 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8005d7a:	7afb      	ldrb	r3, [r7, #11]
 8005d7c:	4619      	mov	r1, r3
 8005d7e:	68f8      	ldr	r0, [r7, #12]
 8005d80:	f000 f8ce 	bl	8005f20 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8005d84:	2100      	movs	r1, #0
 8005d86:	68f8      	ldr	r0, [r7, #12]
 8005d88:	f000 f8ca 	bl	8005f20 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	82fb      	strh	r3, [r7, #22]
 8005d90:	e009      	b.n	8005da6 <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8005d92:	69b9      	ldr	r1, [r7, #24]
 8005d94:	68f8      	ldr	r0, [r7, #12]
 8005d96:	f000 f919 	bl	8005fcc <SUBGHZSPI_Receive>
      pData++;
 8005d9a:	69bb      	ldr	r3, [r7, #24]
 8005d9c:	3301      	adds	r3, #1
 8005d9e:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8005da0:	8afb      	ldrh	r3, [r7, #22]
 8005da2:	3301      	adds	r3, #1
 8005da4:	82fb      	strh	r3, [r7, #22]
 8005da6:	8afa      	ldrh	r2, [r7, #22]
 8005da8:	893b      	ldrh	r3, [r7, #8]
 8005daa:	429a      	cmp	r2, r3
 8005dac:	d3f1      	bcc.n	8005d92 <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8005dae:	f7ff fd11 	bl	80057d4 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8005db2:	68f8      	ldr	r0, [r7, #12]
 8005db4:	f000 f986 	bl	80060c4 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	689b      	ldr	r3, [r3, #8]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d002      	beq.n	8005dc6 <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 8005dc0:	2301      	movs	r3, #1
 8005dc2:	77fb      	strb	r3, [r7, #31]
 8005dc4:	e001      	b.n	8005dca <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	2201      	movs	r2, #1
 8005dce:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	715a      	strb	r2, [r3, #5]

    return status;
 8005dd6:	7ffb      	ldrb	r3, [r7, #31]
 8005dd8:	e000      	b.n	8005ddc <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8005dda:	2302      	movs	r3, #2
  }
}
 8005ddc:	4618      	mov	r0, r3
 8005dde:	3720      	adds	r7, #32
 8005de0:	46bd      	mov	sp, r7
 8005de2:	bd80      	pop	{r7, pc}

08005de4 <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b084      	sub	sp, #16
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2U] = {0U};
 8005dec:	2300      	movs	r3, #0
 8005dee:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 8005df0:	f107 020c 	add.w	r2, r7, #12
 8005df4:	2302      	movs	r3, #2
 8005df6:	2112      	movs	r1, #18
 8005df8:	6878      	ldr	r0, [r7, #4]
 8005dfa:	f7ff fef4 	bl	8005be6 <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 8005dfe:	7b3b      	ldrb	r3, [r7, #12]
 8005e00:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8U) | tmpisr[1U];
 8005e02:	89fb      	ldrh	r3, [r7, #14]
 8005e04:	021b      	lsls	r3, r3, #8
 8005e06:	b21a      	sxth	r2, r3
 8005e08:	7b7b      	ldrb	r3, [r7, #13]
 8005e0a:	b21b      	sxth	r3, r3
 8005e0c:	4313      	orrs	r3, r2
 8005e0e:	b21b      	sxth	r3, r3
 8005e10:	81fb      	strh	r3, [r7, #14]

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2U);
 8005e12:	f107 020c 	add.w	r2, r7, #12
 8005e16:	2302      	movs	r3, #2
 8005e18:	2102      	movs	r1, #2
 8005e1a:	6878      	ldr	r0, [r7, #4]
 8005e1c:	f7ff fe84 	bl	8005b28 <HAL_SUBGHZ_ExecSetCmd>

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 8005e20:	89fb      	ldrh	r3, [r7, #14]
 8005e22:	f003 0301 	and.w	r3, r3, #1
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d002      	beq.n	8005e30 <HAL_SUBGHZ_IRQHandler+0x4c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 8005e2a:	6878      	ldr	r0, [r7, #4]
 8005e2c:	f005 f95c 	bl	800b0e8 <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 8005e30:	89fb      	ldrh	r3, [r7, #14]
 8005e32:	f003 0302 	and.w	r3, r3, #2
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d002      	beq.n	8005e40 <HAL_SUBGHZ_IRQHandler+0x5c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 8005e3a:	6878      	ldr	r0, [r7, #4]
 8005e3c:	f005 f962 	bl	800b104 <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 8005e40:	89fb      	ldrh	r3, [r7, #14]
 8005e42:	f003 0304 	and.w	r3, r3, #4
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d002      	beq.n	8005e50 <HAL_SUBGHZ_IRQHandler+0x6c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 8005e4a:	6878      	ldr	r0, [r7, #4]
 8005e4c:	f005 f9b2 	bl	800b1b4 <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 8005e50:	89fb      	ldrh	r3, [r7, #14]
 8005e52:	f003 0308 	and.w	r3, r3, #8
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d002      	beq.n	8005e60 <HAL_SUBGHZ_IRQHandler+0x7c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 8005e5a:	6878      	ldr	r0, [r7, #4]
 8005e5c:	f005 f9b8 	bl	800b1d0 <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 8005e60:	89fb      	ldrh	r3, [r7, #14]
 8005e62:	f003 0310 	and.w	r3, r3, #16
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d002      	beq.n	8005e70 <HAL_SUBGHZ_IRQHandler+0x8c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 8005e6a:	6878      	ldr	r0, [r7, #4]
 8005e6c:	f005 f9be 	bl	800b1ec <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 8005e70:	89fb      	ldrh	r3, [r7, #14]
 8005e72:	f003 0320 	and.w	r3, r3, #32
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d002      	beq.n	8005e80 <HAL_SUBGHZ_IRQHandler+0x9c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 8005e7a:	6878      	ldr	r0, [r7, #4]
 8005e7c:	f005 f98c 	bl	800b198 <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 8005e80:	89fb      	ldrh	r3, [r7, #14]
 8005e82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d002      	beq.n	8005e90 <HAL_SUBGHZ_IRQHandler+0xac>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 8005e8a:	6878      	ldr	r0, [r7, #4]
 8005e8c:	f005 f948 	bl	800b120 <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 8005e90:	89fb      	ldrh	r3, [r7, #14]
 8005e92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d00d      	beq.n	8005eb6 <HAL_SUBGHZ_IRQHandler+0xd2>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 8005e9a:	89fb      	ldrh	r3, [r7, #14]
 8005e9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d004      	beq.n	8005eae <HAL_SUBGHZ_IRQHandler+0xca>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 8005ea4:	2101      	movs	r1, #1
 8005ea6:	6878      	ldr	r0, [r7, #4]
 8005ea8:	f005 f948 	bl	800b13c <HAL_SUBGHZ_CADStatusCallback>
 8005eac:	e003      	b.n	8005eb6 <HAL_SUBGHZ_IRQHandler+0xd2>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 8005eae:	2100      	movs	r1, #0
 8005eb0:	6878      	ldr	r0, [r7, #4]
 8005eb2:	f005 f943 	bl	800b13c <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 8005eb6:	89fb      	ldrh	r3, [r7, #14]
 8005eb8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d002      	beq.n	8005ec6 <HAL_SUBGHZ_IRQHandler+0xe2>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 8005ec0:	6878      	ldr	r0, [r7, #4]
 8005ec2:	f005 f959 	bl	800b178 <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LR_FHSS Hop interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_LR_FHSS_HOP) != RESET)
 8005ec6:	89fb      	ldrh	r3, [r7, #14]
 8005ec8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d002      	beq.n	8005ed6 <HAL_SUBGHZ_IRQHandler+0xf2>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->LrFhssHopCallback(hsubghz);
#else
    HAL_SUBGHZ_LrFhssHopCallback(hsubghz);
 8005ed0:	6878      	ldr	r0, [r7, #4]
 8005ed2:	f005 f999 	bl	800b208 <HAL_SUBGHZ_LrFhssHopCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }
}
 8005ed6:	bf00      	nop
 8005ed8:	3710      	adds	r7, #16
 8005eda:	46bd      	mov	sp, r7
 8005edc:	bd80      	pop	{r7, pc}
	...

08005ee0 <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 8005ee0:	b480      	push	{r7}
 8005ee2:	b083      	sub	sp, #12
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8005ee8:	4b0c      	ldr	r3, [pc, #48]	; (8005f1c <SUBGHZSPI_Init+0x3c>)
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	4a0b      	ldr	r2, [pc, #44]	; (8005f1c <SUBGHZSPI_Init+0x3c>)
 8005eee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ef2:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 8005ef4:	4a09      	ldr	r2, [pc, #36]	; (8005f1c <SUBGHZSPI_Init+0x3c>)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	f443 7341 	orr.w	r3, r3, #772	; 0x304
 8005efc:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 8005efe:	4b07      	ldr	r3, [pc, #28]	; (8005f1c <SUBGHZSPI_Init+0x3c>)
 8005f00:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 8005f04:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8005f06:	4b05      	ldr	r3, [pc, #20]	; (8005f1c <SUBGHZSPI_Init+0x3c>)
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	4a04      	ldr	r2, [pc, #16]	; (8005f1c <SUBGHZSPI_Init+0x3c>)
 8005f0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f10:	6013      	str	r3, [r2, #0]
}
 8005f12:	bf00      	nop
 8005f14:	370c      	adds	r7, #12
 8005f16:	46bd      	mov	sp, r7
 8005f18:	bc80      	pop	{r7}
 8005f1a:	4770      	bx	lr
 8005f1c:	58010000 	.word	0x58010000

08005f20 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8005f20:	b480      	push	{r7}
 8005f22:	b087      	sub	sp, #28
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
 8005f28:	460b      	mov	r3, r1
 8005f2a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8005f30:	4b23      	ldr	r3, [pc, #140]	; (8005fc0 <SUBGHZSPI_Transmit+0xa0>)
 8005f32:	681a      	ldr	r2, [r3, #0]
 8005f34:	4613      	mov	r3, r2
 8005f36:	00db      	lsls	r3, r3, #3
 8005f38:	1a9b      	subs	r3, r3, r2
 8005f3a:	009b      	lsls	r3, r3, #2
 8005f3c:	0cdb      	lsrs	r3, r3, #19
 8005f3e:	2264      	movs	r2, #100	; 0x64
 8005f40:	fb02 f303 	mul.w	r3, r2, r3
 8005f44:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d105      	bne.n	8005f58 <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 8005f4c:	2301      	movs	r3, #1
 8005f4e:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2201      	movs	r2, #1
 8005f54:	609a      	str	r2, [r3, #8]
      break;
 8005f56:	e008      	b.n	8005f6a <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	3b01      	subs	r3, #1
 8005f5c:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8005f5e:	4b19      	ldr	r3, [pc, #100]	; (8005fc4 <SUBGHZSPI_Transmit+0xa4>)
 8005f60:	689b      	ldr	r3, [r3, #8]
 8005f62:	f003 0302 	and.w	r3, r3, #2
 8005f66:	2b02      	cmp	r3, #2
 8005f68:	d1ed      	bne.n	8005f46 <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8005f6a:	4b17      	ldr	r3, [pc, #92]	; (8005fc8 <SUBGHZSPI_Transmit+0xa8>)
 8005f6c:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 8005f6e:	693b      	ldr	r3, [r7, #16]
 8005f70:	78fa      	ldrb	r2, [r7, #3]
 8005f72:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8005f74:	4b12      	ldr	r3, [pc, #72]	; (8005fc0 <SUBGHZSPI_Transmit+0xa0>)
 8005f76:	681a      	ldr	r2, [r3, #0]
 8005f78:	4613      	mov	r3, r2
 8005f7a:	00db      	lsls	r3, r3, #3
 8005f7c:	1a9b      	subs	r3, r3, r2
 8005f7e:	009b      	lsls	r3, r3, #2
 8005f80:	0cdb      	lsrs	r3, r3, #19
 8005f82:	2264      	movs	r2, #100	; 0x64
 8005f84:	fb02 f303 	mul.w	r3, r2, r3
 8005f88:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d105      	bne.n	8005f9c <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 8005f90:	2301      	movs	r3, #1
 8005f92:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2201      	movs	r2, #1
 8005f98:	609a      	str	r2, [r3, #8]
      break;
 8005f9a:	e008      	b.n	8005fae <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	3b01      	subs	r3, #1
 8005fa0:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8005fa2:	4b08      	ldr	r3, [pc, #32]	; (8005fc4 <SUBGHZSPI_Transmit+0xa4>)
 8005fa4:	689b      	ldr	r3, [r3, #8]
 8005fa6:	f003 0301 	and.w	r3, r3, #1
 8005faa:	2b01      	cmp	r3, #1
 8005fac:	d1ed      	bne.n	8005f8a <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 8005fae:	4b05      	ldr	r3, [pc, #20]	; (8005fc4 <SUBGHZSPI_Transmit+0xa4>)
 8005fb0:	68db      	ldr	r3, [r3, #12]

  return status;
 8005fb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	371c      	adds	r7, #28
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	bc80      	pop	{r7}
 8005fbc:	4770      	bx	lr
 8005fbe:	bf00      	nop
 8005fc0:	2000000c 	.word	0x2000000c
 8005fc4:	58010000 	.word	0x58010000
 8005fc8:	5801000c 	.word	0x5801000c

08005fcc <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 8005fcc:	b480      	push	{r7}
 8005fce:	b087      	sub	sp, #28
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
 8005fd4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8005fda:	4b25      	ldr	r3, [pc, #148]	; (8006070 <SUBGHZSPI_Receive+0xa4>)
 8005fdc:	681a      	ldr	r2, [r3, #0]
 8005fde:	4613      	mov	r3, r2
 8005fe0:	00db      	lsls	r3, r3, #3
 8005fe2:	1a9b      	subs	r3, r3, r2
 8005fe4:	009b      	lsls	r3, r3, #2
 8005fe6:	0cdb      	lsrs	r3, r3, #19
 8005fe8:	2264      	movs	r2, #100	; 0x64
 8005fea:	fb02 f303 	mul.w	r3, r2, r3
 8005fee:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d105      	bne.n	8006002 <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	2201      	movs	r2, #1
 8005ffe:	609a      	str	r2, [r3, #8]
      break;
 8006000:	e008      	b.n	8006014 <SUBGHZSPI_Receive+0x48>
    }
    count--;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	3b01      	subs	r3, #1
 8006006:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8006008:	4b1a      	ldr	r3, [pc, #104]	; (8006074 <SUBGHZSPI_Receive+0xa8>)
 800600a:	689b      	ldr	r3, [r3, #8]
 800600c:	f003 0302 	and.w	r3, r3, #2
 8006010:	2b02      	cmp	r3, #2
 8006012:	d1ed      	bne.n	8005ff0 <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8006014:	4b18      	ldr	r3, [pc, #96]	; (8006078 <SUBGHZSPI_Receive+0xac>)
 8006016:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 8006018:	693b      	ldr	r3, [r7, #16]
 800601a:	22ff      	movs	r2, #255	; 0xff
 800601c:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800601e:	4b14      	ldr	r3, [pc, #80]	; (8006070 <SUBGHZSPI_Receive+0xa4>)
 8006020:	681a      	ldr	r2, [r3, #0]
 8006022:	4613      	mov	r3, r2
 8006024:	00db      	lsls	r3, r3, #3
 8006026:	1a9b      	subs	r3, r3, r2
 8006028:	009b      	lsls	r3, r3, #2
 800602a:	0cdb      	lsrs	r3, r3, #19
 800602c:	2264      	movs	r2, #100	; 0x64
 800602e:	fb02 f303 	mul.w	r3, r2, r3
 8006032:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d105      	bne.n	8006046 <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 800603a:	2301      	movs	r3, #1
 800603c:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2201      	movs	r2, #1
 8006042:	609a      	str	r2, [r3, #8]
      break;
 8006044:	e008      	b.n	8006058 <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	3b01      	subs	r3, #1
 800604a:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 800604c:	4b09      	ldr	r3, [pc, #36]	; (8006074 <SUBGHZSPI_Receive+0xa8>)
 800604e:	689b      	ldr	r3, [r3, #8]
 8006050:	f003 0301 	and.w	r3, r3, #1
 8006054:	2b01      	cmp	r3, #1
 8006056:	d1ed      	bne.n	8006034 <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8006058:	4b06      	ldr	r3, [pc, #24]	; (8006074 <SUBGHZSPI_Receive+0xa8>)
 800605a:	68db      	ldr	r3, [r3, #12]
 800605c:	b2da      	uxtb	r2, r3
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	701a      	strb	r2, [r3, #0]

  return status;
 8006062:	7dfb      	ldrb	r3, [r7, #23]
}
 8006064:	4618      	mov	r0, r3
 8006066:	371c      	adds	r7, #28
 8006068:	46bd      	mov	sp, r7
 800606a:	bc80      	pop	{r7}
 800606c:	4770      	bx	lr
 800606e:	bf00      	nop
 8006070:	2000000c 	.word	0x2000000c
 8006074:	58010000 	.word	0x58010000
 8006078:	5801000c 	.word	0x5801000c

0800607c <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 800607c:	b580      	push	{r7, lr}
 800607e:	b084      	sub	sp, #16
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	791b      	ldrb	r3, [r3, #4]
 8006088:	2b01      	cmp	r3, #1
 800608a:	d111      	bne.n	80060b0 <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 800608c:	4b0c      	ldr	r3, [pc, #48]	; (80060c0 <SUBGHZ_CheckDeviceReady+0x44>)
 800608e:	681a      	ldr	r2, [r3, #0]
 8006090:	4613      	mov	r3, r2
 8006092:	005b      	lsls	r3, r3, #1
 8006094:	4413      	add	r3, r2
 8006096:	00db      	lsls	r3, r3, #3
 8006098:	0c1b      	lsrs	r3, r3, #16
 800609a:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800609c:	f7ff fbaa 	bl	80057f4 <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	3b01      	subs	r3, #1
 80060a4:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d1f9      	bne.n	80060a0 <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80060ac:	f7ff fb92 	bl	80057d4 <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 80060b0:	6878      	ldr	r0, [r7, #4]
 80060b2:	f000 f807 	bl	80060c4 <SUBGHZ_WaitOnBusy>
 80060b6:	4603      	mov	r3, r0
}
 80060b8:	4618      	mov	r0, r3
 80060ba:	3710      	adds	r7, #16
 80060bc:	46bd      	mov	sp, r7
 80060be:	bd80      	pop	{r7, pc}
 80060c0:	2000000c 	.word	0x2000000c

080060c4 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b086      	sub	sp, #24
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 80060cc:	2300      	movs	r3, #0
 80060ce:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 80060d0:	4b12      	ldr	r3, [pc, #72]	; (800611c <SUBGHZ_WaitOnBusy+0x58>)
 80060d2:	681a      	ldr	r2, [r3, #0]
 80060d4:	4613      	mov	r3, r2
 80060d6:	005b      	lsls	r3, r3, #1
 80060d8:	4413      	add	r3, r2
 80060da:	00db      	lsls	r3, r3, #3
 80060dc:	0d1b      	lsrs	r3, r3, #20
 80060de:	2264      	movs	r2, #100	; 0x64
 80060e0:	fb02 f303 	mul.w	r3, r2, r3
 80060e4:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 80060e6:	f7ff fbb3 	bl	8005850 <LL_PWR_IsActiveFlag_RFBUSYMS>
 80060ea:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d105      	bne.n	80060fe <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 80060f2:	2301      	movs	r3, #1
 80060f4:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2202      	movs	r2, #2
 80060fa:	609a      	str	r2, [r3, #8]
      break;
 80060fc:	e009      	b.n	8006112 <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	3b01      	subs	r3, #1
 8006102:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8006104:	f7ff fb92 	bl	800582c <LL_PWR_IsActiveFlag_RFBUSYS>
 8006108:	4602      	mov	r2, r0
 800610a:	693b      	ldr	r3, [r7, #16]
 800610c:	4013      	ands	r3, r2
 800610e:	2b01      	cmp	r3, #1
 8006110:	d0e9      	beq.n	80060e6 <SUBGHZ_WaitOnBusy+0x22>

  return status;
 8006112:	7dfb      	ldrb	r3, [r7, #23]
}
 8006114:	4618      	mov	r0, r3
 8006116:	3718      	adds	r7, #24
 8006118:	46bd      	mov	sp, r7
 800611a:	bd80      	pop	{r7, pc}
 800611c:	2000000c 	.word	0x2000000c

08006120 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006120:	b580      	push	{r7, lr}
 8006122:	b082      	sub	sp, #8
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d101      	bne.n	8006132 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800612e:	2301      	movs	r3, #1
 8006130:	e049      	b.n	80061c6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006138:	b2db      	uxtb	r3, r3
 800613a:	2b00      	cmp	r3, #0
 800613c:	d106      	bne.n	800614c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	2200      	movs	r2, #0
 8006142:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006146:	6878      	ldr	r0, [r7, #4]
 8006148:	f7fc fd94 	bl	8002c74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2202      	movs	r2, #2
 8006150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681a      	ldr	r2, [r3, #0]
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	3304      	adds	r3, #4
 800615c:	4619      	mov	r1, r3
 800615e:	4610      	mov	r0, r2
 8006160:	f000 f944 	bl	80063ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2201      	movs	r2, #1
 8006168:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2201      	movs	r2, #1
 8006170:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2201      	movs	r2, #1
 8006178:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2201      	movs	r2, #1
 8006180:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2201      	movs	r2, #1
 8006188:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2201      	movs	r2, #1
 8006190:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2201      	movs	r2, #1
 8006198:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2201      	movs	r2, #1
 80061a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2201      	movs	r2, #1
 80061a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2201      	movs	r2, #1
 80061b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2201      	movs	r2, #1
 80061b8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2201      	movs	r2, #1
 80061c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80061c4:	2300      	movs	r3, #0
}
 80061c6:	4618      	mov	r0, r3
 80061c8:	3708      	adds	r7, #8
 80061ca:	46bd      	mov	sp, r7
 80061cc:	bd80      	pop	{r7, pc}
	...

080061d0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80061d0:	b480      	push	{r7}
 80061d2:	b085      	sub	sp, #20
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061de:	b2db      	uxtb	r3, r3
 80061e0:	2b01      	cmp	r3, #1
 80061e2:	d001      	beq.n	80061e8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80061e4:	2301      	movs	r3, #1
 80061e6:	e02e      	b.n	8006246 <HAL_TIM_Base_Start+0x76>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2202      	movs	r2, #2
 80061ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	4a16      	ldr	r2, [pc, #88]	; (8006250 <HAL_TIM_Base_Start+0x80>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d004      	beq.n	8006204 <HAL_TIM_Base_Start+0x34>
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006202:	d115      	bne.n	8006230 <HAL_TIM_Base_Start+0x60>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	689a      	ldr	r2, [r3, #8]
 800620a:	4b12      	ldr	r3, [pc, #72]	; (8006254 <HAL_TIM_Base_Start+0x84>)
 800620c:	4013      	ands	r3, r2
 800620e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	2b06      	cmp	r3, #6
 8006214:	d015      	beq.n	8006242 <HAL_TIM_Base_Start+0x72>
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800621c:	d011      	beq.n	8006242 <HAL_TIM_Base_Start+0x72>
    {
      __HAL_TIM_ENABLE(htim);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	681a      	ldr	r2, [r3, #0]
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f042 0201 	orr.w	r2, r2, #1
 800622c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800622e:	e008      	b.n	8006242 <HAL_TIM_Base_Start+0x72>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	681a      	ldr	r2, [r3, #0]
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f042 0201 	orr.w	r2, r2, #1
 800623e:	601a      	str	r2, [r3, #0]
 8006240:	e000      	b.n	8006244 <HAL_TIM_Base_Start+0x74>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006242:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006244:	2300      	movs	r3, #0
}
 8006246:	4618      	mov	r0, r3
 8006248:	3714      	adds	r7, #20
 800624a:	46bd      	mov	sp, r7
 800624c:	bc80      	pop	{r7}
 800624e:	4770      	bx	lr
 8006250:	40012c00 	.word	0x40012c00
 8006254:	00010007 	.word	0x00010007

08006258 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b084      	sub	sp, #16
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
 8006260:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006262:	2300      	movs	r3, #0
 8006264:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800626c:	2b01      	cmp	r3, #1
 800626e:	d101      	bne.n	8006274 <HAL_TIM_ConfigClockSource+0x1c>
 8006270:	2302      	movs	r3, #2
 8006272:	e0b6      	b.n	80063e2 <HAL_TIM_ConfigClockSource+0x18a>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2201      	movs	r2, #1
 8006278:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2202      	movs	r2, #2
 8006280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	689b      	ldr	r3, [r3, #8]
 800628a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800628c:	68bb      	ldr	r3, [r7, #8]
 800628e:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8006292:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006296:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006298:	68bb      	ldr	r3, [r7, #8]
 800629a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800629e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	68ba      	ldr	r2, [r7, #8]
 80062a6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062b0:	d03e      	beq.n	8006330 <HAL_TIM_ConfigClockSource+0xd8>
 80062b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062b6:	f200 8087 	bhi.w	80063c8 <HAL_TIM_ConfigClockSource+0x170>
 80062ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062be:	f000 8086 	beq.w	80063ce <HAL_TIM_ConfigClockSource+0x176>
 80062c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062c6:	d87f      	bhi.n	80063c8 <HAL_TIM_ConfigClockSource+0x170>
 80062c8:	2b70      	cmp	r3, #112	; 0x70
 80062ca:	d01a      	beq.n	8006302 <HAL_TIM_ConfigClockSource+0xaa>
 80062cc:	2b70      	cmp	r3, #112	; 0x70
 80062ce:	d87b      	bhi.n	80063c8 <HAL_TIM_ConfigClockSource+0x170>
 80062d0:	2b60      	cmp	r3, #96	; 0x60
 80062d2:	d050      	beq.n	8006376 <HAL_TIM_ConfigClockSource+0x11e>
 80062d4:	2b60      	cmp	r3, #96	; 0x60
 80062d6:	d877      	bhi.n	80063c8 <HAL_TIM_ConfigClockSource+0x170>
 80062d8:	2b50      	cmp	r3, #80	; 0x50
 80062da:	d03c      	beq.n	8006356 <HAL_TIM_ConfigClockSource+0xfe>
 80062dc:	2b50      	cmp	r3, #80	; 0x50
 80062de:	d873      	bhi.n	80063c8 <HAL_TIM_ConfigClockSource+0x170>
 80062e0:	2b40      	cmp	r3, #64	; 0x40
 80062e2:	d058      	beq.n	8006396 <HAL_TIM_ConfigClockSource+0x13e>
 80062e4:	2b40      	cmp	r3, #64	; 0x40
 80062e6:	d86f      	bhi.n	80063c8 <HAL_TIM_ConfigClockSource+0x170>
 80062e8:	2b30      	cmp	r3, #48	; 0x30
 80062ea:	d064      	beq.n	80063b6 <HAL_TIM_ConfigClockSource+0x15e>
 80062ec:	2b30      	cmp	r3, #48	; 0x30
 80062ee:	d86b      	bhi.n	80063c8 <HAL_TIM_ConfigClockSource+0x170>
 80062f0:	2b20      	cmp	r3, #32
 80062f2:	d060      	beq.n	80063b6 <HAL_TIM_ConfigClockSource+0x15e>
 80062f4:	2b20      	cmp	r3, #32
 80062f6:	d867      	bhi.n	80063c8 <HAL_TIM_ConfigClockSource+0x170>
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d05c      	beq.n	80063b6 <HAL_TIM_ConfigClockSource+0x15e>
 80062fc:	2b10      	cmp	r3, #16
 80062fe:	d05a      	beq.n	80063b6 <HAL_TIM_ConfigClockSource+0x15e>
 8006300:	e062      	b.n	80063c8 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006312:	f000 f946 	bl	80065a2 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	689b      	ldr	r3, [r3, #8]
 800631c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800631e:	68bb      	ldr	r3, [r7, #8]
 8006320:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006324:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	68ba      	ldr	r2, [r7, #8]
 800632c:	609a      	str	r2, [r3, #8]
      break;
 800632e:	e04f      	b.n	80063d0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006340:	f000 f92f 	bl	80065a2 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	689a      	ldr	r2, [r3, #8]
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006352:	609a      	str	r2, [r3, #8]
      break;
 8006354:	e03c      	b.n	80063d0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006362:	461a      	mov	r2, r3
 8006364:	f000 f8a4 	bl	80064b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	2150      	movs	r1, #80	; 0x50
 800636e:	4618      	mov	r0, r3
 8006370:	f000 f8fb 	bl	800656a <TIM_ITRx_SetConfig>
      break;
 8006374:	e02c      	b.n	80063d0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006382:	461a      	mov	r2, r3
 8006384:	f000 f8c2 	bl	800650c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	2160      	movs	r1, #96	; 0x60
 800638e:	4618      	mov	r0, r3
 8006390:	f000 f8eb 	bl	800656a <TIM_ITRx_SetConfig>
      break;
 8006394:	e01c      	b.n	80063d0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80063a2:	461a      	mov	r2, r3
 80063a4:	f000 f884 	bl	80064b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	2140      	movs	r1, #64	; 0x40
 80063ae:	4618      	mov	r0, r3
 80063b0:	f000 f8db 	bl	800656a <TIM_ITRx_SetConfig>
      break;
 80063b4:	e00c      	b.n	80063d0 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681a      	ldr	r2, [r3, #0]
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	4619      	mov	r1, r3
 80063c0:	4610      	mov	r0, r2
 80063c2:	f000 f8d2 	bl	800656a <TIM_ITRx_SetConfig>
      break;
 80063c6:	e003      	b.n	80063d0 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80063c8:	2301      	movs	r3, #1
 80063ca:	73fb      	strb	r3, [r7, #15]
      break;
 80063cc:	e000      	b.n	80063d0 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80063ce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2201      	movs	r2, #1
 80063d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2200      	movs	r2, #0
 80063dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80063e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80063e2:	4618      	mov	r0, r3
 80063e4:	3710      	adds	r7, #16
 80063e6:	46bd      	mov	sp, r7
 80063e8:	bd80      	pop	{r7, pc}
	...

080063ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80063ec:	b480      	push	{r7}
 80063ee:	b085      	sub	sp, #20
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
 80063f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	4a29      	ldr	r2, [pc, #164]	; (80064a4 <TIM_Base_SetConfig+0xb8>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d003      	beq.n	800640c <TIM_Base_SetConfig+0x20>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800640a:	d108      	bne.n	800641e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006412:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	685b      	ldr	r3, [r3, #4]
 8006418:	68fa      	ldr	r2, [r7, #12]
 800641a:	4313      	orrs	r3, r2
 800641c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	4a20      	ldr	r2, [pc, #128]	; (80064a4 <TIM_Base_SetConfig+0xb8>)
 8006422:	4293      	cmp	r3, r2
 8006424:	d00b      	beq.n	800643e <TIM_Base_SetConfig+0x52>
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800642c:	d007      	beq.n	800643e <TIM_Base_SetConfig+0x52>
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	4a1d      	ldr	r2, [pc, #116]	; (80064a8 <TIM_Base_SetConfig+0xbc>)
 8006432:	4293      	cmp	r3, r2
 8006434:	d003      	beq.n	800643e <TIM_Base_SetConfig+0x52>
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	4a1c      	ldr	r2, [pc, #112]	; (80064ac <TIM_Base_SetConfig+0xc0>)
 800643a:	4293      	cmp	r3, r2
 800643c:	d108      	bne.n	8006450 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006444:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	68db      	ldr	r3, [r3, #12]
 800644a:	68fa      	ldr	r2, [r7, #12]
 800644c:	4313      	orrs	r3, r2
 800644e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	695b      	ldr	r3, [r3, #20]
 800645a:	4313      	orrs	r3, r2
 800645c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	68fa      	ldr	r2, [r7, #12]
 8006462:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	689a      	ldr	r2, [r3, #8]
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	681a      	ldr	r2, [r3, #0]
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	4a0b      	ldr	r2, [pc, #44]	; (80064a4 <TIM_Base_SetConfig+0xb8>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d007      	beq.n	800648c <TIM_Base_SetConfig+0xa0>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	4a0a      	ldr	r2, [pc, #40]	; (80064a8 <TIM_Base_SetConfig+0xbc>)
 8006480:	4293      	cmp	r3, r2
 8006482:	d003      	beq.n	800648c <TIM_Base_SetConfig+0xa0>
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	4a09      	ldr	r2, [pc, #36]	; (80064ac <TIM_Base_SetConfig+0xc0>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d103      	bne.n	8006494 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	691a      	ldr	r2, [r3, #16]
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2201      	movs	r2, #1
 8006498:	615a      	str	r2, [r3, #20]
}
 800649a:	bf00      	nop
 800649c:	3714      	adds	r7, #20
 800649e:	46bd      	mov	sp, r7
 80064a0:	bc80      	pop	{r7}
 80064a2:	4770      	bx	lr
 80064a4:	40012c00 	.word	0x40012c00
 80064a8:	40014400 	.word	0x40014400
 80064ac:	40014800 	.word	0x40014800

080064b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80064b0:	b480      	push	{r7}
 80064b2:	b087      	sub	sp, #28
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	60f8      	str	r0, [r7, #12]
 80064b8:	60b9      	str	r1, [r7, #8]
 80064ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	6a1b      	ldr	r3, [r3, #32]
 80064c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	6a1b      	ldr	r3, [r3, #32]
 80064c6:	f023 0201 	bic.w	r2, r3, #1
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	699b      	ldr	r3, [r3, #24]
 80064d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80064d4:	693b      	ldr	r3, [r7, #16]
 80064d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80064da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	011b      	lsls	r3, r3, #4
 80064e0:	693a      	ldr	r2, [r7, #16]
 80064e2:	4313      	orrs	r3, r2
 80064e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80064e6:	697b      	ldr	r3, [r7, #20]
 80064e8:	f023 030a 	bic.w	r3, r3, #10
 80064ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80064ee:	697a      	ldr	r2, [r7, #20]
 80064f0:	68bb      	ldr	r3, [r7, #8]
 80064f2:	4313      	orrs	r3, r2
 80064f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	693a      	ldr	r2, [r7, #16]
 80064fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	697a      	ldr	r2, [r7, #20]
 8006500:	621a      	str	r2, [r3, #32]
}
 8006502:	bf00      	nop
 8006504:	371c      	adds	r7, #28
 8006506:	46bd      	mov	sp, r7
 8006508:	bc80      	pop	{r7}
 800650a:	4770      	bx	lr

0800650c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800650c:	b480      	push	{r7}
 800650e:	b087      	sub	sp, #28
 8006510:	af00      	add	r7, sp, #0
 8006512:	60f8      	str	r0, [r7, #12]
 8006514:	60b9      	str	r1, [r7, #8]
 8006516:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	6a1b      	ldr	r3, [r3, #32]
 800651c:	f023 0210 	bic.w	r2, r3, #16
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	699b      	ldr	r3, [r3, #24]
 8006528:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	6a1b      	ldr	r3, [r3, #32]
 800652e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006530:	697b      	ldr	r3, [r7, #20]
 8006532:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006536:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	031b      	lsls	r3, r3, #12
 800653c:	697a      	ldr	r2, [r7, #20]
 800653e:	4313      	orrs	r3, r2
 8006540:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006542:	693b      	ldr	r3, [r7, #16]
 8006544:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006548:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800654a:	68bb      	ldr	r3, [r7, #8]
 800654c:	011b      	lsls	r3, r3, #4
 800654e:	693a      	ldr	r2, [r7, #16]
 8006550:	4313      	orrs	r3, r2
 8006552:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	697a      	ldr	r2, [r7, #20]
 8006558:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	693a      	ldr	r2, [r7, #16]
 800655e:	621a      	str	r2, [r3, #32]
}
 8006560:	bf00      	nop
 8006562:	371c      	adds	r7, #28
 8006564:	46bd      	mov	sp, r7
 8006566:	bc80      	pop	{r7}
 8006568:	4770      	bx	lr

0800656a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800656a:	b480      	push	{r7}
 800656c:	b085      	sub	sp, #20
 800656e:	af00      	add	r7, sp, #0
 8006570:	6078      	str	r0, [r7, #4]
 8006572:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	689b      	ldr	r3, [r3, #8]
 8006578:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8006580:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006584:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006586:	683a      	ldr	r2, [r7, #0]
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	4313      	orrs	r3, r2
 800658c:	f043 0307 	orr.w	r3, r3, #7
 8006590:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	68fa      	ldr	r2, [r7, #12]
 8006596:	609a      	str	r2, [r3, #8]
}
 8006598:	bf00      	nop
 800659a:	3714      	adds	r7, #20
 800659c:	46bd      	mov	sp, r7
 800659e:	bc80      	pop	{r7}
 80065a0:	4770      	bx	lr

080065a2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80065a2:	b480      	push	{r7}
 80065a4:	b087      	sub	sp, #28
 80065a6:	af00      	add	r7, sp, #0
 80065a8:	60f8      	str	r0, [r7, #12]
 80065aa:	60b9      	str	r1, [r7, #8]
 80065ac:	607a      	str	r2, [r7, #4]
 80065ae:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	689b      	ldr	r3, [r3, #8]
 80065b4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80065b6:	697b      	ldr	r3, [r7, #20]
 80065b8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80065bc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	021a      	lsls	r2, r3, #8
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	431a      	orrs	r2, r3
 80065c6:	68bb      	ldr	r3, [r7, #8]
 80065c8:	4313      	orrs	r3, r2
 80065ca:	697a      	ldr	r2, [r7, #20]
 80065cc:	4313      	orrs	r3, r2
 80065ce:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	697a      	ldr	r2, [r7, #20]
 80065d4:	609a      	str	r2, [r3, #8]
}
 80065d6:	bf00      	nop
 80065d8:	371c      	adds	r7, #28
 80065da:	46bd      	mov	sp, r7
 80065dc:	bc80      	pop	{r7}
 80065de:	4770      	bx	lr

080065e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80065e0:	b480      	push	{r7}
 80065e2:	b085      	sub	sp, #20
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
 80065e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065f0:	2b01      	cmp	r3, #1
 80065f2:	d101      	bne.n	80065f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80065f4:	2302      	movs	r3, #2
 80065f6:	e04a      	b.n	800668e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2201      	movs	r2, #1
 80065fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2202      	movs	r2, #2
 8006604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	685b      	ldr	r3, [r3, #4]
 800660e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	689b      	ldr	r3, [r3, #8]
 8006616:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	4a1e      	ldr	r2, [pc, #120]	; (8006698 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800661e:	4293      	cmp	r3, r2
 8006620:	d108      	bne.n	8006634 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006628:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	685b      	ldr	r3, [r3, #4]
 800662e:	68fa      	ldr	r2, [r7, #12]
 8006630:	4313      	orrs	r3, r2
 8006632:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800663a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	68fa      	ldr	r2, [r7, #12]
 8006642:	4313      	orrs	r3, r2
 8006644:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	68fa      	ldr	r2, [r7, #12]
 800664c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	4a11      	ldr	r2, [pc, #68]	; (8006698 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8006654:	4293      	cmp	r3, r2
 8006656:	d004      	beq.n	8006662 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006660:	d10c      	bne.n	800667c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006662:	68bb      	ldr	r3, [r7, #8]
 8006664:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006668:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	689b      	ldr	r3, [r3, #8]
 800666e:	68ba      	ldr	r2, [r7, #8]
 8006670:	4313      	orrs	r3, r2
 8006672:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	68ba      	ldr	r2, [r7, #8]
 800667a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2201      	movs	r2, #1
 8006680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2200      	movs	r2, #0
 8006688:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800668c:	2300      	movs	r3, #0
}
 800668e:	4618      	mov	r0, r3
 8006690:	3714      	adds	r7, #20
 8006692:	46bd      	mov	sp, r7
 8006694:	bc80      	pop	{r7}
 8006696:	4770      	bx	lr
 8006698:	40012c00 	.word	0x40012c00

0800669c <LL_RCC_GetUSARTClockSource>:
{
 800669c:	b480      	push	{r7}
 800669e:	b083      	sub	sp, #12
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 80066a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80066a8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	401a      	ands	r2, r3
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	041b      	lsls	r3, r3, #16
 80066b4:	4313      	orrs	r3, r2
}
 80066b6:	4618      	mov	r0, r3
 80066b8:	370c      	adds	r7, #12
 80066ba:	46bd      	mov	sp, r7
 80066bc:	bc80      	pop	{r7}
 80066be:	4770      	bx	lr

080066c0 <LL_RCC_GetLPUARTClockSource>:
{
 80066c0:	b480      	push	{r7}
 80066c2:	b083      	sub	sp, #12
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80066c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80066cc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	4013      	ands	r3, r2
}
 80066d4:	4618      	mov	r0, r3
 80066d6:	370c      	adds	r7, #12
 80066d8:	46bd      	mov	sp, r7
 80066da:	bc80      	pop	{r7}
 80066dc:	4770      	bx	lr

080066de <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80066de:	b580      	push	{r7, lr}
 80066e0:	b082      	sub	sp, #8
 80066e2:	af00      	add	r7, sp, #0
 80066e4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d101      	bne.n	80066f0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80066ec:	2301      	movs	r3, #1
 80066ee:	e042      	b.n	8006776 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d106      	bne.n	8006708 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2200      	movs	r2, #0
 80066fe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006702:	6878      	ldr	r0, [r7, #4]
 8006704:	f7fc fc82 	bl	800300c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2224      	movs	r2, #36	; 0x24
 800670c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	681a      	ldr	r2, [r3, #0]
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f022 0201 	bic.w	r2, r2, #1
 800671e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006720:	6878      	ldr	r0, [r7, #4]
 8006722:	f000 fd0d 	bl	8007140 <UART_SetConfig>
 8006726:	4603      	mov	r3, r0
 8006728:	2b01      	cmp	r3, #1
 800672a:	d101      	bne.n	8006730 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800672c:	2301      	movs	r3, #1
 800672e:	e022      	b.n	8006776 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006734:	2b00      	cmp	r3, #0
 8006736:	d002      	beq.n	800673e <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006738:	6878      	ldr	r0, [r7, #4]
 800673a:	f000 ff75 	bl	8007628 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	685a      	ldr	r2, [r3, #4]
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800674c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	689a      	ldr	r2, [r3, #8]
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800675c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	681a      	ldr	r2, [r3, #0]
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f042 0201 	orr.w	r2, r2, #1
 800676c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800676e:	6878      	ldr	r0, [r7, #4]
 8006770:	f000 fffb 	bl	800776a <UART_CheckIdleState>
 8006774:	4603      	mov	r3, r0
}
 8006776:	4618      	mov	r0, r3
 8006778:	3708      	adds	r7, #8
 800677a:	46bd      	mov	sp, r7
 800677c:	bd80      	pop	{r7, pc}

0800677e <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800677e:	b580      	push	{r7, lr}
 8006780:	b08a      	sub	sp, #40	; 0x28
 8006782:	af02      	add	r7, sp, #8
 8006784:	60f8      	str	r0, [r7, #12]
 8006786:	60b9      	str	r1, [r7, #8]
 8006788:	603b      	str	r3, [r7, #0]
 800678a:	4613      	mov	r3, r2
 800678c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006794:	2b20      	cmp	r3, #32
 8006796:	d173      	bne.n	8006880 <HAL_UART_Transmit+0x102>
  {
    if ((pData == NULL) || (Size == 0U))
 8006798:	68bb      	ldr	r3, [r7, #8]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d002      	beq.n	80067a4 <HAL_UART_Transmit+0x26>
 800679e:	88fb      	ldrh	r3, [r7, #6]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d101      	bne.n	80067a8 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80067a4:	2301      	movs	r3, #1
 80067a6:	e06c      	b.n	8006882 <HAL_UART_Transmit+0x104>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	2200      	movs	r2, #0
 80067ac:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	2221      	movs	r2, #33	; 0x21
 80067b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80067b8:	f7fc f99a 	bl	8002af0 <HAL_GetTick>
 80067bc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	88fa      	ldrh	r2, [r7, #6]
 80067c2:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	88fa      	ldrh	r2, [r7, #6]
 80067ca:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	689b      	ldr	r3, [r3, #8]
 80067d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067d6:	d108      	bne.n	80067ea <HAL_UART_Transmit+0x6c>
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	691b      	ldr	r3, [r3, #16]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d104      	bne.n	80067ea <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80067e0:	2300      	movs	r3, #0
 80067e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80067e4:	68bb      	ldr	r3, [r7, #8]
 80067e6:	61bb      	str	r3, [r7, #24]
 80067e8:	e003      	b.n	80067f2 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80067ea:	68bb      	ldr	r3, [r7, #8]
 80067ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80067ee:	2300      	movs	r3, #0
 80067f0:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80067f2:	e02c      	b.n	800684e <HAL_UART_Transmit+0xd0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	9300      	str	r3, [sp, #0]
 80067f8:	697b      	ldr	r3, [r7, #20]
 80067fa:	2200      	movs	r2, #0
 80067fc:	2180      	movs	r1, #128	; 0x80
 80067fe:	68f8      	ldr	r0, [r7, #12]
 8006800:	f001 f801 	bl	8007806 <UART_WaitOnFlagUntilTimeout>
 8006804:	4603      	mov	r3, r0
 8006806:	2b00      	cmp	r3, #0
 8006808:	d001      	beq.n	800680e <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800680a:	2303      	movs	r3, #3
 800680c:	e039      	b.n	8006882 <HAL_UART_Transmit+0x104>
      }
      if (pdata8bits == NULL)
 800680e:	69fb      	ldr	r3, [r7, #28]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d10b      	bne.n	800682c <HAL_UART_Transmit+0xae>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006814:	69bb      	ldr	r3, [r7, #24]
 8006816:	881b      	ldrh	r3, [r3, #0]
 8006818:	461a      	mov	r2, r3
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006822:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006824:	69bb      	ldr	r3, [r7, #24]
 8006826:	3302      	adds	r3, #2
 8006828:	61bb      	str	r3, [r7, #24]
 800682a:	e007      	b.n	800683c <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800682c:	69fb      	ldr	r3, [r7, #28]
 800682e:	781a      	ldrb	r2, [r3, #0]
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006836:	69fb      	ldr	r3, [r7, #28]
 8006838:	3301      	adds	r3, #1
 800683a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006842:	b29b      	uxth	r3, r3
 8006844:	3b01      	subs	r3, #1
 8006846:	b29a      	uxth	r2, r3
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006854:	b29b      	uxth	r3, r3
 8006856:	2b00      	cmp	r3, #0
 8006858:	d1cc      	bne.n	80067f4 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	9300      	str	r3, [sp, #0]
 800685e:	697b      	ldr	r3, [r7, #20]
 8006860:	2200      	movs	r2, #0
 8006862:	2140      	movs	r1, #64	; 0x40
 8006864:	68f8      	ldr	r0, [r7, #12]
 8006866:	f000 ffce 	bl	8007806 <UART_WaitOnFlagUntilTimeout>
 800686a:	4603      	mov	r3, r0
 800686c:	2b00      	cmp	r3, #0
 800686e:	d001      	beq.n	8006874 <HAL_UART_Transmit+0xf6>
    {
      return HAL_TIMEOUT;
 8006870:	2303      	movs	r3, #3
 8006872:	e006      	b.n	8006882 <HAL_UART_Transmit+0x104>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	2220      	movs	r2, #32
 8006878:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800687c:	2300      	movs	r3, #0
 800687e:	e000      	b.n	8006882 <HAL_UART_Transmit+0x104>
  }
  else
  {
    return HAL_BUSY;
 8006880:	2302      	movs	r3, #2
  }
}
 8006882:	4618      	mov	r0, r3
 8006884:	3720      	adds	r7, #32
 8006886:	46bd      	mov	sp, r7
 8006888:	bd80      	pop	{r7, pc}

0800688a <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800688a:	b580      	push	{r7, lr}
 800688c:	b08a      	sub	sp, #40	; 0x28
 800688e:	af02      	add	r7, sp, #8
 8006890:	60f8      	str	r0, [r7, #12]
 8006892:	60b9      	str	r1, [r7, #8]
 8006894:	603b      	str	r3, [r7, #0]
 8006896:	4613      	mov	r3, r2
 8006898:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80068a0:	2b20      	cmp	r3, #32
 80068a2:	f040 80b1 	bne.w	8006a08 <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 80068a6:	68bb      	ldr	r3, [r7, #8]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d002      	beq.n	80068b2 <HAL_UART_Receive+0x28>
 80068ac:	88fb      	ldrh	r3, [r7, #6]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d101      	bne.n	80068b6 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80068b2:	2301      	movs	r3, #1
 80068b4:	e0a9      	b.n	8006a0a <HAL_UART_Receive+0x180>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	2200      	movs	r2, #0
 80068ba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	2222      	movs	r2, #34	; 0x22
 80068c2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	2200      	movs	r2, #0
 80068ca:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80068cc:	f7fc f910 	bl	8002af0 <HAL_GetTick>
 80068d0:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	88fa      	ldrh	r2, [r7, #6]
 80068d6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	88fa      	ldrh	r2, [r7, #6]
 80068de:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	689b      	ldr	r3, [r3, #8]
 80068e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068ea:	d10e      	bne.n	800690a <HAL_UART_Receive+0x80>
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	691b      	ldr	r3, [r3, #16]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d105      	bne.n	8006900 <HAL_UART_Receive+0x76>
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	f240 12ff 	movw	r2, #511	; 0x1ff
 80068fa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80068fe:	e02d      	b.n	800695c <HAL_UART_Receive+0xd2>
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	22ff      	movs	r2, #255	; 0xff
 8006904:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006908:	e028      	b.n	800695c <HAL_UART_Receive+0xd2>
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	689b      	ldr	r3, [r3, #8]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d10d      	bne.n	800692e <HAL_UART_Receive+0xa4>
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	691b      	ldr	r3, [r3, #16]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d104      	bne.n	8006924 <HAL_UART_Receive+0x9a>
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	22ff      	movs	r2, #255	; 0xff
 800691e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006922:	e01b      	b.n	800695c <HAL_UART_Receive+0xd2>
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	227f      	movs	r2, #127	; 0x7f
 8006928:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800692c:	e016      	b.n	800695c <HAL_UART_Receive+0xd2>
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	689b      	ldr	r3, [r3, #8]
 8006932:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006936:	d10d      	bne.n	8006954 <HAL_UART_Receive+0xca>
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	691b      	ldr	r3, [r3, #16]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d104      	bne.n	800694a <HAL_UART_Receive+0xc0>
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	227f      	movs	r2, #127	; 0x7f
 8006944:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006948:	e008      	b.n	800695c <HAL_UART_Receive+0xd2>
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	223f      	movs	r2, #63	; 0x3f
 800694e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006952:	e003      	b.n	800695c <HAL_UART_Receive+0xd2>
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	2200      	movs	r2, #0
 8006958:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006962:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	689b      	ldr	r3, [r3, #8]
 8006968:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800696c:	d108      	bne.n	8006980 <HAL_UART_Receive+0xf6>
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	691b      	ldr	r3, [r3, #16]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d104      	bne.n	8006980 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8006976:	2300      	movs	r3, #0
 8006978:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800697a:	68bb      	ldr	r3, [r7, #8]
 800697c:	61bb      	str	r3, [r7, #24]
 800697e:	e003      	b.n	8006988 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8006980:	68bb      	ldr	r3, [r7, #8]
 8006982:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006984:	2300      	movs	r3, #0
 8006986:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8006988:	e032      	b.n	80069f0 <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	9300      	str	r3, [sp, #0]
 800698e:	697b      	ldr	r3, [r7, #20]
 8006990:	2200      	movs	r2, #0
 8006992:	2120      	movs	r1, #32
 8006994:	68f8      	ldr	r0, [r7, #12]
 8006996:	f000 ff36 	bl	8007806 <UART_WaitOnFlagUntilTimeout>
 800699a:	4603      	mov	r3, r0
 800699c:	2b00      	cmp	r3, #0
 800699e:	d001      	beq.n	80069a4 <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 80069a0:	2303      	movs	r3, #3
 80069a2:	e032      	b.n	8006a0a <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 80069a4:	69fb      	ldr	r3, [r7, #28]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d10c      	bne.n	80069c4 <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069b0:	b29a      	uxth	r2, r3
 80069b2:	8a7b      	ldrh	r3, [r7, #18]
 80069b4:	4013      	ands	r3, r2
 80069b6:	b29a      	uxth	r2, r3
 80069b8:	69bb      	ldr	r3, [r7, #24]
 80069ba:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80069bc:	69bb      	ldr	r3, [r7, #24]
 80069be:	3302      	adds	r3, #2
 80069c0:	61bb      	str	r3, [r7, #24]
 80069c2:	e00c      	b.n	80069de <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ca:	b2da      	uxtb	r2, r3
 80069cc:	8a7b      	ldrh	r3, [r7, #18]
 80069ce:	b2db      	uxtb	r3, r3
 80069d0:	4013      	ands	r3, r2
 80069d2:	b2da      	uxtb	r2, r3
 80069d4:	69fb      	ldr	r3, [r7, #28]
 80069d6:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80069d8:	69fb      	ldr	r3, [r7, #28]
 80069da:	3301      	adds	r3, #1
 80069dc:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80069e4:	b29b      	uxth	r3, r3
 80069e6:	3b01      	subs	r3, #1
 80069e8:	b29a      	uxth	r2, r3
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80069f6:	b29b      	uxth	r3, r3
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d1c6      	bne.n	800698a <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	2220      	movs	r2, #32
 8006a00:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 8006a04:	2300      	movs	r3, #0
 8006a06:	e000      	b.n	8006a0a <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 8006a08:	2302      	movs	r3, #2
  }
}
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	3720      	adds	r7, #32
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	bd80      	pop	{r7, pc}
	...

08006a14 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006a14:	b580      	push	{r7, lr}
 8006a16:	b08a      	sub	sp, #40	; 0x28
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	60f8      	str	r0, [r7, #12]
 8006a1c:	60b9      	str	r1, [r7, #8]
 8006a1e:	4613      	mov	r3, r2
 8006a20:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a28:	2b20      	cmp	r3, #32
 8006a2a:	d137      	bne.n	8006a9c <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a2c:	68bb      	ldr	r3, [r7, #8]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d002      	beq.n	8006a38 <HAL_UART_Receive_DMA+0x24>
 8006a32:	88fb      	ldrh	r3, [r7, #6]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d101      	bne.n	8006a3c <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8006a38:	2301      	movs	r3, #1
 8006a3a:	e030      	b.n	8006a9e <HAL_UART_Receive_DMA+0x8a>
      }
    }

#endif /* CORE_CM0PLUS */
    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	2200      	movs	r2, #0
 8006a40:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	4a18      	ldr	r2, [pc, #96]	; (8006aa8 <HAL_UART_Receive_DMA+0x94>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d01f      	beq.n	8006a8c <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	685b      	ldr	r3, [r3, #4]
 8006a52:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d018      	beq.n	8006a8c <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a60:	697b      	ldr	r3, [r7, #20]
 8006a62:	e853 3f00 	ldrex	r3, [r3]
 8006a66:	613b      	str	r3, [r7, #16]
   return(result);
 8006a68:	693b      	ldr	r3, [r7, #16]
 8006a6a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006a6e:	627b      	str	r3, [r7, #36]	; 0x24
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	461a      	mov	r2, r3
 8006a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a78:	623b      	str	r3, [r7, #32]
 8006a7a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a7c:	69f9      	ldr	r1, [r7, #28]
 8006a7e:	6a3a      	ldr	r2, [r7, #32]
 8006a80:	e841 2300 	strex	r3, r2, [r1]
 8006a84:	61bb      	str	r3, [r7, #24]
   return(result);
 8006a86:	69bb      	ldr	r3, [r7, #24]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d1e6      	bne.n	8006a5a <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8006a8c:	88fb      	ldrh	r3, [r7, #6]
 8006a8e:	461a      	mov	r2, r3
 8006a90:	68b9      	ldr	r1, [r7, #8]
 8006a92:	68f8      	ldr	r0, [r7, #12]
 8006a94:	f000 ff80 	bl	8007998 <UART_Start_Receive_DMA>
 8006a98:	4603      	mov	r3, r0
 8006a9a:	e000      	b.n	8006a9e <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006a9c:	2302      	movs	r3, #2
  }
}
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	3728      	adds	r7, #40	; 0x28
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	bd80      	pop	{r7, pc}
 8006aa6:	bf00      	nop
 8006aa8:	40008000 	.word	0x40008000

08006aac <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006aac:	b580      	push	{r7, lr}
 8006aae:	b0ba      	sub	sp, #232	; 0xe8
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	69db      	ldr	r3, [r3, #28]
 8006aba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	689b      	ldr	r3, [r3, #8]
 8006ace:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006ad2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006ad6:	f640 030f 	movw	r3, #2063	; 0x80f
 8006ada:	4013      	ands	r3, r2
 8006adc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006ae0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d11b      	bne.n	8006b20 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006ae8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006aec:	f003 0320 	and.w	r3, r3, #32
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d015      	beq.n	8006b20 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006af4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006af8:	f003 0320 	and.w	r3, r3, #32
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d105      	bne.n	8006b0c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006b00:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006b04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d009      	beq.n	8006b20 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	f000 82e3 	beq.w	80070dc <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b1a:	6878      	ldr	r0, [r7, #4]
 8006b1c:	4798      	blx	r3
      }
      return;
 8006b1e:	e2dd      	b.n	80070dc <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006b20:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	f000 8123 	beq.w	8006d70 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006b2a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006b2e:	4b8d      	ldr	r3, [pc, #564]	; (8006d64 <HAL_UART_IRQHandler+0x2b8>)
 8006b30:	4013      	ands	r3, r2
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d106      	bne.n	8006b44 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006b36:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006b3a:	4b8b      	ldr	r3, [pc, #556]	; (8006d68 <HAL_UART_IRQHandler+0x2bc>)
 8006b3c:	4013      	ands	r3, r2
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	f000 8116 	beq.w	8006d70 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006b44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b48:	f003 0301 	and.w	r3, r3, #1
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d011      	beq.n	8006b74 <HAL_UART_IRQHandler+0xc8>
 8006b50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d00b      	beq.n	8006b74 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	2201      	movs	r2, #1
 8006b62:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b6a:	f043 0201 	orr.w	r2, r3, #1
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006b74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b78:	f003 0302 	and.w	r3, r3, #2
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d011      	beq.n	8006ba4 <HAL_UART_IRQHandler+0xf8>
 8006b80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006b84:	f003 0301 	and.w	r3, r3, #1
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d00b      	beq.n	8006ba4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	2202      	movs	r2, #2
 8006b92:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b9a:	f043 0204 	orr.w	r2, r3, #4
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006ba4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ba8:	f003 0304 	and.w	r3, r3, #4
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d011      	beq.n	8006bd4 <HAL_UART_IRQHandler+0x128>
 8006bb0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006bb4:	f003 0301 	and.w	r3, r3, #1
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d00b      	beq.n	8006bd4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	2204      	movs	r2, #4
 8006bc2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bca:	f043 0202 	orr.w	r2, r3, #2
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006bd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bd8:	f003 0308 	and.w	r3, r3, #8
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d017      	beq.n	8006c10 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006be0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006be4:	f003 0320 	and.w	r3, r3, #32
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d105      	bne.n	8006bf8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006bec:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006bf0:	4b5c      	ldr	r3, [pc, #368]	; (8006d64 <HAL_UART_IRQHandler+0x2b8>)
 8006bf2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d00b      	beq.n	8006c10 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	2208      	movs	r2, #8
 8006bfe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c06:	f043 0208 	orr.w	r2, r3, #8
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006c10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d012      	beq.n	8006c42 <HAL_UART_IRQHandler+0x196>
 8006c1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c20:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d00c      	beq.n	8006c42 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006c30:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c38:	f043 0220 	orr.w	r2, r3, #32
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	f000 8249 	beq.w	80070e0 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006c4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c52:	f003 0320 	and.w	r3, r3, #32
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d013      	beq.n	8006c82 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006c5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c5e:	f003 0320 	and.w	r3, r3, #32
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d105      	bne.n	8006c72 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006c66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d007      	beq.n	8006c82 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d003      	beq.n	8006c82 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c7e:	6878      	ldr	r0, [r7, #4]
 8006c80:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c88:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	689b      	ldr	r3, [r3, #8]
 8006c92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c96:	2b40      	cmp	r3, #64	; 0x40
 8006c98:	d005      	beq.n	8006ca6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006c9a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006c9e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d054      	beq.n	8006d50 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006ca6:	6878      	ldr	r0, [r7, #4]
 8006ca8:	f000 ff5c 	bl	8007b64 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	689b      	ldr	r3, [r3, #8]
 8006cb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cb6:	2b40      	cmp	r3, #64	; 0x40
 8006cb8:	d146      	bne.n	8006d48 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	3308      	adds	r3, #8
 8006cc0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cc4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006cc8:	e853 3f00 	ldrex	r3, [r3]
 8006ccc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006cd0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006cd4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006cd8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	3308      	adds	r3, #8
 8006ce2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006ce6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006cea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006cf2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006cf6:	e841 2300 	strex	r3, r2, [r1]
 8006cfa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006cfe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d1d9      	bne.n	8006cba <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d017      	beq.n	8006d40 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d16:	4a15      	ldr	r2, [pc, #84]	; (8006d6c <HAL_UART_IRQHandler+0x2c0>)
 8006d18:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d20:	4618      	mov	r0, r3
 8006d22:	f7fc fe9f 	bl	8003a64 <HAL_DMA_Abort_IT>
 8006d26:	4603      	mov	r3, r0
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d019      	beq.n	8006d60 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d34:	687a      	ldr	r2, [r7, #4]
 8006d36:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8006d3a:	4610      	mov	r0, r2
 8006d3c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d3e:	e00f      	b.n	8006d60 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006d40:	6878      	ldr	r0, [r7, #4]
 8006d42:	f000 f9e9 	bl	8007118 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d46:	e00b      	b.n	8006d60 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006d48:	6878      	ldr	r0, [r7, #4]
 8006d4a:	f000 f9e5 	bl	8007118 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d4e:	e007      	b.n	8006d60 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006d50:	6878      	ldr	r0, [r7, #4]
 8006d52:	f000 f9e1 	bl	8007118 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	2200      	movs	r2, #0
 8006d5a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8006d5e:	e1bf      	b.n	80070e0 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d60:	bf00      	nop
    return;
 8006d62:	e1bd      	b.n	80070e0 <HAL_UART_IRQHandler+0x634>
 8006d64:	10000001 	.word	0x10000001
 8006d68:	04000120 	.word	0x04000120
 8006d6c:	08007e19 	.word	0x08007e19

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d74:	2b01      	cmp	r3, #1
 8006d76:	f040 8153 	bne.w	8007020 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006d7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d7e:	f003 0310 	and.w	r3, r3, #16
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	f000 814c 	beq.w	8007020 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006d88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d8c:	f003 0310 	and.w	r3, r3, #16
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	f000 8145 	beq.w	8007020 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	2210      	movs	r2, #16
 8006d9c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	689b      	ldr	r3, [r3, #8]
 8006da4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006da8:	2b40      	cmp	r3, #64	; 0x40
 8006daa:	f040 80bb 	bne.w	8006f24 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	685b      	ldr	r3, [r3, #4]
 8006db8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006dbc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	f000 818f 	beq.w	80070e4 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006dcc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006dd0:	429a      	cmp	r2, r3
 8006dd2:	f080 8187 	bcs.w	80070e4 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006ddc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f003 0320 	and.w	r3, r3, #32
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	f040 8087 	bne.w	8006f02 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dfc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006e00:	e853 3f00 	ldrex	r3, [r3]
 8006e04:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006e08:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006e0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006e10:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	461a      	mov	r2, r3
 8006e1a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006e1e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006e22:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e26:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006e2a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006e2e:	e841 2300 	strex	r3, r2, [r1]
 8006e32:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006e36:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d1da      	bne.n	8006df4 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	3308      	adds	r3, #8
 8006e44:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e46:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006e48:	e853 3f00 	ldrex	r3, [r3]
 8006e4c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006e4e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006e50:	f023 0301 	bic.w	r3, r3, #1
 8006e54:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	3308      	adds	r3, #8
 8006e5e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006e62:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006e66:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e68:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006e6a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006e6e:	e841 2300 	strex	r3, r2, [r1]
 8006e72:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006e74:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d1e1      	bne.n	8006e3e <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	3308      	adds	r3, #8
 8006e80:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e82:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006e84:	e853 3f00 	ldrex	r3, [r3]
 8006e88:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006e8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006e8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e90:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	3308      	adds	r3, #8
 8006e9a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006e9e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006ea0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ea2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006ea4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006ea6:	e841 2300 	strex	r3, r2, [r1]
 8006eaa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006eac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d1e3      	bne.n	8006e7a <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	2220      	movs	r2, #32
 8006eb6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ec6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ec8:	e853 3f00 	ldrex	r3, [r3]
 8006ecc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006ece:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ed0:	f023 0310 	bic.w	r3, r3, #16
 8006ed4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	461a      	mov	r2, r3
 8006ede:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006ee2:	65bb      	str	r3, [r7, #88]	; 0x58
 8006ee4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ee6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006ee8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006eea:	e841 2300 	strex	r3, r2, [r1]
 8006eee:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006ef0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d1e4      	bne.n	8006ec0 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006efc:	4618      	mov	r0, r3
 8006efe:	f7fc fd53 	bl	80039a8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2202      	movs	r2, #2
 8006f06:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006f14:	b29b      	uxth	r3, r3
 8006f16:	1ad3      	subs	r3, r2, r3
 8006f18:	b29b      	uxth	r3, r3
 8006f1a:	4619      	mov	r1, r3
 8006f1c:	6878      	ldr	r0, [r7, #4]
 8006f1e:	f000 f904 	bl	800712a <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006f22:	e0df      	b.n	80070e4 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006f30:	b29b      	uxth	r3, r3
 8006f32:	1ad3      	subs	r3, r2, r3
 8006f34:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006f3e:	b29b      	uxth	r3, r3
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	f000 80d1 	beq.w	80070e8 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8006f46:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	f000 80cc 	beq.w	80070e8 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f58:	e853 3f00 	ldrex	r3, [r3]
 8006f5c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006f5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f60:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006f64:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	461a      	mov	r2, r3
 8006f6e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006f72:	647b      	str	r3, [r7, #68]	; 0x44
 8006f74:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f76:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006f78:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006f7a:	e841 2300 	strex	r3, r2, [r1]
 8006f7e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006f80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d1e4      	bne.n	8006f50 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	3308      	adds	r3, #8
 8006f8c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f90:	e853 3f00 	ldrex	r3, [r3]
 8006f94:	623b      	str	r3, [r7, #32]
   return(result);
 8006f96:	6a3b      	ldr	r3, [r7, #32]
 8006f98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006f9c:	f023 0301 	bic.w	r3, r3, #1
 8006fa0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	3308      	adds	r3, #8
 8006faa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006fae:	633a      	str	r2, [r7, #48]	; 0x30
 8006fb0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fb2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006fb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006fb6:	e841 2300 	strex	r3, r2, [r1]
 8006fba:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006fbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d1e1      	bne.n	8006f86 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2220      	movs	r2, #32
 8006fc6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	2200      	movs	r2, #0
 8006fce:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fdc:	693b      	ldr	r3, [r7, #16]
 8006fde:	e853 3f00 	ldrex	r3, [r3]
 8006fe2:	60fb      	str	r3, [r7, #12]
   return(result);
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	f023 0310 	bic.w	r3, r3, #16
 8006fea:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	461a      	mov	r2, r3
 8006ff4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006ff8:	61fb      	str	r3, [r7, #28]
 8006ffa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ffc:	69b9      	ldr	r1, [r7, #24]
 8006ffe:	69fa      	ldr	r2, [r7, #28]
 8007000:	e841 2300 	strex	r3, r2, [r1]
 8007004:	617b      	str	r3, [r7, #20]
   return(result);
 8007006:	697b      	ldr	r3, [r7, #20]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d1e4      	bne.n	8006fd6 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2202      	movs	r2, #2
 8007010:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007012:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007016:	4619      	mov	r1, r3
 8007018:	6878      	ldr	r0, [r7, #4]
 800701a:	f000 f886 	bl	800712a <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800701e:	e063      	b.n	80070e8 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007020:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007024:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007028:	2b00      	cmp	r3, #0
 800702a:	d00e      	beq.n	800704a <HAL_UART_IRQHandler+0x59e>
 800702c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007030:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007034:	2b00      	cmp	r3, #0
 8007036:	d008      	beq.n	800704a <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007040:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007042:	6878      	ldr	r0, [r7, #4]
 8007044:	f000 ff29 	bl	8007e9a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007048:	e051      	b.n	80070ee <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800704a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800704e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007052:	2b00      	cmp	r3, #0
 8007054:	d014      	beq.n	8007080 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007056:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800705a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800705e:	2b00      	cmp	r3, #0
 8007060:	d105      	bne.n	800706e <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007062:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007066:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800706a:	2b00      	cmp	r3, #0
 800706c:	d008      	beq.n	8007080 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007072:	2b00      	cmp	r3, #0
 8007074:	d03a      	beq.n	80070ec <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800707a:	6878      	ldr	r0, [r7, #4]
 800707c:	4798      	blx	r3
    }
    return;
 800707e:	e035      	b.n	80070ec <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007080:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007084:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007088:	2b00      	cmp	r3, #0
 800708a:	d009      	beq.n	80070a0 <HAL_UART_IRQHandler+0x5f4>
 800708c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007090:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007094:	2b00      	cmp	r3, #0
 8007096:	d003      	beq.n	80070a0 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8007098:	6878      	ldr	r0, [r7, #4]
 800709a:	f000 fed3 	bl	8007e44 <UART_EndTransmit_IT>
    return;
 800709e:	e026      	b.n	80070ee <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80070a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070a4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d009      	beq.n	80070c0 <HAL_UART_IRQHandler+0x614>
 80070ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80070b0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d003      	beq.n	80070c0 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80070b8:	6878      	ldr	r0, [r7, #4]
 80070ba:	f000 ff00 	bl	8007ebe <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80070be:	e016      	b.n	80070ee <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80070c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d010      	beq.n	80070ee <HAL_UART_IRQHandler+0x642>
 80070cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	da0c      	bge.n	80070ee <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80070d4:	6878      	ldr	r0, [r7, #4]
 80070d6:	f000 fee9 	bl	8007eac <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80070da:	e008      	b.n	80070ee <HAL_UART_IRQHandler+0x642>
      return;
 80070dc:	bf00      	nop
 80070de:	e006      	b.n	80070ee <HAL_UART_IRQHandler+0x642>
    return;
 80070e0:	bf00      	nop
 80070e2:	e004      	b.n	80070ee <HAL_UART_IRQHandler+0x642>
      return;
 80070e4:	bf00      	nop
 80070e6:	e002      	b.n	80070ee <HAL_UART_IRQHandler+0x642>
      return;
 80070e8:	bf00      	nop
 80070ea:	e000      	b.n	80070ee <HAL_UART_IRQHandler+0x642>
    return;
 80070ec:	bf00      	nop
  }
}
 80070ee:	37e8      	adds	r7, #232	; 0xe8
 80070f0:	46bd      	mov	sp, r7
 80070f2:	bd80      	pop	{r7, pc}

080070f4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80070f4:	b480      	push	{r7}
 80070f6:	b083      	sub	sp, #12
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80070fc:	bf00      	nop
 80070fe:	370c      	adds	r7, #12
 8007100:	46bd      	mov	sp, r7
 8007102:	bc80      	pop	{r7}
 8007104:	4770      	bx	lr

08007106 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007106:	b480      	push	{r7}
 8007108:	b083      	sub	sp, #12
 800710a:	af00      	add	r7, sp, #0
 800710c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800710e:	bf00      	nop
 8007110:	370c      	adds	r7, #12
 8007112:	46bd      	mov	sp, r7
 8007114:	bc80      	pop	{r7}
 8007116:	4770      	bx	lr

08007118 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007118:	b480      	push	{r7}
 800711a:	b083      	sub	sp, #12
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007120:	bf00      	nop
 8007122:	370c      	adds	r7, #12
 8007124:	46bd      	mov	sp, r7
 8007126:	bc80      	pop	{r7}
 8007128:	4770      	bx	lr

0800712a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800712a:	b480      	push	{r7}
 800712c:	b083      	sub	sp, #12
 800712e:	af00      	add	r7, sp, #0
 8007130:	6078      	str	r0, [r7, #4]
 8007132:	460b      	mov	r3, r1
 8007134:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007136:	bf00      	nop
 8007138:	370c      	adds	r7, #12
 800713a:	46bd      	mov	sp, r7
 800713c:	bc80      	pop	{r7}
 800713e:	4770      	bx	lr

08007140 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007140:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007144:	b08c      	sub	sp, #48	; 0x30
 8007146:	af00      	add	r7, sp, #0
 8007148:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800714a:	2300      	movs	r3, #0
 800714c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007150:	697b      	ldr	r3, [r7, #20]
 8007152:	689a      	ldr	r2, [r3, #8]
 8007154:	697b      	ldr	r3, [r7, #20]
 8007156:	691b      	ldr	r3, [r3, #16]
 8007158:	431a      	orrs	r2, r3
 800715a:	697b      	ldr	r3, [r7, #20]
 800715c:	695b      	ldr	r3, [r3, #20]
 800715e:	431a      	orrs	r2, r3
 8007160:	697b      	ldr	r3, [r7, #20]
 8007162:	69db      	ldr	r3, [r3, #28]
 8007164:	4313      	orrs	r3, r2
 8007166:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007168:	697b      	ldr	r3, [r7, #20]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	681a      	ldr	r2, [r3, #0]
 800716e:	4b94      	ldr	r3, [pc, #592]	; (80073c0 <UART_SetConfig+0x280>)
 8007170:	4013      	ands	r3, r2
 8007172:	697a      	ldr	r2, [r7, #20]
 8007174:	6812      	ldr	r2, [r2, #0]
 8007176:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007178:	430b      	orrs	r3, r1
 800717a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800717c:	697b      	ldr	r3, [r7, #20]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	685b      	ldr	r3, [r3, #4]
 8007182:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007186:	697b      	ldr	r3, [r7, #20]
 8007188:	68da      	ldr	r2, [r3, #12]
 800718a:	697b      	ldr	r3, [r7, #20]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	430a      	orrs	r2, r1
 8007190:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007192:	697b      	ldr	r3, [r7, #20]
 8007194:	699b      	ldr	r3, [r3, #24]
 8007196:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007198:	697b      	ldr	r3, [r7, #20]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	4a89      	ldr	r2, [pc, #548]	; (80073c4 <UART_SetConfig+0x284>)
 800719e:	4293      	cmp	r3, r2
 80071a0:	d004      	beq.n	80071ac <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80071a2:	697b      	ldr	r3, [r7, #20]
 80071a4:	6a1b      	ldr	r3, [r3, #32]
 80071a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80071a8:	4313      	orrs	r3, r2
 80071aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80071ac:	697b      	ldr	r3, [r7, #20]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	689b      	ldr	r3, [r3, #8]
 80071b2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80071b6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80071ba:	697a      	ldr	r2, [r7, #20]
 80071bc:	6812      	ldr	r2, [r2, #0]
 80071be:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80071c0:	430b      	orrs	r3, r1
 80071c2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80071c4:	697b      	ldr	r3, [r7, #20]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071ca:	f023 010f 	bic.w	r1, r3, #15
 80071ce:	697b      	ldr	r3, [r7, #20]
 80071d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80071d2:	697b      	ldr	r3, [r7, #20]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	430a      	orrs	r2, r1
 80071d8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80071da:	697b      	ldr	r3, [r7, #20]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	4a7a      	ldr	r2, [pc, #488]	; (80073c8 <UART_SetConfig+0x288>)
 80071e0:	4293      	cmp	r3, r2
 80071e2:	d127      	bne.n	8007234 <UART_SetConfig+0xf4>
 80071e4:	2003      	movs	r0, #3
 80071e6:	f7ff fa59 	bl	800669c <LL_RCC_GetUSARTClockSource>
 80071ea:	4603      	mov	r3, r0
 80071ec:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 80071f0:	2b03      	cmp	r3, #3
 80071f2:	d81b      	bhi.n	800722c <UART_SetConfig+0xec>
 80071f4:	a201      	add	r2, pc, #4	; (adr r2, 80071fc <UART_SetConfig+0xbc>)
 80071f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071fa:	bf00      	nop
 80071fc:	0800720d 	.word	0x0800720d
 8007200:	0800721d 	.word	0x0800721d
 8007204:	08007215 	.word	0x08007215
 8007208:	08007225 	.word	0x08007225
 800720c:	2301      	movs	r3, #1
 800720e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007212:	e080      	b.n	8007316 <UART_SetConfig+0x1d6>
 8007214:	2302      	movs	r3, #2
 8007216:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800721a:	e07c      	b.n	8007316 <UART_SetConfig+0x1d6>
 800721c:	2304      	movs	r3, #4
 800721e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007222:	e078      	b.n	8007316 <UART_SetConfig+0x1d6>
 8007224:	2308      	movs	r3, #8
 8007226:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800722a:	e074      	b.n	8007316 <UART_SetConfig+0x1d6>
 800722c:	2310      	movs	r3, #16
 800722e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007232:	e070      	b.n	8007316 <UART_SetConfig+0x1d6>
 8007234:	697b      	ldr	r3, [r7, #20]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	4a64      	ldr	r2, [pc, #400]	; (80073cc <UART_SetConfig+0x28c>)
 800723a:	4293      	cmp	r3, r2
 800723c:	d138      	bne.n	80072b0 <UART_SetConfig+0x170>
 800723e:	200c      	movs	r0, #12
 8007240:	f7ff fa2c 	bl	800669c <LL_RCC_GetUSARTClockSource>
 8007244:	4603      	mov	r3, r0
 8007246:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 800724a:	2b0c      	cmp	r3, #12
 800724c:	d82c      	bhi.n	80072a8 <UART_SetConfig+0x168>
 800724e:	a201      	add	r2, pc, #4	; (adr r2, 8007254 <UART_SetConfig+0x114>)
 8007250:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007254:	08007289 	.word	0x08007289
 8007258:	080072a9 	.word	0x080072a9
 800725c:	080072a9 	.word	0x080072a9
 8007260:	080072a9 	.word	0x080072a9
 8007264:	08007299 	.word	0x08007299
 8007268:	080072a9 	.word	0x080072a9
 800726c:	080072a9 	.word	0x080072a9
 8007270:	080072a9 	.word	0x080072a9
 8007274:	08007291 	.word	0x08007291
 8007278:	080072a9 	.word	0x080072a9
 800727c:	080072a9 	.word	0x080072a9
 8007280:	080072a9 	.word	0x080072a9
 8007284:	080072a1 	.word	0x080072a1
 8007288:	2300      	movs	r3, #0
 800728a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800728e:	e042      	b.n	8007316 <UART_SetConfig+0x1d6>
 8007290:	2302      	movs	r3, #2
 8007292:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007296:	e03e      	b.n	8007316 <UART_SetConfig+0x1d6>
 8007298:	2304      	movs	r3, #4
 800729a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800729e:	e03a      	b.n	8007316 <UART_SetConfig+0x1d6>
 80072a0:	2308      	movs	r3, #8
 80072a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80072a6:	e036      	b.n	8007316 <UART_SetConfig+0x1d6>
 80072a8:	2310      	movs	r3, #16
 80072aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80072ae:	e032      	b.n	8007316 <UART_SetConfig+0x1d6>
 80072b0:	697b      	ldr	r3, [r7, #20]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	4a43      	ldr	r2, [pc, #268]	; (80073c4 <UART_SetConfig+0x284>)
 80072b6:	4293      	cmp	r3, r2
 80072b8:	d12a      	bne.n	8007310 <UART_SetConfig+0x1d0>
 80072ba:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80072be:	f7ff f9ff 	bl	80066c0 <LL_RCC_GetLPUARTClockSource>
 80072c2:	4603      	mov	r3, r0
 80072c4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80072c8:	d01a      	beq.n	8007300 <UART_SetConfig+0x1c0>
 80072ca:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80072ce:	d81b      	bhi.n	8007308 <UART_SetConfig+0x1c8>
 80072d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80072d4:	d00c      	beq.n	80072f0 <UART_SetConfig+0x1b0>
 80072d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80072da:	d815      	bhi.n	8007308 <UART_SetConfig+0x1c8>
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d003      	beq.n	80072e8 <UART_SetConfig+0x1a8>
 80072e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80072e4:	d008      	beq.n	80072f8 <UART_SetConfig+0x1b8>
 80072e6:	e00f      	b.n	8007308 <UART_SetConfig+0x1c8>
 80072e8:	2300      	movs	r3, #0
 80072ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80072ee:	e012      	b.n	8007316 <UART_SetConfig+0x1d6>
 80072f0:	2302      	movs	r3, #2
 80072f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80072f6:	e00e      	b.n	8007316 <UART_SetConfig+0x1d6>
 80072f8:	2304      	movs	r3, #4
 80072fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80072fe:	e00a      	b.n	8007316 <UART_SetConfig+0x1d6>
 8007300:	2308      	movs	r3, #8
 8007302:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007306:	e006      	b.n	8007316 <UART_SetConfig+0x1d6>
 8007308:	2310      	movs	r3, #16
 800730a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800730e:	e002      	b.n	8007316 <UART_SetConfig+0x1d6>
 8007310:	2310      	movs	r3, #16
 8007312:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007316:	697b      	ldr	r3, [r7, #20]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	4a2a      	ldr	r2, [pc, #168]	; (80073c4 <UART_SetConfig+0x284>)
 800731c:	4293      	cmp	r3, r2
 800731e:	f040 80a4 	bne.w	800746a <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007322:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007326:	2b08      	cmp	r3, #8
 8007328:	d823      	bhi.n	8007372 <UART_SetConfig+0x232>
 800732a:	a201      	add	r2, pc, #4	; (adr r2, 8007330 <UART_SetConfig+0x1f0>)
 800732c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007330:	08007355 	.word	0x08007355
 8007334:	08007373 	.word	0x08007373
 8007338:	0800735d 	.word	0x0800735d
 800733c:	08007373 	.word	0x08007373
 8007340:	08007363 	.word	0x08007363
 8007344:	08007373 	.word	0x08007373
 8007348:	08007373 	.word	0x08007373
 800734c:	08007373 	.word	0x08007373
 8007350:	0800736b 	.word	0x0800736b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007354:	f7fd ff46 	bl	80051e4 <HAL_RCC_GetPCLK1Freq>
 8007358:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800735a:	e010      	b.n	800737e <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800735c:	4b1c      	ldr	r3, [pc, #112]	; (80073d0 <UART_SetConfig+0x290>)
 800735e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007360:	e00d      	b.n	800737e <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007362:	f7fd fe8b 	bl	800507c <HAL_RCC_GetSysClockFreq>
 8007366:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007368:	e009      	b.n	800737e <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800736a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800736e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007370:	e005      	b.n	800737e <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 8007372:	2300      	movs	r3, #0
 8007374:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007376:	2301      	movs	r3, #1
 8007378:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800737c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800737e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007380:	2b00      	cmp	r3, #0
 8007382:	f000 8137 	beq.w	80075f4 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007386:	697b      	ldr	r3, [r7, #20]
 8007388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800738a:	4a12      	ldr	r2, [pc, #72]	; (80073d4 <UART_SetConfig+0x294>)
 800738c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007390:	461a      	mov	r2, r3
 8007392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007394:	fbb3 f3f2 	udiv	r3, r3, r2
 8007398:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800739a:	697b      	ldr	r3, [r7, #20]
 800739c:	685a      	ldr	r2, [r3, #4]
 800739e:	4613      	mov	r3, r2
 80073a0:	005b      	lsls	r3, r3, #1
 80073a2:	4413      	add	r3, r2
 80073a4:	69ba      	ldr	r2, [r7, #24]
 80073a6:	429a      	cmp	r2, r3
 80073a8:	d305      	bcc.n	80073b6 <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80073aa:	697b      	ldr	r3, [r7, #20]
 80073ac:	685b      	ldr	r3, [r3, #4]
 80073ae:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80073b0:	69ba      	ldr	r2, [r7, #24]
 80073b2:	429a      	cmp	r2, r3
 80073b4:	d910      	bls.n	80073d8 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 80073b6:	2301      	movs	r3, #1
 80073b8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80073bc:	e11a      	b.n	80075f4 <UART_SetConfig+0x4b4>
 80073be:	bf00      	nop
 80073c0:	cfff69f3 	.word	0xcfff69f3
 80073c4:	40008000 	.word	0x40008000
 80073c8:	40013800 	.word	0x40013800
 80073cc:	40004400 	.word	0x40004400
 80073d0:	00f42400 	.word	0x00f42400
 80073d4:	0800cf04 	.word	0x0800cf04
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80073d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073da:	2200      	movs	r2, #0
 80073dc:	60bb      	str	r3, [r7, #8]
 80073de:	60fa      	str	r2, [r7, #12]
 80073e0:	697b      	ldr	r3, [r7, #20]
 80073e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073e4:	4a8e      	ldr	r2, [pc, #568]	; (8007620 <UART_SetConfig+0x4e0>)
 80073e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80073ea:	b29b      	uxth	r3, r3
 80073ec:	2200      	movs	r2, #0
 80073ee:	603b      	str	r3, [r7, #0]
 80073f0:	607a      	str	r2, [r7, #4]
 80073f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80073f6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80073fa:	f7f8 ff11 	bl	8000220 <__aeabi_uldivmod>
 80073fe:	4602      	mov	r2, r0
 8007400:	460b      	mov	r3, r1
 8007402:	4610      	mov	r0, r2
 8007404:	4619      	mov	r1, r3
 8007406:	f04f 0200 	mov.w	r2, #0
 800740a:	f04f 0300 	mov.w	r3, #0
 800740e:	020b      	lsls	r3, r1, #8
 8007410:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007414:	0202      	lsls	r2, r0, #8
 8007416:	6979      	ldr	r1, [r7, #20]
 8007418:	6849      	ldr	r1, [r1, #4]
 800741a:	0849      	lsrs	r1, r1, #1
 800741c:	2000      	movs	r0, #0
 800741e:	460c      	mov	r4, r1
 8007420:	4605      	mov	r5, r0
 8007422:	eb12 0804 	adds.w	r8, r2, r4
 8007426:	eb43 0905 	adc.w	r9, r3, r5
 800742a:	697b      	ldr	r3, [r7, #20]
 800742c:	685b      	ldr	r3, [r3, #4]
 800742e:	2200      	movs	r2, #0
 8007430:	469a      	mov	sl, r3
 8007432:	4693      	mov	fp, r2
 8007434:	4652      	mov	r2, sl
 8007436:	465b      	mov	r3, fp
 8007438:	4640      	mov	r0, r8
 800743a:	4649      	mov	r1, r9
 800743c:	f7f8 fef0 	bl	8000220 <__aeabi_uldivmod>
 8007440:	4602      	mov	r2, r0
 8007442:	460b      	mov	r3, r1
 8007444:	4613      	mov	r3, r2
 8007446:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007448:	6a3b      	ldr	r3, [r7, #32]
 800744a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800744e:	d308      	bcc.n	8007462 <UART_SetConfig+0x322>
 8007450:	6a3b      	ldr	r3, [r7, #32]
 8007452:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007456:	d204      	bcs.n	8007462 <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 8007458:	697b      	ldr	r3, [r7, #20]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	6a3a      	ldr	r2, [r7, #32]
 800745e:	60da      	str	r2, [r3, #12]
 8007460:	e0c8      	b.n	80075f4 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 8007462:	2301      	movs	r3, #1
 8007464:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007468:	e0c4      	b.n	80075f4 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800746a:	697b      	ldr	r3, [r7, #20]
 800746c:	69db      	ldr	r3, [r3, #28]
 800746e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007472:	d167      	bne.n	8007544 <UART_SetConfig+0x404>
  {
    switch (clocksource)
 8007474:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007478:	2b08      	cmp	r3, #8
 800747a:	d828      	bhi.n	80074ce <UART_SetConfig+0x38e>
 800747c:	a201      	add	r2, pc, #4	; (adr r2, 8007484 <UART_SetConfig+0x344>)
 800747e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007482:	bf00      	nop
 8007484:	080074a9 	.word	0x080074a9
 8007488:	080074b1 	.word	0x080074b1
 800748c:	080074b9 	.word	0x080074b9
 8007490:	080074cf 	.word	0x080074cf
 8007494:	080074bf 	.word	0x080074bf
 8007498:	080074cf 	.word	0x080074cf
 800749c:	080074cf 	.word	0x080074cf
 80074a0:	080074cf 	.word	0x080074cf
 80074a4:	080074c7 	.word	0x080074c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80074a8:	f7fd fe9c 	bl	80051e4 <HAL_RCC_GetPCLK1Freq>
 80074ac:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80074ae:	e014      	b.n	80074da <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80074b0:	f7fd feaa 	bl	8005208 <HAL_RCC_GetPCLK2Freq>
 80074b4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80074b6:	e010      	b.n	80074da <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80074b8:	4b5a      	ldr	r3, [pc, #360]	; (8007624 <UART_SetConfig+0x4e4>)
 80074ba:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80074bc:	e00d      	b.n	80074da <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80074be:	f7fd fddd 	bl	800507c <HAL_RCC_GetSysClockFreq>
 80074c2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80074c4:	e009      	b.n	80074da <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80074c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80074ca:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80074cc:	e005      	b.n	80074da <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 80074ce:	2300      	movs	r3, #0
 80074d0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80074d2:	2301      	movs	r3, #1
 80074d4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80074d8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80074da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074dc:	2b00      	cmp	r3, #0
 80074de:	f000 8089 	beq.w	80075f4 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80074e2:	697b      	ldr	r3, [r7, #20]
 80074e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074e6:	4a4e      	ldr	r2, [pc, #312]	; (8007620 <UART_SetConfig+0x4e0>)
 80074e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80074ec:	461a      	mov	r2, r3
 80074ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074f0:	fbb3 f3f2 	udiv	r3, r3, r2
 80074f4:	005a      	lsls	r2, r3, #1
 80074f6:	697b      	ldr	r3, [r7, #20]
 80074f8:	685b      	ldr	r3, [r3, #4]
 80074fa:	085b      	lsrs	r3, r3, #1
 80074fc:	441a      	add	r2, r3
 80074fe:	697b      	ldr	r3, [r7, #20]
 8007500:	685b      	ldr	r3, [r3, #4]
 8007502:	fbb2 f3f3 	udiv	r3, r2, r3
 8007506:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007508:	6a3b      	ldr	r3, [r7, #32]
 800750a:	2b0f      	cmp	r3, #15
 800750c:	d916      	bls.n	800753c <UART_SetConfig+0x3fc>
 800750e:	6a3b      	ldr	r3, [r7, #32]
 8007510:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007514:	d212      	bcs.n	800753c <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007516:	6a3b      	ldr	r3, [r7, #32]
 8007518:	b29b      	uxth	r3, r3
 800751a:	f023 030f 	bic.w	r3, r3, #15
 800751e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007520:	6a3b      	ldr	r3, [r7, #32]
 8007522:	085b      	lsrs	r3, r3, #1
 8007524:	b29b      	uxth	r3, r3
 8007526:	f003 0307 	and.w	r3, r3, #7
 800752a:	b29a      	uxth	r2, r3
 800752c:	8bfb      	ldrh	r3, [r7, #30]
 800752e:	4313      	orrs	r3, r2
 8007530:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007532:	697b      	ldr	r3, [r7, #20]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	8bfa      	ldrh	r2, [r7, #30]
 8007538:	60da      	str	r2, [r3, #12]
 800753a:	e05b      	b.n	80075f4 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 800753c:	2301      	movs	r3, #1
 800753e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007542:	e057      	b.n	80075f4 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007544:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007548:	2b08      	cmp	r3, #8
 800754a:	d828      	bhi.n	800759e <UART_SetConfig+0x45e>
 800754c:	a201      	add	r2, pc, #4	; (adr r2, 8007554 <UART_SetConfig+0x414>)
 800754e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007552:	bf00      	nop
 8007554:	08007579 	.word	0x08007579
 8007558:	08007581 	.word	0x08007581
 800755c:	08007589 	.word	0x08007589
 8007560:	0800759f 	.word	0x0800759f
 8007564:	0800758f 	.word	0x0800758f
 8007568:	0800759f 	.word	0x0800759f
 800756c:	0800759f 	.word	0x0800759f
 8007570:	0800759f 	.word	0x0800759f
 8007574:	08007597 	.word	0x08007597
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007578:	f7fd fe34 	bl	80051e4 <HAL_RCC_GetPCLK1Freq>
 800757c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800757e:	e014      	b.n	80075aa <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007580:	f7fd fe42 	bl	8005208 <HAL_RCC_GetPCLK2Freq>
 8007584:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007586:	e010      	b.n	80075aa <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007588:	4b26      	ldr	r3, [pc, #152]	; (8007624 <UART_SetConfig+0x4e4>)
 800758a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800758c:	e00d      	b.n	80075aa <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800758e:	f7fd fd75 	bl	800507c <HAL_RCC_GetSysClockFreq>
 8007592:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007594:	e009      	b.n	80075aa <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007596:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800759a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800759c:	e005      	b.n	80075aa <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 800759e:	2300      	movs	r3, #0
 80075a0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80075a2:	2301      	movs	r3, #1
 80075a4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80075a8:	bf00      	nop
    }

    if (pclk != 0U)
 80075aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d021      	beq.n	80075f4 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80075b0:	697b      	ldr	r3, [r7, #20]
 80075b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075b4:	4a1a      	ldr	r2, [pc, #104]	; (8007620 <UART_SetConfig+0x4e0>)
 80075b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80075ba:	461a      	mov	r2, r3
 80075bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075be:	fbb3 f2f2 	udiv	r2, r3, r2
 80075c2:	697b      	ldr	r3, [r7, #20]
 80075c4:	685b      	ldr	r3, [r3, #4]
 80075c6:	085b      	lsrs	r3, r3, #1
 80075c8:	441a      	add	r2, r3
 80075ca:	697b      	ldr	r3, [r7, #20]
 80075cc:	685b      	ldr	r3, [r3, #4]
 80075ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80075d2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80075d4:	6a3b      	ldr	r3, [r7, #32]
 80075d6:	2b0f      	cmp	r3, #15
 80075d8:	d909      	bls.n	80075ee <UART_SetConfig+0x4ae>
 80075da:	6a3b      	ldr	r3, [r7, #32]
 80075dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80075e0:	d205      	bcs.n	80075ee <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80075e2:	6a3b      	ldr	r3, [r7, #32]
 80075e4:	b29a      	uxth	r2, r3
 80075e6:	697b      	ldr	r3, [r7, #20]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	60da      	str	r2, [r3, #12]
 80075ec:	e002      	b.n	80075f4 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 80075ee:	2301      	movs	r3, #1
 80075f0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80075f4:	697b      	ldr	r3, [r7, #20]
 80075f6:	2201      	movs	r2, #1
 80075f8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80075fc:	697b      	ldr	r3, [r7, #20]
 80075fe:	2201      	movs	r2, #1
 8007600:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007604:	697b      	ldr	r3, [r7, #20]
 8007606:	2200      	movs	r2, #0
 8007608:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800760a:	697b      	ldr	r3, [r7, #20]
 800760c:	2200      	movs	r2, #0
 800760e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8007610:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8007614:	4618      	mov	r0, r3
 8007616:	3730      	adds	r7, #48	; 0x30
 8007618:	46bd      	mov	sp, r7
 800761a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800761e:	bf00      	nop
 8007620:	0800cf04 	.word	0x0800cf04
 8007624:	00f42400 	.word	0x00f42400

08007628 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007628:	b480      	push	{r7}
 800762a:	b083      	sub	sp, #12
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007634:	f003 0301 	and.w	r3, r3, #1
 8007638:	2b00      	cmp	r3, #0
 800763a:	d00a      	beq.n	8007652 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	685b      	ldr	r3, [r3, #4]
 8007642:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	430a      	orrs	r2, r1
 8007650:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007656:	f003 0302 	and.w	r3, r3, #2
 800765a:	2b00      	cmp	r3, #0
 800765c:	d00a      	beq.n	8007674 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	685b      	ldr	r3, [r3, #4]
 8007664:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	430a      	orrs	r2, r1
 8007672:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007678:	f003 0304 	and.w	r3, r3, #4
 800767c:	2b00      	cmp	r3, #0
 800767e:	d00a      	beq.n	8007696 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	685b      	ldr	r3, [r3, #4]
 8007686:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	430a      	orrs	r2, r1
 8007694:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800769a:	f003 0308 	and.w	r3, r3, #8
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d00a      	beq.n	80076b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	685b      	ldr	r3, [r3, #4]
 80076a8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	430a      	orrs	r2, r1
 80076b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076bc:	f003 0310 	and.w	r3, r3, #16
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d00a      	beq.n	80076da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	689b      	ldr	r3, [r3, #8]
 80076ca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	430a      	orrs	r2, r1
 80076d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076de:	f003 0320 	and.w	r3, r3, #32
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d00a      	beq.n	80076fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	689b      	ldr	r3, [r3, #8]
 80076ec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	430a      	orrs	r2, r1
 80076fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007700:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007704:	2b00      	cmp	r3, #0
 8007706:	d01a      	beq.n	800773e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	685b      	ldr	r3, [r3, #4]
 800770e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	430a      	orrs	r2, r1
 800771c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007722:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007726:	d10a      	bne.n	800773e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	685b      	ldr	r3, [r3, #4]
 800772e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	430a      	orrs	r2, r1
 800773c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007742:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007746:	2b00      	cmp	r3, #0
 8007748:	d00a      	beq.n	8007760 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	685b      	ldr	r3, [r3, #4]
 8007750:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	430a      	orrs	r2, r1
 800775e:	605a      	str	r2, [r3, #4]
  }
}
 8007760:	bf00      	nop
 8007762:	370c      	adds	r7, #12
 8007764:	46bd      	mov	sp, r7
 8007766:	bc80      	pop	{r7}
 8007768:	4770      	bx	lr

0800776a <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800776a:	b580      	push	{r7, lr}
 800776c:	b086      	sub	sp, #24
 800776e:	af02      	add	r7, sp, #8
 8007770:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	2200      	movs	r2, #0
 8007776:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800777a:	f7fb f9b9 	bl	8002af0 <HAL_GetTick>
 800777e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	f003 0308 	and.w	r3, r3, #8
 800778a:	2b08      	cmp	r3, #8
 800778c:	d10e      	bne.n	80077ac <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800778e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007792:	9300      	str	r3, [sp, #0]
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	2200      	movs	r2, #0
 8007798:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800779c:	6878      	ldr	r0, [r7, #4]
 800779e:	f000 f832 	bl	8007806 <UART_WaitOnFlagUntilTimeout>
 80077a2:	4603      	mov	r3, r0
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d001      	beq.n	80077ac <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80077a8:	2303      	movs	r3, #3
 80077aa:	e028      	b.n	80077fe <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	f003 0304 	and.w	r3, r3, #4
 80077b6:	2b04      	cmp	r3, #4
 80077b8:	d10e      	bne.n	80077d8 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80077ba:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80077be:	9300      	str	r3, [sp, #0]
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	2200      	movs	r2, #0
 80077c4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80077c8:	6878      	ldr	r0, [r7, #4]
 80077ca:	f000 f81c 	bl	8007806 <UART_WaitOnFlagUntilTimeout>
 80077ce:	4603      	mov	r3, r0
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d001      	beq.n	80077d8 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80077d4:	2303      	movs	r3, #3
 80077d6:	e012      	b.n	80077fe <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2220      	movs	r2, #32
 80077dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2220      	movs	r2, #32
 80077e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2200      	movs	r2, #0
 80077ec:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	2200      	movs	r2, #0
 80077f2:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2200      	movs	r2, #0
 80077f8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80077fc:	2300      	movs	r3, #0
}
 80077fe:	4618      	mov	r0, r3
 8007800:	3710      	adds	r7, #16
 8007802:	46bd      	mov	sp, r7
 8007804:	bd80      	pop	{r7, pc}

08007806 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007806:	b580      	push	{r7, lr}
 8007808:	b09c      	sub	sp, #112	; 0x70
 800780a:	af00      	add	r7, sp, #0
 800780c:	60f8      	str	r0, [r7, #12]
 800780e:	60b9      	str	r1, [r7, #8]
 8007810:	603b      	str	r3, [r7, #0]
 8007812:	4613      	mov	r3, r2
 8007814:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007816:	e0a9      	b.n	800796c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007818:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800781a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800781e:	f000 80a5 	beq.w	800796c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007822:	f7fb f965 	bl	8002af0 <HAL_GetTick>
 8007826:	4602      	mov	r2, r0
 8007828:	683b      	ldr	r3, [r7, #0]
 800782a:	1ad3      	subs	r3, r2, r3
 800782c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800782e:	429a      	cmp	r2, r3
 8007830:	d302      	bcc.n	8007838 <UART_WaitOnFlagUntilTimeout+0x32>
 8007832:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007834:	2b00      	cmp	r3, #0
 8007836:	d140      	bne.n	80078ba <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800783e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007840:	e853 3f00 	ldrex	r3, [r3]
 8007844:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007846:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007848:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800784c:	667b      	str	r3, [r7, #100]	; 0x64
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	461a      	mov	r2, r3
 8007854:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007856:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007858:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800785a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800785c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800785e:	e841 2300 	strex	r3, r2, [r1]
 8007862:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007864:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007866:	2b00      	cmp	r3, #0
 8007868:	d1e6      	bne.n	8007838 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	3308      	adds	r3, #8
 8007870:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007872:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007874:	e853 3f00 	ldrex	r3, [r3]
 8007878:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800787a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800787c:	f023 0301 	bic.w	r3, r3, #1
 8007880:	663b      	str	r3, [r7, #96]	; 0x60
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	3308      	adds	r3, #8
 8007888:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800788a:	64ba      	str	r2, [r7, #72]	; 0x48
 800788c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800788e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007890:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007892:	e841 2300 	strex	r3, r2, [r1]
 8007896:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007898:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800789a:	2b00      	cmp	r3, #0
 800789c:	d1e5      	bne.n	800786a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	2220      	movs	r2, #32
 80078a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	2220      	movs	r2, #32
 80078aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	2200      	movs	r2, #0
 80078b2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

        return HAL_TIMEOUT;
 80078b6:	2303      	movs	r3, #3
 80078b8:	e069      	b.n	800798e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	f003 0304 	and.w	r3, r3, #4
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d051      	beq.n	800796c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	69db      	ldr	r3, [r3, #28]
 80078ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80078d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80078d6:	d149      	bne.n	800796c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80078e0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078ea:	e853 3f00 	ldrex	r3, [r3]
 80078ee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80078f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078f2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80078f6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	461a      	mov	r2, r3
 80078fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007900:	637b      	str	r3, [r7, #52]	; 0x34
 8007902:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007904:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007906:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007908:	e841 2300 	strex	r3, r2, [r1]
 800790c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800790e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007910:	2b00      	cmp	r3, #0
 8007912:	d1e6      	bne.n	80078e2 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	3308      	adds	r3, #8
 800791a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800791c:	697b      	ldr	r3, [r7, #20]
 800791e:	e853 3f00 	ldrex	r3, [r3]
 8007922:	613b      	str	r3, [r7, #16]
   return(result);
 8007924:	693b      	ldr	r3, [r7, #16]
 8007926:	f023 0301 	bic.w	r3, r3, #1
 800792a:	66bb      	str	r3, [r7, #104]	; 0x68
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	3308      	adds	r3, #8
 8007932:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007934:	623a      	str	r2, [r7, #32]
 8007936:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007938:	69f9      	ldr	r1, [r7, #28]
 800793a:	6a3a      	ldr	r2, [r7, #32]
 800793c:	e841 2300 	strex	r3, r2, [r1]
 8007940:	61bb      	str	r3, [r7, #24]
   return(result);
 8007942:	69bb      	ldr	r3, [r7, #24]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d1e5      	bne.n	8007914 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	2220      	movs	r2, #32
 800794c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	2220      	movs	r2, #32
 8007954:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	2220      	movs	r2, #32
 800795c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	2200      	movs	r2, #0
 8007964:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8007968:	2303      	movs	r3, #3
 800796a:	e010      	b.n	800798e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	69da      	ldr	r2, [r3, #28]
 8007972:	68bb      	ldr	r3, [r7, #8]
 8007974:	4013      	ands	r3, r2
 8007976:	68ba      	ldr	r2, [r7, #8]
 8007978:	429a      	cmp	r2, r3
 800797a:	bf0c      	ite	eq
 800797c:	2301      	moveq	r3, #1
 800797e:	2300      	movne	r3, #0
 8007980:	b2db      	uxtb	r3, r3
 8007982:	461a      	mov	r2, r3
 8007984:	79fb      	ldrb	r3, [r7, #7]
 8007986:	429a      	cmp	r2, r3
 8007988:	f43f af46 	beq.w	8007818 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800798c:	2300      	movs	r3, #0
}
 800798e:	4618      	mov	r0, r3
 8007990:	3770      	adds	r7, #112	; 0x70
 8007992:	46bd      	mov	sp, r7
 8007994:	bd80      	pop	{r7, pc}
	...

08007998 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007998:	b580      	push	{r7, lr}
 800799a:	b096      	sub	sp, #88	; 0x58
 800799c:	af00      	add	r7, sp, #0
 800799e:	60f8      	str	r0, [r7, #12]
 80079a0:	60b9      	str	r1, [r7, #8]
 80079a2:	4613      	mov	r3, r2
 80079a4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	68ba      	ldr	r2, [r7, #8]
 80079aa:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	88fa      	ldrh	r2, [r7, #6]
 80079b0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	2200      	movs	r2, #0
 80079b8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	2222      	movs	r2, #34	; 0x22
 80079c0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if (huart->hdmarx != NULL)
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d02d      	beq.n	8007a2a <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80079d4:	4a40      	ldr	r2, [pc, #256]	; (8007ad8 <UART_Start_Receive_DMA+0x140>)
 80079d6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80079de:	4a3f      	ldr	r2, [pc, #252]	; (8007adc <UART_Start_Receive_DMA+0x144>)
 80079e0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80079e8:	4a3d      	ldr	r2, [pc, #244]	; (8007ae0 <UART_Start_Receive_DMA+0x148>)
 80079ea:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80079f2:	2200      	movs	r2, #0
 80079f4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	3324      	adds	r3, #36	; 0x24
 8007a02:	4619      	mov	r1, r3
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a08:	461a      	mov	r2, r3
 8007a0a:	88fb      	ldrh	r3, [r7, #6]
 8007a0c:	f7fb ff4e 	bl	80038ac <HAL_DMA_Start_IT>
 8007a10:	4603      	mov	r3, r0
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d009      	beq.n	8007a2a <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	2210      	movs	r2, #16
 8007a1a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	2220      	movs	r2, #32
 8007a22:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      return HAL_ERROR;
 8007a26:	2301      	movs	r3, #1
 8007a28:	e051      	b.n	8007ace <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	691b      	ldr	r3, [r3, #16]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d018      	beq.n	8007a64 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a3a:	e853 3f00 	ldrex	r3, [r3]
 8007a3e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007a40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007a46:	657b      	str	r3, [r7, #84]	; 0x54
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	461a      	mov	r2, r3
 8007a4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007a50:	64bb      	str	r3, [r7, #72]	; 0x48
 8007a52:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a54:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007a56:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007a58:	e841 2300 	strex	r3, r2, [r1]
 8007a5c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007a5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d1e6      	bne.n	8007a32 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	3308      	adds	r3, #8
 8007a6a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a6e:	e853 3f00 	ldrex	r3, [r3]
 8007a72:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a76:	f043 0301 	orr.w	r3, r3, #1
 8007a7a:	653b      	str	r3, [r7, #80]	; 0x50
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	3308      	adds	r3, #8
 8007a82:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007a84:	637a      	str	r2, [r7, #52]	; 0x34
 8007a86:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a88:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007a8a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007a8c:	e841 2300 	strex	r3, r2, [r1]
 8007a90:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d1e5      	bne.n	8007a64 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	3308      	adds	r3, #8
 8007a9e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aa0:	697b      	ldr	r3, [r7, #20]
 8007aa2:	e853 3f00 	ldrex	r3, [r3]
 8007aa6:	613b      	str	r3, [r7, #16]
   return(result);
 8007aa8:	693b      	ldr	r3, [r7, #16]
 8007aaa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007aae:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	3308      	adds	r3, #8
 8007ab6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007ab8:	623a      	str	r2, [r7, #32]
 8007aba:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007abc:	69f9      	ldr	r1, [r7, #28]
 8007abe:	6a3a      	ldr	r2, [r7, #32]
 8007ac0:	e841 2300 	strex	r3, r2, [r1]
 8007ac4:	61bb      	str	r3, [r7, #24]
   return(result);
 8007ac6:	69bb      	ldr	r3, [r7, #24]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d1e5      	bne.n	8007a98 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8007acc:	2300      	movs	r3, #0
}
 8007ace:	4618      	mov	r0, r3
 8007ad0:	3758      	adds	r7, #88	; 0x58
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	bd80      	pop	{r7, pc}
 8007ad6:	bf00      	nop
 8007ad8:	08007c2f 	.word	0x08007c2f
 8007adc:	08007d5b 	.word	0x08007d5b
 8007ae0:	08007d99 	.word	0x08007d99

08007ae4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007ae4:	b480      	push	{r7}
 8007ae6:	b08f      	sub	sp, #60	; 0x3c
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007af2:	6a3b      	ldr	r3, [r7, #32]
 8007af4:	e853 3f00 	ldrex	r3, [r3]
 8007af8:	61fb      	str	r3, [r7, #28]
   return(result);
 8007afa:	69fb      	ldr	r3, [r7, #28]
 8007afc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007b00:	637b      	str	r3, [r7, #52]	; 0x34
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	461a      	mov	r2, r3
 8007b08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007b0c:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b0e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007b10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007b12:	e841 2300 	strex	r3, r2, [r1]
 8007b16:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d1e6      	bne.n	8007aec <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	3308      	adds	r3, #8
 8007b24:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	e853 3f00 	ldrex	r3, [r3]
 8007b2c:	60bb      	str	r3, [r7, #8]
   return(result);
 8007b2e:	68bb      	ldr	r3, [r7, #8]
 8007b30:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8007b34:	633b      	str	r3, [r7, #48]	; 0x30
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	3308      	adds	r3, #8
 8007b3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b3e:	61ba      	str	r2, [r7, #24]
 8007b40:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b42:	6979      	ldr	r1, [r7, #20]
 8007b44:	69ba      	ldr	r2, [r7, #24]
 8007b46:	e841 2300 	strex	r3, r2, [r1]
 8007b4a:	613b      	str	r3, [r7, #16]
   return(result);
 8007b4c:	693b      	ldr	r3, [r7, #16]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d1e5      	bne.n	8007b1e <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	2220      	movs	r2, #32
 8007b56:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 8007b5a:	bf00      	nop
 8007b5c:	373c      	adds	r7, #60	; 0x3c
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	bc80      	pop	{r7}
 8007b62:	4770      	bx	lr

08007b64 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007b64:	b480      	push	{r7}
 8007b66:	b095      	sub	sp, #84	; 0x54
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b74:	e853 3f00 	ldrex	r3, [r3]
 8007b78:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b7c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007b80:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	461a      	mov	r2, r3
 8007b88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b8a:	643b      	str	r3, [r7, #64]	; 0x40
 8007b8c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b8e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007b90:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007b92:	e841 2300 	strex	r3, r2, [r1]
 8007b96:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007b98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d1e6      	bne.n	8007b6c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	3308      	adds	r3, #8
 8007ba4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ba6:	6a3b      	ldr	r3, [r7, #32]
 8007ba8:	e853 3f00 	ldrex	r3, [r3]
 8007bac:	61fb      	str	r3, [r7, #28]
   return(result);
 8007bae:	69fb      	ldr	r3, [r7, #28]
 8007bb0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007bb4:	f023 0301 	bic.w	r3, r3, #1
 8007bb8:	64bb      	str	r3, [r7, #72]	; 0x48
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	3308      	adds	r3, #8
 8007bc0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007bc2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007bc4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bc6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007bc8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007bca:	e841 2300 	strex	r3, r2, [r1]
 8007bce:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d1e3      	bne.n	8007b9e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007bda:	2b01      	cmp	r3, #1
 8007bdc:	d118      	bne.n	8007c10 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	e853 3f00 	ldrex	r3, [r3]
 8007bea:	60bb      	str	r3, [r7, #8]
   return(result);
 8007bec:	68bb      	ldr	r3, [r7, #8]
 8007bee:	f023 0310 	bic.w	r3, r3, #16
 8007bf2:	647b      	str	r3, [r7, #68]	; 0x44
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	461a      	mov	r2, r3
 8007bfa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007bfc:	61bb      	str	r3, [r7, #24]
 8007bfe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c00:	6979      	ldr	r1, [r7, #20]
 8007c02:	69ba      	ldr	r2, [r7, #24]
 8007c04:	e841 2300 	strex	r3, r2, [r1]
 8007c08:	613b      	str	r3, [r7, #16]
   return(result);
 8007c0a:	693b      	ldr	r3, [r7, #16]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d1e6      	bne.n	8007bde <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	2220      	movs	r2, #32
 8007c14:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	2200      	movs	r2, #0
 8007c22:	675a      	str	r2, [r3, #116]	; 0x74
}
 8007c24:	bf00      	nop
 8007c26:	3754      	adds	r7, #84	; 0x54
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	bc80      	pop	{r7}
 8007c2c:	4770      	bx	lr

08007c2e <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007c2e:	b580      	push	{r7, lr}
 8007c30:	b09c      	sub	sp, #112	; 0x70
 8007c32:	af00      	add	r7, sp, #0
 8007c34:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c3a:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	f003 0320 	and.w	r3, r3, #32
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d171      	bne.n	8007d2e <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8007c4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007c52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c5a:	e853 3f00 	ldrex	r3, [r3]
 8007c5e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007c60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007c62:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007c66:	66bb      	str	r3, [r7, #104]	; 0x68
 8007c68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	461a      	mov	r2, r3
 8007c6e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007c70:	65bb      	str	r3, [r7, #88]	; 0x58
 8007c72:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c74:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007c76:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007c78:	e841 2300 	strex	r3, r2, [r1]
 8007c7c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007c7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d1e6      	bne.n	8007c52 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	3308      	adds	r3, #8
 8007c8a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c8e:	e853 3f00 	ldrex	r3, [r3]
 8007c92:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007c94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c96:	f023 0301 	bic.w	r3, r3, #1
 8007c9a:	667b      	str	r3, [r7, #100]	; 0x64
 8007c9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	3308      	adds	r3, #8
 8007ca2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007ca4:	647a      	str	r2, [r7, #68]	; 0x44
 8007ca6:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ca8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007caa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007cac:	e841 2300 	strex	r3, r2, [r1]
 8007cb0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007cb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d1e5      	bne.n	8007c84 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007cb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	3308      	adds	r3, #8
 8007cbe:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cc2:	e853 3f00 	ldrex	r3, [r3]
 8007cc6:	623b      	str	r3, [r7, #32]
   return(result);
 8007cc8:	6a3b      	ldr	r3, [r7, #32]
 8007cca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007cce:	663b      	str	r3, [r7, #96]	; 0x60
 8007cd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	3308      	adds	r3, #8
 8007cd6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007cd8:	633a      	str	r2, [r7, #48]	; 0x30
 8007cda:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cdc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007cde:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ce0:	e841 2300 	strex	r3, r2, [r1]
 8007ce4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d1e5      	bne.n	8007cb8 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007cec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007cee:	2220      	movs	r2, #32
 8007cf0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007cf4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007cf6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007cf8:	2b01      	cmp	r3, #1
 8007cfa:	d118      	bne.n	8007d2e <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007cfc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d02:	693b      	ldr	r3, [r7, #16]
 8007d04:	e853 3f00 	ldrex	r3, [r3]
 8007d08:	60fb      	str	r3, [r7, #12]
   return(result);
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	f023 0310 	bic.w	r3, r3, #16
 8007d10:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007d12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	461a      	mov	r2, r3
 8007d18:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007d1a:	61fb      	str	r3, [r7, #28]
 8007d1c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d1e:	69b9      	ldr	r1, [r7, #24]
 8007d20:	69fa      	ldr	r2, [r7, #28]
 8007d22:	e841 2300 	strex	r3, r2, [r1]
 8007d26:	617b      	str	r3, [r7, #20]
   return(result);
 8007d28:	697b      	ldr	r3, [r7, #20]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d1e6      	bne.n	8007cfc <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007d2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d30:	2200      	movs	r2, #0
 8007d32:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d38:	2b01      	cmp	r3, #1
 8007d3a:	d107      	bne.n	8007d4c <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007d3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d3e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007d42:	4619      	mov	r1, r3
 8007d44:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007d46:	f7ff f9f0 	bl	800712a <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007d4a:	e002      	b.n	8007d52 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8007d4c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007d4e:	f7f9 f8cd 	bl	8000eec <HAL_UART_RxCpltCallback>
}
 8007d52:	bf00      	nop
 8007d54:	3770      	adds	r7, #112	; 0x70
 8007d56:	46bd      	mov	sp, r7
 8007d58:	bd80      	pop	{r7, pc}

08007d5a <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007d5a:	b580      	push	{r7, lr}
 8007d5c:	b084      	sub	sp, #16
 8007d5e:	af00      	add	r7, sp, #0
 8007d60:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d66:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	2201      	movs	r2, #1
 8007d6c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d72:	2b01      	cmp	r3, #1
 8007d74:	d109      	bne.n	8007d8a <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007d7c:	085b      	lsrs	r3, r3, #1
 8007d7e:	b29b      	uxth	r3, r3
 8007d80:	4619      	mov	r1, r3
 8007d82:	68f8      	ldr	r0, [r7, #12]
 8007d84:	f7ff f9d1 	bl	800712a <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007d88:	e002      	b.n	8007d90 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8007d8a:	68f8      	ldr	r0, [r7, #12]
 8007d8c:	f7ff f9bb 	bl	8007106 <HAL_UART_RxHalfCpltCallback>
}
 8007d90:	bf00      	nop
 8007d92:	3710      	adds	r7, #16
 8007d94:	46bd      	mov	sp, r7
 8007d96:	bd80      	pop	{r7, pc}

08007d98 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	b086      	sub	sp, #24
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007da4:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8007da6:	697b      	ldr	r3, [r7, #20]
 8007da8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007dac:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8007dae:	697b      	ldr	r3, [r7, #20]
 8007db0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007db4:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8007db6:	697b      	ldr	r3, [r7, #20]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	689b      	ldr	r3, [r3, #8]
 8007dbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007dc0:	2b80      	cmp	r3, #128	; 0x80
 8007dc2:	d109      	bne.n	8007dd8 <UART_DMAError+0x40>
 8007dc4:	693b      	ldr	r3, [r7, #16]
 8007dc6:	2b21      	cmp	r3, #33	; 0x21
 8007dc8:	d106      	bne.n	8007dd8 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8007dca:	697b      	ldr	r3, [r7, #20]
 8007dcc:	2200      	movs	r2, #0
 8007dce:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8007dd2:	6978      	ldr	r0, [r7, #20]
 8007dd4:	f7ff fe86 	bl	8007ae4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007dd8:	697b      	ldr	r3, [r7, #20]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	689b      	ldr	r3, [r3, #8]
 8007dde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007de2:	2b40      	cmp	r3, #64	; 0x40
 8007de4:	d109      	bne.n	8007dfa <UART_DMAError+0x62>
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	2b22      	cmp	r3, #34	; 0x22
 8007dea:	d106      	bne.n	8007dfa <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8007dec:	697b      	ldr	r3, [r7, #20]
 8007dee:	2200      	movs	r2, #0
 8007df0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8007df4:	6978      	ldr	r0, [r7, #20]
 8007df6:	f7ff feb5 	bl	8007b64 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007dfa:	697b      	ldr	r3, [r7, #20]
 8007dfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e00:	f043 0210 	orr.w	r2, r3, #16
 8007e04:	697b      	ldr	r3, [r7, #20]
 8007e06:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007e0a:	6978      	ldr	r0, [r7, #20]
 8007e0c:	f7ff f984 	bl	8007118 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007e10:	bf00      	nop
 8007e12:	3718      	adds	r7, #24
 8007e14:	46bd      	mov	sp, r7
 8007e16:	bd80      	pop	{r7, pc}

08007e18 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	b084      	sub	sp, #16
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e24:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	2200      	movs	r2, #0
 8007e2a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	2200      	movs	r2, #0
 8007e32:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007e36:	68f8      	ldr	r0, [r7, #12]
 8007e38:	f7ff f96e 	bl	8007118 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007e3c:	bf00      	nop
 8007e3e:	3710      	adds	r7, #16
 8007e40:	46bd      	mov	sp, r7
 8007e42:	bd80      	pop	{r7, pc}

08007e44 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007e44:	b580      	push	{r7, lr}
 8007e46:	b088      	sub	sp, #32
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	e853 3f00 	ldrex	r3, [r3]
 8007e58:	60bb      	str	r3, [r7, #8]
   return(result);
 8007e5a:	68bb      	ldr	r3, [r7, #8]
 8007e5c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e60:	61fb      	str	r3, [r7, #28]
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	461a      	mov	r2, r3
 8007e68:	69fb      	ldr	r3, [r7, #28]
 8007e6a:	61bb      	str	r3, [r7, #24]
 8007e6c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e6e:	6979      	ldr	r1, [r7, #20]
 8007e70:	69ba      	ldr	r2, [r7, #24]
 8007e72:	e841 2300 	strex	r3, r2, [r1]
 8007e76:	613b      	str	r3, [r7, #16]
   return(result);
 8007e78:	693b      	ldr	r3, [r7, #16]
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d1e6      	bne.n	8007e4c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	2220      	movs	r2, #32
 8007e82:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	2200      	movs	r2, #0
 8007e8a:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007e8c:	6878      	ldr	r0, [r7, #4]
 8007e8e:	f7ff f931 	bl	80070f4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007e92:	bf00      	nop
 8007e94:	3720      	adds	r7, #32
 8007e96:	46bd      	mov	sp, r7
 8007e98:	bd80      	pop	{r7, pc}

08007e9a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007e9a:	b480      	push	{r7}
 8007e9c:	b083      	sub	sp, #12
 8007e9e:	af00      	add	r7, sp, #0
 8007ea0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007ea2:	bf00      	nop
 8007ea4:	370c      	adds	r7, #12
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	bc80      	pop	{r7}
 8007eaa:	4770      	bx	lr

08007eac <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007eac:	b480      	push	{r7}
 8007eae:	b083      	sub	sp, #12
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007eb4:	bf00      	nop
 8007eb6:	370c      	adds	r7, #12
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	bc80      	pop	{r7}
 8007ebc:	4770      	bx	lr

08007ebe <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007ebe:	b480      	push	{r7}
 8007ec0:	b083      	sub	sp, #12
 8007ec2:	af00      	add	r7, sp, #0
 8007ec4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007ec6:	bf00      	nop
 8007ec8:	370c      	adds	r7, #12
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	bc80      	pop	{r7}
 8007ece:	4770      	bx	lr

08007ed0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007ed0:	b480      	push	{r7}
 8007ed2:	b085      	sub	sp, #20
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007ede:	2b01      	cmp	r3, #1
 8007ee0:	d101      	bne.n	8007ee6 <HAL_UARTEx_DisableFifoMode+0x16>
 8007ee2:	2302      	movs	r3, #2
 8007ee4:	e027      	b.n	8007f36 <HAL_UARTEx_DisableFifoMode+0x66>
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	2201      	movs	r2, #1
 8007eea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	2224      	movs	r2, #36	; 0x24
 8007ef2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	681a      	ldr	r2, [r3, #0]
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	f022 0201 	bic.w	r2, r2, #1
 8007f0c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007f14:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	2200      	movs	r2, #0
 8007f1a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	68fa      	ldr	r2, [r7, #12]
 8007f22:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	2220      	movs	r2, #32
 8007f28:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	2200      	movs	r2, #0
 8007f30:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007f34:	2300      	movs	r3, #0
}
 8007f36:	4618      	mov	r0, r3
 8007f38:	3714      	adds	r7, #20
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	bc80      	pop	{r7}
 8007f3e:	4770      	bx	lr

08007f40 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007f40:	b580      	push	{r7, lr}
 8007f42:	b084      	sub	sp, #16
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]
 8007f48:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007f50:	2b01      	cmp	r3, #1
 8007f52:	d101      	bne.n	8007f58 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007f54:	2302      	movs	r3, #2
 8007f56:	e02d      	b.n	8007fb4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2201      	movs	r2, #1
 8007f5c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	2224      	movs	r2, #36	; 0x24
 8007f64:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	681a      	ldr	r2, [r3, #0]
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	f022 0201 	bic.w	r2, r2, #1
 8007f7e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	689b      	ldr	r3, [r3, #8]
 8007f86:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	683a      	ldr	r2, [r7, #0]
 8007f90:	430a      	orrs	r2, r1
 8007f92:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007f94:	6878      	ldr	r0, [r7, #4]
 8007f96:	f000 f84f 	bl	8008038 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	68fa      	ldr	r2, [r7, #12]
 8007fa0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	2220      	movs	r2, #32
 8007fa6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	2200      	movs	r2, #0
 8007fae:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007fb2:	2300      	movs	r3, #0
}
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	3710      	adds	r7, #16
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	bd80      	pop	{r7, pc}

08007fbc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007fbc:	b580      	push	{r7, lr}
 8007fbe:	b084      	sub	sp, #16
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]
 8007fc4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007fcc:	2b01      	cmp	r3, #1
 8007fce:	d101      	bne.n	8007fd4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007fd0:	2302      	movs	r3, #2
 8007fd2:	e02d      	b.n	8008030 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	2201      	movs	r2, #1
 8007fd8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	2224      	movs	r2, #36	; 0x24
 8007fe0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	681a      	ldr	r2, [r3, #0]
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	f022 0201 	bic.w	r2, r2, #1
 8007ffa:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	689b      	ldr	r3, [r3, #8]
 8008002:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	683a      	ldr	r2, [r7, #0]
 800800c:	430a      	orrs	r2, r1
 800800e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008010:	6878      	ldr	r0, [r7, #4]
 8008012:	f000 f811 	bl	8008038 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	68fa      	ldr	r2, [r7, #12]
 800801c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	2220      	movs	r2, #32
 8008022:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	2200      	movs	r2, #0
 800802a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800802e:	2300      	movs	r3, #0
}
 8008030:	4618      	mov	r0, r3
 8008032:	3710      	adds	r7, #16
 8008034:	46bd      	mov	sp, r7
 8008036:	bd80      	pop	{r7, pc}

08008038 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008038:	b480      	push	{r7}
 800803a:	b085      	sub	sp, #20
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008044:	2b00      	cmp	r3, #0
 8008046:	d108      	bne.n	800805a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	2201      	movs	r2, #1
 800804c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	2201      	movs	r2, #1
 8008054:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008058:	e031      	b.n	80080be <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800805a:	2308      	movs	r3, #8
 800805c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800805e:	2308      	movs	r3, #8
 8008060:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	689b      	ldr	r3, [r3, #8]
 8008068:	0e5b      	lsrs	r3, r3, #25
 800806a:	b2db      	uxtb	r3, r3
 800806c:	f003 0307 	and.w	r3, r3, #7
 8008070:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	689b      	ldr	r3, [r3, #8]
 8008078:	0f5b      	lsrs	r3, r3, #29
 800807a:	b2db      	uxtb	r3, r3
 800807c:	f003 0307 	and.w	r3, r3, #7
 8008080:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008082:	7bbb      	ldrb	r3, [r7, #14]
 8008084:	7b3a      	ldrb	r2, [r7, #12]
 8008086:	4910      	ldr	r1, [pc, #64]	; (80080c8 <UARTEx_SetNbDataToProcess+0x90>)
 8008088:	5c8a      	ldrb	r2, [r1, r2]
 800808a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800808e:	7b3a      	ldrb	r2, [r7, #12]
 8008090:	490e      	ldr	r1, [pc, #56]	; (80080cc <UARTEx_SetNbDataToProcess+0x94>)
 8008092:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008094:	fb93 f3f2 	sdiv	r3, r3, r2
 8008098:	b29a      	uxth	r2, r3
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80080a0:	7bfb      	ldrb	r3, [r7, #15]
 80080a2:	7b7a      	ldrb	r2, [r7, #13]
 80080a4:	4908      	ldr	r1, [pc, #32]	; (80080c8 <UARTEx_SetNbDataToProcess+0x90>)
 80080a6:	5c8a      	ldrb	r2, [r1, r2]
 80080a8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80080ac:	7b7a      	ldrb	r2, [r7, #13]
 80080ae:	4907      	ldr	r1, [pc, #28]	; (80080cc <UARTEx_SetNbDataToProcess+0x94>)
 80080b0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80080b2:	fb93 f3f2 	sdiv	r3, r3, r2
 80080b6:	b29a      	uxth	r2, r3
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80080be:	bf00      	nop
 80080c0:	3714      	adds	r7, #20
 80080c2:	46bd      	mov	sp, r7
 80080c4:	bc80      	pop	{r7}
 80080c6:	4770      	bx	lr
 80080c8:	0800cf1c 	.word	0x0800cf1c
 80080cc:	0800cf24 	.word	0x0800cf24

080080d0 <RadioInit>:
TimerEvent_t RxTimeoutTimer;

/* Private  functions ---------------------------------------------------------*/

static void RadioInit( RadioEvents_t *events )
{
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b084      	sub	sp, #16
 80080d4:	af02      	add	r7, sp, #8
 80080d6:	6078      	str	r0, [r7, #4]
    RadioEvents = events;
 80080d8:	4a24      	ldr	r2, [pc, #144]	; (800816c <RadioInit+0x9c>)
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	6013      	str	r3, [r2, #0]

    SubgRf.RxContinuous = false;
 80080de:	4b24      	ldr	r3, [pc, #144]	; (8008170 <RadioInit+0xa0>)
 80080e0:	2200      	movs	r2, #0
 80080e2:	705a      	strb	r2, [r3, #1]
    SubgRf.TxTimeout = 0;
 80080e4:	4b22      	ldr	r3, [pc, #136]	; (8008170 <RadioInit+0xa0>)
 80080e6:	2200      	movs	r2, #0
 80080e8:	605a      	str	r2, [r3, #4]
    SubgRf.RxTimeout = 0;
 80080ea:	4b21      	ldr	r3, [pc, #132]	; (8008170 <RadioInit+0xa0>)
 80080ec:	2200      	movs	r2, #0
 80080ee:	609a      	str	r2, [r3, #8]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 80080f0:	4b1f      	ldr	r3, [pc, #124]	; (8008170 <RadioInit+0xa0>)
 80080f2:	2200      	movs	r2, #0
 80080f4:	659a      	str	r2, [r3, #88]	; 0x58
#if( RADIO_LR_FHSS_IS_ON == 1 )
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    SUBGRF_Init( RadioOnDioIrq );
 80080f6:	481f      	ldr	r0, [pc, #124]	; (8008174 <RadioInit+0xa4>)
 80080f8:	f001 ff88 	bl	800a00c <SUBGRF_Init>
    /*SubgRf.publicNetwork set to false*/
    SubgRf.PublicNetwork.Current = false;
 80080fc:	4b1c      	ldr	r3, [pc, #112]	; (8008170 <RadioInit+0xa0>)
 80080fe:	2200      	movs	r2, #0
 8008100:	735a      	strb	r2, [r3, #13]
    SubgRf.PublicNetwork.Previous = false;
 8008102:	4b1b      	ldr	r3, [pc, #108]	; (8008170 <RadioInit+0xa0>)
 8008104:	2200      	movs	r2, #0
 8008106:	731a      	strb	r2, [r3, #12]

    RADIO_IRQ_PROCESS_INIT();

    SUBGRF_SetRegulatorMode( );
 8008108:	f002 fa1c 	bl	800a544 <SUBGRF_SetRegulatorMode>

    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 800810c:	2100      	movs	r1, #0
 800810e:	2000      	movs	r0, #0
 8008110:	f002 fde8 	bl	800ace4 <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams( RFO_LP, 0, RADIO_RAMP_200_US );
 8008114:	2204      	movs	r2, #4
 8008116:	2100      	movs	r1, #0
 8008118:	2001      	movs	r0, #1
 800811a:	f002 fba5 	bl	800a868 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 800811e:	2300      	movs	r3, #0
 8008120:	2200      	movs	r2, #0
 8008122:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8008126:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800812a:	f002 fad5 	bl	800a6d8 <SUBGRF_SetDioIrqParams>

    RadioSleep();
 800812e:	f000 fe91 	bl	8008e54 <RadioSleep>
    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 8008132:	2300      	movs	r3, #0
 8008134:	9300      	str	r3, [sp, #0]
 8008136:	4b10      	ldr	r3, [pc, #64]	; (8008178 <RadioInit+0xa8>)
 8008138:	2200      	movs	r2, #0
 800813a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800813e:	480f      	ldr	r0, [pc, #60]	; (800817c <RadioInit+0xac>)
 8008140:	f003 fb1e 	bl	800b780 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 8008144:	2300      	movs	r3, #0
 8008146:	9300      	str	r3, [sp, #0]
 8008148:	4b0d      	ldr	r3, [pc, #52]	; (8008180 <RadioInit+0xb0>)
 800814a:	2200      	movs	r2, #0
 800814c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8008150:	480c      	ldr	r0, [pc, #48]	; (8008184 <RadioInit+0xb4>)
 8008152:	f003 fb15 	bl	800b780 <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 8008156:	4809      	ldr	r0, [pc, #36]	; (800817c <RadioInit+0xac>)
 8008158:	f003 fbb6 	bl	800b8c8 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 800815c:	4809      	ldr	r0, [pc, #36]	; (8008184 <RadioInit+0xb4>)
 800815e:	f003 fbb3 	bl	800b8c8 <UTIL_TIMER_Stop>
}
 8008162:	bf00      	nop
 8008164:	3708      	adds	r7, #8
 8008166:	46bd      	mov	sp, r7
 8008168:	bd80      	pop	{r7, pc}
 800816a:	bf00      	nop
 800816c:	20000a60 	.word	0x20000a60
 8008170:	20000a64 	.word	0x20000a64
 8008174:	0800924d 	.word	0x0800924d
 8008178:	080091d5 	.word	0x080091d5
 800817c:	20000ac0 	.word	0x20000ac0
 8008180:	080091e9 	.word	0x080091e9
 8008184:	20000ad8 	.word	0x20000ad8

08008188 <RadioGetStatus>:

static RadioState_t RadioGetStatus( void )
{
 8008188:	b580      	push	{r7, lr}
 800818a:	af00      	add	r7, sp, #0
    switch( SUBGRF_GetOperatingMode( ) )
 800818c:	f001 ff86 	bl	800a09c <SUBGRF_GetOperatingMode>
 8008190:	4603      	mov	r3, r0
 8008192:	2b07      	cmp	r3, #7
 8008194:	d00a      	beq.n	80081ac <RadioGetStatus+0x24>
 8008196:	2b07      	cmp	r3, #7
 8008198:	dc0a      	bgt.n	80081b0 <RadioGetStatus+0x28>
 800819a:	2b04      	cmp	r3, #4
 800819c:	d002      	beq.n	80081a4 <RadioGetStatus+0x1c>
 800819e:	2b05      	cmp	r3, #5
 80081a0:	d002      	beq.n	80081a8 <RadioGetStatus+0x20>
 80081a2:	e005      	b.n	80081b0 <RadioGetStatus+0x28>
    {
        case MODE_TX:
            return RF_TX_RUNNING;
 80081a4:	2302      	movs	r3, #2
 80081a6:	e004      	b.n	80081b2 <RadioGetStatus+0x2a>
        case MODE_RX:
            return RF_RX_RUNNING;
 80081a8:	2301      	movs	r3, #1
 80081aa:	e002      	b.n	80081b2 <RadioGetStatus+0x2a>
        case MODE_CAD:
            return RF_CAD;
 80081ac:	2303      	movs	r3, #3
 80081ae:	e000      	b.n	80081b2 <RadioGetStatus+0x2a>
        default:
            return RF_IDLE;
 80081b0:	2300      	movs	r3, #0
    }
}
 80081b2:	4618      	mov	r0, r3
 80081b4:	bd80      	pop	{r7, pc}
	...

080081b8 <RadioSetModem>:

static void RadioSetModem( RadioModems_t modem )
{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b082      	sub	sp, #8
 80081bc:	af00      	add	r7, sp, #0
 80081be:	4603      	mov	r3, r0
 80081c0:	71fb      	strb	r3, [r7, #7]
    SubgRf.Modem = modem;
 80081c2:	4a2a      	ldr	r2, [pc, #168]	; (800826c <RadioSetModem+0xb4>)
 80081c4:	79fb      	ldrb	r3, [r7, #7]
 80081c6:	7013      	strb	r3, [r2, #0]
    RFW_SetRadioModem( modem );
 80081c8:	79fb      	ldrb	r3, [r7, #7]
 80081ca:	4618      	mov	r0, r3
 80081cc:	f003 f95d 	bl	800b48a <RFW_SetRadioModem>
    switch( modem )
 80081d0:	79fb      	ldrb	r3, [r7, #7]
 80081d2:	2b05      	cmp	r3, #5
 80081d4:	d80e      	bhi.n	80081f4 <RadioSetModem+0x3c>
 80081d6:	a201      	add	r2, pc, #4	; (adr r2, 80081dc <RadioSetModem+0x24>)
 80081d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081dc:	08008203 	.word	0x08008203
 80081e0:	08008211 	.word	0x08008211
 80081e4:	080081f5 	.word	0x080081f5
 80081e8:	08008237 	.word	0x08008237
 80081ec:	08008245 	.word	0x08008245
 80081f0:	08008253 	.word	0x08008253
    {
    default:
    case MODEM_MSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GMSK );
 80081f4:	2003      	movs	r0, #3
 80081f6:	f002 fb11 	bl	800a81c <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 80081fa:	4b1c      	ldr	r3, [pc, #112]	; (800826c <RadioSetModem+0xb4>)
 80081fc:	2200      	movs	r2, #0
 80081fe:	735a      	strb	r2, [r3, #13]
        break;
 8008200:	e02f      	b.n	8008262 <RadioSetModem+0xaa>
    case MODEM_FSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8008202:	2000      	movs	r0, #0
 8008204:	f002 fb0a 	bl	800a81c <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8008208:	4b18      	ldr	r3, [pc, #96]	; (800826c <RadioSetModem+0xb4>)
 800820a:	2200      	movs	r2, #0
 800820c:	735a      	strb	r2, [r3, #13]
        break;
 800820e:	e028      	b.n	8008262 <RadioSetModem+0xaa>
    case MODEM_LORA:
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 8008210:	2001      	movs	r0, #1
 8008212:	f002 fb03 	bl	800a81c <SUBGRF_SetPacketType>
        // Public/Private network register is reset when switching modems
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 8008216:	4b15      	ldr	r3, [pc, #84]	; (800826c <RadioSetModem+0xb4>)
 8008218:	7b5a      	ldrb	r2, [r3, #13]
 800821a:	4b14      	ldr	r3, [pc, #80]	; (800826c <RadioSetModem+0xb4>)
 800821c:	7b1b      	ldrb	r3, [r3, #12]
 800821e:	429a      	cmp	r2, r3
 8008220:	d01e      	beq.n	8008260 <RadioSetModem+0xa8>
        {
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 8008222:	4b12      	ldr	r3, [pc, #72]	; (800826c <RadioSetModem+0xb4>)
 8008224:	7b1a      	ldrb	r2, [r3, #12]
 8008226:	4b11      	ldr	r3, [pc, #68]	; (800826c <RadioSetModem+0xb4>)
 8008228:	735a      	strb	r2, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 800822a:	4b10      	ldr	r3, [pc, #64]	; (800826c <RadioSetModem+0xb4>)
 800822c:	7b5b      	ldrb	r3, [r3, #13]
 800822e:	4618      	mov	r0, r3
 8008230:	f000 ff9a 	bl	8009168 <RadioSetPublicNetwork>
        }
        break;
 8008234:	e014      	b.n	8008260 <RadioSetModem+0xa8>
    case MODEM_BPSK:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8008236:	2002      	movs	r0, #2
 8008238:	f002 faf0 	bl	800a81c <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 800823c:	4b0b      	ldr	r3, [pc, #44]	; (800826c <RadioSetModem+0xb4>)
 800823e:	2200      	movs	r2, #0
 8008240:	735a      	strb	r2, [r3, #13]
        break;
 8008242:	e00e      	b.n	8008262 <RadioSetModem+0xaa>
#if (RADIO_SIGFOX_ENABLE == 1)
    case MODEM_SIGFOX_TX:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8008244:	2002      	movs	r0, #2
 8008246:	f002 fae9 	bl	800a81c <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 800824a:	4b08      	ldr	r3, [pc, #32]	; (800826c <RadioSetModem+0xb4>)
 800824c:	2200      	movs	r2, #0
 800824e:	735a      	strb	r2, [r3, #13]
        break;
 8008250:	e007      	b.n	8008262 <RadioSetModem+0xaa>
    case MODEM_SIGFOX_RX:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8008252:	2000      	movs	r0, #0
 8008254:	f002 fae2 	bl	800a81c <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8008258:	4b04      	ldr	r3, [pc, #16]	; (800826c <RadioSetModem+0xb4>)
 800825a:	2200      	movs	r2, #0
 800825c:	735a      	strb	r2, [r3, #13]
        break;
 800825e:	e000      	b.n	8008262 <RadioSetModem+0xaa>
        break;
 8008260:	bf00      	nop
#endif /*RADIO_SIGFOX_ENABLE == 1*/
    }
}
 8008262:	bf00      	nop
 8008264:	3708      	adds	r7, #8
 8008266:	46bd      	mov	sp, r7
 8008268:	bd80      	pop	{r7, pc}
 800826a:	bf00      	nop
 800826c:	20000a64 	.word	0x20000a64

08008270 <RadioSetChannel>:

static void RadioSetChannel( uint32_t freq )
{
 8008270:	b580      	push	{r7, lr}
 8008272:	b082      	sub	sp, #8
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]
    SUBGRF_SetRfFrequency( freq );
 8008278:	6878      	ldr	r0, [r7, #4]
 800827a:	f002 fa89 	bl	800a790 <SUBGRF_SetRfFrequency>
}
 800827e:	bf00      	nop
 8008280:	3708      	adds	r7, #8
 8008282:	46bd      	mov	sp, r7
 8008284:	bd80      	pop	{r7, pc}

08008286 <RadioIsChannelFree>:

static bool RadioIsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 8008286:	b580      	push	{r7, lr}
 8008288:	b090      	sub	sp, #64	; 0x40
 800828a:	af0a      	add	r7, sp, #40	; 0x28
 800828c:	60f8      	str	r0, [r7, #12]
 800828e:	60b9      	str	r1, [r7, #8]
 8008290:	603b      	str	r3, [r7, #0]
 8008292:	4613      	mov	r3, r2
 8008294:	80fb      	strh	r3, [r7, #6]
    bool status = true;
 8008296:	2301      	movs	r3, #1
 8008298:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 800829a:	2300      	movs	r3, #0
 800829c:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 800829e:	2300      	movs	r3, #0
 80082a0:	613b      	str	r3, [r7, #16]

    RadioStandby( );
 80082a2:	f000 fdea 	bl	8008e7a <RadioStandby>

    RadioSetModem( MODEM_FSK );
 80082a6:	2000      	movs	r0, #0
 80082a8:	f7ff ff86 	bl	80081b8 <RadioSetModem>

    RadioSetChannel( freq );
 80082ac:	68f8      	ldr	r0, [r7, #12]
 80082ae:	f7ff ffdf 	bl	8008270 <RadioSetChannel>

    // Set Rx bandwidth. Other parameters are not used.
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 80082b2:	2301      	movs	r3, #1
 80082b4:	9309      	str	r3, [sp, #36]	; 0x24
 80082b6:	2300      	movs	r3, #0
 80082b8:	9308      	str	r3, [sp, #32]
 80082ba:	2300      	movs	r3, #0
 80082bc:	9307      	str	r3, [sp, #28]
 80082be:	2300      	movs	r3, #0
 80082c0:	9306      	str	r3, [sp, #24]
 80082c2:	2300      	movs	r3, #0
 80082c4:	9305      	str	r3, [sp, #20]
 80082c6:	2300      	movs	r3, #0
 80082c8:	9304      	str	r3, [sp, #16]
 80082ca:	2300      	movs	r3, #0
 80082cc:	9303      	str	r3, [sp, #12]
 80082ce:	2300      	movs	r3, #0
 80082d0:	9302      	str	r3, [sp, #8]
 80082d2:	2303      	movs	r3, #3
 80082d4:	9301      	str	r3, [sp, #4]
 80082d6:	68bb      	ldr	r3, [r7, #8]
 80082d8:	9300      	str	r3, [sp, #0]
 80082da:	2300      	movs	r3, #0
 80082dc:	f44f 7216 	mov.w	r2, #600	; 0x258
 80082e0:	68b9      	ldr	r1, [r7, #8]
 80082e2:	2000      	movs	r0, #0
 80082e4:	f000 f83c 	bl	8008360 <RadioSetRxConfig>
                      0, false, 0, 0, false, true );
    RadioRx( 0 );
 80082e8:	2000      	movs	r0, #0
 80082ea:	f000 fdcd 	bl	8008e88 <RadioRx>

    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 80082ee:	f000 ff69 	bl	80091c4 <RadioGetWakeupTime>
 80082f2:	4603      	mov	r3, r0
 80082f4:	4618      	mov	r0, r3
 80082f6:	f7fa fc0f 	bl	8002b18 <HAL_Delay>

    carrierSenseTime = TimerGetCurrentTime( );
 80082fa:	f003 fb7f 	bl	800b9fc <UTIL_TIMER_GetCurrentTime>
 80082fe:	6138      	str	r0, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8008300:	e00d      	b.n	800831e <RadioIsChannelFree+0x98>
    {
        rssi = RadioRssi( MODEM_FSK );
 8008302:	2000      	movs	r0, #0
 8008304:	f000 feae 	bl	8009064 <RadioRssi>
 8008308:	4603      	mov	r3, r0
 800830a:	82bb      	strh	r3, [r7, #20]

        if( rssi > rssiThresh )
 800830c:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8008310:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008314:	429a      	cmp	r2, r3
 8008316:	dd02      	ble.n	800831e <RadioIsChannelFree+0x98>
        {
            status = false;
 8008318:	2300      	movs	r3, #0
 800831a:	75fb      	strb	r3, [r7, #23]
            break;
 800831c:	e006      	b.n	800832c <RadioIsChannelFree+0xa6>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 800831e:	6938      	ldr	r0, [r7, #16]
 8008320:	f003 fb7e 	bl	800ba20 <UTIL_TIMER_GetElapsedTime>
 8008324:	4602      	mov	r2, r0
 8008326:	683b      	ldr	r3, [r7, #0]
 8008328:	4293      	cmp	r3, r2
 800832a:	d8ea      	bhi.n	8008302 <RadioIsChannelFree+0x7c>
        }
    }
    RadioStandby( );
 800832c:	f000 fda5 	bl	8008e7a <RadioStandby>

    return status;
 8008330:	7dfb      	ldrb	r3, [r7, #23]
}
 8008332:	4618      	mov	r0, r3
 8008334:	3718      	adds	r7, #24
 8008336:	46bd      	mov	sp, r7
 8008338:	bd80      	pop	{r7, pc}

0800833a <RadioRandom>:

static uint32_t RadioRandom( void )
{
 800833a:	b580      	push	{r7, lr}
 800833c:	b082      	sub	sp, #8
 800833e:	af00      	add	r7, sp, #0
    uint32_t rnd = 0;
 8008340:	2300      	movs	r3, #0
 8008342:	607b      	str	r3, [r7, #4]

    /*
     * Radio setup for random number generation
     */
    // Disable modem interrupts
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8008344:	2300      	movs	r3, #0
 8008346:	2200      	movs	r2, #0
 8008348:	2100      	movs	r1, #0
 800834a:	2000      	movs	r0, #0
 800834c:	f002 f9c4 	bl	800a6d8 <SUBGRF_SetDioIrqParams>

    rnd = SUBGRF_GetRandom();
 8008350:	f001 ff75 	bl	800a23e <SUBGRF_GetRandom>
 8008354:	6078      	str	r0, [r7, #4]

    return rnd;
 8008356:	687b      	ldr	r3, [r7, #4]
}
 8008358:	4618      	mov	r0, r3
 800835a:	3708      	adds	r7, #8
 800835c:	46bd      	mov	sp, r7
 800835e:	bd80      	pop	{r7, pc}

08008360 <RadioSetRxConfig>:
                              uint32_t bandwidthAfc, uint16_t preambleLen,
                              uint16_t symbTimeout, bool fixLen,
                              uint8_t payloadLen,
                              bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                              bool iqInverted, bool rxContinuous )
{
 8008360:	b580      	push	{r7, lr}
 8008362:	b08a      	sub	sp, #40	; 0x28
 8008364:	af00      	add	r7, sp, #0
 8008366:	60b9      	str	r1, [r7, #8]
 8008368:	607a      	str	r2, [r7, #4]
 800836a:	461a      	mov	r2, r3
 800836c:	4603      	mov	r3, r0
 800836e:	73fb      	strb	r3, [r7, #15]
 8008370:	4613      	mov	r3, r2
 8008372:	73bb      	strb	r3, [r7, #14]
#if (RADIO_SIGFOX_ENABLE == 1)
    uint8_t modReg;
#endif
    SubgRf.RxContinuous = rxContinuous;
 8008374:	4ab9      	ldr	r2, [pc, #740]	; (800865c <RadioSetRxConfig+0x2fc>)
 8008376:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800837a:	7053      	strb	r3, [r2, #1]
    RFW_DeInit();
 800837c:	f003 f843 	bl	800b406 <RFW_DeInit>
    if( rxContinuous == true )
 8008380:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8008384:	2b00      	cmp	r3, #0
 8008386:	d001      	beq.n	800838c <RadioSetRxConfig+0x2c>
    {
        symbTimeout = 0;
 8008388:	2300      	movs	r3, #0
 800838a:	873b      	strh	r3, [r7, #56]	; 0x38
    }
    if( fixLen == true )
 800838c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8008390:	2b00      	cmp	r3, #0
 8008392:	d004      	beq.n	800839e <RadioSetRxConfig+0x3e>
    {
        MaxPayloadLength = payloadLen;
 8008394:	4ab2      	ldr	r2, [pc, #712]	; (8008660 <RadioSetRxConfig+0x300>)
 8008396:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800839a:	7013      	strb	r3, [r2, #0]
 800839c:	e002      	b.n	80083a4 <RadioSetRxConfig+0x44>
    }
    else
    {
        MaxPayloadLength = 0xFF;
 800839e:	4bb0      	ldr	r3, [pc, #704]	; (8008660 <RadioSetRxConfig+0x300>)
 80083a0:	22ff      	movs	r2, #255	; 0xff
 80083a2:	701a      	strb	r2, [r3, #0]
    }

    switch( modem )
 80083a4:	7bfb      	ldrb	r3, [r7, #15]
 80083a6:	2b05      	cmp	r3, #5
 80083a8:	d009      	beq.n	80083be <RadioSetRxConfig+0x5e>
 80083aa:	2b05      	cmp	r3, #5
 80083ac:	f300 81d7 	bgt.w	800875e <RadioSetRxConfig+0x3fe>
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	f000 80bf 	beq.w	8008534 <RadioSetRxConfig+0x1d4>
 80083b6:	2b01      	cmp	r3, #1
 80083b8:	f000 8124 	beq.w	8008604 <RadioSetRxConfig+0x2a4>
            // Timeout Max, Timeout handled directly in SetRx function
            SubgRf.RxTimeout = 0xFFFF;

            break;
        default:
            break;
 80083bc:	e1cf      	b.n	800875e <RadioSetRxConfig+0x3fe>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 80083be:	2001      	movs	r0, #1
 80083c0:	f002 f882 	bl	800a4c8 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80083c4:	4ba5      	ldr	r3, [pc, #660]	; (800865c <RadioSetRxConfig+0x2fc>)
 80083c6:	2200      	movs	r2, #0
 80083c8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 80083cc:	4aa3      	ldr	r2, [pc, #652]	; (800865c <RadioSetRxConfig+0x2fc>)
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 80083d2:	4ba2      	ldr	r3, [pc, #648]	; (800865c <RadioSetRxConfig+0x2fc>)
 80083d4:	2209      	movs	r2, #9
 80083d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 80083da:	4ba0      	ldr	r3, [pc, #640]	; (800865c <RadioSetRxConfig+0x2fc>)
 80083dc:	f44f 7248 	mov.w	r2, #800	; 0x320
 80083e0:	641a      	str	r2, [r3, #64]	; 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 80083e2:	68b8      	ldr	r0, [r7, #8]
 80083e4:	f002 ff42 	bl	800b26c <SUBGRF_GetFskBandwidthRegValue>
 80083e8:	4603      	mov	r3, r0
 80083ea:	461a      	mov	r2, r3
 80083ec:	4b9b      	ldr	r3, [pc, #620]	; (800865c <RadioSetRxConfig+0x2fc>)
 80083ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80083f2:	4b9a      	ldr	r3, [pc, #616]	; (800865c <RadioSetRxConfig+0x2fc>)
 80083f4:	2200      	movs	r2, #0
 80083f6:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 80083f8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80083fa:	00db      	lsls	r3, r3, #3
 80083fc:	b29a      	uxth	r2, r3
 80083fe:	4b97      	ldr	r3, [pc, #604]	; (800865c <RadioSetRxConfig+0x2fc>)
 8008400:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 8008402:	4b96      	ldr	r3, [pc, #600]	; (800865c <RadioSetRxConfig+0x2fc>)
 8008404:	2200      	movs	r2, #0
 8008406:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 8008408:	4b94      	ldr	r3, [pc, #592]	; (800865c <RadioSetRxConfig+0x2fc>)
 800840a:	2210      	movs	r2, #16
 800840c:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 800840e:	4b93      	ldr	r3, [pc, #588]	; (800865c <RadioSetRxConfig+0x2fc>)
 8008410:	2200      	movs	r2, #0
 8008412:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 8008414:	4b91      	ldr	r3, [pc, #580]	; (800865c <RadioSetRxConfig+0x2fc>)
 8008416:	2200      	movs	r2, #0
 8008418:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 800841a:	4b91      	ldr	r3, [pc, #580]	; (8008660 <RadioSetRxConfig+0x300>)
 800841c:	781a      	ldrb	r2, [r3, #0]
 800841e:	4b8f      	ldr	r3, [pc, #572]	; (800865c <RadioSetRxConfig+0x2fc>)
 8008420:	759a      	strb	r2, [r3, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8008422:	4b8e      	ldr	r3, [pc, #568]	; (800865c <RadioSetRxConfig+0x2fc>)
 8008424:	2201      	movs	r2, #1
 8008426:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 8008428:	4b8c      	ldr	r3, [pc, #560]	; (800865c <RadioSetRxConfig+0x2fc>)
 800842a:	2200      	movs	r2, #0
 800842c:	761a      	strb	r2, [r3, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 800842e:	2005      	movs	r0, #5
 8008430:	f7ff fec2 	bl	80081b8 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8008434:	488b      	ldr	r0, [pc, #556]	; (8008664 <RadioSetRxConfig+0x304>)
 8008436:	f002 fae5 	bl	800aa04 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800843a:	488b      	ldr	r0, [pc, #556]	; (8008668 <RadioSetRxConfig+0x308>)
 800843c:	f002 fbb4 	bl	800aba8 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8008440:	4a8a      	ldr	r2, [pc, #552]	; (800866c <RadioSetRxConfig+0x30c>)
 8008442:	f107 031c 	add.w	r3, r7, #28
 8008446:	e892 0003 	ldmia.w	r2, {r0, r1}
 800844a:	e883 0003 	stmia.w	r3, {r0, r1}
 800844e:	f107 031c 	add.w	r3, r7, #28
 8008452:	4618      	mov	r0, r3
 8008454:	f001 fe71 	bl	800a13a <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8008458:	f240 10ff 	movw	r0, #511	; 0x1ff
 800845c:	f001 febc 	bl	800a1d8 <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(SUBGHZ_AGCGFORSTCFGR);
 8008460:	f640 00b8 	movw	r0, #2232	; 0x8b8
 8008464:	f000 fe1d 	bl	80090a2 <RadioRead>
 8008468:	4603      	mov	r3, r0
 800846a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=RADIO_BIT_MASK(4);
 800846e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008472:	f023 0310 	bic.w	r3, r3, #16
 8008476:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_AGCGFORSTCFGR, modReg);
 800847a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800847e:	4619      	mov	r1, r3
 8008480:	f640 00b8 	movw	r0, #2232	; 0x8b8
 8008484:	f000 fdfb 	bl	800907e <RadioWrite>
            RadioWrite(SUBGHZ_AGCGFORSTPOWTHR, 0x4 );
 8008488:	2104      	movs	r1, #4
 800848a:	f640 00b9 	movw	r0, #2233	; 0x8b9
 800848e:	f000 fdf6 	bl	800907e <RadioWrite>
            modReg= RadioRead(SUBGHZ_AGCRSSICTL0R);
 8008492:	f640 009b 	movw	r0, #2203	; 0x89b
 8008496:	f000 fe04 	bl	80090a2 <RadioRead>
 800849a:	4603      	mov	r3, r0
 800849c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 80084a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80084a4:	f023 031c 	bic.w	r3, r3, #28
 80084a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_AGCRSSICTL0R, (modReg| (0x1<<3) ) );
 80084ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80084b0:	f043 0308 	orr.w	r3, r3, #8
 80084b4:	b2db      	uxtb	r3, r3
 80084b6:	4619      	mov	r1, r3
 80084b8:	f640 009b 	movw	r0, #2203	; 0x89b
 80084bc:	f000 fddf 	bl	800907e <RadioWrite>
            modReg= RadioRead(SUBGHZ_GAFCR);
 80084c0:	f240 60d1 	movw	r0, #1745	; 0x6d1
 80084c4:	f000 fded 	bl	80090a2 <RadioRead>
 80084c8:	4603      	mov	r3, r0
 80084ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 80084ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80084d2:	f023 0318 	bic.w	r3, r3, #24
 80084d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_GAFCR, (modReg| (0x3<<3) ));
 80084da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80084de:	f043 0318 	orr.w	r3, r3, #24
 80084e2:	b2db      	uxtb	r3, r3
 80084e4:	4619      	mov	r1, r3
 80084e6:	f240 60d1 	movw	r0, #1745	; 0x6d1
 80084ea:	f000 fdc8 	bl	800907e <RadioWrite>
            modReg= RadioRead(SUBGHZ_GBSYNCR);
 80084ee:	f240 60ac 	movw	r0, #1708	; 0x6ac
 80084f2:	f000 fdd6 	bl	80090a2 <RadioRead>
 80084f6:	4603      	mov	r3, r0
 80084f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 80084fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008500:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008504:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_GBSYNCR, (modReg| (0x5<<4) ));
 8008508:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800850c:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8008510:	b2db      	uxtb	r3, r3
 8008512:	4619      	mov	r1, r3
 8008514:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8008518:	f000 fdb1 	bl	800907e <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 800851c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800851e:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8008522:	fb02 f303 	mul.w	r3, r2, r3
 8008526:	461a      	mov	r2, r3
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	fbb2 f3f3 	udiv	r3, r2, r3
 800852e:	4a4b      	ldr	r2, [pc, #300]	; (800865c <RadioSetRxConfig+0x2fc>)
 8008530:	6093      	str	r3, [r2, #8]
            break;
 8008532:	e115      	b.n	8008760 <RadioSetRxConfig+0x400>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8008534:	2000      	movs	r0, #0
 8008536:	f001 ffc7 	bl	800a4c8 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800853a:	4b48      	ldr	r3, [pc, #288]	; (800865c <RadioSetRxConfig+0x2fc>)
 800853c:	2200      	movs	r2, #0
 800853e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8008542:	4a46      	ldr	r2, [pc, #280]	; (800865c <RadioSetRxConfig+0x2fc>)
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8008548:	4b44      	ldr	r3, [pc, #272]	; (800865c <RadioSetRxConfig+0x2fc>)
 800854a:	220b      	movs	r2, #11
 800854c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8008550:	68b8      	ldr	r0, [r7, #8]
 8008552:	f002 fe8b 	bl	800b26c <SUBGRF_GetFskBandwidthRegValue>
 8008556:	4603      	mov	r3, r0
 8008558:	461a      	mov	r2, r3
 800855a:	4b40      	ldr	r3, [pc, #256]	; (800865c <RadioSetRxConfig+0x2fc>)
 800855c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8008560:	4b3e      	ldr	r3, [pc, #248]	; (800865c <RadioSetRxConfig+0x2fc>)
 8008562:	2200      	movs	r2, #0
 8008564:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8008566:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8008568:	00db      	lsls	r3, r3, #3
 800856a:	b29a      	uxth	r2, r3
 800856c:	4b3b      	ldr	r3, [pc, #236]	; (800865c <RadioSetRxConfig+0x2fc>)
 800856e:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8008570:	4b3a      	ldr	r3, [pc, #232]	; (800865c <RadioSetRxConfig+0x2fc>)
 8008572:	2204      	movs	r2, #4
 8008574:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 8008576:	4b39      	ldr	r3, [pc, #228]	; (800865c <RadioSetRxConfig+0x2fc>)
 8008578:	2218      	movs	r2, #24
 800857a:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 800857c:	4b37      	ldr	r3, [pc, #220]	; (800865c <RadioSetRxConfig+0x2fc>)
 800857e:	2200      	movs	r2, #0
 8008580:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8008582:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8008586:	f083 0301 	eor.w	r3, r3, #1
 800858a:	b2db      	uxtb	r3, r3
 800858c:	461a      	mov	r2, r3
 800858e:	4b33      	ldr	r3, [pc, #204]	; (800865c <RadioSetRxConfig+0x2fc>)
 8008590:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8008592:	4b33      	ldr	r3, [pc, #204]	; (8008660 <RadioSetRxConfig+0x300>)
 8008594:	781a      	ldrb	r2, [r3, #0]
 8008596:	4b31      	ldr	r3, [pc, #196]	; (800865c <RadioSetRxConfig+0x2fc>)
 8008598:	759a      	strb	r2, [r3, #22]
            if( crcOn == true )
 800859a:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d003      	beq.n	80085aa <RadioSetRxConfig+0x24a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 80085a2:	4b2e      	ldr	r3, [pc, #184]	; (800865c <RadioSetRxConfig+0x2fc>)
 80085a4:	22f2      	movs	r2, #242	; 0xf2
 80085a6:	75da      	strb	r2, [r3, #23]
 80085a8:	e002      	b.n	80085b0 <RadioSetRxConfig+0x250>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 80085aa:	4b2c      	ldr	r3, [pc, #176]	; (800865c <RadioSetRxConfig+0x2fc>)
 80085ac:	2201      	movs	r2, #1
 80085ae:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 80085b0:	4b2a      	ldr	r3, [pc, #168]	; (800865c <RadioSetRxConfig+0x2fc>)
 80085b2:	2201      	movs	r2, #1
 80085b4:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 80085b6:	f000 fc60 	bl	8008e7a <RadioStandby>
            RadioSetModem( MODEM_FSK );
 80085ba:	2000      	movs	r0, #0
 80085bc:	f7ff fdfc 	bl	80081b8 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80085c0:	4828      	ldr	r0, [pc, #160]	; (8008664 <RadioSetRxConfig+0x304>)
 80085c2:	f002 fa1f 	bl	800aa04 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80085c6:	4828      	ldr	r0, [pc, #160]	; (8008668 <RadioSetRxConfig+0x308>)
 80085c8:	f002 faee 	bl	800aba8 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 80085cc:	4a28      	ldr	r2, [pc, #160]	; (8008670 <RadioSetRxConfig+0x310>)
 80085ce:	f107 0314 	add.w	r3, r7, #20
 80085d2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80085d6:	e883 0003 	stmia.w	r3, {r0, r1}
 80085da:	f107 0314 	add.w	r3, r7, #20
 80085de:	4618      	mov	r0, r3
 80085e0:	f001 fdab 	bl	800a13a <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 80085e4:	f240 10ff 	movw	r0, #511	; 0x1ff
 80085e8:	f001 fdf6 	bl	800a1d8 <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 80085ec:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80085ee:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80085f2:	fb02 f303 	mul.w	r3, r2, r3
 80085f6:	461a      	mov	r2, r3
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80085fe:	4a17      	ldr	r2, [pc, #92]	; (800865c <RadioSetRxConfig+0x2fc>)
 8008600:	6093      	str	r3, [r2, #8]
            break;
 8008602:	e0ad      	b.n	8008760 <RadioSetRxConfig+0x400>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8008604:	2000      	movs	r0, #0
 8008606:	f001 ff5f 	bl	800a4c8 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800860a:	4b14      	ldr	r3, [pc, #80]	; (800865c <RadioSetRxConfig+0x2fc>)
 800860c:	2201      	movs	r2, #1
 800860e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	b2da      	uxtb	r2, r3
 8008616:	4b11      	ldr	r3, [pc, #68]	; (800865c <RadioSetRxConfig+0x2fc>)
 8008618:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 800861c:	4a15      	ldr	r2, [pc, #84]	; (8008674 <RadioSetRxConfig+0x314>)
 800861e:	68bb      	ldr	r3, [r7, #8]
 8008620:	4413      	add	r3, r2
 8008622:	781a      	ldrb	r2, [r3, #0]
 8008624:	4b0d      	ldr	r3, [pc, #52]	; (800865c <RadioSetRxConfig+0x2fc>)
 8008626:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 800862a:	4a0c      	ldr	r2, [pc, #48]	; (800865c <RadioSetRxConfig+0x2fc>)
 800862c:	7bbb      	ldrb	r3, [r7, #14]
 800862e:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8008632:	68bb      	ldr	r3, [r7, #8]
 8008634:	2b00      	cmp	r3, #0
 8008636:	d105      	bne.n	8008644 <RadioSetRxConfig+0x2e4>
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	2b0b      	cmp	r3, #11
 800863c:	d008      	beq.n	8008650 <RadioSetRxConfig+0x2f0>
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	2b0c      	cmp	r3, #12
 8008642:	d005      	beq.n	8008650 <RadioSetRxConfig+0x2f0>
 8008644:	68bb      	ldr	r3, [r7, #8]
 8008646:	2b01      	cmp	r3, #1
 8008648:	d116      	bne.n	8008678 <RadioSetRxConfig+0x318>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	2b0c      	cmp	r3, #12
 800864e:	d113      	bne.n	8008678 <RadioSetRxConfig+0x318>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8008650:	4b02      	ldr	r3, [pc, #8]	; (800865c <RadioSetRxConfig+0x2fc>)
 8008652:	2201      	movs	r2, #1
 8008654:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8008658:	e012      	b.n	8008680 <RadioSetRxConfig+0x320>
 800865a:	bf00      	nop
 800865c:	20000a64 	.word	0x20000a64
 8008660:	20000015 	.word	0x20000015
 8008664:	20000a9c 	.word	0x20000a9c
 8008668:	20000a72 	.word	0x20000a72
 800866c:	0800ce14 	.word	0x0800ce14
 8008670:	0800ce1c 	.word	0x0800ce1c
 8008674:	0800cfb8 	.word	0x0800cfb8
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8008678:	4b3b      	ldr	r3, [pc, #236]	; (8008768 <RadioSetRxConfig+0x408>)
 800867a:	2200      	movs	r2, #0
 800867c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8008680:	4b39      	ldr	r3, [pc, #228]	; (8008768 <RadioSetRxConfig+0x408>)
 8008682:	2201      	movs	r2, #1
 8008684:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8008686:	4b38      	ldr	r3, [pc, #224]	; (8008768 <RadioSetRxConfig+0x408>)
 8008688:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800868c:	2b05      	cmp	r3, #5
 800868e:	d004      	beq.n	800869a <RadioSetRxConfig+0x33a>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 8008690:	4b35      	ldr	r3, [pc, #212]	; (8008768 <RadioSetRxConfig+0x408>)
 8008692:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8008696:	2b06      	cmp	r3, #6
 8008698:	d10a      	bne.n	80086b0 <RadioSetRxConfig+0x350>
                if( preambleLen < 12 )
 800869a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800869c:	2b0b      	cmp	r3, #11
 800869e:	d803      	bhi.n	80086a8 <RadioSetRxConfig+0x348>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 80086a0:	4b31      	ldr	r3, [pc, #196]	; (8008768 <RadioSetRxConfig+0x408>)
 80086a2:	220c      	movs	r2, #12
 80086a4:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 80086a6:	e006      	b.n	80086b6 <RadioSetRxConfig+0x356>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 80086a8:	4a2f      	ldr	r2, [pc, #188]	; (8008768 <RadioSetRxConfig+0x408>)
 80086aa:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80086ac:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 80086ae:	e002      	b.n	80086b6 <RadioSetRxConfig+0x356>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 80086b0:	4a2d      	ldr	r2, [pc, #180]	; (8008768 <RadioSetRxConfig+0x408>)
 80086b2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80086b4:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 80086b6:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 80086ba:	4b2b      	ldr	r3, [pc, #172]	; (8008768 <RadioSetRxConfig+0x408>)
 80086bc:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 80086be:	4b2b      	ldr	r3, [pc, #172]	; (800876c <RadioSetRxConfig+0x40c>)
 80086c0:	781a      	ldrb	r2, [r3, #0]
 80086c2:	4b29      	ldr	r3, [pc, #164]	; (8008768 <RadioSetRxConfig+0x408>)
 80086c4:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 80086c6:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 80086ca:	4b27      	ldr	r3, [pc, #156]	; (8008768 <RadioSetRxConfig+0x408>)
 80086cc:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 80086d0:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 80086d4:	4b24      	ldr	r3, [pc, #144]	; (8008768 <RadioSetRxConfig+0x408>)
 80086d6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 80086da:	f000 fbce 	bl	8008e7a <RadioStandby>
            RadioSetModem( MODEM_LORA );
 80086de:	2001      	movs	r0, #1
 80086e0:	f7ff fd6a 	bl	80081b8 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80086e4:	4822      	ldr	r0, [pc, #136]	; (8008770 <RadioSetRxConfig+0x410>)
 80086e6:	f002 f98d 	bl	800aa04 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80086ea:	4822      	ldr	r0, [pc, #136]	; (8008774 <RadioSetRxConfig+0x414>)
 80086ec:	f002 fa5c 	bl	800aba8 <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 80086f0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80086f2:	b2db      	uxtb	r3, r3
 80086f4:	4618      	mov	r0, r3
 80086f6:	f001 fef6 	bl	800a4e6 <SUBGRF_SetLoRaSymbNumTimeout>
            SUBGRF_WriteRegister(SUBGHZ_AGCCFG,SUBGRF_ReadRegister(SUBGHZ_AGCCFG)&0x1);
 80086fa:	f640 00a3 	movw	r0, #2211	; 0x8a3
 80086fe:	f002 fbaf 	bl	800ae60 <SUBGRF_ReadRegister>
 8008702:	4603      	mov	r3, r0
 8008704:	f003 0301 	and.w	r3, r3, #1
 8008708:	b2db      	uxtb	r3, r3
 800870a:	4619      	mov	r1, r3
 800870c:	f640 00a3 	movw	r0, #2211	; 0x8a3
 8008710:	f002 fb92 	bl	800ae38 <SUBGRF_WriteRegister>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8008714:	4b14      	ldr	r3, [pc, #80]	; (8008768 <RadioSetRxConfig+0x408>)
 8008716:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800871a:	2b01      	cmp	r3, #1
 800871c:	d10d      	bne.n	800873a <RadioSetRxConfig+0x3da>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 800871e:	f240 7036 	movw	r0, #1846	; 0x736
 8008722:	f002 fb9d 	bl	800ae60 <SUBGRF_ReadRegister>
 8008726:	4603      	mov	r3, r0
 8008728:	f023 0304 	bic.w	r3, r3, #4
 800872c:	b2db      	uxtb	r3, r3
 800872e:	4619      	mov	r1, r3
 8008730:	f240 7036 	movw	r0, #1846	; 0x736
 8008734:	f002 fb80 	bl	800ae38 <SUBGRF_WriteRegister>
 8008738:	e00c      	b.n	8008754 <RadioSetRxConfig+0x3f4>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 800873a:	f240 7036 	movw	r0, #1846	; 0x736
 800873e:	f002 fb8f 	bl	800ae60 <SUBGRF_ReadRegister>
 8008742:	4603      	mov	r3, r0
 8008744:	f043 0304 	orr.w	r3, r3, #4
 8008748:	b2db      	uxtb	r3, r3
 800874a:	4619      	mov	r1, r3
 800874c:	f240 7036 	movw	r0, #1846	; 0x736
 8008750:	f002 fb72 	bl	800ae38 <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 8008754:	4b04      	ldr	r3, [pc, #16]	; (8008768 <RadioSetRxConfig+0x408>)
 8008756:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800875a:	609a      	str	r2, [r3, #8]
            break;
 800875c:	e000      	b.n	8008760 <RadioSetRxConfig+0x400>
            break;
 800875e:	bf00      	nop
    }
}
 8008760:	bf00      	nop
 8008762:	3728      	adds	r7, #40	; 0x28
 8008764:	46bd      	mov	sp, r7
 8008766:	bd80      	pop	{r7, pc}
 8008768:	20000a64 	.word	0x20000a64
 800876c:	20000015 	.word	0x20000015
 8008770:	20000a9c 	.word	0x20000a9c
 8008774:	20000a72 	.word	0x20000a72

08008778 <RadioSetTxConfig>:
static void RadioSetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                              uint32_t bandwidth, uint32_t datarate,
                              uint8_t coderate, uint16_t preambleLen,
                              bool fixLen, bool crcOn, bool freqHopOn,
                              uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 8008778:	b580      	push	{r7, lr}
 800877a:	b086      	sub	sp, #24
 800877c:	af00      	add	r7, sp, #0
 800877e:	60ba      	str	r2, [r7, #8]
 8008780:	607b      	str	r3, [r7, #4]
 8008782:	4603      	mov	r3, r0
 8008784:	73fb      	strb	r3, [r7, #15]
 8008786:	460b      	mov	r3, r1
 8008788:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    RFW_DeInit();
 800878a:	f002 fe3c 	bl	800b406 <RFW_DeInit>
    switch( modem )
 800878e:	7bfb      	ldrb	r3, [r7, #15]
 8008790:	2b04      	cmp	r3, #4
 8008792:	f000 80c7 	beq.w	8008924 <RadioSetTxConfig+0x1ac>
 8008796:	2b04      	cmp	r3, #4
 8008798:	f300 80d6 	bgt.w	8008948 <RadioSetTxConfig+0x1d0>
 800879c:	2b00      	cmp	r3, #0
 800879e:	d002      	beq.n	80087a6 <RadioSetTxConfig+0x2e>
 80087a0:	2b01      	cmp	r3, #1
 80087a2:	d059      	beq.n	8008858 <RadioSetTxConfig+0xe0>
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
            break;
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 80087a4:	e0d0      	b.n	8008948 <RadioSetTxConfig+0x1d0>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80087a6:	4b77      	ldr	r3, [pc, #476]	; (8008984 <RadioSetTxConfig+0x20c>)
 80087a8:	2200      	movs	r2, #0
 80087aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 80087ae:	4a75      	ldr	r2, [pc, #468]	; (8008984 <RadioSetTxConfig+0x20c>)
 80087b0:	6a3b      	ldr	r3, [r7, #32]
 80087b2:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 80087b4:	4b73      	ldr	r3, [pc, #460]	; (8008984 <RadioSetTxConfig+0x20c>)
 80087b6:	220b      	movs	r2, #11
 80087b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 80087bc:	6878      	ldr	r0, [r7, #4]
 80087be:	f002 fd55 	bl	800b26c <SUBGRF_GetFskBandwidthRegValue>
 80087c2:	4603      	mov	r3, r0
 80087c4:	461a      	mov	r2, r3
 80087c6:	4b6f      	ldr	r3, [pc, #444]	; (8008984 <RadioSetTxConfig+0x20c>)
 80087c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 80087cc:	4a6d      	ldr	r2, [pc, #436]	; (8008984 <RadioSetTxConfig+0x20c>)
 80087ce:	68bb      	ldr	r3, [r7, #8]
 80087d0:	6413      	str	r3, [r2, #64]	; 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80087d2:	4b6c      	ldr	r3, [pc, #432]	; (8008984 <RadioSetTxConfig+0x20c>)
 80087d4:	2200      	movs	r2, #0
 80087d6:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 80087d8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80087da:	00db      	lsls	r3, r3, #3
 80087dc:	b29a      	uxth	r2, r3
 80087de:	4b69      	ldr	r3, [pc, #420]	; (8008984 <RadioSetTxConfig+0x20c>)
 80087e0:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 80087e2:	4b68      	ldr	r3, [pc, #416]	; (8008984 <RadioSetTxConfig+0x20c>)
 80087e4:	2204      	movs	r2, #4
 80087e6:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 80087e8:	4b66      	ldr	r3, [pc, #408]	; (8008984 <RadioSetTxConfig+0x20c>)
 80087ea:	2218      	movs	r2, #24
 80087ec:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 80087ee:	4b65      	ldr	r3, [pc, #404]	; (8008984 <RadioSetTxConfig+0x20c>)
 80087f0:	2200      	movs	r2, #0
 80087f2:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 80087f4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80087f8:	f083 0301 	eor.w	r3, r3, #1
 80087fc:	b2db      	uxtb	r3, r3
 80087fe:	461a      	mov	r2, r3
 8008800:	4b60      	ldr	r3, [pc, #384]	; (8008984 <RadioSetTxConfig+0x20c>)
 8008802:	755a      	strb	r2, [r3, #21]
            if( crcOn == true )
 8008804:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8008808:	2b00      	cmp	r3, #0
 800880a:	d003      	beq.n	8008814 <RadioSetTxConfig+0x9c>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 800880c:	4b5d      	ldr	r3, [pc, #372]	; (8008984 <RadioSetTxConfig+0x20c>)
 800880e:	22f2      	movs	r2, #242	; 0xf2
 8008810:	75da      	strb	r2, [r3, #23]
 8008812:	e002      	b.n	800881a <RadioSetTxConfig+0xa2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8008814:	4b5b      	ldr	r3, [pc, #364]	; (8008984 <RadioSetTxConfig+0x20c>)
 8008816:	2201      	movs	r2, #1
 8008818:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 800881a:	4b5a      	ldr	r3, [pc, #360]	; (8008984 <RadioSetTxConfig+0x20c>)
 800881c:	2201      	movs	r2, #1
 800881e:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 8008820:	f000 fb2b 	bl	8008e7a <RadioStandby>
            RadioSetModem(  MODEM_FSK  );
 8008824:	2000      	movs	r0, #0
 8008826:	f7ff fcc7 	bl	80081b8 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800882a:	4857      	ldr	r0, [pc, #348]	; (8008988 <RadioSetTxConfig+0x210>)
 800882c:	f002 f8ea 	bl	800aa04 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008830:	4856      	ldr	r0, [pc, #344]	; (800898c <RadioSetTxConfig+0x214>)
 8008832:	f002 f9b9 	bl	800aba8 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8008836:	4a56      	ldr	r2, [pc, #344]	; (8008990 <RadioSetTxConfig+0x218>)
 8008838:	f107 0310 	add.w	r3, r7, #16
 800883c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008840:	e883 0003 	stmia.w	r3, {r0, r1}
 8008844:	f107 0310 	add.w	r3, r7, #16
 8008848:	4618      	mov	r0, r3
 800884a:	f001 fc76 	bl	800a13a <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 800884e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8008852:	f001 fcc1 	bl	800a1d8 <SUBGRF_SetWhiteningSeed>
            break;
 8008856:	e078      	b.n	800894a <RadioSetTxConfig+0x1d2>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8008858:	4b4a      	ldr	r3, [pc, #296]	; (8008984 <RadioSetTxConfig+0x20c>)
 800885a:	2201      	movs	r2, #1
 800885c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 8008860:	6a3b      	ldr	r3, [r7, #32]
 8008862:	b2da      	uxtb	r2, r3
 8008864:	4b47      	ldr	r3, [pc, #284]	; (8008984 <RadioSetTxConfig+0x20c>)
 8008866:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 800886a:	4a4a      	ldr	r2, [pc, #296]	; (8008994 <RadioSetTxConfig+0x21c>)
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	4413      	add	r3, r2
 8008870:	781a      	ldrb	r2, [r3, #0]
 8008872:	4b44      	ldr	r3, [pc, #272]	; (8008984 <RadioSetTxConfig+0x20c>)
 8008874:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 8008878:	4a42      	ldr	r2, [pc, #264]	; (8008984 <RadioSetTxConfig+0x20c>)
 800887a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800887e:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	2b00      	cmp	r3, #0
 8008886:	d105      	bne.n	8008894 <RadioSetTxConfig+0x11c>
 8008888:	6a3b      	ldr	r3, [r7, #32]
 800888a:	2b0b      	cmp	r3, #11
 800888c:	d008      	beq.n	80088a0 <RadioSetTxConfig+0x128>
 800888e:	6a3b      	ldr	r3, [r7, #32]
 8008890:	2b0c      	cmp	r3, #12
 8008892:	d005      	beq.n	80088a0 <RadioSetTxConfig+0x128>
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	2b01      	cmp	r3, #1
 8008898:	d107      	bne.n	80088aa <RadioSetTxConfig+0x132>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 800889a:	6a3b      	ldr	r3, [r7, #32]
 800889c:	2b0c      	cmp	r3, #12
 800889e:	d104      	bne.n	80088aa <RadioSetTxConfig+0x132>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 80088a0:	4b38      	ldr	r3, [pc, #224]	; (8008984 <RadioSetTxConfig+0x20c>)
 80088a2:	2201      	movs	r2, #1
 80088a4:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 80088a8:	e003      	b.n	80088b2 <RadioSetTxConfig+0x13a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 80088aa:	4b36      	ldr	r3, [pc, #216]	; (8008984 <RadioSetTxConfig+0x20c>)
 80088ac:	2200      	movs	r2, #0
 80088ae:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 80088b2:	4b34      	ldr	r3, [pc, #208]	; (8008984 <RadioSetTxConfig+0x20c>)
 80088b4:	2201      	movs	r2, #1
 80088b6:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 80088b8:	4b32      	ldr	r3, [pc, #200]	; (8008984 <RadioSetTxConfig+0x20c>)
 80088ba:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80088be:	2b05      	cmp	r3, #5
 80088c0:	d004      	beq.n	80088cc <RadioSetTxConfig+0x154>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 80088c2:	4b30      	ldr	r3, [pc, #192]	; (8008984 <RadioSetTxConfig+0x20c>)
 80088c4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 80088c8:	2b06      	cmp	r3, #6
 80088ca:	d10a      	bne.n	80088e2 <RadioSetTxConfig+0x16a>
                if( preambleLen < 12 )
 80088cc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80088ce:	2b0b      	cmp	r3, #11
 80088d0:	d803      	bhi.n	80088da <RadioSetTxConfig+0x162>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 80088d2:	4b2c      	ldr	r3, [pc, #176]	; (8008984 <RadioSetTxConfig+0x20c>)
 80088d4:	220c      	movs	r2, #12
 80088d6:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 80088d8:	e006      	b.n	80088e8 <RadioSetTxConfig+0x170>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 80088da:	4a2a      	ldr	r2, [pc, #168]	; (8008984 <RadioSetTxConfig+0x20c>)
 80088dc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80088de:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 80088e0:	e002      	b.n	80088e8 <RadioSetTxConfig+0x170>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 80088e2:	4a28      	ldr	r2, [pc, #160]	; (8008984 <RadioSetTxConfig+0x20c>)
 80088e4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80088e6:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 80088e8:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80088ec:	4b25      	ldr	r3, [pc, #148]	; (8008984 <RadioSetTxConfig+0x20c>)
 80088ee:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 80088f0:	4b29      	ldr	r3, [pc, #164]	; (8008998 <RadioSetTxConfig+0x220>)
 80088f2:	781a      	ldrb	r2, [r3, #0]
 80088f4:	4b23      	ldr	r3, [pc, #140]	; (8008984 <RadioSetTxConfig+0x20c>)
 80088f6:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 80088f8:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80088fc:	4b21      	ldr	r3, [pc, #132]	; (8008984 <RadioSetTxConfig+0x20c>)
 80088fe:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8008902:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8008906:	4b1f      	ldr	r3, [pc, #124]	; (8008984 <RadioSetTxConfig+0x20c>)
 8008908:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 800890c:	f000 fab5 	bl	8008e7a <RadioStandby>
            RadioSetModem( MODEM_LORA );
 8008910:	2001      	movs	r0, #1
 8008912:	f7ff fc51 	bl	80081b8 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8008916:	481c      	ldr	r0, [pc, #112]	; (8008988 <RadioSetTxConfig+0x210>)
 8008918:	f002 f874 	bl	800aa04 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800891c:	481b      	ldr	r0, [pc, #108]	; (800898c <RadioSetTxConfig+0x214>)
 800891e:	f002 f943 	bl	800aba8 <SUBGRF_SetPacketParams>
            break;
 8008922:	e012      	b.n	800894a <RadioSetTxConfig+0x1d2>
            RadioSetModem(MODEM_SIGFOX_TX);
 8008924:	2004      	movs	r0, #4
 8008926:	f7ff fc47 	bl	80081b8 <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 800892a:	4b16      	ldr	r3, [pc, #88]	; (8008984 <RadioSetTxConfig+0x20c>)
 800892c:	2202      	movs	r2, #2
 800892e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 8008932:	4a14      	ldr	r2, [pc, #80]	; (8008984 <RadioSetTxConfig+0x20c>)
 8008934:	6a3b      	ldr	r3, [r7, #32]
 8008936:	6493      	str	r3, [r2, #72]	; 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 8008938:	4b12      	ldr	r3, [pc, #72]	; (8008984 <RadioSetTxConfig+0x20c>)
 800893a:	2216      	movs	r2, #22
 800893c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8008940:	4811      	ldr	r0, [pc, #68]	; (8008988 <RadioSetTxConfig+0x210>)
 8008942:	f002 f85f 	bl	800aa04 <SUBGRF_SetModulationParams>
            break;
 8008946:	e000      	b.n	800894a <RadioSetTxConfig+0x1d2>
            break;
 8008948:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 800894a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800894e:	4618      	mov	r0, r3
 8008950:	f002 fb8e 	bl	800b070 <SUBGRF_SetRfTxPower>
 8008954:	4603      	mov	r3, r0
 8008956:	461a      	mov	r2, r3
 8008958:	4b0a      	ldr	r3, [pc, #40]	; (8008984 <RadioSetTxConfig+0x20c>)
 800895a:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 800895e:	210e      	movs	r1, #14
 8008960:	f640 101f 	movw	r0, #2335	; 0x91f
 8008964:	f002 fa68 	bl	800ae38 <SUBGRF_WriteRegister>
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 8008968:	4b06      	ldr	r3, [pc, #24]	; (8008984 <RadioSetTxConfig+0x20c>)
 800896a:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800896e:	4618      	mov	r0, r3
 8008970:	f002 fd5d 	bl	800b42e <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 8008974:	4a03      	ldr	r2, [pc, #12]	; (8008984 <RadioSetTxConfig+0x20c>)
 8008976:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008978:	6053      	str	r3, [r2, #4]
}
 800897a:	bf00      	nop
 800897c:	3718      	adds	r7, #24
 800897e:	46bd      	mov	sp, r7
 8008980:	bd80      	pop	{r7, pc}
 8008982:	bf00      	nop
 8008984:	20000a64 	.word	0x20000a64
 8008988:	20000a9c 	.word	0x20000a9c
 800898c:	20000a72 	.word	0x20000a72
 8008990:	0800ce1c 	.word	0x0800ce1c
 8008994:	0800cfb8 	.word	0x0800cfb8
 8008998:	20000015 	.word	0x20000015

0800899c <RadioCheckRfFrequency>:

static bool RadioCheckRfFrequency( uint32_t frequency )
{
 800899c:	b480      	push	{r7}
 800899e:	b083      	sub	sp, #12
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	6078      	str	r0, [r7, #4]
    return true;
 80089a4:	2301      	movs	r3, #1
}
 80089a6:	4618      	mov	r0, r3
 80089a8:	370c      	adds	r7, #12
 80089aa:	46bd      	mov	sp, r7
 80089ac:	bc80      	pop	{r7}
 80089ae:	4770      	bx	lr

080089b0 <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
 80089b0:	b480      	push	{r7}
 80089b2:	b085      	sub	sp, #20
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	4603      	mov	r3, r0
 80089b8:	71fb      	strb	r3, [r7, #7]
    uint32_t bandwidthInHz = 0;
 80089ba:	2300      	movs	r3, #0
 80089bc:	60fb      	str	r3, [r7, #12]

    switch( bw )
 80089be:	79fb      	ldrb	r3, [r7, #7]
 80089c0:	2b0a      	cmp	r3, #10
 80089c2:	d83e      	bhi.n	8008a42 <RadioGetLoRaBandwidthInHz+0x92>
 80089c4:	a201      	add	r2, pc, #4	; (adr r2, 80089cc <RadioGetLoRaBandwidthInHz+0x1c>)
 80089c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089ca:	bf00      	nop
 80089cc:	080089f9 	.word	0x080089f9
 80089d0:	08008a09 	.word	0x08008a09
 80089d4:	08008a19 	.word	0x08008a19
 80089d8:	08008a29 	.word	0x08008a29
 80089dc:	08008a31 	.word	0x08008a31
 80089e0:	08008a37 	.word	0x08008a37
 80089e4:	08008a3d 	.word	0x08008a3d
 80089e8:	08008a43 	.word	0x08008a43
 80089ec:	08008a01 	.word	0x08008a01
 80089f0:	08008a11 	.word	0x08008a11
 80089f4:	08008a21 	.word	0x08008a21
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
 80089f8:	f641 6384 	movw	r3, #7812	; 0x1e84
 80089fc:	60fb      	str	r3, [r7, #12]
        break;
 80089fe:	e020      	b.n	8008a42 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 8008a00:	f642 03b1 	movw	r3, #10417	; 0x28b1
 8008a04:	60fb      	str	r3, [r7, #12]
        break;
 8008a06:	e01c      	b.n	8008a42 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 8008a08:	f643 5309 	movw	r3, #15625	; 0x3d09
 8008a0c:	60fb      	str	r3, [r7, #12]
        break;
 8008a0e:	e018      	b.n	8008a42 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 8008a10:	f245 1361 	movw	r3, #20833	; 0x5161
 8008a14:	60fb      	str	r3, [r7, #12]
        break;
 8008a16:	e014      	b.n	8008a42 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 8008a18:	f647 2312 	movw	r3, #31250	; 0x7a12
 8008a1c:	60fb      	str	r3, [r7, #12]
        break;
 8008a1e:	e010      	b.n	8008a42 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 8008a20:	f24a 23c3 	movw	r3, #41667	; 0xa2c3
 8008a24:	60fb      	str	r3, [r7, #12]
        break;
 8008a26:	e00c      	b.n	8008a42 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 8008a28:	f24f 4324 	movw	r3, #62500	; 0xf424
 8008a2c:	60fb      	str	r3, [r7, #12]
        break;
 8008a2e:	e008      	b.n	8008a42 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 8008a30:	4b07      	ldr	r3, [pc, #28]	; (8008a50 <RadioGetLoRaBandwidthInHz+0xa0>)
 8008a32:	60fb      	str	r3, [r7, #12]
        break;
 8008a34:	e005      	b.n	8008a42 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 8008a36:	4b07      	ldr	r3, [pc, #28]	; (8008a54 <RadioGetLoRaBandwidthInHz+0xa4>)
 8008a38:	60fb      	str	r3, [r7, #12]
        break;
 8008a3a:	e002      	b.n	8008a42 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 8008a3c:	4b06      	ldr	r3, [pc, #24]	; (8008a58 <RadioGetLoRaBandwidthInHz+0xa8>)
 8008a3e:	60fb      	str	r3, [r7, #12]
        break;
 8008a40:	bf00      	nop
    }

    return bandwidthInHz;
 8008a42:	68fb      	ldr	r3, [r7, #12]
}
 8008a44:	4618      	mov	r0, r3
 8008a46:	3714      	adds	r7, #20
 8008a48:	46bd      	mov	sp, r7
 8008a4a:	bc80      	pop	{r7}
 8008a4c:	4770      	bx	lr
 8008a4e:	bf00      	nop
 8008a50:	0001e848 	.word	0x0001e848
 8008a54:	0003d090 	.word	0x0003d090
 8008a58:	0007a120 	.word	0x0007a120

08008a5c <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8008a5c:	b480      	push	{r7}
 8008a5e:	b083      	sub	sp, #12
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	6078      	str	r0, [r7, #4]
 8008a64:	4608      	mov	r0, r1
 8008a66:	4611      	mov	r1, r2
 8008a68:	461a      	mov	r2, r3
 8008a6a:	4603      	mov	r3, r0
 8008a6c:	70fb      	strb	r3, [r7, #3]
 8008a6e:	460b      	mov	r3, r1
 8008a70:	803b      	strh	r3, [r7, #0]
 8008a72:	4613      	mov	r3, r2
 8008a74:	70bb      	strb	r3, [r7, #2]
    return ( preambleLen << 3 ) +
 8008a76:	883b      	ldrh	r3, [r7, #0]
 8008a78:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8008a7a:	78ba      	ldrb	r2, [r7, #2]
 8008a7c:	f082 0201 	eor.w	r2, r2, #1
 8008a80:	b2d2      	uxtb	r2, r2
 8008a82:	2a00      	cmp	r2, #0
 8008a84:	d001      	beq.n	8008a8a <RadioGetGfskTimeOnAirNumerator+0x2e>
 8008a86:	2208      	movs	r2, #8
 8008a88:	e000      	b.n	8008a8c <RadioGetGfskTimeOnAirNumerator+0x30>
 8008a8a:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 8008a8c:	4413      	add	r3, r2
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8008a8e:	f103 0218 	add.w	r2, r3, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 8008a92:	7c3b      	ldrb	r3, [r7, #16]
 8008a94:	7d39      	ldrb	r1, [r7, #20]
 8008a96:	2900      	cmp	r1, #0
 8008a98:	d001      	beq.n	8008a9e <RadioGetGfskTimeOnAirNumerator+0x42>
 8008a9a:	2102      	movs	r1, #2
 8008a9c:	e000      	b.n	8008aa0 <RadioGetGfskTimeOnAirNumerator+0x44>
 8008a9e:	2100      	movs	r1, #0
 8008aa0:	440b      	add	r3, r1
 8008aa2:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8008aa4:	4413      	add	r3, r2
}
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	370c      	adds	r7, #12
 8008aaa:	46bd      	mov	sp, r7
 8008aac:	bc80      	pop	{r7}
 8008aae:	4770      	bx	lr

08008ab0 <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8008ab0:	b480      	push	{r7}
 8008ab2:	b08b      	sub	sp, #44	; 0x2c
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	60f8      	str	r0, [r7, #12]
 8008ab8:	60b9      	str	r1, [r7, #8]
 8008aba:	4611      	mov	r1, r2
 8008abc:	461a      	mov	r2, r3
 8008abe:	460b      	mov	r3, r1
 8008ac0:	71fb      	strb	r3, [r7, #7]
 8008ac2:	4613      	mov	r3, r2
 8008ac4:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 8008ac6:	79fb      	ldrb	r3, [r7, #7]
 8008ac8:	3304      	adds	r3, #4
 8008aca:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 8008acc:	2300      	movs	r3, #0
 8008ace:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 8008ad2:	68bb      	ldr	r3, [r7, #8]
 8008ad4:	2b05      	cmp	r3, #5
 8008ad6:	d002      	beq.n	8008ade <RadioGetLoRaTimeOnAirNumerator+0x2e>
 8008ad8:	68bb      	ldr	r3, [r7, #8]
 8008ada:	2b06      	cmp	r3, #6
 8008adc:	d104      	bne.n	8008ae8 <RadioGetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 8008ade:	88bb      	ldrh	r3, [r7, #4]
 8008ae0:	2b0b      	cmp	r3, #11
 8008ae2:	d801      	bhi.n	8008ae8 <RadioGetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 8008ae4:	230c      	movs	r3, #12
 8008ae6:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d105      	bne.n	8008afa <RadioGetLoRaTimeOnAirNumerator+0x4a>
 8008aee:	68bb      	ldr	r3, [r7, #8]
 8008af0:	2b0b      	cmp	r3, #11
 8008af2:	d008      	beq.n	8008b06 <RadioGetLoRaTimeOnAirNumerator+0x56>
 8008af4:	68bb      	ldr	r3, [r7, #8]
 8008af6:	2b0c      	cmp	r3, #12
 8008af8:	d005      	beq.n	8008b06 <RadioGetLoRaTimeOnAirNumerator+0x56>
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	2b01      	cmp	r3, #1
 8008afe:	d105      	bne.n	8008b0c <RadioGetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8008b00:	68bb      	ldr	r3, [r7, #8]
 8008b02:	2b0c      	cmp	r3, #12
 8008b04:	d102      	bne.n	8008b0c <RadioGetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 8008b06:	2301      	movs	r3, #1
 8008b08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8008b0c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8008b10:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 8008b12:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008b16:	2a00      	cmp	r2, #0
 8008b18:	d001      	beq.n	8008b1e <RadioGetLoRaTimeOnAirNumerator+0x6e>
 8008b1a:	2210      	movs	r2, #16
 8008b1c:	e000      	b.n	8008b20 <RadioGetLoRaTimeOnAirNumerator+0x70>
 8008b1e:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8008b20:	4413      	add	r3, r2
 8008b22:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 8008b24:	68bb      	ldr	r3, [r7, #8]
 8008b26:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 8008b28:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 8008b2a:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8008b2e:	2a00      	cmp	r2, #0
 8008b30:	d001      	beq.n	8008b36 <RadioGetLoRaTimeOnAirNumerator+0x86>
 8008b32:	2200      	movs	r2, #0
 8008b34:	e000      	b.n	8008b38 <RadioGetLoRaTimeOnAirNumerator+0x88>
 8008b36:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 8008b38:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8008b3a:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 8008b3c:	68bb      	ldr	r3, [r7, #8]
 8008b3e:	2b06      	cmp	r3, #6
 8008b40:	d803      	bhi.n	8008b4a <RadioGetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 8008b42:	68bb      	ldr	r3, [r7, #8]
 8008b44:	009b      	lsls	r3, r3, #2
 8008b46:	623b      	str	r3, [r7, #32]
 8008b48:	e00e      	b.n	8008b68 <RadioGetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 8008b4a:	69fb      	ldr	r3, [r7, #28]
 8008b4c:	3308      	adds	r3, #8
 8008b4e:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 8008b50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d004      	beq.n	8008b62 <RadioGetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 8008b58:	68bb      	ldr	r3, [r7, #8]
 8008b5a:	3b02      	subs	r3, #2
 8008b5c:	009b      	lsls	r3, r3, #2
 8008b5e:	623b      	str	r3, [r7, #32]
 8008b60:	e002      	b.n	8008b68 <RadioGetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 8008b62:	68bb      	ldr	r3, [r7, #8]
 8008b64:	009b      	lsls	r3, r3, #2
 8008b66:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 8008b68:	69fb      	ldr	r3, [r7, #28]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	da01      	bge.n	8008b72 <RadioGetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 8008b6e:	2300      	movs	r3, #0
 8008b70:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 8008b72:	69fa      	ldr	r2, [r7, #28]
 8008b74:	6a3b      	ldr	r3, [r7, #32]
 8008b76:	4413      	add	r3, r2
 8008b78:	1e5a      	subs	r2, r3, #1
 8008b7a:	6a3b      	ldr	r3, [r7, #32]
 8008b7c:	fb92 f3f3 	sdiv	r3, r2, r3
 8008b80:	697a      	ldr	r2, [r7, #20]
 8008b82:	fb03 f202 	mul.w	r2, r3, r2
 8008b86:	88bb      	ldrh	r3, [r7, #4]
 8008b88:	4413      	add	r3, r2
    int32_t intermediate =
 8008b8a:	330c      	adds	r3, #12
 8008b8c:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 8008b8e:	68bb      	ldr	r3, [r7, #8]
 8008b90:	2b06      	cmp	r3, #6
 8008b92:	d802      	bhi.n	8008b9a <RadioGetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 8008b94:	69bb      	ldr	r3, [r7, #24]
 8008b96:	3302      	adds	r3, #2
 8008b98:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 8008b9a:	69bb      	ldr	r3, [r7, #24]
 8008b9c:	009b      	lsls	r3, r3, #2
 8008b9e:	1c5a      	adds	r2, r3, #1
 8008ba0:	68bb      	ldr	r3, [r7, #8]
 8008ba2:	3b02      	subs	r3, #2
 8008ba4:	fa02 f303 	lsl.w	r3, r2, r3
}
 8008ba8:	4618      	mov	r0, r3
 8008baa:	372c      	adds	r7, #44	; 0x2c
 8008bac:	46bd      	mov	sp, r7
 8008bae:	bc80      	pop	{r7}
 8008bb0:	4770      	bx	lr
	...

08008bb4 <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 8008bb4:	b580      	push	{r7, lr}
 8008bb6:	b08a      	sub	sp, #40	; 0x28
 8008bb8:	af04      	add	r7, sp, #16
 8008bba:	60b9      	str	r1, [r7, #8]
 8008bbc:	607a      	str	r2, [r7, #4]
 8008bbe:	461a      	mov	r2, r3
 8008bc0:	4603      	mov	r3, r0
 8008bc2:	73fb      	strb	r3, [r7, #15]
 8008bc4:	4613      	mov	r3, r2
 8008bc6:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 8008bc8:	2300      	movs	r3, #0
 8008bca:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 8008bcc:	2301      	movs	r3, #1
 8008bce:	613b      	str	r3, [r7, #16]

    switch( modem )
 8008bd0:	7bfb      	ldrb	r3, [r7, #15]
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d002      	beq.n	8008bdc <RadioTimeOnAir+0x28>
 8008bd6:	2b01      	cmp	r3, #1
 8008bd8:	d017      	beq.n	8008c0a <RadioTimeOnAir+0x56>
                                                                  fixLen, payloadLen, crcOn );
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
        }
        break;
    default:
        break;
 8008bda:	e035      	b.n	8008c48 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 8008bdc:	f897 0024 	ldrb.w	r0, [r7, #36]	; 0x24
 8008be0:	8c3a      	ldrh	r2, [r7, #32]
 8008be2:	7bb9      	ldrb	r1, [r7, #14]
 8008be4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008be8:	9301      	str	r3, [sp, #4]
 8008bea:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008bee:	9300      	str	r3, [sp, #0]
 8008bf0:	4603      	mov	r3, r0
 8008bf2:	6878      	ldr	r0, [r7, #4]
 8008bf4:	f7ff ff32 	bl	8008a5c <RadioGetGfskTimeOnAirNumerator>
 8008bf8:	4603      	mov	r3, r0
 8008bfa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008bfe:	fb02 f303 	mul.w	r3, r2, r3
 8008c02:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	613b      	str	r3, [r7, #16]
        break;
 8008c08:	e01e      	b.n	8008c48 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 8008c0a:	8c39      	ldrh	r1, [r7, #32]
 8008c0c:	7bba      	ldrb	r2, [r7, #14]
 8008c0e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008c12:	9302      	str	r3, [sp, #8]
 8008c14:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008c18:	9301      	str	r3, [sp, #4]
 8008c1a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008c1e:	9300      	str	r3, [sp, #0]
 8008c20:	460b      	mov	r3, r1
 8008c22:	6879      	ldr	r1, [r7, #4]
 8008c24:	68b8      	ldr	r0, [r7, #8]
 8008c26:	f7ff ff43 	bl	8008ab0 <RadioGetLoRaTimeOnAirNumerator>
 8008c2a:	4603      	mov	r3, r0
 8008c2c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008c30:	fb02 f303 	mul.w	r3, r2, r3
 8008c34:	617b      	str	r3, [r7, #20]
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 8008c36:	4a0a      	ldr	r2, [pc, #40]	; (8008c60 <RadioTimeOnAir+0xac>)
 8008c38:	68bb      	ldr	r3, [r7, #8]
 8008c3a:	4413      	add	r3, r2
 8008c3c:	781b      	ldrb	r3, [r3, #0]
 8008c3e:	4618      	mov	r0, r3
 8008c40:	f7ff feb6 	bl	80089b0 <RadioGetLoRaBandwidthInHz>
 8008c44:	6138      	str	r0, [r7, #16]
        break;
 8008c46:	bf00      	nop
    }
    // Perform integral ceil()
    return DIVC( numerator, denominator );
 8008c48:	697a      	ldr	r2, [r7, #20]
 8008c4a:	693b      	ldr	r3, [r7, #16]
 8008c4c:	4413      	add	r3, r2
 8008c4e:	1e5a      	subs	r2, r3, #1
 8008c50:	693b      	ldr	r3, [r7, #16]
 8008c52:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8008c56:	4618      	mov	r0, r3
 8008c58:	3718      	adds	r7, #24
 8008c5a:	46bd      	mov	sp, r7
 8008c5c:	bd80      	pop	{r7, pc}
 8008c5e:	bf00      	nop
 8008c60:	0800cfb8 	.word	0x0800cfb8

08008c64 <RadioSend>:

static radio_status_t RadioSend( uint8_t *buffer, uint8_t size )
{
 8008c64:	b580      	push	{r7, lr}
 8008c66:	b084      	sub	sp, #16
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	6078      	str	r0, [r7, #4]
 8008c6c:	460b      	mov	r3, r1
 8008c6e:	70fb      	strb	r3, [r7, #3]
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 8008c70:	2300      	movs	r3, #0
 8008c72:	2200      	movs	r2, #0
 8008c74:	f240 2101 	movw	r1, #513	; 0x201
 8008c78:	f240 2001 	movw	r0, #513	; 0x201
 8008c7c:	f001 fd2c 	bl	800a6d8 <SUBGRF_SetDioIrqParams>

    /* Set DBG pin */
    DBG_GPIO_RADIO_TX( SET );

    /* Set RF switch */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8008c80:	4b70      	ldr	r3, [pc, #448]	; (8008e44 <RadioSend+0x1e0>)
 8008c82:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8008c86:	2101      	movs	r1, #1
 8008c88:	4618      	mov	r0, r3
 8008c8a:	f002 f9c9 	bl	800b020 <SUBGRF_SetSwitch>
    /* WORKAROUND - Modulation Quality with 500 kHz LoRaTM Bandwidth*/
    /* RegTxModulation = @address 0x0889 */
    if( ( SubgRf.Modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 8008c8e:	4b6d      	ldr	r3, [pc, #436]	; (8008e44 <RadioSend+0x1e0>)
 8008c90:	781b      	ldrb	r3, [r3, #0]
 8008c92:	2b01      	cmp	r3, #1
 8008c94:	d112      	bne.n	8008cbc <RadioSend+0x58>
 8008c96:	4b6b      	ldr	r3, [pc, #428]	; (8008e44 <RadioSend+0x1e0>)
 8008c98:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008c9c:	2b06      	cmp	r3, #6
 8008c9e:	d10d      	bne.n	8008cbc <RadioSend+0x58>
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 8008ca0:	f640 0089 	movw	r0, #2185	; 0x889
 8008ca4:	f002 f8dc 	bl	800ae60 <SUBGRF_ReadRegister>
 8008ca8:	4603      	mov	r3, r0
 8008caa:	f023 0304 	bic.w	r3, r3, #4
 8008cae:	b2db      	uxtb	r3, r3
 8008cb0:	4619      	mov	r1, r3
 8008cb2:	f640 0089 	movw	r0, #2185	; 0x889
 8008cb6:	f002 f8bf 	bl	800ae38 <SUBGRF_WriteRegister>
 8008cba:	e00c      	b.n	8008cd6 <RadioSend+0x72>
    }
    else
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 8008cbc:	f640 0089 	movw	r0, #2185	; 0x889
 8008cc0:	f002 f8ce 	bl	800ae60 <SUBGRF_ReadRegister>
 8008cc4:	4603      	mov	r3, r0
 8008cc6:	f043 0304 	orr.w	r3, r3, #4
 8008cca:	b2db      	uxtb	r3, r3
 8008ccc:	4619      	mov	r1, r3
 8008cce:	f640 0089 	movw	r0, #2185	; 0x889
 8008cd2:	f002 f8b1 	bl	800ae38 <SUBGRF_WriteRegister>
    }
    else
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    {
        /* WORKAROUND END */
        switch( SubgRf.Modem )
 8008cd6:	4b5b      	ldr	r3, [pc, #364]	; (8008e44 <RadioSend+0x1e0>)
 8008cd8:	781b      	ldrb	r3, [r3, #0]
 8008cda:	2b04      	cmp	r3, #4
 8008cdc:	f200 80a2 	bhi.w	8008e24 <RadioSend+0x1c0>
 8008ce0:	a201      	add	r2, pc, #4	; (adr r2, 8008ce8 <RadioSend+0x84>)
 8008ce2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ce6:	bf00      	nop
 8008ce8:	08008d17 	.word	0x08008d17
 8008cec:	08008cfd 	.word	0x08008cfd
 8008cf0:	08008d17 	.word	0x08008d17
 8008cf4:	08008d6d 	.word	0x08008d6d
 8008cf8:	08008d8d 	.word	0x08008d8d
        {
        case MODEM_LORA:
        {
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 8008cfc:	4a51      	ldr	r2, [pc, #324]	; (8008e44 <RadioSend+0x1e0>)
 8008cfe:	78fb      	ldrb	r3, [r7, #3]
 8008d00:	77d3      	strb	r3, [r2, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008d02:	4851      	ldr	r0, [pc, #324]	; (8008e48 <RadioSend+0x1e4>)
 8008d04:	f001 ff50 	bl	800aba8 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8008d08:	78fb      	ldrb	r3, [r7, #3]
 8008d0a:	2200      	movs	r2, #0
 8008d0c:	4619      	mov	r1, r3
 8008d0e:	6878      	ldr	r0, [r7, #4]
 8008d10:	f001 fa00 	bl	800a114 <SUBGRF_SendPayload>
            break;
 8008d14:	e087      	b.n	8008e26 <RadioSend+0x1c2>
        }
        case MODEM_MSK:
        case MODEM_FSK:
        {
            if ( 1UL == RFW_Is_Init( ) )
 8008d16:	f002 fb7c 	bl	800b412 <RFW_Is_Init>
 8008d1a:	4603      	mov	r3, r0
 8008d1c:	2b01      	cmp	r3, #1
 8008d1e:	d118      	bne.n	8008d52 <RadioSend+0xee>
            {
                uint8_t outsize;
                if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 8008d20:	f107 020d 	add.w	r2, r7, #13
 8008d24:	78fb      	ldrb	r3, [r7, #3]
 8008d26:	4619      	mov	r1, r3
 8008d28:	6878      	ldr	r0, [r7, #4]
 8008d2a:	f002 fb8a 	bl	800b442 <RFW_TransmitInit>
 8008d2e:	4603      	mov	r3, r0
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d10c      	bne.n	8008d4e <RadioSend+0xea>
                {
                    SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 8008d34:	7b7a      	ldrb	r2, [r7, #13]
 8008d36:	4b43      	ldr	r3, [pc, #268]	; (8008e44 <RadioSend+0x1e0>)
 8008d38:	759a      	strb	r2, [r3, #22]
                    SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008d3a:	4843      	ldr	r0, [pc, #268]	; (8008e48 <RadioSend+0x1e4>)
 8008d3c:	f001 ff34 	bl	800aba8 <SUBGRF_SetPacketParams>
                    SUBGRF_SendPayload( buffer, outsize, 0 );
 8008d40:	7b7b      	ldrb	r3, [r7, #13]
 8008d42:	2200      	movs	r2, #0
 8008d44:	4619      	mov	r1, r3
 8008d46:	6878      	ldr	r0, [r7, #4]
 8008d48:	f001 f9e4 	bl	800a114 <SUBGRF_SendPayload>
            {
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
                SUBGRF_SendPayload( buffer, size, 0 );
            }
            break;
 8008d4c:	e06b      	b.n	8008e26 <RadioSend+0x1c2>
                    return RADIO_STATUS_ERROR;
 8008d4e:	2303      	movs	r3, #3
 8008d50:	e073      	b.n	8008e3a <RadioSend+0x1d6>
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 8008d52:	4a3c      	ldr	r2, [pc, #240]	; (8008e44 <RadioSend+0x1e0>)
 8008d54:	78fb      	ldrb	r3, [r7, #3]
 8008d56:	7593      	strb	r3, [r2, #22]
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008d58:	483b      	ldr	r0, [pc, #236]	; (8008e48 <RadioSend+0x1e4>)
 8008d5a:	f001 ff25 	bl	800aba8 <SUBGRF_SetPacketParams>
                SUBGRF_SendPayload( buffer, size, 0 );
 8008d5e:	78fb      	ldrb	r3, [r7, #3]
 8008d60:	2200      	movs	r2, #0
 8008d62:	4619      	mov	r1, r3
 8008d64:	6878      	ldr	r0, [r7, #4]
 8008d66:	f001 f9d5 	bl	800a114 <SUBGRF_SendPayload>
            break;
 8008d6a:	e05c      	b.n	8008e26 <RadioSend+0x1c2>
        }
        case MODEM_BPSK:
        {
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8008d6c:	4b35      	ldr	r3, [pc, #212]	; (8008e44 <RadioSend+0x1e0>)
 8008d6e:	2202      	movs	r2, #2
 8008d70:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 8008d72:	4a34      	ldr	r2, [pc, #208]	; (8008e44 <RadioSend+0x1e0>)
 8008d74:	78fb      	ldrb	r3, [r7, #3]
 8008d76:	7693      	strb	r3, [r2, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008d78:	4833      	ldr	r0, [pc, #204]	; (8008e48 <RadioSend+0x1e4>)
 8008d7a:	f001 ff15 	bl	800aba8 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8008d7e:	78fb      	ldrb	r3, [r7, #3]
 8008d80:	2200      	movs	r2, #0
 8008d82:	4619      	mov	r1, r3
 8008d84:	6878      	ldr	r0, [r7, #4]
 8008d86:	f001 f9c5 	bl	800a114 <SUBGRF_SendPayload>
            break;
 8008d8a:	e04c      	b.n	8008e26 <RadioSend+0x1c2>
        case MODEM_SIGFOX_TX:
        {
            /* from bpsk to dbpsk */
            /* first 1 bit duplicated */
            /* RadioBuffer is 1 bytes more */
            payload_integration( RadioBuffer, buffer, size );
 8008d8c:	78fb      	ldrb	r3, [r7, #3]
 8008d8e:	461a      	mov	r2, r3
 8008d90:	6879      	ldr	r1, [r7, #4]
 8008d92:	482e      	ldr	r0, [pc, #184]	; (8008e4c <RadioSend+0x1e8>)
 8008d94:	f000 fc98 	bl	80096c8 <payload_integration>

            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8008d98:	4b2a      	ldr	r3, [pc, #168]	; (8008e44 <RadioSend+0x1e0>)
 8008d9a:	2202      	movs	r2, #2
 8008d9c:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 8008d9e:	78fb      	ldrb	r3, [r7, #3]
 8008da0:	3301      	adds	r3, #1
 8008da2:	b2da      	uxtb	r2, r3
 8008da4:	4b27      	ldr	r3, [pc, #156]	; (8008e44 <RadioSend+0x1e0>)
 8008da6:	769a      	strb	r2, [r3, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008da8:	4827      	ldr	r0, [pc, #156]	; (8008e48 <RadioSend+0x1e4>)
 8008daa:	f001 fefd 	bl	800aba8 <SUBGRF_SetPacketParams>

            RadioWrite( SUBGHZ_RAM_RAMPUPL, 0 ); // clean start-up LSB
 8008dae:	2100      	movs	r1, #0
 8008db0:	20f1      	movs	r0, #241	; 0xf1
 8008db2:	f000 f964 	bl	800907e <RadioWrite>
            RadioWrite( SUBGHZ_RAM_RAMPUPH, 0 ); // clean start-up MSB
 8008db6:	2100      	movs	r1, #0
 8008db8:	20f0      	movs	r0, #240	; 0xf0
 8008dba:	f000 f960 	bl	800907e <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 8008dbe:	4b21      	ldr	r3, [pc, #132]	; (8008e44 <RadioSend+0x1e0>)
 8008dc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008dc2:	2b64      	cmp	r3, #100	; 0x64
 8008dc4:	d108      	bne.n	8008dd8 <RadioSend+0x174>
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0x70 ); // clean end of frame LSB
 8008dc6:	2170      	movs	r1, #112	; 0x70
 8008dc8:	20f3      	movs	r0, #243	; 0xf3
 8008dca:	f000 f958 	bl	800907e <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x1D ); // clean end of frame MSB
 8008dce:	211d      	movs	r1, #29
 8008dd0:	20f2      	movs	r0, #242	; 0xf2
 8008dd2:	f000 f954 	bl	800907e <RadioWrite>
 8008dd6:	e007      	b.n	8008de8 <RadioSend+0x184>
            }
            else // 600 bps
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0xE1 ); // clean end of frame LSB
 8008dd8:	21e1      	movs	r1, #225	; 0xe1
 8008dda:	20f3      	movs	r0, #243	; 0xf3
 8008ddc:	f000 f94f 	bl	800907e <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x04 ); // clean end of frame MSB
 8008de0:	2104      	movs	r1, #4
 8008de2:	20f2      	movs	r0, #242	; 0xf2
 8008de4:	f000 f94b 	bl	800907e <RadioWrite>
            }

            uint16_t bitNum = ( size * 8 ) + 2;
 8008de8:	78fb      	ldrb	r3, [r7, #3]
 8008dea:	b29b      	uxth	r3, r3
 8008dec:	00db      	lsls	r3, r3, #3
 8008dee:	b29b      	uxth	r3, r3
 8008df0:	3302      	adds	r3, #2
 8008df2:	81fb      	strh	r3, [r7, #14]
            RadioWrite( SUBGHZ_RAM_FRAMELIMH, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 8008df4:	89fb      	ldrh	r3, [r7, #14]
 8008df6:	0a1b      	lsrs	r3, r3, #8
 8008df8:	b29b      	uxth	r3, r3
 8008dfa:	b2db      	uxtb	r3, r3
 8008dfc:	4619      	mov	r1, r3
 8008dfe:	20f4      	movs	r0, #244	; 0xf4
 8008e00:	f000 f93d 	bl	800907e <RadioWrite>
            RadioWrite( SUBGHZ_RAM_FRAMELIML, bitNum & 0x00FF );             // limit frame
 8008e04:	89fb      	ldrh	r3, [r7, #14]
 8008e06:	b2db      	uxtb	r3, r3
 8008e08:	4619      	mov	r1, r3
 8008e0a:	20f5      	movs	r0, #245	; 0xf5
 8008e0c:	f000 f937 	bl	800907e <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size + 1, 0xFFFFFF );
 8008e10:	78fb      	ldrb	r3, [r7, #3]
 8008e12:	3301      	adds	r3, #1
 8008e14:	b2db      	uxtb	r3, r3
 8008e16:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8008e1a:	4619      	mov	r1, r3
 8008e1c:	480b      	ldr	r0, [pc, #44]	; (8008e4c <RadioSend+0x1e8>)
 8008e1e:	f001 f979 	bl	800a114 <SUBGRF_SendPayload>
            break;
 8008e22:	e000      	b.n	8008e26 <RadioSend+0x1c2>
        }
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 8008e24:	bf00      	nop
        }

        TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 8008e26:	4b07      	ldr	r3, [pc, #28]	; (8008e44 <RadioSend+0x1e0>)
 8008e28:	685b      	ldr	r3, [r3, #4]
 8008e2a:	4619      	mov	r1, r3
 8008e2c:	4808      	ldr	r0, [pc, #32]	; (8008e50 <RadioSend+0x1ec>)
 8008e2e:	f002 fdbb 	bl	800b9a8 <UTIL_TIMER_SetPeriod>
        TimerStart( &TxTimeoutTimer );
 8008e32:	4807      	ldr	r0, [pc, #28]	; (8008e50 <RadioSend+0x1ec>)
 8008e34:	f002 fcda 	bl	800b7ec <UTIL_TIMER_Start>
    }

    return RADIO_STATUS_OK;
 8008e38:	2300      	movs	r3, #0
}
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	3710      	adds	r7, #16
 8008e3e:	46bd      	mov	sp, r7
 8008e40:	bd80      	pop	{r7, pc}
 8008e42:	bf00      	nop
 8008e44:	20000a64 	.word	0x20000a64
 8008e48:	20000a72 	.word	0x20000a72
 8008e4c:	20000960 	.word	0x20000960
 8008e50:	20000ac0 	.word	0x20000ac0

08008e54 <RadioSleep>:

static void RadioSleep( void )
{
 8008e54:	b580      	push	{r7, lr}
 8008e56:	b082      	sub	sp, #8
 8008e58:	af00      	add	r7, sp, #0
    SleepParams_t params = { 0 };
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	713b      	strb	r3, [r7, #4]

    params.Fields.WarmStart = 1;
 8008e5e:	793b      	ldrb	r3, [r7, #4]
 8008e60:	f043 0304 	orr.w	r3, r3, #4
 8008e64:	713b      	strb	r3, [r7, #4]
    SUBGRF_SetSleep( params );
 8008e66:	7938      	ldrb	r0, [r7, #4]
 8008e68:	f001 fa30 	bl	800a2cc <SUBGRF_SetSleep>

    RADIO_DELAY_MS( 2 );
 8008e6c:	2002      	movs	r0, #2
 8008e6e:	f7f9 fe53 	bl	8002b18 <HAL_Delay>
}
 8008e72:	bf00      	nop
 8008e74:	3708      	adds	r7, #8
 8008e76:	46bd      	mov	sp, r7
 8008e78:	bd80      	pop	{r7, pc}

08008e7a <RadioStandby>:

static void RadioStandby( void )
{
 8008e7a:	b580      	push	{r7, lr}
 8008e7c:	af00      	add	r7, sp, #0
    SUBGRF_SetStandby( STDBY_RC );
 8008e7e:	2000      	movs	r0, #0
 8008e80:	f001 fa56 	bl	800a330 <SUBGRF_SetStandby>
}
 8008e84:	bf00      	nop
 8008e86:	bd80      	pop	{r7, pc}

08008e88 <RadioRx>:

static void RadioRx( uint32_t timeout )
{
 8008e88:	b580      	push	{r7, lr}
 8008e8a:	b082      	sub	sp, #8
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init( ) )
 8008e90:	f002 fabf 	bl	800b412 <RFW_Is_Init>
 8008e94:	4603      	mov	r3, r0
 8008e96:	2b01      	cmp	r3, #1
 8008e98:	d102      	bne.n	8008ea0 <RadioRx+0x18>
    {
        RFW_ReceiveInit( );
 8008e9a:	f002 fae2 	bl	800b462 <RFW_ReceiveInit>
 8008e9e:	e007      	b.n	8008eb0 <RadioRx+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8008ea0:	2300      	movs	r3, #0
 8008ea2:	2200      	movs	r2, #0
 8008ea4:	f240 2162 	movw	r1, #610	; 0x262
 8008ea8:	f240 2062 	movw	r0, #610	; 0x262
 8008eac:	f001 fc14 	bl	800a6d8 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }

    if( timeout != 0 )
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d006      	beq.n	8008ec4 <RadioRx+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 8008eb6:	6879      	ldr	r1, [r7, #4]
 8008eb8:	4811      	ldr	r0, [pc, #68]	; (8008f00 <RadioRx+0x78>)
 8008eba:	f002 fd75 	bl	800b9a8 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8008ebe:	4810      	ldr	r0, [pc, #64]	; (8008f00 <RadioRx+0x78>)
 8008ec0:	f002 fc94 	bl	800b7ec <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8008ec4:	4b0f      	ldr	r3, [pc, #60]	; (8008f04 <RadioRx+0x7c>)
 8008ec6:	2200      	movs	r2, #0
 8008ec8:	659a      	str	r2, [r3, #88]	; 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8008eca:	4b0e      	ldr	r3, [pc, #56]	; (8008f04 <RadioRx+0x7c>)
 8008ecc:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8008ed0:	2100      	movs	r1, #0
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	f002 f8a4 	bl	800b020 <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 8008ed8:	4b0a      	ldr	r3, [pc, #40]	; (8008f04 <RadioRx+0x7c>)
 8008eda:	785b      	ldrb	r3, [r3, #1]
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d004      	beq.n	8008eea <RadioRx+0x62>
    {
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8008ee0:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8008ee4:	f001 fa60 	bl	800a3a8 <SUBGRF_SetRx>
    }
    else
    {
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
    }
}
 8008ee8:	e005      	b.n	8008ef6 <RadioRx+0x6e>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 8008eea:	4b06      	ldr	r3, [pc, #24]	; (8008f04 <RadioRx+0x7c>)
 8008eec:	689b      	ldr	r3, [r3, #8]
 8008eee:	019b      	lsls	r3, r3, #6
 8008ef0:	4618      	mov	r0, r3
 8008ef2:	f001 fa59 	bl	800a3a8 <SUBGRF_SetRx>
}
 8008ef6:	bf00      	nop
 8008ef8:	3708      	adds	r7, #8
 8008efa:	46bd      	mov	sp, r7
 8008efc:	bd80      	pop	{r7, pc}
 8008efe:	bf00      	nop
 8008f00:	20000ad8 	.word	0x20000ad8
 8008f04:	20000a64 	.word	0x20000a64

08008f08 <RadioRxBoosted>:

static void RadioRxBoosted( uint32_t timeout )
{
 8008f08:	b580      	push	{r7, lr}
 8008f0a:	b082      	sub	sp, #8
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init() )
 8008f10:	f002 fa7f 	bl	800b412 <RFW_Is_Init>
 8008f14:	4603      	mov	r3, r0
 8008f16:	2b01      	cmp	r3, #1
 8008f18:	d102      	bne.n	8008f20 <RadioRxBoosted+0x18>
    {
        RFW_ReceiveInit();
 8008f1a:	f002 faa2 	bl	800b462 <RFW_ReceiveInit>
 8008f1e:	e007      	b.n	8008f30 <RadioRxBoosted+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8008f20:	2300      	movs	r3, #0
 8008f22:	2200      	movs	r2, #0
 8008f24:	f240 2162 	movw	r1, #610	; 0x262
 8008f28:	f240 2062 	movw	r0, #610	; 0x262
 8008f2c:	f001 fbd4 	bl	800a6d8 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }
    if( timeout != 0 )
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d006      	beq.n	8008f44 <RadioRxBoosted+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 8008f36:	6879      	ldr	r1, [r7, #4]
 8008f38:	4811      	ldr	r0, [pc, #68]	; (8008f80 <RadioRxBoosted+0x78>)
 8008f3a:	f002 fd35 	bl	800b9a8 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8008f3e:	4810      	ldr	r0, [pc, #64]	; (8008f80 <RadioRxBoosted+0x78>)
 8008f40:	f002 fc54 	bl	800b7ec <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8008f44:	4b0f      	ldr	r3, [pc, #60]	; (8008f84 <RadioRxBoosted+0x7c>)
 8008f46:	2200      	movs	r2, #0
 8008f48:	659a      	str	r2, [r3, #88]	; 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8008f4a:	4b0e      	ldr	r3, [pc, #56]	; (8008f84 <RadioRxBoosted+0x7c>)
 8008f4c:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8008f50:	2100      	movs	r1, #0
 8008f52:	4618      	mov	r0, r3
 8008f54:	f002 f864 	bl	800b020 <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 8008f58:	4b0a      	ldr	r3, [pc, #40]	; (8008f84 <RadioRxBoosted+0x7c>)
 8008f5a:	785b      	ldrb	r3, [r3, #1]
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d004      	beq.n	8008f6a <RadioRxBoosted+0x62>
    {
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 8008f60:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8008f64:	f001 fa40 	bl	800a3e8 <SUBGRF_SetRxBoosted>
    }
    else
    {
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
    }
}
 8008f68:	e005      	b.n	8008f76 <RadioRxBoosted+0x6e>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 8008f6a:	4b06      	ldr	r3, [pc, #24]	; (8008f84 <RadioRxBoosted+0x7c>)
 8008f6c:	689b      	ldr	r3, [r3, #8]
 8008f6e:	019b      	lsls	r3, r3, #6
 8008f70:	4618      	mov	r0, r3
 8008f72:	f001 fa39 	bl	800a3e8 <SUBGRF_SetRxBoosted>
}
 8008f76:	bf00      	nop
 8008f78:	3708      	adds	r7, #8
 8008f7a:	46bd      	mov	sp, r7
 8008f7c:	bd80      	pop	{r7, pc}
 8008f7e:	bf00      	nop
 8008f80:	20000ad8 	.word	0x20000ad8
 8008f84:	20000a64 	.word	0x20000a64

08008f88 <RadioSetRxDutyCycle>:

static void RadioSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 8008f88:	b580      	push	{r7, lr}
 8008f8a:	b082      	sub	sp, #8
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	6078      	str	r0, [r7, #4]
 8008f90:	6039      	str	r1, [r7, #0]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 2 * rxTime + sleepTime;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	005a      	lsls	r2, r3, #1
 8008f96:	683b      	ldr	r3, [r7, #0]
 8008f98:	4413      	add	r3, r2
 8008f9a:	4a0c      	ldr	r2, [pc, #48]	; (8008fcc <RadioSetRxDutyCycle+0x44>)
 8008f9c:	6593      	str	r3, [r2, #88]	; 0x58
    /*Enable also the IRQ_PREAMBLE_DETECTED*/
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8008f9e:	2300      	movs	r3, #0
 8008fa0:	2200      	movs	r2, #0
 8008fa2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8008fa6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8008faa:	f001 fb95 	bl	800a6d8 <SUBGRF_SetDioIrqParams>
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8008fae:	4b07      	ldr	r3, [pc, #28]	; (8008fcc <RadioSetRxDutyCycle+0x44>)
 8008fb0:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8008fb4:	2100      	movs	r1, #0
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	f002 f832 	bl	800b020 <SUBGRF_SetSwitch>
    /* Start Rx DutyCycle*/
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 8008fbc:	6839      	ldr	r1, [r7, #0]
 8008fbe:	6878      	ldr	r0, [r7, #4]
 8008fc0:	f001 fa36 	bl	800a430 <SUBGRF_SetRxDutyCycle>
}
 8008fc4:	bf00      	nop
 8008fc6:	3708      	adds	r7, #8
 8008fc8:	46bd      	mov	sp, r7
 8008fca:	bd80      	pop	{r7, pc}
 8008fcc:	20000a64 	.word	0x20000a64

08008fd0 <RadioStartCad>:

static void RadioStartCad( void )
{
 8008fd0:	b580      	push	{r7, lr}
 8008fd2:	af00      	add	r7, sp, #0
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8008fd4:	4b09      	ldr	r3, [pc, #36]	; (8008ffc <RadioStartCad+0x2c>)
 8008fd6:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8008fda:	2100      	movs	r1, #0
 8008fdc:	4618      	mov	r0, r3
 8008fde:	f002 f81f 	bl	800b020 <SUBGRF_SetSwitch>

    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 8008fe2:	2300      	movs	r3, #0
 8008fe4:	2200      	movs	r2, #0
 8008fe6:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8008fea:	f44f 70c0 	mov.w	r0, #384	; 0x180
 8008fee:	f001 fb73 	bl	800a6d8 <SUBGRF_SetDioIrqParams>
                            IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );
    SUBGRF_SetCad( );
 8008ff2:	f001 fa49 	bl	800a488 <SUBGRF_SetCad>
}
 8008ff6:	bf00      	nop
 8008ff8:	bd80      	pop	{r7, pc}
 8008ffa:	bf00      	nop
 8008ffc:	20000a64 	.word	0x20000a64

08009000 <RadioSetTxContinuousWave>:

static void RadioSetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 8009000:	b580      	push	{r7, lr}
 8009002:	b084      	sub	sp, #16
 8009004:	af00      	add	r7, sp, #0
 8009006:	6078      	str	r0, [r7, #4]
 8009008:	460b      	mov	r3, r1
 800900a:	70fb      	strb	r3, [r7, #3]
 800900c:	4613      	mov	r3, r2
 800900e:	803b      	strh	r3, [r7, #0]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    uint32_t timeout = ( uint32_t )time * 1000;
 8009010:	883b      	ldrh	r3, [r7, #0]
 8009012:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009016:	fb02 f303 	mul.w	r3, r2, r3
 800901a:	60fb      	str	r3, [r7, #12]
    uint8_t antswitchpow;

    SUBGRF_SetRfFrequency( freq );
 800901c:	6878      	ldr	r0, [r7, #4]
 800901e:	f001 fbb7 	bl	800a790 <SUBGRF_SetRfFrequency>

    antswitchpow = SUBGRF_SetRfTxPower( power );
 8009022:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009026:	4618      	mov	r0, r3
 8009028:	f002 f822 	bl	800b070 <SUBGRF_SetRfTxPower>
 800902c:	4603      	mov	r3, r0
 800902e:	72fb      	strb	r3, [r7, #11]

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8009030:	210e      	movs	r1, #14
 8009032:	f640 101f 	movw	r0, #2335	; 0x91f
 8009036:	f001 feff 	bl	800ae38 <SUBGRF_WriteRegister>

    /* Set RF switch */
    SUBGRF_SetSwitch( antswitchpow, RFSWITCH_TX );
 800903a:	7afb      	ldrb	r3, [r7, #11]
 800903c:	2101      	movs	r1, #1
 800903e:	4618      	mov	r0, r3
 8009040:	f001 ffee 	bl	800b020 <SUBGRF_SetSwitch>

    SUBGRF_SetTxContinuousWave( );
 8009044:	f001 fa2e 	bl	800a4a4 <SUBGRF_SetTxContinuousWave>

    TimerSetValue( &TxTimeoutTimer, timeout );
 8009048:	68f9      	ldr	r1, [r7, #12]
 800904a:	4805      	ldr	r0, [pc, #20]	; (8009060 <RadioSetTxContinuousWave+0x60>)
 800904c:	f002 fcac 	bl	800b9a8 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 8009050:	4803      	ldr	r0, [pc, #12]	; (8009060 <RadioSetTxContinuousWave+0x60>)
 8009052:	f002 fbcb 	bl	800b7ec <UTIL_TIMER_Start>
}
 8009056:	bf00      	nop
 8009058:	3710      	adds	r7, #16
 800905a:	46bd      	mov	sp, r7
 800905c:	bd80      	pop	{r7, pc}
 800905e:	bf00      	nop
 8009060:	20000ac0 	.word	0x20000ac0

08009064 <RadioRssi>:

static int16_t RadioRssi( RadioModems_t modem )
{
 8009064:	b580      	push	{r7, lr}
 8009066:	b082      	sub	sp, #8
 8009068:	af00      	add	r7, sp, #0
 800906a:	4603      	mov	r3, r0
 800906c:	71fb      	strb	r3, [r7, #7]
    return SUBGRF_GetRssiInst( );
 800906e:	f001 fe50 	bl	800ad12 <SUBGRF_GetRssiInst>
 8009072:	4603      	mov	r3, r0
 8009074:	b21b      	sxth	r3, r3
}
 8009076:	4618      	mov	r0, r3
 8009078:	3708      	adds	r7, #8
 800907a:	46bd      	mov	sp, r7
 800907c:	bd80      	pop	{r7, pc}

0800907e <RadioWrite>:

static void RadioWrite( uint16_t addr, uint8_t data )
{
 800907e:	b580      	push	{r7, lr}
 8009080:	b082      	sub	sp, #8
 8009082:	af00      	add	r7, sp, #0
 8009084:	4603      	mov	r3, r0
 8009086:	460a      	mov	r2, r1
 8009088:	80fb      	strh	r3, [r7, #6]
 800908a:	4613      	mov	r3, r2
 800908c:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegister( addr, data );
 800908e:	797a      	ldrb	r2, [r7, #5]
 8009090:	88fb      	ldrh	r3, [r7, #6]
 8009092:	4611      	mov	r1, r2
 8009094:	4618      	mov	r0, r3
 8009096:	f001 fecf 	bl	800ae38 <SUBGRF_WriteRegister>
}
 800909a:	bf00      	nop
 800909c:	3708      	adds	r7, #8
 800909e:	46bd      	mov	sp, r7
 80090a0:	bd80      	pop	{r7, pc}

080090a2 <RadioRead>:

static uint8_t RadioRead( uint16_t addr )
{
 80090a2:	b580      	push	{r7, lr}
 80090a4:	b082      	sub	sp, #8
 80090a6:	af00      	add	r7, sp, #0
 80090a8:	4603      	mov	r3, r0
 80090aa:	80fb      	strh	r3, [r7, #6]
    return SUBGRF_ReadRegister( addr );
 80090ac:	88fb      	ldrh	r3, [r7, #6]
 80090ae:	4618      	mov	r0, r3
 80090b0:	f001 fed6 	bl	800ae60 <SUBGRF_ReadRegister>
 80090b4:	4603      	mov	r3, r0
}
 80090b6:	4618      	mov	r0, r3
 80090b8:	3708      	adds	r7, #8
 80090ba:	46bd      	mov	sp, r7
 80090bc:	bd80      	pop	{r7, pc}

080090be <RadioWriteRegisters>:

static void RadioWriteRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 80090be:	b580      	push	{r7, lr}
 80090c0:	b082      	sub	sp, #8
 80090c2:	af00      	add	r7, sp, #0
 80090c4:	4603      	mov	r3, r0
 80090c6:	6039      	str	r1, [r7, #0]
 80090c8:	80fb      	strh	r3, [r7, #6]
 80090ca:	4613      	mov	r3, r2
 80090cc:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegisters( addr, buffer, size );
 80090ce:	797b      	ldrb	r3, [r7, #5]
 80090d0:	b29a      	uxth	r2, r3
 80090d2:	88fb      	ldrh	r3, [r7, #6]
 80090d4:	6839      	ldr	r1, [r7, #0]
 80090d6:	4618      	mov	r0, r3
 80090d8:	f001 fed6 	bl	800ae88 <SUBGRF_WriteRegisters>
}
 80090dc:	bf00      	nop
 80090de:	3708      	adds	r7, #8
 80090e0:	46bd      	mov	sp, r7
 80090e2:	bd80      	pop	{r7, pc}

080090e4 <RadioReadRegisters>:

static void RadioReadRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 80090e4:	b580      	push	{r7, lr}
 80090e6:	b082      	sub	sp, #8
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	4603      	mov	r3, r0
 80090ec:	6039      	str	r1, [r7, #0]
 80090ee:	80fb      	strh	r3, [r7, #6]
 80090f0:	4613      	mov	r3, r2
 80090f2:	717b      	strb	r3, [r7, #5]
    SUBGRF_ReadRegisters( addr, buffer, size );
 80090f4:	797b      	ldrb	r3, [r7, #5]
 80090f6:	b29a      	uxth	r2, r3
 80090f8:	88fb      	ldrh	r3, [r7, #6]
 80090fa:	6839      	ldr	r1, [r7, #0]
 80090fc:	4618      	mov	r0, r3
 80090fe:	f001 fee5 	bl	800aecc <SUBGRF_ReadRegisters>
}
 8009102:	bf00      	nop
 8009104:	3708      	adds	r7, #8
 8009106:	46bd      	mov	sp, r7
 8009108:	bd80      	pop	{r7, pc}
	...

0800910c <RadioSetMaxPayloadLength>:

static void RadioSetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 800910c:	b580      	push	{r7, lr}
 800910e:	b082      	sub	sp, #8
 8009110:	af00      	add	r7, sp, #0
 8009112:	4603      	mov	r3, r0
 8009114:	460a      	mov	r2, r1
 8009116:	71fb      	strb	r3, [r7, #7]
 8009118:	4613      	mov	r3, r2
 800911a:	71bb      	strb	r3, [r7, #6]
    if( modem == MODEM_LORA )
 800911c:	79fb      	ldrb	r3, [r7, #7]
 800911e:	2b01      	cmp	r3, #1
 8009120:	d10a      	bne.n	8009138 <RadioSetMaxPayloadLength+0x2c>
    {
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 8009122:	4a0e      	ldr	r2, [pc, #56]	; (800915c <RadioSetMaxPayloadLength+0x50>)
 8009124:	79bb      	ldrb	r3, [r7, #6]
 8009126:	7013      	strb	r3, [r2, #0]
 8009128:	4b0c      	ldr	r3, [pc, #48]	; (800915c <RadioSetMaxPayloadLength+0x50>)
 800912a:	781a      	ldrb	r2, [r3, #0]
 800912c:	4b0c      	ldr	r3, [pc, #48]	; (8009160 <RadioSetMaxPayloadLength+0x54>)
 800912e:	77da      	strb	r2, [r3, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8009130:	480c      	ldr	r0, [pc, #48]	; (8009164 <RadioSetMaxPayloadLength+0x58>)
 8009132:	f001 fd39 	bl	800aba8 <SUBGRF_SetPacketParams>
        {
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
        }
    }
}
 8009136:	e00d      	b.n	8009154 <RadioSetMaxPayloadLength+0x48>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 8009138:	4b09      	ldr	r3, [pc, #36]	; (8009160 <RadioSetMaxPayloadLength+0x54>)
 800913a:	7d5b      	ldrb	r3, [r3, #21]
 800913c:	2b01      	cmp	r3, #1
 800913e:	d109      	bne.n	8009154 <RadioSetMaxPayloadLength+0x48>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 8009140:	4a06      	ldr	r2, [pc, #24]	; (800915c <RadioSetMaxPayloadLength+0x50>)
 8009142:	79bb      	ldrb	r3, [r7, #6]
 8009144:	7013      	strb	r3, [r2, #0]
 8009146:	4b05      	ldr	r3, [pc, #20]	; (800915c <RadioSetMaxPayloadLength+0x50>)
 8009148:	781a      	ldrb	r2, [r3, #0]
 800914a:	4b05      	ldr	r3, [pc, #20]	; (8009160 <RadioSetMaxPayloadLength+0x54>)
 800914c:	759a      	strb	r2, [r3, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800914e:	4805      	ldr	r0, [pc, #20]	; (8009164 <RadioSetMaxPayloadLength+0x58>)
 8009150:	f001 fd2a 	bl	800aba8 <SUBGRF_SetPacketParams>
}
 8009154:	bf00      	nop
 8009156:	3708      	adds	r7, #8
 8009158:	46bd      	mov	sp, r7
 800915a:	bd80      	pop	{r7, pc}
 800915c:	20000015 	.word	0x20000015
 8009160:	20000a64 	.word	0x20000a64
 8009164:	20000a72 	.word	0x20000a72

08009168 <RadioSetPublicNetwork>:

static void RadioSetPublicNetwork( bool enable )
{
 8009168:	b580      	push	{r7, lr}
 800916a:	b082      	sub	sp, #8
 800916c:	af00      	add	r7, sp, #0
 800916e:	4603      	mov	r3, r0
 8009170:	71fb      	strb	r3, [r7, #7]
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 8009172:	4a13      	ldr	r2, [pc, #76]	; (80091c0 <RadioSetPublicNetwork+0x58>)
 8009174:	79fb      	ldrb	r3, [r7, #7]
 8009176:	7313      	strb	r3, [r2, #12]
 8009178:	4b11      	ldr	r3, [pc, #68]	; (80091c0 <RadioSetPublicNetwork+0x58>)
 800917a:	7b1a      	ldrb	r2, [r3, #12]
 800917c:	4b10      	ldr	r3, [pc, #64]	; (80091c0 <RadioSetPublicNetwork+0x58>)
 800917e:	735a      	strb	r2, [r3, #13]

    RadioSetModem( MODEM_LORA );
 8009180:	2001      	movs	r0, #1
 8009182:	f7ff f819 	bl	80081b8 <RadioSetModem>
    if( enable == true )
 8009186:	79fb      	ldrb	r3, [r7, #7]
 8009188:	2b00      	cmp	r3, #0
 800918a:	d00a      	beq.n	80091a2 <RadioSetPublicNetwork+0x3a>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 800918c:	2134      	movs	r1, #52	; 0x34
 800918e:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 8009192:	f001 fe51 	bl	800ae38 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 8009196:	2144      	movs	r1, #68	; 0x44
 8009198:	f240 7041 	movw	r0, #1857	; 0x741
 800919c:	f001 fe4c 	bl	800ae38 <SUBGRF_WriteRegister>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
    }
}
 80091a0:	e009      	b.n	80091b6 <RadioSetPublicNetwork+0x4e>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 80091a2:	2114      	movs	r1, #20
 80091a4:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 80091a8:	f001 fe46 	bl	800ae38 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 80091ac:	2124      	movs	r1, #36	; 0x24
 80091ae:	f240 7041 	movw	r0, #1857	; 0x741
 80091b2:	f001 fe41 	bl	800ae38 <SUBGRF_WriteRegister>
}
 80091b6:	bf00      	nop
 80091b8:	3708      	adds	r7, #8
 80091ba:	46bd      	mov	sp, r7
 80091bc:	bd80      	pop	{r7, pc}
 80091be:	bf00      	nop
 80091c0:	20000a64 	.word	0x20000a64

080091c4 <RadioGetWakeupTime>:

static uint32_t RadioGetWakeupTime( void )
{
 80091c4:	b580      	push	{r7, lr}
 80091c6:	af00      	add	r7, sp, #0
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 80091c8:	f001 ff86 	bl	800b0d8 <SUBGRF_GetRadioWakeUpTime>
 80091cc:	4603      	mov	r3, r0
 80091ce:	3303      	adds	r3, #3
}
 80091d0:	4618      	mov	r0, r3
 80091d2:	bd80      	pop	{r7, pc}

080091d4 <RadioOnTxTimeoutIrq>:

static void RadioOnTxTimeoutIrq( void *context )
{
 80091d4:	b580      	push	{r7, lr}
 80091d6:	b082      	sub	sp, #8
 80091d8:	af00      	add	r7, sp, #0
 80091da:	6078      	str	r0, [r7, #4]
    RADIO_TX_TIMEOUT_PROCESS();
 80091dc:	f000 f80e 	bl	80091fc <RadioOnTxTimeoutProcess>
}
 80091e0:	bf00      	nop
 80091e2:	3708      	adds	r7, #8
 80091e4:	46bd      	mov	sp, r7
 80091e6:	bd80      	pop	{r7, pc}

080091e8 <RadioOnRxTimeoutIrq>:

static void RadioOnRxTimeoutIrq( void *context )
{
 80091e8:	b580      	push	{r7, lr}
 80091ea:	b082      	sub	sp, #8
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	6078      	str	r0, [r7, #4]
    RADIO_RX_TIMEOUT_PROCESS();
 80091f0:	f000 f818 	bl	8009224 <RadioOnRxTimeoutProcess>
}
 80091f4:	bf00      	nop
 80091f6:	3708      	adds	r7, #8
 80091f8:	46bd      	mov	sp, r7
 80091fa:	bd80      	pop	{r7, pc}

080091fc <RadioOnTxTimeoutProcess>:

static void RadioOnTxTimeoutProcess( void )
{
 80091fc:	b580      	push	{r7, lr}
 80091fe:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_TX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8009200:	4b07      	ldr	r3, [pc, #28]	; (8009220 <RadioOnTxTimeoutProcess+0x24>)
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	2b00      	cmp	r3, #0
 8009206:	d008      	beq.n	800921a <RadioOnTxTimeoutProcess+0x1e>
 8009208:	4b05      	ldr	r3, [pc, #20]	; (8009220 <RadioOnTxTimeoutProcess+0x24>)
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	685b      	ldr	r3, [r3, #4]
 800920e:	2b00      	cmp	r3, #0
 8009210:	d003      	beq.n	800921a <RadioOnTxTimeoutProcess+0x1e>
    {
        RadioEvents->TxTimeout( );
 8009212:	4b03      	ldr	r3, [pc, #12]	; (8009220 <RadioOnTxTimeoutProcess+0x24>)
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	685b      	ldr	r3, [r3, #4]
 8009218:	4798      	blx	r3
    }
}
 800921a:	bf00      	nop
 800921c:	bd80      	pop	{r7, pc}
 800921e:	bf00      	nop
 8009220:	20000a60 	.word	0x20000a60

08009224 <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 8009224:	b580      	push	{r7, lr}
 8009226:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_RX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8009228:	4b07      	ldr	r3, [pc, #28]	; (8009248 <RadioOnRxTimeoutProcess+0x24>)
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	2b00      	cmp	r3, #0
 800922e:	d008      	beq.n	8009242 <RadioOnRxTimeoutProcess+0x1e>
 8009230:	4b05      	ldr	r3, [pc, #20]	; (8009248 <RadioOnRxTimeoutProcess+0x24>)
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	68db      	ldr	r3, [r3, #12]
 8009236:	2b00      	cmp	r3, #0
 8009238:	d003      	beq.n	8009242 <RadioOnRxTimeoutProcess+0x1e>
    {
        RadioEvents->RxTimeout( );
 800923a:	4b03      	ldr	r3, [pc, #12]	; (8009248 <RadioOnRxTimeoutProcess+0x24>)
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	68db      	ldr	r3, [r3, #12]
 8009240:	4798      	blx	r3
    }
}
 8009242:	bf00      	nop
 8009244:	bd80      	pop	{r7, pc}
 8009246:	bf00      	nop
 8009248:	20000a60 	.word	0x20000a60

0800924c <RadioOnDioIrq>:

static void RadioOnDioIrq( RadioIrqMasks_t radioIrq )
{
 800924c:	b580      	push	{r7, lr}
 800924e:	b082      	sub	sp, #8
 8009250:	af00      	add	r7, sp, #0
 8009252:	4603      	mov	r3, r0
 8009254:	80fb      	strh	r3, [r7, #6]
    SubgRf.RadioIrq = radioIrq;
 8009256:	4a05      	ldr	r2, [pc, #20]	; (800926c <RadioOnDioIrq+0x20>)
 8009258:	88fb      	ldrh	r3, [r7, #6]
 800925a:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54

    RADIO_IRQ_PROCESS();
 800925e:	f000 f807 	bl	8009270 <RadioIrqProcess>
}
 8009262:	bf00      	nop
 8009264:	3708      	adds	r7, #8
 8009266:	46bd      	mov	sp, r7
 8009268:	bd80      	pop	{r7, pc}
 800926a:	bf00      	nop
 800926c:	20000a64 	.word	0x20000a64

08009270 <RadioIrqProcess>:

static void RadioIrqProcess( void )
{
 8009270:	b5b0      	push	{r4, r5, r7, lr}
 8009272:	b082      	sub	sp, #8
 8009274:	af00      	add	r7, sp, #0
    uint8_t size = 0;
 8009276:	2300      	movs	r3, #0
 8009278:	71fb      	strb	r3, [r7, #7]
    int32_t cfo = 0;
 800927a:	2300      	movs	r3, #0
 800927c:	603b      	str	r3, [r7, #0]

    switch( SubgRf.RadioIrq )
 800927e:	4ba5      	ldr	r3, [pc, #660]	; (8009514 <RadioIrqProcess+0x2a4>)
 8009280:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8009284:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009288:	f000 810d 	beq.w	80094a6 <RadioIrqProcess+0x236>
 800928c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009290:	f300 81c0 	bgt.w	8009614 <RadioIrqProcess+0x3a4>
 8009294:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009298:	f000 80f1 	beq.w	800947e <RadioIrqProcess+0x20e>
 800929c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80092a0:	f300 81b8 	bgt.w	8009614 <RadioIrqProcess+0x3a4>
 80092a4:	2b80      	cmp	r3, #128	; 0x80
 80092a6:	f000 80d6 	beq.w	8009456 <RadioIrqProcess+0x1e6>
 80092aa:	2b80      	cmp	r3, #128	; 0x80
 80092ac:	f300 81b2 	bgt.w	8009614 <RadioIrqProcess+0x3a4>
 80092b0:	2b20      	cmp	r3, #32
 80092b2:	dc49      	bgt.n	8009348 <RadioIrqProcess+0xd8>
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	f340 81ad 	ble.w	8009614 <RadioIrqProcess+0x3a4>
 80092ba:	3b01      	subs	r3, #1
 80092bc:	2b1f      	cmp	r3, #31
 80092be:	f200 81a9 	bhi.w	8009614 <RadioIrqProcess+0x3a4>
 80092c2:	a201      	add	r2, pc, #4	; (adr r2, 80092c8 <RadioIrqProcess+0x58>)
 80092c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092c8:	08009351 	.word	0x08009351
 80092cc:	0800938b 	.word	0x0800938b
 80092d0:	08009615 	.word	0x08009615
 80092d4:	08009531 	.word	0x08009531
 80092d8:	08009615 	.word	0x08009615
 80092dc:	08009615 	.word	0x08009615
 80092e0:	08009615 	.word	0x08009615
 80092e4:	0800959f 	.word	0x0800959f
 80092e8:	08009615 	.word	0x08009615
 80092ec:	08009615 	.word	0x08009615
 80092f0:	08009615 	.word	0x08009615
 80092f4:	08009615 	.word	0x08009615
 80092f8:	08009615 	.word	0x08009615
 80092fc:	08009615 	.word	0x08009615
 8009300:	08009615 	.word	0x08009615
 8009304:	08009615 	.word	0x08009615
 8009308:	08009615 	.word	0x08009615
 800930c:	08009615 	.word	0x08009615
 8009310:	08009615 	.word	0x08009615
 8009314:	08009615 	.word	0x08009615
 8009318:	08009615 	.word	0x08009615
 800931c:	08009615 	.word	0x08009615
 8009320:	08009615 	.word	0x08009615
 8009324:	08009615 	.word	0x08009615
 8009328:	08009615 	.word	0x08009615
 800932c:	08009615 	.word	0x08009615
 8009330:	08009615 	.word	0x08009615
 8009334:	08009615 	.word	0x08009615
 8009338:	08009615 	.word	0x08009615
 800933c:	08009615 	.word	0x08009615
 8009340:	08009615 	.word	0x08009615
 8009344:	080095af 	.word	0x080095af
 8009348:	2b40      	cmp	r3, #64	; 0x40
 800934a:	f000 814b 	beq.w	80095e4 <RadioIrqProcess+0x374>
        MW_LOG( TS_ON, VLEVEL_M,  "HOP\r\n" );
        break;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    default:
        break;
 800934e:	e161      	b.n	8009614 <RadioIrqProcess+0x3a4>
        TimerStop( &TxTimeoutTimer );
 8009350:	4871      	ldr	r0, [pc, #452]	; (8009518 <RadioIrqProcess+0x2a8>)
 8009352:	f002 fab9 	bl	800b8c8 <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 8009356:	2000      	movs	r0, #0
 8009358:	f000 ffea 	bl	800a330 <SUBGRF_SetStandby>
        if( RFW_Is_LongPacketModeEnabled() == 1 )
 800935c:	f002 f860 	bl	800b420 <RFW_Is_LongPacketModeEnabled>
 8009360:	4603      	mov	r3, r0
 8009362:	2b01      	cmp	r3, #1
 8009364:	d101      	bne.n	800936a <RadioIrqProcess+0xfa>
            RFW_DeInit_TxLongPacket( );
 8009366:	f002 f884 	bl	800b472 <RFW_DeInit_TxLongPacket>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 800936a:	4b6c      	ldr	r3, [pc, #432]	; (800951c <RadioIrqProcess+0x2ac>)
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	2b00      	cmp	r3, #0
 8009370:	f000 8152 	beq.w	8009618 <RadioIrqProcess+0x3a8>
 8009374:	4b69      	ldr	r3, [pc, #420]	; (800951c <RadioIrqProcess+0x2ac>)
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	2b00      	cmp	r3, #0
 800937c:	f000 814c 	beq.w	8009618 <RadioIrqProcess+0x3a8>
            RadioEvents->TxDone( );
 8009380:	4b66      	ldr	r3, [pc, #408]	; (800951c <RadioIrqProcess+0x2ac>)
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	4798      	blx	r3
        break;
 8009388:	e146      	b.n	8009618 <RadioIrqProcess+0x3a8>
        TimerStop( &RxTimeoutTimer );
 800938a:	4865      	ldr	r0, [pc, #404]	; (8009520 <RadioIrqProcess+0x2b0>)
 800938c:	f002 fa9c 	bl	800b8c8 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8009390:	4b60      	ldr	r3, [pc, #384]	; (8009514 <RadioIrqProcess+0x2a4>)
 8009392:	785b      	ldrb	r3, [r3, #1]
 8009394:	f083 0301 	eor.w	r3, r3, #1
 8009398:	b2db      	uxtb	r3, r3
 800939a:	2b00      	cmp	r3, #0
 800939c:	d014      	beq.n	80093c8 <RadioIrqProcess+0x158>
            SUBGRF_SetStandby( STDBY_RC );
 800939e:	2000      	movs	r0, #0
 80093a0:	f000 ffc6 	bl	800a330 <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( SUBGHZ_RTCCTLR, 0x00 );
 80093a4:	2100      	movs	r1, #0
 80093a6:	f640 1002 	movw	r0, #2306	; 0x902
 80093aa:	f001 fd45 	bl	800ae38 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( SUBGHZ_EVENTMASKR, SUBGRF_ReadRegister( SUBGHZ_EVENTMASKR ) | ( 1 << 1 ) );
 80093ae:	f640 1044 	movw	r0, #2372	; 0x944
 80093b2:	f001 fd55 	bl	800ae60 <SUBGRF_ReadRegister>
 80093b6:	4603      	mov	r3, r0
 80093b8:	f043 0302 	orr.w	r3, r3, #2
 80093bc:	b2db      	uxtb	r3, r3
 80093be:	4619      	mov	r1, r3
 80093c0:	f640 1044 	movw	r0, #2372	; 0x944
 80093c4:	f001 fd38 	bl	800ae38 <SUBGRF_WriteRegister>
        SUBGRF_GetPayload( RadioBuffer, &size, 255 );
 80093c8:	1dfb      	adds	r3, r7, #7
 80093ca:	22ff      	movs	r2, #255	; 0xff
 80093cc:	4619      	mov	r1, r3
 80093ce:	4855      	ldr	r0, [pc, #340]	; (8009524 <RadioIrqProcess+0x2b4>)
 80093d0:	f000 fe7e 	bl	800a0d0 <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &( SubgRf.PacketStatus ) );
 80093d4:	4854      	ldr	r0, [pc, #336]	; (8009528 <RadioIrqProcess+0x2b8>)
 80093d6:	f001 fcdd 	bl	800ad94 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 80093da:	4b50      	ldr	r3, [pc, #320]	; (800951c <RadioIrqProcess+0x2ac>)
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	2b00      	cmp	r3, #0
 80093e0:	f000 811c 	beq.w	800961c <RadioIrqProcess+0x3ac>
 80093e4:	4b4d      	ldr	r3, [pc, #308]	; (800951c <RadioIrqProcess+0x2ac>)
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	689b      	ldr	r3, [r3, #8]
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	f000 8116 	beq.w	800961c <RadioIrqProcess+0x3ac>
            switch( SubgRf.PacketStatus.packetType )
 80093f0:	4b48      	ldr	r3, [pc, #288]	; (8009514 <RadioIrqProcess+0x2a4>)
 80093f2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80093f6:	2b01      	cmp	r3, #1
 80093f8:	d10e      	bne.n	8009418 <RadioIrqProcess+0x1a8>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt,
 80093fa:	4b48      	ldr	r3, [pc, #288]	; (800951c <RadioIrqProcess+0x2ac>)
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	689c      	ldr	r4, [r3, #8]
 8009400:	79fb      	ldrb	r3, [r7, #7]
 8009402:	b299      	uxth	r1, r3
 8009404:	4b43      	ldr	r3, [pc, #268]	; (8009514 <RadioIrqProcess+0x2a4>)
 8009406:	f993 3030 	ldrsb.w	r3, [r3, #48]	; 0x30
 800940a:	b21a      	sxth	r2, r3
 800940c:	4b41      	ldr	r3, [pc, #260]	; (8009514 <RadioIrqProcess+0x2a4>)
 800940e:	f993 3031 	ldrsb.w	r3, [r3, #49]	; 0x31
 8009412:	4844      	ldr	r0, [pc, #272]	; (8009524 <RadioIrqProcess+0x2b4>)
 8009414:	47a0      	blx	r4
                break;
 8009416:	e01d      	b.n	8009454 <RadioIrqProcess+0x1e4>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 8009418:	4b3e      	ldr	r3, [pc, #248]	; (8009514 <RadioIrqProcess+0x2a4>)
 800941a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800941c:	463a      	mov	r2, r7
 800941e:	4611      	mov	r1, r2
 8009420:	4618      	mov	r0, r3
 8009422:	f001 ff4b 	bl	800b2bc <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, ( int8_t ) DIVR( cfo, 1000 ) );
 8009426:	4b3d      	ldr	r3, [pc, #244]	; (800951c <RadioIrqProcess+0x2ac>)
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	689c      	ldr	r4, [r3, #8]
 800942c:	79fb      	ldrb	r3, [r7, #7]
 800942e:	b299      	uxth	r1, r3
 8009430:	4b38      	ldr	r3, [pc, #224]	; (8009514 <RadioIrqProcess+0x2a4>)
 8009432:	f993 3029 	ldrsb.w	r3, [r3, #41]	; 0x29
 8009436:	b218      	sxth	r0, r3
 8009438:	683b      	ldr	r3, [r7, #0]
 800943a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800943e:	4a3b      	ldr	r2, [pc, #236]	; (800952c <RadioIrqProcess+0x2bc>)
 8009440:	fb82 5203 	smull	r5, r2, r2, r3
 8009444:	1192      	asrs	r2, r2, #6
 8009446:	17db      	asrs	r3, r3, #31
 8009448:	1ad3      	subs	r3, r2, r3
 800944a:	b25b      	sxtb	r3, r3
 800944c:	4602      	mov	r2, r0
 800944e:	4835      	ldr	r0, [pc, #212]	; (8009524 <RadioIrqProcess+0x2b4>)
 8009450:	47a0      	blx	r4
                break;
 8009452:	bf00      	nop
        break;
 8009454:	e0e2      	b.n	800961c <RadioIrqProcess+0x3ac>
        SUBGRF_SetStandby( STDBY_RC );
 8009456:	2000      	movs	r0, #0
 8009458:	f000 ff6a 	bl	800a330 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 800945c:	4b2f      	ldr	r3, [pc, #188]	; (800951c <RadioIrqProcess+0x2ac>)
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	2b00      	cmp	r3, #0
 8009462:	f000 80dd 	beq.w	8009620 <RadioIrqProcess+0x3b0>
 8009466:	4b2d      	ldr	r3, [pc, #180]	; (800951c <RadioIrqProcess+0x2ac>)
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	699b      	ldr	r3, [r3, #24]
 800946c:	2b00      	cmp	r3, #0
 800946e:	f000 80d7 	beq.w	8009620 <RadioIrqProcess+0x3b0>
            RadioEvents->CadDone( false );
 8009472:	4b2a      	ldr	r3, [pc, #168]	; (800951c <RadioIrqProcess+0x2ac>)
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	699b      	ldr	r3, [r3, #24]
 8009478:	2000      	movs	r0, #0
 800947a:	4798      	blx	r3
        break;
 800947c:	e0d0      	b.n	8009620 <RadioIrqProcess+0x3b0>
        SUBGRF_SetStandby( STDBY_RC );
 800947e:	2000      	movs	r0, #0
 8009480:	f000 ff56 	bl	800a330 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8009484:	4b25      	ldr	r3, [pc, #148]	; (800951c <RadioIrqProcess+0x2ac>)
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	2b00      	cmp	r3, #0
 800948a:	f000 80cb 	beq.w	8009624 <RadioIrqProcess+0x3b4>
 800948e:	4b23      	ldr	r3, [pc, #140]	; (800951c <RadioIrqProcess+0x2ac>)
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	699b      	ldr	r3, [r3, #24]
 8009494:	2b00      	cmp	r3, #0
 8009496:	f000 80c5 	beq.w	8009624 <RadioIrqProcess+0x3b4>
            RadioEvents->CadDone( true );
 800949a:	4b20      	ldr	r3, [pc, #128]	; (800951c <RadioIrqProcess+0x2ac>)
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	699b      	ldr	r3, [r3, #24]
 80094a0:	2001      	movs	r0, #1
 80094a2:	4798      	blx	r3
        break;
 80094a4:	e0be      	b.n	8009624 <RadioIrqProcess+0x3b4>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 80094a6:	f000 fdf9 	bl	800a09c <SUBGRF_GetOperatingMode>
 80094aa:	4603      	mov	r3, r0
 80094ac:	2b04      	cmp	r3, #4
 80094ae:	d115      	bne.n	80094dc <RadioIrqProcess+0x26c>
            TimerStop( &TxTimeoutTimer );
 80094b0:	4819      	ldr	r0, [pc, #100]	; (8009518 <RadioIrqProcess+0x2a8>)
 80094b2:	f002 fa09 	bl	800b8c8 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 80094b6:	2000      	movs	r0, #0
 80094b8:	f000 ff3a 	bl	800a330 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 80094bc:	4b17      	ldr	r3, [pc, #92]	; (800951c <RadioIrqProcess+0x2ac>)
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	f000 80b1 	beq.w	8009628 <RadioIrqProcess+0x3b8>
 80094c6:	4b15      	ldr	r3, [pc, #84]	; (800951c <RadioIrqProcess+0x2ac>)
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	685b      	ldr	r3, [r3, #4]
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	f000 80ab 	beq.w	8009628 <RadioIrqProcess+0x3b8>
                RadioEvents->TxTimeout( );
 80094d2:	4b12      	ldr	r3, [pc, #72]	; (800951c <RadioIrqProcess+0x2ac>)
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	685b      	ldr	r3, [r3, #4]
 80094d8:	4798      	blx	r3
        break;
 80094da:	e0a5      	b.n	8009628 <RadioIrqProcess+0x3b8>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 80094dc:	f000 fdde 	bl	800a09c <SUBGRF_GetOperatingMode>
 80094e0:	4603      	mov	r3, r0
 80094e2:	2b05      	cmp	r3, #5
 80094e4:	f040 80a0 	bne.w	8009628 <RadioIrqProcess+0x3b8>
            TimerStop( &RxTimeoutTimer );
 80094e8:	480d      	ldr	r0, [pc, #52]	; (8009520 <RadioIrqProcess+0x2b0>)
 80094ea:	f002 f9ed 	bl	800b8c8 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 80094ee:	2000      	movs	r0, #0
 80094f0:	f000 ff1e 	bl	800a330 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 80094f4:	4b09      	ldr	r3, [pc, #36]	; (800951c <RadioIrqProcess+0x2ac>)
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	f000 8095 	beq.w	8009628 <RadioIrqProcess+0x3b8>
 80094fe:	4b07      	ldr	r3, [pc, #28]	; (800951c <RadioIrqProcess+0x2ac>)
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	68db      	ldr	r3, [r3, #12]
 8009504:	2b00      	cmp	r3, #0
 8009506:	f000 808f 	beq.w	8009628 <RadioIrqProcess+0x3b8>
                RadioEvents->RxTimeout( );
 800950a:	4b04      	ldr	r3, [pc, #16]	; (800951c <RadioIrqProcess+0x2ac>)
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	68db      	ldr	r3, [r3, #12]
 8009510:	4798      	blx	r3
        break;
 8009512:	e089      	b.n	8009628 <RadioIrqProcess+0x3b8>
 8009514:	20000a64 	.word	0x20000a64
 8009518:	20000ac0 	.word	0x20000ac0
 800951c:	20000a60 	.word	0x20000a60
 8009520:	20000ad8 	.word	0x20000ad8
 8009524:	20000960 	.word	0x20000960
 8009528:	20000a88 	.word	0x20000a88
 800952c:	10624dd3 	.word	0x10624dd3
        if( SubgRf.RxDcPreambleDetectTimeout != 0 )
 8009530:	4b44      	ldr	r3, [pc, #272]	; (8009644 <RadioIrqProcess+0x3d4>)
 8009532:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009534:	2b00      	cmp	r3, #0
 8009536:	d079      	beq.n	800962c <RadioIrqProcess+0x3bc>
            Radio.Write( SUBGHZ_RTCPRDR2, ( SubgRf.RxDcPreambleDetectTimeout >> 16 ) & 0xFF ); /*Update Radio RTC Period MSB*/
 8009538:	4a43      	ldr	r2, [pc, #268]	; (8009648 <RadioIrqProcess+0x3d8>)
 800953a:	4b42      	ldr	r3, [pc, #264]	; (8009644 <RadioIrqProcess+0x3d4>)
 800953c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800953e:	0c1b      	lsrs	r3, r3, #16
 8009540:	b2db      	uxtb	r3, r3
 8009542:	4619      	mov	r1, r3
 8009544:	f640 1003 	movw	r0, #2307	; 0x903
 8009548:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR1, ( SubgRf.RxDcPreambleDetectTimeout >> 8 ) & 0xFF ); /*Update Radio RTC Period MidByte*/
 800954a:	4a3f      	ldr	r2, [pc, #252]	; (8009648 <RadioIrqProcess+0x3d8>)
 800954c:	4b3d      	ldr	r3, [pc, #244]	; (8009644 <RadioIrqProcess+0x3d4>)
 800954e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009550:	0a1b      	lsrs	r3, r3, #8
 8009552:	b2db      	uxtb	r3, r3
 8009554:	4619      	mov	r1, r3
 8009556:	f640 1004 	movw	r0, #2308	; 0x904
 800955a:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR0, ( SubgRf.RxDcPreambleDetectTimeout ) & 0xFF ); /*Update Radio RTC Period lsb*/
 800955c:	4a3a      	ldr	r2, [pc, #232]	; (8009648 <RadioIrqProcess+0x3d8>)
 800955e:	4b39      	ldr	r3, [pc, #228]	; (8009644 <RadioIrqProcess+0x3d4>)
 8009560:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009562:	b2db      	uxtb	r3, r3
 8009564:	4619      	mov	r1, r3
 8009566:	f640 1005 	movw	r0, #2309	; 0x905
 800956a:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCCTLR, Radio.Read( SUBGHZ_RTCCTLR ) | 0x1 ); /*restart Radio RTC*/
 800956c:	4c36      	ldr	r4, [pc, #216]	; (8009648 <RadioIrqProcess+0x3d8>)
 800956e:	4b37      	ldr	r3, [pc, #220]	; (800964c <RadioIrqProcess+0x3dc>)
 8009570:	f640 1002 	movw	r0, #2306	; 0x902
 8009574:	4798      	blx	r3
 8009576:	4603      	mov	r3, r0
 8009578:	f043 0301 	orr.w	r3, r3, #1
 800957c:	b2db      	uxtb	r3, r3
 800957e:	4619      	mov	r1, r3
 8009580:	f640 1002 	movw	r0, #2306	; 0x902
 8009584:	47a0      	blx	r4
            SubgRf.RxDcPreambleDetectTimeout = 0;
 8009586:	4b2f      	ldr	r3, [pc, #188]	; (8009644 <RadioIrqProcess+0x3d4>)
 8009588:	2200      	movs	r2, #0
 800958a:	659a      	str	r2, [r3, #88]	; 0x58
            SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 800958c:	2300      	movs	r3, #0
 800958e:	2200      	movs	r2, #0
 8009590:	f240 2162 	movw	r1, #610	; 0x262
 8009594:	f240 2062 	movw	r0, #610	; 0x262
 8009598:	f001 f89e 	bl	800a6d8 <SUBGRF_SetDioIrqParams>
        break;
 800959c:	e046      	b.n	800962c <RadioIrqProcess+0x3bc>
        if( 1UL == RFW_Is_Init( ) )
 800959e:	f001 ff38 	bl	800b412 <RFW_Is_Init>
 80095a2:	4603      	mov	r3, r0
 80095a4:	2b01      	cmp	r3, #1
 80095a6:	d143      	bne.n	8009630 <RadioIrqProcess+0x3c0>
            RFW_ReceivePayload( );
 80095a8:	f001 ff69 	bl	800b47e <RFW_ReceivePayload>
        break;
 80095ac:	e040      	b.n	8009630 <RadioIrqProcess+0x3c0>
        TimerStop( &RxTimeoutTimer );
 80095ae:	4828      	ldr	r0, [pc, #160]	; (8009650 <RadioIrqProcess+0x3e0>)
 80095b0:	f002 f98a 	bl	800b8c8 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 80095b4:	4b23      	ldr	r3, [pc, #140]	; (8009644 <RadioIrqProcess+0x3d4>)
 80095b6:	785b      	ldrb	r3, [r3, #1]
 80095b8:	f083 0301 	eor.w	r3, r3, #1
 80095bc:	b2db      	uxtb	r3, r3
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d002      	beq.n	80095c8 <RadioIrqProcess+0x358>
            SUBGRF_SetStandby( STDBY_RC );
 80095c2:	2000      	movs	r0, #0
 80095c4:	f000 feb4 	bl	800a330 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 80095c8:	4b22      	ldr	r3, [pc, #136]	; (8009654 <RadioIrqProcess+0x3e4>)
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d031      	beq.n	8009634 <RadioIrqProcess+0x3c4>
 80095d0:	4b20      	ldr	r3, [pc, #128]	; (8009654 <RadioIrqProcess+0x3e4>)
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	68db      	ldr	r3, [r3, #12]
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d02c      	beq.n	8009634 <RadioIrqProcess+0x3c4>
            RadioEvents->RxTimeout( );
 80095da:	4b1e      	ldr	r3, [pc, #120]	; (8009654 <RadioIrqProcess+0x3e4>)
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	68db      	ldr	r3, [r3, #12]
 80095e0:	4798      	blx	r3
        break;
 80095e2:	e027      	b.n	8009634 <RadioIrqProcess+0x3c4>
        if( SubgRf.RxContinuous == false )
 80095e4:	4b17      	ldr	r3, [pc, #92]	; (8009644 <RadioIrqProcess+0x3d4>)
 80095e6:	785b      	ldrb	r3, [r3, #1]
 80095e8:	f083 0301 	eor.w	r3, r3, #1
 80095ec:	b2db      	uxtb	r3, r3
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d002      	beq.n	80095f8 <RadioIrqProcess+0x388>
            SUBGRF_SetStandby( STDBY_RC );
 80095f2:	2000      	movs	r0, #0
 80095f4:	f000 fe9c 	bl	800a330 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 80095f8:	4b16      	ldr	r3, [pc, #88]	; (8009654 <RadioIrqProcess+0x3e4>)
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d01b      	beq.n	8009638 <RadioIrqProcess+0x3c8>
 8009600:	4b14      	ldr	r3, [pc, #80]	; (8009654 <RadioIrqProcess+0x3e4>)
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	691b      	ldr	r3, [r3, #16]
 8009606:	2b00      	cmp	r3, #0
 8009608:	d016      	beq.n	8009638 <RadioIrqProcess+0x3c8>
            RadioEvents->RxError( );
 800960a:	4b12      	ldr	r3, [pc, #72]	; (8009654 <RadioIrqProcess+0x3e4>)
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	691b      	ldr	r3, [r3, #16]
 8009610:	4798      	blx	r3
        break;
 8009612:	e011      	b.n	8009638 <RadioIrqProcess+0x3c8>
        break;
 8009614:	bf00      	nop
 8009616:	e010      	b.n	800963a <RadioIrqProcess+0x3ca>
        break;
 8009618:	bf00      	nop
 800961a:	e00e      	b.n	800963a <RadioIrqProcess+0x3ca>
        break;
 800961c:	bf00      	nop
 800961e:	e00c      	b.n	800963a <RadioIrqProcess+0x3ca>
        break;
 8009620:	bf00      	nop
 8009622:	e00a      	b.n	800963a <RadioIrqProcess+0x3ca>
        break;
 8009624:	bf00      	nop
 8009626:	e008      	b.n	800963a <RadioIrqProcess+0x3ca>
        break;
 8009628:	bf00      	nop
 800962a:	e006      	b.n	800963a <RadioIrqProcess+0x3ca>
        break;
 800962c:	bf00      	nop
 800962e:	e004      	b.n	800963a <RadioIrqProcess+0x3ca>
        break;
 8009630:	bf00      	nop
 8009632:	e002      	b.n	800963a <RadioIrqProcess+0x3ca>
        break;
 8009634:	bf00      	nop
 8009636:	e000      	b.n	800963a <RadioIrqProcess+0x3ca>
        break;
 8009638:	bf00      	nop
    }
}
 800963a:	bf00      	nop
 800963c:	3708      	adds	r7, #8
 800963e:	46bd      	mov	sp, r7
 8009640:	bdb0      	pop	{r4, r5, r7, pc}
 8009642:	bf00      	nop
 8009644:	20000a64 	.word	0x20000a64
 8009648:	0800907f 	.word	0x0800907f
 800964c:	080090a3 	.word	0x080090a3
 8009650:	20000ad8 	.word	0x20000ad8
 8009654:	20000a60 	.word	0x20000a60

08009658 <RadioTxPrbs>:

static void RadioTxPrbs( void )
{
 8009658:	b580      	push	{r7, lr}
 800965a:	af00      	add	r7, sp, #0
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 800965c:	4b09      	ldr	r3, [pc, #36]	; (8009684 <RadioTxPrbs+0x2c>)
 800965e:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8009662:	2101      	movs	r1, #1
 8009664:	4618      	mov	r0, r3
 8009666:	f001 fcdb 	bl	800b020 <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_GPKTCTL1AR, 0x2d );  // sel mode prbs9 instead of preamble
 800966a:	4b07      	ldr	r3, [pc, #28]	; (8009688 <RadioTxPrbs+0x30>)
 800966c:	212d      	movs	r1, #45	; 0x2d
 800966e:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8009672:	4798      	blx	r3
    SUBGRF_SetTxInfinitePreamble( );
 8009674:	f000 ff1f 	bl	800a4b6 <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 8009678:	4804      	ldr	r0, [pc, #16]	; (800968c <RadioTxPrbs+0x34>)
 800967a:	f000 fe75 	bl	800a368 <SUBGRF_SetTx>
}
 800967e:	bf00      	nop
 8009680:	bd80      	pop	{r7, pc}
 8009682:	bf00      	nop
 8009684:	20000a64 	.word	0x20000a64
 8009688:	0800907f 	.word	0x0800907f
 800968c:	000fffff 	.word	0x000fffff

08009690 <RadioTxCw>:

static void RadioTxCw( int8_t power )
{
 8009690:	b580      	push	{r7, lr}
 8009692:	b084      	sub	sp, #16
 8009694:	af00      	add	r7, sp, #0
 8009696:	4603      	mov	r3, r0
 8009698:	71fb      	strb	r3, [r7, #7]
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 800969a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800969e:	4618      	mov	r0, r3
 80096a0:	f001 fce6 	bl	800b070 <SUBGRF_SetRfTxPower>
 80096a4:	4603      	mov	r3, r0
 80096a6:	73fb      	strb	r3, [r7, #15]
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 80096a8:	210e      	movs	r1, #14
 80096aa:	f640 101f 	movw	r0, #2335	; 0x91f
 80096ae:	f001 fbc3 	bl	800ae38 <SUBGRF_WriteRegister>
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 80096b2:	7bfb      	ldrb	r3, [r7, #15]
 80096b4:	2101      	movs	r1, #1
 80096b6:	4618      	mov	r0, r3
 80096b8:	f001 fcb2 	bl	800b020 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 80096bc:	f000 fef2 	bl	800a4a4 <SUBGRF_SetTxContinuousWave>
}
 80096c0:	bf00      	nop
 80096c2:	3710      	adds	r7, #16
 80096c4:	46bd      	mov	sp, r7
 80096c6:	bd80      	pop	{r7, pc}

080096c8 <payload_integration>:

#if (RADIO_SIGFOX_ENABLE == 1)
static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 80096c8:	b480      	push	{r7}
 80096ca:	b089      	sub	sp, #36	; 0x24
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	60f8      	str	r0, [r7, #12]
 80096d0:	60b9      	str	r1, [r7, #8]
 80096d2:	4613      	mov	r3, r2
 80096d4:	71fb      	strb	r3, [r7, #7]
    uint8_t prevInt = 0;
 80096d6:	2300      	movs	r3, #0
 80096d8:	77fb      	strb	r3, [r7, #31]
    uint8_t currBit;
    uint8_t index_bit;
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int32_t i = 0;
 80096da:	2300      	movs	r3, #0
 80096dc:	61bb      	str	r3, [r7, #24]

    for( i = 0; i < size; i++ )
 80096de:	2300      	movs	r3, #0
 80096e0:	61bb      	str	r3, [r7, #24]
 80096e2:	e011      	b.n	8009708 <payload_integration+0x40>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 80096e4:	69bb      	ldr	r3, [r7, #24]
 80096e6:	68ba      	ldr	r2, [r7, #8]
 80096e8:	4413      	add	r3, r2
 80096ea:	781a      	ldrb	r2, [r3, #0]
 80096ec:	69bb      	ldr	r3, [r7, #24]
 80096ee:	68b9      	ldr	r1, [r7, #8]
 80096f0:	440b      	add	r3, r1
 80096f2:	43d2      	mvns	r2, r2
 80096f4:	b2d2      	uxtb	r2, r2
 80096f6:	701a      	strb	r2, [r3, #0]
        /* init outBuffer */
        outBuffer[i] = 0;
 80096f8:	69bb      	ldr	r3, [r7, #24]
 80096fa:	68fa      	ldr	r2, [r7, #12]
 80096fc:	4413      	add	r3, r2
 80096fe:	2200      	movs	r2, #0
 8009700:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < size; i++ )
 8009702:	69bb      	ldr	r3, [r7, #24]
 8009704:	3301      	adds	r3, #1
 8009706:	61bb      	str	r3, [r7, #24]
 8009708:	79fb      	ldrb	r3, [r7, #7]
 800970a:	69ba      	ldr	r2, [r7, #24]
 800970c:	429a      	cmp	r2, r3
 800970e:	dbe9      	blt.n	80096e4 <payload_integration+0x1c>
    }

    for( i = 0; i < ( size * 8 ); i++ )
 8009710:	2300      	movs	r3, #0
 8009712:	61bb      	str	r3, [r7, #24]
 8009714:	e049      	b.n	80097aa <payload_integration+0xe2>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
 8009716:	69bb      	ldr	r3, [r7, #24]
 8009718:	425a      	negs	r2, r3
 800971a:	f003 0307 	and.w	r3, r3, #7
 800971e:	f002 0207 	and.w	r2, r2, #7
 8009722:	bf58      	it	pl
 8009724:	4253      	negpl	r3, r2
 8009726:	b2db      	uxtb	r3, r3
 8009728:	f1c3 0307 	rsb	r3, r3, #7
 800972c:	75fb      	strb	r3, [r7, #23]
        index_byte = i / 8;
 800972e:	69bb      	ldr	r3, [r7, #24]
 8009730:	2b00      	cmp	r3, #0
 8009732:	da00      	bge.n	8009736 <payload_integration+0x6e>
 8009734:	3307      	adds	r3, #7
 8009736:	10db      	asrs	r3, r3, #3
 8009738:	75bb      	strb	r3, [r7, #22]
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 800973a:	69bb      	ldr	r3, [r7, #24]
 800973c:	3301      	adds	r3, #1
 800973e:	425a      	negs	r2, r3
 8009740:	f003 0307 	and.w	r3, r3, #7
 8009744:	f002 0207 	and.w	r2, r2, #7
 8009748:	bf58      	it	pl
 800974a:	4253      	negpl	r3, r2
 800974c:	b2db      	uxtb	r3, r3
 800974e:	f1c3 0307 	rsb	r3, r3, #7
 8009752:	757b      	strb	r3, [r7, #21]
        index_byte_out = ( i + 1 ) / 8;
 8009754:	69bb      	ldr	r3, [r7, #24]
 8009756:	3301      	adds	r3, #1
 8009758:	2b00      	cmp	r3, #0
 800975a:	da00      	bge.n	800975e <payload_integration+0x96>
 800975c:	3307      	adds	r3, #7
 800975e:	10db      	asrs	r3, r3, #3
 8009760:	753b      	strb	r3, [r7, #20]
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 8009762:	7dbb      	ldrb	r3, [r7, #22]
 8009764:	68ba      	ldr	r2, [r7, #8]
 8009766:	4413      	add	r3, r2
 8009768:	781b      	ldrb	r3, [r3, #0]
 800976a:	461a      	mov	r2, r3
 800976c:	7dfb      	ldrb	r3, [r7, #23]
 800976e:	fa42 f303 	asr.w	r3, r2, r3
 8009772:	b2db      	uxtb	r3, r3
 8009774:	f003 0301 	and.w	r3, r3, #1
 8009778:	74fb      	strb	r3, [r7, #19]
        /* integration */
        prevInt ^= currBit;
 800977a:	7ffa      	ldrb	r2, [r7, #31]
 800977c:	7cfb      	ldrb	r3, [r7, #19]
 800977e:	4053      	eors	r3, r2
 8009780:	77fb      	strb	r3, [r7, #31]
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 8009782:	7d3b      	ldrb	r3, [r7, #20]
 8009784:	68fa      	ldr	r2, [r7, #12]
 8009786:	4413      	add	r3, r2
 8009788:	781b      	ldrb	r3, [r3, #0]
 800978a:	b25a      	sxtb	r2, r3
 800978c:	7ff9      	ldrb	r1, [r7, #31]
 800978e:	7d7b      	ldrb	r3, [r7, #21]
 8009790:	fa01 f303 	lsl.w	r3, r1, r3
 8009794:	b25b      	sxtb	r3, r3
 8009796:	4313      	orrs	r3, r2
 8009798:	b259      	sxtb	r1, r3
 800979a:	7d3b      	ldrb	r3, [r7, #20]
 800979c:	68fa      	ldr	r2, [r7, #12]
 800979e:	4413      	add	r3, r2
 80097a0:	b2ca      	uxtb	r2, r1
 80097a2:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < ( size * 8 ); i++ )
 80097a4:	69bb      	ldr	r3, [r7, #24]
 80097a6:	3301      	adds	r3, #1
 80097a8:	61bb      	str	r3, [r7, #24]
 80097aa:	79fb      	ldrb	r3, [r7, #7]
 80097ac:	00db      	lsls	r3, r3, #3
 80097ae:	69ba      	ldr	r2, [r7, #24]
 80097b0:	429a      	cmp	r2, r3
 80097b2:	dbb0      	blt.n	8009716 <payload_integration+0x4e>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 80097b4:	7ffb      	ldrb	r3, [r7, #31]
 80097b6:	01db      	lsls	r3, r3, #7
 80097b8:	b25a      	sxtb	r2, r3
 80097ba:	7ffb      	ldrb	r3, [r7, #31]
 80097bc:	019b      	lsls	r3, r3, #6
 80097be:	b25b      	sxtb	r3, r3
 80097c0:	4313      	orrs	r3, r2
 80097c2:	b25b      	sxtb	r3, r3
 80097c4:	7ffa      	ldrb	r2, [r7, #31]
 80097c6:	2a00      	cmp	r2, #0
 80097c8:	d101      	bne.n	80097ce <payload_integration+0x106>
 80097ca:	2220      	movs	r2, #32
 80097cc:	e000      	b.n	80097d0 <payload_integration+0x108>
 80097ce:	2200      	movs	r2, #0
 80097d0:	4313      	orrs	r3, r2
 80097d2:	b259      	sxtb	r1, r3
 80097d4:	79fb      	ldrb	r3, [r7, #7]
 80097d6:	68fa      	ldr	r2, [r7, #12]
 80097d8:	4413      	add	r3, r2
 80097da:	b2ca      	uxtb	r2, r1
 80097dc:	701a      	strb	r2, [r3, #0]
}
 80097de:	bf00      	nop
 80097e0:	3724      	adds	r7, #36	; 0x24
 80097e2:	46bd      	mov	sp, r7
 80097e4:	bc80      	pop	{r7}
 80097e6:	4770      	bx	lr

080097e8 <RadioSetRxGenericConfig>:
#endif /*RADIO_SIGFOX_ENABLE == 1*/

static int32_t RadioSetRxGenericConfig( GenericModems_t modem, RxConfigGeneric_t *config, uint32_t rxContinuous,
                                        uint32_t symbTimeout )
{
 80097e8:	b580      	push	{r7, lr}
 80097ea:	b08c      	sub	sp, #48	; 0x30
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	60b9      	str	r1, [r7, #8]
 80097f0:	607a      	str	r2, [r7, #4]
 80097f2:	603b      	str	r3, [r7, #0]
 80097f4:	4603      	mov	r3, r0
 80097f6:	73fb      	strb	r3, [r7, #15]
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    int32_t status = 0;
 80097f8:	2300      	movs	r3, #0
 80097fa:	62bb      	str	r3, [r7, #40]	; 0x28
    uint8_t syncword[8] = {0};
 80097fc:	2300      	movs	r3, #0
 80097fe:	623b      	str	r3, [r7, #32]
 8009800:	2300      	movs	r3, #0
 8009802:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t MaxPayloadLength;

    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 8009804:	f001 fdff 	bl	800b406 <RFW_DeInit>

    if( rxContinuous != 0 )
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	2b00      	cmp	r3, #0
 800980c:	d001      	beq.n	8009812 <RadioSetRxGenericConfig+0x2a>
    {
        symbTimeout = 0;
 800980e:	2300      	movs	r3, #0
 8009810:	603b      	str	r3, [r7, #0]
    }
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	2b00      	cmp	r3, #0
 8009816:	bf14      	ite	ne
 8009818:	2301      	movne	r3, #1
 800981a:	2300      	moveq	r3, #0
 800981c:	b2da      	uxtb	r2, r3
 800981e:	4ba3      	ldr	r3, [pc, #652]	; (8009aac <RadioSetRxGenericConfig+0x2c4>)
 8009820:	705a      	strb	r2, [r3, #1]

    switch( modem )
 8009822:	7bfb      	ldrb	r3, [r7, #15]
 8009824:	2b00      	cmp	r3, #0
 8009826:	d003      	beq.n	8009830 <RadioSetRxGenericConfig+0x48>
 8009828:	2b01      	cmp	r3, #1
 800982a:	f000 80dc 	beq.w	80099e6 <RadioSetRxGenericConfig+0x1fe>

        // Timeout Max, Timeout handled directly in SetRx function
        SubgRf.RxTimeout = 0xFFFF;
        break;
    default:
        break;
 800982e:	e194      	b.n	8009b5a <RadioSetRxGenericConfig+0x372>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 8009830:	68bb      	ldr	r3, [r7, #8]
 8009832:	689b      	ldr	r3, [r3, #8]
 8009834:	2b00      	cmp	r3, #0
 8009836:	d003      	beq.n	8009840 <RadioSetRxGenericConfig+0x58>
 8009838:	68bb      	ldr	r3, [r7, #8]
 800983a:	68db      	ldr	r3, [r3, #12]
 800983c:	2b00      	cmp	r3, #0
 800983e:	d102      	bne.n	8009846 <RadioSetRxGenericConfig+0x5e>
            return -1;
 8009840:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009844:	e18a      	b.n	8009b5c <RadioSetRxGenericConfig+0x374>
        if( config->fsk.SyncWordLength > 8 )
 8009846:	68bb      	ldr	r3, [r7, #8]
 8009848:	7f9b      	ldrb	r3, [r3, #30]
 800984a:	2b08      	cmp	r3, #8
 800984c:	d902      	bls.n	8009854 <RadioSetRxGenericConfig+0x6c>
            return -1;
 800984e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009852:	e183      	b.n	8009b5c <RadioSetRxGenericConfig+0x374>
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 8009854:	68bb      	ldr	r3, [r7, #8]
 8009856:	6919      	ldr	r1, [r3, #16]
 8009858:	68bb      	ldr	r3, [r7, #8]
 800985a:	7f9b      	ldrb	r3, [r3, #30]
 800985c:	b29a      	uxth	r2, r3
 800985e:	f107 0320 	add.w	r3, r7, #32
 8009862:	4618      	mov	r0, r3
 8009864:	f001 ff52 	bl	800b70c <UTIL_MEM_cpy_8>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 8009868:	68bb      	ldr	r3, [r7, #8]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	2b00      	cmp	r3, #0
 800986e:	bf14      	ite	ne
 8009870:	2301      	movne	r3, #1
 8009872:	2300      	moveq	r3, #0
 8009874:	b2db      	uxtb	r3, r3
 8009876:	4618      	mov	r0, r3
 8009878:	f000 fe26 	bl	800a4c8 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800987c:	4b8b      	ldr	r3, [pc, #556]	; (8009aac <RadioSetRxGenericConfig+0x2c4>)
 800987e:	2200      	movs	r2, #0
 8009880:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 8009884:	68bb      	ldr	r3, [r7, #8]
 8009886:	689b      	ldr	r3, [r3, #8]
 8009888:	4a88      	ldr	r2, [pc, #544]	; (8009aac <RadioSetRxGenericConfig+0x2c4>)
 800988a:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 800988c:	68bb      	ldr	r3, [r7, #8]
 800988e:	f893 2020 	ldrb.w	r2, [r3, #32]
 8009892:	4b86      	ldr	r3, [pc, #536]	; (8009aac <RadioSetRxGenericConfig+0x2c4>)
 8009894:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 8009898:	68bb      	ldr	r3, [r7, #8]
 800989a:	685b      	ldr	r3, [r3, #4]
 800989c:	4618      	mov	r0, r3
 800989e:	f001 fce5 	bl	800b26c <SUBGRF_GetFskBandwidthRegValue>
 80098a2:	4603      	mov	r3, r0
 80098a4:	461a      	mov	r2, r3
 80098a6:	4b81      	ldr	r3, [pc, #516]	; (8009aac <RadioSetRxGenericConfig+0x2c4>)
 80098a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80098ac:	4b7f      	ldr	r3, [pc, #508]	; (8009aac <RadioSetRxGenericConfig+0x2c4>)
 80098ae:	2200      	movs	r2, #0
 80098b0:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 80098b2:	68bb      	ldr	r3, [r7, #8]
 80098b4:	68db      	ldr	r3, [r3, #12]
 80098b6:	b29b      	uxth	r3, r3
 80098b8:	00db      	lsls	r3, r3, #3
 80098ba:	b29a      	uxth	r2, r3
 80098bc:	4b7b      	ldr	r3, [pc, #492]	; (8009aac <RadioSetRxGenericConfig+0x2c4>)
 80098be:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 80098c0:	68bb      	ldr	r3, [r7, #8]
 80098c2:	7fda      	ldrb	r2, [r3, #31]
 80098c4:	4b79      	ldr	r3, [pc, #484]	; (8009aac <RadioSetRxGenericConfig+0x2c4>)
 80098c6:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 80098c8:	68bb      	ldr	r3, [r7, #8]
 80098ca:	7f9b      	ldrb	r3, [r3, #30]
 80098cc:	00db      	lsls	r3, r3, #3
 80098ce:	b2da      	uxtb	r2, r3
 80098d0:	4b76      	ldr	r3, [pc, #472]	; (8009aac <RadioSetRxGenericConfig+0x2c4>)
 80098d2:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 80098d4:	68bb      	ldr	r3, [r7, #8]
 80098d6:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 80098da:	4b74      	ldr	r3, [pc, #464]	; (8009aac <RadioSetRxGenericConfig+0x2c4>)
 80098dc:	751a      	strb	r2, [r3, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 80098de:	68bb      	ldr	r3, [r7, #8]
 80098e0:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d105      	bne.n	80098f4 <RadioSetRxGenericConfig+0x10c>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 80098e8:	68bb      	ldr	r3, [r7, #8]
 80098ea:	695b      	ldr	r3, [r3, #20]
 80098ec:	b2da      	uxtb	r2, r3
 80098ee:	4b6f      	ldr	r3, [pc, #444]	; (8009aac <RadioSetRxGenericConfig+0x2c4>)
 80098f0:	759a      	strb	r2, [r3, #22]
 80098f2:	e00b      	b.n	800990c <RadioSetRxGenericConfig+0x124>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 80098f4:	68bb      	ldr	r3, [r7, #8]
 80098f6:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80098fa:	2b02      	cmp	r3, #2
 80098fc:	d103      	bne.n	8009906 <RadioSetRxGenericConfig+0x11e>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 80098fe:	4b6b      	ldr	r3, [pc, #428]	; (8009aac <RadioSetRxGenericConfig+0x2c4>)
 8009900:	22ff      	movs	r2, #255	; 0xff
 8009902:	759a      	strb	r2, [r3, #22]
 8009904:	e002      	b.n	800990c <RadioSetRxGenericConfig+0x124>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 8009906:	4b69      	ldr	r3, [pc, #420]	; (8009aac <RadioSetRxGenericConfig+0x2c4>)
 8009908:	22ff      	movs	r2, #255	; 0xff
 800990a:	759a      	strb	r2, [r3, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 800990c:	68bb      	ldr	r3, [r7, #8]
 800990e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009912:	2b02      	cmp	r3, #2
 8009914:	d004      	beq.n	8009920 <RadioSetRxGenericConfig+0x138>
            || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8009916:	68bb      	ldr	r3, [r7, #8]
 8009918:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800991c:	2b02      	cmp	r3, #2
 800991e:	d12d      	bne.n	800997c <RadioSetRxGenericConfig+0x194>
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 8009920:	68bb      	ldr	r3, [r7, #8]
 8009922:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8009926:	2bf1      	cmp	r3, #241	; 0xf1
 8009928:	d00c      	beq.n	8009944 <RadioSetRxGenericConfig+0x15c>
 800992a:	68bb      	ldr	r3, [r7, #8]
 800992c:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8009930:	2bf2      	cmp	r3, #242	; 0xf2
 8009932:	d007      	beq.n	8009944 <RadioSetRxGenericConfig+0x15c>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8009934:	68bb      	ldr	r3, [r7, #8]
 8009936:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800993a:	2b01      	cmp	r3, #1
 800993c:	d002      	beq.n	8009944 <RadioSetRxGenericConfig+0x15c>
                return -1;
 800993e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009942:	e10b      	b.n	8009b5c <RadioSetRxGenericConfig+0x374>
            ConfigGeneric.rtx = CONFIG_RX;
 8009944:	2300      	movs	r3, #0
 8009946:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.RxConfig = config;
 8009948:	68bb      	ldr	r3, [r7, #8]
 800994a:	61bb      	str	r3, [r7, #24]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 800994c:	4b58      	ldr	r3, [pc, #352]	; (8009ab0 <RadioSetRxGenericConfig+0x2c8>)
 800994e:	6819      	ldr	r1, [r3, #0]
 8009950:	f107 0314 	add.w	r3, r7, #20
 8009954:	4a57      	ldr	r2, [pc, #348]	; (8009ab4 <RadioSetRxGenericConfig+0x2cc>)
 8009956:	4618      	mov	r0, r3
 8009958:	f001 fd48 	bl	800b3ec <RFW_Init>
 800995c:	4603      	mov	r3, r0
 800995e:	2b00      	cmp	r3, #0
 8009960:	d002      	beq.n	8009968 <RadioSetRxGenericConfig+0x180>
                return -1;
 8009962:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009966:	e0f9      	b.n	8009b5c <RadioSetRxGenericConfig+0x374>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8009968:	4b50      	ldr	r3, [pc, #320]	; (8009aac <RadioSetRxGenericConfig+0x2c4>)
 800996a:	2200      	movs	r2, #0
 800996c:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 800996e:	4b4f      	ldr	r3, [pc, #316]	; (8009aac <RadioSetRxGenericConfig+0x2c4>)
 8009970:	2201      	movs	r2, #1
 8009972:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8009974:	4b4d      	ldr	r3, [pc, #308]	; (8009aac <RadioSetRxGenericConfig+0x2c4>)
 8009976:	2200      	movs	r2, #0
 8009978:	755a      	strb	r2, [r3, #21]
        {
 800997a:	e00e      	b.n	800999a <RadioSetRxGenericConfig+0x1b2>
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 800997c:	68bb      	ldr	r3, [r7, #8]
 800997e:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8009982:	4b4a      	ldr	r3, [pc, #296]	; (8009aac <RadioSetRxGenericConfig+0x2c4>)
 8009984:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 8009986:	68bb      	ldr	r3, [r7, #8]
 8009988:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800998c:	4b47      	ldr	r3, [pc, #284]	; (8009aac <RadioSetRxGenericConfig+0x2c4>)
 800998e:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 8009990:	68bb      	ldr	r3, [r7, #8]
 8009992:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8009996:	4b45      	ldr	r3, [pc, #276]	; (8009aac <RadioSetRxGenericConfig+0x2c4>)
 8009998:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 800999a:	f7ff fa6e 	bl	8008e7a <RadioStandby>
        RadioSetModem( MODEM_FSK );
 800999e:	2000      	movs	r0, #0
 80099a0:	f7fe fc0a 	bl	80081b8 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80099a4:	4844      	ldr	r0, [pc, #272]	; (8009ab8 <RadioSetRxGenericConfig+0x2d0>)
 80099a6:	f001 f82d 	bl	800aa04 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80099aa:	4844      	ldr	r0, [pc, #272]	; (8009abc <RadioSetRxGenericConfig+0x2d4>)
 80099ac:	f001 f8fc 	bl	800aba8 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 80099b0:	f107 0320 	add.w	r3, r7, #32
 80099b4:	4618      	mov	r0, r3
 80099b6:	f000 fbc0 	bl	800a13a <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 80099ba:	68bb      	ldr	r3, [r7, #8]
 80099bc:	8b9b      	ldrh	r3, [r3, #28]
 80099be:	4618      	mov	r0, r3
 80099c0:	f000 fc0a 	bl	800a1d8 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 80099c4:	68bb      	ldr	r3, [r7, #8]
 80099c6:	8b1b      	ldrh	r3, [r3, #24]
 80099c8:	4618      	mov	r0, r3
 80099ca:	f000 fbe5 	bl	800a198 <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 80099ce:	683b      	ldr	r3, [r7, #0]
 80099d0:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80099d4:	fb03 f202 	mul.w	r2, r3, r2
 80099d8:	68bb      	ldr	r3, [r7, #8]
 80099da:	689b      	ldr	r3, [r3, #8]
 80099dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80099e0:	4a32      	ldr	r2, [pc, #200]	; (8009aac <RadioSetRxGenericConfig+0x2c4>)
 80099e2:	6093      	str	r3, [r2, #8]
        break;
 80099e4:	e0b9      	b.n	8009b5a <RadioSetRxGenericConfig+0x372>
        if( config->lora.PreambleLen == 0 )
 80099e6:	68bb      	ldr	r3, [r7, #8]
 80099e8:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d102      	bne.n	80099f4 <RadioSetRxGenericConfig+0x20c>
            return -1;
 80099ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80099f2:	e0b3      	b.n	8009b5c <RadioSetRxGenericConfig+0x374>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 80099f4:	68bb      	ldr	r3, [r7, #8]
 80099f6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80099fa:	2b01      	cmp	r3, #1
 80099fc:	d104      	bne.n	8009a08 <RadioSetRxGenericConfig+0x220>
            MaxPayloadLength = config->fsk.MaxPayloadLength;
 80099fe:	68bb      	ldr	r3, [r7, #8]
 8009a00:	695b      	ldr	r3, [r3, #20]
 8009a02:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8009a06:	e002      	b.n	8009a0e <RadioSetRxGenericConfig+0x226>
            MaxPayloadLength = 0xFF;
 8009a08:	23ff      	movs	r3, #255	; 0xff
 8009a0a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 8009a0e:	68bb      	ldr	r3, [r7, #8]
 8009a10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	bf14      	ite	ne
 8009a16:	2301      	movne	r3, #1
 8009a18:	2300      	moveq	r3, #0
 8009a1a:	b2db      	uxtb	r3, r3
 8009a1c:	4618      	mov	r0, r3
 8009a1e:	f000 fd53 	bl	800a4c8 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8009a22:	683b      	ldr	r3, [r7, #0]
 8009a24:	b2db      	uxtb	r3, r3
 8009a26:	4618      	mov	r0, r3
 8009a28:	f000 fd5d 	bl	800a4e6 <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8009a2c:	4b1f      	ldr	r3, [pc, #124]	; (8009aac <RadioSetRxGenericConfig+0x2c4>)
 8009a2e:	2201      	movs	r2, #1
 8009a30:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 8009a34:	68bb      	ldr	r3, [r7, #8]
 8009a36:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8009a3a:	4b1c      	ldr	r3, [pc, #112]	; (8009aac <RadioSetRxGenericConfig+0x2c4>)
 8009a3c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 8009a40:	68bb      	ldr	r3, [r7, #8]
 8009a42:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 8009a46:	4b19      	ldr	r3, [pc, #100]	; (8009aac <RadioSetRxGenericConfig+0x2c4>)
 8009a48:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 8009a4c:	68bb      	ldr	r3, [r7, #8]
 8009a4e:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 8009a52:	4b16      	ldr	r3, [pc, #88]	; (8009aac <RadioSetRxGenericConfig+0x2c4>)
 8009a54:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 8009a58:	68bb      	ldr	r3, [r7, #8]
 8009a5a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009a5e:	2b02      	cmp	r3, #2
 8009a60:	d010      	beq.n	8009a84 <RadioSetRxGenericConfig+0x29c>
 8009a62:	2b02      	cmp	r3, #2
 8009a64:	dc2c      	bgt.n	8009ac0 <RadioSetRxGenericConfig+0x2d8>
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d002      	beq.n	8009a70 <RadioSetRxGenericConfig+0x288>
 8009a6a:	2b01      	cmp	r3, #1
 8009a6c:	d005      	beq.n	8009a7a <RadioSetRxGenericConfig+0x292>
            break;
 8009a6e:	e027      	b.n	8009ac0 <RadioSetRxGenericConfig+0x2d8>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8009a70:	4b0e      	ldr	r3, [pc, #56]	; (8009aac <RadioSetRxGenericConfig+0x2c4>)
 8009a72:	2200      	movs	r2, #0
 8009a74:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8009a78:	e023      	b.n	8009ac2 <RadioSetRxGenericConfig+0x2da>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8009a7a:	4b0c      	ldr	r3, [pc, #48]	; (8009aac <RadioSetRxGenericConfig+0x2c4>)
 8009a7c:	2201      	movs	r2, #1
 8009a7e:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8009a82:	e01e      	b.n	8009ac2 <RadioSetRxGenericConfig+0x2da>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 8009a84:	68bb      	ldr	r3, [r7, #8]
 8009a86:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009a8a:	2b0b      	cmp	r3, #11
 8009a8c:	d004      	beq.n	8009a98 <RadioSetRxGenericConfig+0x2b0>
 8009a8e:	68bb      	ldr	r3, [r7, #8]
 8009a90:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009a94:	2b0c      	cmp	r3, #12
 8009a96:	d104      	bne.n	8009aa2 <RadioSetRxGenericConfig+0x2ba>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8009a98:	4b04      	ldr	r3, [pc, #16]	; (8009aac <RadioSetRxGenericConfig+0x2c4>)
 8009a9a:	2201      	movs	r2, #1
 8009a9c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8009aa0:	e00f      	b.n	8009ac2 <RadioSetRxGenericConfig+0x2da>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8009aa2:	4b02      	ldr	r3, [pc, #8]	; (8009aac <RadioSetRxGenericConfig+0x2c4>)
 8009aa4:	2200      	movs	r2, #0
 8009aa6:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8009aaa:	e00a      	b.n	8009ac2 <RadioSetRxGenericConfig+0x2da>
 8009aac:	20000a64 	.word	0x20000a64
 8009ab0:	20000a60 	.word	0x20000a60
 8009ab4:	20000ad8 	.word	0x20000ad8
 8009ab8:	20000a9c 	.word	0x20000a9c
 8009abc:	20000a72 	.word	0x20000a72
            break;
 8009ac0:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8009ac2:	4b28      	ldr	r3, [pc, #160]	; (8009b64 <RadioSetRxGenericConfig+0x37c>)
 8009ac4:	2201      	movs	r2, #1
 8009ac6:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 8009ac8:	68bb      	ldr	r3, [r7, #8]
 8009aca:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 8009acc:	4b25      	ldr	r3, [pc, #148]	; (8009b64 <RadioSetRxGenericConfig+0x37c>)
 8009ace:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 8009ad0:	68bb      	ldr	r3, [r7, #8]
 8009ad2:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 8009ad6:	4b23      	ldr	r3, [pc, #140]	; (8009b64 <RadioSetRxGenericConfig+0x37c>)
 8009ad8:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8009ada:	4a22      	ldr	r2, [pc, #136]	; (8009b64 <RadioSetRxGenericConfig+0x37c>)
 8009adc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009ae0:	77d3      	strb	r3, [r2, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 8009ae2:	68bb      	ldr	r3, [r7, #8]
 8009ae4:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8009ae8:	4b1e      	ldr	r3, [pc, #120]	; (8009b64 <RadioSetRxGenericConfig+0x37c>)
 8009aea:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 8009aee:	68bb      	ldr	r3, [r7, #8]
 8009af0:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 8009af4:	4b1b      	ldr	r3, [pc, #108]	; (8009b64 <RadioSetRxGenericConfig+0x37c>)
 8009af6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RadioStandby( );
 8009afa:	f7ff f9be 	bl	8008e7a <RadioStandby>
        RadioSetModem( MODEM_LORA );
 8009afe:	2001      	movs	r0, #1
 8009b00:	f7fe fb5a 	bl	80081b8 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8009b04:	4818      	ldr	r0, [pc, #96]	; (8009b68 <RadioSetRxGenericConfig+0x380>)
 8009b06:	f000 ff7d 	bl	800aa04 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8009b0a:	4818      	ldr	r0, [pc, #96]	; (8009b6c <RadioSetRxGenericConfig+0x384>)
 8009b0c:	f001 f84c 	bl	800aba8 <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8009b10:	4b14      	ldr	r3, [pc, #80]	; (8009b64 <RadioSetRxGenericConfig+0x37c>)
 8009b12:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8009b16:	2b01      	cmp	r3, #1
 8009b18:	d10d      	bne.n	8009b36 <RadioSetRxGenericConfig+0x34e>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 8009b1a:	f240 7036 	movw	r0, #1846	; 0x736
 8009b1e:	f001 f99f 	bl	800ae60 <SUBGRF_ReadRegister>
 8009b22:	4603      	mov	r3, r0
 8009b24:	f023 0304 	bic.w	r3, r3, #4
 8009b28:	b2db      	uxtb	r3, r3
 8009b2a:	4619      	mov	r1, r3
 8009b2c:	f240 7036 	movw	r0, #1846	; 0x736
 8009b30:	f001 f982 	bl	800ae38 <SUBGRF_WriteRegister>
 8009b34:	e00c      	b.n	8009b50 <RadioSetRxGenericConfig+0x368>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 8009b36:	f240 7036 	movw	r0, #1846	; 0x736
 8009b3a:	f001 f991 	bl	800ae60 <SUBGRF_ReadRegister>
 8009b3e:	4603      	mov	r3, r0
 8009b40:	f043 0304 	orr.w	r3, r3, #4
 8009b44:	b2db      	uxtb	r3, r3
 8009b46:	4619      	mov	r1, r3
 8009b48:	f240 7036 	movw	r0, #1846	; 0x736
 8009b4c:	f001 f974 	bl	800ae38 <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 8009b50:	4b04      	ldr	r3, [pc, #16]	; (8009b64 <RadioSetRxGenericConfig+0x37c>)
 8009b52:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009b56:	609a      	str	r2, [r3, #8]
        break;
 8009b58:	bf00      	nop
    }
    return status;
 8009b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 8009b5c:	4618      	mov	r0, r3
 8009b5e:	3730      	adds	r7, #48	; 0x30
 8009b60:	46bd      	mov	sp, r7
 8009b62:	bd80      	pop	{r7, pc}
 8009b64:	20000a64 	.word	0x20000a64
 8009b68:	20000a9c 	.word	0x20000a9c
 8009b6c:	20000a72 	.word	0x20000a72

08009b70 <RadioSetTxGenericConfig>:

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t *config, int8_t power,
                                        uint32_t timeout )
{
 8009b70:	b580      	push	{r7, lr}
 8009b72:	b08e      	sub	sp, #56	; 0x38
 8009b74:	af00      	add	r7, sp, #0
 8009b76:	60b9      	str	r1, [r7, #8]
 8009b78:	607b      	str	r3, [r7, #4]
 8009b7a:	4603      	mov	r3, r0
 8009b7c:	73fb      	strb	r3, [r7, #15]
 8009b7e:	4613      	mov	r3, r2
 8009b80:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    uint8_t syncword[8] = {0};
 8009b82:	2300      	movs	r3, #0
 8009b84:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009b86:	2300      	movs	r3, #0
 8009b88:	633b      	str	r3, [r7, #48]	; 0x30
    RadioModems_t radio_modem;
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 8009b8a:	f001 fc3c 	bl	800b406 <RFW_DeInit>
    switch( modem )
 8009b8e:	7bfb      	ldrb	r3, [r7, #15]
 8009b90:	2b03      	cmp	r3, #3
 8009b92:	f200 8204 	bhi.w	8009f9e <RadioSetTxGenericConfig+0x42e>
 8009b96:	a201      	add	r2, pc, #4	; (adr r2, 8009b9c <RadioSetTxGenericConfig+0x2c>)
 8009b98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b9c:	08009d21 	.word	0x08009d21
 8009ba0:	08009e69 	.word	0x08009e69
 8009ba4:	08009f61 	.word	0x08009f61
 8009ba8:	08009bad 	.word	0x08009bad
    {
    case GENERIC_MSK:
        if( config->msk.SyncWordLength > 8 )
 8009bac:	68bb      	ldr	r3, [r7, #8]
 8009bae:	7c9b      	ldrb	r3, [r3, #18]
 8009bb0:	2b08      	cmp	r3, #8
 8009bb2:	d902      	bls.n	8009bba <RadioSetTxGenericConfig+0x4a>
        {
            return -1;
 8009bb4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009bb8:	e206      	b.n	8009fc8 <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8( syncword, config->msk.SyncWord, config->msk.SyncWordLength );
 8009bba:	68bb      	ldr	r3, [r7, #8]
 8009bbc:	6899      	ldr	r1, [r3, #8]
 8009bbe:	68bb      	ldr	r3, [r7, #8]
 8009bc0:	7c9b      	ldrb	r3, [r3, #18]
 8009bc2:	b29a      	uxth	r2, r3
 8009bc4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009bc8:	4618      	mov	r0, r3
 8009bca:	f001 fd9f 	bl	800b70c <UTIL_MEM_cpy_8>
        }
        if( ( config->msk.BitRate == 0 ) )
 8009bce:	68bb      	ldr	r3, [r7, #8]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d102      	bne.n	8009bdc <RadioSetTxGenericConfig+0x6c>
        {
            return -1;
 8009bd6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009bda:	e1f5      	b.n	8009fc8 <RadioSetTxGenericConfig+0x458>
        }
        else if( config->msk.BitRate <= 10000 )
 8009bdc:	68bb      	ldr	r3, [r7, #8]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	f242 7210 	movw	r2, #10000	; 0x2710
 8009be4:	4293      	cmp	r3, r2
 8009be6:	d813      	bhi.n	8009c10 <RadioSetTxGenericConfig+0xa0>
        {
            /*max msk modulator datarate is 10kbps*/
            radio_modem = MODEM_MSK;
 8009be8:	2302      	movs	r3, #2
 8009bea:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GMSK;
 8009bee:	4b99      	ldr	r3, [pc, #612]	; (8009e54 <RadioSetTxGenericConfig+0x2e4>)
 8009bf0:	2203      	movs	r2, #3
 8009bf2:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GMSK;
 8009bf4:	4b97      	ldr	r3, [pc, #604]	; (8009e54 <RadioSetTxGenericConfig+0x2e4>)
 8009bf6:	2203      	movs	r2, #3
 8009bf8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 8009bfc:	68bb      	ldr	r3, [r7, #8]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	4a94      	ldr	r2, [pc, #592]	; (8009e54 <RadioSetTxGenericConfig+0x2e4>)
 8009c02:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 8009c04:	68bb      	ldr	r3, [r7, #8]
 8009c06:	7cda      	ldrb	r2, [r3, #19]
 8009c08:	4b92      	ldr	r3, [pc, #584]	; (8009e54 <RadioSetTxGenericConfig+0x2e4>)
 8009c0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009c0e:	e017      	b.n	8009c40 <RadioSetTxGenericConfig+0xd0>
        }
        else
        {
            radio_modem = MODEM_FSK;
 8009c10:	2300      	movs	r3, #0
 8009c12:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8009c16:	4b8f      	ldr	r3, [pc, #572]	; (8009e54 <RadioSetTxGenericConfig+0x2e4>)
 8009c18:	2200      	movs	r2, #0
 8009c1a:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8009c1c:	4b8d      	ldr	r3, [pc, #564]	; (8009e54 <RadioSetTxGenericConfig+0x2e4>)
 8009c1e:	2200      	movs	r2, #0
 8009c20:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 8009c24:	68bb      	ldr	r3, [r7, #8]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	4a8a      	ldr	r2, [pc, #552]	; (8009e54 <RadioSetTxGenericConfig+0x2e4>)
 8009c2a:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 8009c2c:	68bb      	ldr	r3, [r7, #8]
 8009c2e:	7cda      	ldrb	r2, [r3, #19]
 8009c30:	4b88      	ldr	r3, [pc, #544]	; (8009e54 <RadioSetTxGenericConfig+0x2e4>)
 8009c32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            /*do msk with gfsk modulator*/
            SubgRf.ModulationParams.Params.Gfsk.Fdev = config->msk.BitRate / 4;
 8009c36:	68bb      	ldr	r3, [r7, #8]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	089b      	lsrs	r3, r3, #2
 8009c3c:	4a85      	ldr	r2, [pc, #532]	; (8009e54 <RadioSetTxGenericConfig+0x2e4>)
 8009c3e:	6413      	str	r3, [r2, #64]	; 0x40
        }

        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->msk.PreambleLen ) << 3; // convert byte into bit
 8009c40:	68bb      	ldr	r3, [r7, #8]
 8009c42:	685b      	ldr	r3, [r3, #4]
 8009c44:	b29b      	uxth	r3, r3
 8009c46:	00db      	lsls	r3, r3, #3
 8009c48:	b29a      	uxth	r2, r3
 8009c4a:	4b82      	ldr	r3, [pc, #520]	; (8009e54 <RadioSetTxGenericConfig+0x2e4>)
 8009c4c:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 8009c4e:	4b81      	ldr	r3, [pc, #516]	; (8009e54 <RadioSetTxGenericConfig+0x2e4>)
 8009c50:	2204      	movs	r2, #4
 8009c52:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->msk.SyncWordLength ) << 3; // convert byte into bit
 8009c54:	68bb      	ldr	r3, [r7, #8]
 8009c56:	7c9b      	ldrb	r3, [r3, #18]
 8009c58:	00db      	lsls	r3, r3, #3
 8009c5a:	b2da      	uxtb	r2, r3
 8009c5c:	4b7d      	ldr	r3, [pc, #500]	; (8009e54 <RadioSetTxGenericConfig+0x2e4>)
 8009c5e:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 8009c60:	4b7c      	ldr	r3, [pc, #496]	; (8009e54 <RadioSetTxGenericConfig+0x2e4>)
 8009c62:	2200      	movs	r2, #0
 8009c64:	751a      	strb	r2, [r3, #20]

        if( ( config->msk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 8009c66:	68bb      	ldr	r3, [r7, #8]
 8009c68:	7d9b      	ldrb	r3, [r3, #22]
 8009c6a:	2b02      	cmp	r3, #2
 8009c6c:	d003      	beq.n	8009c76 <RadioSetTxGenericConfig+0x106>
            || ( config->msk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8009c6e:	68bb      	ldr	r3, [r7, #8]
 8009c70:	7d1b      	ldrb	r3, [r3, #20]
 8009c72:	2b02      	cmp	r3, #2
 8009c74:	d12b      	bne.n	8009cce <RadioSetTxGenericConfig+0x15e>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 8009c76:	68bb      	ldr	r3, [r7, #8]
 8009c78:	7d5b      	ldrb	r3, [r3, #21]
 8009c7a:	2bf1      	cmp	r3, #241	; 0xf1
 8009c7c:	d00a      	beq.n	8009c94 <RadioSetTxGenericConfig+0x124>
 8009c7e:	68bb      	ldr	r3, [r7, #8]
 8009c80:	7d5b      	ldrb	r3, [r3, #21]
 8009c82:	2bf2      	cmp	r3, #242	; 0xf2
 8009c84:	d006      	beq.n	8009c94 <RadioSetTxGenericConfig+0x124>
                && ( config->msk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8009c86:	68bb      	ldr	r3, [r7, #8]
 8009c88:	7d5b      	ldrb	r3, [r3, #21]
 8009c8a:	2b01      	cmp	r3, #1
 8009c8c:	d002      	beq.n	8009c94 <RadioSetTxGenericConfig+0x124>
            {
                return -1;
 8009c8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009c92:	e199      	b.n	8009fc8 <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            /*msk and fsk are union, no need for copy as fsk/msk struct are on same address*/
            ConfigGeneric.TxConfig = config;
 8009c94:	68bb      	ldr	r3, [r7, #8]
 8009c96:	623b      	str	r3, [r7, #32]
            ConfigGeneric.rtx = CONFIG_TX;
 8009c98:	2301      	movs	r3, #1
 8009c9a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 8009c9e:	4b6e      	ldr	r3, [pc, #440]	; (8009e58 <RadioSetTxGenericConfig+0x2e8>)
 8009ca0:	6819      	ldr	r1, [r3, #0]
 8009ca2:	f107 0320 	add.w	r3, r7, #32
 8009ca6:	4a6d      	ldr	r2, [pc, #436]	; (8009e5c <RadioSetTxGenericConfig+0x2ec>)
 8009ca8:	4618      	mov	r0, r3
 8009caa:	f001 fb9f 	bl	800b3ec <RFW_Init>
 8009cae:	4603      	mov	r3, r0
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d002      	beq.n	8009cba <RadioSetTxGenericConfig+0x14a>
            {
                return -1;
 8009cb4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009cb8:	e186      	b.n	8009fc8 <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8009cba:	4b66      	ldr	r3, [pc, #408]	; (8009e54 <RadioSetTxGenericConfig+0x2e4>)
 8009cbc:	2200      	movs	r2, #0
 8009cbe:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 8009cc0:	4b64      	ldr	r3, [pc, #400]	; (8009e54 <RadioSetTxGenericConfig+0x2e4>)
 8009cc2:	2201      	movs	r2, #1
 8009cc4:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8009cc6:	4b63      	ldr	r3, [pc, #396]	; (8009e54 <RadioSetTxGenericConfig+0x2e4>)
 8009cc8:	2200      	movs	r2, #0
 8009cca:	755a      	strb	r2, [r3, #21]
        {
 8009ccc:	e00b      	b.n	8009ce6 <RadioSetTxGenericConfig+0x176>
        }
        else
        {
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->msk.CrcLength;
 8009cce:	68bb      	ldr	r3, [r7, #8]
 8009cd0:	7d5a      	ldrb	r2, [r3, #21]
 8009cd2:	4b60      	ldr	r3, [pc, #384]	; (8009e54 <RadioSetTxGenericConfig+0x2e4>)
 8009cd4:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->msk.Whitening;
 8009cd6:	68bb      	ldr	r3, [r7, #8]
 8009cd8:	7d9a      	ldrb	r2, [r3, #22]
 8009cda:	4b5e      	ldr	r3, [pc, #376]	; (8009e54 <RadioSetTxGenericConfig+0x2e4>)
 8009cdc:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->msk.HeaderType;
 8009cde:	68bb      	ldr	r3, [r7, #8]
 8009ce0:	7d1a      	ldrb	r2, [r3, #20]
 8009ce2:	4b5c      	ldr	r3, [pc, #368]	; (8009e54 <RadioSetTxGenericConfig+0x2e4>)
 8009ce4:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 8009ce6:	f7ff f8c8 	bl	8008e7a <RadioStandby>
        RadioSetModem( radio_modem );
 8009cea:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009cee:	4618      	mov	r0, r3
 8009cf0:	f7fe fa62 	bl	80081b8 <RadioSetModem>

        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8009cf4:	485a      	ldr	r0, [pc, #360]	; (8009e60 <RadioSetTxGenericConfig+0x2f0>)
 8009cf6:	f000 fe85 	bl	800aa04 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8009cfa:	485a      	ldr	r0, [pc, #360]	; (8009e64 <RadioSetTxGenericConfig+0x2f4>)
 8009cfc:	f000 ff54 	bl	800aba8 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8009d00:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009d04:	4618      	mov	r0, r3
 8009d06:	f000 fa18 	bl	800a13a <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->msk.whiteSeed );
 8009d0a:	68bb      	ldr	r3, [r7, #8]
 8009d0c:	8a1b      	ldrh	r3, [r3, #16]
 8009d0e:	4618      	mov	r0, r3
 8009d10:	f000 fa62 	bl	800a1d8 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->msk.CrcPolynomial );
 8009d14:	68bb      	ldr	r3, [r7, #8]
 8009d16:	899b      	ldrh	r3, [r3, #12]
 8009d18:	4618      	mov	r0, r3
 8009d1a:	f000 fa3d 	bl	800a198 <SUBGRF_SetCrcPolynomial>
        break;
 8009d1e:	e13f      	b.n	8009fa0 <RadioSetTxGenericConfig+0x430>
    case GENERIC_FSK:
        if( config->fsk.BitRate == 0 )
 8009d20:	68bb      	ldr	r3, [r7, #8]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d102      	bne.n	8009d2e <RadioSetTxGenericConfig+0x1be>
        {
            return -1;
 8009d28:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009d2c:	e14c      	b.n	8009fc8 <RadioSetTxGenericConfig+0x458>
        }
        if( config->fsk.SyncWordLength > 8 )
 8009d2e:	68bb      	ldr	r3, [r7, #8]
 8009d30:	7c9b      	ldrb	r3, [r3, #18]
 8009d32:	2b08      	cmp	r3, #8
 8009d34:	d902      	bls.n	8009d3c <RadioSetTxGenericConfig+0x1cc>
        {
            return -1;
 8009d36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009d3a:	e145      	b.n	8009fc8 <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 8009d3c:	68bb      	ldr	r3, [r7, #8]
 8009d3e:	6899      	ldr	r1, [r3, #8]
 8009d40:	68bb      	ldr	r3, [r7, #8]
 8009d42:	7c9b      	ldrb	r3, [r3, #18]
 8009d44:	b29a      	uxth	r2, r3
 8009d46:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009d4a:	4618      	mov	r0, r3
 8009d4c:	f001 fcde 	bl	800b70c <UTIL_MEM_cpy_8>
        }
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8009d50:	4b40      	ldr	r3, [pc, #256]	; (8009e54 <RadioSetTxGenericConfig+0x2e4>)
 8009d52:	2200      	movs	r2, #0
 8009d54:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 8009d58:	68bb      	ldr	r3, [r7, #8]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	4a3d      	ldr	r2, [pc, #244]	; (8009e54 <RadioSetTxGenericConfig+0x2e4>)
 8009d5e:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 8009d60:	68bb      	ldr	r3, [r7, #8]
 8009d62:	7cda      	ldrb	r2, [r3, #19]
 8009d64:	4b3b      	ldr	r3, [pc, #236]	; (8009e54 <RadioSetTxGenericConfig+0x2e4>)
 8009d66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 8009d6a:	68bb      	ldr	r3, [r7, #8]
 8009d6c:	699b      	ldr	r3, [r3, #24]
 8009d6e:	4a39      	ldr	r2, [pc, #228]	; (8009e54 <RadioSetTxGenericConfig+0x2e4>)
 8009d70:	6413      	str	r3, [r2, #64]	; 0x40

        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8009d72:	4b38      	ldr	r3, [pc, #224]	; (8009e54 <RadioSetTxGenericConfig+0x2e4>)
 8009d74:	2200      	movs	r2, #0
 8009d76:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 8009d78:	68bb      	ldr	r3, [r7, #8]
 8009d7a:	685b      	ldr	r3, [r3, #4]
 8009d7c:	b29b      	uxth	r3, r3
 8009d7e:	00db      	lsls	r3, r3, #3
 8009d80:	b29a      	uxth	r2, r3
 8009d82:	4b34      	ldr	r3, [pc, #208]	; (8009e54 <RadioSetTxGenericConfig+0x2e4>)
 8009d84:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 8009d86:	4b33      	ldr	r3, [pc, #204]	; (8009e54 <RadioSetTxGenericConfig+0x2e4>)
 8009d88:	2204      	movs	r2, #4
 8009d8a:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 8009d8c:	68bb      	ldr	r3, [r7, #8]
 8009d8e:	7c9b      	ldrb	r3, [r3, #18]
 8009d90:	00db      	lsls	r3, r3, #3
 8009d92:	b2da      	uxtb	r2, r3
 8009d94:	4b2f      	ldr	r3, [pc, #188]	; (8009e54 <RadioSetTxGenericConfig+0x2e4>)
 8009d96:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 8009d98:	4b2e      	ldr	r3, [pc, #184]	; (8009e54 <RadioSetTxGenericConfig+0x2e4>)
 8009d9a:	2200      	movs	r2, #0
 8009d9c:	751a      	strb	r2, [r3, #20]

        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 8009d9e:	68bb      	ldr	r3, [r7, #8]
 8009da0:	7d9b      	ldrb	r3, [r3, #22]
 8009da2:	2b02      	cmp	r3, #2
 8009da4:	d003      	beq.n	8009dae <RadioSetTxGenericConfig+0x23e>
            || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8009da6:	68bb      	ldr	r3, [r7, #8]
 8009da8:	7d1b      	ldrb	r3, [r3, #20]
 8009daa:	2b02      	cmp	r3, #2
 8009dac:	d12a      	bne.n	8009e04 <RadioSetTxGenericConfig+0x294>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 8009dae:	68bb      	ldr	r3, [r7, #8]
 8009db0:	7d5b      	ldrb	r3, [r3, #21]
 8009db2:	2bf1      	cmp	r3, #241	; 0xf1
 8009db4:	d00a      	beq.n	8009dcc <RadioSetTxGenericConfig+0x25c>
 8009db6:	68bb      	ldr	r3, [r7, #8]
 8009db8:	7d5b      	ldrb	r3, [r3, #21]
 8009dba:	2bf2      	cmp	r3, #242	; 0xf2
 8009dbc:	d006      	beq.n	8009dcc <RadioSetTxGenericConfig+0x25c>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8009dbe:	68bb      	ldr	r3, [r7, #8]
 8009dc0:	7d5b      	ldrb	r3, [r3, #21]
 8009dc2:	2b01      	cmp	r3, #1
 8009dc4:	d002      	beq.n	8009dcc <RadioSetTxGenericConfig+0x25c>
            {
                return -1;
 8009dc6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009dca:	e0fd      	b.n	8009fc8 <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            ConfigGeneric.rtx = CONFIG_TX;
 8009dcc:	2301      	movs	r3, #1
 8009dce:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.TxConfig = config;
 8009dd0:	68bb      	ldr	r3, [r7, #8]
 8009dd2:	617b      	str	r3, [r7, #20]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 8009dd4:	4b20      	ldr	r3, [pc, #128]	; (8009e58 <RadioSetTxGenericConfig+0x2e8>)
 8009dd6:	6819      	ldr	r1, [r3, #0]
 8009dd8:	f107 0314 	add.w	r3, r7, #20
 8009ddc:	4a1f      	ldr	r2, [pc, #124]	; (8009e5c <RadioSetTxGenericConfig+0x2ec>)
 8009dde:	4618      	mov	r0, r3
 8009de0:	f001 fb04 	bl	800b3ec <RFW_Init>
 8009de4:	4603      	mov	r3, r0
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d002      	beq.n	8009df0 <RadioSetTxGenericConfig+0x280>
            {
                return -1;
 8009dea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009dee:	e0eb      	b.n	8009fc8 <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8009df0:	4b18      	ldr	r3, [pc, #96]	; (8009e54 <RadioSetTxGenericConfig+0x2e4>)
 8009df2:	2200      	movs	r2, #0
 8009df4:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 8009df6:	4b17      	ldr	r3, [pc, #92]	; (8009e54 <RadioSetTxGenericConfig+0x2e4>)
 8009df8:	2201      	movs	r2, #1
 8009dfa:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8009dfc:	4b15      	ldr	r3, [pc, #84]	; (8009e54 <RadioSetTxGenericConfig+0x2e4>)
 8009dfe:	2200      	movs	r2, #0
 8009e00:	755a      	strb	r2, [r3, #21]
        {
 8009e02:	e00b      	b.n	8009e1c <RadioSetTxGenericConfig+0x2ac>
        }
        else
        {
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 8009e04:	68bb      	ldr	r3, [r7, #8]
 8009e06:	7d5a      	ldrb	r2, [r3, #21]
 8009e08:	4b12      	ldr	r3, [pc, #72]	; (8009e54 <RadioSetTxGenericConfig+0x2e4>)
 8009e0a:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 8009e0c:	68bb      	ldr	r3, [r7, #8]
 8009e0e:	7d9a      	ldrb	r2, [r3, #22]
 8009e10:	4b10      	ldr	r3, [pc, #64]	; (8009e54 <RadioSetTxGenericConfig+0x2e4>)
 8009e12:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 8009e14:	68bb      	ldr	r3, [r7, #8]
 8009e16:	7d1a      	ldrb	r2, [r3, #20]
 8009e18:	4b0e      	ldr	r3, [pc, #56]	; (8009e54 <RadioSetTxGenericConfig+0x2e4>)
 8009e1a:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 8009e1c:	f7ff f82d 	bl	8008e7a <RadioStandby>
        RadioSetModem( MODEM_FSK );
 8009e20:	2000      	movs	r0, #0
 8009e22:	f7fe f9c9 	bl	80081b8 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8009e26:	480e      	ldr	r0, [pc, #56]	; (8009e60 <RadioSetTxGenericConfig+0x2f0>)
 8009e28:	f000 fdec 	bl	800aa04 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8009e2c:	480d      	ldr	r0, [pc, #52]	; (8009e64 <RadioSetTxGenericConfig+0x2f4>)
 8009e2e:	f000 febb 	bl	800aba8 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8009e32:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009e36:	4618      	mov	r0, r3
 8009e38:	f000 f97f 	bl	800a13a <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 8009e3c:	68bb      	ldr	r3, [r7, #8]
 8009e3e:	8a1b      	ldrh	r3, [r3, #16]
 8009e40:	4618      	mov	r0, r3
 8009e42:	f000 f9c9 	bl	800a1d8 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 8009e46:	68bb      	ldr	r3, [r7, #8]
 8009e48:	899b      	ldrh	r3, [r3, #12]
 8009e4a:	4618      	mov	r0, r3
 8009e4c:	f000 f9a4 	bl	800a198 <SUBGRF_SetCrcPolynomial>
        break;
 8009e50:	e0a6      	b.n	8009fa0 <RadioSetTxGenericConfig+0x430>
 8009e52:	bf00      	nop
 8009e54:	20000a64 	.word	0x20000a64
 8009e58:	20000a60 	.word	0x20000a60
 8009e5c:	20000ac0 	.word	0x20000ac0
 8009e60:	20000a9c 	.word	0x20000a9c
 8009e64:	20000a72 	.word	0x20000a72
    case GENERIC_LORA:
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8009e68:	4b59      	ldr	r3, [pc, #356]	; (8009fd0 <RadioSetTxGenericConfig+0x460>)
 8009e6a:	2201      	movs	r2, #1
 8009e6c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 8009e70:	68bb      	ldr	r3, [r7, #8]
 8009e72:	781a      	ldrb	r2, [r3, #0]
 8009e74:	4b56      	ldr	r3, [pc, #344]	; (8009fd0 <RadioSetTxGenericConfig+0x460>)
 8009e76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 8009e7a:	68bb      	ldr	r3, [r7, #8]
 8009e7c:	785a      	ldrb	r2, [r3, #1]
 8009e7e:	4b54      	ldr	r3, [pc, #336]	; (8009fd0 <RadioSetTxGenericConfig+0x460>)
 8009e80:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 8009e84:	68bb      	ldr	r3, [r7, #8]
 8009e86:	789a      	ldrb	r2, [r3, #2]
 8009e88:	4b51      	ldr	r3, [pc, #324]	; (8009fd0 <RadioSetTxGenericConfig+0x460>)
 8009e8a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 8009e8e:	68bb      	ldr	r3, [r7, #8]
 8009e90:	78db      	ldrb	r3, [r3, #3]
 8009e92:	2b02      	cmp	r3, #2
 8009e94:	d010      	beq.n	8009eb8 <RadioSetTxGenericConfig+0x348>
 8009e96:	2b02      	cmp	r3, #2
 8009e98:	dc20      	bgt.n	8009edc <RadioSetTxGenericConfig+0x36c>
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d002      	beq.n	8009ea4 <RadioSetTxGenericConfig+0x334>
 8009e9e:	2b01      	cmp	r3, #1
 8009ea0:	d005      	beq.n	8009eae <RadioSetTxGenericConfig+0x33e>
            {
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
            }
            break;
        default:
            break;
 8009ea2:	e01b      	b.n	8009edc <RadioSetTxGenericConfig+0x36c>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8009ea4:	4b4a      	ldr	r3, [pc, #296]	; (8009fd0 <RadioSetTxGenericConfig+0x460>)
 8009ea6:	2200      	movs	r2, #0
 8009ea8:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8009eac:	e017      	b.n	8009ede <RadioSetTxGenericConfig+0x36e>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8009eae:	4b48      	ldr	r3, [pc, #288]	; (8009fd0 <RadioSetTxGenericConfig+0x460>)
 8009eb0:	2201      	movs	r2, #1
 8009eb2:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8009eb6:	e012      	b.n	8009ede <RadioSetTxGenericConfig+0x36e>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 8009eb8:	68bb      	ldr	r3, [r7, #8]
 8009eba:	781b      	ldrb	r3, [r3, #0]
 8009ebc:	2b0b      	cmp	r3, #11
 8009ebe:	d003      	beq.n	8009ec8 <RadioSetTxGenericConfig+0x358>
 8009ec0:	68bb      	ldr	r3, [r7, #8]
 8009ec2:	781b      	ldrb	r3, [r3, #0]
 8009ec4:	2b0c      	cmp	r3, #12
 8009ec6:	d104      	bne.n	8009ed2 <RadioSetTxGenericConfig+0x362>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8009ec8:	4b41      	ldr	r3, [pc, #260]	; (8009fd0 <RadioSetTxGenericConfig+0x460>)
 8009eca:	2201      	movs	r2, #1
 8009ecc:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8009ed0:	e005      	b.n	8009ede <RadioSetTxGenericConfig+0x36e>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8009ed2:	4b3f      	ldr	r3, [pc, #252]	; (8009fd0 <RadioSetTxGenericConfig+0x460>)
 8009ed4:	2200      	movs	r2, #0
 8009ed6:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8009eda:	e000      	b.n	8009ede <RadioSetTxGenericConfig+0x36e>
            break;
 8009edc:	bf00      	nop
        }

        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8009ede:	4b3c      	ldr	r3, [pc, #240]	; (8009fd0 <RadioSetTxGenericConfig+0x460>)
 8009ee0:	2201      	movs	r2, #1
 8009ee2:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 8009ee4:	68bb      	ldr	r3, [r7, #8]
 8009ee6:	889a      	ldrh	r2, [r3, #4]
 8009ee8:	4b39      	ldr	r3, [pc, #228]	; (8009fd0 <RadioSetTxGenericConfig+0x460>)
 8009eea:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 8009eec:	68bb      	ldr	r3, [r7, #8]
 8009eee:	799a      	ldrb	r2, [r3, #6]
 8009ef0:	4b37      	ldr	r3, [pc, #220]	; (8009fd0 <RadioSetTxGenericConfig+0x460>)
 8009ef2:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 8009ef4:	68bb      	ldr	r3, [r7, #8]
 8009ef6:	79da      	ldrb	r2, [r3, #7]
 8009ef8:	4b35      	ldr	r3, [pc, #212]	; (8009fd0 <RadioSetTxGenericConfig+0x460>)
 8009efa:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 8009efe:	68bb      	ldr	r3, [r7, #8]
 8009f00:	7a1a      	ldrb	r2, [r3, #8]
 8009f02:	4b33      	ldr	r3, [pc, #204]	; (8009fd0 <RadioSetTxGenericConfig+0x460>)
 8009f04:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        RadioStandby( );
 8009f08:	f7fe ffb7 	bl	8008e7a <RadioStandby>
        RadioSetModem( MODEM_LORA );
 8009f0c:	2001      	movs	r0, #1
 8009f0e:	f7fe f953 	bl	80081b8 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8009f12:	4830      	ldr	r0, [pc, #192]	; (8009fd4 <RadioSetTxGenericConfig+0x464>)
 8009f14:	f000 fd76 	bl	800aa04 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8009f18:	482f      	ldr	r0, [pc, #188]	; (8009fd8 <RadioSetTxGenericConfig+0x468>)
 8009f1a:	f000 fe45 	bl	800aba8 <SUBGRF_SetPacketParams>

        /* WORKAROUND - Modulation Quality with 500 kHz LoRa Bandwidth, see STM32WL Erratasheet */
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 8009f1e:	4b2c      	ldr	r3, [pc, #176]	; (8009fd0 <RadioSetTxGenericConfig+0x460>)
 8009f20:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009f24:	2b06      	cmp	r3, #6
 8009f26:	d10d      	bne.n	8009f44 <RadioSetTxGenericConfig+0x3d4>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 8009f28:	f640 0089 	movw	r0, #2185	; 0x889
 8009f2c:	f000 ff98 	bl	800ae60 <SUBGRF_ReadRegister>
 8009f30:	4603      	mov	r3, r0
 8009f32:	f023 0304 	bic.w	r3, r3, #4
 8009f36:	b2db      	uxtb	r3, r3
 8009f38:	4619      	mov	r1, r3
 8009f3a:	f640 0089 	movw	r0, #2185	; 0x889
 8009f3e:	f000 ff7b 	bl	800ae38 <SUBGRF_WriteRegister>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
        }
        /* WORKAROUND END */
        break;
 8009f42:	e02d      	b.n	8009fa0 <RadioSetTxGenericConfig+0x430>
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 8009f44:	f640 0089 	movw	r0, #2185	; 0x889
 8009f48:	f000 ff8a 	bl	800ae60 <SUBGRF_ReadRegister>
 8009f4c:	4603      	mov	r3, r0
 8009f4e:	f043 0304 	orr.w	r3, r3, #4
 8009f52:	b2db      	uxtb	r3, r3
 8009f54:	4619      	mov	r1, r3
 8009f56:	f640 0089 	movw	r0, #2185	; 0x889
 8009f5a:	f000 ff6d 	bl	800ae38 <SUBGRF_WriteRegister>
        break;
 8009f5e:	e01f      	b.n	8009fa0 <RadioSetTxGenericConfig+0x430>
    case GENERIC_BPSK:
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 8009f60:	68bb      	ldr	r3, [r7, #8]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d004      	beq.n	8009f72 <RadioSetTxGenericConfig+0x402>
 8009f68:	68bb      	ldr	r3, [r7, #8]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009f70:	d902      	bls.n	8009f78 <RadioSetTxGenericConfig+0x408>
        {
            return -1;
 8009f72:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009f76:	e027      	b.n	8009fc8 <RadioSetTxGenericConfig+0x458>
        }
        RadioSetModem( MODEM_BPSK );
 8009f78:	2003      	movs	r0, #3
 8009f7a:	f7fe f91d 	bl	80081b8 <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 8009f7e:	4b14      	ldr	r3, [pc, #80]	; (8009fd0 <RadioSetTxGenericConfig+0x460>)
 8009f80:	2202      	movs	r2, #2
 8009f82:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 8009f86:	68bb      	ldr	r3, [r7, #8]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	4a11      	ldr	r2, [pc, #68]	; (8009fd0 <RadioSetTxGenericConfig+0x460>)
 8009f8c:	6493      	str	r3, [r2, #72]	; 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 8009f8e:	4b10      	ldr	r3, [pc, #64]	; (8009fd0 <RadioSetTxGenericConfig+0x460>)
 8009f90:	2216      	movs	r2, #22
 8009f92:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8009f96:	480f      	ldr	r0, [pc, #60]	; (8009fd4 <RadioSetTxGenericConfig+0x464>)
 8009f98:	f000 fd34 	bl	800aa04 <SUBGRF_SetModulationParams>
        break;
 8009f9c:	e000      	b.n	8009fa0 <RadioSetTxGenericConfig+0x430>
    default:
        break;
 8009f9e:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 8009fa0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009fa4:	4618      	mov	r0, r3
 8009fa6:	f001 f863 	bl	800b070 <SUBGRF_SetRfTxPower>
 8009faa:	4603      	mov	r3, r0
 8009fac:	461a      	mov	r2, r3
 8009fae:	4b08      	ldr	r3, [pc, #32]	; (8009fd0 <RadioSetTxGenericConfig+0x460>)
 8009fb0:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 8009fb4:	4b06      	ldr	r3, [pc, #24]	; (8009fd0 <RadioSetTxGenericConfig+0x460>)
 8009fb6:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8009fba:	4618      	mov	r0, r3
 8009fbc:	f001 fa37 	bl	800b42e <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 8009fc0:	4a03      	ldr	r2, [pc, #12]	; (8009fd0 <RadioSetTxGenericConfig+0x460>)
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	6053      	str	r3, [r2, #4]
    return 0;
 8009fc6:	2300      	movs	r3, #0
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 8009fc8:	4618      	mov	r0, r3
 8009fca:	3738      	adds	r7, #56	; 0x38
 8009fcc:	46bd      	mov	sp, r7
 8009fce:	bd80      	pop	{r7, pc}
 8009fd0:	20000a64 	.word	0x20000a64
 8009fd4:	20000a9c 	.word	0x20000a9c
 8009fd8:	20000a72 	.word	0x20000a72

08009fdc <RadioLrFhssSetCfg>:
    return ( prbs31_val - 1 ) % ( max );
}
#endif /* RADIO_LR_FHSS_IS_ON == 1 */

static radio_status_t RadioLrFhssSetCfg( const radio_lr_fhss_cfg_params_t *cfg_params )
{
 8009fdc:	b480      	push	{r7}
 8009fde:	b085      	sub	sp, #20
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	6078      	str	r0, [r7, #4]
    radio_status_t status = RADIO_STATUS_UNSUPPORTED_FEATURE;
 8009fe4:	2301      	movs	r3, #1
 8009fe6:	73fb      	strb	r3, [r7, #15]
    {
        return status;
    }
    SubgRf.lr_fhss.is_lr_fhss_on = true;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    return  status;
 8009fe8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fea:	4618      	mov	r0, r3
 8009fec:	3714      	adds	r7, #20
 8009fee:	46bd      	mov	sp, r7
 8009ff0:	bc80      	pop	{r7}
 8009ff2:	4770      	bx	lr

08009ff4 <RadioLrFhssGetTimeOnAirInMs>:

static radio_status_t RadioLrFhssGetTimeOnAirInMs( const radio_lr_fhss_time_on_air_params_t *params,
                                                    uint32_t *time_on_air_in_ms )
{
 8009ff4:	b480      	push	{r7}
 8009ff6:	b083      	sub	sp, #12
 8009ff8:	af00      	add	r7, sp, #0
 8009ffa:	6078      	str	r0, [r7, #4]
 8009ffc:	6039      	str	r1, [r7, #0]
    *time_on_air_in_ms = lr_fhss_get_time_on_air_in_ms( &params->radio_lr_fhss_params.lr_fhss_params,
                                                        params->pld_len_in_bytes );

    return RADIO_STATUS_OK;
#else
    return RADIO_STATUS_UNSUPPORTED_FEATURE;
 8009ffe:	2301      	movs	r3, #1
#endif /* RADIO_LR_FHSS_IS_ON */
 800a000:	4618      	mov	r0, r3
 800a002:	370c      	adds	r7, #12
 800a004:	46bd      	mov	sp, r7
 800a006:	bc80      	pop	{r7}
 800a008:	4770      	bx	lr
	...

0800a00c <SUBGRF_Init>:
 */
static DioIrqHandler RadioOnDioIrqCb;

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 800a00c:	b580      	push	{r7, lr}
 800a00e:	b084      	sub	sp, #16
 800a010:	af00      	add	r7, sp, #0
 800a012:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	2b00      	cmp	r3, #0
 800a018:	d002      	beq.n	800a020 <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 800a01a:	4a1d      	ldr	r2, [pc, #116]	; (800a090 <SUBGRF_Init+0x84>)
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 800a020:	f7f8 fd3a 	bl	8002a98 <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 800a024:	2002      	movs	r0, #2
 800a026:	f001 f8ff 	bl	800b228 <Radio_SMPS_Set>

    ImageCalibrated = false;
 800a02a:	4b1a      	ldr	r3, [pc, #104]	; (800a094 <SUBGRF_Init+0x88>)
 800a02c:	2200      	movs	r2, #0
 800a02e:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 800a030:	2000      	movs	r0, #0
 800a032:	f000 f97d 	bl	800a330 <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 800a036:	f001 fb3e 	bl	800b6b6 <RBI_IsTCXO>
 800a03a:	4603      	mov	r3, r0
 800a03c:	2b01      	cmp	r3, #1
 800a03e:	d10e      	bne.n	800a05e <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 800a040:	2140      	movs	r1, #64	; 0x40
 800a042:	2001      	movs	r0, #1
 800a044:	f000 fb82 	bl	800a74c <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 800a048:	2100      	movs	r1, #0
 800a04a:	f640 1011 	movw	r0, #2321	; 0x911
 800a04e:	f000 fef3 	bl	800ae38 <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 800a052:	237f      	movs	r3, #127	; 0x7f
 800a054:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 800a056:	7b38      	ldrb	r0, [r7, #12]
 800a058:	f000 fa8b 	bl	800a572 <SUBGRF_Calibrate>
 800a05c:	e009      	b.n	800a072 <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 800a05e:	2120      	movs	r1, #32
 800a060:	f640 1011 	movw	r0, #2321	; 0x911
 800a064:	f000 fee8 	bl	800ae38 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 800a068:	2120      	movs	r1, #32
 800a06a:	f640 1012 	movw	r0, #2322	; 0x912
 800a06e:	f000 fee3 	bl	800ae38 <SUBGRF_WriteRegister>
    }

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 800a072:	210e      	movs	r1, #14
 800a074:	f640 101f 	movw	r0, #2335	; 0x91f
 800a078:	f000 fede 	bl	800ae38 <SUBGRF_WriteRegister>

    /* Init RF Switch */
    RBI_Init();
 800a07c:	f001 fa86 	bl	800b58c <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 800a080:	4b05      	ldr	r3, [pc, #20]	; (800a098 <SUBGRF_Init+0x8c>)
 800a082:	2201      	movs	r2, #1
 800a084:	701a      	strb	r2, [r3, #0]
}
 800a086:	bf00      	nop
 800a088:	3710      	adds	r7, #16
 800a08a:	46bd      	mov	sp, r7
 800a08c:	bd80      	pop	{r7, pc}
 800a08e:	bf00      	nop
 800a090:	20000afc 	.word	0x20000afc
 800a094:	20000af8 	.word	0x20000af8
 800a098:	20000af0 	.word	0x20000af0

0800a09c <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 800a09c:	b480      	push	{r7}
 800a09e:	af00      	add	r7, sp, #0
    return OperatingMode;
 800a0a0:	4b02      	ldr	r3, [pc, #8]	; (800a0ac <SUBGRF_GetOperatingMode+0x10>)
 800a0a2:	781b      	ldrb	r3, [r3, #0]
}
 800a0a4:	4618      	mov	r0, r3
 800a0a6:	46bd      	mov	sp, r7
 800a0a8:	bc80      	pop	{r7}
 800a0aa:	4770      	bx	lr
 800a0ac:	20000af0 	.word	0x20000af0

0800a0b0 <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 800a0b0:	b580      	push	{r7, lr}
 800a0b2:	b082      	sub	sp, #8
 800a0b4:	af00      	add	r7, sp, #0
 800a0b6:	6078      	str	r0, [r7, #4]
 800a0b8:	460b      	mov	r3, r1
 800a0ba:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 800a0bc:	78fb      	ldrb	r3, [r7, #3]
 800a0be:	461a      	mov	r2, r3
 800a0c0:	6879      	ldr	r1, [r7, #4]
 800a0c2:	2000      	movs	r0, #0
 800a0c4:	f000 ff24 	bl	800af10 <SUBGRF_WriteBuffer>
}
 800a0c8:	bf00      	nop
 800a0ca:	3708      	adds	r7, #8
 800a0cc:	46bd      	mov	sp, r7
 800a0ce:	bd80      	pop	{r7, pc}

0800a0d0 <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 800a0d0:	b580      	push	{r7, lr}
 800a0d2:	b086      	sub	sp, #24
 800a0d4:	af00      	add	r7, sp, #0
 800a0d6:	60f8      	str	r0, [r7, #12]
 800a0d8:	60b9      	str	r1, [r7, #8]
 800a0da:	4613      	mov	r3, r2
 800a0dc:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 800a0de:	2300      	movs	r3, #0
 800a0e0:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 800a0e2:	f107 0317 	add.w	r3, r7, #23
 800a0e6:	4619      	mov	r1, r3
 800a0e8:	68b8      	ldr	r0, [r7, #8]
 800a0ea:	f000 fe27 	bl	800ad3c <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 800a0ee:	68bb      	ldr	r3, [r7, #8]
 800a0f0:	781b      	ldrb	r3, [r3, #0]
 800a0f2:	79fa      	ldrb	r2, [r7, #7]
 800a0f4:	429a      	cmp	r2, r3
 800a0f6:	d201      	bcs.n	800a0fc <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 800a0f8:	2301      	movs	r3, #1
 800a0fa:	e007      	b.n	800a10c <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 800a0fc:	7df8      	ldrb	r0, [r7, #23]
 800a0fe:	68bb      	ldr	r3, [r7, #8]
 800a100:	781b      	ldrb	r3, [r3, #0]
 800a102:	461a      	mov	r2, r3
 800a104:	68f9      	ldr	r1, [r7, #12]
 800a106:	f000 ff25 	bl	800af54 <SUBGRF_ReadBuffer>

    return 0;
 800a10a:	2300      	movs	r3, #0
}
 800a10c:	4618      	mov	r0, r3
 800a10e:	3718      	adds	r7, #24
 800a110:	46bd      	mov	sp, r7
 800a112:	bd80      	pop	{r7, pc}

0800a114 <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 800a114:	b580      	push	{r7, lr}
 800a116:	b084      	sub	sp, #16
 800a118:	af00      	add	r7, sp, #0
 800a11a:	60f8      	str	r0, [r7, #12]
 800a11c:	460b      	mov	r3, r1
 800a11e:	607a      	str	r2, [r7, #4]
 800a120:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 800a122:	7afb      	ldrb	r3, [r7, #11]
 800a124:	4619      	mov	r1, r3
 800a126:	68f8      	ldr	r0, [r7, #12]
 800a128:	f7ff ffc2 	bl	800a0b0 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 800a12c:	6878      	ldr	r0, [r7, #4]
 800a12e:	f000 f91b 	bl	800a368 <SUBGRF_SetTx>
}
 800a132:	bf00      	nop
 800a134:	3710      	adds	r7, #16
 800a136:	46bd      	mov	sp, r7
 800a138:	bd80      	pop	{r7, pc}

0800a13a <SUBGRF_SetSyncWord>:

uint8_t SUBGRF_SetSyncWord( uint8_t *syncWord )
{
 800a13a:	b580      	push	{r7, lr}
 800a13c:	b082      	sub	sp, #8
 800a13e:	af00      	add	r7, sp, #0
 800a140:	6078      	str	r0, [r7, #4]
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 800a142:	2208      	movs	r2, #8
 800a144:	6879      	ldr	r1, [r7, #4]
 800a146:	f44f 60d8 	mov.w	r0, #1728	; 0x6c0
 800a14a:	f000 fe9d 	bl	800ae88 <SUBGRF_WriteRegisters>
    return 0;
 800a14e:	2300      	movs	r3, #0
}
 800a150:	4618      	mov	r0, r3
 800a152:	3708      	adds	r7, #8
 800a154:	46bd      	mov	sp, r7
 800a156:	bd80      	pop	{r7, pc}

0800a158 <SUBGRF_SetCrcSeed>:

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 800a158:	b580      	push	{r7, lr}
 800a15a:	b084      	sub	sp, #16
 800a15c:	af00      	add	r7, sp, #0
 800a15e:	4603      	mov	r3, r0
 800a160:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 800a162:	88fb      	ldrh	r3, [r7, #6]
 800a164:	0a1b      	lsrs	r3, r3, #8
 800a166:	b29b      	uxth	r3, r3
 800a168:	b2db      	uxtb	r3, r3
 800a16a:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 800a16c:	88fb      	ldrh	r3, [r7, #6]
 800a16e:	b2db      	uxtb	r3, r3
 800a170:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 800a172:	f000 fb6f 	bl	800a854 <SUBGRF_GetPacketType>
 800a176:	4603      	mov	r3, r0
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d108      	bne.n	800a18e <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 800a17c:	f107 030c 	add.w	r3, r7, #12
 800a180:	2202      	movs	r2, #2
 800a182:	4619      	mov	r1, r3
 800a184:	f240 60bc 	movw	r0, #1724	; 0x6bc
 800a188:	f000 fe7e 	bl	800ae88 <SUBGRF_WriteRegisters>
            break;
 800a18c:	e000      	b.n	800a190 <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 800a18e:	bf00      	nop
    }
}
 800a190:	bf00      	nop
 800a192:	3710      	adds	r7, #16
 800a194:	46bd      	mov	sp, r7
 800a196:	bd80      	pop	{r7, pc}

0800a198 <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 800a198:	b580      	push	{r7, lr}
 800a19a:	b084      	sub	sp, #16
 800a19c:	af00      	add	r7, sp, #0
 800a19e:	4603      	mov	r3, r0
 800a1a0:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 800a1a2:	88fb      	ldrh	r3, [r7, #6]
 800a1a4:	0a1b      	lsrs	r3, r3, #8
 800a1a6:	b29b      	uxth	r3, r3
 800a1a8:	b2db      	uxtb	r3, r3
 800a1aa:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 800a1ac:	88fb      	ldrh	r3, [r7, #6]
 800a1ae:	b2db      	uxtb	r3, r3
 800a1b0:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 800a1b2:	f000 fb4f 	bl	800a854 <SUBGRF_GetPacketType>
 800a1b6:	4603      	mov	r3, r0
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d108      	bne.n	800a1ce <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 800a1bc:	f107 030c 	add.w	r3, r7, #12
 800a1c0:	2202      	movs	r2, #2
 800a1c2:	4619      	mov	r1, r3
 800a1c4:	f240 60be 	movw	r0, #1726	; 0x6be
 800a1c8:	f000 fe5e 	bl	800ae88 <SUBGRF_WriteRegisters>
            break;
 800a1cc:	e000      	b.n	800a1d0 <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 800a1ce:	bf00      	nop
    }
}
 800a1d0:	bf00      	nop
 800a1d2:	3710      	adds	r7, #16
 800a1d4:	46bd      	mov	sp, r7
 800a1d6:	bd80      	pop	{r7, pc}

0800a1d8 <SUBGRF_SetWhiteningSeed>:

void SUBGRF_SetWhiteningSeed( uint16_t seed )
{
 800a1d8:	b580      	push	{r7, lr}
 800a1da:	b084      	sub	sp, #16
 800a1dc:	af00      	add	r7, sp, #0
 800a1de:	4603      	mov	r3, r0
 800a1e0:	80fb      	strh	r3, [r7, #6]
    uint8_t regValue = 0;
 800a1e2:	2300      	movs	r3, #0
 800a1e4:	73fb      	strb	r3, [r7, #15]

    switch( SUBGRF_GetPacketType( ) )
 800a1e6:	f000 fb35 	bl	800a854 <SUBGRF_GetPacketType>
 800a1ea:	4603      	mov	r3, r0
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d121      	bne.n	800a234 <SUBGRF_SetWhiteningSeed+0x5c>
    {
        case PACKET_TYPE_GFSK:
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 800a1f0:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 800a1f4:	f000 fe34 	bl	800ae60 <SUBGRF_ReadRegister>
 800a1f8:	4603      	mov	r3, r0
 800a1fa:	f023 0301 	bic.w	r3, r3, #1
 800a1fe:	73fb      	strb	r3, [r7, #15]
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 800a200:	88fb      	ldrh	r3, [r7, #6]
 800a202:	0a1b      	lsrs	r3, r3, #8
 800a204:	b29b      	uxth	r3, r3
 800a206:	b25b      	sxtb	r3, r3
 800a208:	f003 0301 	and.w	r3, r3, #1
 800a20c:	b25a      	sxtb	r2, r3
 800a20e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a212:	4313      	orrs	r3, r2
 800a214:	b25b      	sxtb	r3, r3
 800a216:	73fb      	strb	r3, [r7, #15]
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 800a218:	7bfb      	ldrb	r3, [r7, #15]
 800a21a:	4619      	mov	r1, r3
 800a21c:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 800a220:	f000 fe0a 	bl	800ae38 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 800a224:	88fb      	ldrh	r3, [r7, #6]
 800a226:	b2db      	uxtb	r3, r3
 800a228:	4619      	mov	r1, r3
 800a22a:	f240 60b9 	movw	r0, #1721	; 0x6b9
 800a22e:	f000 fe03 	bl	800ae38 <SUBGRF_WriteRegister>
            break;
 800a232:	e000      	b.n	800a236 <SUBGRF_SetWhiteningSeed+0x5e>

        default:
            break;
 800a234:	bf00      	nop
    }
}
 800a236:	bf00      	nop
 800a238:	3710      	adds	r7, #16
 800a23a:	46bd      	mov	sp, r7
 800a23c:	bd80      	pop	{r7, pc}

0800a23e <SUBGRF_GetRandom>:

uint32_t SUBGRF_GetRandom( void )
{
 800a23e:	b580      	push	{r7, lr}
 800a240:	b082      	sub	sp, #8
 800a242:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 800a244:	2300      	movs	r3, #0
 800a246:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 800a248:	2300      	movs	r3, #0
 800a24a:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 800a24c:	2300      	movs	r3, #0
 800a24e:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 800a250:	f640 00e2 	movw	r0, #2274	; 0x8e2
 800a254:	f000 fe04 	bl	800ae60 <SUBGRF_ReadRegister>
 800a258:	4603      	mov	r3, r0
 800a25a:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 800a25c:	79fb      	ldrb	r3, [r7, #7]
 800a25e:	f023 0301 	bic.w	r3, r3, #1
 800a262:	b2db      	uxtb	r3, r3
 800a264:	4619      	mov	r1, r3
 800a266:	f640 00e2 	movw	r0, #2274	; 0x8e2
 800a26a:	f000 fde5 	bl	800ae38 <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 800a26e:	f640 00e5 	movw	r0, #2277	; 0x8e5
 800a272:	f000 fdf5 	bl	800ae60 <SUBGRF_ReadRegister>
 800a276:	4603      	mov	r3, r0
 800a278:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 800a27a:	79bb      	ldrb	r3, [r7, #6]
 800a27c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a280:	b2db      	uxtb	r3, r3
 800a282:	4619      	mov	r1, r3
 800a284:	f640 00e5 	movw	r0, #2277	; 0x8e5
 800a288:	f000 fdd6 	bl	800ae38 <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 800a28c:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800a290:	f000 f88a 	bl	800a3a8 <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 800a294:	463b      	mov	r3, r7
 800a296:	2204      	movs	r2, #4
 800a298:	4619      	mov	r1, r3
 800a29a:	f640 0019 	movw	r0, #2073	; 0x819
 800a29e:	f000 fe15 	bl	800aecc <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 800a2a2:	2000      	movs	r0, #0
 800a2a4:	f000 f844 	bl	800a330 <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 800a2a8:	79fb      	ldrb	r3, [r7, #7]
 800a2aa:	4619      	mov	r1, r3
 800a2ac:	f640 00e2 	movw	r0, #2274	; 0x8e2
 800a2b0:	f000 fdc2 	bl	800ae38 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 800a2b4:	79bb      	ldrb	r3, [r7, #6]
 800a2b6:	4619      	mov	r1, r3
 800a2b8:	f640 00e5 	movw	r0, #2277	; 0x8e5
 800a2bc:	f000 fdbc 	bl	800ae38 <SUBGRF_WriteRegister>

    return number;
 800a2c0:	683b      	ldr	r3, [r7, #0]
}
 800a2c2:	4618      	mov	r0, r3
 800a2c4:	3708      	adds	r7, #8
 800a2c6:	46bd      	mov	sp, r7
 800a2c8:	bd80      	pop	{r7, pc}
	...

0800a2cc <SUBGRF_SetSleep>:

void SUBGRF_SetSleep( SleepParams_t sleepConfig )
{
 800a2cc:	b580      	push	{r7, lr}
 800a2ce:	b084      	sub	sp, #16
 800a2d0:	af00      	add	r7, sp, #0
 800a2d2:	7138      	strb	r0, [r7, #4]
    /* switch the antenna OFF by SW */
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 800a2d4:	2000      	movs	r0, #0
 800a2d6:	f001 f999 	bl	800b60c <RBI_ConfigRFSwitch>

    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 800a2da:	2002      	movs	r0, #2
 800a2dc:	f000 ffa4 	bl	800b228 <Radio_SMPS_Set>

    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 800a2e0:	793b      	ldrb	r3, [r7, #4]
 800a2e2:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800a2e6:	b2db      	uxtb	r3, r3
 800a2e8:	009b      	lsls	r3, r3, #2
 800a2ea:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 800a2ec:	793b      	ldrb	r3, [r7, #4]
 800a2ee:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800a2f2:	b2db      	uxtb	r3, r3
 800a2f4:	005b      	lsls	r3, r3, #1
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 800a2f6:	b25b      	sxtb	r3, r3
 800a2f8:	4313      	orrs	r3, r2
 800a2fa:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 800a2fc:	793b      	ldrb	r3, [r7, #4]
 800a2fe:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800a302:	b2db      	uxtb	r3, r3
 800a304:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 800a306:	4313      	orrs	r3, r2
 800a308:	b25b      	sxtb	r3, r3
 800a30a:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 800a30c:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 800a30e:	f107 030f 	add.w	r3, r7, #15
 800a312:	2201      	movs	r2, #1
 800a314:	4619      	mov	r1, r3
 800a316:	2084      	movs	r0, #132	; 0x84
 800a318:	f000 fe3e 	bl	800af98 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 800a31c:	4b03      	ldr	r3, [pc, #12]	; (800a32c <SUBGRF_SetSleep+0x60>)
 800a31e:	2200      	movs	r2, #0
 800a320:	701a      	strb	r2, [r3, #0]
}
 800a322:	bf00      	nop
 800a324:	3710      	adds	r7, #16
 800a326:	46bd      	mov	sp, r7
 800a328:	bd80      	pop	{r7, pc}
 800a32a:	bf00      	nop
 800a32c:	20000af0 	.word	0x20000af0

0800a330 <SUBGRF_SetStandby>:

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 800a330:	b580      	push	{r7, lr}
 800a332:	b082      	sub	sp, #8
 800a334:	af00      	add	r7, sp, #0
 800a336:	4603      	mov	r3, r0
 800a338:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 800a33a:	1dfb      	adds	r3, r7, #7
 800a33c:	2201      	movs	r2, #1
 800a33e:	4619      	mov	r1, r3
 800a340:	2080      	movs	r0, #128	; 0x80
 800a342:	f000 fe29 	bl	800af98 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 800a346:	79fb      	ldrb	r3, [r7, #7]
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d103      	bne.n	800a354 <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 800a34c:	4b05      	ldr	r3, [pc, #20]	; (800a364 <SUBGRF_SetStandby+0x34>)
 800a34e:	2201      	movs	r2, #1
 800a350:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 800a352:	e002      	b.n	800a35a <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 800a354:	4b03      	ldr	r3, [pc, #12]	; (800a364 <SUBGRF_SetStandby+0x34>)
 800a356:	2202      	movs	r2, #2
 800a358:	701a      	strb	r2, [r3, #0]
}
 800a35a:	bf00      	nop
 800a35c:	3708      	adds	r7, #8
 800a35e:	46bd      	mov	sp, r7
 800a360:	bd80      	pop	{r7, pc}
 800a362:	bf00      	nop
 800a364:	20000af0 	.word	0x20000af0

0800a368 <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 800a368:	b580      	push	{r7, lr}
 800a36a:	b084      	sub	sp, #16
 800a36c:	af00      	add	r7, sp, #0
 800a36e:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 800a370:	4b0c      	ldr	r3, [pc, #48]	; (800a3a4 <SUBGRF_SetTx+0x3c>)
 800a372:	2204      	movs	r2, #4
 800a374:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	0c1b      	lsrs	r3, r3, #16
 800a37a:	b2db      	uxtb	r3, r3
 800a37c:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	0a1b      	lsrs	r3, r3, #8
 800a382:	b2db      	uxtb	r3, r3
 800a384:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	b2db      	uxtb	r3, r3
 800a38a:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 800a38c:	f107 030c 	add.w	r3, r7, #12
 800a390:	2203      	movs	r2, #3
 800a392:	4619      	mov	r1, r3
 800a394:	2083      	movs	r0, #131	; 0x83
 800a396:	f000 fdff 	bl	800af98 <SUBGRF_WriteCommand>
}
 800a39a:	bf00      	nop
 800a39c:	3710      	adds	r7, #16
 800a39e:	46bd      	mov	sp, r7
 800a3a0:	bd80      	pop	{r7, pc}
 800a3a2:	bf00      	nop
 800a3a4:	20000af0 	.word	0x20000af0

0800a3a8 <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 800a3a8:	b580      	push	{r7, lr}
 800a3aa:	b084      	sub	sp, #16
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 800a3b0:	4b0c      	ldr	r3, [pc, #48]	; (800a3e4 <SUBGRF_SetRx+0x3c>)
 800a3b2:	2205      	movs	r2, #5
 800a3b4:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	0c1b      	lsrs	r3, r3, #16
 800a3ba:	b2db      	uxtb	r3, r3
 800a3bc:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	0a1b      	lsrs	r3, r3, #8
 800a3c2:	b2db      	uxtb	r3, r3
 800a3c4:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	b2db      	uxtb	r3, r3
 800a3ca:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 800a3cc:	f107 030c 	add.w	r3, r7, #12
 800a3d0:	2203      	movs	r2, #3
 800a3d2:	4619      	mov	r1, r3
 800a3d4:	2082      	movs	r0, #130	; 0x82
 800a3d6:	f000 fddf 	bl	800af98 <SUBGRF_WriteCommand>
}
 800a3da:	bf00      	nop
 800a3dc:	3710      	adds	r7, #16
 800a3de:	46bd      	mov	sp, r7
 800a3e0:	bd80      	pop	{r7, pc}
 800a3e2:	bf00      	nop
 800a3e4:	20000af0 	.word	0x20000af0

0800a3e8 <SUBGRF_SetRxBoosted>:

void SUBGRF_SetRxBoosted( uint32_t timeout )
{
 800a3e8:	b580      	push	{r7, lr}
 800a3ea:	b084      	sub	sp, #16
 800a3ec:	af00      	add	r7, sp, #0
 800a3ee:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 800a3f0:	4b0e      	ldr	r3, [pc, #56]	; (800a42c <SUBGRF_SetRxBoosted+0x44>)
 800a3f2:	2205      	movs	r2, #5
 800a3f4:	701a      	strb	r2, [r3, #0]

    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 800a3f6:	2197      	movs	r1, #151	; 0x97
 800a3f8:	f640 00ac 	movw	r0, #2220	; 0x8ac
 800a3fc:	f000 fd1c 	bl	800ae38 <SUBGRF_WriteRegister>

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	0c1b      	lsrs	r3, r3, #16
 800a404:	b2db      	uxtb	r3, r3
 800a406:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	0a1b      	lsrs	r3, r3, #8
 800a40c:	b2db      	uxtb	r3, r3
 800a40e:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	b2db      	uxtb	r3, r3
 800a414:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 800a416:	f107 030c 	add.w	r3, r7, #12
 800a41a:	2203      	movs	r2, #3
 800a41c:	4619      	mov	r1, r3
 800a41e:	2082      	movs	r0, #130	; 0x82
 800a420:	f000 fdba 	bl	800af98 <SUBGRF_WriteCommand>
}
 800a424:	bf00      	nop
 800a426:	3710      	adds	r7, #16
 800a428:	46bd      	mov	sp, r7
 800a42a:	bd80      	pop	{r7, pc}
 800a42c:	20000af0 	.word	0x20000af0

0800a430 <SUBGRF_SetRxDutyCycle>:

void SUBGRF_SetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 800a430:	b580      	push	{r7, lr}
 800a432:	b084      	sub	sp, #16
 800a434:	af00      	add	r7, sp, #0
 800a436:	6078      	str	r0, [r7, #4]
 800a438:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];

    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	0c1b      	lsrs	r3, r3, #16
 800a43e:	b2db      	uxtb	r3, r3
 800a440:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	0a1b      	lsrs	r3, r3, #8
 800a446:	b2db      	uxtb	r3, r3
 800a448:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	b2db      	uxtb	r3, r3
 800a44e:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 800a450:	683b      	ldr	r3, [r7, #0]
 800a452:	0c1b      	lsrs	r3, r3, #16
 800a454:	b2db      	uxtb	r3, r3
 800a456:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 800a458:	683b      	ldr	r3, [r7, #0]
 800a45a:	0a1b      	lsrs	r3, r3, #8
 800a45c:	b2db      	uxtb	r3, r3
 800a45e:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 800a460:	683b      	ldr	r3, [r7, #0]
 800a462:	b2db      	uxtb	r3, r3
 800a464:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 800a466:	f107 0308 	add.w	r3, r7, #8
 800a46a:	2206      	movs	r2, #6
 800a46c:	4619      	mov	r1, r3
 800a46e:	2094      	movs	r0, #148	; 0x94
 800a470:	f000 fd92 	bl	800af98 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 800a474:	4b03      	ldr	r3, [pc, #12]	; (800a484 <SUBGRF_SetRxDutyCycle+0x54>)
 800a476:	2206      	movs	r2, #6
 800a478:	701a      	strb	r2, [r3, #0]
}
 800a47a:	bf00      	nop
 800a47c:	3710      	adds	r7, #16
 800a47e:	46bd      	mov	sp, r7
 800a480:	bd80      	pop	{r7, pc}
 800a482:	bf00      	nop
 800a484:	20000af0 	.word	0x20000af0

0800a488 <SUBGRF_SetCad>:

void SUBGRF_SetCad( void )
{
 800a488:	b580      	push	{r7, lr}
 800a48a:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 800a48c:	2200      	movs	r2, #0
 800a48e:	2100      	movs	r1, #0
 800a490:	20c5      	movs	r0, #197	; 0xc5
 800a492:	f000 fd81 	bl	800af98 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 800a496:	4b02      	ldr	r3, [pc, #8]	; (800a4a0 <SUBGRF_SetCad+0x18>)
 800a498:	2207      	movs	r2, #7
 800a49a:	701a      	strb	r2, [r3, #0]
}
 800a49c:	bf00      	nop
 800a49e:	bd80      	pop	{r7, pc}
 800a4a0:	20000af0 	.word	0x20000af0

0800a4a4 <SUBGRF_SetTxContinuousWave>:

void SUBGRF_SetTxContinuousWave( void )
{
 800a4a4:	b580      	push	{r7, lr}
 800a4a6:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 800a4a8:	2200      	movs	r2, #0
 800a4aa:	2100      	movs	r1, #0
 800a4ac:	20d1      	movs	r0, #209	; 0xd1
 800a4ae:	f000 fd73 	bl	800af98 <SUBGRF_WriteCommand>
}
 800a4b2:	bf00      	nop
 800a4b4:	bd80      	pop	{r7, pc}

0800a4b6 <SUBGRF_SetTxInfinitePreamble>:

void SUBGRF_SetTxInfinitePreamble( void )
{
 800a4b6:	b580      	push	{r7, lr}
 800a4b8:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 800a4ba:	2200      	movs	r2, #0
 800a4bc:	2100      	movs	r1, #0
 800a4be:	20d2      	movs	r0, #210	; 0xd2
 800a4c0:	f000 fd6a 	bl	800af98 <SUBGRF_WriteCommand>
}
 800a4c4:	bf00      	nop
 800a4c6:	bd80      	pop	{r7, pc}

0800a4c8 <SUBGRF_SetStopRxTimerOnPreambleDetect>:

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 800a4c8:	b580      	push	{r7, lr}
 800a4ca:	b082      	sub	sp, #8
 800a4cc:	af00      	add	r7, sp, #0
 800a4ce:	4603      	mov	r3, r0
 800a4d0:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 800a4d2:	1dfb      	adds	r3, r7, #7
 800a4d4:	2201      	movs	r2, #1
 800a4d6:	4619      	mov	r1, r3
 800a4d8:	209f      	movs	r0, #159	; 0x9f
 800a4da:	f000 fd5d 	bl	800af98 <SUBGRF_WriteCommand>
}
 800a4de:	bf00      	nop
 800a4e0:	3708      	adds	r7, #8
 800a4e2:	46bd      	mov	sp, r7
 800a4e4:	bd80      	pop	{r7, pc}

0800a4e6 <SUBGRF_SetLoRaSymbNumTimeout>:

void SUBGRF_SetLoRaSymbNumTimeout( uint8_t symbNum )
{
 800a4e6:	b580      	push	{r7, lr}
 800a4e8:	b084      	sub	sp, #16
 800a4ea:	af00      	add	r7, sp, #0
 800a4ec:	4603      	mov	r3, r0
 800a4ee:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 800a4f0:	1dfb      	adds	r3, r7, #7
 800a4f2:	2201      	movs	r2, #1
 800a4f4:	4619      	mov	r1, r3
 800a4f6:	20a0      	movs	r0, #160	; 0xa0
 800a4f8:	f000 fd4e 	bl	800af98 <SUBGRF_WriteCommand>

    if( symbNum >= 64 )
 800a4fc:	79fb      	ldrb	r3, [r7, #7]
 800a4fe:	2b3f      	cmp	r3, #63	; 0x3f
 800a500:	d91c      	bls.n	800a53c <SUBGRF_SetLoRaSymbNumTimeout+0x56>
    {
        uint8_t mant = symbNum >> 1;
 800a502:	79fb      	ldrb	r3, [r7, #7]
 800a504:	085b      	lsrs	r3, r3, #1
 800a506:	73fb      	strb	r3, [r7, #15]
        uint8_t exp  = 0;
 800a508:	2300      	movs	r3, #0
 800a50a:	73bb      	strb	r3, [r7, #14]
        uint8_t reg  = 0;
 800a50c:	2300      	movs	r3, #0
 800a50e:	737b      	strb	r3, [r7, #13]

        while( mant > 31 )
 800a510:	e005      	b.n	800a51e <SUBGRF_SetLoRaSymbNumTimeout+0x38>
        {
            mant >>= 2;
 800a512:	7bfb      	ldrb	r3, [r7, #15]
 800a514:	089b      	lsrs	r3, r3, #2
 800a516:	73fb      	strb	r3, [r7, #15]
            exp++;
 800a518:	7bbb      	ldrb	r3, [r7, #14]
 800a51a:	3301      	adds	r3, #1
 800a51c:	73bb      	strb	r3, [r7, #14]
        while( mant > 31 )
 800a51e:	7bfb      	ldrb	r3, [r7, #15]
 800a520:	2b1f      	cmp	r3, #31
 800a522:	d8f6      	bhi.n	800a512 <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
        }

        reg = exp + ( mant << 3 );
 800a524:	7bfb      	ldrb	r3, [r7, #15]
 800a526:	00db      	lsls	r3, r3, #3
 800a528:	b2da      	uxtb	r2, r3
 800a52a:	7bbb      	ldrb	r3, [r7, #14]
 800a52c:	4413      	add	r3, r2
 800a52e:	737b      	strb	r3, [r7, #13]
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 800a530:	7b7b      	ldrb	r3, [r7, #13]
 800a532:	4619      	mov	r1, r3
 800a534:	f240 7006 	movw	r0, #1798	; 0x706
 800a538:	f000 fc7e 	bl	800ae38 <SUBGRF_WriteRegister>
    }
}
 800a53c:	bf00      	nop
 800a53e:	3710      	adds	r7, #16
 800a540:	46bd      	mov	sp, r7
 800a542:	bd80      	pop	{r7, pc}

0800a544 <SUBGRF_SetRegulatorMode>:

void SUBGRF_SetRegulatorMode( void )
{
 800a544:	b580      	push	{r7, lr}
 800a546:	b082      	sub	sp, #8
 800a548:	af00      	add	r7, sp, #0
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 800a54a:	f001 f8bf 	bl	800b6cc <RBI_IsDCDC>
 800a54e:	4603      	mov	r3, r0
 800a550:	2b01      	cmp	r3, #1
 800a552:	d102      	bne.n	800a55a <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 800a554:	2301      	movs	r3, #1
 800a556:	71fb      	strb	r3, [r7, #7]
 800a558:	e001      	b.n	800a55e <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 800a55a:	2300      	movs	r3, #0
 800a55c:	71fb      	strb	r3, [r7, #7]
    }
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 800a55e:	1dfb      	adds	r3, r7, #7
 800a560:	2201      	movs	r2, #1
 800a562:	4619      	mov	r1, r3
 800a564:	2096      	movs	r0, #150	; 0x96
 800a566:	f000 fd17 	bl	800af98 <SUBGRF_WriteCommand>
}
 800a56a:	bf00      	nop
 800a56c:	3708      	adds	r7, #8
 800a56e:	46bd      	mov	sp, r7
 800a570:	bd80      	pop	{r7, pc}

0800a572 <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 800a572:	b580      	push	{r7, lr}
 800a574:	b084      	sub	sp, #16
 800a576:	af00      	add	r7, sp, #0
 800a578:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800a57a:	793b      	ldrb	r3, [r7, #4]
 800a57c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800a580:	b2db      	uxtb	r3, r3
 800a582:	019b      	lsls	r3, r3, #6
 800a584:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 800a586:	793b      	ldrb	r3, [r7, #4]
 800a588:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800a58c:	b2db      	uxtb	r3, r3
 800a58e:	015b      	lsls	r3, r3, #5
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800a590:	b25b      	sxtb	r3, r3
 800a592:	4313      	orrs	r3, r2
 800a594:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 800a596:	793b      	ldrb	r3, [r7, #4]
 800a598:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800a59c:	b2db      	uxtb	r3, r3
 800a59e:	011b      	lsls	r3, r3, #4
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 800a5a0:	b25b      	sxtb	r3, r3
 800a5a2:	4313      	orrs	r3, r2
 800a5a4:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 800a5a6:	793b      	ldrb	r3, [r7, #4]
 800a5a8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800a5ac:	b2db      	uxtb	r3, r3
 800a5ae:	00db      	lsls	r3, r3, #3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 800a5b0:	b25b      	sxtb	r3, r3
 800a5b2:	4313      	orrs	r3, r2
 800a5b4:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 800a5b6:	793b      	ldrb	r3, [r7, #4]
 800a5b8:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800a5bc:	b2db      	uxtb	r3, r3
 800a5be:	009b      	lsls	r3, r3, #2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 800a5c0:	b25b      	sxtb	r3, r3
 800a5c2:	4313      	orrs	r3, r2
 800a5c4:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 800a5c6:	793b      	ldrb	r3, [r7, #4]
 800a5c8:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800a5cc:	b2db      	uxtb	r3, r3
 800a5ce:	005b      	lsls	r3, r3, #1
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 800a5d0:	b25b      	sxtb	r3, r3
 800a5d2:	4313      	orrs	r3, r2
 800a5d4:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 800a5d6:	793b      	ldrb	r3, [r7, #4]
 800a5d8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800a5dc:	b2db      	uxtb	r3, r3
 800a5de:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 800a5e0:	4313      	orrs	r3, r2
 800a5e2:	b25b      	sxtb	r3, r3
 800a5e4:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800a5e6:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 800a5e8:	f107 030f 	add.w	r3, r7, #15
 800a5ec:	2201      	movs	r2, #1
 800a5ee:	4619      	mov	r1, r3
 800a5f0:	2089      	movs	r0, #137	; 0x89
 800a5f2:	f000 fcd1 	bl	800af98 <SUBGRF_WriteCommand>
}
 800a5f6:	bf00      	nop
 800a5f8:	3710      	adds	r7, #16
 800a5fa:	46bd      	mov	sp, r7
 800a5fc:	bd80      	pop	{r7, pc}
	...

0800a600 <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 800a600:	b580      	push	{r7, lr}
 800a602:	b084      	sub	sp, #16
 800a604:	af00      	add	r7, sp, #0
 800a606:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	4a1d      	ldr	r2, [pc, #116]	; (800a680 <SUBGRF_CalibrateImage+0x80>)
 800a60c:	4293      	cmp	r3, r2
 800a60e:	d904      	bls.n	800a61a <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 800a610:	23e1      	movs	r3, #225	; 0xe1
 800a612:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 800a614:	23e9      	movs	r3, #233	; 0xe9
 800a616:	737b      	strb	r3, [r7, #13]
 800a618:	e027      	b.n	800a66a <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 850000000 )
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	4a19      	ldr	r2, [pc, #100]	; (800a684 <SUBGRF_CalibrateImage+0x84>)
 800a61e:	4293      	cmp	r3, r2
 800a620:	d904      	bls.n	800a62c <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 800a622:	23d7      	movs	r3, #215	; 0xd7
 800a624:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 800a626:	23db      	movs	r3, #219	; 0xdb
 800a628:	737b      	strb	r3, [r7, #13]
 800a62a:	e01e      	b.n	800a66a <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 770000000 )
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	4a16      	ldr	r2, [pc, #88]	; (800a688 <SUBGRF_CalibrateImage+0x88>)
 800a630:	4293      	cmp	r3, r2
 800a632:	d904      	bls.n	800a63e <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 800a634:	23c1      	movs	r3, #193	; 0xc1
 800a636:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 800a638:	23c5      	movs	r3, #197	; 0xc5
 800a63a:	737b      	strb	r3, [r7, #13]
 800a63c:	e015      	b.n	800a66a <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 460000000 )
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	4a12      	ldr	r2, [pc, #72]	; (800a68c <SUBGRF_CalibrateImage+0x8c>)
 800a642:	4293      	cmp	r3, r2
 800a644:	d904      	bls.n	800a650 <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 800a646:	2375      	movs	r3, #117	; 0x75
 800a648:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 800a64a:	2381      	movs	r3, #129	; 0x81
 800a64c:	737b      	strb	r3, [r7, #13]
 800a64e:	e00c      	b.n	800a66a <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 425000000 )
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	4a0f      	ldr	r2, [pc, #60]	; (800a690 <SUBGRF_CalibrateImage+0x90>)
 800a654:	4293      	cmp	r3, r2
 800a656:	d904      	bls.n	800a662 <SUBGRF_CalibrateImage+0x62>
    {
        calFreq[0] = 0x6B;
 800a658:	236b      	movs	r3, #107	; 0x6b
 800a65a:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 800a65c:	236f      	movs	r3, #111	; 0x6f
 800a65e:	737b      	strb	r3, [r7, #13]
 800a660:	e003      	b.n	800a66a <SUBGRF_CalibrateImage+0x6a>
    }
    else /* freq <= 425000000*/
    {
        /* [ 156MHz - 171MHz ] */
        calFreq[0] = 0x29;
 800a662:	2329      	movs	r3, #41	; 0x29
 800a664:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x2B ;
 800a666:	232b      	movs	r3, #43	; 0x2b
 800a668:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 800a66a:	f107 030c 	add.w	r3, r7, #12
 800a66e:	2202      	movs	r2, #2
 800a670:	4619      	mov	r1, r3
 800a672:	2098      	movs	r0, #152	; 0x98
 800a674:	f000 fc90 	bl	800af98 <SUBGRF_WriteCommand>
}
 800a678:	bf00      	nop
 800a67a:	3710      	adds	r7, #16
 800a67c:	46bd      	mov	sp, r7
 800a67e:	bd80      	pop	{r7, pc}
 800a680:	35a4e900 	.word	0x35a4e900
 800a684:	32a9f880 	.word	0x32a9f880
 800a688:	2de54480 	.word	0x2de54480
 800a68c:	1b6b0b00 	.word	0x1b6b0b00
 800a690:	1954fc40 	.word	0x1954fc40

0800a694 <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 800a694:	b590      	push	{r4, r7, lr}
 800a696:	b085      	sub	sp, #20
 800a698:	af00      	add	r7, sp, #0
 800a69a:	4604      	mov	r4, r0
 800a69c:	4608      	mov	r0, r1
 800a69e:	4611      	mov	r1, r2
 800a6a0:	461a      	mov	r2, r3
 800a6a2:	4623      	mov	r3, r4
 800a6a4:	71fb      	strb	r3, [r7, #7]
 800a6a6:	4603      	mov	r3, r0
 800a6a8:	71bb      	strb	r3, [r7, #6]
 800a6aa:	460b      	mov	r3, r1
 800a6ac:	717b      	strb	r3, [r7, #5]
 800a6ae:	4613      	mov	r3, r2
 800a6b0:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 800a6b2:	79fb      	ldrb	r3, [r7, #7]
 800a6b4:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 800a6b6:	79bb      	ldrb	r3, [r7, #6]
 800a6b8:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 800a6ba:	797b      	ldrb	r3, [r7, #5]
 800a6bc:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 800a6be:	793b      	ldrb	r3, [r7, #4]
 800a6c0:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 800a6c2:	f107 030c 	add.w	r3, r7, #12
 800a6c6:	2204      	movs	r2, #4
 800a6c8:	4619      	mov	r1, r3
 800a6ca:	2095      	movs	r0, #149	; 0x95
 800a6cc:	f000 fc64 	bl	800af98 <SUBGRF_WriteCommand>
}
 800a6d0:	bf00      	nop
 800a6d2:	3714      	adds	r7, #20
 800a6d4:	46bd      	mov	sp, r7
 800a6d6:	bd90      	pop	{r4, r7, pc}

0800a6d8 <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 800a6d8:	b590      	push	{r4, r7, lr}
 800a6da:	b085      	sub	sp, #20
 800a6dc:	af00      	add	r7, sp, #0
 800a6de:	4604      	mov	r4, r0
 800a6e0:	4608      	mov	r0, r1
 800a6e2:	4611      	mov	r1, r2
 800a6e4:	461a      	mov	r2, r3
 800a6e6:	4623      	mov	r3, r4
 800a6e8:	80fb      	strh	r3, [r7, #6]
 800a6ea:	4603      	mov	r3, r0
 800a6ec:	80bb      	strh	r3, [r7, #4]
 800a6ee:	460b      	mov	r3, r1
 800a6f0:	807b      	strh	r3, [r7, #2]
 800a6f2:	4613      	mov	r3, r2
 800a6f4:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 800a6f6:	88fb      	ldrh	r3, [r7, #6]
 800a6f8:	0a1b      	lsrs	r3, r3, #8
 800a6fa:	b29b      	uxth	r3, r3
 800a6fc:	b2db      	uxtb	r3, r3
 800a6fe:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 800a700:	88fb      	ldrh	r3, [r7, #6]
 800a702:	b2db      	uxtb	r3, r3
 800a704:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 800a706:	88bb      	ldrh	r3, [r7, #4]
 800a708:	0a1b      	lsrs	r3, r3, #8
 800a70a:	b29b      	uxth	r3, r3
 800a70c:	b2db      	uxtb	r3, r3
 800a70e:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 800a710:	88bb      	ldrh	r3, [r7, #4]
 800a712:	b2db      	uxtb	r3, r3
 800a714:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 800a716:	887b      	ldrh	r3, [r7, #2]
 800a718:	0a1b      	lsrs	r3, r3, #8
 800a71a:	b29b      	uxth	r3, r3
 800a71c:	b2db      	uxtb	r3, r3
 800a71e:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 800a720:	887b      	ldrh	r3, [r7, #2]
 800a722:	b2db      	uxtb	r3, r3
 800a724:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 800a726:	883b      	ldrh	r3, [r7, #0]
 800a728:	0a1b      	lsrs	r3, r3, #8
 800a72a:	b29b      	uxth	r3, r3
 800a72c:	b2db      	uxtb	r3, r3
 800a72e:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 800a730:	883b      	ldrh	r3, [r7, #0]
 800a732:	b2db      	uxtb	r3, r3
 800a734:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 800a736:	f107 0308 	add.w	r3, r7, #8
 800a73a:	2208      	movs	r2, #8
 800a73c:	4619      	mov	r1, r3
 800a73e:	2008      	movs	r0, #8
 800a740:	f000 fc2a 	bl	800af98 <SUBGRF_WriteCommand>
}
 800a744:	bf00      	nop
 800a746:	3714      	adds	r7, #20
 800a748:	46bd      	mov	sp, r7
 800a74a:	bd90      	pop	{r4, r7, pc}

0800a74c <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 800a74c:	b580      	push	{r7, lr}
 800a74e:	b084      	sub	sp, #16
 800a750:	af00      	add	r7, sp, #0
 800a752:	4603      	mov	r3, r0
 800a754:	6039      	str	r1, [r7, #0]
 800a756:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 800a758:	79fb      	ldrb	r3, [r7, #7]
 800a75a:	f003 0307 	and.w	r3, r3, #7
 800a75e:	b2db      	uxtb	r3, r3
 800a760:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800a762:	683b      	ldr	r3, [r7, #0]
 800a764:	0c1b      	lsrs	r3, r3, #16
 800a766:	b2db      	uxtb	r3, r3
 800a768:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800a76a:	683b      	ldr	r3, [r7, #0]
 800a76c:	0a1b      	lsrs	r3, r3, #8
 800a76e:	b2db      	uxtb	r3, r3
 800a770:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 800a772:	683b      	ldr	r3, [r7, #0]
 800a774:	b2db      	uxtb	r3, r3
 800a776:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 800a778:	f107 030c 	add.w	r3, r7, #12
 800a77c:	2204      	movs	r2, #4
 800a77e:	4619      	mov	r1, r3
 800a780:	2097      	movs	r0, #151	; 0x97
 800a782:	f000 fc09 	bl	800af98 <SUBGRF_WriteCommand>
}
 800a786:	bf00      	nop
 800a788:	3710      	adds	r7, #16
 800a78a:	46bd      	mov	sp, r7
 800a78c:	bd80      	pop	{r7, pc}
	...

0800a790 <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 800a790:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800a794:	b084      	sub	sp, #16
 800a796:	af00      	add	r7, sp, #0
 800a798:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 800a79a:	2300      	movs	r3, #0
 800a79c:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 800a79e:	4b1d      	ldr	r3, [pc, #116]	; (800a814 <SUBGRF_SetRfFrequency+0x84>)
 800a7a0:	781b      	ldrb	r3, [r3, #0]
 800a7a2:	f083 0301 	eor.w	r3, r3, #1
 800a7a6:	b2db      	uxtb	r3, r3
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d005      	beq.n	800a7b8 <SUBGRF_SetRfFrequency+0x28>
    {
        SUBGRF_CalibrateImage( frequency );
 800a7ac:	6878      	ldr	r0, [r7, #4]
 800a7ae:	f7ff ff27 	bl	800a600 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 800a7b2:	4b18      	ldr	r3, [pc, #96]	; (800a814 <SUBGRF_SetRfFrequency+0x84>)
 800a7b4:	2201      	movs	r2, #1
 800a7b6:	701a      	strb	r2, [r3, #0]
    }
    SX_FREQ_TO_CHANNEL(chan, frequency);
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	2200      	movs	r2, #0
 800a7bc:	461c      	mov	r4, r3
 800a7be:	4615      	mov	r5, r2
 800a7c0:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 800a7c4:	ea4f 6844 	mov.w	r8, r4, lsl #25
 800a7c8:	4a13      	ldr	r2, [pc, #76]	; (800a818 <SUBGRF_SetRfFrequency+0x88>)
 800a7ca:	f04f 0300 	mov.w	r3, #0
 800a7ce:	4640      	mov	r0, r8
 800a7d0:	4649      	mov	r1, r9
 800a7d2:	f7f5 fd25 	bl	8000220 <__aeabi_uldivmod>
 800a7d6:	4602      	mov	r2, r0
 800a7d8:	460b      	mov	r3, r1
 800a7da:	4613      	mov	r3, r2
 800a7dc:	60fb      	str	r3, [r7, #12]
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	0e1b      	lsrs	r3, r3, #24
 800a7e2:	b2db      	uxtb	r3, r3
 800a7e4:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	0c1b      	lsrs	r3, r3, #16
 800a7ea:	b2db      	uxtb	r3, r3
 800a7ec:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	0a1b      	lsrs	r3, r3, #8
 800a7f2:	b2db      	uxtb	r3, r3
 800a7f4:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	b2db      	uxtb	r3, r3
 800a7fa:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 800a7fc:	f107 0308 	add.w	r3, r7, #8
 800a800:	2204      	movs	r2, #4
 800a802:	4619      	mov	r1, r3
 800a804:	2086      	movs	r0, #134	; 0x86
 800a806:	f000 fbc7 	bl	800af98 <SUBGRF_WriteCommand>
}
 800a80a:	bf00      	nop
 800a80c:	3710      	adds	r7, #16
 800a80e:	46bd      	mov	sp, r7
 800a810:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800a814:	20000af8 	.word	0x20000af8
 800a818:	01e84800 	.word	0x01e84800

0800a81c <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 800a81c:	b580      	push	{r7, lr}
 800a81e:	b082      	sub	sp, #8
 800a820:	af00      	add	r7, sp, #0
 800a822:	4603      	mov	r3, r0
 800a824:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 800a826:	79fa      	ldrb	r2, [r7, #7]
 800a828:	4b09      	ldr	r3, [pc, #36]	; (800a850 <SUBGRF_SetPacketType+0x34>)
 800a82a:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 800a82c:	79fb      	ldrb	r3, [r7, #7]
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d104      	bne.n	800a83c <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 800a832:	2100      	movs	r1, #0
 800a834:	f240 60ac 	movw	r0, #1708	; 0x6ac
 800a838:	f000 fafe 	bl	800ae38 <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 800a83c:	1dfb      	adds	r3, r7, #7
 800a83e:	2201      	movs	r2, #1
 800a840:	4619      	mov	r1, r3
 800a842:	208a      	movs	r0, #138	; 0x8a
 800a844:	f000 fba8 	bl	800af98 <SUBGRF_WriteCommand>
}
 800a848:	bf00      	nop
 800a84a:	3708      	adds	r7, #8
 800a84c:	46bd      	mov	sp, r7
 800a84e:	bd80      	pop	{r7, pc}
 800a850:	20000af1 	.word	0x20000af1

0800a854 <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 800a854:	b480      	push	{r7}
 800a856:	af00      	add	r7, sp, #0
    return PacketType;
 800a858:	4b02      	ldr	r3, [pc, #8]	; (800a864 <SUBGRF_GetPacketType+0x10>)
 800a85a:	781b      	ldrb	r3, [r3, #0]
}
 800a85c:	4618      	mov	r0, r3
 800a85e:	46bd      	mov	sp, r7
 800a860:	bc80      	pop	{r7}
 800a862:	4770      	bx	lr
 800a864:	20000af1 	.word	0x20000af1

0800a868 <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime )
{
 800a868:	b580      	push	{r7, lr}
 800a86a:	b084      	sub	sp, #16
 800a86c:	af00      	add	r7, sp, #0
 800a86e:	4603      	mov	r3, r0
 800a870:	71fb      	strb	r3, [r7, #7]
 800a872:	460b      	mov	r3, r1
 800a874:	71bb      	strb	r3, [r7, #6]
 800a876:	4613      	mov	r3, r2
 800a878:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];
    int32_t max_power;

    if (paSelect == RFO_LP)
 800a87a:	79fb      	ldrb	r3, [r7, #7]
 800a87c:	2b01      	cmp	r3, #1
 800a87e:	d149      	bne.n	800a914 <SUBGRF_SetTxParams+0xac>
    {
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 800a880:	2000      	movs	r0, #0
 800a882:	f000 ff2e 	bl	800b6e2 <RBI_GetRFOMaxPowerConfig>
 800a886:	60f8      	str	r0, [r7, #12]
        if (power >  max_power)
 800a888:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800a88c:	68fa      	ldr	r2, [r7, #12]
 800a88e:	429a      	cmp	r2, r3
 800a890:	da01      	bge.n	800a896 <SUBGRF_SetTxParams+0x2e>
        {
          power = max_power;
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 14)
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	2b0e      	cmp	r3, #14
 800a89a:	d10e      	bne.n	800a8ba <SUBGRF_SetTxParams+0x52>
        {
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 800a89c:	2301      	movs	r3, #1
 800a89e:	2201      	movs	r2, #1
 800a8a0:	2100      	movs	r1, #0
 800a8a2:	2004      	movs	r0, #4
 800a8a4:	f7ff fef6 	bl	800a694 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 800a8a8:	79ba      	ldrb	r2, [r7, #6]
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	b2db      	uxtb	r3, r3
 800a8ae:	1ad3      	subs	r3, r2, r3
 800a8b0:	b2db      	uxtb	r3, r3
 800a8b2:	330e      	adds	r3, #14
 800a8b4:	b2db      	uxtb	r3, r3
 800a8b6:	71bb      	strb	r3, [r7, #6]
 800a8b8:	e01f      	b.n	800a8fa <SUBGRF_SetTxParams+0x92>
        }
        else if (max_power == 10)
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	2b0a      	cmp	r3, #10
 800a8be:	d10e      	bne.n	800a8de <SUBGRF_SetTxParams+0x76>
        {
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 800a8c0:	2301      	movs	r3, #1
 800a8c2:	2201      	movs	r2, #1
 800a8c4:	2100      	movs	r1, #0
 800a8c6:	2001      	movs	r0, #1
 800a8c8:	f7ff fee4 	bl	800a694 <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 800a8cc:	79ba      	ldrb	r2, [r7, #6]
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	b2db      	uxtb	r3, r3
 800a8d2:	1ad3      	subs	r3, r2, r3
 800a8d4:	b2db      	uxtb	r3, r3
 800a8d6:	330d      	adds	r3, #13
 800a8d8:	b2db      	uxtb	r3, r3
 800a8da:	71bb      	strb	r3, [r7, #6]
 800a8dc:	e00d      	b.n	800a8fa <SUBGRF_SetTxParams+0x92>
        }
        else /*default 15dBm*/
        {
            SUBGRF_SetPaConfig(0x07, 0x00, 0x01, 0x01);
 800a8de:	2301      	movs	r3, #1
 800a8e0:	2201      	movs	r2, #1
 800a8e2:	2100      	movs	r1, #0
 800a8e4:	2007      	movs	r0, #7
 800a8e6:	f7ff fed5 	bl	800a694 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 800a8ea:	79ba      	ldrb	r2, [r7, #6]
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	b2db      	uxtb	r3, r3
 800a8f0:	1ad3      	subs	r3, r2, r3
 800a8f2:	b2db      	uxtb	r3, r3
 800a8f4:	330e      	adds	r3, #14
 800a8f6:	b2db      	uxtb	r3, r3
 800a8f8:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -17)
 800a8fa:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800a8fe:	f113 0f11 	cmn.w	r3, #17
 800a902:	da01      	bge.n	800a908 <SUBGRF_SetTxParams+0xa0>
        {
            power = -17;
 800a904:	23ef      	movs	r3, #239	; 0xef
 800a906:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 800a908:	2118      	movs	r1, #24
 800a90a:	f640 00e7 	movw	r0, #2279	; 0x8e7
 800a90e:	f000 fa93 	bl	800ae38 <SUBGRF_WriteRegister>
 800a912:	e067      	b.n	800a9e4 <SUBGRF_SetTxParams+0x17c>
    }
    else /* rfo_hp*/
    {
        /* WORKAROUND - Better Resistance of the RFO High Power Tx to Antenna Mismatch, see STM32WL Erratasheet*/
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 800a914:	f640 00d8 	movw	r0, #2264	; 0x8d8
 800a918:	f000 faa2 	bl	800ae60 <SUBGRF_ReadRegister>
 800a91c:	4603      	mov	r3, r0
 800a91e:	f043 031e 	orr.w	r3, r3, #30
 800a922:	b2db      	uxtb	r3, r3
 800a924:	4619      	mov	r1, r3
 800a926:	f640 00d8 	movw	r0, #2264	; 0x8d8
 800a92a:	f000 fa85 	bl	800ae38 <SUBGRF_WriteRegister>
        /* WORKAROUND END*/
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 800a92e:	2001      	movs	r0, #1
 800a930:	f000 fed7 	bl	800b6e2 <RBI_GetRFOMaxPowerConfig>
 800a934:	60f8      	str	r0, [r7, #12]
        if (power > max_power)
 800a936:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800a93a:	68fa      	ldr	r2, [r7, #12]
 800a93c:	429a      	cmp	r2, r3
 800a93e:	da01      	bge.n	800a944 <SUBGRF_SetTxParams+0xdc>
        {
            power = max_power;
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 20)
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	2b14      	cmp	r3, #20
 800a948:	d10e      	bne.n	800a968 <SUBGRF_SetTxParams+0x100>
        {
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 800a94a:	2301      	movs	r3, #1
 800a94c:	2200      	movs	r2, #0
 800a94e:	2105      	movs	r1, #5
 800a950:	2003      	movs	r0, #3
 800a952:	f7ff fe9f 	bl	800a694 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 800a956:	79ba      	ldrb	r2, [r7, #6]
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	b2db      	uxtb	r3, r3
 800a95c:	1ad3      	subs	r3, r2, r3
 800a95e:	b2db      	uxtb	r3, r3
 800a960:	3316      	adds	r3, #22
 800a962:	b2db      	uxtb	r3, r3
 800a964:	71bb      	strb	r3, [r7, #6]
 800a966:	e031      	b.n	800a9cc <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 17)
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	2b11      	cmp	r3, #17
 800a96c:	d10e      	bne.n	800a98c <SUBGRF_SetTxParams+0x124>
        {
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 800a96e:	2301      	movs	r3, #1
 800a970:	2200      	movs	r2, #0
 800a972:	2103      	movs	r1, #3
 800a974:	2002      	movs	r0, #2
 800a976:	f7ff fe8d 	bl	800a694 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 800a97a:	79ba      	ldrb	r2, [r7, #6]
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	b2db      	uxtb	r3, r3
 800a980:	1ad3      	subs	r3, r2, r3
 800a982:	b2db      	uxtb	r3, r3
 800a984:	3316      	adds	r3, #22
 800a986:	b2db      	uxtb	r3, r3
 800a988:	71bb      	strb	r3, [r7, #6]
 800a98a:	e01f      	b.n	800a9cc <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 14)
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	2b0e      	cmp	r3, #14
 800a990:	d10e      	bne.n	800a9b0 <SUBGRF_SetTxParams+0x148>
        {
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 800a992:	2301      	movs	r3, #1
 800a994:	2200      	movs	r2, #0
 800a996:	2102      	movs	r1, #2
 800a998:	2002      	movs	r0, #2
 800a99a:	f7ff fe7b 	bl	800a694 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 800a99e:	79ba      	ldrb	r2, [r7, #6]
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	b2db      	uxtb	r3, r3
 800a9a4:	1ad3      	subs	r3, r2, r3
 800a9a6:	b2db      	uxtb	r3, r3
 800a9a8:	330e      	adds	r3, #14
 800a9aa:	b2db      	uxtb	r3, r3
 800a9ac:	71bb      	strb	r3, [r7, #6]
 800a9ae:	e00d      	b.n	800a9cc <SUBGRF_SetTxParams+0x164>
        }
        else /*22dBm*/
        {
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 800a9b0:	2301      	movs	r3, #1
 800a9b2:	2200      	movs	r2, #0
 800a9b4:	2107      	movs	r1, #7
 800a9b6:	2004      	movs	r0, #4
 800a9b8:	f7ff fe6c 	bl	800a694 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 800a9bc:	79ba      	ldrb	r2, [r7, #6]
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	b2db      	uxtb	r3, r3
 800a9c2:	1ad3      	subs	r3, r2, r3
 800a9c4:	b2db      	uxtb	r3, r3
 800a9c6:	3316      	adds	r3, #22
 800a9c8:	b2db      	uxtb	r3, r3
 800a9ca:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -9)
 800a9cc:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800a9d0:	f113 0f09 	cmn.w	r3, #9
 800a9d4:	da01      	bge.n	800a9da <SUBGRF_SetTxParams+0x172>
        {
            power = -9;
 800a9d6:	23f7      	movs	r3, #247	; 0xf7
 800a9d8:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 800a9da:	2138      	movs	r1, #56	; 0x38
 800a9dc:	f640 00e7 	movw	r0, #2279	; 0x8e7
 800a9e0:	f000 fa2a 	bl	800ae38 <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 800a9e4:	79bb      	ldrb	r3, [r7, #6]
 800a9e6:	723b      	strb	r3, [r7, #8]
    buf[1] = (uint8_t)rampTime;
 800a9e8:	797b      	ldrb	r3, [r7, #5]
 800a9ea:	727b      	strb	r3, [r7, #9]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 800a9ec:	f107 0308 	add.w	r3, r7, #8
 800a9f0:	2202      	movs	r2, #2
 800a9f2:	4619      	mov	r1, r3
 800a9f4:	208e      	movs	r0, #142	; 0x8e
 800a9f6:	f000 facf 	bl	800af98 <SUBGRF_WriteCommand>
}
 800a9fa:	bf00      	nop
 800a9fc:	3710      	adds	r7, #16
 800a9fe:	46bd      	mov	sp, r7
 800aa00:	bd80      	pop	{r7, pc}
	...

0800aa04 <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 800aa04:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800aa08:	b086      	sub	sp, #24
 800aa0a:	af00      	add	r7, sp, #0
 800aa0c:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 800aa0e:	2300      	movs	r3, #0
 800aa10:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 800aa12:	4a61      	ldr	r2, [pc, #388]	; (800ab98 <SUBGRF_SetModulationParams+0x194>)
 800aa14:	f107 0308 	add.w	r3, r7, #8
 800aa18:	e892 0003 	ldmia.w	r2, {r0, r1}
 800aa1c:	e883 0003 	stmia.w	r3, {r0, r1}

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	781a      	ldrb	r2, [r3, #0]
 800aa24:	4b5d      	ldr	r3, [pc, #372]	; (800ab9c <SUBGRF_SetModulationParams+0x198>)
 800aa26:	781b      	ldrb	r3, [r3, #0]
 800aa28:	429a      	cmp	r2, r3
 800aa2a:	d004      	beq.n	800aa36 <SUBGRF_SetModulationParams+0x32>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	781b      	ldrb	r3, [r3, #0]
 800aa30:	4618      	mov	r0, r3
 800aa32:	f7ff fef3 	bl	800a81c <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	781b      	ldrb	r3, [r3, #0]
 800aa3a:	2b03      	cmp	r3, #3
 800aa3c:	f200 80a5 	bhi.w	800ab8a <SUBGRF_SetModulationParams+0x186>
 800aa40:	a201      	add	r2, pc, #4	; (adr r2, 800aa48 <SUBGRF_SetModulationParams+0x44>)
 800aa42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa46:	bf00      	nop
 800aa48:	0800aa59 	.word	0x0800aa59
 800aa4c:	0800ab19 	.word	0x0800ab19
 800aa50:	0800aadb 	.word	0x0800aadb
 800aa54:	0800ab47 	.word	0x0800ab47
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 800aa58:	2308      	movs	r3, #8
 800aa5a:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	685b      	ldr	r3, [r3, #4]
 800aa60:	4a4f      	ldr	r2, [pc, #316]	; (800aba0 <SUBGRF_SetModulationParams+0x19c>)
 800aa62:	fbb2 f3f3 	udiv	r3, r2, r3
 800aa66:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 800aa68:	697b      	ldr	r3, [r7, #20]
 800aa6a:	0c1b      	lsrs	r3, r3, #16
 800aa6c:	b2db      	uxtb	r3, r3
 800aa6e:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 800aa70:	697b      	ldr	r3, [r7, #20]
 800aa72:	0a1b      	lsrs	r3, r3, #8
 800aa74:	b2db      	uxtb	r3, r3
 800aa76:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 800aa78:	697b      	ldr	r3, [r7, #20]
 800aa7a:	b2db      	uxtb	r3, r3
 800aa7c:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	7b1b      	ldrb	r3, [r3, #12]
 800aa82:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	7b5b      	ldrb	r3, [r3, #13]
 800aa88:	733b      	strb	r3, [r7, #12]
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	689b      	ldr	r3, [r3, #8]
 800aa8e:	2200      	movs	r2, #0
 800aa90:	461c      	mov	r4, r3
 800aa92:	4615      	mov	r5, r2
 800aa94:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 800aa98:	ea4f 6844 	mov.w	r8, r4, lsl #25
 800aa9c:	4a41      	ldr	r2, [pc, #260]	; (800aba4 <SUBGRF_SetModulationParams+0x1a0>)
 800aa9e:	f04f 0300 	mov.w	r3, #0
 800aaa2:	4640      	mov	r0, r8
 800aaa4:	4649      	mov	r1, r9
 800aaa6:	f7f5 fbbb 	bl	8000220 <__aeabi_uldivmod>
 800aaaa:	4602      	mov	r2, r0
 800aaac:	460b      	mov	r3, r1
 800aaae:	4613      	mov	r3, r2
 800aab0:	617b      	str	r3, [r7, #20]
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 800aab2:	697b      	ldr	r3, [r7, #20]
 800aab4:	0c1b      	lsrs	r3, r3, #16
 800aab6:	b2db      	uxtb	r3, r3
 800aab8:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 800aaba:	697b      	ldr	r3, [r7, #20]
 800aabc:	0a1b      	lsrs	r3, r3, #8
 800aabe:	b2db      	uxtb	r3, r3
 800aac0:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 800aac2:	697b      	ldr	r3, [r7, #20]
 800aac4:	b2db      	uxtb	r3, r3
 800aac6:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800aac8:	7cfb      	ldrb	r3, [r7, #19]
 800aaca:	b29a      	uxth	r2, r3
 800aacc:	f107 0308 	add.w	r3, r7, #8
 800aad0:	4619      	mov	r1, r3
 800aad2:	208b      	movs	r0, #139	; 0x8b
 800aad4:	f000 fa60 	bl	800af98 <SUBGRF_WriteCommand>
        break;
 800aad8:	e058      	b.n	800ab8c <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_BPSK:
        n = 4;
 800aada:	2304      	movs	r3, #4
 800aadc:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	691b      	ldr	r3, [r3, #16]
 800aae2:	4a2f      	ldr	r2, [pc, #188]	; (800aba0 <SUBGRF_SetModulationParams+0x19c>)
 800aae4:	fbb2 f3f3 	udiv	r3, r2, r3
 800aae8:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 800aaea:	697b      	ldr	r3, [r7, #20]
 800aaec:	0c1b      	lsrs	r3, r3, #16
 800aaee:	b2db      	uxtb	r3, r3
 800aaf0:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 800aaf2:	697b      	ldr	r3, [r7, #20]
 800aaf4:	0a1b      	lsrs	r3, r3, #8
 800aaf6:	b2db      	uxtb	r3, r3
 800aaf8:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 800aafa:	697b      	ldr	r3, [r7, #20]
 800aafc:	b2db      	uxtb	r3, r3
 800aafe:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	7d1b      	ldrb	r3, [r3, #20]
 800ab04:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800ab06:	7cfb      	ldrb	r3, [r7, #19]
 800ab08:	b29a      	uxth	r2, r3
 800ab0a:	f107 0308 	add.w	r3, r7, #8
 800ab0e:	4619      	mov	r1, r3
 800ab10:	208b      	movs	r0, #139	; 0x8b
 800ab12:	f000 fa41 	bl	800af98 <SUBGRF_WriteCommand>
        break;
 800ab16:	e039      	b.n	800ab8c <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_LORA:
        n = 4;
 800ab18:	2304      	movs	r3, #4
 800ab1a:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	7e1b      	ldrb	r3, [r3, #24]
 800ab20:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	7e5b      	ldrb	r3, [r3, #25]
 800ab26:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	7e9b      	ldrb	r3, [r3, #26]
 800ab2c:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	7edb      	ldrb	r3, [r3, #27]
 800ab32:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800ab34:	7cfb      	ldrb	r3, [r7, #19]
 800ab36:	b29a      	uxth	r2, r3
 800ab38:	f107 0308 	add.w	r3, r7, #8
 800ab3c:	4619      	mov	r1, r3
 800ab3e:	208b      	movs	r0, #139	; 0x8b
 800ab40:	f000 fa2a 	bl	800af98 <SUBGRF_WriteCommand>

        break;
 800ab44:	e022      	b.n	800ab8c <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_GMSK:
        n = 5;
 800ab46:	2305      	movs	r3, #5
 800ab48:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	685b      	ldr	r3, [r3, #4]
 800ab4e:	4a14      	ldr	r2, [pc, #80]	; (800aba0 <SUBGRF_SetModulationParams+0x19c>)
 800ab50:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab54:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 800ab56:	697b      	ldr	r3, [r7, #20]
 800ab58:	0c1b      	lsrs	r3, r3, #16
 800ab5a:	b2db      	uxtb	r3, r3
 800ab5c:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 800ab5e:	697b      	ldr	r3, [r7, #20]
 800ab60:	0a1b      	lsrs	r3, r3, #8
 800ab62:	b2db      	uxtb	r3, r3
 800ab64:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 800ab66:	697b      	ldr	r3, [r7, #20]
 800ab68:	b2db      	uxtb	r3, r3
 800ab6a:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	7b1b      	ldrb	r3, [r3, #12]
 800ab70:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	7b5b      	ldrb	r3, [r3, #13]
 800ab76:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800ab78:	7cfb      	ldrb	r3, [r7, #19]
 800ab7a:	b29a      	uxth	r2, r3
 800ab7c:	f107 0308 	add.w	r3, r7, #8
 800ab80:	4619      	mov	r1, r3
 800ab82:	208b      	movs	r0, #139	; 0x8b
 800ab84:	f000 fa08 	bl	800af98 <SUBGRF_WriteCommand>
        break;
 800ab88:	e000      	b.n	800ab8c <SUBGRF_SetModulationParams+0x188>
    default:
    case PACKET_TYPE_NONE:
      break;
 800ab8a:	bf00      	nop
    }
}
 800ab8c:	bf00      	nop
 800ab8e:	3718      	adds	r7, #24
 800ab90:	46bd      	mov	sp, r7
 800ab92:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800ab96:	bf00      	nop
 800ab98:	0800ce24 	.word	0x0800ce24
 800ab9c:	20000af1 	.word	0x20000af1
 800aba0:	3d090000 	.word	0x3d090000
 800aba4:	01e84800 	.word	0x01e84800

0800aba8 <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 800aba8:	b580      	push	{r7, lr}
 800abaa:	b086      	sub	sp, #24
 800abac:	af00      	add	r7, sp, #0
 800abae:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 800abb0:	2300      	movs	r3, #0
 800abb2:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 800abb4:	4a48      	ldr	r2, [pc, #288]	; (800acd8 <SUBGRF_SetPacketParams+0x130>)
 800abb6:	f107 030c 	add.w	r3, r7, #12
 800abba:	ca07      	ldmia	r2, {r0, r1, r2}
 800abbc:	c303      	stmia	r3!, {r0, r1}
 800abbe:	701a      	strb	r2, [r3, #0]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	781a      	ldrb	r2, [r3, #0]
 800abc4:	4b45      	ldr	r3, [pc, #276]	; (800acdc <SUBGRF_SetPacketParams+0x134>)
 800abc6:	781b      	ldrb	r3, [r3, #0]
 800abc8:	429a      	cmp	r2, r3
 800abca:	d004      	beq.n	800abd6 <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	781b      	ldrb	r3, [r3, #0]
 800abd0:	4618      	mov	r0, r3
 800abd2:	f7ff fe23 	bl	800a81c <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	781b      	ldrb	r3, [r3, #0]
 800abda:	2b03      	cmp	r3, #3
 800abdc:	d878      	bhi.n	800acd0 <SUBGRF_SetPacketParams+0x128>
 800abde:	a201      	add	r2, pc, #4	; (adr r2, 800abe4 <SUBGRF_SetPacketParams+0x3c>)
 800abe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abe4:	0800abf5 	.word	0x0800abf5
 800abe8:	0800ac85 	.word	0x0800ac85
 800abec:	0800ac79 	.word	0x0800ac79
 800abf0:	0800abf5 	.word	0x0800abf5
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	7a5b      	ldrb	r3, [r3, #9]
 800abf8:	2bf1      	cmp	r3, #241	; 0xf1
 800abfa:	d10a      	bne.n	800ac12 <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 800abfc:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800ac00:	f7ff faaa 	bl	800a158 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 800ac04:	f248 0005 	movw	r0, #32773	; 0x8005
 800ac08:	f7ff fac6 	bl	800a198 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 800ac0c:	2302      	movs	r3, #2
 800ac0e:	75bb      	strb	r3, [r7, #22]
 800ac10:	e011      	b.n	800ac36 <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	7a5b      	ldrb	r3, [r3, #9]
 800ac16:	2bf2      	cmp	r3, #242	; 0xf2
 800ac18:	d10a      	bne.n	800ac30 <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 800ac1a:	f641 500f 	movw	r0, #7439	; 0x1d0f
 800ac1e:	f7ff fa9b 	bl	800a158 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 800ac22:	f241 0021 	movw	r0, #4129	; 0x1021
 800ac26:	f7ff fab7 	bl	800a198 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 800ac2a:	2306      	movs	r3, #6
 800ac2c:	75bb      	strb	r3, [r7, #22]
 800ac2e:	e002      	b.n	800ac36 <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	7a5b      	ldrb	r3, [r3, #9]
 800ac34:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 800ac36:	2309      	movs	r3, #9
 800ac38:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	885b      	ldrh	r3, [r3, #2]
 800ac3e:	0a1b      	lsrs	r3, r3, #8
 800ac40:	b29b      	uxth	r3, r3
 800ac42:	b2db      	uxtb	r3, r3
 800ac44:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	885b      	ldrh	r3, [r3, #2]
 800ac4a:	b2db      	uxtb	r3, r3
 800ac4c:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	791b      	ldrb	r3, [r3, #4]
 800ac52:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	795b      	ldrb	r3, [r3, #5]
 800ac58:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	799b      	ldrb	r3, [r3, #6]
 800ac5e:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	79db      	ldrb	r3, [r3, #7]
 800ac64:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	7a1b      	ldrb	r3, [r3, #8]
 800ac6a:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 800ac6c:	7dbb      	ldrb	r3, [r7, #22]
 800ac6e:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	7a9b      	ldrb	r3, [r3, #10]
 800ac74:	753b      	strb	r3, [r7, #20]
        break;
 800ac76:	e022      	b.n	800acbe <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 800ac78:	2301      	movs	r3, #1
 800ac7a:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	7b1b      	ldrb	r3, [r3, #12]
 800ac80:	733b      	strb	r3, [r7, #12]
        break;
 800ac82:	e01c      	b.n	800acbe <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 800ac84:	2306      	movs	r3, #6
 800ac86:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	89db      	ldrh	r3, [r3, #14]
 800ac8c:	0a1b      	lsrs	r3, r3, #8
 800ac8e:	b29b      	uxth	r3, r3
 800ac90:	b2db      	uxtb	r3, r3
 800ac92:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	89db      	ldrh	r3, [r3, #14]
 800ac98:	b2db      	uxtb	r3, r3
 800ac9a:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	7c1a      	ldrb	r2, [r3, #16]
 800aca0:	4b0f      	ldr	r3, [pc, #60]	; (800ace0 <SUBGRF_SetPacketParams+0x138>)
 800aca2:	4611      	mov	r1, r2
 800aca4:	7019      	strb	r1, [r3, #0]
 800aca6:	4613      	mov	r3, r2
 800aca8:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	7c5b      	ldrb	r3, [r3, #17]
 800acae:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	7c9b      	ldrb	r3, [r3, #18]
 800acb4:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	7cdb      	ldrb	r3, [r3, #19]
 800acba:	747b      	strb	r3, [r7, #17]
        break;
 800acbc:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 800acbe:	7dfb      	ldrb	r3, [r7, #23]
 800acc0:	b29a      	uxth	r2, r3
 800acc2:	f107 030c 	add.w	r3, r7, #12
 800acc6:	4619      	mov	r1, r3
 800acc8:	208c      	movs	r0, #140	; 0x8c
 800acca:	f000 f965 	bl	800af98 <SUBGRF_WriteCommand>
 800acce:	e000      	b.n	800acd2 <SUBGRF_SetPacketParams+0x12a>
        return;
 800acd0:	bf00      	nop
}
 800acd2:	3718      	adds	r7, #24
 800acd4:	46bd      	mov	sp, r7
 800acd6:	bd80      	pop	{r7, pc}
 800acd8:	0800ce2c 	.word	0x0800ce2c
 800acdc:	20000af1 	.word	0x20000af1
 800ace0:	20000af2 	.word	0x20000af2

0800ace4 <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 800ace4:	b580      	push	{r7, lr}
 800ace6:	b084      	sub	sp, #16
 800ace8:	af00      	add	r7, sp, #0
 800acea:	4603      	mov	r3, r0
 800acec:	460a      	mov	r2, r1
 800acee:	71fb      	strb	r3, [r7, #7]
 800acf0:	4613      	mov	r3, r2
 800acf2:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 800acf4:	79fb      	ldrb	r3, [r7, #7]
 800acf6:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 800acf8:	79bb      	ldrb	r3, [r7, #6]
 800acfa:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 800acfc:	f107 030c 	add.w	r3, r7, #12
 800ad00:	2202      	movs	r2, #2
 800ad02:	4619      	mov	r1, r3
 800ad04:	208f      	movs	r0, #143	; 0x8f
 800ad06:	f000 f947 	bl	800af98 <SUBGRF_WriteCommand>
}
 800ad0a:	bf00      	nop
 800ad0c:	3710      	adds	r7, #16
 800ad0e:	46bd      	mov	sp, r7
 800ad10:	bd80      	pop	{r7, pc}

0800ad12 <SUBGRF_GetRssiInst>:
    status.Fields.ChipMode = ( stat & ( 0x07 << 4 ) ) >> 4;
    return status;
}

int8_t SUBGRF_GetRssiInst( void )
{
 800ad12:	b580      	push	{r7, lr}
 800ad14:	b082      	sub	sp, #8
 800ad16:	af00      	add	r7, sp, #0
    uint8_t buf[1];
    int8_t rssi = 0;
 800ad18:	2300      	movs	r3, #0
 800ad1a:	71fb      	strb	r3, [r7, #7]

    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 800ad1c:	1d3b      	adds	r3, r7, #4
 800ad1e:	2201      	movs	r2, #1
 800ad20:	4619      	mov	r1, r3
 800ad22:	2015      	movs	r0, #21
 800ad24:	f000 f95a 	bl	800afdc <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 800ad28:	793b      	ldrb	r3, [r7, #4]
 800ad2a:	425b      	negs	r3, r3
 800ad2c:	105b      	asrs	r3, r3, #1
 800ad2e:	71fb      	strb	r3, [r7, #7]
    return rssi;
 800ad30:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 800ad34:	4618      	mov	r0, r3
 800ad36:	3708      	adds	r7, #8
 800ad38:	46bd      	mov	sp, r7
 800ad3a:	bd80      	pop	{r7, pc}

0800ad3c <SUBGRF_GetRxBufferStatus>:

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 800ad3c:	b580      	push	{r7, lr}
 800ad3e:	b084      	sub	sp, #16
 800ad40:	af00      	add	r7, sp, #0
 800ad42:	6078      	str	r0, [r7, #4]
 800ad44:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 800ad46:	f107 030c 	add.w	r3, r7, #12
 800ad4a:	2202      	movs	r2, #2
 800ad4c:	4619      	mov	r1, r3
 800ad4e:	2013      	movs	r0, #19
 800ad50:	f000 f944 	bl	800afdc <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 800ad54:	f7ff fd7e 	bl	800a854 <SUBGRF_GetPacketType>
 800ad58:	4603      	mov	r3, r0
 800ad5a:	2b01      	cmp	r3, #1
 800ad5c:	d10d      	bne.n	800ad7a <SUBGRF_GetRxBufferStatus+0x3e>
 800ad5e:	4b0c      	ldr	r3, [pc, #48]	; (800ad90 <SUBGRF_GetRxBufferStatus+0x54>)
 800ad60:	781b      	ldrb	r3, [r3, #0]
 800ad62:	b2db      	uxtb	r3, r3
 800ad64:	2b01      	cmp	r3, #1
 800ad66:	d108      	bne.n	800ad7a <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 800ad68:	f240 7002 	movw	r0, #1794	; 0x702
 800ad6c:	f000 f878 	bl	800ae60 <SUBGRF_ReadRegister>
 800ad70:	4603      	mov	r3, r0
 800ad72:	461a      	mov	r2, r3
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	701a      	strb	r2, [r3, #0]
 800ad78:	e002      	b.n	800ad80 <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 800ad7a:	7b3a      	ldrb	r2, [r7, #12]
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 800ad80:	7b7a      	ldrb	r2, [r7, #13]
 800ad82:	683b      	ldr	r3, [r7, #0]
 800ad84:	701a      	strb	r2, [r3, #0]
}
 800ad86:	bf00      	nop
 800ad88:	3710      	adds	r7, #16
 800ad8a:	46bd      	mov	sp, r7
 800ad8c:	bd80      	pop	{r7, pc}
 800ad8e:	bf00      	nop
 800ad90:	20000af2 	.word	0x20000af2

0800ad94 <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 800ad94:	b580      	push	{r7, lr}
 800ad96:	b084      	sub	sp, #16
 800ad98:	af00      	add	r7, sp, #0
 800ad9a:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 800ad9c:	f107 030c 	add.w	r3, r7, #12
 800ada0:	2203      	movs	r2, #3
 800ada2:	4619      	mov	r1, r3
 800ada4:	2014      	movs	r0, #20
 800ada6:	f000 f919 	bl	800afdc <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 800adaa:	f7ff fd53 	bl	800a854 <SUBGRF_GetPacketType>
 800adae:	4603      	mov	r3, r0
 800adb0:	461a      	mov	r2, r3
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	781b      	ldrb	r3, [r3, #0]
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d002      	beq.n	800adc4 <SUBGRF_GetPacketStatus+0x30>
 800adbe:	2b01      	cmp	r3, #1
 800adc0:	d013      	beq.n	800adea <SUBGRF_GetPacketStatus+0x56>
 800adc2:	e02a      	b.n	800ae1a <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 800adc4:	7b3a      	ldrb	r2, [r7, #12]
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 800adca:	7b7b      	ldrb	r3, [r7, #13]
 800adcc:	425b      	negs	r3, r3
 800adce:	105b      	asrs	r3, r3, #1
 800add0:	b25a      	sxtb	r2, r3
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 800add6:	7bbb      	ldrb	r3, [r7, #14]
 800add8:	425b      	negs	r3, r3
 800adda:	105b      	asrs	r3, r3, #1
 800addc:	b25a      	sxtb	r2, r3
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	2200      	movs	r2, #0
 800ade6:	609a      	str	r2, [r3, #8]
            break;
 800ade8:	e020      	b.n	800ae2c <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 800adea:	7b3b      	ldrb	r3, [r7, #12]
 800adec:	425b      	negs	r3, r3
 800adee:	105b      	asrs	r3, r3, #1
 800adf0:	b25a      	sxtb	r2, r3
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 800adf6:	7b7b      	ldrb	r3, [r7, #13]
 800adf8:	b25b      	sxtb	r3, r3
 800adfa:	3302      	adds	r3, #2
 800adfc:	109b      	asrs	r3, r3, #2
 800adfe:	b25a      	sxtb	r2, r3
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 800ae04:	7bbb      	ldrb	r3, [r7, #14]
 800ae06:	425b      	negs	r3, r3
 800ae08:	105b      	asrs	r3, r3, #1
 800ae0a:	b25a      	sxtb	r2, r3
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 800ae10:	4b08      	ldr	r3, [pc, #32]	; (800ae34 <SUBGRF_GetPacketStatus+0xa0>)
 800ae12:	681a      	ldr	r2, [r3, #0]
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	611a      	str	r2, [r3, #16]
            break;
 800ae18:	e008      	b.n	800ae2c <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 800ae1a:	2214      	movs	r2, #20
 800ae1c:	2100      	movs	r1, #0
 800ae1e:	6878      	ldr	r0, [r7, #4]
 800ae20:	f000 fc93 	bl	800b74a <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	220f      	movs	r2, #15
 800ae28:	701a      	strb	r2, [r3, #0]
            break;
 800ae2a:	bf00      	nop
    }
}
 800ae2c:	bf00      	nop
 800ae2e:	3710      	adds	r7, #16
 800ae30:	46bd      	mov	sp, r7
 800ae32:	bd80      	pop	{r7, pc}
 800ae34:	20000af4 	.word	0x20000af4

0800ae38 <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 800ae38:	b580      	push	{r7, lr}
 800ae3a:	b082      	sub	sp, #8
 800ae3c:	af00      	add	r7, sp, #0
 800ae3e:	4603      	mov	r3, r0
 800ae40:	460a      	mov	r2, r1
 800ae42:	80fb      	strh	r3, [r7, #6]
 800ae44:	4613      	mov	r3, r2
 800ae46:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 800ae48:	1d7a      	adds	r2, r7, #5
 800ae4a:	88f9      	ldrh	r1, [r7, #6]
 800ae4c:	2301      	movs	r3, #1
 800ae4e:	4803      	ldr	r0, [pc, #12]	; (800ae5c <SUBGRF_WriteRegister+0x24>)
 800ae50:	f7fa fdaa 	bl	80059a8 <HAL_SUBGHZ_WriteRegisters>
}
 800ae54:	bf00      	nop
 800ae56:	3708      	adds	r7, #8
 800ae58:	46bd      	mov	sp, r7
 800ae5a:	bd80      	pop	{r7, pc}
 800ae5c:	200004fc 	.word	0x200004fc

0800ae60 <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 800ae60:	b580      	push	{r7, lr}
 800ae62:	b084      	sub	sp, #16
 800ae64:	af00      	add	r7, sp, #0
 800ae66:	4603      	mov	r3, r0
 800ae68:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 800ae6a:	f107 020f 	add.w	r2, r7, #15
 800ae6e:	88f9      	ldrh	r1, [r7, #6]
 800ae70:	2301      	movs	r3, #1
 800ae72:	4804      	ldr	r0, [pc, #16]	; (800ae84 <SUBGRF_ReadRegister+0x24>)
 800ae74:	f7fa fdf7 	bl	8005a66 <HAL_SUBGHZ_ReadRegisters>
    return data;
 800ae78:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae7a:	4618      	mov	r0, r3
 800ae7c:	3710      	adds	r7, #16
 800ae7e:	46bd      	mov	sp, r7
 800ae80:	bd80      	pop	{r7, pc}
 800ae82:	bf00      	nop
 800ae84:	200004fc 	.word	0x200004fc

0800ae88 <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 800ae88:	b580      	push	{r7, lr}
 800ae8a:	b086      	sub	sp, #24
 800ae8c:	af00      	add	r7, sp, #0
 800ae8e:	4603      	mov	r3, r0
 800ae90:	6039      	str	r1, [r7, #0]
 800ae92:	80fb      	strh	r3, [r7, #6]
 800ae94:	4613      	mov	r3, r2
 800ae96:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ae98:	f3ef 8310 	mrs	r3, PRIMASK
 800ae9c:	60fb      	str	r3, [r7, #12]
  return(result);
 800ae9e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800aea0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800aea2:	b672      	cpsid	i
}
 800aea4:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 800aea6:	88bb      	ldrh	r3, [r7, #4]
 800aea8:	88f9      	ldrh	r1, [r7, #6]
 800aeaa:	683a      	ldr	r2, [r7, #0]
 800aeac:	4806      	ldr	r0, [pc, #24]	; (800aec8 <SUBGRF_WriteRegisters+0x40>)
 800aeae:	f7fa fd7b 	bl	80059a8 <HAL_SUBGHZ_WriteRegisters>
 800aeb2:	697b      	ldr	r3, [r7, #20]
 800aeb4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aeb6:	693b      	ldr	r3, [r7, #16]
 800aeb8:	f383 8810 	msr	PRIMASK, r3
}
 800aebc:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800aebe:	bf00      	nop
 800aec0:	3718      	adds	r7, #24
 800aec2:	46bd      	mov	sp, r7
 800aec4:	bd80      	pop	{r7, pc}
 800aec6:	bf00      	nop
 800aec8:	200004fc 	.word	0x200004fc

0800aecc <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 800aecc:	b580      	push	{r7, lr}
 800aece:	b086      	sub	sp, #24
 800aed0:	af00      	add	r7, sp, #0
 800aed2:	4603      	mov	r3, r0
 800aed4:	6039      	str	r1, [r7, #0]
 800aed6:	80fb      	strh	r3, [r7, #6]
 800aed8:	4613      	mov	r3, r2
 800aeda:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aedc:	f3ef 8310 	mrs	r3, PRIMASK
 800aee0:	60fb      	str	r3, [r7, #12]
  return(result);
 800aee2:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800aee4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800aee6:	b672      	cpsid	i
}
 800aee8:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 800aeea:	88bb      	ldrh	r3, [r7, #4]
 800aeec:	88f9      	ldrh	r1, [r7, #6]
 800aeee:	683a      	ldr	r2, [r7, #0]
 800aef0:	4806      	ldr	r0, [pc, #24]	; (800af0c <SUBGRF_ReadRegisters+0x40>)
 800aef2:	f7fa fdb8 	bl	8005a66 <HAL_SUBGHZ_ReadRegisters>
 800aef6:	697b      	ldr	r3, [r7, #20]
 800aef8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aefa:	693b      	ldr	r3, [r7, #16]
 800aefc:	f383 8810 	msr	PRIMASK, r3
}
 800af00:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800af02:	bf00      	nop
 800af04:	3718      	adds	r7, #24
 800af06:	46bd      	mov	sp, r7
 800af08:	bd80      	pop	{r7, pc}
 800af0a:	bf00      	nop
 800af0c:	200004fc 	.word	0x200004fc

0800af10 <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 800af10:	b580      	push	{r7, lr}
 800af12:	b086      	sub	sp, #24
 800af14:	af00      	add	r7, sp, #0
 800af16:	4603      	mov	r3, r0
 800af18:	6039      	str	r1, [r7, #0]
 800af1a:	71fb      	strb	r3, [r7, #7]
 800af1c:	4613      	mov	r3, r2
 800af1e:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800af20:	f3ef 8310 	mrs	r3, PRIMASK
 800af24:	60fb      	str	r3, [r7, #12]
  return(result);
 800af26:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800af28:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800af2a:	b672      	cpsid	i
}
 800af2c:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 800af2e:	79bb      	ldrb	r3, [r7, #6]
 800af30:	b29b      	uxth	r3, r3
 800af32:	79f9      	ldrb	r1, [r7, #7]
 800af34:	683a      	ldr	r2, [r7, #0]
 800af36:	4806      	ldr	r0, [pc, #24]	; (800af50 <SUBGRF_WriteBuffer+0x40>)
 800af38:	f7fa fea9 	bl	8005c8e <HAL_SUBGHZ_WriteBuffer>
 800af3c:	697b      	ldr	r3, [r7, #20]
 800af3e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800af40:	693b      	ldr	r3, [r7, #16]
 800af42:	f383 8810 	msr	PRIMASK, r3
}
 800af46:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800af48:	bf00      	nop
 800af4a:	3718      	adds	r7, #24
 800af4c:	46bd      	mov	sp, r7
 800af4e:	bd80      	pop	{r7, pc}
 800af50:	200004fc 	.word	0x200004fc

0800af54 <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 800af54:	b580      	push	{r7, lr}
 800af56:	b086      	sub	sp, #24
 800af58:	af00      	add	r7, sp, #0
 800af5a:	4603      	mov	r3, r0
 800af5c:	6039      	str	r1, [r7, #0]
 800af5e:	71fb      	strb	r3, [r7, #7]
 800af60:	4613      	mov	r3, r2
 800af62:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800af64:	f3ef 8310 	mrs	r3, PRIMASK
 800af68:	60fb      	str	r3, [r7, #12]
  return(result);
 800af6a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800af6c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800af6e:	b672      	cpsid	i
}
 800af70:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 800af72:	79bb      	ldrb	r3, [r7, #6]
 800af74:	b29b      	uxth	r3, r3
 800af76:	79f9      	ldrb	r1, [r7, #7]
 800af78:	683a      	ldr	r2, [r7, #0]
 800af7a:	4806      	ldr	r0, [pc, #24]	; (800af94 <SUBGRF_ReadBuffer+0x40>)
 800af7c:	f7fa feda 	bl	8005d34 <HAL_SUBGHZ_ReadBuffer>
 800af80:	697b      	ldr	r3, [r7, #20]
 800af82:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800af84:	693b      	ldr	r3, [r7, #16]
 800af86:	f383 8810 	msr	PRIMASK, r3
}
 800af8a:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800af8c:	bf00      	nop
 800af8e:	3718      	adds	r7, #24
 800af90:	46bd      	mov	sp, r7
 800af92:	bd80      	pop	{r7, pc}
 800af94:	200004fc 	.word	0x200004fc

0800af98 <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 800af98:	b580      	push	{r7, lr}
 800af9a:	b086      	sub	sp, #24
 800af9c:	af00      	add	r7, sp, #0
 800af9e:	4603      	mov	r3, r0
 800afa0:	6039      	str	r1, [r7, #0]
 800afa2:	71fb      	strb	r3, [r7, #7]
 800afa4:	4613      	mov	r3, r2
 800afa6:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800afa8:	f3ef 8310 	mrs	r3, PRIMASK
 800afac:	60fb      	str	r3, [r7, #12]
  return(result);
 800afae:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800afb0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800afb2:	b672      	cpsid	i
}
 800afb4:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 800afb6:	88bb      	ldrh	r3, [r7, #4]
 800afb8:	79f9      	ldrb	r1, [r7, #7]
 800afba:	683a      	ldr	r2, [r7, #0]
 800afbc:	4806      	ldr	r0, [pc, #24]	; (800afd8 <SUBGRF_WriteCommand+0x40>)
 800afbe:	f7fa fdb3 	bl	8005b28 <HAL_SUBGHZ_ExecSetCmd>
 800afc2:	697b      	ldr	r3, [r7, #20]
 800afc4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800afc6:	693b      	ldr	r3, [r7, #16]
 800afc8:	f383 8810 	msr	PRIMASK, r3
}
 800afcc:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800afce:	bf00      	nop
 800afd0:	3718      	adds	r7, #24
 800afd2:	46bd      	mov	sp, r7
 800afd4:	bd80      	pop	{r7, pc}
 800afd6:	bf00      	nop
 800afd8:	200004fc 	.word	0x200004fc

0800afdc <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 800afdc:	b580      	push	{r7, lr}
 800afde:	b086      	sub	sp, #24
 800afe0:	af00      	add	r7, sp, #0
 800afe2:	4603      	mov	r3, r0
 800afe4:	6039      	str	r1, [r7, #0]
 800afe6:	71fb      	strb	r3, [r7, #7]
 800afe8:	4613      	mov	r3, r2
 800afea:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800afec:	f3ef 8310 	mrs	r3, PRIMASK
 800aff0:	60fb      	str	r3, [r7, #12]
  return(result);
 800aff2:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800aff4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800aff6:	b672      	cpsid	i
}
 800aff8:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 800affa:	88bb      	ldrh	r3, [r7, #4]
 800affc:	79f9      	ldrb	r1, [r7, #7]
 800affe:	683a      	ldr	r2, [r7, #0]
 800b000:	4806      	ldr	r0, [pc, #24]	; (800b01c <SUBGRF_ReadCommand+0x40>)
 800b002:	f7fa fdf0 	bl	8005be6 <HAL_SUBGHZ_ExecGetCmd>
 800b006:	697b      	ldr	r3, [r7, #20]
 800b008:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b00a:	693b      	ldr	r3, [r7, #16]
 800b00c:	f383 8810 	msr	PRIMASK, r3
}
 800b010:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800b012:	bf00      	nop
 800b014:	3718      	adds	r7, #24
 800b016:	46bd      	mov	sp, r7
 800b018:	bd80      	pop	{r7, pc}
 800b01a:	bf00      	nop
 800b01c:	200004fc 	.word	0x200004fc

0800b020 <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 800b020:	b580      	push	{r7, lr}
 800b022:	b084      	sub	sp, #16
 800b024:	af00      	add	r7, sp, #0
 800b026:	4603      	mov	r3, r0
 800b028:	460a      	mov	r2, r1
 800b02a:	71fb      	strb	r3, [r7, #7]
 800b02c:	4613      	mov	r3, r2
 800b02e:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 800b030:	2301      	movs	r3, #1
 800b032:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 800b034:	79bb      	ldrb	r3, [r7, #6]
 800b036:	2b01      	cmp	r3, #1
 800b038:	d10d      	bne.n	800b056 <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 800b03a:	79fb      	ldrb	r3, [r7, #7]
 800b03c:	2b01      	cmp	r3, #1
 800b03e:	d104      	bne.n	800b04a <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 800b040:	2302      	movs	r3, #2
 800b042:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 800b044:	2004      	movs	r0, #4
 800b046:	f000 f8ef 	bl	800b228 <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 800b04a:	79fb      	ldrb	r3, [r7, #7]
 800b04c:	2b02      	cmp	r3, #2
 800b04e:	d107      	bne.n	800b060 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 800b050:	2303      	movs	r3, #3
 800b052:	73fb      	strb	r3, [r7, #15]
 800b054:	e004      	b.n	800b060 <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 800b056:	79bb      	ldrb	r3, [r7, #6]
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d101      	bne.n	800b060 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 800b05c:	2301      	movs	r3, #1
 800b05e:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 800b060:	7bfb      	ldrb	r3, [r7, #15]
 800b062:	4618      	mov	r0, r3
 800b064:	f000 fad2 	bl	800b60c <RBI_ConfigRFSwitch>
}
 800b068:	bf00      	nop
 800b06a:	3710      	adds	r7, #16
 800b06c:	46bd      	mov	sp, r7
 800b06e:	bd80      	pop	{r7, pc}

0800b070 <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power )
{
 800b070:	b580      	push	{r7, lr}
 800b072:	b084      	sub	sp, #16
 800b074:	af00      	add	r7, sp, #0
 800b076:	4603      	mov	r3, r0
 800b078:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 800b07a:	2301      	movs	r3, #1
 800b07c:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 800b07e:	f000 fb0f 	bl	800b6a0 <RBI_GetTxConfig>
 800b082:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 800b084:	68bb      	ldr	r3, [r7, #8]
 800b086:	2b02      	cmp	r3, #2
 800b088:	d016      	beq.n	800b0b8 <SUBGRF_SetRfTxPower+0x48>
 800b08a:	68bb      	ldr	r3, [r7, #8]
 800b08c:	2b02      	cmp	r3, #2
 800b08e:	dc16      	bgt.n	800b0be <SUBGRF_SetRfTxPower+0x4e>
 800b090:	68bb      	ldr	r3, [r7, #8]
 800b092:	2b00      	cmp	r3, #0
 800b094:	d003      	beq.n	800b09e <SUBGRF_SetRfTxPower+0x2e>
 800b096:	68bb      	ldr	r3, [r7, #8]
 800b098:	2b01      	cmp	r3, #1
 800b09a:	d00a      	beq.n	800b0b2 <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 800b09c:	e00f      	b.n	800b0be <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 800b09e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b0a2:	2b0f      	cmp	r3, #15
 800b0a4:	dd02      	ble.n	800b0ac <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 800b0a6:	2302      	movs	r3, #2
 800b0a8:	73fb      	strb	r3, [r7, #15]
            break;
 800b0aa:	e009      	b.n	800b0c0 <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 800b0ac:	2301      	movs	r3, #1
 800b0ae:	73fb      	strb	r3, [r7, #15]
            break;
 800b0b0:	e006      	b.n	800b0c0 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 800b0b2:	2301      	movs	r3, #1
 800b0b4:	73fb      	strb	r3, [r7, #15]
            break;
 800b0b6:	e003      	b.n	800b0c0 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 800b0b8:	2302      	movs	r3, #2
 800b0ba:	73fb      	strb	r3, [r7, #15]
            break;
 800b0bc:	e000      	b.n	800b0c0 <SUBGRF_SetRfTxPower+0x50>
            break;
 800b0be:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 800b0c0:	f997 1007 	ldrsb.w	r1, [r7, #7]
 800b0c4:	7bfb      	ldrb	r3, [r7, #15]
 800b0c6:	2202      	movs	r2, #2
 800b0c8:	4618      	mov	r0, r3
 800b0ca:	f7ff fbcd 	bl	800a868 <SUBGRF_SetTxParams>

    return paSelect;
 800b0ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0d0:	4618      	mov	r0, r3
 800b0d2:	3710      	adds	r7, #16
 800b0d4:	46bd      	mov	sp, r7
 800b0d6:	bd80      	pop	{r7, pc}

0800b0d8 <SUBGRF_GetRadioWakeUpTime>:

uint32_t SUBGRF_GetRadioWakeUpTime( void )
{
 800b0d8:	b480      	push	{r7}
 800b0da:	af00      	add	r7, sp, #0
    return RF_WAKEUP_TIME;
 800b0dc:	2301      	movs	r3, #1
}
 800b0de:	4618      	mov	r0, r3
 800b0e0:	46bd      	mov	sp, r7
 800b0e2:	bc80      	pop	{r7}
 800b0e4:	4770      	bx	lr
	...

0800b0e8 <HAL_SUBGHZ_TxCpltCallback>:

/* HAL_SUBGHz Callbacks definitions */
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800b0e8:	b580      	push	{r7, lr}
 800b0ea:	b082      	sub	sp, #8
 800b0ec:	af00      	add	r7, sp, #0
 800b0ee:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 800b0f0:	4b03      	ldr	r3, [pc, #12]	; (800b100 <HAL_SUBGHZ_TxCpltCallback+0x18>)
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	2001      	movs	r0, #1
 800b0f6:	4798      	blx	r3
}
 800b0f8:	bf00      	nop
 800b0fa:	3708      	adds	r7, #8
 800b0fc:	46bd      	mov	sp, r7
 800b0fe:	bd80      	pop	{r7, pc}
 800b100:	20000afc 	.word	0x20000afc

0800b104 <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800b104:	b580      	push	{r7, lr}
 800b106:	b082      	sub	sp, #8
 800b108:	af00      	add	r7, sp, #0
 800b10a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 800b10c:	4b03      	ldr	r3, [pc, #12]	; (800b11c <HAL_SUBGHZ_RxCpltCallback+0x18>)
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	2002      	movs	r0, #2
 800b112:	4798      	blx	r3
}
 800b114:	bf00      	nop
 800b116:	3708      	adds	r7, #8
 800b118:	46bd      	mov	sp, r7
 800b11a:	bd80      	pop	{r7, pc}
 800b11c:	20000afc 	.word	0x20000afc

0800b120 <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 800b120:	b580      	push	{r7, lr}
 800b122:	b082      	sub	sp, #8
 800b124:	af00      	add	r7, sp, #0
 800b126:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 800b128:	4b03      	ldr	r3, [pc, #12]	; (800b138 <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	2040      	movs	r0, #64	; 0x40
 800b12e:	4798      	blx	r3
}
 800b130:	bf00      	nop
 800b132:	3708      	adds	r7, #8
 800b134:	46bd      	mov	sp, r7
 800b136:	bd80      	pop	{r7, pc}
 800b138:	20000afc 	.word	0x20000afc

0800b13c <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 800b13c:	b580      	push	{r7, lr}
 800b13e:	b082      	sub	sp, #8
 800b140:	af00      	add	r7, sp, #0
 800b142:	6078      	str	r0, [r7, #4]
 800b144:	460b      	mov	r3, r1
 800b146:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 800b148:	78fb      	ldrb	r3, [r7, #3]
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d002      	beq.n	800b154 <HAL_SUBGHZ_CADStatusCallback+0x18>
 800b14e:	2b01      	cmp	r3, #1
 800b150:	d005      	beq.n	800b15e <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 800b152:	e00a      	b.n	800b16a <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 800b154:	4b07      	ldr	r3, [pc, #28]	; (800b174 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	2080      	movs	r0, #128	; 0x80
 800b15a:	4798      	blx	r3
            break;
 800b15c:	e005      	b.n	800b16a <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 800b15e:	4b05      	ldr	r3, [pc, #20]	; (800b174 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	f44f 7080 	mov.w	r0, #256	; 0x100
 800b166:	4798      	blx	r3
            break;
 800b168:	bf00      	nop
    }
}
 800b16a:	bf00      	nop
 800b16c:	3708      	adds	r7, #8
 800b16e:	46bd      	mov	sp, r7
 800b170:	bd80      	pop	{r7, pc}
 800b172:	bf00      	nop
 800b174:	20000afc 	.word	0x20000afc

0800b178 <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800b178:	b580      	push	{r7, lr}
 800b17a:	b082      	sub	sp, #8
 800b17c:	af00      	add	r7, sp, #0
 800b17e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 800b180:	4b04      	ldr	r3, [pc, #16]	; (800b194 <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	f44f 7000 	mov.w	r0, #512	; 0x200
 800b188:	4798      	blx	r3
}
 800b18a:	bf00      	nop
 800b18c:	3708      	adds	r7, #8
 800b18e:	46bd      	mov	sp, r7
 800b190:	bd80      	pop	{r7, pc}
 800b192:	bf00      	nop
 800b194:	20000afc 	.word	0x20000afc

0800b198 <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800b198:	b580      	push	{r7, lr}
 800b19a:	b082      	sub	sp, #8
 800b19c:	af00      	add	r7, sp, #0
 800b19e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 800b1a0:	4b03      	ldr	r3, [pc, #12]	; (800b1b0 <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	2020      	movs	r0, #32
 800b1a6:	4798      	blx	r3
}
 800b1a8:	bf00      	nop
 800b1aa:	3708      	adds	r7, #8
 800b1ac:	46bd      	mov	sp, r7
 800b1ae:	bd80      	pop	{r7, pc}
 800b1b0:	20000afc 	.word	0x20000afc

0800b1b4 <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800b1b4:	b580      	push	{r7, lr}
 800b1b6:	b082      	sub	sp, #8
 800b1b8:	af00      	add	r7, sp, #0
 800b1ba:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 800b1bc:	4b03      	ldr	r3, [pc, #12]	; (800b1cc <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	2004      	movs	r0, #4
 800b1c2:	4798      	blx	r3
}
 800b1c4:	bf00      	nop
 800b1c6:	3708      	adds	r7, #8
 800b1c8:	46bd      	mov	sp, r7
 800b1ca:	bd80      	pop	{r7, pc}
 800b1cc:	20000afc 	.word	0x20000afc

0800b1d0 <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800b1d0:	b580      	push	{r7, lr}
 800b1d2:	b082      	sub	sp, #8
 800b1d4:	af00      	add	r7, sp, #0
 800b1d6:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 800b1d8:	4b03      	ldr	r3, [pc, #12]	; (800b1e8 <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	2008      	movs	r0, #8
 800b1de:	4798      	blx	r3
}
 800b1e0:	bf00      	nop
 800b1e2:	3708      	adds	r7, #8
 800b1e4:	46bd      	mov	sp, r7
 800b1e6:	bd80      	pop	{r7, pc}
 800b1e8:	20000afc 	.word	0x20000afc

0800b1ec <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800b1ec:	b580      	push	{r7, lr}
 800b1ee:	b082      	sub	sp, #8
 800b1f0:	af00      	add	r7, sp, #0
 800b1f2:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 800b1f4:	4b03      	ldr	r3, [pc, #12]	; (800b204 <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	2010      	movs	r0, #16
 800b1fa:	4798      	blx	r3
}
 800b1fc:	bf00      	nop
 800b1fe:	3708      	adds	r7, #8
 800b200:	46bd      	mov	sp, r7
 800b202:	bd80      	pop	{r7, pc}
 800b204:	20000afc 	.word	0x20000afc

0800b208 <HAL_SUBGHZ_LrFhssHopCallback>:

void HAL_SUBGHZ_LrFhssHopCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800b208:	b580      	push	{r7, lr}
 800b20a:	b082      	sub	sp, #8
 800b20c:	af00      	add	r7, sp, #0
 800b20e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
 800b210:	4b04      	ldr	r3, [pc, #16]	; (800b224 <HAL_SUBGHZ_LrFhssHopCallback+0x1c>)
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800b218:	4798      	blx	r3
}
 800b21a:	bf00      	nop
 800b21c:	3708      	adds	r7, #8
 800b21e:	46bd      	mov	sp, r7
 800b220:	bd80      	pop	{r7, pc}
 800b222:	bf00      	nop
 800b224:	20000afc 	.word	0x20000afc

0800b228 <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 800b228:	b580      	push	{r7, lr}
 800b22a:	b084      	sub	sp, #16
 800b22c:	af00      	add	r7, sp, #0
 800b22e:	4603      	mov	r3, r0
 800b230:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 800b232:	f000 fa4b 	bl	800b6cc <RBI_IsDCDC>
 800b236:	4603      	mov	r3, r0
 800b238:	2b01      	cmp	r3, #1
 800b23a:	d112      	bne.n	800b262 <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 800b23c:	f640 1023 	movw	r0, #2339	; 0x923
 800b240:	f7ff fe0e 	bl	800ae60 <SUBGRF_ReadRegister>
 800b244:	4603      	mov	r3, r0
 800b246:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 800b248:	7bfb      	ldrb	r3, [r7, #15]
 800b24a:	f023 0306 	bic.w	r3, r3, #6
 800b24e:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 800b250:	7bfa      	ldrb	r2, [r7, #15]
 800b252:	79fb      	ldrb	r3, [r7, #7]
 800b254:	4313      	orrs	r3, r2
 800b256:	b2db      	uxtb	r3, r3
 800b258:	4619      	mov	r1, r3
 800b25a:	f640 1023 	movw	r0, #2339	; 0x923
 800b25e:	f7ff fdeb 	bl	800ae38 <SUBGRF_WriteRegister>
  }
}
 800b262:	bf00      	nop
 800b264:	3710      	adds	r7, #16
 800b266:	46bd      	mov	sp, r7
 800b268:	bd80      	pop	{r7, pc}
	...

0800b26c <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
 800b26c:	b480      	push	{r7}
 800b26e:	b085      	sub	sp, #20
 800b270:	af00      	add	r7, sp, #0
 800b272:	6078      	str	r0, [r7, #4]
    uint8_t i;

    if( bandwidth == 0 )
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	2b00      	cmp	r3, #0
 800b278:	d101      	bne.n	800b27e <SUBGRF_GetFskBandwidthRegValue+0x12>
    {
        return( 0x1F );
 800b27a:	231f      	movs	r3, #31
 800b27c:	e016      	b.n	800b2ac <SUBGRF_GetFskBandwidthRegValue+0x40>
    }

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 800b27e:	2300      	movs	r3, #0
 800b280:	73fb      	strb	r3, [r7, #15]
 800b282:	e00f      	b.n	800b2a4 <SUBGRF_GetFskBandwidthRegValue+0x38>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 800b284:	7bfb      	ldrb	r3, [r7, #15]
 800b286:	4a0c      	ldr	r2, [pc, #48]	; (800b2b8 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 800b288:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b28c:	687a      	ldr	r2, [r7, #4]
 800b28e:	429a      	cmp	r2, r3
 800b290:	d205      	bcs.n	800b29e <SUBGRF_GetFskBandwidthRegValue+0x32>
        {
            return FskBandwidths[i].RegValue;
 800b292:	7bfb      	ldrb	r3, [r7, #15]
 800b294:	4a08      	ldr	r2, [pc, #32]	; (800b2b8 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 800b296:	00db      	lsls	r3, r3, #3
 800b298:	4413      	add	r3, r2
 800b29a:	791b      	ldrb	r3, [r3, #4]
 800b29c:	e006      	b.n	800b2ac <SUBGRF_GetFskBandwidthRegValue+0x40>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 800b29e:	7bfb      	ldrb	r3, [r7, #15]
 800b2a0:	3301      	adds	r3, #1
 800b2a2:	73fb      	strb	r3, [r7, #15]
 800b2a4:	7bfb      	ldrb	r3, [r7, #15]
 800b2a6:	2b15      	cmp	r3, #21
 800b2a8:	d9ec      	bls.n	800b284 <SUBGRF_GetFskBandwidthRegValue+0x18>
        }
    }
    // ERROR: Value not found
    while( 1 );
 800b2aa:	e7fe      	b.n	800b2aa <SUBGRF_GetFskBandwidthRegValue+0x3e>
}
 800b2ac:	4618      	mov	r0, r3
 800b2ae:	3714      	adds	r7, #20
 800b2b0:	46bd      	mov	sp, r7
 800b2b2:	bc80      	pop	{r7}
 800b2b4:	4770      	bx	lr
 800b2b6:	bf00      	nop
 800b2b8:	0800cfbc 	.word	0x0800cfbc

0800b2bc <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 800b2bc:	b580      	push	{r7, lr}
 800b2be:	b08a      	sub	sp, #40	; 0x28
 800b2c0:	af00      	add	r7, sp, #0
 800b2c2:	6078      	str	r0, [r7, #4]
 800b2c4:	6039      	str	r1, [r7, #0]
  uint8_t BwMant[] = {4, 8, 10, 12};
 800b2c6:	4b35      	ldr	r3, [pc, #212]	; (800b39c <SUBGRF_GetCFO+0xe0>)
 800b2c8:	60fb      	str	r3, [r7, #12]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSELR ));
 800b2ca:	f640 0007 	movw	r0, #2055	; 0x807
 800b2ce:	f7ff fdc7 	bl	800ae60 <SUBGRF_ReadRegister>
 800b2d2:	4603      	mov	r3, r0
 800b2d4:	77fb      	strb	r3, [r7, #31]
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 800b2d6:	7ffb      	ldrb	r3, [r7, #31]
 800b2d8:	08db      	lsrs	r3, r3, #3
 800b2da:	b2db      	uxtb	r3, r3
 800b2dc:	f003 0303 	and.w	r3, r3, #3
 800b2e0:	3328      	adds	r3, #40	; 0x28
 800b2e2:	443b      	add	r3, r7
 800b2e4:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 800b2e8:	77bb      	strb	r3, [r7, #30]
  uint8_t bandwidth_exp = reg & 0x7;
 800b2ea:	7ffb      	ldrb	r3, [r7, #31]
 800b2ec:	f003 0307 	and.w	r3, r3, #7
 800b2f0:	777b      	strb	r3, [r7, #29]
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp + 1 )));
 800b2f2:	7fba      	ldrb	r2, [r7, #30]
 800b2f4:	7f7b      	ldrb	r3, [r7, #29]
 800b2f6:	3301      	adds	r3, #1
 800b2f8:	fa02 f303 	lsl.w	r3, r2, r3
 800b2fc:	461a      	mov	r2, r3
 800b2fe:	4b28      	ldr	r3, [pc, #160]	; (800b3a0 <SUBGRF_GetCFO+0xe4>)
 800b300:	fbb3 f3f2 	udiv	r3, r3, r2
 800b304:	61bb      	str	r3, [r7, #24]
  uint32_t cf_osr = cf_fs / bitRate;
 800b306:	69ba      	ldr	r2, [r7, #24]
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b30e:	617b      	str	r3, [r7, #20]
  uint8_t interp = 1;
 800b310:	2301      	movs	r3, #1
 800b312:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 800b316:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b31a:	697a      	ldr	r2, [r7, #20]
 800b31c:	fb02 f303 	mul.w	r3, r2, r3
 800b320:	2b07      	cmp	r3, #7
 800b322:	d802      	bhi.n	800b32a <SUBGRF_GetCFO+0x6e>
  {
    interp = 2;
 800b324:	2302      	movs	r3, #2
 800b326:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  if (cf_osr * interp < 4)
 800b32a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b32e:	697a      	ldr	r2, [r7, #20]
 800b330:	fb02 f303 	mul.w	r3, r2, r3
 800b334:	2b03      	cmp	r3, #3
 800b336:	d802      	bhi.n	800b33e <SUBGRF_GetCFO+0x82>
  {
    interp = 4;
 800b338:	2304      	movs	r3, #4
 800b33a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 800b33e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b342:	69bb      	ldr	r3, [r7, #24]
 800b344:	fb02 f303 	mul.w	r3, r2, r3
 800b348:	613b      	str	r3, [r7, #16]
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_GCFORH ) & 0xF ) << 8;
 800b34a:	f44f 60d6 	mov.w	r0, #1712	; 0x6b0
 800b34e:	f7ff fd87 	bl	800ae60 <SUBGRF_ReadRegister>
 800b352:	4603      	mov	r3, r0
 800b354:	021b      	lsls	r3, r3, #8
 800b356:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800b35a:	623b      	str	r3, [r7, #32]
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_GCFORL );
 800b35c:	f240 60b1 	movw	r0, #1713	; 0x6b1
 800b360:	f7ff fd7e 	bl	800ae60 <SUBGRF_ReadRegister>
 800b364:	4603      	mov	r3, r0
 800b366:	461a      	mov	r2, r3
 800b368:	6a3b      	ldr	r3, [r7, #32]
 800b36a:	4313      	orrs	r3, r2
 800b36c:	623b      	str	r3, [r7, #32]
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 800b36e:	6a3b      	ldr	r3, [r7, #32]
 800b370:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b374:	2b00      	cmp	r3, #0
 800b376:	d005      	beq.n	800b384 <SUBGRF_GetCFO+0xc8>
  {
    cfo_bin |= 0xFFFFF000;
 800b378:	6a3b      	ldr	r3, [r7, #32]
 800b37a:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800b37e:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800b382:	623b      	str	r3, [r7, #32]
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 800b384:	693b      	ldr	r3, [r7, #16]
 800b386:	095b      	lsrs	r3, r3, #5
 800b388:	6a3a      	ldr	r2, [r7, #32]
 800b38a:	fb02 f303 	mul.w	r3, r2, r3
 800b38e:	11da      	asrs	r2, r3, #7
 800b390:	683b      	ldr	r3, [r7, #0]
 800b392:	601a      	str	r2, [r3, #0]
}
 800b394:	bf00      	nop
 800b396:	3728      	adds	r7, #40	; 0x28
 800b398:	46bd      	mov	sp, r7
 800b39a:	bd80      	pop	{r7, pc}
 800b39c:	0c0a0804 	.word	0x0c0a0804
 800b3a0:	01e84800 	.word	0x01e84800

0800b3a4 <RFW_TransmitLongPacket>:
#endif /* RFW_ENABLE == 1 */

/* Exported functions --------------------------------------------------------*/
int32_t RFW_TransmitLongPacket( uint16_t payload_size, uint32_t timeout,
                                void ( *TxLongPacketGetNextChunkCb )( uint8_t **buffer, uint8_t buffer_size ) )
{
 800b3a4:	b480      	push	{r7}
 800b3a6:	b087      	sub	sp, #28
 800b3a8:	af00      	add	r7, sp, #0
 800b3aa:	4603      	mov	r3, r0
 800b3ac:	60b9      	str	r1, [r7, #8]
 800b3ae:	607a      	str	r2, [r7, #4]
 800b3b0:	81fb      	strh	r3, [r7, #14]
    int32_t status = 0;
 800b3b2:	2300      	movs	r3, #0
 800b3b4:	617b      	str	r3, [r7, #20]
        default:
            break;
        }
    }
#else
    status = -1;
 800b3b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b3ba:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 800b3bc:	697b      	ldr	r3, [r7, #20]
}
 800b3be:	4618      	mov	r0, r3
 800b3c0:	371c      	adds	r7, #28
 800b3c2:	46bd      	mov	sp, r7
 800b3c4:	bc80      	pop	{r7}
 800b3c6:	4770      	bx	lr

0800b3c8 <RFW_ReceiveLongPacket>:

int32_t RFW_ReceiveLongPacket( uint8_t boosted_mode, uint32_t timeout,
                               void ( *RxLongPacketStoreChunkCb )( uint8_t *buffer, uint8_t chunk_size ) )
{
 800b3c8:	b480      	push	{r7}
 800b3ca:	b087      	sub	sp, #28
 800b3cc:	af00      	add	r7, sp, #0
 800b3ce:	4603      	mov	r3, r0
 800b3d0:	60b9      	str	r1, [r7, #8]
 800b3d2:	607a      	str	r2, [r7, #4]
 800b3d4:	73fb      	strb	r3, [r7, #15]
    int32_t status = 0;
 800b3d6:	2300      	movs	r3, #0
 800b3d8:	617b      	str	r3, [r7, #20]
        {
            SUBGRF_SetRx( 0xFFFFFF ); /* Rx Continuous */
        }
    }
#else
    status = -1;
 800b3da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b3de:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 800b3e0:	697b      	ldr	r3, [r7, #20]
}
 800b3e2:	4618      	mov	r0, r3
 800b3e4:	371c      	adds	r7, #28
 800b3e6:	46bd      	mov	sp, r7
 800b3e8:	bc80      	pop	{r7}
 800b3ea:	4770      	bx	lr

0800b3ec <RFW_Init>:

int32_t RFW_Init( ConfigGeneric_t *config, RadioEvents_t *RadioEvents, TimerEvent_t *TimeoutTimerEvent )
{
 800b3ec:	b480      	push	{r7}
 800b3ee:	b085      	sub	sp, #20
 800b3f0:	af00      	add	r7, sp, #0
 800b3f2:	60f8      	str	r0, [r7, #12]
 800b3f4:	60b9      	str	r1, [r7, #8]
 800b3f6:	607a      	str	r2, [r7, #4]
    RFWPacket.Init.Enable = 1;
    /* Initialize Timer for end of fixed packet, started at sync*/
    TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
    return 0;
#else
    return -1;
 800b3f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
#endif /* RFW_ENABLE == 1 */
}
 800b3fc:	4618      	mov	r0, r3
 800b3fe:	3714      	adds	r7, #20
 800b400:	46bd      	mov	sp, r7
 800b402:	bc80      	pop	{r7}
 800b404:	4770      	bx	lr

0800b406 <RFW_DeInit>:

void RFW_DeInit( void )
{
 800b406:	b480      	push	{r7}
 800b408:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Enable = 0; /*Disable the RFWPacket decoding*/
#endif /* RFW_ENABLE == 1 */
}
 800b40a:	bf00      	nop
 800b40c:	46bd      	mov	sp, r7
 800b40e:	bc80      	pop	{r7}
 800b410:	4770      	bx	lr

0800b412 <RFW_Is_Init>:

uint8_t RFW_Is_Init( void )
{
 800b412:	b480      	push	{r7}
 800b414:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.Init.Enable;
#else
    return 0;
 800b416:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 800b418:	4618      	mov	r0, r3
 800b41a:	46bd      	mov	sp, r7
 800b41c:	bc80      	pop	{r7}
 800b41e:	4770      	bx	lr

0800b420 <RFW_Is_LongPacketModeEnabled>:

uint8_t RFW_Is_LongPacketModeEnabled( void )
{
 800b420:	b480      	push	{r7}
 800b422:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.LongPacketModeEnable;
#else
    return 0;
 800b424:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 800b426:	4618      	mov	r0, r3
 800b428:	46bd      	mov	sp, r7
 800b42a:	bc80      	pop	{r7}
 800b42c:	4770      	bx	lr

0800b42e <RFW_SetAntSwitch>:

void RFW_SetAntSwitch( uint8_t AntSwitch )
{
 800b42e:	b480      	push	{r7}
 800b430:	b083      	sub	sp, #12
 800b432:	af00      	add	r7, sp, #0
 800b434:	4603      	mov	r3, r0
 800b436:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.AntSwitchPaSelect = AntSwitch;
#endif /* RFW_ENABLE == 1 */
}
 800b438:	bf00      	nop
 800b43a:	370c      	adds	r7, #12
 800b43c:	46bd      	mov	sp, r7
 800b43e:	bc80      	pop	{r7}
 800b440:	4770      	bx	lr

0800b442 <RFW_TransmitInit>:

int32_t RFW_TransmitInit( uint8_t *inOutBuffer, uint8_t size, uint8_t *outSize )
{
 800b442:	b480      	push	{r7}
 800b444:	b087      	sub	sp, #28
 800b446:	af00      	add	r7, sp, #0
 800b448:	60f8      	str	r0, [r7, #12]
 800b44a:	460b      	mov	r3, r1
 800b44c:	607a      	str	r2, [r7, #4]
 800b44e:	72fb      	strb	r3, [r7, #11]
    int32_t status = -1;
 800b450:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b454:	617b      	str	r3, [r7, #20]
        RFWPacket.LongPacketModeEnable = 0;

        status = 0;
    }
#endif /* RFW_ENABLE == 1 */
    return status;
 800b456:	697b      	ldr	r3, [r7, #20]
}
 800b458:	4618      	mov	r0, r3
 800b45a:	371c      	adds	r7, #28
 800b45c:	46bd      	mov	sp, r7
 800b45e:	bc80      	pop	{r7}
 800b460:	4770      	bx	lr

0800b462 <RFW_ReceiveInit>:

int32_t RFW_ReceiveInit( void )
{
 800b462:	b480      	push	{r7}
 800b464:	af00      	add	r7, sp, #0
    RFWPacket.RxPayloadOffset = 0;

    RFWPacket.LongPacketModeEnable = 0;
    return 0;
#else
    return -1;
 800b466:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
#endif /* RFW_ENABLE == 1 */
}
 800b46a:	4618      	mov	r0, r3
 800b46c:	46bd      	mov	sp, r7
 800b46e:	bc80      	pop	{r7}
 800b470:	4770      	bx	lr

0800b472 <RFW_DeInit_TxLongPacket>:

void RFW_DeInit_TxLongPacket( void )
{
 800b472:	b480      	push	{r7}
 800b474:	af00      	add	r7, sp, #0
    /*long packet WA*/
    uint8_t reg = SUBGRF_ReadRegister( SUBGHZ_GPKTCTL1AR );
    SUBGRF_WriteRegister( SUBGHZ_GPKTCTL1AR, reg & ~0x02 ); /* clear infinite_sequence bit */
    SUBGRF_WriteRegister( SUBGHZ_GRTXPLDLEN, 0xFF ); /* RxTxPldLen: reset to 0xFF */
#endif /* RFW_LONGPACKET_ENABLE == 1 */
}
 800b476:	bf00      	nop
 800b478:	46bd      	mov	sp, r7
 800b47a:	bc80      	pop	{r7}
 800b47c:	4770      	bx	lr

0800b47e <RFW_ReceivePayload>:

void RFW_ReceivePayload( void )
{
 800b47e:	b480      	push	{r7}
 800b480:	af00      	add	r7, sp, #0
        /*timeout*/
        SUBGRF_SetStandby( STDBY_RC );
        RFWPacket.Init.RadioEvents->RxTimeout( );
    }
#endif /* RFW_ENABLE == 1 */
}
 800b482:	bf00      	nop
 800b484:	46bd      	mov	sp, r7
 800b486:	bc80      	pop	{r7}
 800b488:	4770      	bx	lr

0800b48a <RFW_SetRadioModem>:

void RFW_SetRadioModem( RadioModems_t Modem )
{
 800b48a:	b480      	push	{r7}
 800b48c:	b083      	sub	sp, #12
 800b48e:	af00      	add	r7, sp, #0
 800b490:	4603      	mov	r3, r0
 800b492:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Modem = Modem;
#endif /* RFW_ENABLE == 1 */
}
 800b494:	bf00      	nop
 800b496:	370c      	adds	r7, #12
 800b498:	46bd      	mov	sp, r7
 800b49a:	bc80      	pop	{r7}
 800b49c:	4770      	bx	lr

0800b49e <MX_SubGHz_Phy_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_SubGHz_Phy_Init(void)
{
 800b49e:	b580      	push	{r7, lr}
 800b4a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_1 */

  /* USER CODE END MX_SubGHz_Phy_Init_1 */
  SystemApp_Init();
 800b4a2:	f7f7 fb1e 	bl	8002ae2 <SystemApp_Init>
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_1_1 */

  /* USER CODE END MX_SubGHz_Phy_Init_1_1 */
  SubghzApp_Init();
 800b4a6:	f000 f809 	bl	800b4bc <SubghzApp_Init>
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_2 */

  /* USER CODE END MX_SubGHz_Phy_Init_2 */
}
 800b4aa:	bf00      	nop
 800b4ac:	bd80      	pop	{r7, pc}

0800b4ae <MX_SubGHz_Phy_Process>:

void MX_SubGHz_Phy_Process(void)
{
 800b4ae:	b480      	push	{r7}
 800b4b0:	af00      	add	r7, sp, #0

  /* USER CODE END MX_SubGHz_Phy_Process_1 */
  /* USER CODE BEGIN MX_SubGHz_Phy_Process_OS */

  /* USER CODE END MX_SubGHz_Phy_Process_OS */
}
 800b4b2:	bf00      	nop
 800b4b4:	46bd      	mov	sp, r7
 800b4b6:	bc80      	pop	{r7}
 800b4b8:	4770      	bx	lr
	...

0800b4bc <SubghzApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SubghzApp_Init(void)
{
 800b4bc:	b580      	push	{r7, lr}
 800b4be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SubghzApp_Init_1 */

  /* USER CODE END SubghzApp_Init_1 */

  /* Radio initialization */
  RadioEvents.TxDone = OnTxDone;
 800b4c0:	4b0a      	ldr	r3, [pc, #40]	; (800b4ec <SubghzApp_Init+0x30>)
 800b4c2:	4a0b      	ldr	r2, [pc, #44]	; (800b4f0 <SubghzApp_Init+0x34>)
 800b4c4:	601a      	str	r2, [r3, #0]
  RadioEvents.RxDone = OnRxDone;
 800b4c6:	4b09      	ldr	r3, [pc, #36]	; (800b4ec <SubghzApp_Init+0x30>)
 800b4c8:	4a0a      	ldr	r2, [pc, #40]	; (800b4f4 <SubghzApp_Init+0x38>)
 800b4ca:	609a      	str	r2, [r3, #8]
  RadioEvents.TxTimeout = OnTxTimeout;
 800b4cc:	4b07      	ldr	r3, [pc, #28]	; (800b4ec <SubghzApp_Init+0x30>)
 800b4ce:	4a0a      	ldr	r2, [pc, #40]	; (800b4f8 <SubghzApp_Init+0x3c>)
 800b4d0:	605a      	str	r2, [r3, #4]
  RadioEvents.RxTimeout = OnRxTimeout;
 800b4d2:	4b06      	ldr	r3, [pc, #24]	; (800b4ec <SubghzApp_Init+0x30>)
 800b4d4:	4a09      	ldr	r2, [pc, #36]	; (800b4fc <SubghzApp_Init+0x40>)
 800b4d6:	60da      	str	r2, [r3, #12]
  RadioEvents.RxError = OnRxError;
 800b4d8:	4b04      	ldr	r3, [pc, #16]	; (800b4ec <SubghzApp_Init+0x30>)
 800b4da:	4a09      	ldr	r2, [pc, #36]	; (800b500 <SubghzApp_Init+0x44>)
 800b4dc:	611a      	str	r2, [r3, #16]

  Radio.Init(&RadioEvents);
 800b4de:	4b09      	ldr	r3, [pc, #36]	; (800b504 <SubghzApp_Init+0x48>)
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	4802      	ldr	r0, [pc, #8]	; (800b4ec <SubghzApp_Init+0x30>)
 800b4e4:	4798      	blx	r3

  /* USER CODE BEGIN SubghzApp_Init_2 */

  /* USER CODE END SubghzApp_Init_2 */
}
 800b4e6:	bf00      	nop
 800b4e8:	bd80      	pop	{r7, pc}
 800b4ea:	bf00      	nop
 800b4ec:	20000b00 	.word	0x20000b00
 800b4f0:	0800b509 	.word	0x0800b509
 800b4f4:	0800b515 	.word	0x0800b515
 800b4f8:	0800b539 	.word	0x0800b539
 800b4fc:	0800b545 	.word	0x0800b545
 800b500:	0800b551 	.word	0x0800b551
 800b504:	0800cf2c 	.word	0x0800cf2c

0800b508 <OnTxDone>:

/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/
static void OnTxDone(void)
{
 800b508:	b480      	push	{r7}
 800b50a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnTxDone */
  /* USER CODE END OnTxDone */
}
 800b50c:	bf00      	nop
 800b50e:	46bd      	mov	sp, r7
 800b510:	bc80      	pop	{r7}
 800b512:	4770      	bx	lr

0800b514 <OnRxDone>:

static void OnRxDone(uint8_t *payload, uint16_t size, int16_t rssi, int8_t LoraSnr_FskCfo)
{
 800b514:	b480      	push	{r7}
 800b516:	b085      	sub	sp, #20
 800b518:	af00      	add	r7, sp, #0
 800b51a:	60f8      	str	r0, [r7, #12]
 800b51c:	4608      	mov	r0, r1
 800b51e:	4611      	mov	r1, r2
 800b520:	461a      	mov	r2, r3
 800b522:	4603      	mov	r3, r0
 800b524:	817b      	strh	r3, [r7, #10]
 800b526:	460b      	mov	r3, r1
 800b528:	813b      	strh	r3, [r7, #8]
 800b52a:	4613      	mov	r3, r2
 800b52c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnRxDone */
  /* USER CODE END OnRxDone */
}
 800b52e:	bf00      	nop
 800b530:	3714      	adds	r7, #20
 800b532:	46bd      	mov	sp, r7
 800b534:	bc80      	pop	{r7}
 800b536:	4770      	bx	lr

0800b538 <OnTxTimeout>:

static void OnTxTimeout(void)
{
 800b538:	b480      	push	{r7}
 800b53a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnTxTimeout */
  /* USER CODE END OnTxTimeout */
}
 800b53c:	bf00      	nop
 800b53e:	46bd      	mov	sp, r7
 800b540:	bc80      	pop	{r7}
 800b542:	4770      	bx	lr

0800b544 <OnRxTimeout>:

static void OnRxTimeout(void)
{
 800b544:	b480      	push	{r7}
 800b546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnRxTimeout */
  /* USER CODE END OnRxTimeout */
}
 800b548:	bf00      	nop
 800b54a:	46bd      	mov	sp, r7
 800b54c:	bc80      	pop	{r7}
 800b54e:	4770      	bx	lr

0800b550 <OnRxError>:

static void OnRxError(void)
{
 800b550:	b480      	push	{r7}
 800b552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnRxError */
  /* USER CODE END OnRxError */
}
 800b554:	bf00      	nop
 800b556:	46bd      	mov	sp, r7
 800b558:	bc80      	pop	{r7}
 800b55a:	4770      	bx	lr

0800b55c <LL_AHB2_GRP1_EnableClock>:
{
 800b55c:	b480      	push	{r7}
 800b55e:	b085      	sub	sp, #20
 800b560:	af00      	add	r7, sp, #0
 800b562:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800b564:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b568:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b56a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	4313      	orrs	r3, r2
 800b572:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800b574:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b578:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	4013      	ands	r3, r2
 800b57e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800b580:	68fb      	ldr	r3, [r7, #12]
}
 800b582:	bf00      	nop
 800b584:	3714      	adds	r7, #20
 800b586:	46bd      	mov	sp, r7
 800b588:	bc80      	pop	{r7}
 800b58a:	4770      	bx	lr

0800b58c <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 800b58c:	b580      	push	{r7, lr}
 800b58e:	b086      	sub	sp, #24
 800b590:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
#else
  /* 2/ Or implement RBI_Init here */
  int32_t retcode = 0;
 800b592:	2300      	movs	r3, #0
 800b594:	617b      	str	r3, [r7, #20]
  /* USER CODE BEGIN RBI_Init_2 */
	GPIO_InitTypeDef gpio_init_structure = { 0 };
 800b596:	463b      	mov	r3, r7
 800b598:	2200      	movs	r2, #0
 800b59a:	601a      	str	r2, [r3, #0]
 800b59c:	605a      	str	r2, [r3, #4]
 800b59e:	609a      	str	r2, [r3, #8]
 800b5a0:	60da      	str	r2, [r3, #12]
 800b5a2:	611a      	str	r2, [r3, #16]

	/* Enable the Radio Switch Clock */
	RF_SW_CTRL3_GPIO_CLK_ENABLE();
 800b5a4:	2004      	movs	r0, #4
 800b5a6:	f7ff ffd9 	bl	800b55c <LL_AHB2_GRP1_EnableClock>

	/* Configure the Radio Switch pin */
	gpio_init_structure.Pin = RF_SW_CTRL1_PIN;
 800b5aa:	2310      	movs	r3, #16
 800b5ac:	603b      	str	r3, [r7, #0]
	gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 800b5ae:	2301      	movs	r3, #1
 800b5b0:	607b      	str	r3, [r7, #4]
	gpio_init_structure.Pull = GPIO_NOPULL;
 800b5b2:	2300      	movs	r3, #0
 800b5b4:	60bb      	str	r3, [r7, #8]
	gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b5b6:	2303      	movs	r3, #3
 800b5b8:	60fb      	str	r3, [r7, #12]

	HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 800b5ba:	463b      	mov	r3, r7
 800b5bc:	4619      	mov	r1, r3
 800b5be:	4812      	ldr	r0, [pc, #72]	; (800b608 <RBI_Init+0x7c>)
 800b5c0:	f7f8 fc4e 	bl	8003e60 <HAL_GPIO_Init>

	gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 800b5c4:	2320      	movs	r3, #32
 800b5c6:	603b      	str	r3, [r7, #0]
	HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 800b5c8:	463b      	mov	r3, r7
 800b5ca:	4619      	mov	r1, r3
 800b5cc:	480e      	ldr	r0, [pc, #56]	; (800b608 <RBI_Init+0x7c>)
 800b5ce:	f7f8 fc47 	bl	8003e60 <HAL_GPIO_Init>

	gpio_init_structure.Pin = RF_SW_CTRL3_PIN;
 800b5d2:	2308      	movs	r3, #8
 800b5d4:	603b      	str	r3, [r7, #0]
	HAL_GPIO_Init(RF_SW_CTRL3_GPIO_PORT, &gpio_init_structure);
 800b5d6:	463b      	mov	r3, r7
 800b5d8:	4619      	mov	r1, r3
 800b5da:	480b      	ldr	r0, [pc, #44]	; (800b608 <RBI_Init+0x7c>)
 800b5dc:	f7f8 fc40 	bl	8003e60 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 800b5e0:	2200      	movs	r2, #0
 800b5e2:	2120      	movs	r1, #32
 800b5e4:	4808      	ldr	r0, [pc, #32]	; (800b608 <RBI_Init+0x7c>)
 800b5e6:	f7f8 fd9b 	bl	8004120 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 800b5ea:	2200      	movs	r2, #0
 800b5ec:	2110      	movs	r1, #16
 800b5ee:	4806      	ldr	r0, [pc, #24]	; (800b608 <RBI_Init+0x7c>)
 800b5f0:	f7f8 fd96 	bl	8004120 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET);
 800b5f4:	2200      	movs	r2, #0
 800b5f6:	2108      	movs	r1, #8
 800b5f8:	4803      	ldr	r0, [pc, #12]	; (800b608 <RBI_Init+0x7c>)
 800b5fa:	f7f8 fd91 	bl	8004120 <HAL_GPIO_WritePin>
  /* USER CODE END RBI_Init_2 */
  return retcode;
 800b5fe:	697b      	ldr	r3, [r7, #20]
#endif  /* USE_BSP_DRIVER  */
}
 800b600:	4618      	mov	r0, r3
 800b602:	3718      	adds	r7, #24
 800b604:	46bd      	mov	sp, r7
 800b606:	bd80      	pop	{r7, pc}
 800b608:	48000800 	.word	0x48000800

0800b60c <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 800b60c:	b580      	push	{r7, lr}
 800b60e:	b084      	sub	sp, #16
 800b610:	af00      	add	r7, sp, #0
 800b612:	4603      	mov	r3, r0
 800b614:	71fb      	strb	r3, [r7, #7]
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
#else
  /* 2/ Or implement RBI_ConfigRFSwitch here */
  int32_t retcode = 0;
 800b616:	2300      	movs	r3, #0
 800b618:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */

	switch (Config) {
 800b61a:	79fb      	ldrb	r3, [r7, #7]
 800b61c:	2b03      	cmp	r3, #3
 800b61e:	d837      	bhi.n	800b690 <RBI_ConfigRFSwitch+0x84>
 800b620:	a201      	add	r2, pc, #4	; (adr r2, 800b628 <RBI_ConfigRFSwitch+0x1c>)
 800b622:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b626:	bf00      	nop
 800b628:	0800b639 	.word	0x0800b639
 800b62c:	0800b64f 	.word	0x0800b64f
 800b630:	0800b665 	.word	0x0800b665
 800b634:	0800b67b 	.word	0x0800b67b
	case RADIO_SWITCH_OFF: {
		/* Turn off switch */
		//		HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN,
		//				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET);
 800b638:	2201      	movs	r2, #1
 800b63a:	2110      	movs	r1, #16
 800b63c:	4817      	ldr	r0, [pc, #92]	; (800b69c <RBI_ConfigRFSwitch+0x90>)
 800b63e:	f7f8 fd6f 	bl	8004120 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET);
 800b642:	2201      	movs	r2, #1
 800b644:	2120      	movs	r1, #32
 800b646:	4815      	ldr	r0, [pc, #84]	; (800b69c <RBI_ConfigRFSwitch+0x90>)
 800b648:	f7f8 fd6a 	bl	8004120 <HAL_GPIO_WritePin>
		break;
 800b64c:	e021      	b.n	800b692 <RBI_ConfigRFSwitch+0x86>
	}
	case RADIO_SWITCH_RX: {
		/*Turns On in Rx Mode the RF Switch */
		//		HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
		HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN,
 800b64e:	2200      	movs	r2, #0
 800b650:	2110      	movs	r1, #16
 800b652:	4812      	ldr	r0, [pc, #72]	; (800b69c <RBI_ConfigRFSwitch+0x90>)
 800b654:	f7f8 fd64 	bl	8004120 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN,
 800b658:	2200      	movs	r2, #0
 800b65a:	2120      	movs	r1, #32
 800b65c:	480f      	ldr	r0, [pc, #60]	; (800b69c <RBI_ConfigRFSwitch+0x90>)
 800b65e:	f7f8 fd5f 	bl	8004120 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		break;
 800b662:	e016      	b.n	800b692 <RBI_ConfigRFSwitch+0x86>
	}
	case RADIO_SWITCH_RFO_LP: {
		/*Turns On in Tx Low Power the RF Switch */
		//		HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
		HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN,
 800b664:	2200      	movs	r2, #0
 800b666:	2110      	movs	r1, #16
 800b668:	480c      	ldr	r0, [pc, #48]	; (800b69c <RBI_ConfigRFSwitch+0x90>)
 800b66a:	f7f8 fd59 	bl	8004120 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET);
 800b66e:	2201      	movs	r2, #1
 800b670:	2120      	movs	r1, #32
 800b672:	480a      	ldr	r0, [pc, #40]	; (800b69c <RBI_ConfigRFSwitch+0x90>)
 800b674:	f7f8 fd54 	bl	8004120 <HAL_GPIO_WritePin>
		break;
 800b678:	e00b      	b.n	800b692 <RBI_ConfigRFSwitch+0x86>
	}
	case RADIO_SWITCH_RFO_HP: {
		/*Turns On in Tx High Power the RF Switch */
		//		HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
		HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN,
 800b67a:	2200      	movs	r2, #0
 800b67c:	2110      	movs	r1, #16
 800b67e:	4807      	ldr	r0, [pc, #28]	; (800b69c <RBI_ConfigRFSwitch+0x90>)
 800b680:	f7f8 fd4e 	bl	8004120 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET);
 800b684:	2201      	movs	r2, #1
 800b686:	2120      	movs	r1, #32
 800b688:	4804      	ldr	r0, [pc, #16]	; (800b69c <RBI_ConfigRFSwitch+0x90>)
 800b68a:	f7f8 fd49 	bl	8004120 <HAL_GPIO_WritePin>
		break;
 800b68e:	e000      	b.n	800b692 <RBI_ConfigRFSwitch+0x86>
	}
	default:
		break;
 800b690:	bf00      	nop
//	default:
//		break;
//	}

  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
 800b692:	68fb      	ldr	r3, [r7, #12]
#endif  /* USE_BSP_DRIVER */
}
 800b694:	4618      	mov	r0, r3
 800b696:	3710      	adds	r7, #16
 800b698:	46bd      	mov	sp, r7
 800b69a:	bd80      	pop	{r7, pc}
 800b69c:	48000800 	.word	0x48000800

0800b6a0 <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 800b6a0:	b480      	push	{r7}
 800b6a2:	b083      	sub	sp, #12
 800b6a4:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
#else
  /* 2/ Or implement RBI_GetTxConfig here */
  int32_t retcode = RBI_CONF_RFO;
 800b6a6:	2300      	movs	r3, #0
 800b6a8:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
	return RADIO_CONF_RFO_LP_HP;
 800b6aa:	2300      	movs	r3, #0
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800b6ac:	4618      	mov	r0, r3
 800b6ae:	370c      	adds	r7, #12
 800b6b0:	46bd      	mov	sp, r7
 800b6b2:	bc80      	pop	{r7}
 800b6b4:	4770      	bx	lr

0800b6b6 <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 800b6b6:	b480      	push	{r7}
 800b6b8:	b083      	sub	sp, #12
 800b6ba:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
#else
  /* 2/ Or implement RBI_IsTCXO here */
  int32_t retcode = IS_TCXO_SUPPORTED;
 800b6bc:	2301      	movs	r3, #1
 800b6be:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_IsTCXO_2 */
	return IS_TCXO_SUPPORTED;
 800b6c0:	2301      	movs	r3, #1
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800b6c2:	4618      	mov	r0, r3
 800b6c4:	370c      	adds	r7, #12
 800b6c6:	46bd      	mov	sp, r7
 800b6c8:	bc80      	pop	{r7}
 800b6ca:	4770      	bx	lr

0800b6cc <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 800b6cc:	b480      	push	{r7}
 800b6ce:	b083      	sub	sp, #12
 800b6d0:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
#else
  /* 2/ Or implement RBI_IsDCDC here */
  int32_t retcode = IS_DCDC_SUPPORTED;
 800b6d2:	2301      	movs	r3, #1
 800b6d4:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_IsDCDC_2 */
	return IS_DCDC_SUPPORTED;
 800b6d6:	2301      	movs	r3, #1
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800b6d8:	4618      	mov	r0, r3
 800b6da:	370c      	adds	r7, #12
 800b6dc:	46bd      	mov	sp, r7
 800b6de:	bc80      	pop	{r7}
 800b6e0:	4770      	bx	lr

0800b6e2 <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 800b6e2:	b480      	push	{r7}
 800b6e4:	b085      	sub	sp, #20
 800b6e6:	af00      	add	r7, sp, #0
 800b6e8:	4603      	mov	r3, r0
 800b6ea:	71fb      	strb	r3, [r7, #7]
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
#else
  /* 2/ Or implement RBI_RBI_GetRFOMaxPowerConfig here */
  int32_t ret = 0;
 800b6ec:	2300      	movs	r3, #0
 800b6ee:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN RBI_GetRFOMaxPowerConfig_2 */
// #warning user to provide its board code or to call his board driver functions
	if (Config == RBI_RFO_LP_MAXPOWER) {
 800b6f0:	79fb      	ldrb	r3, [r7, #7]
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d102      	bne.n	800b6fc <RBI_GetRFOMaxPowerConfig+0x1a>
		ret = 15; /*dBm*/
 800b6f6:	230f      	movs	r3, #15
 800b6f8:	60fb      	str	r3, [r7, #12]
 800b6fa:	e001      	b.n	800b700 <RBI_GetRFOMaxPowerConfig+0x1e>
	} else {
		ret = 22; /*dBm*/
 800b6fc:	2316      	movs	r3, #22
 800b6fe:	60fb      	str	r3, [r7, #12]
	}
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
 800b700:	68fb      	ldr	r3, [r7, #12]
#endif  /* USE_BSP_DRIVER  */
}
 800b702:	4618      	mov	r0, r3
 800b704:	3714      	adds	r7, #20
 800b706:	46bd      	mov	sp, r7
 800b708:	bc80      	pop	{r7}
 800b70a:	4770      	bx	lr

0800b70c <UTIL_MEM_cpy_8>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
 800b70c:	b480      	push	{r7}
 800b70e:	b087      	sub	sp, #28
 800b710:	af00      	add	r7, sp, #0
 800b712:	60f8      	str	r0, [r7, #12]
 800b714:	60b9      	str	r1, [r7, #8]
 800b716:	4613      	mov	r3, r2
 800b718:	80fb      	strh	r3, [r7, #6]
  uint8_t* dst8= (uint8_t *) dst;
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	617b      	str	r3, [r7, #20]
  uint8_t* src8= (uint8_t *) src;
 800b71e:	68bb      	ldr	r3, [r7, #8]
 800b720:	613b      	str	r3, [r7, #16]

  while( size-- )
 800b722:	e007      	b.n	800b734 <UTIL_MEM_cpy_8+0x28>
    {
        *dst8++ = *src8++;
 800b724:	693a      	ldr	r2, [r7, #16]
 800b726:	1c53      	adds	r3, r2, #1
 800b728:	613b      	str	r3, [r7, #16]
 800b72a:	697b      	ldr	r3, [r7, #20]
 800b72c:	1c59      	adds	r1, r3, #1
 800b72e:	6179      	str	r1, [r7, #20]
 800b730:	7812      	ldrb	r2, [r2, #0]
 800b732:	701a      	strb	r2, [r3, #0]
  while( size-- )
 800b734:	88fb      	ldrh	r3, [r7, #6]
 800b736:	1e5a      	subs	r2, r3, #1
 800b738:	80fa      	strh	r2, [r7, #6]
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d1f2      	bne.n	800b724 <UTIL_MEM_cpy_8+0x18>
    }
}
 800b73e:	bf00      	nop
 800b740:	bf00      	nop
 800b742:	371c      	adds	r7, #28
 800b744:	46bd      	mov	sp, r7
 800b746:	bc80      	pop	{r7}
 800b748:	4770      	bx	lr

0800b74a <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 800b74a:	b480      	push	{r7}
 800b74c:	b085      	sub	sp, #20
 800b74e:	af00      	add	r7, sp, #0
 800b750:	6078      	str	r0, [r7, #4]
 800b752:	460b      	mov	r3, r1
 800b754:	70fb      	strb	r3, [r7, #3]
 800b756:	4613      	mov	r3, r2
 800b758:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	60fb      	str	r3, [r7, #12]
  while( size-- )
 800b75e:	e004      	b.n	800b76a <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	1c5a      	adds	r2, r3, #1
 800b764:	60fa      	str	r2, [r7, #12]
 800b766:	78fa      	ldrb	r2, [r7, #3]
 800b768:	701a      	strb	r2, [r3, #0]
  while( size-- )
 800b76a:	883b      	ldrh	r3, [r7, #0]
 800b76c:	1e5a      	subs	r2, r3, #1
 800b76e:	803a      	strh	r2, [r7, #0]
 800b770:	2b00      	cmp	r3, #0
 800b772:	d1f5      	bne.n	800b760 <UTIL_MEM_set_8+0x16>
  }
}
 800b774:	bf00      	nop
 800b776:	bf00      	nop
 800b778:	3714      	adds	r7, #20
 800b77a:	46bd      	mov	sp, r7
 800b77c:	bc80      	pop	{r7}
 800b77e:	4770      	bx	lr

0800b780 <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 800b780:	b580      	push	{r7, lr}
 800b782:	b084      	sub	sp, #16
 800b784:	af00      	add	r7, sp, #0
 800b786:	60f8      	str	r0, [r7, #12]
 800b788:	60b9      	str	r1, [r7, #8]
 800b78a:	603b      	str	r3, [r7, #0]
 800b78c:	4613      	mov	r3, r2
 800b78e:	71fb      	strb	r3, [r7, #7]
  if((TimerObject != NULL) && (Callback != NULL))
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	2b00      	cmp	r3, #0
 800b794:	d023      	beq.n	800b7de <UTIL_TIMER_Create+0x5e>
 800b796:	683b      	ldr	r3, [r7, #0]
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d020      	beq.n	800b7de <UTIL_TIMER_Create+0x5e>
  {
    TimerObject->Timestamp = 0U;
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	2200      	movs	r2, #0
 800b7a0:	601a      	str	r2, [r3, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 800b7a2:	4b11      	ldr	r3, [pc, #68]	; (800b7e8 <UTIL_TIMER_Create+0x68>)
 800b7a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7a6:	68b8      	ldr	r0, [r7, #8]
 800b7a8:	4798      	blx	r3
 800b7aa:	4602      	mov	r2, r0
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	605a      	str	r2, [r3, #4]
    TimerObject->IsPending = 0U;
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	2200      	movs	r2, #0
 800b7b4:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 0U;
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	2200      	movs	r2, #0
 800b7ba:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	2200      	movs	r2, #0
 800b7c0:	729a      	strb	r2, [r3, #10]
    TimerObject->Callback = Callback;
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	683a      	ldr	r2, [r7, #0]
 800b7c6:	60da      	str	r2, [r3, #12]
    TimerObject->argument = Argument;
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	69ba      	ldr	r2, [r7, #24]
 800b7cc:	611a      	str	r2, [r3, #16]
    TimerObject->Mode = Mode;
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	79fa      	ldrb	r2, [r7, #7]
 800b7d2:	72da      	strb	r2, [r3, #11]
    TimerObject->Next = NULL;
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	2200      	movs	r2, #0
 800b7d8:	615a      	str	r2, [r3, #20]
    return UTIL_TIMER_OK;
 800b7da:	2300      	movs	r3, #0
 800b7dc:	e000      	b.n	800b7e0 <UTIL_TIMER_Create+0x60>
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 800b7de:	2301      	movs	r3, #1
  }
}
 800b7e0:	4618      	mov	r0, r3
 800b7e2:	3710      	adds	r7, #16
 800b7e4:	46bd      	mov	sp, r7
 800b7e6:	bd80      	pop	{r7, pc}
 800b7e8:	0800ced8 	.word	0x0800ced8

0800b7ec <UTIL_TIMER_Start>:

UTIL_TIMER_Status_t UTIL_TIMER_Start( UTIL_TIMER_Object_t *TimerObject)
{
 800b7ec:	b580      	push	{r7, lr}
 800b7ee:	b08a      	sub	sp, #40	; 0x28
 800b7f0:	af00      	add	r7, sp, #0
 800b7f2:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 800b7f4:	2300      	movs	r3, #0
 800b7f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t elapsedTime;
  uint32_t minValue;
  uint32_t ticks;
    
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d056      	beq.n	800b8ae <UTIL_TIMER_Start+0xc2>
 800b800:	6878      	ldr	r0, [r7, #4]
 800b802:	f000 f929 	bl	800ba58 <TimerExists>
 800b806:	4603      	mov	r3, r0
 800b808:	f083 0301 	eor.w	r3, r3, #1
 800b80c:	b2db      	uxtb	r3, r3
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d04d      	beq.n	800b8ae <UTIL_TIMER_Start+0xc2>
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	7a5b      	ldrb	r3, [r3, #9]
 800b816:	2b00      	cmp	r3, #0
 800b818:	d149      	bne.n	800b8ae <UTIL_TIMER_Start+0xc2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b81a:	f3ef 8310 	mrs	r3, PRIMASK
 800b81e:	613b      	str	r3, [r7, #16]
  return(result);
 800b820:	693b      	ldr	r3, [r7, #16]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 800b822:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800b824:	b672      	cpsid	i
}
 800b826:	bf00      	nop
    ticks = TimerObject->ReloadValue;
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	685b      	ldr	r3, [r3, #4]
 800b82c:	623b      	str	r3, [r7, #32]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 800b82e:	4b24      	ldr	r3, [pc, #144]	; (800b8c0 <UTIL_TIMER_Start+0xd4>)
 800b830:	6a1b      	ldr	r3, [r3, #32]
 800b832:	4798      	blx	r3
 800b834:	61b8      	str	r0, [r7, #24]
    
    if( ticks < minValue )
 800b836:	6a3a      	ldr	r2, [r7, #32]
 800b838:	69bb      	ldr	r3, [r7, #24]
 800b83a:	429a      	cmp	r2, r3
 800b83c:	d201      	bcs.n	800b842 <UTIL_TIMER_Start+0x56>
    {
      ticks = minValue;
 800b83e:	69bb      	ldr	r3, [r7, #24]
 800b840:	623b      	str	r3, [r7, #32]
    }
    
    TimerObject->Timestamp = ticks;
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	6a3a      	ldr	r2, [r7, #32]
 800b846:	601a      	str	r2, [r3, #0]
    TimerObject->IsPending = 0U;
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	2200      	movs	r2, #0
 800b84c:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 1U;
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	2201      	movs	r2, #1
 800b852:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	2200      	movs	r2, #0
 800b858:	729a      	strb	r2, [r3, #10]
    if( TimerListHead == NULL )
 800b85a:	4b1a      	ldr	r3, [pc, #104]	; (800b8c4 <UTIL_TIMER_Start+0xd8>)
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d106      	bne.n	800b870 <UTIL_TIMER_Start+0x84>
    {
      UTIL_TimerDriver.SetTimerContext();
 800b862:	4b17      	ldr	r3, [pc, #92]	; (800b8c0 <UTIL_TIMER_Start+0xd4>)
 800b864:	691b      	ldr	r3, [r3, #16]
 800b866:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 800b868:	6878      	ldr	r0, [r7, #4]
 800b86a:	f000 f96b 	bl	800bb44 <TimerInsertNewHeadTimer>
 800b86e:	e017      	b.n	800b8a0 <UTIL_TIMER_Start+0xb4>
    }
    else 
    {
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 800b870:	4b13      	ldr	r3, [pc, #76]	; (800b8c0 <UTIL_TIMER_Start+0xd4>)
 800b872:	699b      	ldr	r3, [r3, #24]
 800b874:	4798      	blx	r3
 800b876:	6178      	str	r0, [r7, #20]
      TimerObject->Timestamp += elapsedTime;
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	681a      	ldr	r2, [r3, #0]
 800b87c:	697b      	ldr	r3, [r7, #20]
 800b87e:	441a      	add	r2, r3
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	601a      	str	r2, [r3, #0]
      
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	681a      	ldr	r2, [r3, #0]
 800b888:	4b0e      	ldr	r3, [pc, #56]	; (800b8c4 <UTIL_TIMER_Start+0xd8>)
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	429a      	cmp	r2, r3
 800b890:	d203      	bcs.n	800b89a <UTIL_TIMER_Start+0xae>
      {
        TimerInsertNewHeadTimer( TimerObject);
 800b892:	6878      	ldr	r0, [r7, #4]
 800b894:	f000 f956 	bl	800bb44 <TimerInsertNewHeadTimer>
 800b898:	e002      	b.n	800b8a0 <UTIL_TIMER_Start+0xb4>
      }
      else
      {
        TimerInsertTimer( TimerObject);
 800b89a:	6878      	ldr	r0, [r7, #4]
 800b89c:	f000 f922 	bl	800bae4 <TimerInsertTimer>
 800b8a0:	69fb      	ldr	r3, [r7, #28]
 800b8a2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	f383 8810 	msr	PRIMASK, r3
}
 800b8aa:	bf00      	nop
  {
 800b8ac:	e002      	b.n	800b8b4 <UTIL_TIMER_Start+0xc8>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret =  UTIL_TIMER_INVALID_PARAM;
 800b8ae:	2301      	movs	r3, #1
 800b8b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return ret;
 800b8b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800b8b8:	4618      	mov	r0, r3
 800b8ba:	3728      	adds	r7, #40	; 0x28
 800b8bc:	46bd      	mov	sp, r7
 800b8be:	bd80      	pop	{r7, pc}
 800b8c0:	0800ced8 	.word	0x0800ced8
 800b8c4:	20000b1c 	.word	0x20000b1c

0800b8c8 <UTIL_TIMER_Stop>:
  }
  return ret;
}

UTIL_TIMER_Status_t UTIL_TIMER_Stop( UTIL_TIMER_Object_t *TimerObject )
{
 800b8c8:	b580      	push	{r7, lr}
 800b8ca:	b088      	sub	sp, #32
 800b8cc:	af00      	add	r7, sp, #0
 800b8ce:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 800b8d0:	2300      	movs	r3, #0
 800b8d2:	77fb      	strb	r3, [r7, #31]

  if (NULL != TimerObject)
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d05b      	beq.n	800b992 <UTIL_TIMER_Stop+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b8da:	f3ef 8310 	mrs	r3, PRIMASK
 800b8de:	60fb      	str	r3, [r7, #12]
  return(result);
 800b8e0:	68fb      	ldr	r3, [r7, #12]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 800b8e2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800b8e4:	b672      	cpsid	i
}
 800b8e6:	bf00      	nop
    UTIL_TIMER_Object_t* prev = TimerListHead;
 800b8e8:	4b2d      	ldr	r3, [pc, #180]	; (800b9a0 <UTIL_TIMER_Stop+0xd8>)
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	61bb      	str	r3, [r7, #24]
    UTIL_TIMER_Object_t* cur = TimerListHead;
 800b8ee:	4b2c      	ldr	r3, [pc, #176]	; (800b9a0 <UTIL_TIMER_Stop+0xd8>)
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	617b      	str	r3, [r7, #20]
    TimerObject->IsReloadStopped = 1U;
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	2201      	movs	r2, #1
 800b8f8:	729a      	strb	r2, [r3, #10]
    
    /* List is empty or the Obj to stop does not exist  */
    if(NULL != TimerListHead)
 800b8fa:	4b29      	ldr	r3, [pc, #164]	; (800b9a0 <UTIL_TIMER_Stop+0xd8>)
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d041      	beq.n	800b986 <UTIL_TIMER_Stop+0xbe>
    {
      TimerObject->IsRunning = 0U;
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	2200      	movs	r2, #0
 800b906:	725a      	strb	r2, [r3, #9]
      
      if( TimerListHead == TimerObject ) /* Stop the Head */
 800b908:	4b25      	ldr	r3, [pc, #148]	; (800b9a0 <UTIL_TIMER_Stop+0xd8>)
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	687a      	ldr	r2, [r7, #4]
 800b90e:	429a      	cmp	r2, r3
 800b910:	d134      	bne.n	800b97c <UTIL_TIMER_Stop+0xb4>
      {
          TimerListHead->IsPending = 0;
 800b912:	4b23      	ldr	r3, [pc, #140]	; (800b9a0 <UTIL_TIMER_Stop+0xd8>)
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	2200      	movs	r2, #0
 800b918:	721a      	strb	r2, [r3, #8]
          if( TimerListHead->Next != NULL )
 800b91a:	4b21      	ldr	r3, [pc, #132]	; (800b9a0 <UTIL_TIMER_Stop+0xd8>)
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	695b      	ldr	r3, [r3, #20]
 800b920:	2b00      	cmp	r3, #0
 800b922:	d00a      	beq.n	800b93a <UTIL_TIMER_Stop+0x72>
          {
            TimerListHead = TimerListHead->Next;
 800b924:	4b1e      	ldr	r3, [pc, #120]	; (800b9a0 <UTIL_TIMER_Stop+0xd8>)
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	695b      	ldr	r3, [r3, #20]
 800b92a:	4a1d      	ldr	r2, [pc, #116]	; (800b9a0 <UTIL_TIMER_Stop+0xd8>)
 800b92c:	6013      	str	r3, [r2, #0]
            TimerSetTimeout( TimerListHead );
 800b92e:	4b1c      	ldr	r3, [pc, #112]	; (800b9a0 <UTIL_TIMER_Stop+0xd8>)
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	4618      	mov	r0, r3
 800b934:	f000 f8ac 	bl	800ba90 <TimerSetTimeout>
 800b938:	e023      	b.n	800b982 <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            UTIL_TimerDriver.StopTimerEvt( );
 800b93a:	4b1a      	ldr	r3, [pc, #104]	; (800b9a4 <UTIL_TIMER_Stop+0xdc>)
 800b93c:	68db      	ldr	r3, [r3, #12]
 800b93e:	4798      	blx	r3
            TimerListHead = NULL;
 800b940:	4b17      	ldr	r3, [pc, #92]	; (800b9a0 <UTIL_TIMER_Stop+0xd8>)
 800b942:	2200      	movs	r2, #0
 800b944:	601a      	str	r2, [r3, #0]
 800b946:	e01c      	b.n	800b982 <UTIL_TIMER_Stop+0xba>
      }
      else /* Stop an object within the list */
      {      
        while( cur != NULL )
        {
          if( cur == TimerObject )
 800b948:	697a      	ldr	r2, [r7, #20]
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	429a      	cmp	r2, r3
 800b94e:	d110      	bne.n	800b972 <UTIL_TIMER_Stop+0xaa>
          {
            if( cur->Next != NULL )
 800b950:	697b      	ldr	r3, [r7, #20]
 800b952:	695b      	ldr	r3, [r3, #20]
 800b954:	2b00      	cmp	r3, #0
 800b956:	d006      	beq.n	800b966 <UTIL_TIMER_Stop+0x9e>
            {
              cur = cur->Next;
 800b958:	697b      	ldr	r3, [r7, #20]
 800b95a:	695b      	ldr	r3, [r3, #20]
 800b95c:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 800b95e:	69bb      	ldr	r3, [r7, #24]
 800b960:	697a      	ldr	r2, [r7, #20]
 800b962:	615a      	str	r2, [r3, #20]
            else
            {
              cur = NULL;
              prev->Next = cur;
            }
            break;
 800b964:	e00d      	b.n	800b982 <UTIL_TIMER_Stop+0xba>
              cur = NULL;
 800b966:	2300      	movs	r3, #0
 800b968:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 800b96a:	69bb      	ldr	r3, [r7, #24]
 800b96c:	697a      	ldr	r2, [r7, #20]
 800b96e:	615a      	str	r2, [r3, #20]
            break;
 800b970:	e007      	b.n	800b982 <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            prev = cur;
 800b972:	697b      	ldr	r3, [r7, #20]
 800b974:	61bb      	str	r3, [r7, #24]
            cur = cur->Next;
 800b976:	697b      	ldr	r3, [r7, #20]
 800b978:	695b      	ldr	r3, [r3, #20]
 800b97a:	617b      	str	r3, [r7, #20]
        while( cur != NULL )
 800b97c:	697b      	ldr	r3, [r7, #20]
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d1e2      	bne.n	800b948 <UTIL_TIMER_Stop+0x80>
          }
        }   
      }
      ret = UTIL_TIMER_OK;
 800b982:	2300      	movs	r3, #0
 800b984:	77fb      	strb	r3, [r7, #31]
 800b986:	693b      	ldr	r3, [r7, #16]
 800b988:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b98a:	68bb      	ldr	r3, [r7, #8]
 800b98c:	f383 8810 	msr	PRIMASK, r3
}
 800b990:	e001      	b.n	800b996 <UTIL_TIMER_Stop+0xce>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret = UTIL_TIMER_INVALID_PARAM;
 800b992:	2301      	movs	r3, #1
 800b994:	77fb      	strb	r3, [r7, #31]
  }
  return ret;
 800b996:	7ffb      	ldrb	r3, [r7, #31]
}
 800b998:	4618      	mov	r0, r3
 800b99a:	3720      	adds	r7, #32
 800b99c:	46bd      	mov	sp, r7
 800b99e:	bd80      	pop	{r7, pc}
 800b9a0:	20000b1c 	.word	0x20000b1c
 800b9a4:	0800ced8 	.word	0x0800ced8

0800b9a8 <UTIL_TIMER_SetPeriod>:

UTIL_TIMER_Status_t UTIL_TIMER_SetPeriod(UTIL_TIMER_Object_t *TimerObject, uint32_t NewPeriodValue)
{
 800b9a8:	b580      	push	{r7, lr}
 800b9aa:	b084      	sub	sp, #16
 800b9ac:	af00      	add	r7, sp, #0
 800b9ae:	6078      	str	r0, [r7, #4]
 800b9b0:	6039      	str	r1, [r7, #0]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 800b9b2:	2300      	movs	r3, #0
 800b9b4:	73fb      	strb	r3, [r7, #15]
  
  if(NULL == TimerObject)
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d102      	bne.n	800b9c2 <UTIL_TIMER_SetPeriod+0x1a>
  {
	  ret = UTIL_TIMER_INVALID_PARAM;
 800b9bc:	2301      	movs	r3, #1
 800b9be:	73fb      	strb	r3, [r7, #15]
 800b9c0:	e014      	b.n	800b9ec <UTIL_TIMER_SetPeriod+0x44>
  }
  else
  {
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 800b9c2:	4b0d      	ldr	r3, [pc, #52]	; (800b9f8 <UTIL_TIMER_SetPeriod+0x50>)
 800b9c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9c6:	6838      	ldr	r0, [r7, #0]
 800b9c8:	4798      	blx	r3
 800b9ca:	4602      	mov	r2, r0
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	605a      	str	r2, [r3, #4]
    if(TimerExists(TimerObject))
 800b9d0:	6878      	ldr	r0, [r7, #4]
 800b9d2:	f000 f841 	bl	800ba58 <TimerExists>
 800b9d6:	4603      	mov	r3, r0
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d007      	beq.n	800b9ec <UTIL_TIMER_SetPeriod+0x44>
    {
      (void)UTIL_TIMER_Stop(TimerObject);
 800b9dc:	6878      	ldr	r0, [r7, #4]
 800b9de:	f7ff ff73 	bl	800b8c8 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 800b9e2:	6878      	ldr	r0, [r7, #4]
 800b9e4:	f7ff ff02 	bl	800b7ec <UTIL_TIMER_Start>
 800b9e8:	4603      	mov	r3, r0
 800b9ea:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 800b9ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9ee:	4618      	mov	r0, r3
 800b9f0:	3710      	adds	r7, #16
 800b9f2:	46bd      	mov	sp, r7
 800b9f4:	bd80      	pop	{r7, pc}
 800b9f6:	bf00      	nop
 800b9f8:	0800ced8 	.word	0x0800ced8

0800b9fc <UTIL_TIMER_GetCurrentTime>:
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 800b9fc:	b580      	push	{r7, lr}
 800b9fe:	b082      	sub	sp, #8
 800ba00:	af00      	add	r7, sp, #0
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 800ba02:	4b06      	ldr	r3, [pc, #24]	; (800ba1c <UTIL_TIMER_GetCurrentTime+0x20>)
 800ba04:	69db      	ldr	r3, [r3, #28]
 800ba06:	4798      	blx	r3
 800ba08:	6078      	str	r0, [r7, #4]
  return  UTIL_TimerDriver.Tick2ms(now);
 800ba0a:	4b04      	ldr	r3, [pc, #16]	; (800ba1c <UTIL_TIMER_GetCurrentTime+0x20>)
 800ba0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba0e:	6878      	ldr	r0, [r7, #4]
 800ba10:	4798      	blx	r3
 800ba12:	4603      	mov	r3, r0
}
 800ba14:	4618      	mov	r0, r3
 800ba16:	3708      	adds	r7, #8
 800ba18:	46bd      	mov	sp, r7
 800ba1a:	bd80      	pop	{r7, pc}
 800ba1c:	0800ced8 	.word	0x0800ced8

0800ba20 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 800ba20:	b580      	push	{r7, lr}
 800ba22:	b084      	sub	sp, #16
 800ba24:	af00      	add	r7, sp, #0
 800ba26:	6078      	str	r0, [r7, #4]
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 800ba28:	4b0a      	ldr	r3, [pc, #40]	; (800ba54 <UTIL_TIMER_GetElapsedTime+0x34>)
 800ba2a:	69db      	ldr	r3, [r3, #28]
 800ba2c:	4798      	blx	r3
 800ba2e:	60f8      	str	r0, [r7, #12]
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 800ba30:	4b08      	ldr	r3, [pc, #32]	; (800ba54 <UTIL_TIMER_GetElapsedTime+0x34>)
 800ba32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba34:	6878      	ldr	r0, [r7, #4]
 800ba36:	4798      	blx	r3
 800ba38:	60b8      	str	r0, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 800ba3a:	4b06      	ldr	r3, [pc, #24]	; (800ba54 <UTIL_TIMER_GetElapsedTime+0x34>)
 800ba3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba3e:	68f9      	ldr	r1, [r7, #12]
 800ba40:	68ba      	ldr	r2, [r7, #8]
 800ba42:	1a8a      	subs	r2, r1, r2
 800ba44:	4610      	mov	r0, r2
 800ba46:	4798      	blx	r3
 800ba48:	4603      	mov	r3, r0
}
 800ba4a:	4618      	mov	r0, r3
 800ba4c:	3710      	adds	r7, #16
 800ba4e:	46bd      	mov	sp, r7
 800ba50:	bd80      	pop	{r7, pc}
 800ba52:	bf00      	nop
 800ba54:	0800ced8 	.word	0x0800ced8

0800ba58 <TimerExists>:
 *
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
 800ba58:	b480      	push	{r7}
 800ba5a:	b085      	sub	sp, #20
 800ba5c:	af00      	add	r7, sp, #0
 800ba5e:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800ba60:	4b0a      	ldr	r3, [pc, #40]	; (800ba8c <TimerExists+0x34>)
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 800ba66:	e008      	b.n	800ba7a <TimerExists+0x22>
  {
    if( cur == TimerObject )
 800ba68:	68fa      	ldr	r2, [r7, #12]
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	429a      	cmp	r2, r3
 800ba6e:	d101      	bne.n	800ba74 <TimerExists+0x1c>
    {
      return true;
 800ba70:	2301      	movs	r3, #1
 800ba72:	e006      	b.n	800ba82 <TimerExists+0x2a>
    }
    cur = cur->Next;
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	695b      	ldr	r3, [r3, #20]
 800ba78:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d1f3      	bne.n	800ba68 <TimerExists+0x10>
  }
  return false;
 800ba80:	2300      	movs	r3, #0
}
 800ba82:	4618      	mov	r0, r3
 800ba84:	3714      	adds	r7, #20
 800ba86:	46bd      	mov	sp, r7
 800ba88:	bc80      	pop	{r7}
 800ba8a:	4770      	bx	lr
 800ba8c:	20000b1c 	.word	0x20000b1c

0800ba90 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 800ba90:	b590      	push	{r4, r7, lr}
 800ba92:	b085      	sub	sp, #20
 800ba94:	af00      	add	r7, sp, #0
 800ba96:	6078      	str	r0, [r7, #4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 800ba98:	4b11      	ldr	r3, [pc, #68]	; (800bae0 <TimerSetTimeout+0x50>)
 800ba9a:	6a1b      	ldr	r3, [r3, #32]
 800ba9c:	4798      	blx	r3
 800ba9e:	60f8      	str	r0, [r7, #12]
  TimerObject->IsPending = 1;
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	2201      	movs	r2, #1
 800baa4:	721a      	strb	r2, [r3, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	681c      	ldr	r4, [r3, #0]
 800baaa:	4b0d      	ldr	r3, [pc, #52]	; (800bae0 <TimerSetTimeout+0x50>)
 800baac:	699b      	ldr	r3, [r3, #24]
 800baae:	4798      	blx	r3
 800bab0:	4602      	mov	r2, r0
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	4413      	add	r3, r2
 800bab6:	429c      	cmp	r4, r3
 800bab8:	d207      	bcs.n	800baca <TimerSetTimeout+0x3a>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 800baba:	4b09      	ldr	r3, [pc, #36]	; (800bae0 <TimerSetTimeout+0x50>)
 800babc:	699b      	ldr	r3, [r3, #24]
 800babe:	4798      	blx	r3
 800bac0:	4602      	mov	r2, r0
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	441a      	add	r2, r3
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	601a      	str	r2, [r3, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 800baca:	4b05      	ldr	r3, [pc, #20]	; (800bae0 <TimerSetTimeout+0x50>)
 800bacc:	689b      	ldr	r3, [r3, #8]
 800bace:	687a      	ldr	r2, [r7, #4]
 800bad0:	6812      	ldr	r2, [r2, #0]
 800bad2:	4610      	mov	r0, r2
 800bad4:	4798      	blx	r3
}
 800bad6:	bf00      	nop
 800bad8:	3714      	adds	r7, #20
 800bada:	46bd      	mov	sp, r7
 800badc:	bd90      	pop	{r4, r7, pc}
 800bade:	bf00      	nop
 800bae0:	0800ced8 	.word	0x0800ced8

0800bae4 <TimerInsertTimer>:
 *     next timer to expire.
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
 800bae4:	b480      	push	{r7}
 800bae6:	b085      	sub	sp, #20
 800bae8:	af00      	add	r7, sp, #0
 800baea:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800baec:	4b14      	ldr	r3, [pc, #80]	; (800bb40 <TimerInsertTimer+0x5c>)
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	60fb      	str	r3, [r7, #12]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 800baf2:	4b13      	ldr	r3, [pc, #76]	; (800bb40 <TimerInsertTimer+0x5c>)
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	695b      	ldr	r3, [r3, #20]
 800baf8:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 800bafa:	e012      	b.n	800bb22 <TimerInsertTimer+0x3e>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	681a      	ldr	r2, [r3, #0]
 800bb00:	68bb      	ldr	r3, [r7, #8]
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	429a      	cmp	r2, r3
 800bb06:	d905      	bls.n	800bb14 <TimerInsertTimer+0x30>
    {
        cur = next;
 800bb08:	68bb      	ldr	r3, [r7, #8]
 800bb0a:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 800bb0c:	68bb      	ldr	r3, [r7, #8]
 800bb0e:	695b      	ldr	r3, [r3, #20]
 800bb10:	60bb      	str	r3, [r7, #8]
 800bb12:	e006      	b.n	800bb22 <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = TimerObject;
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	687a      	ldr	r2, [r7, #4]
 800bb18:	615a      	str	r2, [r3, #20]
        TimerObject->Next = next;
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	68ba      	ldr	r2, [r7, #8]
 800bb1e:	615a      	str	r2, [r3, #20]
        return;
 800bb20:	e009      	b.n	800bb36 <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	695b      	ldr	r3, [r3, #20]
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d1e8      	bne.n	800bafc <TimerInsertTimer+0x18>

    }
  }
  cur->Next = TimerObject;
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	687a      	ldr	r2, [r7, #4]
 800bb2e:	615a      	str	r2, [r3, #20]
  TimerObject->Next = NULL;
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	2200      	movs	r2, #0
 800bb34:	615a      	str	r2, [r3, #20]
}
 800bb36:	3714      	adds	r7, #20
 800bb38:	46bd      	mov	sp, r7
 800bb3a:	bc80      	pop	{r7}
 800bb3c:	4770      	bx	lr
 800bb3e:	bf00      	nop
 800bb40:	20000b1c 	.word	0x20000b1c

0800bb44 <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 800bb44:	b580      	push	{r7, lr}
 800bb46:	b084      	sub	sp, #16
 800bb48:	af00      	add	r7, sp, #0
 800bb4a:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800bb4c:	4b0b      	ldr	r3, [pc, #44]	; (800bb7c <TimerInsertNewHeadTimer+0x38>)
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d002      	beq.n	800bb5e <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsPending = 0;
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	2200      	movs	r2, #0
 800bb5c:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	68fa      	ldr	r2, [r7, #12]
 800bb62:	615a      	str	r2, [r3, #20]
  TimerListHead = TimerObject;
 800bb64:	4a05      	ldr	r2, [pc, #20]	; (800bb7c <TimerInsertNewHeadTimer+0x38>)
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	6013      	str	r3, [r2, #0]
  TimerSetTimeout( TimerListHead );
 800bb6a:	4b04      	ldr	r3, [pc, #16]	; (800bb7c <TimerInsertNewHeadTimer+0x38>)
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	4618      	mov	r0, r3
 800bb70:	f7ff ff8e 	bl	800ba90 <TimerSetTimeout>
}
 800bb74:	bf00      	nop
 800bb76:	3710      	adds	r7, #16
 800bb78:	46bd      	mov	sp, r7
 800bb7a:	bd80      	pop	{r7, pc}
 800bb7c:	20000b1c 	.word	0x20000b1c

0800bb80 <_vsniprintf_r>:
 800bb80:	b530      	push	{r4, r5, lr}
 800bb82:	4614      	mov	r4, r2
 800bb84:	2c00      	cmp	r4, #0
 800bb86:	b09b      	sub	sp, #108	; 0x6c
 800bb88:	4605      	mov	r5, r0
 800bb8a:	461a      	mov	r2, r3
 800bb8c:	da05      	bge.n	800bb9a <_vsniprintf_r+0x1a>
 800bb8e:	238b      	movs	r3, #139	; 0x8b
 800bb90:	6003      	str	r3, [r0, #0]
 800bb92:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bb96:	b01b      	add	sp, #108	; 0x6c
 800bb98:	bd30      	pop	{r4, r5, pc}
 800bb9a:	f44f 7302 	mov.w	r3, #520	; 0x208
 800bb9e:	f8ad 300c 	strh.w	r3, [sp, #12]
 800bba2:	bf14      	ite	ne
 800bba4:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800bba8:	4623      	moveq	r3, r4
 800bbaa:	9302      	str	r3, [sp, #8]
 800bbac:	9305      	str	r3, [sp, #20]
 800bbae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bbb2:	9100      	str	r1, [sp, #0]
 800bbb4:	9104      	str	r1, [sp, #16]
 800bbb6:	f8ad 300e 	strh.w	r3, [sp, #14]
 800bbba:	4669      	mov	r1, sp
 800bbbc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800bbbe:	f000 f8b5 	bl	800bd2c <_svfiprintf_r>
 800bbc2:	1c43      	adds	r3, r0, #1
 800bbc4:	bfbc      	itt	lt
 800bbc6:	238b      	movlt	r3, #139	; 0x8b
 800bbc8:	602b      	strlt	r3, [r5, #0]
 800bbca:	2c00      	cmp	r4, #0
 800bbcc:	d0e3      	beq.n	800bb96 <_vsniprintf_r+0x16>
 800bbce:	9b00      	ldr	r3, [sp, #0]
 800bbd0:	2200      	movs	r2, #0
 800bbd2:	701a      	strb	r2, [r3, #0]
 800bbd4:	e7df      	b.n	800bb96 <_vsniprintf_r+0x16>
	...

0800bbd8 <vsniprintf>:
 800bbd8:	b507      	push	{r0, r1, r2, lr}
 800bbda:	9300      	str	r3, [sp, #0]
 800bbdc:	4613      	mov	r3, r2
 800bbde:	460a      	mov	r2, r1
 800bbe0:	4601      	mov	r1, r0
 800bbe2:	4803      	ldr	r0, [pc, #12]	; (800bbf0 <vsniprintf+0x18>)
 800bbe4:	6800      	ldr	r0, [r0, #0]
 800bbe6:	f7ff ffcb 	bl	800bb80 <_vsniprintf_r>
 800bbea:	b003      	add	sp, #12
 800bbec:	f85d fb04 	ldr.w	pc, [sp], #4
 800bbf0:	20000064 	.word	0x20000064

0800bbf4 <memset>:
 800bbf4:	4402      	add	r2, r0
 800bbf6:	4603      	mov	r3, r0
 800bbf8:	4293      	cmp	r3, r2
 800bbfa:	d100      	bne.n	800bbfe <memset+0xa>
 800bbfc:	4770      	bx	lr
 800bbfe:	f803 1b01 	strb.w	r1, [r3], #1
 800bc02:	e7f9      	b.n	800bbf8 <memset+0x4>

0800bc04 <__errno>:
 800bc04:	4b01      	ldr	r3, [pc, #4]	; (800bc0c <__errno+0x8>)
 800bc06:	6818      	ldr	r0, [r3, #0]
 800bc08:	4770      	bx	lr
 800bc0a:	bf00      	nop
 800bc0c:	20000064 	.word	0x20000064

0800bc10 <__libc_init_array>:
 800bc10:	b570      	push	{r4, r5, r6, lr}
 800bc12:	4d0d      	ldr	r5, [pc, #52]	; (800bc48 <__libc_init_array+0x38>)
 800bc14:	4c0d      	ldr	r4, [pc, #52]	; (800bc4c <__libc_init_array+0x3c>)
 800bc16:	1b64      	subs	r4, r4, r5
 800bc18:	10a4      	asrs	r4, r4, #2
 800bc1a:	2600      	movs	r6, #0
 800bc1c:	42a6      	cmp	r6, r4
 800bc1e:	d109      	bne.n	800bc34 <__libc_init_array+0x24>
 800bc20:	4d0b      	ldr	r5, [pc, #44]	; (800bc50 <__libc_init_array+0x40>)
 800bc22:	4c0c      	ldr	r4, [pc, #48]	; (800bc54 <__libc_init_array+0x44>)
 800bc24:	f000 fc68 	bl	800c4f8 <_init>
 800bc28:	1b64      	subs	r4, r4, r5
 800bc2a:	10a4      	asrs	r4, r4, #2
 800bc2c:	2600      	movs	r6, #0
 800bc2e:	42a6      	cmp	r6, r4
 800bc30:	d105      	bne.n	800bc3e <__libc_init_array+0x2e>
 800bc32:	bd70      	pop	{r4, r5, r6, pc}
 800bc34:	f855 3b04 	ldr.w	r3, [r5], #4
 800bc38:	4798      	blx	r3
 800bc3a:	3601      	adds	r6, #1
 800bc3c:	e7ee      	b.n	800bc1c <__libc_init_array+0xc>
 800bc3e:	f855 3b04 	ldr.w	r3, [r5], #4
 800bc42:	4798      	blx	r3
 800bc44:	3601      	adds	r6, #1
 800bc46:	e7f2      	b.n	800bc2e <__libc_init_array+0x1e>
 800bc48:	0800d0a8 	.word	0x0800d0a8
 800bc4c:	0800d0a8 	.word	0x0800d0a8
 800bc50:	0800d0a8 	.word	0x0800d0a8
 800bc54:	0800d0ac 	.word	0x0800d0ac

0800bc58 <__retarget_lock_acquire_recursive>:
 800bc58:	4770      	bx	lr

0800bc5a <__retarget_lock_release_recursive>:
 800bc5a:	4770      	bx	lr

0800bc5c <memcpy>:
 800bc5c:	440a      	add	r2, r1
 800bc5e:	4291      	cmp	r1, r2
 800bc60:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800bc64:	d100      	bne.n	800bc68 <memcpy+0xc>
 800bc66:	4770      	bx	lr
 800bc68:	b510      	push	{r4, lr}
 800bc6a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bc6e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bc72:	4291      	cmp	r1, r2
 800bc74:	d1f9      	bne.n	800bc6a <memcpy+0xe>
 800bc76:	bd10      	pop	{r4, pc}

0800bc78 <__ssputs_r>:
 800bc78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc7c:	688e      	ldr	r6, [r1, #8]
 800bc7e:	461f      	mov	r7, r3
 800bc80:	42be      	cmp	r6, r7
 800bc82:	680b      	ldr	r3, [r1, #0]
 800bc84:	4682      	mov	sl, r0
 800bc86:	460c      	mov	r4, r1
 800bc88:	4690      	mov	r8, r2
 800bc8a:	d82c      	bhi.n	800bce6 <__ssputs_r+0x6e>
 800bc8c:	898a      	ldrh	r2, [r1, #12]
 800bc8e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bc92:	d026      	beq.n	800bce2 <__ssputs_r+0x6a>
 800bc94:	6965      	ldr	r5, [r4, #20]
 800bc96:	6909      	ldr	r1, [r1, #16]
 800bc98:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bc9c:	eba3 0901 	sub.w	r9, r3, r1
 800bca0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bca4:	1c7b      	adds	r3, r7, #1
 800bca6:	444b      	add	r3, r9
 800bca8:	106d      	asrs	r5, r5, #1
 800bcaa:	429d      	cmp	r5, r3
 800bcac:	bf38      	it	cc
 800bcae:	461d      	movcc	r5, r3
 800bcb0:	0553      	lsls	r3, r2, #21
 800bcb2:	d527      	bpl.n	800bd04 <__ssputs_r+0x8c>
 800bcb4:	4629      	mov	r1, r5
 800bcb6:	f000 f957 	bl	800bf68 <_malloc_r>
 800bcba:	4606      	mov	r6, r0
 800bcbc:	b360      	cbz	r0, 800bd18 <__ssputs_r+0xa0>
 800bcbe:	6921      	ldr	r1, [r4, #16]
 800bcc0:	464a      	mov	r2, r9
 800bcc2:	f7ff ffcb 	bl	800bc5c <memcpy>
 800bcc6:	89a3      	ldrh	r3, [r4, #12]
 800bcc8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bccc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bcd0:	81a3      	strh	r3, [r4, #12]
 800bcd2:	6126      	str	r6, [r4, #16]
 800bcd4:	6165      	str	r5, [r4, #20]
 800bcd6:	444e      	add	r6, r9
 800bcd8:	eba5 0509 	sub.w	r5, r5, r9
 800bcdc:	6026      	str	r6, [r4, #0]
 800bcde:	60a5      	str	r5, [r4, #8]
 800bce0:	463e      	mov	r6, r7
 800bce2:	42be      	cmp	r6, r7
 800bce4:	d900      	bls.n	800bce8 <__ssputs_r+0x70>
 800bce6:	463e      	mov	r6, r7
 800bce8:	6820      	ldr	r0, [r4, #0]
 800bcea:	4632      	mov	r2, r6
 800bcec:	4641      	mov	r1, r8
 800bcee:	f000 fb86 	bl	800c3fe <memmove>
 800bcf2:	68a3      	ldr	r3, [r4, #8]
 800bcf4:	1b9b      	subs	r3, r3, r6
 800bcf6:	60a3      	str	r3, [r4, #8]
 800bcf8:	6823      	ldr	r3, [r4, #0]
 800bcfa:	4433      	add	r3, r6
 800bcfc:	6023      	str	r3, [r4, #0]
 800bcfe:	2000      	movs	r0, #0
 800bd00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd04:	462a      	mov	r2, r5
 800bd06:	f000 fb4b 	bl	800c3a0 <_realloc_r>
 800bd0a:	4606      	mov	r6, r0
 800bd0c:	2800      	cmp	r0, #0
 800bd0e:	d1e0      	bne.n	800bcd2 <__ssputs_r+0x5a>
 800bd10:	6921      	ldr	r1, [r4, #16]
 800bd12:	4650      	mov	r0, sl
 800bd14:	f000 fb9e 	bl	800c454 <_free_r>
 800bd18:	230c      	movs	r3, #12
 800bd1a:	f8ca 3000 	str.w	r3, [sl]
 800bd1e:	89a3      	ldrh	r3, [r4, #12]
 800bd20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bd24:	81a3      	strh	r3, [r4, #12]
 800bd26:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bd2a:	e7e9      	b.n	800bd00 <__ssputs_r+0x88>

0800bd2c <_svfiprintf_r>:
 800bd2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd30:	4698      	mov	r8, r3
 800bd32:	898b      	ldrh	r3, [r1, #12]
 800bd34:	061b      	lsls	r3, r3, #24
 800bd36:	b09d      	sub	sp, #116	; 0x74
 800bd38:	4607      	mov	r7, r0
 800bd3a:	460d      	mov	r5, r1
 800bd3c:	4614      	mov	r4, r2
 800bd3e:	d50e      	bpl.n	800bd5e <_svfiprintf_r+0x32>
 800bd40:	690b      	ldr	r3, [r1, #16]
 800bd42:	b963      	cbnz	r3, 800bd5e <_svfiprintf_r+0x32>
 800bd44:	2140      	movs	r1, #64	; 0x40
 800bd46:	f000 f90f 	bl	800bf68 <_malloc_r>
 800bd4a:	6028      	str	r0, [r5, #0]
 800bd4c:	6128      	str	r0, [r5, #16]
 800bd4e:	b920      	cbnz	r0, 800bd5a <_svfiprintf_r+0x2e>
 800bd50:	230c      	movs	r3, #12
 800bd52:	603b      	str	r3, [r7, #0]
 800bd54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bd58:	e0d0      	b.n	800befc <_svfiprintf_r+0x1d0>
 800bd5a:	2340      	movs	r3, #64	; 0x40
 800bd5c:	616b      	str	r3, [r5, #20]
 800bd5e:	2300      	movs	r3, #0
 800bd60:	9309      	str	r3, [sp, #36]	; 0x24
 800bd62:	2320      	movs	r3, #32
 800bd64:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bd68:	f8cd 800c 	str.w	r8, [sp, #12]
 800bd6c:	2330      	movs	r3, #48	; 0x30
 800bd6e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800bf14 <_svfiprintf_r+0x1e8>
 800bd72:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bd76:	f04f 0901 	mov.w	r9, #1
 800bd7a:	4623      	mov	r3, r4
 800bd7c:	469a      	mov	sl, r3
 800bd7e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bd82:	b10a      	cbz	r2, 800bd88 <_svfiprintf_r+0x5c>
 800bd84:	2a25      	cmp	r2, #37	; 0x25
 800bd86:	d1f9      	bne.n	800bd7c <_svfiprintf_r+0x50>
 800bd88:	ebba 0b04 	subs.w	fp, sl, r4
 800bd8c:	d00b      	beq.n	800bda6 <_svfiprintf_r+0x7a>
 800bd8e:	465b      	mov	r3, fp
 800bd90:	4622      	mov	r2, r4
 800bd92:	4629      	mov	r1, r5
 800bd94:	4638      	mov	r0, r7
 800bd96:	f7ff ff6f 	bl	800bc78 <__ssputs_r>
 800bd9a:	3001      	adds	r0, #1
 800bd9c:	f000 80a9 	beq.w	800bef2 <_svfiprintf_r+0x1c6>
 800bda0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bda2:	445a      	add	r2, fp
 800bda4:	9209      	str	r2, [sp, #36]	; 0x24
 800bda6:	f89a 3000 	ldrb.w	r3, [sl]
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	f000 80a1 	beq.w	800bef2 <_svfiprintf_r+0x1c6>
 800bdb0:	2300      	movs	r3, #0
 800bdb2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bdb6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bdba:	f10a 0a01 	add.w	sl, sl, #1
 800bdbe:	9304      	str	r3, [sp, #16]
 800bdc0:	9307      	str	r3, [sp, #28]
 800bdc2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bdc6:	931a      	str	r3, [sp, #104]	; 0x68
 800bdc8:	4654      	mov	r4, sl
 800bdca:	2205      	movs	r2, #5
 800bdcc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bdd0:	4850      	ldr	r0, [pc, #320]	; (800bf14 <_svfiprintf_r+0x1e8>)
 800bdd2:	f7f4 f9d5 	bl	8000180 <memchr>
 800bdd6:	9a04      	ldr	r2, [sp, #16]
 800bdd8:	b9d8      	cbnz	r0, 800be12 <_svfiprintf_r+0xe6>
 800bdda:	06d0      	lsls	r0, r2, #27
 800bddc:	bf44      	itt	mi
 800bdde:	2320      	movmi	r3, #32
 800bde0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bde4:	0711      	lsls	r1, r2, #28
 800bde6:	bf44      	itt	mi
 800bde8:	232b      	movmi	r3, #43	; 0x2b
 800bdea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bdee:	f89a 3000 	ldrb.w	r3, [sl]
 800bdf2:	2b2a      	cmp	r3, #42	; 0x2a
 800bdf4:	d015      	beq.n	800be22 <_svfiprintf_r+0xf6>
 800bdf6:	9a07      	ldr	r2, [sp, #28]
 800bdf8:	4654      	mov	r4, sl
 800bdfa:	2000      	movs	r0, #0
 800bdfc:	f04f 0c0a 	mov.w	ip, #10
 800be00:	4621      	mov	r1, r4
 800be02:	f811 3b01 	ldrb.w	r3, [r1], #1
 800be06:	3b30      	subs	r3, #48	; 0x30
 800be08:	2b09      	cmp	r3, #9
 800be0a:	d94d      	bls.n	800bea8 <_svfiprintf_r+0x17c>
 800be0c:	b1b0      	cbz	r0, 800be3c <_svfiprintf_r+0x110>
 800be0e:	9207      	str	r2, [sp, #28]
 800be10:	e014      	b.n	800be3c <_svfiprintf_r+0x110>
 800be12:	eba0 0308 	sub.w	r3, r0, r8
 800be16:	fa09 f303 	lsl.w	r3, r9, r3
 800be1a:	4313      	orrs	r3, r2
 800be1c:	9304      	str	r3, [sp, #16]
 800be1e:	46a2      	mov	sl, r4
 800be20:	e7d2      	b.n	800bdc8 <_svfiprintf_r+0x9c>
 800be22:	9b03      	ldr	r3, [sp, #12]
 800be24:	1d19      	adds	r1, r3, #4
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	9103      	str	r1, [sp, #12]
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	bfbb      	ittet	lt
 800be2e:	425b      	neglt	r3, r3
 800be30:	f042 0202 	orrlt.w	r2, r2, #2
 800be34:	9307      	strge	r3, [sp, #28]
 800be36:	9307      	strlt	r3, [sp, #28]
 800be38:	bfb8      	it	lt
 800be3a:	9204      	strlt	r2, [sp, #16]
 800be3c:	7823      	ldrb	r3, [r4, #0]
 800be3e:	2b2e      	cmp	r3, #46	; 0x2e
 800be40:	d10c      	bne.n	800be5c <_svfiprintf_r+0x130>
 800be42:	7863      	ldrb	r3, [r4, #1]
 800be44:	2b2a      	cmp	r3, #42	; 0x2a
 800be46:	d134      	bne.n	800beb2 <_svfiprintf_r+0x186>
 800be48:	9b03      	ldr	r3, [sp, #12]
 800be4a:	1d1a      	adds	r2, r3, #4
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	9203      	str	r2, [sp, #12]
 800be50:	2b00      	cmp	r3, #0
 800be52:	bfb8      	it	lt
 800be54:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800be58:	3402      	adds	r4, #2
 800be5a:	9305      	str	r3, [sp, #20]
 800be5c:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800bf18 <_svfiprintf_r+0x1ec>
 800be60:	7821      	ldrb	r1, [r4, #0]
 800be62:	2203      	movs	r2, #3
 800be64:	4650      	mov	r0, sl
 800be66:	f7f4 f98b 	bl	8000180 <memchr>
 800be6a:	b138      	cbz	r0, 800be7c <_svfiprintf_r+0x150>
 800be6c:	9b04      	ldr	r3, [sp, #16]
 800be6e:	eba0 000a 	sub.w	r0, r0, sl
 800be72:	2240      	movs	r2, #64	; 0x40
 800be74:	4082      	lsls	r2, r0
 800be76:	4313      	orrs	r3, r2
 800be78:	3401      	adds	r4, #1
 800be7a:	9304      	str	r3, [sp, #16]
 800be7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be80:	4826      	ldr	r0, [pc, #152]	; (800bf1c <_svfiprintf_r+0x1f0>)
 800be82:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800be86:	2206      	movs	r2, #6
 800be88:	f7f4 f97a 	bl	8000180 <memchr>
 800be8c:	2800      	cmp	r0, #0
 800be8e:	d038      	beq.n	800bf02 <_svfiprintf_r+0x1d6>
 800be90:	4b23      	ldr	r3, [pc, #140]	; (800bf20 <_svfiprintf_r+0x1f4>)
 800be92:	bb1b      	cbnz	r3, 800bedc <_svfiprintf_r+0x1b0>
 800be94:	9b03      	ldr	r3, [sp, #12]
 800be96:	3307      	adds	r3, #7
 800be98:	f023 0307 	bic.w	r3, r3, #7
 800be9c:	3308      	adds	r3, #8
 800be9e:	9303      	str	r3, [sp, #12]
 800bea0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bea2:	4433      	add	r3, r6
 800bea4:	9309      	str	r3, [sp, #36]	; 0x24
 800bea6:	e768      	b.n	800bd7a <_svfiprintf_r+0x4e>
 800bea8:	fb0c 3202 	mla	r2, ip, r2, r3
 800beac:	460c      	mov	r4, r1
 800beae:	2001      	movs	r0, #1
 800beb0:	e7a6      	b.n	800be00 <_svfiprintf_r+0xd4>
 800beb2:	2300      	movs	r3, #0
 800beb4:	3401      	adds	r4, #1
 800beb6:	9305      	str	r3, [sp, #20]
 800beb8:	4619      	mov	r1, r3
 800beba:	f04f 0c0a 	mov.w	ip, #10
 800bebe:	4620      	mov	r0, r4
 800bec0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bec4:	3a30      	subs	r2, #48	; 0x30
 800bec6:	2a09      	cmp	r2, #9
 800bec8:	d903      	bls.n	800bed2 <_svfiprintf_r+0x1a6>
 800beca:	2b00      	cmp	r3, #0
 800becc:	d0c6      	beq.n	800be5c <_svfiprintf_r+0x130>
 800bece:	9105      	str	r1, [sp, #20]
 800bed0:	e7c4      	b.n	800be5c <_svfiprintf_r+0x130>
 800bed2:	fb0c 2101 	mla	r1, ip, r1, r2
 800bed6:	4604      	mov	r4, r0
 800bed8:	2301      	movs	r3, #1
 800beda:	e7f0      	b.n	800bebe <_svfiprintf_r+0x192>
 800bedc:	ab03      	add	r3, sp, #12
 800bede:	9300      	str	r3, [sp, #0]
 800bee0:	462a      	mov	r2, r5
 800bee2:	4b10      	ldr	r3, [pc, #64]	; (800bf24 <_svfiprintf_r+0x1f8>)
 800bee4:	a904      	add	r1, sp, #16
 800bee6:	4638      	mov	r0, r7
 800bee8:	f3af 8000 	nop.w
 800beec:	1c42      	adds	r2, r0, #1
 800beee:	4606      	mov	r6, r0
 800bef0:	d1d6      	bne.n	800bea0 <_svfiprintf_r+0x174>
 800bef2:	89ab      	ldrh	r3, [r5, #12]
 800bef4:	065b      	lsls	r3, r3, #25
 800bef6:	f53f af2d 	bmi.w	800bd54 <_svfiprintf_r+0x28>
 800befa:	9809      	ldr	r0, [sp, #36]	; 0x24
 800befc:	b01d      	add	sp, #116	; 0x74
 800befe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf02:	ab03      	add	r3, sp, #12
 800bf04:	9300      	str	r3, [sp, #0]
 800bf06:	462a      	mov	r2, r5
 800bf08:	4b06      	ldr	r3, [pc, #24]	; (800bf24 <_svfiprintf_r+0x1f8>)
 800bf0a:	a904      	add	r1, sp, #16
 800bf0c:	4638      	mov	r0, r7
 800bf0e:	f000 f919 	bl	800c144 <_printf_i>
 800bf12:	e7eb      	b.n	800beec <_svfiprintf_r+0x1c0>
 800bf14:	0800d06c 	.word	0x0800d06c
 800bf18:	0800d072 	.word	0x0800d072
 800bf1c:	0800d076 	.word	0x0800d076
 800bf20:	00000000 	.word	0x00000000
 800bf24:	0800bc79 	.word	0x0800bc79

0800bf28 <sbrk_aligned>:
 800bf28:	b570      	push	{r4, r5, r6, lr}
 800bf2a:	4e0e      	ldr	r6, [pc, #56]	; (800bf64 <sbrk_aligned+0x3c>)
 800bf2c:	460c      	mov	r4, r1
 800bf2e:	6831      	ldr	r1, [r6, #0]
 800bf30:	4605      	mov	r5, r0
 800bf32:	b911      	cbnz	r1, 800bf3a <sbrk_aligned+0x12>
 800bf34:	f000 fa7e 	bl	800c434 <_sbrk_r>
 800bf38:	6030      	str	r0, [r6, #0]
 800bf3a:	4621      	mov	r1, r4
 800bf3c:	4628      	mov	r0, r5
 800bf3e:	f000 fa79 	bl	800c434 <_sbrk_r>
 800bf42:	1c43      	adds	r3, r0, #1
 800bf44:	d00a      	beq.n	800bf5c <sbrk_aligned+0x34>
 800bf46:	1cc4      	adds	r4, r0, #3
 800bf48:	f024 0403 	bic.w	r4, r4, #3
 800bf4c:	42a0      	cmp	r0, r4
 800bf4e:	d007      	beq.n	800bf60 <sbrk_aligned+0x38>
 800bf50:	1a21      	subs	r1, r4, r0
 800bf52:	4628      	mov	r0, r5
 800bf54:	f000 fa6e 	bl	800c434 <_sbrk_r>
 800bf58:	3001      	adds	r0, #1
 800bf5a:	d101      	bne.n	800bf60 <sbrk_aligned+0x38>
 800bf5c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800bf60:	4620      	mov	r0, r4
 800bf62:	bd70      	pop	{r4, r5, r6, pc}
 800bf64:	20000c60 	.word	0x20000c60

0800bf68 <_malloc_r>:
 800bf68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bf6c:	1ccd      	adds	r5, r1, #3
 800bf6e:	f025 0503 	bic.w	r5, r5, #3
 800bf72:	3508      	adds	r5, #8
 800bf74:	2d0c      	cmp	r5, #12
 800bf76:	bf38      	it	cc
 800bf78:	250c      	movcc	r5, #12
 800bf7a:	2d00      	cmp	r5, #0
 800bf7c:	4607      	mov	r7, r0
 800bf7e:	db01      	blt.n	800bf84 <_malloc_r+0x1c>
 800bf80:	42a9      	cmp	r1, r5
 800bf82:	d905      	bls.n	800bf90 <_malloc_r+0x28>
 800bf84:	230c      	movs	r3, #12
 800bf86:	603b      	str	r3, [r7, #0]
 800bf88:	2600      	movs	r6, #0
 800bf8a:	4630      	mov	r0, r6
 800bf8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bf90:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c064 <_malloc_r+0xfc>
 800bf94:	f000 f9f8 	bl	800c388 <__malloc_lock>
 800bf98:	f8d8 3000 	ldr.w	r3, [r8]
 800bf9c:	461c      	mov	r4, r3
 800bf9e:	bb5c      	cbnz	r4, 800bff8 <_malloc_r+0x90>
 800bfa0:	4629      	mov	r1, r5
 800bfa2:	4638      	mov	r0, r7
 800bfa4:	f7ff ffc0 	bl	800bf28 <sbrk_aligned>
 800bfa8:	1c43      	adds	r3, r0, #1
 800bfaa:	4604      	mov	r4, r0
 800bfac:	d155      	bne.n	800c05a <_malloc_r+0xf2>
 800bfae:	f8d8 4000 	ldr.w	r4, [r8]
 800bfb2:	4626      	mov	r6, r4
 800bfb4:	2e00      	cmp	r6, #0
 800bfb6:	d145      	bne.n	800c044 <_malloc_r+0xdc>
 800bfb8:	2c00      	cmp	r4, #0
 800bfba:	d048      	beq.n	800c04e <_malloc_r+0xe6>
 800bfbc:	6823      	ldr	r3, [r4, #0]
 800bfbe:	4631      	mov	r1, r6
 800bfc0:	4638      	mov	r0, r7
 800bfc2:	eb04 0903 	add.w	r9, r4, r3
 800bfc6:	f000 fa35 	bl	800c434 <_sbrk_r>
 800bfca:	4581      	cmp	r9, r0
 800bfcc:	d13f      	bne.n	800c04e <_malloc_r+0xe6>
 800bfce:	6821      	ldr	r1, [r4, #0]
 800bfd0:	1a6d      	subs	r5, r5, r1
 800bfd2:	4629      	mov	r1, r5
 800bfd4:	4638      	mov	r0, r7
 800bfd6:	f7ff ffa7 	bl	800bf28 <sbrk_aligned>
 800bfda:	3001      	adds	r0, #1
 800bfdc:	d037      	beq.n	800c04e <_malloc_r+0xe6>
 800bfde:	6823      	ldr	r3, [r4, #0]
 800bfe0:	442b      	add	r3, r5
 800bfe2:	6023      	str	r3, [r4, #0]
 800bfe4:	f8d8 3000 	ldr.w	r3, [r8]
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d038      	beq.n	800c05e <_malloc_r+0xf6>
 800bfec:	685a      	ldr	r2, [r3, #4]
 800bfee:	42a2      	cmp	r2, r4
 800bff0:	d12b      	bne.n	800c04a <_malloc_r+0xe2>
 800bff2:	2200      	movs	r2, #0
 800bff4:	605a      	str	r2, [r3, #4]
 800bff6:	e00f      	b.n	800c018 <_malloc_r+0xb0>
 800bff8:	6822      	ldr	r2, [r4, #0]
 800bffa:	1b52      	subs	r2, r2, r5
 800bffc:	d41f      	bmi.n	800c03e <_malloc_r+0xd6>
 800bffe:	2a0b      	cmp	r2, #11
 800c000:	d917      	bls.n	800c032 <_malloc_r+0xca>
 800c002:	1961      	adds	r1, r4, r5
 800c004:	42a3      	cmp	r3, r4
 800c006:	6025      	str	r5, [r4, #0]
 800c008:	bf18      	it	ne
 800c00a:	6059      	strne	r1, [r3, #4]
 800c00c:	6863      	ldr	r3, [r4, #4]
 800c00e:	bf08      	it	eq
 800c010:	f8c8 1000 	streq.w	r1, [r8]
 800c014:	5162      	str	r2, [r4, r5]
 800c016:	604b      	str	r3, [r1, #4]
 800c018:	4638      	mov	r0, r7
 800c01a:	f104 060b 	add.w	r6, r4, #11
 800c01e:	f000 f9b9 	bl	800c394 <__malloc_unlock>
 800c022:	f026 0607 	bic.w	r6, r6, #7
 800c026:	1d23      	adds	r3, r4, #4
 800c028:	1af2      	subs	r2, r6, r3
 800c02a:	d0ae      	beq.n	800bf8a <_malloc_r+0x22>
 800c02c:	1b9b      	subs	r3, r3, r6
 800c02e:	50a3      	str	r3, [r4, r2]
 800c030:	e7ab      	b.n	800bf8a <_malloc_r+0x22>
 800c032:	42a3      	cmp	r3, r4
 800c034:	6862      	ldr	r2, [r4, #4]
 800c036:	d1dd      	bne.n	800bff4 <_malloc_r+0x8c>
 800c038:	f8c8 2000 	str.w	r2, [r8]
 800c03c:	e7ec      	b.n	800c018 <_malloc_r+0xb0>
 800c03e:	4623      	mov	r3, r4
 800c040:	6864      	ldr	r4, [r4, #4]
 800c042:	e7ac      	b.n	800bf9e <_malloc_r+0x36>
 800c044:	4634      	mov	r4, r6
 800c046:	6876      	ldr	r6, [r6, #4]
 800c048:	e7b4      	b.n	800bfb4 <_malloc_r+0x4c>
 800c04a:	4613      	mov	r3, r2
 800c04c:	e7cc      	b.n	800bfe8 <_malloc_r+0x80>
 800c04e:	230c      	movs	r3, #12
 800c050:	603b      	str	r3, [r7, #0]
 800c052:	4638      	mov	r0, r7
 800c054:	f000 f99e 	bl	800c394 <__malloc_unlock>
 800c058:	e797      	b.n	800bf8a <_malloc_r+0x22>
 800c05a:	6025      	str	r5, [r4, #0]
 800c05c:	e7dc      	b.n	800c018 <_malloc_r+0xb0>
 800c05e:	605b      	str	r3, [r3, #4]
 800c060:	deff      	udf	#255	; 0xff
 800c062:	bf00      	nop
 800c064:	20000c5c 	.word	0x20000c5c

0800c068 <_printf_common>:
 800c068:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c06c:	4616      	mov	r6, r2
 800c06e:	4699      	mov	r9, r3
 800c070:	688a      	ldr	r2, [r1, #8]
 800c072:	690b      	ldr	r3, [r1, #16]
 800c074:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c078:	4293      	cmp	r3, r2
 800c07a:	bfb8      	it	lt
 800c07c:	4613      	movlt	r3, r2
 800c07e:	6033      	str	r3, [r6, #0]
 800c080:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c084:	4607      	mov	r7, r0
 800c086:	460c      	mov	r4, r1
 800c088:	b10a      	cbz	r2, 800c08e <_printf_common+0x26>
 800c08a:	3301      	adds	r3, #1
 800c08c:	6033      	str	r3, [r6, #0]
 800c08e:	6823      	ldr	r3, [r4, #0]
 800c090:	0699      	lsls	r1, r3, #26
 800c092:	bf42      	ittt	mi
 800c094:	6833      	ldrmi	r3, [r6, #0]
 800c096:	3302      	addmi	r3, #2
 800c098:	6033      	strmi	r3, [r6, #0]
 800c09a:	6825      	ldr	r5, [r4, #0]
 800c09c:	f015 0506 	ands.w	r5, r5, #6
 800c0a0:	d106      	bne.n	800c0b0 <_printf_common+0x48>
 800c0a2:	f104 0a19 	add.w	sl, r4, #25
 800c0a6:	68e3      	ldr	r3, [r4, #12]
 800c0a8:	6832      	ldr	r2, [r6, #0]
 800c0aa:	1a9b      	subs	r3, r3, r2
 800c0ac:	42ab      	cmp	r3, r5
 800c0ae:	dc26      	bgt.n	800c0fe <_printf_common+0x96>
 800c0b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c0b4:	1e13      	subs	r3, r2, #0
 800c0b6:	6822      	ldr	r2, [r4, #0]
 800c0b8:	bf18      	it	ne
 800c0ba:	2301      	movne	r3, #1
 800c0bc:	0692      	lsls	r2, r2, #26
 800c0be:	d42b      	bmi.n	800c118 <_printf_common+0xb0>
 800c0c0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c0c4:	4649      	mov	r1, r9
 800c0c6:	4638      	mov	r0, r7
 800c0c8:	47c0      	blx	r8
 800c0ca:	3001      	adds	r0, #1
 800c0cc:	d01e      	beq.n	800c10c <_printf_common+0xa4>
 800c0ce:	6823      	ldr	r3, [r4, #0]
 800c0d0:	6922      	ldr	r2, [r4, #16]
 800c0d2:	f003 0306 	and.w	r3, r3, #6
 800c0d6:	2b04      	cmp	r3, #4
 800c0d8:	bf02      	ittt	eq
 800c0da:	68e5      	ldreq	r5, [r4, #12]
 800c0dc:	6833      	ldreq	r3, [r6, #0]
 800c0de:	1aed      	subeq	r5, r5, r3
 800c0e0:	68a3      	ldr	r3, [r4, #8]
 800c0e2:	bf0c      	ite	eq
 800c0e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c0e8:	2500      	movne	r5, #0
 800c0ea:	4293      	cmp	r3, r2
 800c0ec:	bfc4      	itt	gt
 800c0ee:	1a9b      	subgt	r3, r3, r2
 800c0f0:	18ed      	addgt	r5, r5, r3
 800c0f2:	2600      	movs	r6, #0
 800c0f4:	341a      	adds	r4, #26
 800c0f6:	42b5      	cmp	r5, r6
 800c0f8:	d11a      	bne.n	800c130 <_printf_common+0xc8>
 800c0fa:	2000      	movs	r0, #0
 800c0fc:	e008      	b.n	800c110 <_printf_common+0xa8>
 800c0fe:	2301      	movs	r3, #1
 800c100:	4652      	mov	r2, sl
 800c102:	4649      	mov	r1, r9
 800c104:	4638      	mov	r0, r7
 800c106:	47c0      	blx	r8
 800c108:	3001      	adds	r0, #1
 800c10a:	d103      	bne.n	800c114 <_printf_common+0xac>
 800c10c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c110:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c114:	3501      	adds	r5, #1
 800c116:	e7c6      	b.n	800c0a6 <_printf_common+0x3e>
 800c118:	18e1      	adds	r1, r4, r3
 800c11a:	1c5a      	adds	r2, r3, #1
 800c11c:	2030      	movs	r0, #48	; 0x30
 800c11e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c122:	4422      	add	r2, r4
 800c124:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c128:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c12c:	3302      	adds	r3, #2
 800c12e:	e7c7      	b.n	800c0c0 <_printf_common+0x58>
 800c130:	2301      	movs	r3, #1
 800c132:	4622      	mov	r2, r4
 800c134:	4649      	mov	r1, r9
 800c136:	4638      	mov	r0, r7
 800c138:	47c0      	blx	r8
 800c13a:	3001      	adds	r0, #1
 800c13c:	d0e6      	beq.n	800c10c <_printf_common+0xa4>
 800c13e:	3601      	adds	r6, #1
 800c140:	e7d9      	b.n	800c0f6 <_printf_common+0x8e>
	...

0800c144 <_printf_i>:
 800c144:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c148:	7e0f      	ldrb	r7, [r1, #24]
 800c14a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c14c:	2f78      	cmp	r7, #120	; 0x78
 800c14e:	4691      	mov	r9, r2
 800c150:	4680      	mov	r8, r0
 800c152:	460c      	mov	r4, r1
 800c154:	469a      	mov	sl, r3
 800c156:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c15a:	d807      	bhi.n	800c16c <_printf_i+0x28>
 800c15c:	2f62      	cmp	r7, #98	; 0x62
 800c15e:	d80a      	bhi.n	800c176 <_printf_i+0x32>
 800c160:	2f00      	cmp	r7, #0
 800c162:	f000 80d4 	beq.w	800c30e <_printf_i+0x1ca>
 800c166:	2f58      	cmp	r7, #88	; 0x58
 800c168:	f000 80c0 	beq.w	800c2ec <_printf_i+0x1a8>
 800c16c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c170:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c174:	e03a      	b.n	800c1ec <_printf_i+0xa8>
 800c176:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c17a:	2b15      	cmp	r3, #21
 800c17c:	d8f6      	bhi.n	800c16c <_printf_i+0x28>
 800c17e:	a101      	add	r1, pc, #4	; (adr r1, 800c184 <_printf_i+0x40>)
 800c180:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c184:	0800c1dd 	.word	0x0800c1dd
 800c188:	0800c1f1 	.word	0x0800c1f1
 800c18c:	0800c16d 	.word	0x0800c16d
 800c190:	0800c16d 	.word	0x0800c16d
 800c194:	0800c16d 	.word	0x0800c16d
 800c198:	0800c16d 	.word	0x0800c16d
 800c19c:	0800c1f1 	.word	0x0800c1f1
 800c1a0:	0800c16d 	.word	0x0800c16d
 800c1a4:	0800c16d 	.word	0x0800c16d
 800c1a8:	0800c16d 	.word	0x0800c16d
 800c1ac:	0800c16d 	.word	0x0800c16d
 800c1b0:	0800c2f5 	.word	0x0800c2f5
 800c1b4:	0800c21d 	.word	0x0800c21d
 800c1b8:	0800c2af 	.word	0x0800c2af
 800c1bc:	0800c16d 	.word	0x0800c16d
 800c1c0:	0800c16d 	.word	0x0800c16d
 800c1c4:	0800c317 	.word	0x0800c317
 800c1c8:	0800c16d 	.word	0x0800c16d
 800c1cc:	0800c21d 	.word	0x0800c21d
 800c1d0:	0800c16d 	.word	0x0800c16d
 800c1d4:	0800c16d 	.word	0x0800c16d
 800c1d8:	0800c2b7 	.word	0x0800c2b7
 800c1dc:	682b      	ldr	r3, [r5, #0]
 800c1de:	1d1a      	adds	r2, r3, #4
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	602a      	str	r2, [r5, #0]
 800c1e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c1e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c1ec:	2301      	movs	r3, #1
 800c1ee:	e09f      	b.n	800c330 <_printf_i+0x1ec>
 800c1f0:	6820      	ldr	r0, [r4, #0]
 800c1f2:	682b      	ldr	r3, [r5, #0]
 800c1f4:	0607      	lsls	r7, r0, #24
 800c1f6:	f103 0104 	add.w	r1, r3, #4
 800c1fa:	6029      	str	r1, [r5, #0]
 800c1fc:	d501      	bpl.n	800c202 <_printf_i+0xbe>
 800c1fe:	681e      	ldr	r6, [r3, #0]
 800c200:	e003      	b.n	800c20a <_printf_i+0xc6>
 800c202:	0646      	lsls	r6, r0, #25
 800c204:	d5fb      	bpl.n	800c1fe <_printf_i+0xba>
 800c206:	f9b3 6000 	ldrsh.w	r6, [r3]
 800c20a:	2e00      	cmp	r6, #0
 800c20c:	da03      	bge.n	800c216 <_printf_i+0xd2>
 800c20e:	232d      	movs	r3, #45	; 0x2d
 800c210:	4276      	negs	r6, r6
 800c212:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c216:	485a      	ldr	r0, [pc, #360]	; (800c380 <_printf_i+0x23c>)
 800c218:	230a      	movs	r3, #10
 800c21a:	e012      	b.n	800c242 <_printf_i+0xfe>
 800c21c:	682b      	ldr	r3, [r5, #0]
 800c21e:	6820      	ldr	r0, [r4, #0]
 800c220:	1d19      	adds	r1, r3, #4
 800c222:	6029      	str	r1, [r5, #0]
 800c224:	0605      	lsls	r5, r0, #24
 800c226:	d501      	bpl.n	800c22c <_printf_i+0xe8>
 800c228:	681e      	ldr	r6, [r3, #0]
 800c22a:	e002      	b.n	800c232 <_printf_i+0xee>
 800c22c:	0641      	lsls	r1, r0, #25
 800c22e:	d5fb      	bpl.n	800c228 <_printf_i+0xe4>
 800c230:	881e      	ldrh	r6, [r3, #0]
 800c232:	4853      	ldr	r0, [pc, #332]	; (800c380 <_printf_i+0x23c>)
 800c234:	2f6f      	cmp	r7, #111	; 0x6f
 800c236:	bf0c      	ite	eq
 800c238:	2308      	moveq	r3, #8
 800c23a:	230a      	movne	r3, #10
 800c23c:	2100      	movs	r1, #0
 800c23e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c242:	6865      	ldr	r5, [r4, #4]
 800c244:	60a5      	str	r5, [r4, #8]
 800c246:	2d00      	cmp	r5, #0
 800c248:	bfa2      	ittt	ge
 800c24a:	6821      	ldrge	r1, [r4, #0]
 800c24c:	f021 0104 	bicge.w	r1, r1, #4
 800c250:	6021      	strge	r1, [r4, #0]
 800c252:	b90e      	cbnz	r6, 800c258 <_printf_i+0x114>
 800c254:	2d00      	cmp	r5, #0
 800c256:	d04b      	beq.n	800c2f0 <_printf_i+0x1ac>
 800c258:	4615      	mov	r5, r2
 800c25a:	fbb6 f1f3 	udiv	r1, r6, r3
 800c25e:	fb03 6711 	mls	r7, r3, r1, r6
 800c262:	5dc7      	ldrb	r7, [r0, r7]
 800c264:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c268:	4637      	mov	r7, r6
 800c26a:	42bb      	cmp	r3, r7
 800c26c:	460e      	mov	r6, r1
 800c26e:	d9f4      	bls.n	800c25a <_printf_i+0x116>
 800c270:	2b08      	cmp	r3, #8
 800c272:	d10b      	bne.n	800c28c <_printf_i+0x148>
 800c274:	6823      	ldr	r3, [r4, #0]
 800c276:	07de      	lsls	r6, r3, #31
 800c278:	d508      	bpl.n	800c28c <_printf_i+0x148>
 800c27a:	6923      	ldr	r3, [r4, #16]
 800c27c:	6861      	ldr	r1, [r4, #4]
 800c27e:	4299      	cmp	r1, r3
 800c280:	bfde      	ittt	le
 800c282:	2330      	movle	r3, #48	; 0x30
 800c284:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c288:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800c28c:	1b52      	subs	r2, r2, r5
 800c28e:	6122      	str	r2, [r4, #16]
 800c290:	f8cd a000 	str.w	sl, [sp]
 800c294:	464b      	mov	r3, r9
 800c296:	aa03      	add	r2, sp, #12
 800c298:	4621      	mov	r1, r4
 800c29a:	4640      	mov	r0, r8
 800c29c:	f7ff fee4 	bl	800c068 <_printf_common>
 800c2a0:	3001      	adds	r0, #1
 800c2a2:	d14a      	bne.n	800c33a <_printf_i+0x1f6>
 800c2a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c2a8:	b004      	add	sp, #16
 800c2aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c2ae:	6823      	ldr	r3, [r4, #0]
 800c2b0:	f043 0320 	orr.w	r3, r3, #32
 800c2b4:	6023      	str	r3, [r4, #0]
 800c2b6:	4833      	ldr	r0, [pc, #204]	; (800c384 <_printf_i+0x240>)
 800c2b8:	2778      	movs	r7, #120	; 0x78
 800c2ba:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c2be:	6823      	ldr	r3, [r4, #0]
 800c2c0:	6829      	ldr	r1, [r5, #0]
 800c2c2:	061f      	lsls	r7, r3, #24
 800c2c4:	f851 6b04 	ldr.w	r6, [r1], #4
 800c2c8:	d402      	bmi.n	800c2d0 <_printf_i+0x18c>
 800c2ca:	065f      	lsls	r7, r3, #25
 800c2cc:	bf48      	it	mi
 800c2ce:	b2b6      	uxthmi	r6, r6
 800c2d0:	07df      	lsls	r7, r3, #31
 800c2d2:	bf48      	it	mi
 800c2d4:	f043 0320 	orrmi.w	r3, r3, #32
 800c2d8:	6029      	str	r1, [r5, #0]
 800c2da:	bf48      	it	mi
 800c2dc:	6023      	strmi	r3, [r4, #0]
 800c2de:	b91e      	cbnz	r6, 800c2e8 <_printf_i+0x1a4>
 800c2e0:	6823      	ldr	r3, [r4, #0]
 800c2e2:	f023 0320 	bic.w	r3, r3, #32
 800c2e6:	6023      	str	r3, [r4, #0]
 800c2e8:	2310      	movs	r3, #16
 800c2ea:	e7a7      	b.n	800c23c <_printf_i+0xf8>
 800c2ec:	4824      	ldr	r0, [pc, #144]	; (800c380 <_printf_i+0x23c>)
 800c2ee:	e7e4      	b.n	800c2ba <_printf_i+0x176>
 800c2f0:	4615      	mov	r5, r2
 800c2f2:	e7bd      	b.n	800c270 <_printf_i+0x12c>
 800c2f4:	682b      	ldr	r3, [r5, #0]
 800c2f6:	6826      	ldr	r6, [r4, #0]
 800c2f8:	6961      	ldr	r1, [r4, #20]
 800c2fa:	1d18      	adds	r0, r3, #4
 800c2fc:	6028      	str	r0, [r5, #0]
 800c2fe:	0635      	lsls	r5, r6, #24
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	d501      	bpl.n	800c308 <_printf_i+0x1c4>
 800c304:	6019      	str	r1, [r3, #0]
 800c306:	e002      	b.n	800c30e <_printf_i+0x1ca>
 800c308:	0670      	lsls	r0, r6, #25
 800c30a:	d5fb      	bpl.n	800c304 <_printf_i+0x1c0>
 800c30c:	8019      	strh	r1, [r3, #0]
 800c30e:	2300      	movs	r3, #0
 800c310:	6123      	str	r3, [r4, #16]
 800c312:	4615      	mov	r5, r2
 800c314:	e7bc      	b.n	800c290 <_printf_i+0x14c>
 800c316:	682b      	ldr	r3, [r5, #0]
 800c318:	1d1a      	adds	r2, r3, #4
 800c31a:	602a      	str	r2, [r5, #0]
 800c31c:	681d      	ldr	r5, [r3, #0]
 800c31e:	6862      	ldr	r2, [r4, #4]
 800c320:	2100      	movs	r1, #0
 800c322:	4628      	mov	r0, r5
 800c324:	f7f3 ff2c 	bl	8000180 <memchr>
 800c328:	b108      	cbz	r0, 800c32e <_printf_i+0x1ea>
 800c32a:	1b40      	subs	r0, r0, r5
 800c32c:	6060      	str	r0, [r4, #4]
 800c32e:	6863      	ldr	r3, [r4, #4]
 800c330:	6123      	str	r3, [r4, #16]
 800c332:	2300      	movs	r3, #0
 800c334:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c338:	e7aa      	b.n	800c290 <_printf_i+0x14c>
 800c33a:	6923      	ldr	r3, [r4, #16]
 800c33c:	462a      	mov	r2, r5
 800c33e:	4649      	mov	r1, r9
 800c340:	4640      	mov	r0, r8
 800c342:	47d0      	blx	sl
 800c344:	3001      	adds	r0, #1
 800c346:	d0ad      	beq.n	800c2a4 <_printf_i+0x160>
 800c348:	6823      	ldr	r3, [r4, #0]
 800c34a:	079b      	lsls	r3, r3, #30
 800c34c:	d413      	bmi.n	800c376 <_printf_i+0x232>
 800c34e:	68e0      	ldr	r0, [r4, #12]
 800c350:	9b03      	ldr	r3, [sp, #12]
 800c352:	4298      	cmp	r0, r3
 800c354:	bfb8      	it	lt
 800c356:	4618      	movlt	r0, r3
 800c358:	e7a6      	b.n	800c2a8 <_printf_i+0x164>
 800c35a:	2301      	movs	r3, #1
 800c35c:	4632      	mov	r2, r6
 800c35e:	4649      	mov	r1, r9
 800c360:	4640      	mov	r0, r8
 800c362:	47d0      	blx	sl
 800c364:	3001      	adds	r0, #1
 800c366:	d09d      	beq.n	800c2a4 <_printf_i+0x160>
 800c368:	3501      	adds	r5, #1
 800c36a:	68e3      	ldr	r3, [r4, #12]
 800c36c:	9903      	ldr	r1, [sp, #12]
 800c36e:	1a5b      	subs	r3, r3, r1
 800c370:	42ab      	cmp	r3, r5
 800c372:	dcf2      	bgt.n	800c35a <_printf_i+0x216>
 800c374:	e7eb      	b.n	800c34e <_printf_i+0x20a>
 800c376:	2500      	movs	r5, #0
 800c378:	f104 0619 	add.w	r6, r4, #25
 800c37c:	e7f5      	b.n	800c36a <_printf_i+0x226>
 800c37e:	bf00      	nop
 800c380:	0800d07d 	.word	0x0800d07d
 800c384:	0800d08e 	.word	0x0800d08e

0800c388 <__malloc_lock>:
 800c388:	4801      	ldr	r0, [pc, #4]	; (800c390 <__malloc_lock+0x8>)
 800c38a:	f7ff bc65 	b.w	800bc58 <__retarget_lock_acquire_recursive>
 800c38e:	bf00      	nop
 800c390:	20000c58 	.word	0x20000c58

0800c394 <__malloc_unlock>:
 800c394:	4801      	ldr	r0, [pc, #4]	; (800c39c <__malloc_unlock+0x8>)
 800c396:	f7ff bc60 	b.w	800bc5a <__retarget_lock_release_recursive>
 800c39a:	bf00      	nop
 800c39c:	20000c58 	.word	0x20000c58

0800c3a0 <_realloc_r>:
 800c3a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c3a4:	4680      	mov	r8, r0
 800c3a6:	4614      	mov	r4, r2
 800c3a8:	460e      	mov	r6, r1
 800c3aa:	b921      	cbnz	r1, 800c3b6 <_realloc_r+0x16>
 800c3ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c3b0:	4611      	mov	r1, r2
 800c3b2:	f7ff bdd9 	b.w	800bf68 <_malloc_r>
 800c3b6:	b92a      	cbnz	r2, 800c3c4 <_realloc_r+0x24>
 800c3b8:	f000 f84c 	bl	800c454 <_free_r>
 800c3bc:	4625      	mov	r5, r4
 800c3be:	4628      	mov	r0, r5
 800c3c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c3c4:	f000 f890 	bl	800c4e8 <_malloc_usable_size_r>
 800c3c8:	4284      	cmp	r4, r0
 800c3ca:	4607      	mov	r7, r0
 800c3cc:	d802      	bhi.n	800c3d4 <_realloc_r+0x34>
 800c3ce:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c3d2:	d812      	bhi.n	800c3fa <_realloc_r+0x5a>
 800c3d4:	4621      	mov	r1, r4
 800c3d6:	4640      	mov	r0, r8
 800c3d8:	f7ff fdc6 	bl	800bf68 <_malloc_r>
 800c3dc:	4605      	mov	r5, r0
 800c3de:	2800      	cmp	r0, #0
 800c3e0:	d0ed      	beq.n	800c3be <_realloc_r+0x1e>
 800c3e2:	42bc      	cmp	r4, r7
 800c3e4:	4622      	mov	r2, r4
 800c3e6:	4631      	mov	r1, r6
 800c3e8:	bf28      	it	cs
 800c3ea:	463a      	movcs	r2, r7
 800c3ec:	f7ff fc36 	bl	800bc5c <memcpy>
 800c3f0:	4631      	mov	r1, r6
 800c3f2:	4640      	mov	r0, r8
 800c3f4:	f000 f82e 	bl	800c454 <_free_r>
 800c3f8:	e7e1      	b.n	800c3be <_realloc_r+0x1e>
 800c3fa:	4635      	mov	r5, r6
 800c3fc:	e7df      	b.n	800c3be <_realloc_r+0x1e>

0800c3fe <memmove>:
 800c3fe:	4288      	cmp	r0, r1
 800c400:	b510      	push	{r4, lr}
 800c402:	eb01 0402 	add.w	r4, r1, r2
 800c406:	d902      	bls.n	800c40e <memmove+0x10>
 800c408:	4284      	cmp	r4, r0
 800c40a:	4623      	mov	r3, r4
 800c40c:	d807      	bhi.n	800c41e <memmove+0x20>
 800c40e:	1e43      	subs	r3, r0, #1
 800c410:	42a1      	cmp	r1, r4
 800c412:	d008      	beq.n	800c426 <memmove+0x28>
 800c414:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c418:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c41c:	e7f8      	b.n	800c410 <memmove+0x12>
 800c41e:	4402      	add	r2, r0
 800c420:	4601      	mov	r1, r0
 800c422:	428a      	cmp	r2, r1
 800c424:	d100      	bne.n	800c428 <memmove+0x2a>
 800c426:	bd10      	pop	{r4, pc}
 800c428:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c42c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c430:	e7f7      	b.n	800c422 <memmove+0x24>
	...

0800c434 <_sbrk_r>:
 800c434:	b538      	push	{r3, r4, r5, lr}
 800c436:	4d06      	ldr	r5, [pc, #24]	; (800c450 <_sbrk_r+0x1c>)
 800c438:	2300      	movs	r3, #0
 800c43a:	4604      	mov	r4, r0
 800c43c:	4608      	mov	r0, r1
 800c43e:	602b      	str	r3, [r5, #0]
 800c440:	f7f6 fb76 	bl	8002b30 <_sbrk>
 800c444:	1c43      	adds	r3, r0, #1
 800c446:	d102      	bne.n	800c44e <_sbrk_r+0x1a>
 800c448:	682b      	ldr	r3, [r5, #0]
 800c44a:	b103      	cbz	r3, 800c44e <_sbrk_r+0x1a>
 800c44c:	6023      	str	r3, [r4, #0]
 800c44e:	bd38      	pop	{r3, r4, r5, pc}
 800c450:	20000c64 	.word	0x20000c64

0800c454 <_free_r>:
 800c454:	b538      	push	{r3, r4, r5, lr}
 800c456:	4605      	mov	r5, r0
 800c458:	2900      	cmp	r1, #0
 800c45a:	d041      	beq.n	800c4e0 <_free_r+0x8c>
 800c45c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c460:	1f0c      	subs	r4, r1, #4
 800c462:	2b00      	cmp	r3, #0
 800c464:	bfb8      	it	lt
 800c466:	18e4      	addlt	r4, r4, r3
 800c468:	f7ff ff8e 	bl	800c388 <__malloc_lock>
 800c46c:	4a1d      	ldr	r2, [pc, #116]	; (800c4e4 <_free_r+0x90>)
 800c46e:	6813      	ldr	r3, [r2, #0]
 800c470:	b933      	cbnz	r3, 800c480 <_free_r+0x2c>
 800c472:	6063      	str	r3, [r4, #4]
 800c474:	6014      	str	r4, [r2, #0]
 800c476:	4628      	mov	r0, r5
 800c478:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c47c:	f7ff bf8a 	b.w	800c394 <__malloc_unlock>
 800c480:	42a3      	cmp	r3, r4
 800c482:	d908      	bls.n	800c496 <_free_r+0x42>
 800c484:	6820      	ldr	r0, [r4, #0]
 800c486:	1821      	adds	r1, r4, r0
 800c488:	428b      	cmp	r3, r1
 800c48a:	bf01      	itttt	eq
 800c48c:	6819      	ldreq	r1, [r3, #0]
 800c48e:	685b      	ldreq	r3, [r3, #4]
 800c490:	1809      	addeq	r1, r1, r0
 800c492:	6021      	streq	r1, [r4, #0]
 800c494:	e7ed      	b.n	800c472 <_free_r+0x1e>
 800c496:	461a      	mov	r2, r3
 800c498:	685b      	ldr	r3, [r3, #4]
 800c49a:	b10b      	cbz	r3, 800c4a0 <_free_r+0x4c>
 800c49c:	42a3      	cmp	r3, r4
 800c49e:	d9fa      	bls.n	800c496 <_free_r+0x42>
 800c4a0:	6811      	ldr	r1, [r2, #0]
 800c4a2:	1850      	adds	r0, r2, r1
 800c4a4:	42a0      	cmp	r0, r4
 800c4a6:	d10b      	bne.n	800c4c0 <_free_r+0x6c>
 800c4a8:	6820      	ldr	r0, [r4, #0]
 800c4aa:	4401      	add	r1, r0
 800c4ac:	1850      	adds	r0, r2, r1
 800c4ae:	4283      	cmp	r3, r0
 800c4b0:	6011      	str	r1, [r2, #0]
 800c4b2:	d1e0      	bne.n	800c476 <_free_r+0x22>
 800c4b4:	6818      	ldr	r0, [r3, #0]
 800c4b6:	685b      	ldr	r3, [r3, #4]
 800c4b8:	6053      	str	r3, [r2, #4]
 800c4ba:	4408      	add	r0, r1
 800c4bc:	6010      	str	r0, [r2, #0]
 800c4be:	e7da      	b.n	800c476 <_free_r+0x22>
 800c4c0:	d902      	bls.n	800c4c8 <_free_r+0x74>
 800c4c2:	230c      	movs	r3, #12
 800c4c4:	602b      	str	r3, [r5, #0]
 800c4c6:	e7d6      	b.n	800c476 <_free_r+0x22>
 800c4c8:	6820      	ldr	r0, [r4, #0]
 800c4ca:	1821      	adds	r1, r4, r0
 800c4cc:	428b      	cmp	r3, r1
 800c4ce:	bf04      	itt	eq
 800c4d0:	6819      	ldreq	r1, [r3, #0]
 800c4d2:	685b      	ldreq	r3, [r3, #4]
 800c4d4:	6063      	str	r3, [r4, #4]
 800c4d6:	bf04      	itt	eq
 800c4d8:	1809      	addeq	r1, r1, r0
 800c4da:	6021      	streq	r1, [r4, #0]
 800c4dc:	6054      	str	r4, [r2, #4]
 800c4de:	e7ca      	b.n	800c476 <_free_r+0x22>
 800c4e0:	bd38      	pop	{r3, r4, r5, pc}
 800c4e2:	bf00      	nop
 800c4e4:	20000c5c 	.word	0x20000c5c

0800c4e8 <_malloc_usable_size_r>:
 800c4e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c4ec:	1f18      	subs	r0, r3, #4
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	bfbc      	itt	lt
 800c4f2:	580b      	ldrlt	r3, [r1, r0]
 800c4f4:	18c0      	addlt	r0, r0, r3
 800c4f6:	4770      	bx	lr

0800c4f8 <_init>:
 800c4f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4fa:	bf00      	nop
 800c4fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c4fe:	bc08      	pop	{r3}
 800c500:	469e      	mov	lr, r3
 800c502:	4770      	bx	lr

0800c504 <_fini>:
 800c504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c506:	bf00      	nop
 800c508:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c50a:	bc08      	pop	{r3}
 800c50c:	469e      	mov	lr, r3
 800c50e:	4770      	bx	lr
