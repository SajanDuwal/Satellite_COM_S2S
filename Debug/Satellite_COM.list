
Satellite_COM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c4e4  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b98  0800c624  0800c624  0001c624  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d1bc  0800d1bc  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  0800d1bc  0800d1bc  0001d1bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d1c4  0800d1c4  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d1c4  0800d1c4  0001d1c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d1c8  0800d1c8  0001d1c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  0800d1cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c00  20000068  0800d234  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000c68  0800d234  00020c68  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020092  2**0
                  CONTENTS, READONLY
 13 .debug_info   00022389  00000000  00000000  000200d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004efd  00000000  00000000  0004245e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001f48  00000000  00000000  00047360  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000017e4  00000000  00000000  000492a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022524  00000000  00000000  0004aa8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000234d3  00000000  00000000  0006cfb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c4759  00000000  00000000  00090483  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000085c4  00000000  00000000  00154bdc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  0015d1a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000068 	.word	0x20000068
 800015c:	00000000 	.word	0x00000000
 8000160:	0800c60c 	.word	0x0800c60c

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000006c 	.word	0x2000006c
 800017c:	0800c60c 	.word	0x0800c60c

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000230:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000234:	f000 b970 	b.w	8000518 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9e08      	ldr	r6, [sp, #32]
 8000256:	460d      	mov	r5, r1
 8000258:	4604      	mov	r4, r0
 800025a:	460f      	mov	r7, r1
 800025c:	2b00      	cmp	r3, #0
 800025e:	d14a      	bne.n	80002f6 <__udivmoddi4+0xa6>
 8000260:	428a      	cmp	r2, r1
 8000262:	4694      	mov	ip, r2
 8000264:	d965      	bls.n	8000332 <__udivmoddi4+0xe2>
 8000266:	fab2 f382 	clz	r3, r2
 800026a:	b143      	cbz	r3, 800027e <__udivmoddi4+0x2e>
 800026c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000270:	f1c3 0220 	rsb	r2, r3, #32
 8000274:	409f      	lsls	r7, r3
 8000276:	fa20 f202 	lsr.w	r2, r0, r2
 800027a:	4317      	orrs	r7, r2
 800027c:	409c      	lsls	r4, r3
 800027e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000282:	fa1f f58c 	uxth.w	r5, ip
 8000286:	fbb7 f1fe 	udiv	r1, r7, lr
 800028a:	0c22      	lsrs	r2, r4, #16
 800028c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000290:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000294:	fb01 f005 	mul.w	r0, r1, r5
 8000298:	4290      	cmp	r0, r2
 800029a:	d90a      	bls.n	80002b2 <__udivmoddi4+0x62>
 800029c:	eb1c 0202 	adds.w	r2, ip, r2
 80002a0:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 80002a4:	f080 811b 	bcs.w	80004de <__udivmoddi4+0x28e>
 80002a8:	4290      	cmp	r0, r2
 80002aa:	f240 8118 	bls.w	80004de <__udivmoddi4+0x28e>
 80002ae:	3902      	subs	r1, #2
 80002b0:	4462      	add	r2, ip
 80002b2:	1a12      	subs	r2, r2, r0
 80002b4:	b2a4      	uxth	r4, r4
 80002b6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002ba:	fb0e 2210 	mls	r2, lr, r0, r2
 80002be:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002c2:	fb00 f505 	mul.w	r5, r0, r5
 80002c6:	42a5      	cmp	r5, r4
 80002c8:	d90a      	bls.n	80002e0 <__udivmoddi4+0x90>
 80002ca:	eb1c 0404 	adds.w	r4, ip, r4
 80002ce:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002d2:	f080 8106 	bcs.w	80004e2 <__udivmoddi4+0x292>
 80002d6:	42a5      	cmp	r5, r4
 80002d8:	f240 8103 	bls.w	80004e2 <__udivmoddi4+0x292>
 80002dc:	4464      	add	r4, ip
 80002de:	3802      	subs	r0, #2
 80002e0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002e4:	1b64      	subs	r4, r4, r5
 80002e6:	2100      	movs	r1, #0
 80002e8:	b11e      	cbz	r6, 80002f2 <__udivmoddi4+0xa2>
 80002ea:	40dc      	lsrs	r4, r3
 80002ec:	2300      	movs	r3, #0
 80002ee:	e9c6 4300 	strd	r4, r3, [r6]
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d908      	bls.n	800030c <__udivmoddi4+0xbc>
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	f000 80ec 	beq.w	80004d8 <__udivmoddi4+0x288>
 8000300:	2100      	movs	r1, #0
 8000302:	e9c6 0500 	strd	r0, r5, [r6]
 8000306:	4608      	mov	r0, r1
 8000308:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030c:	fab3 f183 	clz	r1, r3
 8000310:	2900      	cmp	r1, #0
 8000312:	d149      	bne.n	80003a8 <__udivmoddi4+0x158>
 8000314:	42ab      	cmp	r3, r5
 8000316:	d302      	bcc.n	800031e <__udivmoddi4+0xce>
 8000318:	4282      	cmp	r2, r0
 800031a:	f200 80f7 	bhi.w	800050c <__udivmoddi4+0x2bc>
 800031e:	1a84      	subs	r4, r0, r2
 8000320:	eb65 0203 	sbc.w	r2, r5, r3
 8000324:	2001      	movs	r0, #1
 8000326:	4617      	mov	r7, r2
 8000328:	2e00      	cmp	r6, #0
 800032a:	d0e2      	beq.n	80002f2 <__udivmoddi4+0xa2>
 800032c:	e9c6 4700 	strd	r4, r7, [r6]
 8000330:	e7df      	b.n	80002f2 <__udivmoddi4+0xa2>
 8000332:	b902      	cbnz	r2, 8000336 <__udivmoddi4+0xe6>
 8000334:	deff      	udf	#255	; 0xff
 8000336:	fab2 f382 	clz	r3, r2
 800033a:	2b00      	cmp	r3, #0
 800033c:	f040 808f 	bne.w	800045e <__udivmoddi4+0x20e>
 8000340:	1a8a      	subs	r2, r1, r2
 8000342:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000346:	fa1f fe8c 	uxth.w	lr, ip
 800034a:	2101      	movs	r1, #1
 800034c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000350:	fb07 2015 	mls	r0, r7, r5, r2
 8000354:	0c22      	lsrs	r2, r4, #16
 8000356:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800035a:	fb0e f005 	mul.w	r0, lr, r5
 800035e:	4290      	cmp	r0, r2
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x124>
 8000362:	eb1c 0202 	adds.w	r2, ip, r2
 8000366:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x122>
 800036c:	4290      	cmp	r0, r2
 800036e:	f200 80ca 	bhi.w	8000506 <__udivmoddi4+0x2b6>
 8000372:	4645      	mov	r5, r8
 8000374:	1a12      	subs	r2, r2, r0
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb2 f0f7 	udiv	r0, r2, r7
 800037c:	fb07 2210 	mls	r2, r7, r0, r2
 8000380:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000384:	fb0e fe00 	mul.w	lr, lr, r0
 8000388:	45a6      	cmp	lr, r4
 800038a:	d908      	bls.n	800039e <__udivmoddi4+0x14e>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000394:	d202      	bcs.n	800039c <__udivmoddi4+0x14c>
 8000396:	45a6      	cmp	lr, r4
 8000398:	f200 80ba 	bhi.w	8000510 <__udivmoddi4+0x2c0>
 800039c:	4610      	mov	r0, r2
 800039e:	eba4 040e 	sub.w	r4, r4, lr
 80003a2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003a6:	e79f      	b.n	80002e8 <__udivmoddi4+0x98>
 80003a8:	f1c1 0720 	rsb	r7, r1, #32
 80003ac:	408b      	lsls	r3, r1
 80003ae:	fa22 fc07 	lsr.w	ip, r2, r7
 80003b2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003b6:	fa05 f401 	lsl.w	r4, r5, r1
 80003ba:	fa20 f307 	lsr.w	r3, r0, r7
 80003be:	40fd      	lsrs	r5, r7
 80003c0:	4323      	orrs	r3, r4
 80003c2:	fa00 f901 	lsl.w	r9, r0, r1
 80003c6:	ea4f 401c 	mov.w	r0, ip, lsr #16
 80003ca:	fa1f fe8c 	uxth.w	lr, ip
 80003ce:	fbb5 f8f0 	udiv	r8, r5, r0
 80003d2:	0c1c      	lsrs	r4, r3, #16
 80003d4:	fb00 5518 	mls	r5, r0, r8, r5
 80003d8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003dc:	fb08 f50e 	mul.w	r5, r8, lr
 80003e0:	42a5      	cmp	r5, r4
 80003e2:	fa02 f201 	lsl.w	r2, r2, r1
 80003e6:	d90b      	bls.n	8000400 <__udivmoddi4+0x1b0>
 80003e8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ec:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003f0:	f080 8087 	bcs.w	8000502 <__udivmoddi4+0x2b2>
 80003f4:	42a5      	cmp	r5, r4
 80003f6:	f240 8084 	bls.w	8000502 <__udivmoddi4+0x2b2>
 80003fa:	f1a8 0802 	sub.w	r8, r8, #2
 80003fe:	4464      	add	r4, ip
 8000400:	1b64      	subs	r4, r4, r5
 8000402:	b29d      	uxth	r5, r3
 8000404:	fbb4 f3f0 	udiv	r3, r4, r0
 8000408:	fb00 4413 	mls	r4, r0, r3, r4
 800040c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000410:	fb03 fe0e 	mul.w	lr, r3, lr
 8000414:	45a6      	cmp	lr, r4
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x1da>
 8000418:	eb1c 0404 	adds.w	r4, ip, r4
 800041c:	f103 30ff 	add.w	r0, r3, #4294967295	; 0xffffffff
 8000420:	d26b      	bcs.n	80004fa <__udivmoddi4+0x2aa>
 8000422:	45a6      	cmp	lr, r4
 8000424:	d969      	bls.n	80004fa <__udivmoddi4+0x2aa>
 8000426:	3b02      	subs	r3, #2
 8000428:	4464      	add	r4, ip
 800042a:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 800042e:	fba0 8302 	umull	r8, r3, r0, r2
 8000432:	eba4 040e 	sub.w	r4, r4, lr
 8000436:	429c      	cmp	r4, r3
 8000438:	46c6      	mov	lr, r8
 800043a:	461d      	mov	r5, r3
 800043c:	d355      	bcc.n	80004ea <__udivmoddi4+0x29a>
 800043e:	d052      	beq.n	80004e6 <__udivmoddi4+0x296>
 8000440:	b156      	cbz	r6, 8000458 <__udivmoddi4+0x208>
 8000442:	ebb9 030e 	subs.w	r3, r9, lr
 8000446:	eb64 0405 	sbc.w	r4, r4, r5
 800044a:	fa04 f707 	lsl.w	r7, r4, r7
 800044e:	40cb      	lsrs	r3, r1
 8000450:	40cc      	lsrs	r4, r1
 8000452:	431f      	orrs	r7, r3
 8000454:	e9c6 7400 	strd	r7, r4, [r6]
 8000458:	2100      	movs	r1, #0
 800045a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045e:	f1c3 0120 	rsb	r1, r3, #32
 8000462:	fa02 fc03 	lsl.w	ip, r2, r3
 8000466:	fa20 f201 	lsr.w	r2, r0, r1
 800046a:	fa25 f101 	lsr.w	r1, r5, r1
 800046e:	409d      	lsls	r5, r3
 8000470:	432a      	orrs	r2, r5
 8000472:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000476:	fa1f fe8c 	uxth.w	lr, ip
 800047a:	fbb1 f0f7 	udiv	r0, r1, r7
 800047e:	fb07 1510 	mls	r5, r7, r0, r1
 8000482:	0c11      	lsrs	r1, r2, #16
 8000484:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000488:	fb00 f50e 	mul.w	r5, r0, lr
 800048c:	428d      	cmp	r5, r1
 800048e:	fa04 f403 	lsl.w	r4, r4, r3
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x256>
 8000494:	eb1c 0101 	adds.w	r1, ip, r1
 8000498:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800049c:	d22f      	bcs.n	80004fe <__udivmoddi4+0x2ae>
 800049e:	428d      	cmp	r5, r1
 80004a0:	d92d      	bls.n	80004fe <__udivmoddi4+0x2ae>
 80004a2:	3802      	subs	r0, #2
 80004a4:	4461      	add	r1, ip
 80004a6:	1b49      	subs	r1, r1, r5
 80004a8:	b292      	uxth	r2, r2
 80004aa:	fbb1 f5f7 	udiv	r5, r1, r7
 80004ae:	fb07 1115 	mls	r1, r7, r5, r1
 80004b2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b6:	fb05 f10e 	mul.w	r1, r5, lr
 80004ba:	4291      	cmp	r1, r2
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x280>
 80004be:	eb1c 0202 	adds.w	r2, ip, r2
 80004c2:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004c6:	d216      	bcs.n	80004f6 <__udivmoddi4+0x2a6>
 80004c8:	4291      	cmp	r1, r2
 80004ca:	d914      	bls.n	80004f6 <__udivmoddi4+0x2a6>
 80004cc:	3d02      	subs	r5, #2
 80004ce:	4462      	add	r2, ip
 80004d0:	1a52      	subs	r2, r2, r1
 80004d2:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d6:	e739      	b.n	800034c <__udivmoddi4+0xfc>
 80004d8:	4631      	mov	r1, r6
 80004da:	4630      	mov	r0, r6
 80004dc:	e709      	b.n	80002f2 <__udivmoddi4+0xa2>
 80004de:	4639      	mov	r1, r7
 80004e0:	e6e7      	b.n	80002b2 <__udivmoddi4+0x62>
 80004e2:	4610      	mov	r0, r2
 80004e4:	e6fc      	b.n	80002e0 <__udivmoddi4+0x90>
 80004e6:	45c1      	cmp	r9, r8
 80004e8:	d2aa      	bcs.n	8000440 <__udivmoddi4+0x1f0>
 80004ea:	ebb8 0e02 	subs.w	lr, r8, r2
 80004ee:	eb63 050c 	sbc.w	r5, r3, ip
 80004f2:	3801      	subs	r0, #1
 80004f4:	e7a4      	b.n	8000440 <__udivmoddi4+0x1f0>
 80004f6:	4645      	mov	r5, r8
 80004f8:	e7ea      	b.n	80004d0 <__udivmoddi4+0x280>
 80004fa:	4603      	mov	r3, r0
 80004fc:	e795      	b.n	800042a <__udivmoddi4+0x1da>
 80004fe:	4640      	mov	r0, r8
 8000500:	e7d1      	b.n	80004a6 <__udivmoddi4+0x256>
 8000502:	46d0      	mov	r8, sl
 8000504:	e77c      	b.n	8000400 <__udivmoddi4+0x1b0>
 8000506:	3d02      	subs	r5, #2
 8000508:	4462      	add	r2, ip
 800050a:	e733      	b.n	8000374 <__udivmoddi4+0x124>
 800050c:	4608      	mov	r0, r1
 800050e:	e70b      	b.n	8000328 <__udivmoddi4+0xd8>
 8000510:	4464      	add	r4, ip
 8000512:	3802      	subs	r0, #2
 8000514:	e743      	b.n	800039e <__udivmoddi4+0x14e>
 8000516:	bf00      	nop

08000518 <__aeabi_idiv0>:
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop

0800051c <updatePacket>:
uint8_t ax_buffer[150] = { 0 };
uint8_t ax_buff_stuffed[150] = { 0 };

uint8_t info_packet[INFO_LENGTH];

void updatePacket(uint8_t *OBC_Rx_buffer) {
 800051c:	b480      	push	{r7}
 800051e:	b087      	sub	sp, #28
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
	info_packet[0] = OBC_Rx_buffer[1];  	// Packet Type
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	785a      	ldrb	r2, [r3, #1]
 8000528:	4b14      	ldr	r3, [pc, #80]	; (800057c <updatePacket+0x60>)
 800052a:	701a      	strb	r2, [r3, #0]
	int j = 1;
 800052c:	2301      	movs	r3, #1
 800052e:	617b      	str	r3, [r7, #20]
	int k = 3;
 8000530:	2303      	movs	r3, #3
 8000532:	613b      	str	r3, [r7, #16]
	int len_of_payload = OBC_Rx_buffer[2];  // length of info_field
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	3302      	adds	r3, #2
 8000538:	781b      	ldrb	r3, [r3, #0]
 800053a:	60bb      	str	r3, [r7, #8]
//	myDebug("\nlen_of_payload: %d\r\n", len_of_payload);
	for (int i = 0; i < len_of_payload; i++) {
 800053c:	2300      	movs	r3, #0
 800053e:	60fb      	str	r3, [r7, #12]
 8000540:	e011      	b.n	8000566 <updatePacket+0x4a>
		info_packet[j] = OBC_Rx_buffer[k];
 8000542:	693b      	ldr	r3, [r7, #16]
 8000544:	687a      	ldr	r2, [r7, #4]
 8000546:	4413      	add	r3, r2
 8000548:	7819      	ldrb	r1, [r3, #0]
 800054a:	4a0c      	ldr	r2, [pc, #48]	; (800057c <updatePacket+0x60>)
 800054c:	697b      	ldr	r3, [r7, #20]
 800054e:	4413      	add	r3, r2
 8000550:	460a      	mov	r2, r1
 8000552:	701a      	strb	r2, [r3, #0]
		j++;
 8000554:	697b      	ldr	r3, [r7, #20]
 8000556:	3301      	adds	r3, #1
 8000558:	617b      	str	r3, [r7, #20]
		k++;
 800055a:	693b      	ldr	r3, [r7, #16]
 800055c:	3301      	adds	r3, #1
 800055e:	613b      	str	r3, [r7, #16]
	for (int i = 0; i < len_of_payload; i++) {
 8000560:	68fb      	ldr	r3, [r7, #12]
 8000562:	3301      	adds	r3, #1
 8000564:	60fb      	str	r3, [r7, #12]
 8000566:	68fa      	ldr	r2, [r7, #12]
 8000568:	68bb      	ldr	r3, [r7, #8]
 800056a:	429a      	cmp	r2, r3
 800056c:	dbe9      	blt.n	8000542 <updatePacket+0x26>
//	myDebug("info_packet: 0x%x\r\n", info_packet);
//	for (int i = 0; i < len_of_payload; i++) {
//		myDebug("%02x ", info_packet[i]);
//	}
//	myDebug("\r\n");
}
 800056e:	bf00      	nop
 8000570:	bf00      	nop
 8000572:	371c      	adds	r7, #28
 8000574:	46bd      	mov	sp, r7
 8000576:	bc80      	pop	{r7}
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop
 800057c:	200001b4 	.word	0x200001b4

08000580 <getHDLCPacket>:

void getHDLCPacket(uint8_t *data, uint8_t data_len) {
 8000580:	b580      	push	{r7, lr}
 8000582:	b086      	sub	sp, #24
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
 8000588:	460b      	mov	r3, r1
 800058a:	70fb      	strb	r3, [r7, #3]
//	for (int j = 0; j < data_len; j++) {
//		myDebug("%02x ", data[j]);
//	}
//	myDebug("\r\n");

	uint16_t crc = 0;
 800058c:	2300      	movs	r3, #0
 800058e:	81fb      	strh	r3, [r7, #14]
	crc = calculateCRC_CCITT_AX25(data, data_len);
 8000590:	78fb      	ldrb	r3, [r7, #3]
 8000592:	4619      	mov	r1, r3
 8000594:	6878      	ldr	r0, [r7, #4]
 8000596:	f000 f97d 	bl	8000894 <calculateCRC_CCITT_AX25>
 800059a:	4603      	mov	r3, r0
 800059c:	81fb      	strh	r3, [r7, #14]

	temp_tx_buffer[0] = 0x7e;
 800059e:	4b22      	ldr	r3, [pc, #136]	; (8000628 <getHDLCPacket+0xa8>)
 80005a0:	227e      	movs	r2, #126	; 0x7e
 80005a2:	701a      	strb	r2, [r3, #0]

	int i = 1;
 80005a4:	2301      	movs	r3, #1
 80005a6:	617b      	str	r3, [r7, #20]
	for (int k = 0; k < data_len; k++) {
 80005a8:	2300      	movs	r3, #0
 80005aa:	613b      	str	r3, [r7, #16]
 80005ac:	e00e      	b.n	80005cc <getHDLCPacket+0x4c>
		temp_tx_buffer[i] = data[k];
 80005ae:	693b      	ldr	r3, [r7, #16]
 80005b0:	687a      	ldr	r2, [r7, #4]
 80005b2:	4413      	add	r3, r2
 80005b4:	7819      	ldrb	r1, [r3, #0]
 80005b6:	4a1c      	ldr	r2, [pc, #112]	; (8000628 <getHDLCPacket+0xa8>)
 80005b8:	697b      	ldr	r3, [r7, #20]
 80005ba:	4413      	add	r3, r2
 80005bc:	460a      	mov	r2, r1
 80005be:	701a      	strb	r2, [r3, #0]
		i++;
 80005c0:	697b      	ldr	r3, [r7, #20]
 80005c2:	3301      	adds	r3, #1
 80005c4:	617b      	str	r3, [r7, #20]
	for (int k = 0; k < data_len; k++) {
 80005c6:	693b      	ldr	r3, [r7, #16]
 80005c8:	3301      	adds	r3, #1
 80005ca:	613b      	str	r3, [r7, #16]
 80005cc:	78fb      	ldrb	r3, [r7, #3]
 80005ce:	693a      	ldr	r2, [r7, #16]
 80005d0:	429a      	cmp	r2, r3
 80005d2:	dbec      	blt.n	80005ae <getHDLCPacket+0x2e>
	}

	// Store CRC result in the packet array
	temp_tx_buffer[i] = (crc >> 8) & 0xFF; // Most significant byte
 80005d4:	89fb      	ldrh	r3, [r7, #14]
 80005d6:	0a1b      	lsrs	r3, r3, #8
 80005d8:	b29b      	uxth	r3, r3
 80005da:	b2d9      	uxtb	r1, r3
 80005dc:	4a12      	ldr	r2, [pc, #72]	; (8000628 <getHDLCPacket+0xa8>)
 80005de:	697b      	ldr	r3, [r7, #20]
 80005e0:	4413      	add	r3, r2
 80005e2:	460a      	mov	r2, r1
 80005e4:	701a      	strb	r2, [r3, #0]
	i++;
 80005e6:	697b      	ldr	r3, [r7, #20]
 80005e8:	3301      	adds	r3, #1
 80005ea:	617b      	str	r3, [r7, #20]
	temp_tx_buffer[i] = crc & 0xFF;        // Least significant byte
 80005ec:	89fb      	ldrh	r3, [r7, #14]
 80005ee:	b2d9      	uxtb	r1, r3
 80005f0:	4a0d      	ldr	r2, [pc, #52]	; (8000628 <getHDLCPacket+0xa8>)
 80005f2:	697b      	ldr	r3, [r7, #20]
 80005f4:	4413      	add	r3, r2
 80005f6:	460a      	mov	r2, r1
 80005f8:	701a      	strb	r2, [r3, #0]
	i++;
 80005fa:	697b      	ldr	r3, [r7, #20]
 80005fc:	3301      	adds	r3, #1
 80005fe:	617b      	str	r3, [r7, #20]

	temp_tx_buffer[i] = 0x7e;
 8000600:	4a09      	ldr	r2, [pc, #36]	; (8000628 <getHDLCPacket+0xa8>)
 8000602:	697b      	ldr	r3, [r7, #20]
 8000604:	4413      	add	r3, r2
 8000606:	227e      	movs	r2, #126	; 0x7e
 8000608:	701a      	strb	r2, [r3, #0]
//	for (int j = 0; j < destuffed_size - 1; j++) {
//		myDebug("%02x ", tem[j]);
//	}
//	myDebug("\r\n");

	memset(ax_buffer, '\0', sizeof(ax_buffer));
 800060a:	2296      	movs	r2, #150	; 0x96
 800060c:	2100      	movs	r1, #0
 800060e:	4807      	ldr	r0, [pc, #28]	; (800062c <getHDLCPacket+0xac>)
 8000610:	f00b fb7a 	bl	800bd08 <memset>
	memset(ax_buff_stuffed, '\0', sizeof(ax_buff_stuffed));
 8000614:	2296      	movs	r2, #150	; 0x96
 8000616:	2100      	movs	r1, #0
 8000618:	4805      	ldr	r0, [pc, #20]	; (8000630 <getHDLCPacket+0xb0>)
 800061a:	f00b fb75 	bl	800bd08 <memset>

}
 800061e:	bf00      	nop
 8000620:	3718      	adds	r7, #24
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	200003a0 	.word	0x200003a0
 800062c:	20000084 	.word	0x20000084
 8000630:	2000011c 	.word	0x2000011c

08000634 <getAX25Packet>:

void getAX25Packet(uint8_t *OBC_data_Field, uint8_t size) {
 8000634:	b580      	push	{r7, lr}
 8000636:	b086      	sub	sp, #24
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
 800063c:	460b      	mov	r3, r1
 800063e:	70fb      	strb	r3, [r7, #3]

	updatePacket(OBC_data_Field);
 8000640:	6878      	ldr	r0, [r7, #4]
 8000642:	f7ff ff6b 	bl	800051c <updatePacket>

	//destination field   9N2SI -0
	ax_buffer[0] = 0x72; //	ASCII->9, HEX->0x39, 1 bit shifted->0b01110010, Shifted HEX->0x72
 8000646:	4b3a      	ldr	r3, [pc, #232]	; (8000730 <getAX25Packet+0xfc>)
 8000648:	2272      	movs	r2, #114	; 0x72
 800064a:	701a      	strb	r2, [r3, #0]
	ax_buffer[1] = 0x9C; //	ASCII->N, HEX->0x4E, 1 bit shifted->0b10011100, Shifted HEX->0x9C
 800064c:	4b38      	ldr	r3, [pc, #224]	; (8000730 <getAX25Packet+0xfc>)
 800064e:	229c      	movs	r2, #156	; 0x9c
 8000650:	705a      	strb	r2, [r3, #1]
	ax_buffer[2] = 0x64; //	ASCII->2, HEX->0x32, 1 bit shifted->0b01100100, Shifted HEX->0x64
 8000652:	4b37      	ldr	r3, [pc, #220]	; (8000730 <getAX25Packet+0xfc>)
 8000654:	2264      	movs	r2, #100	; 0x64
 8000656:	709a      	strb	r2, [r3, #2]
	ax_buffer[3] = 0xA6; //	ASCII->S, HEX->0x53, 1 bit shifted->0b10100110, Shifted HEX->0xA6
 8000658:	4b35      	ldr	r3, [pc, #212]	; (8000730 <getAX25Packet+0xfc>)
 800065a:	22a6      	movs	r2, #166	; 0xa6
 800065c:	70da      	strb	r2, [r3, #3]
	ax_buffer[4] = 0x64; //	ASCII->I, HEX->0x49, 1 bit shifted->0b10010010, Shifted HEX->0x92
 800065e:	4b34      	ldr	r3, [pc, #208]	; (8000730 <getAX25Packet+0xfc>)
 8000660:	2264      	movs	r2, #100	; 0x64
 8000662:	711a      	strb	r2, [r3, #4]
	ax_buffer[5] = 0x40; //	ASCII-> , HEX->0x20, 1 bit shifted->0b01000000, Shifted HEX->0x40
 8000664:	4b32      	ldr	r3, [pc, #200]	; (8000730 <getAX25Packet+0xfc>)
 8000666:	2240      	movs	r2, #64	; 0x40
 8000668:	715a      	strb	r2, [r3, #5]
	ax_buffer[6] = 0xE0; //	0b111SSID0, SSID->0000 and LSB is set to 0; if more addresses follow, HEX->0xE0
 800066a:	4b31      	ldr	r3, [pc, #196]	; (8000730 <getAX25Packet+0xfc>)
 800066c:	22e0      	movs	r2, #224	; 0xe0
 800066e:	719a      	strb	r2, [r3, #6]

	//source field   9N2SI -0
	ax_buffer[7] = 0x72; //	ASCII->9, HEX->0x39, 1 bit shifted->0b01110010, Shifted HEX->0x72
 8000670:	4b2f      	ldr	r3, [pc, #188]	; (8000730 <getAX25Packet+0xfc>)
 8000672:	2272      	movs	r2, #114	; 0x72
 8000674:	71da      	strb	r2, [r3, #7]
	ax_buffer[8] = 0x9C; //	ASCII->N, HEX->0x4E, 1 bit shifted->0b10011100, Shifted HEX->0x9C
 8000676:	4b2e      	ldr	r3, [pc, #184]	; (8000730 <getAX25Packet+0xfc>)
 8000678:	229c      	movs	r2, #156	; 0x9c
 800067a:	721a      	strb	r2, [r3, #8]
	ax_buffer[9] = 0x64; //	ASCII->2, HEX->0x32, 1 bit shifted->0b01100100, Shifted HEX->0x64
 800067c:	4b2c      	ldr	r3, [pc, #176]	; (8000730 <getAX25Packet+0xfc>)
 800067e:	2264      	movs	r2, #100	; 0x64
 8000680:	725a      	strb	r2, [r3, #9]
	ax_buffer[10] = 0xA6; //	ASCII->S, HEX->0x53, 1 bit shifted->0b10100110, Shifted HEX->0xA6
 8000682:	4b2b      	ldr	r3, [pc, #172]	; (8000730 <getAX25Packet+0xfc>)
 8000684:	22a6      	movs	r2, #166	; 0xa6
 8000686:	729a      	strb	r2, [r3, #10]
	ax_buffer[11] = 0x64; //	ASCII->I, HEX->0x49, 1 bit shifted->0b10010010, Shifted HEX->0x92
 8000688:	4b29      	ldr	r3, [pc, #164]	; (8000730 <getAX25Packet+0xfc>)
 800068a:	2264      	movs	r2, #100	; 0x64
 800068c:	72da      	strb	r2, [r3, #11]
	ax_buffer[12] = 0x40; //	ASCII-> , HEX->0x20, 1 bit shifted->0b01000000, Shifted HEX->0x40
 800068e:	4b28      	ldr	r3, [pc, #160]	; (8000730 <getAX25Packet+0xfc>)
 8000690:	2240      	movs	r2, #64	; 0x40
 8000692:	731a      	strb	r2, [r3, #12]
	ax_buffer[13] = 0x61; //	0b011SSID1, SSID->0000 and LSB is set to 1 if this is the last address, HEX->0x61
 8000694:	4b26      	ldr	r3, [pc, #152]	; (8000730 <getAX25Packet+0xfc>)
 8000696:	2261      	movs	r2, #97	; 0x61
 8000698:	735a      	strb	r2, [r3, #13]

	//control bit
	ax_buffer[14] = 0x03; //  Unnumbered Information Frame, AX.25 is always 0b00000011 i.e 0x03 in HEX
 800069a:	4b25      	ldr	r3, [pc, #148]	; (8000730 <getAX25Packet+0xfc>)
 800069c:	2203      	movs	r2, #3
 800069e:	739a      	strb	r2, [r3, #14]

	//protocol identifier
	ax_buffer[15] = 0xF0; //	No Layer-3 Implemented so, 0b11110000 i.e 0xF0 in HEX
 80006a0:	4b23      	ldr	r3, [pc, #140]	; (8000730 <getAX25Packet+0xfc>)
 80006a2:	22f0      	movs	r2, #240	; 0xf0
 80006a4:	73da      	strb	r2, [r3, #15]

	int i = 16;
 80006a6:	2310      	movs	r3, #16
 80006a8:	617b      	str	r3, [r7, #20]

	for (int k = 0; k < size; k++) {
 80006aa:	2300      	movs	r3, #0
 80006ac:	613b      	str	r3, [r7, #16]
 80006ae:	e00e      	b.n	80006ce <getAX25Packet+0x9a>
		ax_buffer[i] = info_packet[k];
 80006b0:	4a20      	ldr	r2, [pc, #128]	; (8000734 <getAX25Packet+0x100>)
 80006b2:	693b      	ldr	r3, [r7, #16]
 80006b4:	4413      	add	r3, r2
 80006b6:	7819      	ldrb	r1, [r3, #0]
 80006b8:	4a1d      	ldr	r2, [pc, #116]	; (8000730 <getAX25Packet+0xfc>)
 80006ba:	697b      	ldr	r3, [r7, #20]
 80006bc:	4413      	add	r3, r2
 80006be:	460a      	mov	r2, r1
 80006c0:	701a      	strb	r2, [r3, #0]
		i++;
 80006c2:	697b      	ldr	r3, [r7, #20]
 80006c4:	3301      	adds	r3, #1
 80006c6:	617b      	str	r3, [r7, #20]
	for (int k = 0; k < size; k++) {
 80006c8:	693b      	ldr	r3, [r7, #16]
 80006ca:	3301      	adds	r3, #1
 80006cc:	613b      	str	r3, [r7, #16]
 80006ce:	78fb      	ldrb	r3, [r7, #3]
 80006d0:	693a      	ldr	r2, [r7, #16]
 80006d2:	429a      	cmp	r2, r3
 80006d4:	dbec      	blt.n	80006b0 <getAX25Packet+0x7c>
	}

//	myDebug("Before Bit stuffing:");
	myDebug("\nReal Data, Length: %d bytes", i);
 80006d6:	6979      	ldr	r1, [r7, #20]
 80006d8:	4817      	ldr	r0, [pc, #92]	; (8000738 <getAX25Packet+0x104>)
 80006da:	f000 f84f 	bl	800077c <myDebug>
	myDebug("\r\n");
 80006de:	4817      	ldr	r0, [pc, #92]	; (800073c <getAX25Packet+0x108>)
 80006e0:	f000 f84c 	bl	800077c <myDebug>
	for (int j = 0; j < i; j++) {
 80006e4:	2300      	movs	r3, #0
 80006e6:	60fb      	str	r3, [r7, #12]
 80006e8:	e00a      	b.n	8000700 <getAX25Packet+0xcc>
		myDebug("%02x ", ax_buffer[j]);
 80006ea:	4a11      	ldr	r2, [pc, #68]	; (8000730 <getAX25Packet+0xfc>)
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	4413      	add	r3, r2
 80006f0:	781b      	ldrb	r3, [r3, #0]
 80006f2:	4619      	mov	r1, r3
 80006f4:	4812      	ldr	r0, [pc, #72]	; (8000740 <getAX25Packet+0x10c>)
 80006f6:	f000 f841 	bl	800077c <myDebug>
	for (int j = 0; j < i; j++) {
 80006fa:	68fb      	ldr	r3, [r7, #12]
 80006fc:	3301      	adds	r3, #1
 80006fe:	60fb      	str	r3, [r7, #12]
 8000700:	68fa      	ldr	r2, [r7, #12]
 8000702:	697b      	ldr	r3, [r7, #20]
 8000704:	429a      	cmp	r2, r3
 8000706:	dbf0      	blt.n	80006ea <getAX25Packet+0xb6>
	}
	myDebug("\r\n");
 8000708:	480c      	ldr	r0, [pc, #48]	; (800073c <getAX25Packet+0x108>)
 800070a:	f000 f837 	bl	800077c <myDebug>

	// Bit Stuffing
	int stuffed_size = bit_stuffing(ax_buffer, ax_buff_stuffed, i);
 800070e:	697a      	ldr	r2, [r7, #20]
 8000710:	490c      	ldr	r1, [pc, #48]	; (8000744 <getAX25Packet+0x110>)
 8000712:	4807      	ldr	r0, [pc, #28]	; (8000730 <getAX25Packet+0xfc>)
 8000714:	f000 f8fd 	bl	8000912 <bit_stuffing>
 8000718:	60b8      	str	r0, [r7, #8]

	getHDLCPacket(ax_buff_stuffed, stuffed_size);
 800071a:	68bb      	ldr	r3, [r7, #8]
 800071c:	b2db      	uxtb	r3, r3
 800071e:	4619      	mov	r1, r3
 8000720:	4808      	ldr	r0, [pc, #32]	; (8000744 <getAX25Packet+0x110>)
 8000722:	f7ff ff2d 	bl	8000580 <getHDLCPacket>
}
 8000726:	bf00      	nop
 8000728:	3718      	adds	r7, #24
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	20000084 	.word	0x20000084
 8000734:	200001b4 	.word	0x200001b4
 8000738:	0800c624 	.word	0x0800c624
 800073c:	0800c644 	.word	0x0800c644
 8000740:	0800c648 	.word	0x0800c648
 8000744:	2000011c 	.word	0x2000011c

08000748 <delay_us>:
 *      Author: sajanduwal
 */

#include "com_debug.h"

void delay_us(uint32_t us) {
 8000748:	b480      	push	{r7}
 800074a:	b085      	sub	sp, #20
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
	uint32_t delay_counter_disp;
	__HAL_TIM_SET_COUNTER(&htim2, 0);  // set the counter value a 0
 8000750:	4b09      	ldr	r3, [pc, #36]	; (8000778 <delay_us+0x30>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	2200      	movs	r2, #0
 8000756:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim2) < us)
 8000758:	e002      	b.n	8000760 <delay_us+0x18>
		delay_counter_disp++;
 800075a:	68fb      	ldr	r3, [r7, #12]
 800075c:	3301      	adds	r3, #1
 800075e:	60fb      	str	r3, [r7, #12]
	while (__HAL_TIM_GET_COUNTER(&htim2) < us)
 8000760:	4b05      	ldr	r3, [pc, #20]	; (8000778 <delay_us+0x30>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000766:	687a      	ldr	r2, [r7, #4]
 8000768:	429a      	cmp	r2, r3
 800076a:	d8f6      	bhi.n	800075a <delay_us+0x12>
	// wait for the counter to reach the us input in the parameter
}
 800076c:	bf00      	nop
 800076e:	bf00      	nop
 8000770:	3714      	adds	r7, #20
 8000772:	46bd      	mov	sp, r7
 8000774:	bc80      	pop	{r7}
 8000776:	4770      	bx	lr
 8000778:	20000510 	.word	0x20000510

0800077c <myDebug>:

void myDebug(const char *fmt, ...) {
 800077c:	b40f      	push	{r0, r1, r2, r3}
 800077e:	b580      	push	{r7, lr}
 8000780:	b082      	sub	sp, #8
 8000782:	af00      	add	r7, sp, #0
	static char temp[100];
	va_list args;
	va_start(args, fmt);
 8000784:	f107 0314 	add.w	r3, r7, #20
 8000788:	603b      	str	r3, [r7, #0]
	vsnprintf(temp, sizeof(temp), fmt, args);
 800078a:	683b      	ldr	r3, [r7, #0]
 800078c:	693a      	ldr	r2, [r7, #16]
 800078e:	2164      	movs	r1, #100	; 0x64
 8000790:	480a      	ldr	r0, [pc, #40]	; (80007bc <myDebug+0x40>)
 8000792:	f00b faab 	bl	800bcec <vsniprintf>
	va_end(args);
	int len = bufferSize(temp);
 8000796:	4809      	ldr	r0, [pc, #36]	; (80007bc <myDebug+0x40>)
 8000798:	f000 f814 	bl	80007c4 <bufferSize>
 800079c:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*) temp, len, 1000);
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	b29a      	uxth	r2, r3
 80007a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007a6:	4905      	ldr	r1, [pc, #20]	; (80007bc <myDebug+0x40>)
 80007a8:	4805      	ldr	r0, [pc, #20]	; (80007c0 <myDebug+0x44>)
 80007aa:	f006 f872 	bl	8006892 <HAL_UART_Transmit>
}
 80007ae:	bf00      	nop
 80007b0:	3708      	adds	r7, #8
 80007b2:	46bd      	mov	sp, r7
 80007b4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80007b8:	b004      	add	sp, #16
 80007ba:	4770      	bx	lr
 80007bc:	20000218 	.word	0x20000218
 80007c0:	200005f4 	.word	0x200005f4

080007c4 <bufferSize>:

int bufferSize(char *buffer) {
 80007c4:	b480      	push	{r7}
 80007c6:	b085      	sub	sp, #20
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
	int i = 0;
 80007cc:	2300      	movs	r3, #0
 80007ce:	60fb      	str	r3, [r7, #12]
	while (*buffer++ != '\0')
 80007d0:	e002      	b.n	80007d8 <bufferSize+0x14>
		i++;
 80007d2:	68fb      	ldr	r3, [r7, #12]
 80007d4:	3301      	adds	r3, #1
 80007d6:	60fb      	str	r3, [r7, #12]
	while (*buffer++ != '\0')
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	1c5a      	adds	r2, r3, #1
 80007dc:	607a      	str	r2, [r7, #4]
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d1f6      	bne.n	80007d2 <bufferSize+0xe>
	return i;
 80007e4:	68fb      	ldr	r3, [r7, #12]
}
 80007e6:	4618      	mov	r0, r3
 80007e8:	3714      	adds	r7, #20
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bc80      	pop	{r7}
 80007ee:	4770      	bx	lr

080007f0 <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_DMAMUX1
  *         @arg @ref LL_AHB1_GRP1_PERIPH_CRC
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80007f0:	b480      	push	{r7}
 80007f2:	b085      	sub	sp, #20
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80007f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007fc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80007fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	4313      	orrs	r3, r2
 8000806:	648b      	str	r3, [r1, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000808:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800080c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	4013      	ands	r3, r2
 8000812:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000814:	68fb      	ldr	r3, [r7, #12]
}
 8000816:	bf00      	nop
 8000818:	3714      	adds	r7, #20
 800081a:	46bd      	mov	sp, r7
 800081c:	bc80      	pop	{r7}
 800081e:	4770      	bx	lr

08000820 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000824:	2004      	movs	r0, #4
 8000826:	f7ff ffe3 	bl	80007f0 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 800082a:	2001      	movs	r0, #1
 800082c:	f7ff ffe0 	bl	80007f0 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000830:	2200      	movs	r2, #0
 8000832:	2100      	movs	r1, #0
 8000834:	200b      	movs	r0, #11
 8000836:	f002 ffe6 	bl	8003806 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800083a:	200b      	movs	r0, #11
 800083c:	f002 fffd 	bl	800383a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000840:	2200      	movs	r2, #0
 8000842:	2100      	movs	r1, #0
 8000844:	200c      	movs	r0, #12
 8000846:	f002 ffde 	bl	8003806 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800084a:	200c      	movs	r0, #12
 800084c:	f002 fff5 	bl	800383a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000850:	2200      	movs	r2, #0
 8000852:	2100      	movs	r1, #0
 8000854:	200d      	movs	r0, #13
 8000856:	f002 ffd6 	bl	8003806 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 800085a:	200d      	movs	r0, #13
 800085c:	f002 ffed 	bl	800383a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000860:	2200      	movs	r2, #0
 8000862:	2100      	movs	r1, #0
 8000864:	200e      	movs	r0, #14
 8000866:	f002 ffce 	bl	8003806 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 800086a:	200e      	movs	r0, #14
 800086c:	f002 ffe5 	bl	800383a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000870:	2200      	movs	r2, #0
 8000872:	2100      	movs	r1, #0
 8000874:	200f      	movs	r0, #15
 8000876:	f002 ffc6 	bl	8003806 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800087a:	200f      	movs	r0, #15
 800087c:	f002 ffdd 	bl	800383a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8000880:	2200      	movs	r2, #0
 8000882:	2100      	movs	r1, #0
 8000884:	2010      	movs	r0, #16
 8000886:	f002 ffbe 	bl	8003806 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 800088a:	2010      	movs	r0, #16
 800088c:	f002 ffd5 	bl	800383a <HAL_NVIC_EnableIRQ>

}
 8000890:	bf00      	nop
 8000892:	bd80      	pop	{r7, pc}

08000894 <calculateCRC_CCITT_AX25>:
 */

#include "error_handler.h"

// Function to calculate CRC-CCITT for AX.25 frames
uint16_t calculateCRC_CCITT_AX25(const uint8_t *data, size_t length) {
 8000894:	b480      	push	{r7}
 8000896:	b087      	sub	sp, #28
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
 800089c:	6039      	str	r1, [r7, #0]
	uint16_t crc = 0xFFFF; // Initialize CRC register with 0xFFFF
 800089e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80008a2:	82fb      	strh	r3, [r7, #22]
	uint16_t CRC_POLY = 0x1021; // CRC polynomial for CCITT (0x1021)
 80008a4:	f241 0321 	movw	r3, #4129	; 0x1021
 80008a8:	817b      	strh	r3, [r7, #10]

	// Iterate through each byte of the input data
	for (size_t i = 0; i < length; i++) {
 80008aa:	2300      	movs	r3, #0
 80008ac:	613b      	str	r3, [r7, #16]
 80008ae:	e026      	b.n	80008fe <calculateCRC_CCITT_AX25+0x6a>
		crc ^= ((uint16_t) data[i] << 8); // XOR CRC with next byte of input data
 80008b0:	687a      	ldr	r2, [r7, #4]
 80008b2:	693b      	ldr	r3, [r7, #16]
 80008b4:	4413      	add	r3, r2
 80008b6:	781b      	ldrb	r3, [r3, #0]
 80008b8:	021b      	lsls	r3, r3, #8
 80008ba:	b21a      	sxth	r2, r3
 80008bc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80008c0:	4053      	eors	r3, r2
 80008c2:	b21b      	sxth	r3, r3
 80008c4:	82fb      	strh	r3, [r7, #22]

		// Iterate through each bit of the current byte
		for (int j = 0; j < 8; j++) {
 80008c6:	2300      	movs	r3, #0
 80008c8:	60fb      	str	r3, [r7, #12]
 80008ca:	e012      	b.n	80008f2 <calculateCRC_CCITT_AX25+0x5e>
			if (crc & 0x8000) { // If MSB of CRC is 1
 80008cc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	da08      	bge.n	80008e6 <calculateCRC_CCITT_AX25+0x52>
				crc = (crc << 1) ^ CRC_POLY; // Left shift CRC and XOR with polynomial
 80008d4:	8afb      	ldrh	r3, [r7, #22]
 80008d6:	005b      	lsls	r3, r3, #1
 80008d8:	b21a      	sxth	r2, r3
 80008da:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80008de:	4053      	eors	r3, r2
 80008e0:	b21b      	sxth	r3, r3
 80008e2:	82fb      	strh	r3, [r7, #22]
 80008e4:	e002      	b.n	80008ec <calculateCRC_CCITT_AX25+0x58>
			} else {
				crc <<= 1; // Left shift CRC
 80008e6:	8afb      	ldrh	r3, [r7, #22]
 80008e8:	005b      	lsls	r3, r3, #1
 80008ea:	82fb      	strh	r3, [r7, #22]
		for (int j = 0; j < 8; j++) {
 80008ec:	68fb      	ldr	r3, [r7, #12]
 80008ee:	3301      	adds	r3, #1
 80008f0:	60fb      	str	r3, [r7, #12]
 80008f2:	68fb      	ldr	r3, [r7, #12]
 80008f4:	2b07      	cmp	r3, #7
 80008f6:	dde9      	ble.n	80008cc <calculateCRC_CCITT_AX25+0x38>
	for (size_t i = 0; i < length; i++) {
 80008f8:	693b      	ldr	r3, [r7, #16]
 80008fa:	3301      	adds	r3, #1
 80008fc:	613b      	str	r3, [r7, #16]
 80008fe:	693a      	ldr	r2, [r7, #16]
 8000900:	683b      	ldr	r3, [r7, #0]
 8000902:	429a      	cmp	r2, r3
 8000904:	d3d4      	bcc.n	80008b0 <calculateCRC_CCITT_AX25+0x1c>
			}
		}
	}

	return crc; // Return calculated CRC
 8000906:	8afb      	ldrh	r3, [r7, #22]
}
 8000908:	4618      	mov	r0, r3
 800090a:	371c      	adds	r7, #28
 800090c:	46bd      	mov	sp, r7
 800090e:	bc80      	pop	{r7}
 8000910:	4770      	bx	lr

08000912 <bit_stuffing>:
	}
	crcReg = crcReg ^ 0xFFFF;						// Final XOR with 0xFFFF
	return crcReg;
}

int bit_stuffing(uint8_t *data, uint8_t *output_data, int length) {
 8000912:	b480      	push	{r7}
 8000914:	b08f      	sub	sp, #60	; 0x3c
 8000916:	af00      	add	r7, sp, #0
 8000918:	60f8      	str	r0, [r7, #12]
 800091a:	60b9      	str	r1, [r7, #8]
 800091c:	607a      	str	r2, [r7, #4]
	int out_index = 0;
 800091e:	2300      	movs	r3, #0
 8000920:	637b      	str	r3, [r7, #52]	; 0x34
	int bit_count = 0; // Count of consecutive 1 bits
 8000922:	2300      	movs	r3, #0
 8000924:	633b      	str	r3, [r7, #48]	; 0x30
	uint8_t current_byte = 0;
 8000926:	2300      	movs	r3, #0
 8000928:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	int bit_pos = 7;
 800092c:	2307      	movs	r3, #7
 800092e:	62bb      	str	r3, [r7, #40]	; 0x28
	int stuffed_size = 0; // Track size of output data after bit stuffing
 8000930:	2300      	movs	r3, #0
 8000932:	627b      	str	r3, [r7, #36]	; 0x24
	int bits_stuffed = 0; // Number of bits stuffed since last size increase
 8000934:	2300      	movs	r3, #0
 8000936:	623b      	str	r3, [r7, #32]

	//myDebug("Error handler: before Bit stuffing \n");

	for (int i = 0; i < length; i++) {
 8000938:	2300      	movs	r3, #0
 800093a:	61fb      	str	r3, [r7, #28]
 800093c:	e078      	b.n	8000a30 <bit_stuffing+0x11e>
		for (int bit = 7; bit >= 0; bit--) {
 800093e:	2307      	movs	r3, #7
 8000940:	61bb      	str	r3, [r7, #24]
 8000942:	e06f      	b.n	8000a24 <bit_stuffing+0x112>
			int bit_val = (data[i] >> bit) & 1;
 8000944:	69fb      	ldr	r3, [r7, #28]
 8000946:	68fa      	ldr	r2, [r7, #12]
 8000948:	4413      	add	r3, r2
 800094a:	781b      	ldrb	r3, [r3, #0]
 800094c:	461a      	mov	r2, r3
 800094e:	69bb      	ldr	r3, [r7, #24]
 8000950:	fa42 f303 	asr.w	r3, r2, r3
 8000954:	f003 0301 	and.w	r3, r3, #1
 8000958:	613b      	str	r3, [r7, #16]

			//	myDebug("%d ", bit_val);

			current_byte |= (bit_val << bit_pos);
 800095a:	693a      	ldr	r2, [r7, #16]
 800095c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800095e:	fa02 f303 	lsl.w	r3, r2, r3
 8000962:	b25a      	sxtb	r2, r3
 8000964:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8000968:	4313      	orrs	r3, r2
 800096a:	b25b      	sxtb	r3, r3
 800096c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			bit_pos--;
 8000970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000972:	3b01      	subs	r3, #1
 8000974:	62bb      	str	r3, [r7, #40]	; 0x28

			if (bit_val) {
 8000976:	693b      	ldr	r3, [r7, #16]
 8000978:	2b00      	cmp	r3, #0
 800097a:	d02f      	beq.n	80009dc <bit_stuffing+0xca>
				bit_count++;
 800097c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800097e:	3301      	adds	r3, #1
 8000980:	633b      	str	r3, [r7, #48]	; 0x30
				if (bit_count == 5) {
 8000982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000984:	2b05      	cmp	r3, #5
 8000986:	d12b      	bne.n	80009e0 <bit_stuffing+0xce>
					// Insert a 0 bit after five consecutive 1s
					if (bit_pos < 0) {
 8000988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800098a:	2b00      	cmp	r3, #0
 800098c:	da10      	bge.n	80009b0 <bit_stuffing+0x9e>
						output_data[out_index++] = current_byte;
 800098e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000990:	1c5a      	adds	r2, r3, #1
 8000992:	637a      	str	r2, [r7, #52]	; 0x34
 8000994:	461a      	mov	r2, r3
 8000996:	68bb      	ldr	r3, [r7, #8]
 8000998:	4413      	add	r3, r2
 800099a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800099e:	701a      	strb	r2, [r3, #0]
						stuffed_size++;
 80009a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009a2:	3301      	adds	r3, #1
 80009a4:	627b      	str	r3, [r7, #36]	; 0x24
						current_byte = 0;
 80009a6:	2300      	movs	r3, #0
 80009a8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						bit_pos = 7;
 80009ac:	2307      	movs	r3, #7
 80009ae:	62bb      	str	r3, [r7, #40]	; 0x28
					}
					current_byte &= ~(1 << bit_pos);
 80009b0:	2201      	movs	r2, #1
 80009b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009b4:	fa02 f303 	lsl.w	r3, r2, r3
 80009b8:	b25b      	sxtb	r3, r3
 80009ba:	43db      	mvns	r3, r3
 80009bc:	b25a      	sxtb	r2, r3
 80009be:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80009c2:	4013      	ands	r3, r2
 80009c4:	b25b      	sxtb	r3, r3
 80009c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					bit_pos--;
 80009ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009cc:	3b01      	subs	r3, #1
 80009ce:	62bb      	str	r3, [r7, #40]	; 0x28
					bits_stuffed++;
 80009d0:	6a3b      	ldr	r3, [r7, #32]
 80009d2:	3301      	adds	r3, #1
 80009d4:	623b      	str	r3, [r7, #32]
					bit_count = 0;
 80009d6:	2300      	movs	r3, #0
 80009d8:	633b      	str	r3, [r7, #48]	; 0x30
 80009da:	e001      	b.n	80009e0 <bit_stuffing+0xce>
				}
			} else {
				bit_count = 0;
 80009dc:	2300      	movs	r3, #0
 80009de:	633b      	str	r3, [r7, #48]	; 0x30
			}

			if (bit_pos < 0) {
 80009e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	da10      	bge.n	8000a08 <bit_stuffing+0xf6>
				output_data[out_index++] = current_byte;
 80009e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80009e8:	1c5a      	adds	r2, r3, #1
 80009ea:	637a      	str	r2, [r7, #52]	; 0x34
 80009ec:	461a      	mov	r2, r3
 80009ee:	68bb      	ldr	r3, [r7, #8]
 80009f0:	4413      	add	r3, r2
 80009f2:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80009f6:	701a      	strb	r2, [r3, #0]
				stuffed_size++;
 80009f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009fa:	3301      	adds	r3, #1
 80009fc:	627b      	str	r3, [r7, #36]	; 0x24
				current_byte = 0;
 80009fe:	2300      	movs	r3, #0
 8000a00:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				bit_pos = 7;
 8000a04:	2307      	movs	r3, #7
 8000a06:	62bb      	str	r3, [r7, #40]	; 0x28
			}

			// Check if we've stuffed enough bits to increase size
			if (bits_stuffed >= 9 && bit_pos >= 0) {
 8000a08:	6a3b      	ldr	r3, [r7, #32]
 8000a0a:	2b08      	cmp	r3, #8
 8000a0c:	dd07      	ble.n	8000a1e <bit_stuffing+0x10c>
 8000a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	db04      	blt.n	8000a1e <bit_stuffing+0x10c>
				stuffed_size++;
 8000a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a16:	3301      	adds	r3, #1
 8000a18:	627b      	str	r3, [r7, #36]	; 0x24
				bits_stuffed = 0; // Reset bits_stuffed after increasing size
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	623b      	str	r3, [r7, #32]
		for (int bit = 7; bit >= 0; bit--) {
 8000a1e:	69bb      	ldr	r3, [r7, #24]
 8000a20:	3b01      	subs	r3, #1
 8000a22:	61bb      	str	r3, [r7, #24]
 8000a24:	69bb      	ldr	r3, [r7, #24]
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	da8c      	bge.n	8000944 <bit_stuffing+0x32>
	for (int i = 0; i < length; i++) {
 8000a2a:	69fb      	ldr	r3, [r7, #28]
 8000a2c:	3301      	adds	r3, #1
 8000a2e:	61fb      	str	r3, [r7, #28]
 8000a30:	69fa      	ldr	r2, [r7, #28]
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	429a      	cmp	r2, r3
 8000a36:	db82      	blt.n	800093e <bit_stuffing+0x2c>
			}
		}
	}
	//myDebug("\n");

	if (bit_pos < 7) {
 8000a38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a3a:	2b06      	cmp	r3, #6
 8000a3c:	dc0b      	bgt.n	8000a56 <bit_stuffing+0x144>
		output_data[out_index++] = current_byte;
 8000a3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a40:	1c5a      	adds	r2, r3, #1
 8000a42:	637a      	str	r2, [r7, #52]	; 0x34
 8000a44:	461a      	mov	r2, r3
 8000a46:	68bb      	ldr	r3, [r7, #8]
 8000a48:	4413      	add	r3, r2
 8000a4a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8000a4e:	701a      	strb	r2, [r3, #0]
		stuffed_size++;
 8000a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a52:	3301      	adds	r3, #1
 8000a54:	627b      	str	r3, [r7, #36]	; 0x24
//			myDebug("%d ", bit_val);
//		}
//	}
//	myDebug("\n");

	for (int i = 0; i < length; i++) {
 8000a56:	2300      	movs	r3, #0
 8000a58:	617b      	str	r3, [r7, #20]
 8000a5a:	e00a      	b.n	8000a72 <bit_stuffing+0x160>
		output_data[i] = data[i];
 8000a5c:	697b      	ldr	r3, [r7, #20]
 8000a5e:	68fa      	ldr	r2, [r7, #12]
 8000a60:	441a      	add	r2, r3
 8000a62:	697b      	ldr	r3, [r7, #20]
 8000a64:	68b9      	ldr	r1, [r7, #8]
 8000a66:	440b      	add	r3, r1
 8000a68:	7812      	ldrb	r2, [r2, #0]
 8000a6a:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < length; i++) {
 8000a6c:	697b      	ldr	r3, [r7, #20]
 8000a6e:	3301      	adds	r3, #1
 8000a70:	617b      	str	r3, [r7, #20]
 8000a72:	697a      	ldr	r2, [r7, #20]
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	429a      	cmp	r2, r3
 8000a78:	dbf0      	blt.n	8000a5c <bit_stuffing+0x14a>
	}

	out_index = length;
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	637b      	str	r3, [r7, #52]	; 0x34

	return out_index; // Return the size of output data after bit stuffing
 8000a7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8000a80:	4618      	mov	r0, r3
 8000a82:	373c      	adds	r7, #60	; 0x3c
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bc80      	pop	{r7}
 8000a88:	4770      	bx	lr

08000a8a <bit_destuffing>:

int bit_destuffing(uint8_t *data, uint8_t *output_data, int length) {
 8000a8a:	b480      	push	{r7}
 8000a8c:	b08d      	sub	sp, #52	; 0x34
 8000a8e:	af00      	add	r7, sp, #0
 8000a90:	60f8      	str	r0, [r7, #12]
 8000a92:	60b9      	str	r1, [r7, #8]
 8000a94:	607a      	str	r2, [r7, #4]
	int out_index = 0;
 8000a96:	2300      	movs	r3, #0
 8000a98:	62fb      	str	r3, [r7, #44]	; 0x2c
	int bit_count = 0;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t current_byte = 0;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	int bit_pos = 7;
 8000aa4:	2307      	movs	r3, #7
 8000aa6:	623b      	str	r3, [r7, #32]

	for (int i = 0; i < length; i++) {
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	61fb      	str	r3, [r7, #28]
 8000aac:	e052      	b.n	8000b54 <bit_destuffing+0xca>
		for (int bit = 7; bit >= 0; bit--) {
 8000aae:	2307      	movs	r3, #7
 8000ab0:	61bb      	str	r3, [r7, #24]
 8000ab2:	e049      	b.n	8000b48 <bit_destuffing+0xbe>
			int bit_val = (data[i] >> bit) & 1;
 8000ab4:	69fb      	ldr	r3, [r7, #28]
 8000ab6:	68fa      	ldr	r2, [r7, #12]
 8000ab8:	4413      	add	r3, r2
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	461a      	mov	r2, r3
 8000abe:	69bb      	ldr	r3, [r7, #24]
 8000ac0:	fa42 f303 	asr.w	r3, r2, r3
 8000ac4:	f003 0301 	and.w	r3, r3, #1
 8000ac8:	613b      	str	r3, [r7, #16]

			if (bit_val) {
 8000aca:	693b      	ldr	r3, [r7, #16]
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d011      	beq.n	8000af4 <bit_destuffing+0x6a>
				bit_count++;
 8000ad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ad2:	3301      	adds	r3, #1
 8000ad4:	62bb      	str	r3, [r7, #40]	; 0x28
				current_byte |= (bit_val << bit_pos);
 8000ad6:	693a      	ldr	r2, [r7, #16]
 8000ad8:	6a3b      	ldr	r3, [r7, #32]
 8000ada:	fa02 f303 	lsl.w	r3, r2, r3
 8000ade:	b25a      	sxtb	r2, r3
 8000ae0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8000ae4:	4313      	orrs	r3, r2
 8000ae6:	b25b      	sxtb	r3, r3
 8000ae8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				bit_pos--;
 8000aec:	6a3b      	ldr	r3, [r7, #32]
 8000aee:	3b01      	subs	r3, #1
 8000af0:	623b      	str	r3, [r7, #32]
 8000af2:	e015      	b.n	8000b20 <bit_destuffing+0x96>
			} else {
				if (bit_count == 5) {
 8000af4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000af6:	2b05      	cmp	r3, #5
 8000af8:	d102      	bne.n	8000b00 <bit_destuffing+0x76>
					// Skip this bit as it is a stuffed bit
					bit_count = 0;
 8000afa:	2300      	movs	r3, #0
 8000afc:	62bb      	str	r3, [r7, #40]	; 0x28
					continue;
 8000afe:	e020      	b.n	8000b42 <bit_destuffing+0xb8>
				} else {
					bit_count = 0;
 8000b00:	2300      	movs	r3, #0
 8000b02:	62bb      	str	r3, [r7, #40]	; 0x28
					current_byte |= (bit_val << bit_pos);
 8000b04:	693a      	ldr	r2, [r7, #16]
 8000b06:	6a3b      	ldr	r3, [r7, #32]
 8000b08:	fa02 f303 	lsl.w	r3, r2, r3
 8000b0c:	b25a      	sxtb	r2, r3
 8000b0e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8000b12:	4313      	orrs	r3, r2
 8000b14:	b25b      	sxtb	r3, r3
 8000b16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					bit_pos--;
 8000b1a:	6a3b      	ldr	r3, [r7, #32]
 8000b1c:	3b01      	subs	r3, #1
 8000b1e:	623b      	str	r3, [r7, #32]
				}
			}

			if (bit_pos < 0) {
 8000b20:	6a3b      	ldr	r3, [r7, #32]
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	da0d      	bge.n	8000b42 <bit_destuffing+0xb8>
				output_data[out_index++] = current_byte;
 8000b26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b28:	1c5a      	adds	r2, r3, #1
 8000b2a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8000b2c:	461a      	mov	r2, r3
 8000b2e:	68bb      	ldr	r3, [r7, #8]
 8000b30:	4413      	add	r3, r2
 8000b32:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8000b36:	701a      	strb	r2, [r3, #0]
				current_byte = 0;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				bit_pos = 7;
 8000b3e:	2307      	movs	r3, #7
 8000b40:	623b      	str	r3, [r7, #32]
		for (int bit = 7; bit >= 0; bit--) {
 8000b42:	69bb      	ldr	r3, [r7, #24]
 8000b44:	3b01      	subs	r3, #1
 8000b46:	61bb      	str	r3, [r7, #24]
 8000b48:	69bb      	ldr	r3, [r7, #24]
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	dab2      	bge.n	8000ab4 <bit_destuffing+0x2a>
	for (int i = 0; i < length; i++) {
 8000b4e:	69fb      	ldr	r3, [r7, #28]
 8000b50:	3301      	adds	r3, #1
 8000b52:	61fb      	str	r3, [r7, #28]
 8000b54:	69fa      	ldr	r2, [r7, #28]
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	429a      	cmp	r2, r3
 8000b5a:	dba8      	blt.n	8000aae <bit_destuffing+0x24>
			}
		}
	}

	// Ensure the last byte is written if it's partially filled
	if (bit_pos < 7) {
 8000b5c:	6a3b      	ldr	r3, [r7, #32]
 8000b5e:	2b06      	cmp	r3, #6
 8000b60:	dc08      	bgt.n	8000b74 <bit_destuffing+0xea>
		output_data[out_index++] = current_byte;
 8000b62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b64:	1c5a      	adds	r2, r3, #1
 8000b66:	62fa      	str	r2, [r7, #44]	; 0x2c
 8000b68:	461a      	mov	r2, r3
 8000b6a:	68bb      	ldr	r3, [r7, #8]
 8000b6c:	4413      	add	r3, r2
 8000b6e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8000b72:	701a      	strb	r2, [r3, #0]
//			myDebug("%d ", bit_val);
//		}
//	}
//	myDebug("\n");

	for (int i = 0; i < length; i++) {
 8000b74:	2300      	movs	r3, #0
 8000b76:	617b      	str	r3, [r7, #20]
 8000b78:	e00a      	b.n	8000b90 <bit_destuffing+0x106>
		output_data[i] = data[i];
 8000b7a:	697b      	ldr	r3, [r7, #20]
 8000b7c:	68fa      	ldr	r2, [r7, #12]
 8000b7e:	441a      	add	r2, r3
 8000b80:	697b      	ldr	r3, [r7, #20]
 8000b82:	68b9      	ldr	r1, [r7, #8]
 8000b84:	440b      	add	r3, r1
 8000b86:	7812      	ldrb	r2, [r2, #0]
 8000b88:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < length; i++) {
 8000b8a:	697b      	ldr	r3, [r7, #20]
 8000b8c:	3301      	adds	r3, #1
 8000b8e:	617b      	str	r3, [r7, #20]
 8000b90:	697a      	ldr	r2, [r7, #20]
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	429a      	cmp	r2, r3
 8000b96:	dbf0      	blt.n	8000b7a <bit_destuffing+0xf0>
	}

	out_index = length;
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	62fb      	str	r3, [r7, #44]	; 0x2c

	return out_index;
 8000b9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	3734      	adds	r7, #52	; 0x34
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bc80      	pop	{r7}
 8000ba6:	4770      	bx	lr

08000ba8 <check_packet_type>:

int check_packet_type(uint8_t *OBC_UART) {
 8000ba8:	b480      	push	{r7}
 8000baa:	b085      	sub	sp, #20
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
	uint8_t packet_type_true = 0;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	73fb      	strb	r3, [r7, #15]
	switch (OBC_UART[1]) {
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	3301      	adds	r3, #1
 8000bb8:	781b      	ldrb	r3, [r3, #0]
 8000bba:	2bda      	cmp	r3, #218	; 0xda
 8000bbc:	d049      	beq.n	8000c52 <check_packet_type+0xaa>
 8000bbe:	2bda      	cmp	r3, #218	; 0xda
 8000bc0:	dc4d      	bgt.n	8000c5e <check_packet_type+0xb6>
 8000bc2:	2b0d      	cmp	r3, #13
 8000bc4:	dc28      	bgt.n	8000c18 <check_packet_type+0x70>
 8000bc6:	2b0a      	cmp	r3, #10
 8000bc8:	da18      	bge.n	8000bfc <check_packet_type+0x54>
 8000bca:	e048      	b.n	8000c5e <check_packet_type+0xb6>
 8000bcc:	3baa      	subs	r3, #170	; 0xaa
 8000bce:	2b08      	cmp	r3, #8
 8000bd0:	d845      	bhi.n	8000c5e <check_packet_type+0xb6>
 8000bd2:	a201      	add	r2, pc, #4	; (adr r2, 8000bd8 <check_packet_type+0x30>)
 8000bd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bd8:	08000c59 	.word	0x08000c59
 8000bdc:	08000c5f 	.word	0x08000c5f
 8000be0:	08000c2f 	.word	0x08000c2f
 8000be4:	08000c4d 	.word	0x08000c4d
 8000be8:	08000c5f 	.word	0x08000c5f
 8000bec:	08000c5f 	.word	0x08000c5f
 8000bf0:	08000c5f 	.word	0x08000c5f
 8000bf4:	08000c23 	.word	0x08000c23
 8000bf8:	08000c29 	.word	0x08000c29
 8000bfc:	3b0a      	subs	r3, #10
 8000bfe:	2b03      	cmp	r3, #3
 8000c00:	d82d      	bhi.n	8000c5e <check_packet_type+0xb6>
 8000c02:	a201      	add	r2, pc, #4	; (adr r2, 8000c08 <check_packet_type+0x60>)
 8000c04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c08:	08000c35 	.word	0x08000c35
 8000c0c:	08000c3b 	.word	0x08000c3b
 8000c10:	08000c41 	.word	0x08000c41
 8000c14:	08000c47 	.word	0x08000c47
 8000c18:	2bb2      	cmp	r3, #178	; 0xb2
 8000c1a:	dc20      	bgt.n	8000c5e <check_packet_type+0xb6>
 8000c1c:	2baa      	cmp	r3, #170	; 0xaa
 8000c1e:	dad5      	bge.n	8000bcc <check_packet_type+0x24>
 8000c20:	e01d      	b.n	8000c5e <check_packet_type+0xb6>

	case 0xb1:						// beacon_type_1
		packet_type_true = 1;
 8000c22:	2301      	movs	r3, #1
 8000c24:	73fb      	strb	r3, [r7, #15]
		break;
 8000c26:	e01c      	b.n	8000c62 <check_packet_type+0xba>

	case 0xb2:						// beacon_type_2
		packet_type_true = 1;
 8000c28:	2301      	movs	r3, #1
 8000c2a:	73fb      	strb	r3, [r7, #15]
		break;
 8000c2c:	e019      	b.n	8000c62 <check_packet_type+0xba>

	case 0xac:						// ack
		packet_type_true = 1;
 8000c2e:	2301      	movs	r3, #1
 8000c30:	73fb      	strb	r3, [r7, #15]
		break;
 8000c32:	e016      	b.n	8000c62 <check_packet_type+0xba>

	case 0x0a:						// digipeater packet
		packet_type_true = 1;
 8000c34:	2301      	movs	r3, #1
 8000c36:	73fb      	strb	r3, [r7, #15]
		break;
 8000c38:	e013      	b.n	8000c62 <check_packet_type+0xba>

	case 0x0b:						// epdm
		packet_type_true = 1;
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	73fb      	strb	r3, [r7, #15]
		break;
 8000c3e:	e010      	b.n	8000c62 <check_packet_type+0xba>

	case 0x0c:						// camera
		packet_type_true = 1;
 8000c40:	2301      	movs	r3, #1
 8000c42:	73fb      	strb	r3, [r7, #15]
		break;
 8000c44:	e00d      	b.n	8000c62 <check_packet_type+0xba>

	case 0x0d:						// adcs
		packet_type_true = 1;
 8000c46:	2301      	movs	r3, #1
 8000c48:	73fb      	strb	r3, [r7, #15]
		break;
 8000c4a:	e00a      	b.n	8000c62 <check_packet_type+0xba>

	case 0xad:						// address data
		packet_type_true = 1;
 8000c4c:	2301      	movs	r3, #1
 8000c4e:	73fb      	strb	r3, [r7, #15]
		break;
 8000c50:	e007      	b.n	8000c62 <check_packet_type+0xba>

	case 0xda:						// hk data
		packet_type_true = 1;
 8000c52:	2301      	movs	r3, #1
 8000c54:	73fb      	strb	r3, [r7, #15]
		break;
 8000c56:	e004      	b.n	8000c62 <check_packet_type+0xba>

	case 0xaa:						// satlog
		packet_type_true = 1;
 8000c58:	2301      	movs	r3, #1
 8000c5a:	73fb      	strb	r3, [r7, #15]
		break;
 8000c5c:	e001      	b.n	8000c62 <check_packet_type+0xba>


	default:
		packet_type_true = 0;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	73fb      	strb	r3, [r7, #15]
	}

	return packet_type_true;
 8000c62:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c64:	4618      	mov	r0, r3
 8000c66:	3714      	adds	r7, #20
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bc80      	pop	{r7}
 8000c6c:	4770      	bx	lr
 8000c6e:	bf00      	nop

08000c70 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b085      	sub	sp, #20
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000c78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c7c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000c7e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	4313      	orrs	r3, r2
 8000c86:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000c88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c8c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	4013      	ands	r3, r2
 8000c92:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000c94:	68fb      	ldr	r3, [r7, #12]
}
 8000c96:	bf00      	nop
 8000c98:	3714      	adds	r7, #20
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bc80      	pop	{r7}
 8000c9e:	4770      	bx	lr

08000ca0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b086      	sub	sp, #24
 8000ca4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca6:	1d3b      	adds	r3, r7, #4
 8000ca8:	2200      	movs	r2, #0
 8000caa:	601a      	str	r2, [r3, #0]
 8000cac:	605a      	str	r2, [r3, #4]
 8000cae:	609a      	str	r2, [r3, #8]
 8000cb0:	60da      	str	r2, [r3, #12]
 8000cb2:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cb4:	2001      	movs	r0, #1
 8000cb6:	f7ff ffdb 	bl	8000c70 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cba:	2002      	movs	r0, #2
 8000cbc:	f7ff ffd8 	bl	8000c70 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cc0:	2004      	movs	r0, #4
 8000cc2:	f7ff ffd5 	bl	8000c70 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	f44f 410a 	mov.w	r1, #35328	; 0x8a00
 8000ccc:	481f      	ldr	r0, [pc, #124]	; (8000d4c <MX_GPIO_Init+0xac>)
 8000cce:	f003 fab1 	bl	8004234 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FE_CTRL3_Pin|FE_CTRL2_Pin|FE_CTRL1_Pin, GPIO_PIN_RESET);
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	2138      	movs	r1, #56	; 0x38
 8000cd6:	481e      	ldr	r0, [pc, #120]	; (8000d50 <MX_GPIO_Init+0xb0>)
 8000cd8:	f003 faac 	bl	8004234 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 8000cdc:	f44f 430a 	mov.w	r3, #35328	; 0x8a00
 8000ce0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cea:	2302      	movs	r3, #2
 8000cec:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cee:	1d3b      	adds	r3, r7, #4
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	4816      	ldr	r0, [pc, #88]	; (8000d4c <MX_GPIO_Init+0xac>)
 8000cf4:	f003 f93e 	bl	8003f74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = FE_CTRL3_Pin|FE_CTRL2_Pin|FE_CTRL1_Pin;
 8000cf8:	2338      	movs	r3, #56	; 0x38
 8000cfa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cfc:	2301      	movs	r3, #1
 8000cfe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d00:	2300      	movs	r3, #0
 8000d02:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d04:	2303      	movs	r3, #3
 8000d06:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d08:	1d3b      	adds	r3, r7, #4
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	4810      	ldr	r0, [pc, #64]	; (8000d50 <MX_GPIO_Init+0xb0>)
 8000d0e:	f003 f931 	bl	8003f74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = B1_Pin|B2_Pin;
 8000d12:	2303      	movs	r3, #3
 8000d14:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000d16:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000d1a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d20:	1d3b      	adds	r3, r7, #4
 8000d22:	4619      	mov	r1, r3
 8000d24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d28:	f003 f924 	bl	8003f74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B3_Pin;
 8000d2c:	2340      	movs	r3, #64	; 0x40
 8000d2e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000d30:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000d34:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d36:	2301      	movs	r3, #1
 8000d38:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B3_GPIO_Port, &GPIO_InitStruct);
 8000d3a:	1d3b      	adds	r3, r7, #4
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	4804      	ldr	r0, [pc, #16]	; (8000d50 <MX_GPIO_Init+0xb0>)
 8000d40:	f003 f918 	bl	8003f74 <HAL_GPIO_Init>

}
 8000d44:	bf00      	nop
 8000d46:	3718      	adds	r7, #24
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	48000400 	.word	0x48000400
 8000d50:	48000800 	.word	0x48000800

08000d54 <enableReqPA>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void enableReqPA() {
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0

	myDebug("\nCOM ACK Command TX to OBC, Length: %d bytes\r\n",
 8000d5a:	212b      	movs	r1, #43	; 0x2b
 8000d5c:	481e      	ldr	r0, [pc, #120]	; (8000dd8 <enableReqPA+0x84>)
 8000d5e:	f7ff fd0d 	bl	800077c <myDebug>
			sizeof(COM_UART_TX));

	if (HAL_UART_Transmit(&huart2, COM_UART_TX, com_uart_tx_p_len, 1000)
 8000d62:	4b1e      	ldr	r3, [pc, #120]	; (8000ddc <enableReqPA+0x88>)
 8000d64:	781b      	ldrb	r3, [r3, #0]
 8000d66:	b29a      	uxth	r2, r3
 8000d68:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d6c:	491c      	ldr	r1, [pc, #112]	; (8000de0 <enableReqPA+0x8c>)
 8000d6e:	481d      	ldr	r0, [pc, #116]	; (8000de4 <enableReqPA+0x90>)
 8000d70:	f005 fd8f 	bl	8006892 <HAL_UART_Transmit>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d00b      	beq.n	8000d92 <enableReqPA+0x3e>
			== HAL_OK
			|| HAL_UART_Transmit(&hlpuart1, COM_UART_TX, com_uart_tx_p_len,
 8000d7a:	4b18      	ldr	r3, [pc, #96]	; (8000ddc <enableReqPA+0x88>)
 8000d7c:	781b      	ldrb	r3, [r3, #0]
 8000d7e:	b29a      	uxth	r2, r3
 8000d80:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d84:	4916      	ldr	r1, [pc, #88]	; (8000de0 <enableReqPA+0x8c>)
 8000d86:	4818      	ldr	r0, [pc, #96]	; (8000de8 <enableReqPA+0x94>)
 8000d88:	f005 fd83 	bl	8006892 <HAL_UART_Transmit>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d11d      	bne.n	8000dce <enableReqPA+0x7a>
					1000) == HAL_OK) {

		IS_EN_REQ_PA = 1;
 8000d92:	4b16      	ldr	r3, [pc, #88]	; (8000dec <enableReqPA+0x98>)
 8000d94:	2201      	movs	r2, #1
 8000d96:	601a      	str	r2, [r3, #0]

		obc_ilen = COM_UART_TX[2];
 8000d98:	4b11      	ldr	r3, [pc, #68]	; (8000de0 <enableReqPA+0x8c>)
 8000d9a:	789a      	ldrb	r2, [r3, #2]
 8000d9c:	4b14      	ldr	r3, [pc, #80]	; (8000df0 <enableReqPA+0x9c>)
 8000d9e:	701a      	strb	r2, [r3, #0]

		for (int i = 0; i < sizeof(COM_UART_TX); i++) {
 8000da0:	2300      	movs	r3, #0
 8000da2:	607b      	str	r3, [r7, #4]
 8000da4:	e00a      	b.n	8000dbc <enableReqPA+0x68>
			myDebug("%02x ", COM_UART_TX[i]);
 8000da6:	4a0e      	ldr	r2, [pc, #56]	; (8000de0 <enableReqPA+0x8c>)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	4413      	add	r3, r2
 8000dac:	781b      	ldrb	r3, [r3, #0]
 8000dae:	4619      	mov	r1, r3
 8000db0:	4810      	ldr	r0, [pc, #64]	; (8000df4 <enableReqPA+0xa0>)
 8000db2:	f7ff fce3 	bl	800077c <myDebug>
		for (int i = 0; i < sizeof(COM_UART_TX); i++) {
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	3301      	adds	r3, #1
 8000dba:	607b      	str	r3, [r7, #4]
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	2b2a      	cmp	r3, #42	; 0x2a
 8000dc0:	d9f1      	bls.n	8000da6 <enableReqPA+0x52>
		}

		myDebug("\r\n");
 8000dc2:	480d      	ldr	r0, [pc, #52]	; (8000df8 <enableReqPA+0xa4>)
 8000dc4:	f7ff fcda 	bl	800077c <myDebug>

		myDebug("\n-------- OBC, ACK Waiting from OBC------- ");
 8000dc8:	480c      	ldr	r0, [pc, #48]	; (8000dfc <enableReqPA+0xa8>)
 8000dca:	f7ff fcd7 	bl	800077c <myDebug>
	}
}
 8000dce:	bf00      	nop
 8000dd0:	3708      	adds	r7, #8
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	0800c650 	.word	0x0800c650
 8000ddc:	20000002 	.word	0x20000002
 8000de0:	20000370 	.word	0x20000370
 8000de4:	20000688 	.word	0x20000688
 8000de8:	20000560 	.word	0x20000560
 8000dec:	200004f0 	.word	0x200004f0
 8000df0:	20000316 	.word	0x20000316
 8000df4:	0800c680 	.word	0x0800c680
 8000df8:	0800c688 	.word	0x0800c688
 8000dfc:	0800c68c 	.word	0x0800c68c

08000e00 <countsDataBetweenFlags>:

int countsDataBetweenFlags(uint8_t *data, int data_length) {
 8000e00:	b480      	push	{r7}
 8000e02:	b087      	sub	sp, #28
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
 8000e08:	6039      	str	r1, [r7, #0]
	int found_first_7e = 0;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	617b      	str	r3, [r7, #20]
	int start_index = 0, end_index = 0;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	613b      	str	r3, [r7, #16]
 8000e12:	2300      	movs	r3, #0
 8000e14:	60fb      	str	r3, [r7, #12]

	for (int i = 0; i < data_length; i++) {
 8000e16:	2300      	movs	r3, #0
 8000e18:	60bb      	str	r3, [r7, #8]
 8000e1a:	e013      	b.n	8000e44 <countsDataBetweenFlags+0x44>
		if (data[i] == 0x7e) {
 8000e1c:	68bb      	ldr	r3, [r7, #8]
 8000e1e:	687a      	ldr	r2, [r7, #4]
 8000e20:	4413      	add	r3, r2
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	2b7e      	cmp	r3, #126	; 0x7e
 8000e26:	d10a      	bne.n	8000e3e <countsDataBetweenFlags+0x3e>
			if (!found_first_7e) {
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d104      	bne.n	8000e38 <countsDataBetweenFlags+0x38>
				found_first_7e = 1;
 8000e2e:	2301      	movs	r3, #1
 8000e30:	617b      	str	r3, [r7, #20]
				start_index = i;
 8000e32:	68bb      	ldr	r3, [r7, #8]
 8000e34:	613b      	str	r3, [r7, #16]
 8000e36:	e002      	b.n	8000e3e <countsDataBetweenFlags+0x3e>
			} else {
				end_index = i;
 8000e38:	68bb      	ldr	r3, [r7, #8]
 8000e3a:	60fb      	str	r3, [r7, #12]
				break;
 8000e3c:	e006      	b.n	8000e4c <countsDataBetweenFlags+0x4c>
	for (int i = 0; i < data_length; i++) {
 8000e3e:	68bb      	ldr	r3, [r7, #8]
 8000e40:	3301      	adds	r3, #1
 8000e42:	60bb      	str	r3, [r7, #8]
 8000e44:	68ba      	ldr	r2, [r7, #8]
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	429a      	cmp	r2, r3
 8000e4a:	dbe7      	blt.n	8000e1c <countsDataBetweenFlags+0x1c>
			}
		}
	}

	if (end_index > start_index) {
 8000e4c:	68fa      	ldr	r2, [r7, #12]
 8000e4e:	693b      	ldr	r3, [r7, #16]
 8000e50:	429a      	cmp	r2, r3
 8000e52:	dd04      	ble.n	8000e5e <countsDataBetweenFlags+0x5e>
		return end_index - start_index + 1;
 8000e54:	68fa      	ldr	r2, [r7, #12]
 8000e56:	693b      	ldr	r3, [r7, #16]
 8000e58:	1ad3      	subs	r3, r2, r3
 8000e5a:	3301      	adds	r3, #1
 8000e5c:	e001      	b.n	8000e62 <countsDataBetweenFlags+0x62>
	} else {
		return -1; // Return -1 if two 0x7E flags are not found
 8000e5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	}
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	371c      	adds	r7, #28
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bc80      	pop	{r7}
 8000e6a:	4770      	bx	lr

08000e6c <setPacketParams>:

void setPacketParams(uint8_t buffer_length) {
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b082      	sub	sp, #8
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	4603      	mov	r3, r0
 8000e74:	71fb      	strb	r3, [r7, #7]
	pkt_params.PacketType = PACKET_TYPE_GFSK;
 8000e76:	4b11      	ldr	r3, [pc, #68]	; (8000ebc <setPacketParams+0x50>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	701a      	strb	r2, [r3, #0]
	pkt_params.Params.Gfsk.PayloadLength = buffer_length;
 8000e7c:	4a0f      	ldr	r2, [pc, #60]	; (8000ebc <setPacketParams+0x50>)
 8000e7e:	79fb      	ldrb	r3, [r7, #7]
 8000e80:	7213      	strb	r3, [r2, #8]
	pkt_params.Params.Gfsk.PreambleLength = 8;
 8000e82:	4b0e      	ldr	r3, [pc, #56]	; (8000ebc <setPacketParams+0x50>)
 8000e84:	2208      	movs	r2, #8
 8000e86:	805a      	strh	r2, [r3, #2]
	pkt_params.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8000e88:	4b0c      	ldr	r3, [pc, #48]	; (8000ebc <setPacketParams+0x50>)
 8000e8a:	2204      	movs	r2, #4
 8000e8c:	711a      	strb	r2, [r3, #4]
	pkt_params.Params.Gfsk.SyncWordLength = 3 << 3;
 8000e8e:	4b0b      	ldr	r3, [pc, #44]	; (8000ebc <setPacketParams+0x50>)
 8000e90:	2218      	movs	r2, #24
 8000e92:	715a      	strb	r2, [r3, #5]
	pkt_params.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8000e94:	4b09      	ldr	r3, [pc, #36]	; (8000ebc <setPacketParams+0x50>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	719a      	strb	r2, [r3, #6]
	pkt_params.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 8000e9a:	4b08      	ldr	r3, [pc, #32]	; (8000ebc <setPacketParams+0x50>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	71da      	strb	r2, [r3, #7]
	pkt_params.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8000ea0:	4b06      	ldr	r3, [pc, #24]	; (8000ebc <setPacketParams+0x50>)
 8000ea2:	22f2      	movs	r2, #242	; 0xf2
 8000ea4:	725a      	strb	r2, [r3, #9]
	pkt_params.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8000ea6:	4b05      	ldr	r3, [pc, #20]	; (8000ebc <setPacketParams+0x50>)
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	729a      	strb	r2, [r3, #10]
	SUBGRF_SetPacketParams(&pkt_params);
 8000eac:	4803      	ldr	r0, [pc, #12]	; (8000ebc <setPacketParams+0x50>)
 8000eae:	f009 ff05 	bl	800acbc <SUBGRF_SetPacketParams>

}
 8000eb2:	bf00      	nop
 8000eb4:	3708      	adds	r7, #8
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	2000027c 	.word	0x2000027c

08000ec0 <setModulationParams>:
void setModulationParams(unsigned long bitRate, unsigned long fDev) {
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
 8000ec8:	6039      	str	r1, [r7, #0]
	mod_params.PacketType = PACKET_TYPE_GFSK;
 8000eca:	4b0b      	ldr	r3, [pc, #44]	; (8000ef8 <setModulationParams+0x38>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	701a      	strb	r2, [r3, #0]
	mod_params.Params.Gfsk.Bandwidth = RX_BW_29300;
 8000ed0:	4b09      	ldr	r3, [pc, #36]	; (8000ef8 <setModulationParams+0x38>)
 8000ed2:	220d      	movs	r2, #13
 8000ed4:	735a      	strb	r2, [r3, #13]
	mod_params.Params.Gfsk.BitRate = bitRate;
 8000ed6:	4a08      	ldr	r2, [pc, #32]	; (8000ef8 <setModulationParams+0x38>)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	6053      	str	r3, [r2, #4]
	mod_params.Params.Gfsk.Fdev = fDev;
 8000edc:	4a06      	ldr	r2, [pc, #24]	; (8000ef8 <setModulationParams+0x38>)
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	6093      	str	r3, [r2, #8]
	mod_params.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8000ee2:	4b05      	ldr	r3, [pc, #20]	; (8000ef8 <setModulationParams+0x38>)
 8000ee4:	220b      	movs	r2, #11
 8000ee6:	731a      	strb	r2, [r3, #12]
	SUBGRF_SetModulationParams(&mod_params);
 8000ee8:	4803      	ldr	r0, [pc, #12]	; (8000ef8 <setModulationParams+0x38>)
 8000eea:	f009 fe15 	bl	800ab18 <SUBGRF_SetModulationParams>

}
 8000eee:	bf00      	nop
 8000ef0:	3708      	adds	r7, #8
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	20000290 	.word	0x20000290

08000efc <radioConfig>:

void radioConfig(uint8_t *buffer, uint8_t buffer_len) {
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b084      	sub	sp, #16
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
 8000f04:	460b      	mov	r3, r1
 8000f06:	70fb      	strb	r3, [r7, #3]
	SUBGRF_SetBufferBaseAddress(0x00, 0x00);
 8000f08:	2100      	movs	r1, #0
 8000f0a:	2000      	movs	r0, #0
 8000f0c:	f009 ff74 	bl	800adf8 <SUBGRF_SetBufferBaseAddress>
	SUBGRF_SetPayload(buffer, buffer_len);
 8000f10:	78fb      	ldrb	r3, [r7, #3]
 8000f12:	4619      	mov	r1, r3
 8000f14:	6878      	ldr	r0, [r7, #4]
 8000f16:	f009 f955 	bl	800a1c4 <SUBGRF_SetPayload>
	SUBGRF_SetSyncWord(( uint8_t[] ) { 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00,
 8000f1a:	4a0f      	ldr	r2, [pc, #60]	; (8000f58 <radioConfig+0x5c>)
 8000f1c:	f107 0308 	add.w	r3, r7, #8
 8000f20:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f24:	e883 0003 	stmia.w	r3, {r0, r1}
 8000f28:	f107 0308 	add.w	r3, r7, #8
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f009 f98e 	bl	800a24e <SUBGRF_SetSyncWord>
					0x00 });
	SUBGRF_SetWhiteningSeed(0x01FF);
 8000f32:	f240 10ff 	movw	r0, #511	; 0x1ff
 8000f36:	f009 f9d9 	bl	800a2ec <SUBGRF_SetWhiteningSeed>
	SUBGRF_SetPaConfig(PA_DUTY_CYCLE, HP_MAX, PA_SEL, 0x01);
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	2100      	movs	r1, #0
 8000f40:	2007      	movs	r0, #7
 8000f42:	f009 fc31 	bl	800a7a8 <SUBGRF_SetPaConfig>
	SUBGRF_SetTxParams(RFO_LP, POWER, RAMP_TIME);
 8000f46:	2202      	movs	r2, #2
 8000f48:	210e      	movs	r1, #14
 8000f4a:	2001      	movs	r0, #1
 8000f4c:	f009 fd16 	bl	800a97c <SUBGRF_SetTxParams>
}
 8000f50:	bf00      	nop
 8000f52:	3710      	adds	r7, #16
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	0800c6b8 	.word	0x0800c6b8

08000f5c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b088      	sub	sp, #32
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
	if (huart == &huart2 || huart == &hlpuart1 || huart == &huart1) {
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	4a9f      	ldr	r2, [pc, #636]	; (80011e4 <HAL_UART_RxCpltCallback+0x288>)
 8000f68:	4293      	cmp	r3, r2
 8000f6a:	d008      	beq.n	8000f7e <HAL_UART_RxCpltCallback+0x22>
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	4a9e      	ldr	r2, [pc, #632]	; (80011e8 <HAL_UART_RxCpltCallback+0x28c>)
 8000f70:	4293      	cmp	r3, r2
 8000f72:	d004      	beq.n	8000f7e <HAL_UART_RxCpltCallback+0x22>
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	4a9d      	ldr	r2, [pc, #628]	; (80011ec <HAL_UART_RxCpltCallback+0x290>)
 8000f78:	4293      	cmp	r3, r2
 8000f7a:	f040 8227 	bne.w	80013cc <HAL_UART_RxCpltCallback+0x470>

		if (OBC_HANDSHAKE_FLAG == 1) {
 8000f7e:	4b9c      	ldr	r3, [pc, #624]	; (80011f0 <HAL_UART_RxCpltCallback+0x294>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	2b01      	cmp	r3, #1
 8000f84:	f040 8222 	bne.w	80013cc <HAL_UART_RxCpltCallback+0x470>

			uint8_t header = 0x00;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	72fb      	strb	r3, [r7, #11]

			if (OBC_UART_RX[0] == header || OBC_UART_RX[0] != 0x53) {
 8000f8c:	4b99      	ldr	r3, [pc, #612]	; (80011f4 <HAL_UART_RxCpltCallback+0x298>)
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	7afa      	ldrb	r2, [r7, #11]
 8000f92:	429a      	cmp	r2, r3
 8000f94:	d003      	beq.n	8000f9e <HAL_UART_RxCpltCallback+0x42>
 8000f96:	4b97      	ldr	r3, [pc, #604]	; (80011f4 <HAL_UART_RxCpltCallback+0x298>)
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	2b53      	cmp	r3, #83	; 0x53
 8000f9c:	d011      	beq.n	8000fc2 <HAL_UART_RxCpltCallback+0x66>

				for (int loop1 = 0; loop1 < sizeof(OBC_UART_RX); loop1++) {
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	61fb      	str	r3, [r7, #28]
 8000fa2:	e00b      	b.n	8000fbc <HAL_UART_RxCpltCallback+0x60>
					OBC_UART_RX[loop1] = OBC_UART_RX[loop1 + 1];
 8000fa4:	69fb      	ldr	r3, [r7, #28]
 8000fa6:	3301      	adds	r3, #1
 8000fa8:	4a92      	ldr	r2, [pc, #584]	; (80011f4 <HAL_UART_RxCpltCallback+0x298>)
 8000faa:	5cd1      	ldrb	r1, [r2, r3]
 8000fac:	4a91      	ldr	r2, [pc, #580]	; (80011f4 <HAL_UART_RxCpltCallback+0x298>)
 8000fae:	69fb      	ldr	r3, [r7, #28]
 8000fb0:	4413      	add	r3, r2
 8000fb2:	460a      	mov	r2, r1
 8000fb4:	701a      	strb	r2, [r3, #0]
				for (int loop1 = 0; loop1 < sizeof(OBC_UART_RX); loop1++) {
 8000fb6:	69fb      	ldr	r3, [r7, #28]
 8000fb8:	3301      	adds	r3, #1
 8000fba:	61fb      	str	r3, [r7, #28]
 8000fbc:	69fb      	ldr	r3, [r7, #28]
 8000fbe:	2b54      	cmp	r3, #84	; 0x54
 8000fc0:	d9f0      	bls.n	8000fa4 <HAL_UART_RxCpltCallback+0x48>
				}
			}

			if (IS_EN_REQ_PA == 1) {
 8000fc2:	4b8d      	ldr	r3, [pc, #564]	; (80011f8 <HAL_UART_RxCpltCallback+0x29c>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	2b01      	cmp	r3, #1
 8000fc8:	d106      	bne.n	8000fd8 <HAL_UART_RxCpltCallback+0x7c>

				IS_EN_REQ_PA = 0;
 8000fca:	4b8b      	ldr	r3, [pc, #556]	; (80011f8 <HAL_UART_RxCpltCallback+0x29c>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	601a      	str	r2, [r3, #0]

				OBC_SUCCESS_DATA_RX_FLAG = 1;
 8000fd0:	4b8a      	ldr	r3, [pc, #552]	; (80011fc <HAL_UART_RxCpltCallback+0x2a0>)
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	601a      	str	r2, [r3, #0]
 8000fd6:	e1e9      	b.n	80013ac <HAL_UART_RxCpltCallback+0x450>

			} else {

				IS_EN_REQ_PA = 0;
 8000fd8:	4b87      	ldr	r3, [pc, #540]	; (80011f8 <HAL_UART_RxCpltCallback+0x29c>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	601a      	str	r2, [r3, #0]

				packet_type_true = check_packet_type(OBC_UART_RX);
 8000fde:	4885      	ldr	r0, [pc, #532]	; (80011f4 <HAL_UART_RxCpltCallback+0x298>)
 8000fe0:	f7ff fde2 	bl	8000ba8 <check_packet_type>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	4a86      	ldr	r2, [pc, #536]	; (8001200 <HAL_UART_RxCpltCallback+0x2a4>)
 8000fe8:	6013      	str	r3, [r2, #0]

				if (packet_type_true == 1) {
 8000fea:	4b85      	ldr	r3, [pc, #532]	; (8001200 <HAL_UART_RxCpltCallback+0x2a4>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	2b01      	cmp	r3, #1
 8000ff0:	f040 819f 	bne.w	8001332 <HAL_UART_RxCpltCallback+0x3d6>

					if (DIGIPEATER_STATUS == 1 && BEACON_COUNT == 0
 8000ff4:	4b83      	ldr	r3, [pc, #524]	; (8001204 <HAL_UART_RxCpltCallback+0x2a8>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	2b01      	cmp	r3, #1
 8000ffa:	f040 813f 	bne.w	800127c <HAL_UART_RxCpltCallback+0x320>
 8000ffe:	4b82      	ldr	r3, [pc, #520]	; (8001208 <HAL_UART_RxCpltCallback+0x2ac>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	2b00      	cmp	r3, #0
 8001004:	f040 813a 	bne.w	800127c <HAL_UART_RxCpltCallback+0x320>
							&& DIGIPEATER_RX_FLAG == 1) {
 8001008:	4b80      	ldr	r3, [pc, #512]	; (800120c <HAL_UART_RxCpltCallback+0x2b0>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	2b01      	cmp	r3, #1
 800100e:	f040 8135 	bne.w	800127c <HAL_UART_RxCpltCallback+0x320>

						OBC_SUCCESS_DATA_RX_FLAG = 0;
 8001012:	4b7a      	ldr	r3, [pc, #488]	; (80011fc <HAL_UART_RxCpltCallback+0x2a0>)
 8001014:	2200      	movs	r2, #0
 8001016:	601a      	str	r2, [r3, #0]
//					for (int i = 0; i < sizeof(OBC_UART_RX); i++) {
//						myDebug("%02x ", OBC_UART_RX[i]);
//					}
//					myDebug("\r\n");

						if (OBC_UART_RX[0] == 0x53 && OBC_UART_RX[83] == 0x7E) {
 8001018:	4b76      	ldr	r3, [pc, #472]	; (80011f4 <HAL_UART_RxCpltCallback+0x298>)
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	2b53      	cmp	r3, #83	; 0x53
 800101e:	f040 80a1 	bne.w	8001164 <HAL_UART_RxCpltCallback+0x208>
 8001022:	4b74      	ldr	r3, [pc, #464]	; (80011f4 <HAL_UART_RxCpltCallback+0x298>)
 8001024:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8001028:	2b7e      	cmp	r3, #126	; 0x7e
 800102a:	f040 809b 	bne.w	8001164 <HAL_UART_RxCpltCallback+0x208>
							myDebug(
 800102e:	4878      	ldr	r0, [pc, #480]	; (8001210 <HAL_UART_RxCpltCallback+0x2b4>)
 8001030:	f7ff fba4 	bl	800077c <myDebug>
									"--> Correct Digipeater Data received from OBC\n");
							obc_ilen = OBC_UART_RX[2];  //len of info
 8001034:	4b6f      	ldr	r3, [pc, #444]	; (80011f4 <HAL_UART_RxCpltCallback+0x298>)
 8001036:	789a      	ldrb	r2, [r3, #2]
 8001038:	4b76      	ldr	r3, [pc, #472]	; (8001214 <HAL_UART_RxCpltCallback+0x2b8>)
 800103a:	701a      	strb	r2, [r3, #0]
							PACKET_TYPE = OBC_UART_RX[1]; //packet_type
 800103c:	4b6d      	ldr	r3, [pc, #436]	; (80011f4 <HAL_UART_RxCpltCallback+0x298>)
 800103e:	785a      	ldrb	r2, [r3, #1]
 8001040:	4b75      	ldr	r3, [pc, #468]	; (8001218 <HAL_UART_RxCpltCallback+0x2bc>)
 8001042:	701a      	strb	r2, [r3, #0]
							DIGIPEATER_FLAG = 1;
 8001044:	4b75      	ldr	r3, [pc, #468]	; (800121c <HAL_UART_RxCpltCallback+0x2c0>)
 8001046:	2201      	movs	r2, #1
 8001048:	601a      	str	r2, [r3, #0]

							getAX25Packet(OBC_UART_RX, obc_ilen);
 800104a:	4b72      	ldr	r3, [pc, #456]	; (8001214 <HAL_UART_RxCpltCallback+0x2b8>)
 800104c:	781b      	ldrb	r3, [r3, #0]
 800104e:	4619      	mov	r1, r3
 8001050:	4868      	ldr	r0, [pc, #416]	; (80011f4 <HAL_UART_RxCpltCallback+0x298>)
 8001052:	f7ff faef 	bl	8000634 <getAX25Packet>

							tx_buffer_len = countsDataBetweenFlags(
 8001056:	2196      	movs	r1, #150	; 0x96
 8001058:	4871      	ldr	r0, [pc, #452]	; (8001220 <HAL_UART_RxCpltCallback+0x2c4>)
 800105a:	f7ff fed1 	bl	8000e00 <countsDataBetweenFlags>
 800105e:	4603      	mov	r3, r0
 8001060:	4a70      	ldr	r2, [pc, #448]	; (8001224 <HAL_UART_RxCpltCallback+0x2c8>)
 8001062:	6013      	str	r3, [r2, #0]
									temp_tx_buffer, sizeof(temp_tx_buffer));

//						myDebug(		"Digipeater Packet complete, ready to TX: 0x%x\r\n", temp_tx_buffer);
							for (int j = 0; j < tx_buffer_len; j++) {
 8001064:	2300      	movs	r3, #0
 8001066:	61bb      	str	r3, [r7, #24]
 8001068:	e00b      	b.n	8001082 <HAL_UART_RxCpltCallback+0x126>
								tx_buffer[j] = temp_tx_buffer[j];
 800106a:	4a6d      	ldr	r2, [pc, #436]	; (8001220 <HAL_UART_RxCpltCallback+0x2c4>)
 800106c:	69bb      	ldr	r3, [r7, #24]
 800106e:	4413      	add	r3, r2
 8001070:	7819      	ldrb	r1, [r3, #0]
 8001072:	4a6d      	ldr	r2, [pc, #436]	; (8001228 <HAL_UART_RxCpltCallback+0x2cc>)
 8001074:	69bb      	ldr	r3, [r7, #24]
 8001076:	4413      	add	r3, r2
 8001078:	460a      	mov	r2, r1
 800107a:	701a      	strb	r2, [r3, #0]
							for (int j = 0; j < tx_buffer_len; j++) {
 800107c:	69bb      	ldr	r3, [r7, #24]
 800107e:	3301      	adds	r3, #1
 8001080:	61bb      	str	r3, [r7, #24]
 8001082:	4b68      	ldr	r3, [pc, #416]	; (8001224 <HAL_UART_RxCpltCallback+0x2c8>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	69ba      	ldr	r2, [r7, #24]
 8001088:	429a      	cmp	r2, r3
 800108a:	dbee      	blt.n	800106a <HAL_UART_RxCpltCallback+0x10e>
//							myDebug("%02x ", tx_buffer[j]);
							}
//						myDebug("\r\n");
//						myDebug("size of tx_buffer = %d\r\n", tx_buffer_len);

							memset(OBC_UART_RX, '\0', obc_ilen);
 800108c:	4b61      	ldr	r3, [pc, #388]	; (8001214 <HAL_UART_RxCpltCallback+0x2b8>)
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	461a      	mov	r2, r3
 8001092:	2100      	movs	r1, #0
 8001094:	4857      	ldr	r0, [pc, #348]	; (80011f4 <HAL_UART_RxCpltCallback+0x298>)
 8001096:	f00a fe37 	bl	800bd08 <memset>
							memset(temp_tx_buffer, '\0',
 800109a:	2296      	movs	r2, #150	; 0x96
 800109c:	2100      	movs	r1, #0
 800109e:	4860      	ldr	r0, [pc, #384]	; (8001220 <HAL_UART_RxCpltCallback+0x2c4>)
 80010a0:	f00a fe32 	bl	800bd08 <memset>
									sizeof(temp_tx_buffer));

							delay_us(500000);
 80010a4:	4861      	ldr	r0, [pc, #388]	; (800122c <HAL_UART_RxCpltCallback+0x2d0>)
 80010a6:	f7ff fb4f 	bl	8000748 <delay_us>

							setPacketParams(tx_buffer_len);
 80010aa:	4b5e      	ldr	r3, [pc, #376]	; (8001224 <HAL_UART_RxCpltCallback+0x2c8>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	b2db      	uxtb	r3, r3
 80010b0:	4618      	mov	r0, r3
 80010b2:	f7ff fedb 	bl	8000e6c <setPacketParams>
							setModulationParams(GFSK_BR_1200,
 80010b6:	f640 31b8 	movw	r1, #3000	; 0xbb8
 80010ba:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 80010be:	f7ff feff 	bl	8000ec0 <setModulationParams>
							GFSK_FDEV_1200);
							radioConfig(tx_buffer, tx_buffer_len);
 80010c2:	4b58      	ldr	r3, [pc, #352]	; (8001224 <HAL_UART_RxCpltCallback+0x2c8>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	b2db      	uxtb	r3, r3
 80010c8:	4619      	mov	r1, r3
 80010ca:	4857      	ldr	r0, [pc, #348]	; (8001228 <HAL_UART_RxCpltCallback+0x2cc>)
 80010cc:	f7ff ff16 	bl	8000efc <radioConfig>

							myDebug(
 80010d0:	4857      	ldr	r0, [pc, #348]	; (8001230 <HAL_UART_RxCpltCallback+0x2d4>)
 80010d2:	f7ff fb53 	bl	800077c <myDebug>
									"\n########## TX Configuration: ##########\n");

							myDebug("FREQUENCY MODS: DOWNLINK FREQ: %lu Hz\r\n",
 80010d6:	4957      	ldr	r1, [pc, #348]	; (8001234 <HAL_UART_RxCpltCallback+0x2d8>)
 80010d8:	4857      	ldr	r0, [pc, #348]	; (8001238 <HAL_UART_RxCpltCallback+0x2dc>)
 80010da:	f7ff fb4f 	bl	800077c <myDebug>
							FREQ_437_MHZ);
							myDebug("Bit Rate: 	%d\n\r",
 80010de:	4b57      	ldr	r3, [pc, #348]	; (800123c <HAL_UART_RxCpltCallback+0x2e0>)
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	4619      	mov	r1, r3
 80010e4:	4856      	ldr	r0, [pc, #344]	; (8001240 <HAL_UART_RxCpltCallback+0x2e4>)
 80010e6:	f7ff fb49 	bl	800077c <myDebug>
									mod_params.Params.Gfsk.BitRate);
							myDebug("Frequency Deviation: 	%d\n\r",
 80010ea:	4b54      	ldr	r3, [pc, #336]	; (800123c <HAL_UART_RxCpltCallback+0x2e0>)
 80010ec:	689b      	ldr	r3, [r3, #8]
 80010ee:	4619      	mov	r1, r3
 80010f0:	4854      	ldr	r0, [pc, #336]	; (8001244 <HAL_UART_RxCpltCallback+0x2e8>)
 80010f2:	f7ff fb43 	bl	800077c <myDebug>
									mod_params.Params.Gfsk.Fdev);
							myDebug("RECEVING BANDWIDTH: 	%d\n\r",
									mod_params.Params.Gfsk.Bandwidth);
 80010f6:	4b51      	ldr	r3, [pc, #324]	; (800123c <HAL_UART_RxCpltCallback+0x2e0>)
 80010f8:	7b5b      	ldrb	r3, [r3, #13]
							myDebug("RECEVING BANDWIDTH: 	%d\n\r",
 80010fa:	4619      	mov	r1, r3
 80010fc:	4852      	ldr	r0, [pc, #328]	; (8001248 <HAL_UART_RxCpltCallback+0x2ec>)
 80010fe:	f7ff fb3d 	bl	800077c <myDebug>
							myDebug("Packet Type 			%d\n\r",
									pkt_params.PacketType);
 8001102:	4b52      	ldr	r3, [pc, #328]	; (800124c <HAL_UART_RxCpltCallback+0x2f0>)
 8001104:	781b      	ldrb	r3, [r3, #0]
							myDebug("Packet Type 			%d\n\r",
 8001106:	4619      	mov	r1, r3
 8001108:	4851      	ldr	r0, [pc, #324]	; (8001250 <HAL_UART_RxCpltCallback+0x2f4>)
 800110a:	f7ff fb37 	bl	800077c <myDebug>
							myDebug("PayloadLength 			%d\n\r",
									pkt_params.Params.Gfsk.PayloadLength);
 800110e:	4b4f      	ldr	r3, [pc, #316]	; (800124c <HAL_UART_RxCpltCallback+0x2f0>)
 8001110:	7a1b      	ldrb	r3, [r3, #8]
							myDebug("PayloadLength 			%d\n\r",
 8001112:	4619      	mov	r1, r3
 8001114:	484f      	ldr	r0, [pc, #316]	; (8001254 <HAL_UART_RxCpltCallback+0x2f8>)
 8001116:	f7ff fb31 	bl	800077c <myDebug>
							myDebug("PreambleLength 		%d\n\r",
									pkt_params.Params.Gfsk.PreambleLength);
 800111a:	4b4c      	ldr	r3, [pc, #304]	; (800124c <HAL_UART_RxCpltCallback+0x2f0>)
 800111c:	885b      	ldrh	r3, [r3, #2]
							myDebug("PreambleLength 		%d\n\r",
 800111e:	4619      	mov	r1, r3
 8001120:	484d      	ldr	r0, [pc, #308]	; (8001258 <HAL_UART_RxCpltCallback+0x2fc>)
 8001122:	f7ff fb2b 	bl	800077c <myDebug>
							myDebug("PreambleMinDetect		%d\n\r",
									pkt_params.Params.Gfsk.PreambleMinDetect);
 8001126:	4b49      	ldr	r3, [pc, #292]	; (800124c <HAL_UART_RxCpltCallback+0x2f0>)
 8001128:	791b      	ldrb	r3, [r3, #4]
							myDebug("PreambleMinDetect		%d\n\r",
 800112a:	4619      	mov	r1, r3
 800112c:	484b      	ldr	r0, [pc, #300]	; (800125c <HAL_UART_RxCpltCallback+0x300>)
 800112e:	f7ff fb25 	bl	800077c <myDebug>
							myDebug("HeaderType 			%d\n\r",
									pkt_params.Params.Gfsk.HeaderType);
 8001132:	4b46      	ldr	r3, [pc, #280]	; (800124c <HAL_UART_RxCpltCallback+0x2f0>)
 8001134:	79db      	ldrb	r3, [r3, #7]
							myDebug("HeaderType 			%d\n\r",
 8001136:	4619      	mov	r1, r3
 8001138:	4849      	ldr	r0, [pc, #292]	; (8001260 <HAL_UART_RxCpltCallback+0x304>)
 800113a:	f7ff fb1f 	bl	800077c <myDebug>
							myDebug(
 800113e:	4849      	ldr	r0, [pc, #292]	; (8001264 <HAL_UART_RxCpltCallback+0x308>)
 8001140:	f7ff fb1c 	bl	800077c <myDebug>
									"__________*******************__________\r\n");

							SUBGRF_SetRfFrequency(FREQ_437_MHZ);
 8001144:	483b      	ldr	r0, [pc, #236]	; (8001234 <HAL_UART_RxCpltCallback+0x2d8>)
 8001146:	f009 fbad 	bl	800a8a4 <SUBGRF_SetRfFrequency>
							SUBGRF_SetSwitch(RFO_LP, RFSWITCH_TX);
 800114a:	2101      	movs	r1, #1
 800114c:	2001      	movs	r0, #1
 800114e:	f009 fff1 	bl	800b134 <SUBGRF_SetSwitch>
							SUBGRF_SendPayload(tx_buffer, tx_buffer_len, 0);
 8001152:	4b34      	ldr	r3, [pc, #208]	; (8001224 <HAL_UART_RxCpltCallback+0x2c8>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	b2db      	uxtb	r3, r3
 8001158:	2200      	movs	r2, #0
 800115a:	4619      	mov	r1, r3
 800115c:	4832      	ldr	r0, [pc, #200]	; (8001228 <HAL_UART_RxCpltCallback+0x2cc>)
 800115e:	f009 f863 	bl	800a228 <SUBGRF_SendPayload>
						if (OBC_UART_RX[0] == 0x53 && OBC_UART_RX[83] == 0x7E) {
 8001162:	e122      	b.n	80013aa <HAL_UART_RxCpltCallback+0x44e>

						} else {
							myDebug(
 8001164:	4840      	ldr	r0, [pc, #256]	; (8001268 <HAL_UART_RxCpltCallback+0x30c>)
 8001166:	f7ff fb09 	bl	800077c <myDebug>
									"*** Incorrect Digipeater Data received from OBC\n");
							if (HAL_UART_Transmit(&huart2, OBC_UART_RX,
 800116a:	4b40      	ldr	r3, [pc, #256]	; (800126c <HAL_UART_RxCpltCallback+0x310>)
 800116c:	781b      	ldrb	r3, [r3, #0]
 800116e:	b29a      	uxth	r2, r3
 8001170:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001174:	491f      	ldr	r1, [pc, #124]	; (80011f4 <HAL_UART_RxCpltCallback+0x298>)
 8001176:	481b      	ldr	r0, [pc, #108]	; (80011e4 <HAL_UART_RxCpltCallback+0x288>)
 8001178:	f005 fb8b 	bl	8006892 <HAL_UART_Transmit>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d00c      	beq.n	800119c <HAL_UART_RxCpltCallback+0x240>
									obc_plen, 2000) == HAL_OK
									|| HAL_UART_Transmit(&hlpuart1, OBC_UART_RX,
 8001182:	4b3a      	ldr	r3, [pc, #232]	; (800126c <HAL_UART_RxCpltCallback+0x310>)
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	b29a      	uxth	r2, r3
 8001188:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800118c:	4919      	ldr	r1, [pc, #100]	; (80011f4 <HAL_UART_RxCpltCallback+0x298>)
 800118e:	4816      	ldr	r0, [pc, #88]	; (80011e8 <HAL_UART_RxCpltCallback+0x28c>)
 8001190:	f005 fb7f 	bl	8006892 <HAL_UART_Transmit>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	f040 8107 	bne.w	80013aa <HAL_UART_RxCpltCallback+0x44e>
											obc_plen, 2000) == HAL_OK) {
								myDebug(
 800119c:	2155      	movs	r1, #85	; 0x55
 800119e:	4834      	ldr	r0, [pc, #208]	; (8001270 <HAL_UART_RxCpltCallback+0x314>)
 80011a0:	f7ff faec 	bl	800077c <myDebug>
										"*** Incorrect Digipeater Data re-transmit to OBC, Length: %d bytes\r\n",
										sizeof(OBC_UART_RX));

								for (int i = 0; i < sizeof(OBC_UART_RX); i++) {
 80011a4:	2300      	movs	r3, #0
 80011a6:	617b      	str	r3, [r7, #20]
 80011a8:	e00a      	b.n	80011c0 <HAL_UART_RxCpltCallback+0x264>
									myDebug("%02x ", OBC_UART_RX[i]);
 80011aa:	4a12      	ldr	r2, [pc, #72]	; (80011f4 <HAL_UART_RxCpltCallback+0x298>)
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	4413      	add	r3, r2
 80011b0:	781b      	ldrb	r3, [r3, #0]
 80011b2:	4619      	mov	r1, r3
 80011b4:	482f      	ldr	r0, [pc, #188]	; (8001274 <HAL_UART_RxCpltCallback+0x318>)
 80011b6:	f7ff fae1 	bl	800077c <myDebug>
								for (int i = 0; i < sizeof(OBC_UART_RX); i++) {
 80011ba:	697b      	ldr	r3, [r7, #20]
 80011bc:	3301      	adds	r3, #1
 80011be:	617b      	str	r3, [r7, #20]
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	2b54      	cmp	r3, #84	; 0x54
 80011c4:	d9f1      	bls.n	80011aa <HAL_UART_RxCpltCallback+0x24e>
								}

								myDebug("\r\n");
 80011c6:	482c      	ldr	r0, [pc, #176]	; (8001278 <HAL_UART_RxCpltCallback+0x31c>)
 80011c8:	f7ff fad8 	bl	800077c <myDebug>

								memset(OBC_UART_RX, '\0', sizeof(OBC_UART_RX));
 80011cc:	2255      	movs	r2, #85	; 0x55
 80011ce:	2100      	movs	r1, #0
 80011d0:	4808      	ldr	r0, [pc, #32]	; (80011f4 <HAL_UART_RxCpltCallback+0x298>)
 80011d2:	f00a fd99 	bl	800bd08 <memset>

								OBC_SUCCESS_DATA_RX_FLAG = 0;
 80011d6:	4b09      	ldr	r3, [pc, #36]	; (80011fc <HAL_UART_RxCpltCallback+0x2a0>)
 80011d8:	2200      	movs	r2, #0
 80011da:	601a      	str	r2, [r3, #0]
								DIGIPEATER_FLAG = 0;
 80011dc:	4b0f      	ldr	r3, [pc, #60]	; (800121c <HAL_UART_RxCpltCallback+0x2c0>)
 80011de:	2200      	movs	r2, #0
 80011e0:	601a      	str	r2, [r3, #0]
						if (OBC_UART_RX[0] == 0x53 && OBC_UART_RX[83] == 0x7E) {
 80011e2:	e0e2      	b.n	80013aa <HAL_UART_RxCpltCallback+0x44e>
 80011e4:	20000688 	.word	0x20000688
 80011e8:	20000560 	.word	0x20000560
 80011ec:	200005f4 	.word	0x200005f4
 80011f0:	200004d4 	.word	0x200004d4
 80011f4:	20000318 	.word	0x20000318
 80011f8:	200004f0 	.word	0x200004f0
 80011fc:	2000039c 	.word	0x2000039c
 8001200:	200004e8 	.word	0x200004e8
 8001204:	200004d8 	.word	0x200004d8
 8001208:	20000004 	.word	0x20000004
 800120c:	200004e4 	.word	0x200004e4
 8001210:	0800c6c0 	.word	0x0800c6c0
 8001214:	20000316 	.word	0x20000316
 8001218:	200004dc 	.word	0x200004dc
 800121c:	200004e0 	.word	0x200004e0
 8001220:	200003a0 	.word	0x200003a0
 8001224:	200004d0 	.word	0x200004d0
 8001228:	20000438 	.word	0x20000438
 800122c:	0007a120 	.word	0x0007a120
 8001230:	0800c6f0 	.word	0x0800c6f0
 8001234:	1a11d018 	.word	0x1a11d018
 8001238:	0800c71c 	.word	0x0800c71c
 800123c:	20000290 	.word	0x20000290
 8001240:	0800c744 	.word	0x0800c744
 8001244:	0800c754 	.word	0x0800c754
 8001248:	0800c770 	.word	0x0800c770
 800124c:	2000027c 	.word	0x2000027c
 8001250:	0800c78c 	.word	0x0800c78c
 8001254:	0800c7a0 	.word	0x0800c7a0
 8001258:	0800c7b8 	.word	0x0800c7b8
 800125c:	0800c7d0 	.word	0x0800c7d0
 8001260:	0800c7e8 	.word	0x0800c7e8
 8001264:	0800c7fc 	.word	0x0800c7fc
 8001268:	0800c828 	.word	0x0800c828
 800126c:	20000001 	.word	0x20000001
 8001270:	0800c85c 	.word	0x0800c85c
 8001274:	0800c680 	.word	0x0800c680
 8001278:	0800c688 	.word	0x0800c688
//					for (int i = 0; i < sizeof(OBC_UART_RX); i++) {
//						myDebug("%02x ", OBC_UART_RX[i]);
//					}
//					myDebug("\r\n");

						if (OBC_UART_RX[0] == 0x53
 800127c:	4b55      	ldr	r3, [pc, #340]	; (80013d4 <HAL_UART_RxCpltCallback+0x478>)
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	2b53      	cmp	r3, #83	; 0x53
 8001282:	d11a      	bne.n	80012ba <HAL_UART_RxCpltCallback+0x35e>
								&& OBC_UART_RX[(83)] == 0x7E) {
 8001284:	4b53      	ldr	r3, [pc, #332]	; (80013d4 <HAL_UART_RxCpltCallback+0x478>)
 8001286:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800128a:	2b7e      	cmp	r3, #126	; 0x7e
 800128c:	d115      	bne.n	80012ba <HAL_UART_RxCpltCallback+0x35e>
//						myDebug("--> Correct command received from OBC\n");
							obc_ilen = OBC_UART_RX[2];  //len of info
 800128e:	4b51      	ldr	r3, [pc, #324]	; (80013d4 <HAL_UART_RxCpltCallback+0x478>)
 8001290:	789a      	ldrb	r2, [r3, #2]
 8001292:	4b51      	ldr	r3, [pc, #324]	; (80013d8 <HAL_UART_RxCpltCallback+0x47c>)
 8001294:	701a      	strb	r2, [r3, #0]
							PACKET_TYPE = OBC_UART_RX[1]; //packet_type
 8001296:	4b4f      	ldr	r3, [pc, #316]	; (80013d4 <HAL_UART_RxCpltCallback+0x478>)
 8001298:	785a      	ldrb	r2, [r3, #1]
 800129a:	4b50      	ldr	r3, [pc, #320]	; (80013dc <HAL_UART_RxCpltCallback+0x480>)
 800129c:	701a      	strb	r2, [r3, #0]

							if (PACKET_TYPE == 0xB1) {
 800129e:	4b4f      	ldr	r3, [pc, #316]	; (80013dc <HAL_UART_RxCpltCallback+0x480>)
 80012a0:	781b      	ldrb	r3, [r3, #0]
 80012a2:	2bb1      	cmp	r3, #177	; 0xb1
 80012a4:	d105      	bne.n	80012b2 <HAL_UART_RxCpltCallback+0x356>
								BEACON_COUNT = 2;
 80012a6:	4b4e      	ldr	r3, [pc, #312]	; (80013e0 <HAL_UART_RxCpltCallback+0x484>)
 80012a8:	2202      	movs	r2, #2
 80012aa:	601a      	str	r2, [r3, #0]
								COUNT_BEACON = 2;
 80012ac:	4b4d      	ldr	r3, [pc, #308]	; (80013e4 <HAL_UART_RxCpltCallback+0x488>)
 80012ae:	2202      	movs	r2, #2
 80012b0:	601a      	str	r2, [r3, #0]
							}

							OBC_SUCCESS_DATA_RX_FLAG = 1;
 80012b2:	4b4d      	ldr	r3, [pc, #308]	; (80013e8 <HAL_UART_RxCpltCallback+0x48c>)
 80012b4:	2201      	movs	r2, #1
 80012b6:	601a      	str	r2, [r3, #0]
 80012b8:	e078      	b.n	80013ac <HAL_UART_RxCpltCallback+0x450>
						} else {
							myDebug(
 80012ba:	484c      	ldr	r0, [pc, #304]	; (80013ec <HAL_UART_RxCpltCallback+0x490>)
 80012bc:	f7ff fa5e 	bl	800077c <myDebug>
									"*** Incorrect command received from OBC\n");
							if (HAL_UART_Transmit(&huart2, OBC_UART_RX,
 80012c0:	4b4b      	ldr	r3, [pc, #300]	; (80013f0 <HAL_UART_RxCpltCallback+0x494>)
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	b29a      	uxth	r2, r3
 80012c6:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80012ca:	4942      	ldr	r1, [pc, #264]	; (80013d4 <HAL_UART_RxCpltCallback+0x478>)
 80012cc:	4849      	ldr	r0, [pc, #292]	; (80013f4 <HAL_UART_RxCpltCallback+0x498>)
 80012ce:	f005 fae0 	bl	8006892 <HAL_UART_Transmit>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d00b      	beq.n	80012f0 <HAL_UART_RxCpltCallback+0x394>
									obc_plen, 2000) == HAL_OK
									|| HAL_UART_Transmit(&hlpuart1, OBC_UART_RX,
 80012d8:	4b45      	ldr	r3, [pc, #276]	; (80013f0 <HAL_UART_RxCpltCallback+0x494>)
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	b29a      	uxth	r2, r3
 80012de:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80012e2:	493c      	ldr	r1, [pc, #240]	; (80013d4 <HAL_UART_RxCpltCallback+0x478>)
 80012e4:	4844      	ldr	r0, [pc, #272]	; (80013f8 <HAL_UART_RxCpltCallback+0x49c>)
 80012e6:	f005 fad4 	bl	8006892 <HAL_UART_Transmit>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d15d      	bne.n	80013ac <HAL_UART_RxCpltCallback+0x450>
											obc_plen, 2000) == HAL_OK) {
								myDebug(
 80012f0:	2155      	movs	r1, #85	; 0x55
 80012f2:	4842      	ldr	r0, [pc, #264]	; (80013fc <HAL_UART_RxCpltCallback+0x4a0>)
 80012f4:	f7ff fa42 	bl	800077c <myDebug>
										"*** Incorrect command re-transmit to OBC, Length: %d bytes\r\n",
										sizeof(OBC_UART_RX));

								for (int i = 0; i < sizeof(OBC_UART_RX); i++) {
 80012f8:	2300      	movs	r3, #0
 80012fa:	613b      	str	r3, [r7, #16]
 80012fc:	e00a      	b.n	8001314 <HAL_UART_RxCpltCallback+0x3b8>
									myDebug("%02x ", OBC_UART_RX[i]);
 80012fe:	4a35      	ldr	r2, [pc, #212]	; (80013d4 <HAL_UART_RxCpltCallback+0x478>)
 8001300:	693b      	ldr	r3, [r7, #16]
 8001302:	4413      	add	r3, r2
 8001304:	781b      	ldrb	r3, [r3, #0]
 8001306:	4619      	mov	r1, r3
 8001308:	483d      	ldr	r0, [pc, #244]	; (8001400 <HAL_UART_RxCpltCallback+0x4a4>)
 800130a:	f7ff fa37 	bl	800077c <myDebug>
								for (int i = 0; i < sizeof(OBC_UART_RX); i++) {
 800130e:	693b      	ldr	r3, [r7, #16]
 8001310:	3301      	adds	r3, #1
 8001312:	613b      	str	r3, [r7, #16]
 8001314:	693b      	ldr	r3, [r7, #16]
 8001316:	2b54      	cmp	r3, #84	; 0x54
 8001318:	d9f1      	bls.n	80012fe <HAL_UART_RxCpltCallback+0x3a2>
								}

								myDebug("\r\n");
 800131a:	483a      	ldr	r0, [pc, #232]	; (8001404 <HAL_UART_RxCpltCallback+0x4a8>)
 800131c:	f7ff fa2e 	bl	800077c <myDebug>

								memset(OBC_UART_RX, '\0', sizeof(OBC_UART_RX));
 8001320:	2255      	movs	r2, #85	; 0x55
 8001322:	2100      	movs	r1, #0
 8001324:	482b      	ldr	r0, [pc, #172]	; (80013d4 <HAL_UART_RxCpltCallback+0x478>)
 8001326:	f00a fcef 	bl	800bd08 <memset>

								OBC_SUCCESS_DATA_RX_FLAG = 0;
 800132a:	4b2f      	ldr	r3, [pc, #188]	; (80013e8 <HAL_UART_RxCpltCallback+0x48c>)
 800132c:	2200      	movs	r2, #0
 800132e:	601a      	str	r2, [r3, #0]
 8001330:	e03c      	b.n	80013ac <HAL_UART_RxCpltCallback+0x450>
							}
						}
					}
				} else {
					myDebug("*** Incorrect packet type received from OBC\n");
 8001332:	4835      	ldr	r0, [pc, #212]	; (8001408 <HAL_UART_RxCpltCallback+0x4ac>)
 8001334:	f7ff fa22 	bl	800077c <myDebug>

					if (HAL_UART_Transmit(&huart2, OBC_UART_RX, obc_plen, 1000)
 8001338:	4b2d      	ldr	r3, [pc, #180]	; (80013f0 <HAL_UART_RxCpltCallback+0x494>)
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	b29a      	uxth	r2, r3
 800133e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001342:	4924      	ldr	r1, [pc, #144]	; (80013d4 <HAL_UART_RxCpltCallback+0x478>)
 8001344:	482b      	ldr	r0, [pc, #172]	; (80013f4 <HAL_UART_RxCpltCallback+0x498>)
 8001346:	f005 faa4 	bl	8006892 <HAL_UART_Transmit>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d00b      	beq.n	8001368 <HAL_UART_RxCpltCallback+0x40c>
							== HAL_OK
							|| HAL_UART_Transmit(&hlpuart1, OBC_UART_RX,
 8001350:	4b27      	ldr	r3, [pc, #156]	; (80013f0 <HAL_UART_RxCpltCallback+0x494>)
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	b29a      	uxth	r2, r3
 8001356:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800135a:	491e      	ldr	r1, [pc, #120]	; (80013d4 <HAL_UART_RxCpltCallback+0x478>)
 800135c:	4826      	ldr	r0, [pc, #152]	; (80013f8 <HAL_UART_RxCpltCallback+0x49c>)
 800135e:	f005 fa98 	bl	8006892 <HAL_UART_Transmit>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d121      	bne.n	80013ac <HAL_UART_RxCpltCallback+0x450>
									obc_plen, 1000) == HAL_OK) {
						myDebug(
 8001368:	2155      	movs	r1, #85	; 0x55
 800136a:	4828      	ldr	r0, [pc, #160]	; (800140c <HAL_UART_RxCpltCallback+0x4b0>)
 800136c:	f7ff fa06 	bl	800077c <myDebug>
								"*** Incorrect command re-transmit to OBC, Length: %d\r\n",
								sizeof(OBC_UART_RX));

						for (int i = 0; i < sizeof(OBC_UART_RX); i++) {
 8001370:	2300      	movs	r3, #0
 8001372:	60fb      	str	r3, [r7, #12]
 8001374:	e00a      	b.n	800138c <HAL_UART_RxCpltCallback+0x430>
							myDebug("%02x ", OBC_UART_RX[i]);
 8001376:	4a17      	ldr	r2, [pc, #92]	; (80013d4 <HAL_UART_RxCpltCallback+0x478>)
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	4413      	add	r3, r2
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	4619      	mov	r1, r3
 8001380:	481f      	ldr	r0, [pc, #124]	; (8001400 <HAL_UART_RxCpltCallback+0x4a4>)
 8001382:	f7ff f9fb 	bl	800077c <myDebug>
						for (int i = 0; i < sizeof(OBC_UART_RX); i++) {
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	3301      	adds	r3, #1
 800138a:	60fb      	str	r3, [r7, #12]
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	2b54      	cmp	r3, #84	; 0x54
 8001390:	d9f1      	bls.n	8001376 <HAL_UART_RxCpltCallback+0x41a>
						}

						myDebug("\r\n");
 8001392:	481c      	ldr	r0, [pc, #112]	; (8001404 <HAL_UART_RxCpltCallback+0x4a8>)
 8001394:	f7ff f9f2 	bl	800077c <myDebug>

						memset(OBC_UART_RX, '\0', sizeof(OBC_UART_RX));
 8001398:	2255      	movs	r2, #85	; 0x55
 800139a:	2100      	movs	r1, #0
 800139c:	480d      	ldr	r0, [pc, #52]	; (80013d4 <HAL_UART_RxCpltCallback+0x478>)
 800139e:	f00a fcb3 	bl	800bd08 <memset>

						OBC_SUCCESS_DATA_RX_FLAG = 0;
 80013a2:	4b11      	ldr	r3, [pc, #68]	; (80013e8 <HAL_UART_RxCpltCallback+0x48c>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	601a      	str	r2, [r3, #0]
 80013a8:	e000      	b.n	80013ac <HAL_UART_RxCpltCallback+0x450>
						if (OBC_UART_RX[0] == 0x53 && OBC_UART_RX[83] == 0x7E) {
 80013aa:	bf00      	nop
					}
				}
			}

			HAL_UART_Receive_DMA(&huart2, OBC_UART_RX, obc_plen);
 80013ac:	4b10      	ldr	r3, [pc, #64]	; (80013f0 <HAL_UART_RxCpltCallback+0x494>)
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	b29b      	uxth	r3, r3
 80013b2:	461a      	mov	r2, r3
 80013b4:	4907      	ldr	r1, [pc, #28]	; (80013d4 <HAL_UART_RxCpltCallback+0x478>)
 80013b6:	480f      	ldr	r0, [pc, #60]	; (80013f4 <HAL_UART_RxCpltCallback+0x498>)
 80013b8:	f005 fbb6 	bl	8006b28 <HAL_UART_Receive_DMA>

			HAL_UART_Receive_DMA(&hlpuart1, OBC_UART_RX, obc_plen);
 80013bc:	4b0c      	ldr	r3, [pc, #48]	; (80013f0 <HAL_UART_RxCpltCallback+0x494>)
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	b29b      	uxth	r3, r3
 80013c2:	461a      	mov	r2, r3
 80013c4:	4903      	ldr	r1, [pc, #12]	; (80013d4 <HAL_UART_RxCpltCallback+0x478>)
 80013c6:	480c      	ldr	r0, [pc, #48]	; (80013f8 <HAL_UART_RxCpltCallback+0x49c>)
 80013c8:	f005 fbae 	bl	8006b28 <HAL_UART_Receive_DMA>
		}
	}
}
 80013cc:	bf00      	nop
 80013ce:	3720      	adds	r7, #32
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	20000318 	.word	0x20000318
 80013d8:	20000316 	.word	0x20000316
 80013dc:	200004dc 	.word	0x200004dc
 80013e0:	20000004 	.word	0x20000004
 80013e4:	20000008 	.word	0x20000008
 80013e8:	2000039c 	.word	0x2000039c
 80013ec:	0800c8a4 	.word	0x0800c8a4
 80013f0:	20000001 	.word	0x20000001
 80013f4:	20000688 	.word	0x20000688
 80013f8:	20000560 	.word	0x20000560
 80013fc:	0800c8d0 	.word	0x0800c8d0
 8001400:	0800c680 	.word	0x0800c680
 8001404:	0800c688 	.word	0x0800c688
 8001408:	0800c910 	.word	0x0800c910
 800140c:	0800c940 	.word	0x0800c940

08001410 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001414:	b0b7      	sub	sp, #220	; 0xdc
 8001416:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001418:	f002 f8b2 	bl	8003580 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800141c:	f000 feda 	bl	80021d4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001420:	f7ff fc3e 	bl	8000ca0 <MX_GPIO_Init>
	MX_DMA_Init();
 8001424:	f7ff f9fc 	bl	8000820 <MX_DMA_Init>
	MX_USART2_UART_Init();
 8001428:	f001 fe2e 	bl	8003088 <MX_USART2_UART_Init>
	MX_LPUART1_UART_Init();
 800142c:	f001 fd94 	bl	8002f58 <MX_LPUART1_UART_Init>
	MX_USART1_UART_Init();
 8001430:	f001 fdde 	bl	8002ff0 <MX_USART1_UART_Init>
	MX_SubGHz_Phy_Init();
 8001434:	f00a f8bd 	bl	800b5b2 <MX_SubGHz_Phy_Init>
	MX_TIM2_Init();
 8001438:	f001 fc58 	bl	8002cec <MX_TIM2_Init>
	/* USER CODE BEGIN 2 */

	HAL_TIM_Base_Start(&htim2);
 800143c:	489d      	ldr	r0, [pc, #628]	; (80016b4 <main+0x2a4>)
 800143e:	f004 ff51 	bl	80062e4 <HAL_TIM_Base_Start>

	myDebug("########## Slippers2Sat SATELLITE COM: BEGIN ##########\r\n");
 8001442:	489d      	ldr	r0, [pc, #628]	; (80016b8 <main+0x2a8>)
 8001444:	f7ff f99a 	bl	800077c <myDebug>
	myDebug("########## COMMUNICATION PARAMETERS ##########\r\n");
 8001448:	489c      	ldr	r0, [pc, #624]	; (80016bc <main+0x2ac>)
 800144a:	f7ff f997 	bl	800077c <myDebug>
	myDebug("Modulation: GFSK PACKET\r\n");
 800144e:	489c      	ldr	r0, [pc, #624]	; (80016c0 <main+0x2b0>)
 8001450:	f7ff f994 	bl	800077c <myDebug>
	myDebug("FREQUENCY MODES: DOWNLINK FREQ: %luHz and UPLINK FREQ: %lu Hz\r\n",
 8001454:	4a9b      	ldr	r2, [pc, #620]	; (80016c4 <main+0x2b4>)
 8001456:	499c      	ldr	r1, [pc, #624]	; (80016c8 <main+0x2b8>)
 8001458:	489c      	ldr	r0, [pc, #624]	; (80016cc <main+0x2bc>)
 800145a:	f7ff f98f 	bl	800077c <myDebug>
	FREQ_437_MHZ, FREQ_435_MHZ);
	myDebug("STM32 BSP_SubGHz-WL Radio: Low Power\n");
 800145e:	489c      	ldr	r0, [pc, #624]	; (80016d0 <main+0x2c0>)
 8001460:	f7ff f98c 	bl	800077c <myDebug>
	myDebug(
 8001464:	230e      	movs	r3, #14
 8001466:	9300      	str	r3, [sp, #0]
 8001468:	2301      	movs	r3, #1
 800146a:	2200      	movs	r2, #0
 800146c:	2107      	movs	r1, #7
 800146e:	4899      	ldr	r0, [pc, #612]	; (80016d4 <main+0x2c4>)
 8001470:	f7ff f984 	bl	800077c <myDebug>
			"POWER CONFIG:::- \n"
					"\t PA_DUTY_CYCLE: %x, HP_MAX: %x, PA_SEL: %x, POWER TX: %u dBm\r\n",
			PA_DUTY_CYCLE, HP_MAX, PA_SEL, POWER);

	myDebug("\n########## Wait for Handshake ##########\r\n");
 8001474:	4898      	ldr	r0, [pc, #608]	; (80016d8 <main+0x2c8>)
 8001476:	f7ff f981 	bl	800077c <myDebug>

	while (OBC_HANDSHAKE_FLAG == 0) {
 800147a:	e001      	b.n	8001480 <main+0x70>
		WAIT_FOR_HANDSHAKE();
 800147c:	f001 f9f6 	bl	800286c <WAIT_FOR_HANDSHAKE>
	while (OBC_HANDSHAKE_FLAG == 0) {
 8001480:	4b96      	ldr	r3, [pc, #600]	; (80016dc <main+0x2cc>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d0f9      	beq.n	800147c <main+0x6c>
	}

	SUBGRF_Init(DioIrqHndlr);
 8001488:	4895      	ldr	r0, [pc, #596]	; (80016e0 <main+0x2d0>)
 800148a:	f008 fe49 	bl	800a120 <SUBGRF_Init>

	SUBGRF_SetDioIrqParams(
 800148e:	2300      	movs	r3, #0
 8001490:	2200      	movs	r2, #0
 8001492:	f240 210f 	movw	r1, #527	; 0x20f
 8001496:	f240 200f 	movw	r0, #527	; 0x20f
 800149a:	f009 f9a7 	bl	800a7ec <SUBGRF_SetDioIrqParams>
					| IRQ_RX_TX_TIMEOUT | IRQ_SYNCWORD_VALID,
			IRQ_TX_DONE | IRQ_PREAMBLE_DETECTED | IRQ_RX_DONE
					| IRQ_RX_TX_TIMEOUT | IRQ_SYNCWORD_VALID, IRQ_RADIO_NONE,
			IRQ_RADIO_NONE);

	setPacketParams(rx_buffer_len);
 800149e:	4b91      	ldr	r3, [pc, #580]	; (80016e4 <main+0x2d4>)
 80014a0:	781b      	ldrb	r3, [r3, #0]
 80014a2:	4618      	mov	r0, r3
 80014a4:	f7ff fce2 	bl	8000e6c <setPacketParams>
	setModulationParams(GFSK_BR_1200, GFSK_FDEV_1200);
 80014a8:	f640 31b8 	movw	r1, #3000	; 0xbb8
 80014ac:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 80014b0:	f7ff fd06 	bl	8000ec0 <setModulationParams>
	radioConfig(rx_buffer, rx_buffer_len);
 80014b4:	4b8b      	ldr	r3, [pc, #556]	; (80016e4 <main+0x2d4>)
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	4619      	mov	r1, r3
 80014ba:	488b      	ldr	r0, [pc, #556]	; (80016e8 <main+0x2d8>)
 80014bc:	f7ff fd1e 	bl	8000efc <radioConfig>

	myDebug(
 80014c0:	488a      	ldr	r0, [pc, #552]	; (80016ec <main+0x2dc>)
 80014c2:	f7ff f95b 	bl	800077c <myDebug>
			"\n########## Operation Starts, Perform any one operation: ##########\r\n");
	myDebug("1. Transmit from Satellite\r\n");
 80014c6:	488a      	ldr	r0, [pc, #552]	; (80016f0 <main+0x2e0>)
 80014c8:	f7ff f958 	bl	800077c <myDebug>
	myDebug("2. Wait to receive GS Command\r\n");
 80014cc:	4889      	ldr	r0, [pc, #548]	; (80016f4 <main+0x2e4>)
 80014ce:	f7ff f955 	bl	800077c <myDebug>

	myDebug("\n########## RX Configuration: ##########\n");
 80014d2:	4889      	ldr	r0, [pc, #548]	; (80016f8 <main+0x2e8>)
 80014d4:	f7ff f952 	bl	800077c <myDebug>

	myDebug("FREQUENCY MODS: UPLINK FREQ: %lu Hz\r\n", FREQ_435_MHZ);
 80014d8:	497a      	ldr	r1, [pc, #488]	; (80016c4 <main+0x2b4>)
 80014da:	4888      	ldr	r0, [pc, #544]	; (80016fc <main+0x2ec>)
 80014dc:	f7ff f94e 	bl	800077c <myDebug>
	myDebug("Bit Rate: 	%d\n\r", mod_params.Params.Gfsk.BitRate);
 80014e0:	4b87      	ldr	r3, [pc, #540]	; (8001700 <main+0x2f0>)
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	4619      	mov	r1, r3
 80014e6:	4887      	ldr	r0, [pc, #540]	; (8001704 <main+0x2f4>)
 80014e8:	f7ff f948 	bl	800077c <myDebug>
	myDebug("Frequency Deviation: 	%d\n\r", mod_params.Params.Gfsk.Fdev);
 80014ec:	4b84      	ldr	r3, [pc, #528]	; (8001700 <main+0x2f0>)
 80014ee:	689b      	ldr	r3, [r3, #8]
 80014f0:	4619      	mov	r1, r3
 80014f2:	4885      	ldr	r0, [pc, #532]	; (8001708 <main+0x2f8>)
 80014f4:	f7ff f942 	bl	800077c <myDebug>
	myDebug("RECEVING BANDWIDTH: 	%d\n\r", mod_params.Params.Gfsk.Bandwidth);
 80014f8:	4b81      	ldr	r3, [pc, #516]	; (8001700 <main+0x2f0>)
 80014fa:	7b5b      	ldrb	r3, [r3, #13]
 80014fc:	4619      	mov	r1, r3
 80014fe:	4883      	ldr	r0, [pc, #524]	; (800170c <main+0x2fc>)
 8001500:	f7ff f93c 	bl	800077c <myDebug>
	myDebug("Packet Type 			%d\n\r", pkt_params.PacketType);
 8001504:	4b82      	ldr	r3, [pc, #520]	; (8001710 <main+0x300>)
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	4619      	mov	r1, r3
 800150a:	4882      	ldr	r0, [pc, #520]	; (8001714 <main+0x304>)
 800150c:	f7ff f936 	bl	800077c <myDebug>
	myDebug("PayloadLength 			%d\n\r", pkt_params.Params.Gfsk.PayloadLength);
 8001510:	4b7f      	ldr	r3, [pc, #508]	; (8001710 <main+0x300>)
 8001512:	7a1b      	ldrb	r3, [r3, #8]
 8001514:	4619      	mov	r1, r3
 8001516:	4880      	ldr	r0, [pc, #512]	; (8001718 <main+0x308>)
 8001518:	f7ff f930 	bl	800077c <myDebug>
	myDebug("PreambleLength 		%d\n\r", pkt_params.Params.Gfsk.PreambleLength);
 800151c:	4b7c      	ldr	r3, [pc, #496]	; (8001710 <main+0x300>)
 800151e:	885b      	ldrh	r3, [r3, #2]
 8001520:	4619      	mov	r1, r3
 8001522:	487e      	ldr	r0, [pc, #504]	; (800171c <main+0x30c>)
 8001524:	f7ff f92a 	bl	800077c <myDebug>
	myDebug("PreambleMinDetect		%d\n\r",
			pkt_params.Params.Gfsk.PreambleMinDetect);
 8001528:	4b79      	ldr	r3, [pc, #484]	; (8001710 <main+0x300>)
 800152a:	791b      	ldrb	r3, [r3, #4]
	myDebug("PreambleMinDetect		%d\n\r",
 800152c:	4619      	mov	r1, r3
 800152e:	487c      	ldr	r0, [pc, #496]	; (8001720 <main+0x310>)
 8001530:	f7ff f924 	bl	800077c <myDebug>
	myDebug("HeaderType 			%d\n\r", pkt_params.Params.Gfsk.HeaderType);
 8001534:	4b76      	ldr	r3, [pc, #472]	; (8001710 <main+0x300>)
 8001536:	79db      	ldrb	r3, [r3, #7]
 8001538:	4619      	mov	r1, r3
 800153a:	487a      	ldr	r0, [pc, #488]	; (8001724 <main+0x314>)
 800153c:	f7ff f91e 	bl	800077c <myDebug>
	myDebug("__________*******************__________\r\n");
 8001540:	4879      	ldr	r0, [pc, #484]	; (8001728 <main+0x318>)
 8001542:	f7ff f91b 	bl	800077c <myDebug>

	SUBGRF_SetRfFrequency(FREQ_435_MHZ);
 8001546:	485f      	ldr	r0, [pc, #380]	; (80016c4 <main+0x2b4>)
 8001548:	f009 f9ac 	bl	800a8a4 <SUBGRF_SetRfFrequency>
	SUBGRF_SetSwitch(RFO_LP, RFSWITCH_RX); /*Set RF switch*/
 800154c:	2100      	movs	r1, #0
 800154e:	2001      	movs	r0, #1
 8001550:	f009 fdf0 	bl	800b134 <SUBGRF_SetSwitch>
	SUBGRF_SetRxBoosted(0xFFFFFF);
 8001554:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8001558:	f008 ffd0 	bl	800a4fc <SUBGRF_SetRxBoosted>

	HAL_UART_Receive_DMA(&huart2, OBC_UART_RX, obc_plen);
 800155c:	4b73      	ldr	r3, [pc, #460]	; (800172c <main+0x31c>)
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	b29b      	uxth	r3, r3
 8001562:	461a      	mov	r2, r3
 8001564:	4972      	ldr	r1, [pc, #456]	; (8001730 <main+0x320>)
 8001566:	4873      	ldr	r0, [pc, #460]	; (8001734 <main+0x324>)
 8001568:	f005 fade 	bl	8006b28 <HAL_UART_Receive_DMA>

	HAL_UART_Receive_DMA(&hlpuart1, OBC_UART_RX, obc_plen);
 800156c:	4b6f      	ldr	r3, [pc, #444]	; (800172c <main+0x31c>)
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	b29b      	uxth	r3, r3
 8001572:	461a      	mov	r2, r3
 8001574:	496e      	ldr	r1, [pc, #440]	; (8001730 <main+0x320>)
 8001576:	4870      	ldr	r0, [pc, #448]	; (8001738 <main+0x328>)
 8001578:	f005 fad6 	bl	8006b28 <HAL_UART_Receive_DMA>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */
		MX_SubGHz_Phy_Process();
 800157c:	f00a f821 	bl	800b5c2 <MX_SubGHz_Phy_Process>

		/* USER CODE BEGIN 3 */

		delay_us(500000);
 8001580:	486e      	ldr	r0, [pc, #440]	; (800173c <main+0x32c>)
 8001582:	f7ff f8e1 	bl	8000748 <delay_us>

		if (OBC_SUCCESS_DATA_RX_FLAG == 1) {
 8001586:	4b6e      	ldr	r3, [pc, #440]	; (8001740 <main+0x330>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	2b01      	cmp	r3, #1
 800158c:	f040 80e6 	bne.w	800175c <main+0x34c>

			getAX25Packet(OBC_UART_RX, obc_ilen);
 8001590:	4b6c      	ldr	r3, [pc, #432]	; (8001744 <main+0x334>)
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	4619      	mov	r1, r3
 8001596:	4866      	ldr	r0, [pc, #408]	; (8001730 <main+0x320>)
 8001598:	f7ff f84c 	bl	8000634 <getAX25Packet>

			tx_buffer_len = countsDataBetweenFlags(temp_tx_buffer,
 800159c:	2196      	movs	r1, #150	; 0x96
 800159e:	486a      	ldr	r0, [pc, #424]	; (8001748 <main+0x338>)
 80015a0:	f7ff fc2e 	bl	8000e00 <countsDataBetweenFlags>
 80015a4:	4603      	mov	r3, r0
 80015a6:	4a69      	ldr	r2, [pc, #420]	; (800174c <main+0x33c>)
 80015a8:	6013      	str	r3, [r2, #0]
					sizeof(temp_tx_buffer));

//			myDebug("AX.25 complete GS packet ready to TX: 0x%x\r\n",ntemp_tx_buffer);
			for (int j = 0; j < tx_buffer_len; j++) {
 80015aa:	2300      	movs	r3, #0
 80015ac:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80015b0:	e00f      	b.n	80015d2 <main+0x1c2>
				tx_buffer[j] = temp_tx_buffer[j];
 80015b2:	4a65      	ldr	r2, [pc, #404]	; (8001748 <main+0x338>)
 80015b4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80015b8:	4413      	add	r3, r2
 80015ba:	7819      	ldrb	r1, [r3, #0]
 80015bc:	4a64      	ldr	r2, [pc, #400]	; (8001750 <main+0x340>)
 80015be:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80015c2:	4413      	add	r3, r2
 80015c4:	460a      	mov	r2, r1
 80015c6:	701a      	strb	r2, [r3, #0]
			for (int j = 0; j < tx_buffer_len; j++) {
 80015c8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80015cc:	3301      	adds	r3, #1
 80015ce:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80015d2:	4b5e      	ldr	r3, [pc, #376]	; (800174c <main+0x33c>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80015da:	429a      	cmp	r2, r3
 80015dc:	dbe9      	blt.n	80015b2 <main+0x1a2>
//				myDebug("%02x ", tx_buffer[j]);
			}
//			myDebug("\r\n");
//			myDebug("size of tx_buffer = %d\r\n", tx_buffer_len);

			memset(OBC_UART_RX, '\0', obc_ilen);
 80015de:	4b59      	ldr	r3, [pc, #356]	; (8001744 <main+0x334>)
 80015e0:	781b      	ldrb	r3, [r3, #0]
 80015e2:	461a      	mov	r2, r3
 80015e4:	2100      	movs	r1, #0
 80015e6:	4852      	ldr	r0, [pc, #328]	; (8001730 <main+0x320>)
 80015e8:	f00a fb8e 	bl	800bd08 <memset>
			memset(temp_tx_buffer, '\0', sizeof(temp_tx_buffer));
 80015ec:	2296      	movs	r2, #150	; 0x96
 80015ee:	2100      	movs	r1, #0
 80015f0:	4855      	ldr	r0, [pc, #340]	; (8001748 <main+0x338>)
 80015f2:	f00a fb89 	bl	800bd08 <memset>

			setPacketParams(tx_buffer_len);
 80015f6:	4b55      	ldr	r3, [pc, #340]	; (800174c <main+0x33c>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	b2db      	uxtb	r3, r3
 80015fc:	4618      	mov	r0, r3
 80015fe:	f7ff fc35 	bl	8000e6c <setPacketParams>
			setModulationParams(GFSK_BR_4800, GFSK_FDEV_4800);
 8001602:	f642 61e0 	movw	r1, #12000	; 0x2ee0
 8001606:	f44f 5096 	mov.w	r0, #4800	; 0x12c0
 800160a:	f7ff fc59 	bl	8000ec0 <setModulationParams>
			radioConfig(tx_buffer, tx_buffer_len);
 800160e:	4b4f      	ldr	r3, [pc, #316]	; (800174c <main+0x33c>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	b2db      	uxtb	r3, r3
 8001614:	4619      	mov	r1, r3
 8001616:	484e      	ldr	r0, [pc, #312]	; (8001750 <main+0x340>)
 8001618:	f7ff fc70 	bl	8000efc <radioConfig>

			myDebug("\n########## TX Configuration: ##########\n");
 800161c:	484d      	ldr	r0, [pc, #308]	; (8001754 <main+0x344>)
 800161e:	f7ff f8ad 	bl	800077c <myDebug>

			myDebug("FREQUENCY MODS: DOWNLINK FREQ: %lu Hz\r\n",
 8001622:	4929      	ldr	r1, [pc, #164]	; (80016c8 <main+0x2b8>)
 8001624:	484c      	ldr	r0, [pc, #304]	; (8001758 <main+0x348>)
 8001626:	f7ff f8a9 	bl	800077c <myDebug>
			FREQ_437_MHZ);
			myDebug("Bit Rate: 	%d\n\r", mod_params.Params.Gfsk.BitRate);
 800162a:	4b35      	ldr	r3, [pc, #212]	; (8001700 <main+0x2f0>)
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	4619      	mov	r1, r3
 8001630:	4834      	ldr	r0, [pc, #208]	; (8001704 <main+0x2f4>)
 8001632:	f7ff f8a3 	bl	800077c <myDebug>
			myDebug("Frequency Deviation: 	%d\n\r",
 8001636:	4b32      	ldr	r3, [pc, #200]	; (8001700 <main+0x2f0>)
 8001638:	689b      	ldr	r3, [r3, #8]
 800163a:	4619      	mov	r1, r3
 800163c:	4832      	ldr	r0, [pc, #200]	; (8001708 <main+0x2f8>)
 800163e:	f7ff f89d 	bl	800077c <myDebug>
					mod_params.Params.Gfsk.Fdev);
			myDebug("RECEVING BANDWIDTH: 	%d\n\r",
					mod_params.Params.Gfsk.Bandwidth);
 8001642:	4b2f      	ldr	r3, [pc, #188]	; (8001700 <main+0x2f0>)
 8001644:	7b5b      	ldrb	r3, [r3, #13]
			myDebug("RECEVING BANDWIDTH: 	%d\n\r",
 8001646:	4619      	mov	r1, r3
 8001648:	4830      	ldr	r0, [pc, #192]	; (800170c <main+0x2fc>)
 800164a:	f7ff f897 	bl	800077c <myDebug>
			myDebug("Packet Type 			%d\n\r", pkt_params.PacketType);
 800164e:	4b30      	ldr	r3, [pc, #192]	; (8001710 <main+0x300>)
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	4619      	mov	r1, r3
 8001654:	482f      	ldr	r0, [pc, #188]	; (8001714 <main+0x304>)
 8001656:	f7ff f891 	bl	800077c <myDebug>
			myDebug("PayloadLength 			%d\n\r",
					pkt_params.Params.Gfsk.PayloadLength);
 800165a:	4b2d      	ldr	r3, [pc, #180]	; (8001710 <main+0x300>)
 800165c:	7a1b      	ldrb	r3, [r3, #8]
			myDebug("PayloadLength 			%d\n\r",
 800165e:	4619      	mov	r1, r3
 8001660:	482d      	ldr	r0, [pc, #180]	; (8001718 <main+0x308>)
 8001662:	f7ff f88b 	bl	800077c <myDebug>
			myDebug("PreambleLength 		%d\n\r",
					pkt_params.Params.Gfsk.PreambleLength);
 8001666:	4b2a      	ldr	r3, [pc, #168]	; (8001710 <main+0x300>)
 8001668:	885b      	ldrh	r3, [r3, #2]
			myDebug("PreambleLength 		%d\n\r",
 800166a:	4619      	mov	r1, r3
 800166c:	482b      	ldr	r0, [pc, #172]	; (800171c <main+0x30c>)
 800166e:	f7ff f885 	bl	800077c <myDebug>
			myDebug("PreambleMinDetect		%d\n\r",
					pkt_params.Params.Gfsk.PreambleMinDetect);
 8001672:	4b27      	ldr	r3, [pc, #156]	; (8001710 <main+0x300>)
 8001674:	791b      	ldrb	r3, [r3, #4]
			myDebug("PreambleMinDetect		%d\n\r",
 8001676:	4619      	mov	r1, r3
 8001678:	4829      	ldr	r0, [pc, #164]	; (8001720 <main+0x310>)
 800167a:	f7ff f87f 	bl	800077c <myDebug>
			myDebug("HeaderType 			%d\n\r", pkt_params.Params.Gfsk.HeaderType);
 800167e:	4b24      	ldr	r3, [pc, #144]	; (8001710 <main+0x300>)
 8001680:	79db      	ldrb	r3, [r3, #7]
 8001682:	4619      	mov	r1, r3
 8001684:	4827      	ldr	r0, [pc, #156]	; (8001724 <main+0x314>)
 8001686:	f7ff f879 	bl	800077c <myDebug>
			myDebug("__________*******************__________\r\n");
 800168a:	4827      	ldr	r0, [pc, #156]	; (8001728 <main+0x318>)
 800168c:	f7ff f876 	bl	800077c <myDebug>

			SUBGRF_SetRfFrequency(FREQ_437_MHZ);
 8001690:	480d      	ldr	r0, [pc, #52]	; (80016c8 <main+0x2b8>)
 8001692:	f009 f907 	bl	800a8a4 <SUBGRF_SetRfFrequency>
			SUBGRF_SetSwitch(RFO_LP, RFSWITCH_TX);
 8001696:	2101      	movs	r1, #1
 8001698:	2001      	movs	r0, #1
 800169a:	f009 fd4b 	bl	800b134 <SUBGRF_SetSwitch>
			SUBGRF_SendPayload(tx_buffer, tx_buffer_len, 0);
 800169e:	4b2b      	ldr	r3, [pc, #172]	; (800174c <main+0x33c>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	b2db      	uxtb	r3, r3
 80016a4:	2200      	movs	r2, #0
 80016a6:	4619      	mov	r1, r3
 80016a8:	4829      	ldr	r0, [pc, #164]	; (8001750 <main+0x340>)
 80016aa:	f008 fdbd 	bl	800a228 <SUBGRF_SendPayload>
 80016ae:	f000 bd6c 	b.w	800218a <main+0xd7a>
 80016b2:	bf00      	nop
 80016b4:	20000510 	.word	0x20000510
 80016b8:	0800c978 	.word	0x0800c978
 80016bc:	0800c9b4 	.word	0x0800c9b4
 80016c0:	0800c9e8 	.word	0x0800c9e8
 80016c4:	19f25968 	.word	0x19f25968
 80016c8:	1a11d018 	.word	0x1a11d018
 80016cc:	0800ca04 	.word	0x0800ca04
 80016d0:	0800ca44 	.word	0x0800ca44
 80016d4:	0800ca6c 	.word	0x0800ca6c
 80016d8:	0800cac0 	.word	0x0800cac0
 80016dc:	200004d4 	.word	0x200004d4
 80016e0:	08002295 	.word	0x08002295
 80016e4:	20000000 	.word	0x20000000
 80016e8:	200002ac 	.word	0x200002ac
 80016ec:	0800caec 	.word	0x0800caec
 80016f0:	0800cb34 	.word	0x0800cb34
 80016f4:	0800cb54 	.word	0x0800cb54
 80016f8:	0800cb74 	.word	0x0800cb74
 80016fc:	0800cba0 	.word	0x0800cba0
 8001700:	20000290 	.word	0x20000290
 8001704:	0800c744 	.word	0x0800c744
 8001708:	0800c754 	.word	0x0800c754
 800170c:	0800c770 	.word	0x0800c770
 8001710:	2000027c 	.word	0x2000027c
 8001714:	0800c78c 	.word	0x0800c78c
 8001718:	0800c7a0 	.word	0x0800c7a0
 800171c:	0800c7b8 	.word	0x0800c7b8
 8001720:	0800c7d0 	.word	0x0800c7d0
 8001724:	0800c7e8 	.word	0x0800c7e8
 8001728:	0800c7fc 	.word	0x0800c7fc
 800172c:	20000001 	.word	0x20000001
 8001730:	20000318 	.word	0x20000318
 8001734:	20000688 	.word	0x20000688
 8001738:	20000560 	.word	0x20000560
 800173c:	0007a120 	.word	0x0007a120
 8001740:	2000039c 	.word	0x2000039c
 8001744:	20000316 	.word	0x20000316
 8001748:	200003a0 	.word	0x200003a0
 800174c:	200004d0 	.word	0x200004d0
 8001750:	20000438 	.word	0x20000438
 8001754:	0800c6f0 	.word	0x0800c6f0
 8001758:	0800c71c 	.word	0x0800c71c

		} else if (RX_FLAG == 1) {
 800175c:	4bbd      	ldr	r3, [pc, #756]	; (8001a54 <main+0x644>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	2b01      	cmp	r3, #1
 8001762:	f040 8512 	bne.w	800218a <main+0xd7a>
 8001766:	466b      	mov	r3, sp
 8001768:	60bb      	str	r3, [r7, #8]
			RX_FLAG = 0;
 800176a:	4bba      	ldr	r3, [pc, #744]	; (8001a54 <main+0x644>)
 800176c:	2200      	movs	r2, #0
 800176e:	601a      	str	r2, [r3, #0]

			uint8_t temp_rx_buffer_len = 0;
 8001770:	2300      	movs	r3, #0
 8001772:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
			temp_rx_buffer_len = countsDataBetweenFlags(rx_buffer,
 8001776:	4bb8      	ldr	r3, [pc, #736]	; (8001a58 <main+0x648>)
 8001778:	781b      	ldrb	r3, [r3, #0]
 800177a:	4619      	mov	r1, r3
 800177c:	48b7      	ldr	r0, [pc, #732]	; (8001a5c <main+0x64c>)
 800177e:	f7ff fb3f 	bl	8000e00 <countsDataBetweenFlags>
 8001782:	4603      	mov	r3, r0
 8001784:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
					rx_buffer_len); // 7e...7e, size

			uint8_t crc_buff_len = temp_rx_buffer_len - 4;
 8001788:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 800178c:	3b04      	subs	r3, #4
 800178e:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
			uint8_t crc_buff[crc_buff_len];
 8001792:	f897 208a 	ldrb.w	r2, [r7, #138]	; 0x8a
 8001796:	4611      	mov	r1, r2
 8001798:	60f9      	str	r1, [r7, #12]
 800179a:	460b      	mov	r3, r1
 800179c:	3b01      	subs	r3, #1
 800179e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80017a2:	b2cb      	uxtb	r3, r1
 80017a4:	2200      	movs	r2, #0
 80017a6:	4698      	mov	r8, r3
 80017a8:	4691      	mov	r9, r2
 80017aa:	f04f 0200 	mov.w	r2, #0
 80017ae:	f04f 0300 	mov.w	r3, #0
 80017b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80017b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80017ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80017be:	b2cb      	uxtb	r3, r1
 80017c0:	2200      	movs	r2, #0
 80017c2:	469a      	mov	sl, r3
 80017c4:	4693      	mov	fp, r2
 80017c6:	f04f 0200 	mov.w	r2, #0
 80017ca:	f04f 0300 	mov.w	r3, #0
 80017ce:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80017d2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80017d6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80017da:	460b      	mov	r3, r1
 80017dc:	3307      	adds	r3, #7
 80017de:	08db      	lsrs	r3, r3, #3
 80017e0:	00db      	lsls	r3, r3, #3
 80017e2:	ebad 0d03 	sub.w	sp, sp, r3
 80017e6:	ab02      	add	r3, sp, #8
 80017e8:	3300      	adds	r3, #0
 80017ea:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

			int j = 0;
 80017ee:	2300      	movs	r3, #0
 80017f0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
			for (int i = 1; i <= crc_buff_len; i++) {
 80017f4:	2301      	movs	r3, #1
 80017f6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80017fa:	e015      	b.n	8001828 <main+0x418>
				crc_buff[j] = rx_buffer[i]; // index 1 to previous byte of crc
 80017fc:	4a97      	ldr	r2, [pc, #604]	; (8001a5c <main+0x64c>)
 80017fe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001802:	4413      	add	r3, r2
 8001804:	7819      	ldrb	r1, [r3, #0]
 8001806:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800180a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800180e:	4413      	add	r3, r2
 8001810:	460a      	mov	r2, r1
 8001812:	701a      	strb	r2, [r3, #0]
				//				myDebug("%02x ", crc_buff[j]);
				j++;
 8001814:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001818:	3301      	adds	r3, #1
 800181a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
			for (int i = 1; i <= crc_buff_len; i++) {
 800181e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001822:	3301      	adds	r3, #1
 8001824:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001828:	f897 308a 	ldrb.w	r3, [r7, #138]	; 0x8a
 800182c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8001830:	429a      	cmp	r2, r3
 8001832:	dde3      	ble.n	80017fc <main+0x3ec>
			}

			memset(rx_buffer, '\0', sizeof(rx_buffer));
 8001834:	2269      	movs	r2, #105	; 0x69
 8001836:	2100      	movs	r1, #0
 8001838:	4888      	ldr	r0, [pc, #544]	; (8001a5c <main+0x64c>)
 800183a:	f00a fa65 	bl	800bd08 <memset>

			uint8_t gs_cmd_buff[100];
			int gs_cmd_len = bit_destuffing(crc_buff, gs_cmd_buff,
 800183e:	f897 208a 	ldrb.w	r2, [r7, #138]	; 0x8a
 8001842:	f107 0310 	add.w	r3, r7, #16
 8001846:	4619      	mov	r1, r3
 8001848:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800184c:	f7ff f91d 	bl	8000a8a <bit_destuffing>
 8001850:	67f8      	str	r0, [r7, #124]	; 0x7c
					crc_buff_len);
			//gs_cmd_len--;

			uint8_t main_gs_cmd[gs_cmd_len];
 8001852:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
 8001854:	1e63      	subs	r3, r4, #1
 8001856:	67bb      	str	r3, [r7, #120]	; 0x78
 8001858:	4622      	mov	r2, r4
 800185a:	2300      	movs	r3, #0
 800185c:	4615      	mov	r5, r2
 800185e:	461e      	mov	r6, r3
 8001860:	f04f 0200 	mov.w	r2, #0
 8001864:	f04f 0300 	mov.w	r3, #0
 8001868:	00f3      	lsls	r3, r6, #3
 800186a:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 800186e:	00ea      	lsls	r2, r5, #3
 8001870:	4622      	mov	r2, r4
 8001872:	2300      	movs	r3, #0
 8001874:	603a      	str	r2, [r7, #0]
 8001876:	607b      	str	r3, [r7, #4]
 8001878:	f04f 0200 	mov.w	r2, #0
 800187c:	f04f 0300 	mov.w	r3, #0
 8001880:	6879      	ldr	r1, [r7, #4]
 8001882:	00cb      	lsls	r3, r1, #3
 8001884:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001888:	4684      	mov	ip, r0
 800188a:	ea43 735c 	orr.w	r3, r3, ip, lsr #29
 800188e:	4601      	mov	r1, r0
 8001890:	00ca      	lsls	r2, r1, #3
 8001892:	4623      	mov	r3, r4
 8001894:	3307      	adds	r3, #7
 8001896:	08db      	lsrs	r3, r3, #3
 8001898:	00db      	lsls	r3, r3, #3
 800189a:	ebad 0d03 	sub.w	sp, sp, r3
 800189e:	ab02      	add	r3, sp, #8
 80018a0:	3300      	adds	r3, #0
 80018a2:	677b      	str	r3, [r7, #116]	; 0x74
			for (int i = 0; i < gs_cmd_len; i++) {
 80018a4:	2300      	movs	r3, #0
 80018a6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80018aa:	e010      	b.n	80018ce <main+0x4be>
				main_gs_cmd[i] = gs_cmd_buff[i];
 80018ac:	f107 0210 	add.w	r2, r7, #16
 80018b0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80018b4:	4413      	add	r3, r2
 80018b6:	7819      	ldrb	r1, [r3, #0]
 80018b8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80018ba:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80018be:	4413      	add	r3, r2
 80018c0:	460a      	mov	r2, r1
 80018c2:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < gs_cmd_len; i++) {
 80018c4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80018c8:	3301      	adds	r3, #1
 80018ca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80018ce:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80018d2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80018d4:	429a      	cmp	r2, r3
 80018d6:	dbe9      	blt.n	80018ac <main+0x49c>
			}

			if (COUNT_BEACON == 1) { // first beacon tx
 80018d8:	4b61      	ldr	r3, [pc, #388]	; (8001a60 <main+0x650>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	2b01      	cmp	r3, #1
 80018de:	f040 8140 	bne.w	8001b62 <main+0x752>

				if ((main_gs_cmd[18] == 0xDF && main_gs_cmd[19] == 0xAB
 80018e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80018e4:	7c9b      	ldrb	r3, [r3, #18]
 80018e6:	2bdf      	cmp	r3, #223	; 0xdf
 80018e8:	d107      	bne.n	80018fa <main+0x4ea>
 80018ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80018ec:	7cdb      	ldrb	r3, [r3, #19]
 80018ee:	2bab      	cmp	r3, #171	; 0xab
 80018f0:	d103      	bne.n	80018fa <main+0x4ea>
						&& main_gs_cmd[20] == 0xD1) // Enable Digipeater Mission
 80018f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80018f4:	7d1b      	ldrb	r3, [r3, #20]
 80018f6:	2bd1      	cmp	r3, #209	; 0xd1
 80018f8:	d00b      	beq.n	8001912 <main+0x502>
						|| (main_gs_cmd[18] == 0x53 && main_gs_cmd[19] == 0x02
 80018fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80018fc:	7c9b      	ldrb	r3, [r3, #18]
 80018fe:	2b53      	cmp	r3, #83	; 0x53
 8001900:	d13c      	bne.n	800197c <main+0x56c>
 8001902:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001904:	7cdb      	ldrb	r3, [r3, #19]
 8001906:	2b02      	cmp	r3, #2
 8001908:	d138      	bne.n	800197c <main+0x56c>
								&& main_gs_cmd[20] == 0x53)) { // Digipeater Packet
 800190a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800190c:	7d1b      	ldrb	r3, [r3, #20]
 800190e:	2b53      	cmp	r3, #83	; 0x53
 8001910:	d134      	bne.n	800197c <main+0x56c>

					myDebug("\n********GS Command failed: 0x%x\r\n");
 8001912:	4854      	ldr	r0, [pc, #336]	; (8001a64 <main+0x654>)
 8001914:	f7fe ff32 	bl	800077c <myDebug>

					COM_UART_TX[0] = 0x53;  //header
 8001918:	4b53      	ldr	r3, [pc, #332]	; (8001a68 <main+0x658>)
 800191a:	2253      	movs	r2, #83	; 0x53
 800191c:	701a      	strb	r2, [r3, #0]
					COM_UART_TX[1] = 0xac;  //packet_type
 800191e:	4b52      	ldr	r3, [pc, #328]	; (8001a68 <main+0x658>)
 8001920:	22ac      	movs	r2, #172	; 0xac
 8001922:	705a      	strb	r2, [r3, #1]
					COM_UART_TX[2] = 0x04;  //length_of_info
 8001924:	4b50      	ldr	r3, [pc, #320]	; (8001a68 <main+0x658>)
 8001926:	2204      	movs	r2, #4
 8001928:	709a      	strb	r2, [r3, #2]
					COM_UART_TX[3] = 0x02;  //mcu_no
 800192a:	4b4f      	ldr	r3, [pc, #316]	; (8001a68 <main+0x658>)
 800192c:	2202      	movs	r2, #2
 800192e:	70da      	strb	r2, [r3, #3]
					COM_UART_TX[4] = 0xfc;	//false_command
 8001930:	4b4d      	ldr	r3, [pc, #308]	; (8001a68 <main+0x658>)
 8001932:	22fc      	movs	r2, #252	; 0xfc
 8001934:	711a      	strb	r2, [r3, #4]
					COM_UART_TX[5] = 0xee;  // error_prefix
 8001936:	4b4c      	ldr	r3, [pc, #304]	; (8001a68 <main+0x658>)
 8001938:	22ee      	movs	r2, #238	; 0xee
 800193a:	715a      	strb	r2, [r3, #5]

					for (int i = 6; i < com_uart_tx_p_len; i++) {
 800193c:	2306      	movs	r3, #6
 800193e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8001942:	e00a      	b.n	800195a <main+0x54a>
						COM_UART_TX[i] = 0x00;
 8001944:	4a48      	ldr	r2, [pc, #288]	; (8001a68 <main+0x658>)
 8001946:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800194a:	4413      	add	r3, r2
 800194c:	2200      	movs	r2, #0
 800194e:	701a      	strb	r2, [r3, #0]
					for (int i = 6; i < com_uart_tx_p_len; i++) {
 8001950:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001954:	3301      	adds	r3, #1
 8001956:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800195a:	4b44      	ldr	r3, [pc, #272]	; (8001a6c <main+0x65c>)
 800195c:	781b      	ldrb	r3, [r3, #0]
 800195e:	461a      	mov	r2, r3
 8001960:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001964:	4293      	cmp	r3, r2
 8001966:	dbed      	blt.n	8001944 <main+0x534>
					}

					enableReqPA();
 8001968:	f7ff f9f4 	bl	8000d54 <enableReqPA>

					memset(main_gs_cmd, '\0', sizeof(main_gs_cmd));
 800196c:	4623      	mov	r3, r4
 800196e:	461a      	mov	r2, r3
 8001970:	2100      	movs	r1, #0
 8001972:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8001974:	f00a f9c8 	bl	800bd08 <memset>
 8001978:	f000 bc05 	b.w	8002186 <main+0xd76>

				} else if (main_gs_cmd[18] == 0xFD && main_gs_cmd[19] == 0xBA
 800197c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800197e:	7c9b      	ldrb	r3, [r3, #18]
 8001980:	2bfd      	cmp	r3, #253	; 0xfd
 8001982:	d15a      	bne.n	8001a3a <main+0x62a>
 8001984:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001986:	7cdb      	ldrb	r3, [r3, #19]
 8001988:	2bba      	cmp	r3, #186	; 0xba
 800198a:	d156      	bne.n	8001a3a <main+0x62a>
						&& main_gs_cmd[20] == 0xD0) { // Digipeater Disable
 800198c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800198e:	7d1b      	ldrb	r3, [r3, #20]
 8001990:	2bd0      	cmp	r3, #208	; 0xd0
 8001992:	d152      	bne.n	8001a3a <main+0x62a>

					BEACON_COUNT = 2;
 8001994:	4b36      	ldr	r3, [pc, #216]	; (8001a70 <main+0x660>)
 8001996:	2202      	movs	r2, #2
 8001998:	601a      	str	r2, [r3, #0]
					OBC_SUCCESS_DATA_RX_FLAG = 0;
 800199a:	4b36      	ldr	r3, [pc, #216]	; (8001a74 <main+0x664>)
 800199c:	2200      	movs	r2, #0
 800199e:	601a      	str	r2, [r3, #0]
					DIGIPEATER_STATUS = 0;
 80019a0:	4b35      	ldr	r3, [pc, #212]	; (8001a78 <main+0x668>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	601a      	str	r2, [r3, #0]
					DIGIPEATER_FLAG = 0;
 80019a6:	4b35      	ldr	r3, [pc, #212]	; (8001a7c <main+0x66c>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	601a      	str	r2, [r3, #0]

					myDebug("\n-------> Digipeater MODE OFF\n\n");
 80019ac:	4834      	ldr	r0, [pc, #208]	; (8001a80 <main+0x670>)
 80019ae:	f7fe fee5 	bl	800077c <myDebug>

					COM_UART_TX[0] = 0x53;	//header
 80019b2:	4b2d      	ldr	r3, [pc, #180]	; (8001a68 <main+0x658>)
 80019b4:	2253      	movs	r2, #83	; 0x53
 80019b6:	701a      	strb	r2, [r3, #0]
					COM_UART_TX[1] = 0xac;	//packet_ type
 80019b8:	4b2b      	ldr	r3, [pc, #172]	; (8001a68 <main+0x658>)
 80019ba:	22ac      	movs	r2, #172	; 0xac
 80019bc:	705a      	strb	r2, [r3, #1]
					COM_UART_TX[2] = 0x04;	//length of info
 80019be:	4b2a      	ldr	r3, [pc, #168]	; (8001a68 <main+0x658>)
 80019c0:	2204      	movs	r2, #4
 80019c2:	709a      	strb	r2, [r3, #2]
					COM_UART_TX[3] = 0x02;	//mcu_no
 80019c4:	4b28      	ldr	r3, [pc, #160]	; (8001a68 <main+0x658>)
 80019c6:	2202      	movs	r2, #2
 80019c8:	70da      	strb	r2, [r3, #3]
					COM_UART_TX[4] = 0x00;	//Digipeater OFF
 80019ca:	4b27      	ldr	r3, [pc, #156]	; (8001a68 <main+0x658>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	711a      	strb	r2, [r3, #4]
					COM_UART_TX[5] = 0xdd;	//Digipeater prefix
 80019d0:	4b25      	ldr	r3, [pc, #148]	; (8001a68 <main+0x658>)
 80019d2:	22dd      	movs	r2, #221	; 0xdd
 80019d4:	715a      	strb	r2, [r3, #5]

					for (int i = 6; i < com_uart_tx_p_len; i++) {
 80019d6:	2306      	movs	r3, #6
 80019d8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80019dc:	e00a      	b.n	80019f4 <main+0x5e4>
						COM_UART_TX[i] = 0x00;
 80019de:	4a22      	ldr	r2, [pc, #136]	; (8001a68 <main+0x658>)
 80019e0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80019e4:	4413      	add	r3, r2
 80019e6:	2200      	movs	r2, #0
 80019e8:	701a      	strb	r2, [r3, #0]
					for (int i = 6; i < com_uart_tx_p_len; i++) {
 80019ea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80019ee:	3301      	adds	r3, #1
 80019f0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80019f4:	4b1d      	ldr	r3, [pc, #116]	; (8001a6c <main+0x65c>)
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	461a      	mov	r2, r3
 80019fa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80019fe:	4293      	cmp	r3, r2
 8001a00:	dbed      	blt.n	80019de <main+0x5ce>
					}

					enableReqPA();
 8001a02:	f7ff f9a7 	bl	8000d54 <enableReqPA>

					memset(main_gs_cmd, '\0', sizeof(main_gs_cmd));
 8001a06:	4623      	mov	r3, r4
 8001a08:	461a      	mov	r2, r3
 8001a0a:	2100      	movs	r1, #0
 8001a0c:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8001a0e:	f00a f97b 	bl	800bd08 <memset>
					memset(rx_buffer, '\0', sizeof(rx_buffer));
 8001a12:	2269      	movs	r2, #105	; 0x69
 8001a14:	2100      	movs	r1, #0
 8001a16:	4811      	ldr	r0, [pc, #68]	; (8001a5c <main+0x64c>)
 8001a18:	f00a f976 	bl	800bd08 <memset>
					memset(crc_buff, '\0', sizeof(crc_buff));
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	461a      	mov	r2, r3
 8001a20:	2100      	movs	r1, #0
 8001a22:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8001a26:	f00a f96f 	bl	800bd08 <memset>
					memset(gs_cmd_buff, '\0', sizeof(gs_cmd_buff));
 8001a2a:	f107 0310 	add.w	r3, r7, #16
 8001a2e:	2264      	movs	r2, #100	; 0x64
 8001a30:	2100      	movs	r1, #0
 8001a32:	4618      	mov	r0, r3
 8001a34:	f00a f968 	bl	800bd08 <memset>
 8001a38:	e3a5      	b.n	8002186 <main+0xd76>

				} else {
					myDebug("\nCommand sent to OBC, Length: %d bytes\r\n",
 8001a3a:	212b      	movs	r1, #43	; 0x2b
 8001a3c:	4811      	ldr	r0, [pc, #68]	; (8001a84 <main+0x674>)
 8001a3e:	f7fe fe9d 	bl	800077c <myDebug>
							sizeof(COM_UART_TX));

					memset(COM_UART_TX, 0x7e, sizeof(COM_UART_TX));
 8001a42:	222b      	movs	r2, #43	; 0x2b
 8001a44:	217e      	movs	r1, #126	; 0x7e
 8001a46:	4808      	ldr	r0, [pc, #32]	; (8001a68 <main+0x658>)
 8001a48:	f00a f95e 	bl	800bd08 <memset>

					for (int i = 0; i < gs_cmd_len; i++) {
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001a52:	e029      	b.n	8001aa8 <main+0x698>
 8001a54:	200004ec 	.word	0x200004ec
 8001a58:	20000000 	.word	0x20000000
 8001a5c:	200002ac 	.word	0x200002ac
 8001a60:	20000008 	.word	0x20000008
 8001a64:	0800cbc8 	.word	0x0800cbc8
 8001a68:	20000370 	.word	0x20000370
 8001a6c:	20000002 	.word	0x20000002
 8001a70:	20000004 	.word	0x20000004
 8001a74:	2000039c 	.word	0x2000039c
 8001a78:	200004d8 	.word	0x200004d8
 8001a7c:	200004e0 	.word	0x200004e0
 8001a80:	0800cbec 	.word	0x0800cbec
 8001a84:	0800cc0c 	.word	0x0800cc0c
						COM_UART_TX[i] = main_gs_cmd[i];
 8001a88:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001a8a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001a8e:	4413      	add	r3, r2
 8001a90:	7819      	ldrb	r1, [r3, #0]
 8001a92:	4aab      	ldr	r2, [pc, #684]	; (8001d40 <main+0x930>)
 8001a94:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001a98:	4413      	add	r3, r2
 8001a9a:	460a      	mov	r2, r1
 8001a9c:	701a      	strb	r2, [r3, #0]
					for (int i = 0; i < gs_cmd_len; i++) {
 8001a9e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001aa2:	3301      	adds	r3, #1
 8001aa4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001aa8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001aac:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001aae:	429a      	cmp	r2, r3
 8001ab0:	dbea      	blt.n	8001a88 <main+0x678>
					}

					if (HAL_UART_Transmit(&huart2, COM_UART_TX,
 8001ab2:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001ab6:	222b      	movs	r2, #43	; 0x2b
 8001ab8:	49a1      	ldr	r1, [pc, #644]	; (8001d40 <main+0x930>)
 8001aba:	48a2      	ldr	r0, [pc, #648]	; (8001d44 <main+0x934>)
 8001abc:	f004 fee9 	bl	8006892 <HAL_UART_Transmit>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d00a      	beq.n	8001adc <main+0x6cc>
							sizeof(COM_UART_TX), 2000) == HAL_OK
							|| HAL_UART_Transmit(&hlpuart1, COM_UART_TX,
 8001ac6:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001aca:	222b      	movs	r2, #43	; 0x2b
 8001acc:	499c      	ldr	r1, [pc, #624]	; (8001d40 <main+0x930>)
 8001ace:	489e      	ldr	r0, [pc, #632]	; (8001d48 <main+0x938>)
 8001ad0:	f004 fedf 	bl	8006892 <HAL_UART_Transmit>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	f000 8355 	beq.w	8002186 <main+0xd76>
									sizeof(COM_UART_TX), 2000)) {

						for (int i = 0; i < sizeof(COM_UART_TX); i++) {
 8001adc:	2300      	movs	r3, #0
 8001ade:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001ae2:	e00d      	b.n	8001b00 <main+0x6f0>
							myDebug("%02x ", COM_UART_TX[i]);
 8001ae4:	4a96      	ldr	r2, [pc, #600]	; (8001d40 <main+0x930>)
 8001ae6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001aea:	4413      	add	r3, r2
 8001aec:	781b      	ldrb	r3, [r3, #0]
 8001aee:	4619      	mov	r1, r3
 8001af0:	4896      	ldr	r0, [pc, #600]	; (8001d4c <main+0x93c>)
 8001af2:	f7fe fe43 	bl	800077c <myDebug>
						for (int i = 0; i < sizeof(COM_UART_TX); i++) {
 8001af6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001afa:	3301      	adds	r3, #1
 8001afc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001b00:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001b04:	2b2a      	cmp	r3, #42	; 0x2a
 8001b06:	d9ed      	bls.n	8001ae4 <main+0x6d4>
						}

						SUBGRF_SetRfFrequency(FREQ_435_MHZ);
 8001b08:	4891      	ldr	r0, [pc, #580]	; (8001d50 <main+0x940>)
 8001b0a:	f008 fecb 	bl	800a8a4 <SUBGRF_SetRfFrequency>
						SUBGRF_SetSwitch(RFO_LP, RFSWITCH_RX); /*Set RF switch*/
 8001b0e:	2100      	movs	r1, #0
 8001b10:	2001      	movs	r0, #1
 8001b12:	f009 fb0f 	bl	800b134 <SUBGRF_SetSwitch>
						SUBGRF_SetRxBoosted(0xFFFFFF);
 8001b16:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8001b1a:	f008 fcef 	bl	800a4fc <SUBGRF_SetRxBoosted>

						memset(main_gs_cmd, '\0', sizeof(main_gs_cmd));
 8001b1e:	4623      	mov	r3, r4
 8001b20:	461a      	mov	r2, r3
 8001b22:	2100      	movs	r1, #0
 8001b24:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8001b26:	f00a f8ef 	bl	800bd08 <memset>
						memset(COM_UART_TX, 0x7e, sizeof(COM_UART_TX));
 8001b2a:	222b      	movs	r2, #43	; 0x2b
 8001b2c:	217e      	movs	r1, #126	; 0x7e
 8001b2e:	4884      	ldr	r0, [pc, #528]	; (8001d40 <main+0x930>)
 8001b30:	f00a f8ea 	bl	800bd08 <memset>
						memset(rx_buffer, '\0', sizeof(rx_buffer));
 8001b34:	2269      	movs	r2, #105	; 0x69
 8001b36:	2100      	movs	r1, #0
 8001b38:	4886      	ldr	r0, [pc, #536]	; (8001d54 <main+0x944>)
 8001b3a:	f00a f8e5 	bl	800bd08 <memset>
						memset(crc_buff, '\0', sizeof(crc_buff));
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	461a      	mov	r2, r3
 8001b42:	2100      	movs	r1, #0
 8001b44:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8001b48:	f00a f8de 	bl	800bd08 <memset>
						memset(gs_cmd_buff, '\0', sizeof(gs_cmd_buff));
 8001b4c:	f107 0310 	add.w	r3, r7, #16
 8001b50:	2264      	movs	r2, #100	; 0x64
 8001b52:	2100      	movs	r1, #0
 8001b54:	4618      	mov	r0, r3
 8001b56:	f00a f8d7 	bl	800bd08 <memset>

						myDebug("\n\n_____OBC__RECEIVER_____\r\n");
 8001b5a:	487f      	ldr	r0, [pc, #508]	; (8001d58 <main+0x948>)
 8001b5c:	f7fe fe0e 	bl	800077c <myDebug>
 8001b60:	e311      	b.n	8002186 <main+0xd76>
					}

				}
			} else if (COUNT_BEACON == 0) {
 8001b62:	4b7e      	ldr	r3, [pc, #504]	; (8001d5c <main+0x94c>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	f040 830d 	bne.w	8002186 <main+0xd76>
				if (DIGIPEATER_STATUS == 1) {
 8001b6c:	4b7c      	ldr	r3, [pc, #496]	; (8001d60 <main+0x950>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	2b01      	cmp	r3, #1
 8001b72:	f040 816f 	bne.w	8001e54 <main+0xa44>
					if (main_gs_cmd[18] == 0xFD && main_gs_cmd[19] == 0xBA
 8001b76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001b78:	7c9b      	ldrb	r3, [r3, #18]
 8001b7a:	2bfd      	cmp	r3, #253	; 0xfd
 8001b7c:	d15a      	bne.n	8001c34 <main+0x824>
 8001b7e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001b80:	7cdb      	ldrb	r3, [r3, #19]
 8001b82:	2bba      	cmp	r3, #186	; 0xba
 8001b84:	d156      	bne.n	8001c34 <main+0x824>
							&& main_gs_cmd[20] == 0xD0) {
 8001b86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001b88:	7d1b      	ldrb	r3, [r3, #20]
 8001b8a:	2bd0      	cmp	r3, #208	; 0xd0
 8001b8c:	d152      	bne.n	8001c34 <main+0x824>

						BEACON_COUNT = 2;
 8001b8e:	4b75      	ldr	r3, [pc, #468]	; (8001d64 <main+0x954>)
 8001b90:	2202      	movs	r2, #2
 8001b92:	601a      	str	r2, [r3, #0]
						OBC_SUCCESS_DATA_RX_FLAG = 0;
 8001b94:	4b74      	ldr	r3, [pc, #464]	; (8001d68 <main+0x958>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	601a      	str	r2, [r3, #0]
						DIGIPEATER_STATUS = 0;
 8001b9a:	4b71      	ldr	r3, [pc, #452]	; (8001d60 <main+0x950>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	601a      	str	r2, [r3, #0]
						DIGIPEATER_FLAG = 0;
 8001ba0:	4b72      	ldr	r3, [pc, #456]	; (8001d6c <main+0x95c>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	601a      	str	r2, [r3, #0]

						myDebug("\n-------> Digipeater MODE OFF\n\n");
 8001ba6:	4872      	ldr	r0, [pc, #456]	; (8001d70 <main+0x960>)
 8001ba8:	f7fe fde8 	bl	800077c <myDebug>

						COM_UART_TX[0] = 0x53;	//header
 8001bac:	4b64      	ldr	r3, [pc, #400]	; (8001d40 <main+0x930>)
 8001bae:	2253      	movs	r2, #83	; 0x53
 8001bb0:	701a      	strb	r2, [r3, #0]
						COM_UART_TX[1] = 0xac;	//packet_ type
 8001bb2:	4b63      	ldr	r3, [pc, #396]	; (8001d40 <main+0x930>)
 8001bb4:	22ac      	movs	r2, #172	; 0xac
 8001bb6:	705a      	strb	r2, [r3, #1]
						COM_UART_TX[2] = 0x04;	//length of info
 8001bb8:	4b61      	ldr	r3, [pc, #388]	; (8001d40 <main+0x930>)
 8001bba:	2204      	movs	r2, #4
 8001bbc:	709a      	strb	r2, [r3, #2]
						COM_UART_TX[3] = 0x02;	//mcu_no
 8001bbe:	4b60      	ldr	r3, [pc, #384]	; (8001d40 <main+0x930>)
 8001bc0:	2202      	movs	r2, #2
 8001bc2:	70da      	strb	r2, [r3, #3]
						COM_UART_TX[4] = 0x00;	//Digipeater OFF
 8001bc4:	4b5e      	ldr	r3, [pc, #376]	; (8001d40 <main+0x930>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	711a      	strb	r2, [r3, #4]
						COM_UART_TX[5] = 0xdd;	//Digipeater prefix
 8001bca:	4b5d      	ldr	r3, [pc, #372]	; (8001d40 <main+0x930>)
 8001bcc:	22dd      	movs	r2, #221	; 0xdd
 8001bce:	715a      	strb	r2, [r3, #5]

						for (int i = 6; i < com_uart_tx_p_len; i++) {
 8001bd0:	2306      	movs	r3, #6
 8001bd2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8001bd6:	e00a      	b.n	8001bee <main+0x7de>
							COM_UART_TX[i] = 0x00;
 8001bd8:	4a59      	ldr	r2, [pc, #356]	; (8001d40 <main+0x930>)
 8001bda:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001bde:	4413      	add	r3, r2
 8001be0:	2200      	movs	r2, #0
 8001be2:	701a      	strb	r2, [r3, #0]
						for (int i = 6; i < com_uart_tx_p_len; i++) {
 8001be4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001be8:	3301      	adds	r3, #1
 8001bea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8001bee:	4b61      	ldr	r3, [pc, #388]	; (8001d74 <main+0x964>)
 8001bf0:	781b      	ldrb	r3, [r3, #0]
 8001bf2:	461a      	mov	r2, r3
 8001bf4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	dbed      	blt.n	8001bd8 <main+0x7c8>
						}

						enableReqPA();
 8001bfc:	f7ff f8aa 	bl	8000d54 <enableReqPA>

						memset(main_gs_cmd, '\0', sizeof(main_gs_cmd));
 8001c00:	4623      	mov	r3, r4
 8001c02:	461a      	mov	r2, r3
 8001c04:	2100      	movs	r1, #0
 8001c06:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8001c08:	f00a f87e 	bl	800bd08 <memset>
						memset(rx_buffer, '\0', sizeof(rx_buffer));
 8001c0c:	2269      	movs	r2, #105	; 0x69
 8001c0e:	2100      	movs	r1, #0
 8001c10:	4850      	ldr	r0, [pc, #320]	; (8001d54 <main+0x944>)
 8001c12:	f00a f879 	bl	800bd08 <memset>
						memset(crc_buff, '\0', sizeof(crc_buff));
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	461a      	mov	r2, r3
 8001c1a:	2100      	movs	r1, #0
 8001c1c:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8001c20:	f00a f872 	bl	800bd08 <memset>
						memset(gs_cmd_buff, '\0', sizeof(gs_cmd_buff));
 8001c24:	f107 0310 	add.w	r3, r7, #16
 8001c28:	2264      	movs	r2, #100	; 0x64
 8001c2a:	2100      	movs	r1, #0
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f00a f86b 	bl	800bd08 <memset>
 8001c32:	e2a8      	b.n	8002186 <main+0xd76>

					} else if (main_gs_cmd[18] == 0xDF
 8001c34:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001c36:	7c9b      	ldrb	r3, [r3, #18]
 8001c38:	2bdf      	cmp	r3, #223	; 0xdf
 8001c3a:	d157      	bne.n	8001cec <main+0x8dc>
							&& main_gs_cmd[19] == 0xAB
 8001c3c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001c3e:	7cdb      	ldrb	r3, [r3, #19]
 8001c40:	2bab      	cmp	r3, #171	; 0xab
 8001c42:	d153      	bne.n	8001cec <main+0x8dc>
							&& main_gs_cmd[20] == 0xD1) { //Digipeater on
 8001c44:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001c46:	7d1b      	ldrb	r3, [r3, #20]
 8001c48:	2bd1      	cmp	r3, #209	; 0xd1
 8001c4a:	d14f      	bne.n	8001cec <main+0x8dc>

						BEACON_COUNT = 0;
 8001c4c:	4b45      	ldr	r3, [pc, #276]	; (8001d64 <main+0x954>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	601a      	str	r2, [r3, #0]
						OBC_SUCCESS_DATA_RX_FLAG = 0;
 8001c52:	4b45      	ldr	r3, [pc, #276]	; (8001d68 <main+0x958>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	601a      	str	r2, [r3, #0]
						DIGIPEATER_STATUS = 1;
 8001c58:	4b41      	ldr	r3, [pc, #260]	; (8001d60 <main+0x950>)
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	601a      	str	r2, [r3, #0]

						myDebug("\n-------> Digipeater MODE ON\n\n");
 8001c5e:	4846      	ldr	r0, [pc, #280]	; (8001d78 <main+0x968>)
 8001c60:	f7fe fd8c 	bl	800077c <myDebug>

						COM_UART_TX[0] = 0x53;	//header
 8001c64:	4b36      	ldr	r3, [pc, #216]	; (8001d40 <main+0x930>)
 8001c66:	2253      	movs	r2, #83	; 0x53
 8001c68:	701a      	strb	r2, [r3, #0]
						COM_UART_TX[1] = 0xac;	//packet_ type
 8001c6a:	4b35      	ldr	r3, [pc, #212]	; (8001d40 <main+0x930>)
 8001c6c:	22ac      	movs	r2, #172	; 0xac
 8001c6e:	705a      	strb	r2, [r3, #1]
						COM_UART_TX[2] = 0x04;	//length of info
 8001c70:	4b33      	ldr	r3, [pc, #204]	; (8001d40 <main+0x930>)
 8001c72:	2204      	movs	r2, #4
 8001c74:	709a      	strb	r2, [r3, #2]
						COM_UART_TX[3] = 0x02;	//mcu_no
 8001c76:	4b32      	ldr	r3, [pc, #200]	; (8001d40 <main+0x930>)
 8001c78:	2202      	movs	r2, #2
 8001c7a:	70da      	strb	r2, [r3, #3]
						COM_UART_TX[4] = 0x01;	//Digipeater ON
 8001c7c:	4b30      	ldr	r3, [pc, #192]	; (8001d40 <main+0x930>)
 8001c7e:	2201      	movs	r2, #1
 8001c80:	711a      	strb	r2, [r3, #4]
						COM_UART_TX[5] = 0xdd;	//Digipeater prefix
 8001c82:	4b2f      	ldr	r3, [pc, #188]	; (8001d40 <main+0x930>)
 8001c84:	22dd      	movs	r2, #221	; 0xdd
 8001c86:	715a      	strb	r2, [r3, #5]

						for (int i = 6; i < com_uart_tx_p_len; i++) {
 8001c88:	2306      	movs	r3, #6
 8001c8a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001c8e:	e00a      	b.n	8001ca6 <main+0x896>
							COM_UART_TX[i] = 0x00;
 8001c90:	4a2b      	ldr	r2, [pc, #172]	; (8001d40 <main+0x930>)
 8001c92:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001c96:	4413      	add	r3, r2
 8001c98:	2200      	movs	r2, #0
 8001c9a:	701a      	strb	r2, [r3, #0]
						for (int i = 6; i < com_uart_tx_p_len; i++) {
 8001c9c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001ca0:	3301      	adds	r3, #1
 8001ca2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001ca6:	4b33      	ldr	r3, [pc, #204]	; (8001d74 <main+0x964>)
 8001ca8:	781b      	ldrb	r3, [r3, #0]
 8001caa:	461a      	mov	r2, r3
 8001cac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	dbed      	blt.n	8001c90 <main+0x880>
						}

						enableReqPA();
 8001cb4:	f7ff f84e 	bl	8000d54 <enableReqPA>

						memset(main_gs_cmd, '\0', sizeof(main_gs_cmd));
 8001cb8:	4623      	mov	r3, r4
 8001cba:	461a      	mov	r2, r3
 8001cbc:	2100      	movs	r1, #0
 8001cbe:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8001cc0:	f00a f822 	bl	800bd08 <memset>
						memset(rx_buffer, '\0', sizeof(rx_buffer));
 8001cc4:	2269      	movs	r2, #105	; 0x69
 8001cc6:	2100      	movs	r1, #0
 8001cc8:	4822      	ldr	r0, [pc, #136]	; (8001d54 <main+0x944>)
 8001cca:	f00a f81d 	bl	800bd08 <memset>
						memset(crc_buff, '\0', sizeof(crc_buff));
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	461a      	mov	r2, r3
 8001cd2:	2100      	movs	r1, #0
 8001cd4:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8001cd8:	f00a f816 	bl	800bd08 <memset>
						memset(gs_cmd_buff, '\0', sizeof(gs_cmd_buff));
 8001cdc:	f107 0310 	add.w	r3, r7, #16
 8001ce0:	2264      	movs	r2, #100	; 0x64
 8001ce2:	2100      	movs	r1, #0
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f00a f80f 	bl	800bd08 <memset>
 8001cea:	e24c      	b.n	8002186 <main+0xd76>

					} else if (main_gs_cmd[18] == 0x53
 8001cec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001cee:	7c9b      	ldrb	r3, [r3, #18]
 8001cf0:	2b53      	cmp	r3, #83	; 0x53
 8001cf2:	d17b      	bne.n	8001dec <main+0x9dc>
							&& main_gs_cmd[19] == 0x02
 8001cf4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001cf6:	7cdb      	ldrb	r3, [r3, #19]
 8001cf8:	2b02      	cmp	r3, #2
 8001cfa:	d177      	bne.n	8001dec <main+0x9dc>
							&& main_gs_cmd[20] == 0x53) { // if digipeater packet
 8001cfc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001cfe:	7d1b      	ldrb	r3, [r3, #20]
 8001d00:	2b53      	cmp	r3, #83	; 0x53
 8001d02:	d173      	bne.n	8001dec <main+0x9dc>
						myDebug(
 8001d04:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8001d06:	481d      	ldr	r0, [pc, #116]	; (8001d7c <main+0x96c>)
 8001d08:	f7fe fd38 	bl	800077c <myDebug>
								"\nDigipeater packet sent to OBC, Length: %d bytes\r\n",
								gs_cmd_len);
						if (HAL_UART_Transmit(&huart2, main_gs_cmd,
 8001d0c:	b2a2      	uxth	r2, r4
 8001d0e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001d12:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8001d14:	480b      	ldr	r0, [pc, #44]	; (8001d44 <main+0x934>)
 8001d16:	f004 fdbc 	bl	8006892 <HAL_UART_Transmit>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d00a      	beq.n	8001d36 <main+0x926>
								sizeof(main_gs_cmd), 2000) == HAL_OK
								|| HAL_UART_Transmit(&hlpuart1, main_gs_cmd,
 8001d20:	b2a2      	uxth	r2, r4
 8001d22:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001d26:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8001d28:	4807      	ldr	r0, [pc, #28]	; (8001d48 <main+0x938>)
 8001d2a:	f004 fdb2 	bl	8006892 <HAL_UART_Transmit>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	f040 8227 	bne.w	8002184 <main+0xd74>
										sizeof(main_gs_cmd), 2000) == HAL_OK) {

							for (int i = 0; i < gs_cmd_len; i++) {
 8001d36:	2300      	movs	r3, #0
 8001d38:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8001d3c:	e02e      	b.n	8001d9c <main+0x98c>
 8001d3e:	bf00      	nop
 8001d40:	20000370 	.word	0x20000370
 8001d44:	20000688 	.word	0x20000688
 8001d48:	20000560 	.word	0x20000560
 8001d4c:	0800c680 	.word	0x0800c680
 8001d50:	19f25968 	.word	0x19f25968
 8001d54:	200002ac 	.word	0x200002ac
 8001d58:	0800cc38 	.word	0x0800cc38
 8001d5c:	20000008 	.word	0x20000008
 8001d60:	200004d8 	.word	0x200004d8
 8001d64:	20000004 	.word	0x20000004
 8001d68:	2000039c 	.word	0x2000039c
 8001d6c:	200004e0 	.word	0x200004e0
 8001d70:	0800cbec 	.word	0x0800cbec
 8001d74:	20000002 	.word	0x20000002
 8001d78:	0800cc54 	.word	0x0800cc54
 8001d7c:	0800cc74 	.word	0x0800cc74
								myDebug("%02x ", main_gs_cmd[i]);
 8001d80:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001d82:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001d86:	4413      	add	r3, r2
 8001d88:	781b      	ldrb	r3, [r3, #0]
 8001d8a:	4619      	mov	r1, r3
 8001d8c:	48b8      	ldr	r0, [pc, #736]	; (8002070 <main+0xc60>)
 8001d8e:	f7fe fcf5 	bl	800077c <myDebug>
							for (int i = 0; i < gs_cmd_len; i++) {
 8001d92:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001d96:	3301      	adds	r3, #1
 8001d98:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8001d9c:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8001da0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001da2:	429a      	cmp	r2, r3
 8001da4:	dbec      	blt.n	8001d80 <main+0x970>
							}

							myDebug("\r\n");
 8001da6:	48b3      	ldr	r0, [pc, #716]	; (8002074 <main+0xc64>)
 8001da8:	f7fe fce8 	bl	800077c <myDebug>

							memset(main_gs_cmd, '\0', sizeof(main_gs_cmd));
 8001dac:	4623      	mov	r3, r4
 8001dae:	461a      	mov	r2, r3
 8001db0:	2100      	movs	r1, #0
 8001db2:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8001db4:	f009 ffa8 	bl	800bd08 <memset>
							memset(rx_buffer, '\0', sizeof(rx_buffer));
 8001db8:	2269      	movs	r2, #105	; 0x69
 8001dba:	2100      	movs	r1, #0
 8001dbc:	48ae      	ldr	r0, [pc, #696]	; (8002078 <main+0xc68>)
 8001dbe:	f009 ffa3 	bl	800bd08 <memset>
							memset(crc_buff, '\0', sizeof(crc_buff));
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	461a      	mov	r2, r3
 8001dc6:	2100      	movs	r1, #0
 8001dc8:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8001dcc:	f009 ff9c 	bl	800bd08 <memset>
							memset(gs_cmd_buff, '\0', sizeof(gs_cmd_buff));
 8001dd0:	f107 0310 	add.w	r3, r7, #16
 8001dd4:	2264      	movs	r2, #100	; 0x64
 8001dd6:	2100      	movs	r1, #0
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f009 ff95 	bl	800bd08 <memset>

							myDebug(
 8001dde:	48a7      	ldr	r0, [pc, #668]	; (800207c <main+0xc6c>)
 8001de0:	f7fe fccc 	bl	800077c <myDebug>
									"\n\n_____DIGIPEATER_OBC__RECEIVER_____\r\n");
							DIGIPEATER_RX_FLAG = 1;
 8001de4:	4ba6      	ldr	r3, [pc, #664]	; (8002080 <main+0xc70>)
 8001de6:	2201      	movs	r2, #1
 8001de8:	601a      	str	r2, [r3, #0]
						if (HAL_UART_Transmit(&huart2, main_gs_cmd,
 8001dea:	e1cb      	b.n	8002184 <main+0xd74>
						}
					} else {
						myDebug("\n********GS Command failed: 0x%x\r\n");
 8001dec:	48a5      	ldr	r0, [pc, #660]	; (8002084 <main+0xc74>)
 8001dee:	f7fe fcc5 	bl	800077c <myDebug>

						COM_UART_TX[0] = 0x53;	//header
 8001df2:	4ba5      	ldr	r3, [pc, #660]	; (8002088 <main+0xc78>)
 8001df4:	2253      	movs	r2, #83	; 0x53
 8001df6:	701a      	strb	r2, [r3, #0]
						COM_UART_TX[1] = 0xac;	//packet_ type
 8001df8:	4ba3      	ldr	r3, [pc, #652]	; (8002088 <main+0xc78>)
 8001dfa:	22ac      	movs	r2, #172	; 0xac
 8001dfc:	705a      	strb	r2, [r3, #1]
						COM_UART_TX[2] = 0x04;	//length of info
 8001dfe:	4ba2      	ldr	r3, [pc, #648]	; (8002088 <main+0xc78>)
 8001e00:	2204      	movs	r2, #4
 8001e02:	709a      	strb	r2, [r3, #2]
						COM_UART_TX[3] = 0x02;	//mcu_no
 8001e04:	4ba0      	ldr	r3, [pc, #640]	; (8002088 <main+0xc78>)
 8001e06:	2202      	movs	r2, #2
 8001e08:	70da      	strb	r2, [r3, #3]
						COM_UART_TX[4] = 0xfc;	//false command
 8001e0a:	4b9f      	ldr	r3, [pc, #636]	; (8002088 <main+0xc78>)
 8001e0c:	22fc      	movs	r2, #252	; 0xfc
 8001e0e:	711a      	strb	r2, [r3, #4]
						COM_UART_TX[5] = 0xee;	//error prefix
 8001e10:	4b9d      	ldr	r3, [pc, #628]	; (8002088 <main+0xc78>)
 8001e12:	22ee      	movs	r2, #238	; 0xee
 8001e14:	715a      	strb	r2, [r3, #5]

						for (int i = 6; i < com_uart_tx_p_len; i++) {
 8001e16:	2306      	movs	r3, #6
 8001e18:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001e1c:	e00a      	b.n	8001e34 <main+0xa24>
							COM_UART_TX[i] = 0x00;
 8001e1e:	4a9a      	ldr	r2, [pc, #616]	; (8002088 <main+0xc78>)
 8001e20:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001e24:	4413      	add	r3, r2
 8001e26:	2200      	movs	r2, #0
 8001e28:	701a      	strb	r2, [r3, #0]
						for (int i = 6; i < com_uart_tx_p_len; i++) {
 8001e2a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001e2e:	3301      	adds	r3, #1
 8001e30:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001e34:	4b95      	ldr	r3, [pc, #596]	; (800208c <main+0xc7c>)
 8001e36:	781b      	ldrb	r3, [r3, #0]
 8001e38:	461a      	mov	r2, r3
 8001e3a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	dbed      	blt.n	8001e1e <main+0xa0e>
						}

						enableReqPA();
 8001e42:	f7fe ff87 	bl	8000d54 <enableReqPA>

						memset(main_gs_cmd, '\0', sizeof(main_gs_cmd));
 8001e46:	4623      	mov	r3, r4
 8001e48:	461a      	mov	r2, r3
 8001e4a:	2100      	movs	r1, #0
 8001e4c:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8001e4e:	f009 ff5b 	bl	800bd08 <memset>
 8001e52:	e198      	b.n	8002186 <main+0xd76>

					}
				} else if (DIGIPEATER_STATUS == 0) {
 8001e54:	4b8e      	ldr	r3, [pc, #568]	; (8002090 <main+0xc80>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	f040 8194 	bne.w	8002186 <main+0xd76>
					if (main_gs_cmd[18] == 0xFD && main_gs_cmd[19] == 0xBA
 8001e5e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001e60:	7c9b      	ldrb	r3, [r3, #18]
 8001e62:	2bfd      	cmp	r3, #253	; 0xfd
 8001e64:	d15a      	bne.n	8001f1c <main+0xb0c>
 8001e66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001e68:	7cdb      	ldrb	r3, [r3, #19]
 8001e6a:	2bba      	cmp	r3, #186	; 0xba
 8001e6c:	d156      	bne.n	8001f1c <main+0xb0c>
							&& main_gs_cmd[20] == 0xD0) {
 8001e6e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001e70:	7d1b      	ldrb	r3, [r3, #20]
 8001e72:	2bd0      	cmp	r3, #208	; 0xd0
 8001e74:	d152      	bne.n	8001f1c <main+0xb0c>

						BEACON_COUNT = 2;
 8001e76:	4b87      	ldr	r3, [pc, #540]	; (8002094 <main+0xc84>)
 8001e78:	2202      	movs	r2, #2
 8001e7a:	601a      	str	r2, [r3, #0]
						OBC_SUCCESS_DATA_RX_FLAG = 0;
 8001e7c:	4b86      	ldr	r3, [pc, #536]	; (8002098 <main+0xc88>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	601a      	str	r2, [r3, #0]
						DIGIPEATER_STATUS = 0;
 8001e82:	4b83      	ldr	r3, [pc, #524]	; (8002090 <main+0xc80>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	601a      	str	r2, [r3, #0]
						DIGIPEATER_FLAG = 0;
 8001e88:	4b84      	ldr	r3, [pc, #528]	; (800209c <main+0xc8c>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	601a      	str	r2, [r3, #0]

						myDebug("\n-------> Digipeater MODE OFF\n\n");
 8001e8e:	4884      	ldr	r0, [pc, #528]	; (80020a0 <main+0xc90>)
 8001e90:	f7fe fc74 	bl	800077c <myDebug>

						COM_UART_TX[0] = 0x53;	//header
 8001e94:	4b7c      	ldr	r3, [pc, #496]	; (8002088 <main+0xc78>)
 8001e96:	2253      	movs	r2, #83	; 0x53
 8001e98:	701a      	strb	r2, [r3, #0]
						COM_UART_TX[1] = 0xac;	//packet_ type
 8001e9a:	4b7b      	ldr	r3, [pc, #492]	; (8002088 <main+0xc78>)
 8001e9c:	22ac      	movs	r2, #172	; 0xac
 8001e9e:	705a      	strb	r2, [r3, #1]
						COM_UART_TX[2] = 0x04;	//length of info
 8001ea0:	4b79      	ldr	r3, [pc, #484]	; (8002088 <main+0xc78>)
 8001ea2:	2204      	movs	r2, #4
 8001ea4:	709a      	strb	r2, [r3, #2]
						COM_UART_TX[3] = 0x02;	//mcu_no
 8001ea6:	4b78      	ldr	r3, [pc, #480]	; (8002088 <main+0xc78>)
 8001ea8:	2202      	movs	r2, #2
 8001eaa:	70da      	strb	r2, [r3, #3]
						COM_UART_TX[4] = 0x00;	//Digipeater OFF
 8001eac:	4b76      	ldr	r3, [pc, #472]	; (8002088 <main+0xc78>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	711a      	strb	r2, [r3, #4]
						COM_UART_TX[5] = 0xdd;	//Digipeater prefix
 8001eb2:	4b75      	ldr	r3, [pc, #468]	; (8002088 <main+0xc78>)
 8001eb4:	22dd      	movs	r2, #221	; 0xdd
 8001eb6:	715a      	strb	r2, [r3, #5]

						for (int i = 6; i < com_uart_tx_p_len; i++) {
 8001eb8:	2306      	movs	r3, #6
 8001eba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001ebe:	e00a      	b.n	8001ed6 <main+0xac6>
							COM_UART_TX[i] = 0x00;
 8001ec0:	4a71      	ldr	r2, [pc, #452]	; (8002088 <main+0xc78>)
 8001ec2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001ec6:	4413      	add	r3, r2
 8001ec8:	2200      	movs	r2, #0
 8001eca:	701a      	strb	r2, [r3, #0]
						for (int i = 6; i < com_uart_tx_p_len; i++) {
 8001ecc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001ed0:	3301      	adds	r3, #1
 8001ed2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001ed6:	4b6d      	ldr	r3, [pc, #436]	; (800208c <main+0xc7c>)
 8001ed8:	781b      	ldrb	r3, [r3, #0]
 8001eda:	461a      	mov	r2, r3
 8001edc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	dbed      	blt.n	8001ec0 <main+0xab0>
						}

						enableReqPA();
 8001ee4:	f7fe ff36 	bl	8000d54 <enableReqPA>

						memset(main_gs_cmd, '\0', sizeof(main_gs_cmd));
 8001ee8:	4623      	mov	r3, r4
 8001eea:	461a      	mov	r2, r3
 8001eec:	2100      	movs	r1, #0
 8001eee:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8001ef0:	f009 ff0a 	bl	800bd08 <memset>
						memset(rx_buffer, '\0', sizeof(rx_buffer));
 8001ef4:	2269      	movs	r2, #105	; 0x69
 8001ef6:	2100      	movs	r1, #0
 8001ef8:	485f      	ldr	r0, [pc, #380]	; (8002078 <main+0xc68>)
 8001efa:	f009 ff05 	bl	800bd08 <memset>
						memset(crc_buff, '\0', sizeof(crc_buff));
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	461a      	mov	r2, r3
 8001f02:	2100      	movs	r1, #0
 8001f04:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8001f08:	f009 fefe 	bl	800bd08 <memset>
						memset(gs_cmd_buff, '\0', sizeof(gs_cmd_buff));
 8001f0c:	f107 0310 	add.w	r3, r7, #16
 8001f10:	2264      	movs	r2, #100	; 0x64
 8001f12:	2100      	movs	r1, #0
 8001f14:	4618      	mov	r0, r3
 8001f16:	f009 fef7 	bl	800bd08 <memset>
 8001f1a:	e134      	b.n	8002186 <main+0xd76>

					} else if (main_gs_cmd[18] == 0xDF
 8001f1c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f1e:	7c9b      	ldrb	r3, [r3, #18]
 8001f20:	2bdf      	cmp	r3, #223	; 0xdf
 8001f22:	d157      	bne.n	8001fd4 <main+0xbc4>
							&& main_gs_cmd[19] == 0xAB
 8001f24:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f26:	7cdb      	ldrb	r3, [r3, #19]
 8001f28:	2bab      	cmp	r3, #171	; 0xab
 8001f2a:	d153      	bne.n	8001fd4 <main+0xbc4>
							&& main_gs_cmd[20] == 0xD1) {
 8001f2c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f2e:	7d1b      	ldrb	r3, [r3, #20]
 8001f30:	2bd1      	cmp	r3, #209	; 0xd1
 8001f32:	d14f      	bne.n	8001fd4 <main+0xbc4>

						BEACON_COUNT = 0;
 8001f34:	4b57      	ldr	r3, [pc, #348]	; (8002094 <main+0xc84>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	601a      	str	r2, [r3, #0]
						OBC_SUCCESS_DATA_RX_FLAG = 0;
 8001f3a:	4b57      	ldr	r3, [pc, #348]	; (8002098 <main+0xc88>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	601a      	str	r2, [r3, #0]
						DIGIPEATER_STATUS = 1;
 8001f40:	4b53      	ldr	r3, [pc, #332]	; (8002090 <main+0xc80>)
 8001f42:	2201      	movs	r2, #1
 8001f44:	601a      	str	r2, [r3, #0]

						myDebug("\n-------> Digipeater MODE ON\n\n");
 8001f46:	4857      	ldr	r0, [pc, #348]	; (80020a4 <main+0xc94>)
 8001f48:	f7fe fc18 	bl	800077c <myDebug>

						COM_UART_TX[0] = 0x53;	//header
 8001f4c:	4b4e      	ldr	r3, [pc, #312]	; (8002088 <main+0xc78>)
 8001f4e:	2253      	movs	r2, #83	; 0x53
 8001f50:	701a      	strb	r2, [r3, #0]
						COM_UART_TX[1] = 0xac;	//packet_ type
 8001f52:	4b4d      	ldr	r3, [pc, #308]	; (8002088 <main+0xc78>)
 8001f54:	22ac      	movs	r2, #172	; 0xac
 8001f56:	705a      	strb	r2, [r3, #1]
						COM_UART_TX[2] = 0x04;	//length of info
 8001f58:	4b4b      	ldr	r3, [pc, #300]	; (8002088 <main+0xc78>)
 8001f5a:	2204      	movs	r2, #4
 8001f5c:	709a      	strb	r2, [r3, #2]
						COM_UART_TX[3] = 0x02;	//mcu_no
 8001f5e:	4b4a      	ldr	r3, [pc, #296]	; (8002088 <main+0xc78>)
 8001f60:	2202      	movs	r2, #2
 8001f62:	70da      	strb	r2, [r3, #3]
						COM_UART_TX[4] = 0x01;	//Digipeater ON
 8001f64:	4b48      	ldr	r3, [pc, #288]	; (8002088 <main+0xc78>)
 8001f66:	2201      	movs	r2, #1
 8001f68:	711a      	strb	r2, [r3, #4]
						COM_UART_TX[5] = 0xdd;	//Digipeater prefix
 8001f6a:	4b47      	ldr	r3, [pc, #284]	; (8002088 <main+0xc78>)
 8001f6c:	22dd      	movs	r2, #221	; 0xdd
 8001f6e:	715a      	strb	r2, [r3, #5]

						for (int i = 6; i < com_uart_tx_p_len; i++) {
 8001f70:	2306      	movs	r3, #6
 8001f72:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001f76:	e00a      	b.n	8001f8e <main+0xb7e>
							COM_UART_TX[i] = 0x00;
 8001f78:	4a43      	ldr	r2, [pc, #268]	; (8002088 <main+0xc78>)
 8001f7a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001f7e:	4413      	add	r3, r2
 8001f80:	2200      	movs	r2, #0
 8001f82:	701a      	strb	r2, [r3, #0]
						for (int i = 6; i < com_uart_tx_p_len; i++) {
 8001f84:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001f88:	3301      	adds	r3, #1
 8001f8a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001f8e:	4b3f      	ldr	r3, [pc, #252]	; (800208c <main+0xc7c>)
 8001f90:	781b      	ldrb	r3, [r3, #0]
 8001f92:	461a      	mov	r2, r3
 8001f94:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	dbed      	blt.n	8001f78 <main+0xb68>
						}

						enableReqPA();
 8001f9c:	f7fe feda 	bl	8000d54 <enableReqPA>

						memset(main_gs_cmd, '\0', sizeof(main_gs_cmd));
 8001fa0:	4623      	mov	r3, r4
 8001fa2:	461a      	mov	r2, r3
 8001fa4:	2100      	movs	r1, #0
 8001fa6:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8001fa8:	f009 feae 	bl	800bd08 <memset>
						memset(rx_buffer, '\0', sizeof(rx_buffer));
 8001fac:	2269      	movs	r2, #105	; 0x69
 8001fae:	2100      	movs	r1, #0
 8001fb0:	4831      	ldr	r0, [pc, #196]	; (8002078 <main+0xc68>)
 8001fb2:	f009 fea9 	bl	800bd08 <memset>
						memset(crc_buff, '\0', sizeof(crc_buff));
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	461a      	mov	r2, r3
 8001fba:	2100      	movs	r1, #0
 8001fbc:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8001fc0:	f009 fea2 	bl	800bd08 <memset>
						memset(gs_cmd_buff, '\0', sizeof(gs_cmd_buff));
 8001fc4:	f107 0310 	add.w	r3, r7, #16
 8001fc8:	2264      	movs	r2, #100	; 0x64
 8001fca:	2100      	movs	r1, #0
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f009 fe9b 	bl	800bd08 <memset>
 8001fd2:	e0d8      	b.n	8002186 <main+0xd76>

					} else if (main_gs_cmd[18] == 0x53
 8001fd4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001fd6:	7c9b      	ldrb	r3, [r3, #18]
 8001fd8:	2b53      	cmp	r3, #83	; 0x53
 8001fda:	d13b      	bne.n	8002054 <main+0xc44>
							&& main_gs_cmd[19] == 0x02
 8001fdc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001fde:	7cdb      	ldrb	r3, [r3, #19]
 8001fe0:	2b02      	cmp	r3, #2
 8001fe2:	d137      	bne.n	8002054 <main+0xc44>
							&& main_gs_cmd[20] == 0x53) { // Digipeater Packet
 8001fe4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001fe6:	7d1b      	ldrb	r3, [r3, #20]
 8001fe8:	2b53      	cmp	r3, #83	; 0x53
 8001fea:	d133      	bne.n	8002054 <main+0xc44>

						myDebug("\n********GS Command failed: 0x%x\r\n");
 8001fec:	4825      	ldr	r0, [pc, #148]	; (8002084 <main+0xc74>)
 8001fee:	f7fe fbc5 	bl	800077c <myDebug>

						COM_UART_TX[0] = 0x53;	//header
 8001ff2:	4b25      	ldr	r3, [pc, #148]	; (8002088 <main+0xc78>)
 8001ff4:	2253      	movs	r2, #83	; 0x53
 8001ff6:	701a      	strb	r2, [r3, #0]
						COM_UART_TX[1] = 0xac;	//packet_ type
 8001ff8:	4b23      	ldr	r3, [pc, #140]	; (8002088 <main+0xc78>)
 8001ffa:	22ac      	movs	r2, #172	; 0xac
 8001ffc:	705a      	strb	r2, [r3, #1]
						COM_UART_TX[2] = 0x04;	//length of info
 8001ffe:	4b22      	ldr	r3, [pc, #136]	; (8002088 <main+0xc78>)
 8002000:	2204      	movs	r2, #4
 8002002:	709a      	strb	r2, [r3, #2]
						COM_UART_TX[3] = 0x02;	//mcu_no
 8002004:	4b20      	ldr	r3, [pc, #128]	; (8002088 <main+0xc78>)
 8002006:	2202      	movs	r2, #2
 8002008:	70da      	strb	r2, [r3, #3]
						COM_UART_TX[4] = 0xfc;	//false command
 800200a:	4b1f      	ldr	r3, [pc, #124]	; (8002088 <main+0xc78>)
 800200c:	22fc      	movs	r2, #252	; 0xfc
 800200e:	711a      	strb	r2, [r3, #4]
						COM_UART_TX[5] = 0xee;	//error prefix
 8002010:	4b1d      	ldr	r3, [pc, #116]	; (8002088 <main+0xc78>)
 8002012:	22ee      	movs	r2, #238	; 0xee
 8002014:	715a      	strb	r2, [r3, #5]

						for (int i = 6; i < com_uart_tx_p_len; i++) {
 8002016:	2306      	movs	r3, #6
 8002018:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800201c:	e00a      	b.n	8002034 <main+0xc24>
							COM_UART_TX[i] = 0x00;
 800201e:	4a1a      	ldr	r2, [pc, #104]	; (8002088 <main+0xc78>)
 8002020:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002024:	4413      	add	r3, r2
 8002026:	2200      	movs	r2, #0
 8002028:	701a      	strb	r2, [r3, #0]
						for (int i = 6; i < com_uart_tx_p_len; i++) {
 800202a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800202e:	3301      	adds	r3, #1
 8002030:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002034:	4b15      	ldr	r3, [pc, #84]	; (800208c <main+0xc7c>)
 8002036:	781b      	ldrb	r3, [r3, #0]
 8002038:	461a      	mov	r2, r3
 800203a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800203e:	4293      	cmp	r3, r2
 8002040:	dbed      	blt.n	800201e <main+0xc0e>
						}

						enableReqPA();
 8002042:	f7fe fe87 	bl	8000d54 <enableReqPA>

						memset(main_gs_cmd, '\0', sizeof(main_gs_cmd));
 8002046:	4623      	mov	r3, r4
 8002048:	461a      	mov	r2, r3
 800204a:	2100      	movs	r1, #0
 800204c:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800204e:	f009 fe5b 	bl	800bd08 <memset>
 8002052:	e098      	b.n	8002186 <main+0xd76>

					} else {
						myDebug("\nCommand sent to OBC, Length: %d bytes\r\n",
 8002054:	212b      	movs	r1, #43	; 0x2b
 8002056:	4814      	ldr	r0, [pc, #80]	; (80020a8 <main+0xc98>)
 8002058:	f7fe fb90 	bl	800077c <myDebug>
								sizeof(COM_UART_TX));

						memset(COM_UART_TX, 0x7e, sizeof(COM_UART_TX));
 800205c:	222b      	movs	r2, #43	; 0x2b
 800205e:	217e      	movs	r1, #126	; 0x7e
 8002060:	4809      	ldr	r0, [pc, #36]	; (8002088 <main+0xc78>)
 8002062:	f009 fe51 	bl	800bd08 <memset>

						for (int i = 0; i < gs_cmd_len; i++) {
 8002066:	2300      	movs	r3, #0
 8002068:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800206c:	e02e      	b.n	80020cc <main+0xcbc>
 800206e:	bf00      	nop
 8002070:	0800c680 	.word	0x0800c680
 8002074:	0800c688 	.word	0x0800c688
 8002078:	200002ac 	.word	0x200002ac
 800207c:	0800cca8 	.word	0x0800cca8
 8002080:	200004e4 	.word	0x200004e4
 8002084:	0800cbc8 	.word	0x0800cbc8
 8002088:	20000370 	.word	0x20000370
 800208c:	20000002 	.word	0x20000002
 8002090:	200004d8 	.word	0x200004d8
 8002094:	20000004 	.word	0x20000004
 8002098:	2000039c 	.word	0x2000039c
 800209c:	200004e0 	.word	0x200004e0
 80020a0:	0800cbec 	.word	0x0800cbec
 80020a4:	0800cc54 	.word	0x0800cc54
 80020a8:	0800cc0c 	.word	0x0800cc0c
							COM_UART_TX[i] = main_gs_cmd[i];
 80020ac:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80020ae:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80020b2:	4413      	add	r3, r2
 80020b4:	7819      	ldrb	r1, [r3, #0]
 80020b6:	4a3e      	ldr	r2, [pc, #248]	; (80021b0 <main+0xda0>)
 80020b8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80020bc:	4413      	add	r3, r2
 80020be:	460a      	mov	r2, r1
 80020c0:	701a      	strb	r2, [r3, #0]
						for (int i = 0; i < gs_cmd_len; i++) {
 80020c2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80020c6:	3301      	adds	r3, #1
 80020c8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80020cc:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80020d0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80020d2:	429a      	cmp	r2, r3
 80020d4:	dbea      	blt.n	80020ac <main+0xc9c>
						}

						if (HAL_UART_Transmit(&huart2, COM_UART_TX,
 80020d6:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80020da:	222b      	movs	r2, #43	; 0x2b
 80020dc:	4934      	ldr	r1, [pc, #208]	; (80021b0 <main+0xda0>)
 80020de:	4835      	ldr	r0, [pc, #212]	; (80021b4 <main+0xda4>)
 80020e0:	f004 fbd7 	bl	8006892 <HAL_UART_Transmit>
 80020e4:	4603      	mov	r3, r0
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d009      	beq.n	80020fe <main+0xcee>
								sizeof(COM_UART_TX), 2000) == HAL_OK
								|| HAL_UART_Transmit(&hlpuart1, COM_UART_TX,
 80020ea:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80020ee:	222b      	movs	r2, #43	; 0x2b
 80020f0:	492f      	ldr	r1, [pc, #188]	; (80021b0 <main+0xda0>)
 80020f2:	4831      	ldr	r0, [pc, #196]	; (80021b8 <main+0xda8>)
 80020f4:	f004 fbcd 	bl	8006892 <HAL_UART_Transmit>
 80020f8:	4603      	mov	r3, r0
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d043      	beq.n	8002186 <main+0xd76>
										sizeof(COM_UART_TX), 2000)) {

							for (int i = 0; i < sizeof(COM_UART_TX); i++) {
 80020fe:	2300      	movs	r3, #0
 8002100:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002104:	e00d      	b.n	8002122 <main+0xd12>
								myDebug("%02x ", COM_UART_TX[i]);
 8002106:	4a2a      	ldr	r2, [pc, #168]	; (80021b0 <main+0xda0>)
 8002108:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800210c:	4413      	add	r3, r2
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	4619      	mov	r1, r3
 8002112:	482a      	ldr	r0, [pc, #168]	; (80021bc <main+0xdac>)
 8002114:	f7fe fb32 	bl	800077c <myDebug>
							for (int i = 0; i < sizeof(COM_UART_TX); i++) {
 8002118:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800211c:	3301      	adds	r3, #1
 800211e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002122:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002126:	2b2a      	cmp	r3, #42	; 0x2a
 8002128:	d9ed      	bls.n	8002106 <main+0xcf6>
							}

							SUBGRF_SetRfFrequency(FREQ_435_MHZ);
 800212a:	4825      	ldr	r0, [pc, #148]	; (80021c0 <main+0xdb0>)
 800212c:	f008 fbba 	bl	800a8a4 <SUBGRF_SetRfFrequency>
							SUBGRF_SetSwitch(RFO_LP, RFSWITCH_RX); /*Set RF switch*/
 8002130:	2100      	movs	r1, #0
 8002132:	2001      	movs	r0, #1
 8002134:	f008 fffe 	bl	800b134 <SUBGRF_SetSwitch>
							SUBGRF_SetRxBoosted(0xFFFFFF);
 8002138:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800213c:	f008 f9de 	bl	800a4fc <SUBGRF_SetRxBoosted>

							memset(main_gs_cmd, '\0', sizeof(main_gs_cmd));
 8002140:	4623      	mov	r3, r4
 8002142:	461a      	mov	r2, r3
 8002144:	2100      	movs	r1, #0
 8002146:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8002148:	f009 fdde 	bl	800bd08 <memset>
							memset(COM_UART_TX, 0x7e, sizeof(COM_UART_TX));
 800214c:	222b      	movs	r2, #43	; 0x2b
 800214e:	217e      	movs	r1, #126	; 0x7e
 8002150:	4817      	ldr	r0, [pc, #92]	; (80021b0 <main+0xda0>)
 8002152:	f009 fdd9 	bl	800bd08 <memset>
							memset(rx_buffer, '\0', sizeof(rx_buffer));
 8002156:	2269      	movs	r2, #105	; 0x69
 8002158:	2100      	movs	r1, #0
 800215a:	481a      	ldr	r0, [pc, #104]	; (80021c4 <main+0xdb4>)
 800215c:	f009 fdd4 	bl	800bd08 <memset>
							memset(crc_buff, '\0', sizeof(crc_buff));
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	461a      	mov	r2, r3
 8002164:	2100      	movs	r1, #0
 8002166:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800216a:	f009 fdcd 	bl	800bd08 <memset>
							memset(gs_cmd_buff, '\0', sizeof(gs_cmd_buff));
 800216e:	f107 0310 	add.w	r3, r7, #16
 8002172:	2264      	movs	r2, #100	; 0x64
 8002174:	2100      	movs	r1, #0
 8002176:	4618      	mov	r0, r3
 8002178:	f009 fdc6 	bl	800bd08 <memset>

							myDebug("\n\n_____OBC__RECEIVER_____\r\n");
 800217c:	4812      	ldr	r0, [pc, #72]	; (80021c8 <main+0xdb8>)
 800217e:	f7fe fafd 	bl	800077c <myDebug>
 8002182:	e000      	b.n	8002186 <main+0xd76>
						if (HAL_UART_Transmit(&huart2, main_gs_cmd,
 8002184:	bf00      	nop
 8002186:	f8d7 d008 	ldr.w	sp, [r7, #8]
					}
				}
			}
		}

		HAL_UART_Receive_DMA(&huart2, OBC_UART_RX, obc_plen);
 800218a:	4b10      	ldr	r3, [pc, #64]	; (80021cc <main+0xdbc>)
 800218c:	781b      	ldrb	r3, [r3, #0]
 800218e:	b29b      	uxth	r3, r3
 8002190:	461a      	mov	r2, r3
 8002192:	490f      	ldr	r1, [pc, #60]	; (80021d0 <main+0xdc0>)
 8002194:	4807      	ldr	r0, [pc, #28]	; (80021b4 <main+0xda4>)
 8002196:	f004 fcc7 	bl	8006b28 <HAL_UART_Receive_DMA>

		HAL_UART_Receive_DMA(&hlpuart1, OBC_UART_RX, obc_plen);
 800219a:	4b0c      	ldr	r3, [pc, #48]	; (80021cc <main+0xdbc>)
 800219c:	781b      	ldrb	r3, [r3, #0]
 800219e:	b29b      	uxth	r3, r3
 80021a0:	461a      	mov	r2, r3
 80021a2:	490b      	ldr	r1, [pc, #44]	; (80021d0 <main+0xdc0>)
 80021a4:	4804      	ldr	r0, [pc, #16]	; (80021b8 <main+0xda8>)
 80021a6:	f004 fcbf 	bl	8006b28 <HAL_UART_Receive_DMA>
		MX_SubGHz_Phy_Process();
 80021aa:	f7ff b9e7 	b.w	800157c <main+0x16c>
 80021ae:	bf00      	nop
 80021b0:	20000370 	.word	0x20000370
 80021b4:	20000688 	.word	0x20000688
 80021b8:	20000560 	.word	0x20000560
 80021bc:	0800c680 	.word	0x0800c680
 80021c0:	19f25968 	.word	0x19f25968
 80021c4:	200002ac 	.word	0x200002ac
 80021c8:	0800cc38 	.word	0x0800cc38
 80021cc:	20000001 	.word	0x20000001
 80021d0:	20000318 	.word	0x20000318

080021d4 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b09a      	sub	sp, #104	; 0x68
 80021d8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80021da:	f107 0320 	add.w	r3, r7, #32
 80021de:	2248      	movs	r2, #72	; 0x48
 80021e0:	2100      	movs	r1, #0
 80021e2:	4618      	mov	r0, r3
 80021e4:	f009 fd90 	bl	800bd08 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80021e8:	1d3b      	adds	r3, r7, #4
 80021ea:	2200      	movs	r2, #0
 80021ec:	601a      	str	r2, [r3, #0]
 80021ee:	605a      	str	r2, [r3, #4]
 80021f0:	609a      	str	r2, [r3, #8]
 80021f2:	60da      	str	r2, [r3, #12]
 80021f4:	611a      	str	r2, [r3, #16]
 80021f6:	615a      	str	r2, [r3, #20]
 80021f8:	619a      	str	r2, [r3, #24]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80021fa:	4b25      	ldr	r3, [pc, #148]	; (8002290 <SystemClock_Config+0xbc>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002202:	4a23      	ldr	r2, [pc, #140]	; (8002290 <SystemClock_Config+0xbc>)
 8002204:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002208:	6013      	str	r3, [r2, #0]
 800220a:	4b21      	ldr	r3, [pc, #132]	; (8002290 <SystemClock_Config+0xbc>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002212:	603b      	str	r3, [r7, #0]
 8002214:	683b      	ldr	r3, [r7, #0]

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002216:	2301      	movs	r3, #1
 8002218:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS_PWR;
 800221a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800221e:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.HSEDiv = RCC_HSE_DIV1;
 8002220:	2300      	movs	r3, #0
 8002222:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002224:	2302      	movs	r3, #2
 8002226:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002228:	2303      	movs	r3, #3
 800222a:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 800222c:	2310      	movs	r3, #16
 800222e:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLN = 6;
 8002230:	2306      	movs	r3, #6
 8002232:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002234:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002238:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800223a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800223e:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002240:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002244:	663b      	str	r3, [r7, #96]	; 0x60
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8002246:	f107 0320 	add.w	r3, r7, #32
 800224a:	4618      	mov	r0, r3
 800224c:	f002 fadc 	bl	8004808 <HAL_RCC_OscConfig>
 8002250:	4603      	mov	r3, r0
 8002252:	2b00      	cmp	r3, #0
 8002254:	d001      	beq.n	800225a <SystemClock_Config+0x86>
		Error_Handler();
 8002256:	f000 fb03 	bl	8002860 <Error_Handler>
	}

	/** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3 | RCC_CLOCKTYPE_HCLK
 800225a:	234f      	movs	r3, #79	; 0x4f
 800225c:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800225e:	2303      	movs	r3, #3
 8002260:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002262:	2300      	movs	r3, #0
 8002264:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002266:	2300      	movs	r3, #0
 8002268:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800226a:	2300      	movs	r3, #0
 800226c:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 800226e:	2300      	movs	r3, #0
 8002270:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8002272:	1d3b      	adds	r3, r7, #4
 8002274:	2102      	movs	r1, #2
 8002276:	4618      	mov	r0, r3
 8002278:	f002 fe48 	bl	8004f0c <HAL_RCC_ClockConfig>
 800227c:	4603      	mov	r3, r0
 800227e:	2b00      	cmp	r3, #0
 8002280:	d001      	beq.n	8002286 <SystemClock_Config+0xb2>
		Error_Handler();
 8002282:	f000 faed 	bl	8002860 <Error_Handler>
	}
}
 8002286:	bf00      	nop
 8002288:	3768      	adds	r7, #104	; 0x68
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	58000400 	.word	0x58000400

08002294 <DioIrqHndlr>:

/* USER CODE BEGIN 4 */
void DioIrqHndlr(RadioIrqMasks_t radioIrq) {
 8002294:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002298:	b09f      	sub	sp, #124	; 0x7c
 800229a:	af00      	add	r7, sp, #0
 800229c:	4603      	mov	r3, r0
 800229e:	81fb      	strh	r3, [r7, #14]
	if (radioIrq == IRQ_TX_DONE) {
 80022a0:	89fb      	ldrh	r3, [r7, #14]
 80022a2:	2b01      	cmp	r3, #1
 80022a4:	f040 8156 	bne.w	8002554 <DioIrqHndlr+0x2c0>
		OBC_SUCCESS_DATA_RX_FLAG = 0;
 80022a8:	4b87      	ldr	r3, [pc, #540]	; (80024c8 <DioIrqHndlr+0x234>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	601a      	str	r2, [r3, #0]

		myDebug("\nSatellite Data Transmitted Successful, Length: %d bytes\r\n",
 80022ae:	4b87      	ldr	r3, [pc, #540]	; (80024cc <DioIrqHndlr+0x238>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4619      	mov	r1, r3
 80022b4:	4886      	ldr	r0, [pc, #536]	; (80024d0 <DioIrqHndlr+0x23c>)
 80022b6:	f7fe fa61 	bl	800077c <myDebug>
				tx_buffer_len);
		for (int i = 0; i < tx_buffer_len; i++) {
 80022ba:	2300      	movs	r3, #0
 80022bc:	677b      	str	r3, [r7, #116]	; 0x74
 80022be:	e00a      	b.n	80022d6 <DioIrqHndlr+0x42>
			myDebug("%02x ", tx_buffer[i]);
 80022c0:	4a84      	ldr	r2, [pc, #528]	; (80024d4 <DioIrqHndlr+0x240>)
 80022c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80022c4:	4413      	add	r3, r2
 80022c6:	781b      	ldrb	r3, [r3, #0]
 80022c8:	4619      	mov	r1, r3
 80022ca:	4883      	ldr	r0, [pc, #524]	; (80024d8 <DioIrqHndlr+0x244>)
 80022cc:	f7fe fa56 	bl	800077c <myDebug>
		for (int i = 0; i < tx_buffer_len; i++) {
 80022d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80022d2:	3301      	adds	r3, #1
 80022d4:	677b      	str	r3, [r7, #116]	; 0x74
 80022d6:	4b7d      	ldr	r3, [pc, #500]	; (80024cc <DioIrqHndlr+0x238>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80022dc:	429a      	cmp	r2, r3
 80022de:	dbef      	blt.n	80022c0 <DioIrqHndlr+0x2c>
		}
		myDebug("\r\n");
 80022e0:	487e      	ldr	r0, [pc, #504]	; (80024dc <DioIrqHndlr+0x248>)
 80022e2:	f7fe fa4b 	bl	800077c <myDebug>

		myDebug("\n########## Sending TX done response to OBC ##########\n");
 80022e6:	487e      	ldr	r0, [pc, #504]	; (80024e0 <DioIrqHndlr+0x24c>)
 80022e8:	f7fe fa48 	bl	800077c <myDebug>

		uint8_t tx_done_response[43];

		tx_done_response[0] = 0x42;	//header
 80022ec:	2342      	movs	r3, #66	; 0x42
 80022ee:	743b      	strb	r3, [r7, #16]
		tx_done_response[1] = 0xac;	//packet_ type
 80022f0:	23ac      	movs	r3, #172	; 0xac
 80022f2:	747b      	strb	r3, [r7, #17]
		tx_done_response[2] = 0x04;	//length of info
 80022f4:	2304      	movs	r3, #4
 80022f6:	74bb      	strb	r3, [r7, #18]
		tx_done_response[3] = 0x02;	//mcu_no
 80022f8:	2302      	movs	r3, #2
 80022fa:	74fb      	strb	r3, [r7, #19]
		tx_done_response[4] = 0x4d;	//tx_done prefix
 80022fc:	234d      	movs	r3, #77	; 0x4d
 80022fe:	753b      	strb	r3, [r7, #20]
		tx_done_response[5] = 0x4d;	//tx_done prefix
 8002300:	234d      	movs	r3, #77	; 0x4d
 8002302:	757b      	strb	r3, [r7, #21]

		for (int i = 6; i < 43; i++) {
 8002304:	2306      	movs	r3, #6
 8002306:	673b      	str	r3, [r7, #112]	; 0x70
 8002308:	e008      	b.n	800231c <DioIrqHndlr+0x88>
			tx_done_response[i] = 0x4d;
 800230a:	f107 0210 	add.w	r2, r7, #16
 800230e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002310:	4413      	add	r3, r2
 8002312:	224d      	movs	r2, #77	; 0x4d
 8002314:	701a      	strb	r2, [r3, #0]
		for (int i = 6; i < 43; i++) {
 8002316:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002318:	3301      	adds	r3, #1
 800231a:	673b      	str	r3, [r7, #112]	; 0x70
 800231c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800231e:	2b2a      	cmp	r3, #42	; 0x2a
 8002320:	ddf3      	ble.n	800230a <DioIrqHndlr+0x76>
		}

		if (HAL_UART_Transmit(&huart2, tx_done_response,
 8002322:	f107 0110 	add.w	r1, r7, #16
 8002326:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800232a:	222b      	movs	r2, #43	; 0x2b
 800232c:	486d      	ldr	r0, [pc, #436]	; (80024e4 <DioIrqHndlr+0x250>)
 800232e:	f004 fab0 	bl	8006892 <HAL_UART_Transmit>
 8002332:	4603      	mov	r3, r0
 8002334:	2b00      	cmp	r3, #0
 8002336:	d00a      	beq.n	800234e <DioIrqHndlr+0xba>
				sizeof(tx_done_response), 2000) == HAL_OK
				|| HAL_UART_Transmit(&hlpuart1, tx_done_response,
 8002338:	f107 0110 	add.w	r1, r7, #16
 800233c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002340:	222b      	movs	r2, #43	; 0x2b
 8002342:	4869      	ldr	r0, [pc, #420]	; (80024e8 <DioIrqHndlr+0x254>)
 8002344:	f004 faa5 	bl	8006892 <HAL_UART_Transmit>
 8002348:	4603      	mov	r3, r0
 800234a:	2b00      	cmp	r3, #0
 800234c:	d114      	bne.n	8002378 <DioIrqHndlr+0xe4>
						sizeof(tx_done_response), 2000) == HAL_OK) {

			for (int i = 0; i < sizeof(tx_done_response); i++) {
 800234e:	2300      	movs	r3, #0
 8002350:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002352:	e00b      	b.n	800236c <DioIrqHndlr+0xd8>
				myDebug("%02x ", tx_done_response[i]);
 8002354:	f107 0210 	add.w	r2, r7, #16
 8002358:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800235a:	4413      	add	r3, r2
 800235c:	781b      	ldrb	r3, [r3, #0]
 800235e:	4619      	mov	r1, r3
 8002360:	485d      	ldr	r0, [pc, #372]	; (80024d8 <DioIrqHndlr+0x244>)
 8002362:	f7fe fa0b 	bl	800077c <myDebug>
			for (int i = 0; i < sizeof(tx_done_response); i++) {
 8002366:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002368:	3301      	adds	r3, #1
 800236a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800236c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800236e:	2b2a      	cmp	r3, #42	; 0x2a
 8002370:	d9f0      	bls.n	8002354 <DioIrqHndlr+0xc0>
			}

			myDebug("\r\n");
 8002372:	485a      	ldr	r0, [pc, #360]	; (80024dc <DioIrqHndlr+0x248>)
 8002374:	f7fe fa02 	bl	800077c <myDebug>

		}

		memset(tx_buffer, '\0', sizeof(tx_buffer));
 8002378:	2296      	movs	r2, #150	; 0x96
 800237a:	2100      	movs	r1, #0
 800237c:	4855      	ldr	r0, [pc, #340]	; (80024d4 <DioIrqHndlr+0x240>)
 800237e:	f009 fcc3 	bl	800bd08 <memset>

		if (PACKET_TYPE == 0xB1 || PACKET_TYPE == 0xB2) {
 8002382:	4b5a      	ldr	r3, [pc, #360]	; (80024ec <DioIrqHndlr+0x258>)
 8002384:	781b      	ldrb	r3, [r3, #0]
 8002386:	2bb1      	cmp	r3, #177	; 0xb1
 8002388:	d003      	beq.n	8002392 <DioIrqHndlr+0xfe>
 800238a:	4b58      	ldr	r3, [pc, #352]	; (80024ec <DioIrqHndlr+0x258>)
 800238c:	781b      	ldrb	r3, [r3, #0]
 800238e:	2bb2      	cmp	r3, #178	; 0xb2
 8002390:	d10c      	bne.n	80023ac <DioIrqHndlr+0x118>
			BEACON_COUNT--;
 8002392:	4b57      	ldr	r3, [pc, #348]	; (80024f0 <DioIrqHndlr+0x25c>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	3b01      	subs	r3, #1
 8002398:	4a55      	ldr	r2, [pc, #340]	; (80024f0 <DioIrqHndlr+0x25c>)
 800239a:	6013      	str	r3, [r2, #0]
			COUNT_BEACON--;
 800239c:	4b55      	ldr	r3, [pc, #340]	; (80024f4 <DioIrqHndlr+0x260>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	3b01      	subs	r3, #1
 80023a2:	4a54      	ldr	r2, [pc, #336]	; (80024f4 <DioIrqHndlr+0x260>)
 80023a4:	6013      	str	r3, [r2, #0]
			PACKET_TYPE = 0;
 80023a6:	4b51      	ldr	r3, [pc, #324]	; (80024ec <DioIrqHndlr+0x258>)
 80023a8:	2200      	movs	r2, #0
 80023aa:	701a      	strb	r2, [r3, #0]
		}

		if (DIGIPEATER_FLAG == 1) {
 80023ac:	4b52      	ldr	r3, [pc, #328]	; (80024f8 <DioIrqHndlr+0x264>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	2b01      	cmp	r3, #1
 80023b2:	d10e      	bne.n	80023d2 <DioIrqHndlr+0x13e>
			BEACON_COUNT = 2;
 80023b4:	4b4e      	ldr	r3, [pc, #312]	; (80024f0 <DioIrqHndlr+0x25c>)
 80023b6:	2202      	movs	r2, #2
 80023b8:	601a      	str	r2, [r3, #0]
			OBC_SUCCESS_DATA_RX_FLAG = 0;
 80023ba:	4b43      	ldr	r3, [pc, #268]	; (80024c8 <DioIrqHndlr+0x234>)
 80023bc:	2200      	movs	r2, #0
 80023be:	601a      	str	r2, [r3, #0]
			DIGIPEATER_STATUS = 0;
 80023c0:	4b4e      	ldr	r3, [pc, #312]	; (80024fc <DioIrqHndlr+0x268>)
 80023c2:	2200      	movs	r2, #0
 80023c4:	601a      	str	r2, [r3, #0]
			DIGIPEATER_FLAG = 0;
 80023c6:	4b4c      	ldr	r3, [pc, #304]	; (80024f8 <DioIrqHndlr+0x264>)
 80023c8:	2200      	movs	r2, #0
 80023ca:	601a      	str	r2, [r3, #0]
			DIGIPEATER_RX_FLAG = 0;
 80023cc:	4b4c      	ldr	r3, [pc, #304]	; (8002500 <DioIrqHndlr+0x26c>)
 80023ce:	2200      	movs	r2, #0
 80023d0:	601a      	str	r2, [r3, #0]
		}

		if (BEACON_COUNT == 0) {
 80023d2:	4b47      	ldr	r3, [pc, #284]	; (80024f0 <DioIrqHndlr+0x25c>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d109      	bne.n	80023ee <DioIrqHndlr+0x15a>
			OBC_SUCCESS_DATA_RX_FLAG = 0;
 80023da:	4b3b      	ldr	r3, [pc, #236]	; (80024c8 <DioIrqHndlr+0x234>)
 80023dc:	2200      	movs	r2, #0
 80023de:	601a      	str	r2, [r3, #0]
			DIGIPEATER_STATUS = 1;
 80023e0:	4b46      	ldr	r3, [pc, #280]	; (80024fc <DioIrqHndlr+0x268>)
 80023e2:	2201      	movs	r2, #1
 80023e4:	601a      	str	r2, [r3, #0]
			myDebug("\n########## Digipeater Mode Configuration: ##########\n");
 80023e6:	4847      	ldr	r0, [pc, #284]	; (8002504 <DioIrqHndlr+0x270>)
 80023e8:	f7fe f9c8 	bl	800077c <myDebug>
 80023ec:	e002      	b.n	80023f4 <DioIrqHndlr+0x160>
		} else {
			DIGIPEATER_STATUS = 0;
 80023ee:	4b43      	ldr	r3, [pc, #268]	; (80024fc <DioIrqHndlr+0x268>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	601a      	str	r2, [r3, #0]
		}

		delay_us(500000);
 80023f4:	4844      	ldr	r0, [pc, #272]	; (8002508 <DioIrqHndlr+0x274>)
 80023f6:	f7fe f9a7 	bl	8000748 <delay_us>

		setPacketParams(rx_buffer_len);
 80023fa:	4b44      	ldr	r3, [pc, #272]	; (800250c <DioIrqHndlr+0x278>)
 80023fc:	781b      	ldrb	r3, [r3, #0]
 80023fe:	4618      	mov	r0, r3
 8002400:	f7fe fd34 	bl	8000e6c <setPacketParams>
		setModulationParams(GFSK_BR_1200, GFSK_FDEV_1200);
 8002404:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8002408:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 800240c:	f7fe fd58 	bl	8000ec0 <setModulationParams>
		radioConfig(rx_buffer, rx_buffer_len);
 8002410:	4b3e      	ldr	r3, [pc, #248]	; (800250c <DioIrqHndlr+0x278>)
 8002412:	781b      	ldrb	r3, [r3, #0]
 8002414:	4619      	mov	r1, r3
 8002416:	483e      	ldr	r0, [pc, #248]	; (8002510 <DioIrqHndlr+0x27c>)
 8002418:	f7fe fd70 	bl	8000efc <radioConfig>

		myDebug("\n########## RX Configuration: ##########\n");
 800241c:	483d      	ldr	r0, [pc, #244]	; (8002514 <DioIrqHndlr+0x280>)
 800241e:	f7fe f9ad 	bl	800077c <myDebug>

		myDebug("FREQUENCY MODS: UPLINK FREQ: %lu Hz\r\n",
 8002422:	493d      	ldr	r1, [pc, #244]	; (8002518 <DioIrqHndlr+0x284>)
 8002424:	483d      	ldr	r0, [pc, #244]	; (800251c <DioIrqHndlr+0x288>)
 8002426:	f7fe f9a9 	bl	800077c <myDebug>
		FREQ_435_MHZ);
		myDebug("Bit Rate: 	%d\n\r", mod_params.Params.Gfsk.BitRate);
 800242a:	4b3d      	ldr	r3, [pc, #244]	; (8002520 <DioIrqHndlr+0x28c>)
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	4619      	mov	r1, r3
 8002430:	483c      	ldr	r0, [pc, #240]	; (8002524 <DioIrqHndlr+0x290>)
 8002432:	f7fe f9a3 	bl	800077c <myDebug>
		myDebug("Frequency Deviation: 	%d\n\r", mod_params.Params.Gfsk.Fdev);
 8002436:	4b3a      	ldr	r3, [pc, #232]	; (8002520 <DioIrqHndlr+0x28c>)
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	4619      	mov	r1, r3
 800243c:	483a      	ldr	r0, [pc, #232]	; (8002528 <DioIrqHndlr+0x294>)
 800243e:	f7fe f99d 	bl	800077c <myDebug>
		myDebug("RECEVING BANDWIDTH: 	%d\n\r",
				mod_params.Params.Gfsk.Bandwidth);
 8002442:	4b37      	ldr	r3, [pc, #220]	; (8002520 <DioIrqHndlr+0x28c>)
 8002444:	7b5b      	ldrb	r3, [r3, #13]
		myDebug("RECEVING BANDWIDTH: 	%d\n\r",
 8002446:	4619      	mov	r1, r3
 8002448:	4838      	ldr	r0, [pc, #224]	; (800252c <DioIrqHndlr+0x298>)
 800244a:	f7fe f997 	bl	800077c <myDebug>
		myDebug("Packet Type 			%d\n\r", pkt_params.PacketType);
 800244e:	4b38      	ldr	r3, [pc, #224]	; (8002530 <DioIrqHndlr+0x29c>)
 8002450:	781b      	ldrb	r3, [r3, #0]
 8002452:	4619      	mov	r1, r3
 8002454:	4837      	ldr	r0, [pc, #220]	; (8002534 <DioIrqHndlr+0x2a0>)
 8002456:	f7fe f991 	bl	800077c <myDebug>
		myDebug("PayloadLength 			%d\n\r",
				pkt_params.Params.Gfsk.PayloadLength);
 800245a:	4b35      	ldr	r3, [pc, #212]	; (8002530 <DioIrqHndlr+0x29c>)
 800245c:	7a1b      	ldrb	r3, [r3, #8]
		myDebug("PayloadLength 			%d\n\r",
 800245e:	4619      	mov	r1, r3
 8002460:	4835      	ldr	r0, [pc, #212]	; (8002538 <DioIrqHndlr+0x2a4>)
 8002462:	f7fe f98b 	bl	800077c <myDebug>
		myDebug("PreambleLength 		%d\n\r",
				pkt_params.Params.Gfsk.PreambleLength);
 8002466:	4b32      	ldr	r3, [pc, #200]	; (8002530 <DioIrqHndlr+0x29c>)
 8002468:	885b      	ldrh	r3, [r3, #2]
		myDebug("PreambleLength 		%d\n\r",
 800246a:	4619      	mov	r1, r3
 800246c:	4833      	ldr	r0, [pc, #204]	; (800253c <DioIrqHndlr+0x2a8>)
 800246e:	f7fe f985 	bl	800077c <myDebug>
		myDebug("PreambleMinDetect		%d\n\r",
				pkt_params.Params.Gfsk.PreambleMinDetect);
 8002472:	4b2f      	ldr	r3, [pc, #188]	; (8002530 <DioIrqHndlr+0x29c>)
 8002474:	791b      	ldrb	r3, [r3, #4]
		myDebug("PreambleMinDetect		%d\n\r",
 8002476:	4619      	mov	r1, r3
 8002478:	4831      	ldr	r0, [pc, #196]	; (8002540 <DioIrqHndlr+0x2ac>)
 800247a:	f7fe f97f 	bl	800077c <myDebug>
		myDebug("HeaderType 			%d\n\r", pkt_params.Params.Gfsk.HeaderType);
 800247e:	4b2c      	ldr	r3, [pc, #176]	; (8002530 <DioIrqHndlr+0x29c>)
 8002480:	79db      	ldrb	r3, [r3, #7]
 8002482:	4619      	mov	r1, r3
 8002484:	482f      	ldr	r0, [pc, #188]	; (8002544 <DioIrqHndlr+0x2b0>)
 8002486:	f7fe f979 	bl	800077c <myDebug>
		myDebug("__________*******************__________\r\n");
 800248a:	482f      	ldr	r0, [pc, #188]	; (8002548 <DioIrqHndlr+0x2b4>)
 800248c:	f7fe f976 	bl	800077c <myDebug>

		SUBGRF_SetRfFrequency(FREQ_435_MHZ);
 8002490:	4821      	ldr	r0, [pc, #132]	; (8002518 <DioIrqHndlr+0x284>)
 8002492:	f008 fa07 	bl	800a8a4 <SUBGRF_SetRfFrequency>
		SUBGRF_SetSwitch(RFO_LP, RFSWITCH_RX); /*Set RF switch*/
 8002496:	2100      	movs	r1, #0
 8002498:	2001      	movs	r0, #1
 800249a:	f008 fe4b 	bl	800b134 <SUBGRF_SetSwitch>
		SUBGRF_SetRxBoosted(0xFFFFFF);
 800249e:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80024a2:	f008 f82b 	bl	800a4fc <SUBGRF_SetRxBoosted>

		HAL_UART_Receive_DMA(&huart2, OBC_UART_RX, obc_plen);
 80024a6:	4b29      	ldr	r3, [pc, #164]	; (800254c <DioIrqHndlr+0x2b8>)
 80024a8:	781b      	ldrb	r3, [r3, #0]
 80024aa:	b29b      	uxth	r3, r3
 80024ac:	461a      	mov	r2, r3
 80024ae:	4928      	ldr	r1, [pc, #160]	; (8002550 <DioIrqHndlr+0x2bc>)
 80024b0:	480c      	ldr	r0, [pc, #48]	; (80024e4 <DioIrqHndlr+0x250>)
 80024b2:	f004 fb39 	bl	8006b28 <HAL_UART_Receive_DMA>

		HAL_UART_Receive_DMA(&hlpuart1, OBC_UART_RX, obc_plen);
 80024b6:	4b25      	ldr	r3, [pc, #148]	; (800254c <DioIrqHndlr+0x2b8>)
 80024b8:	781b      	ldrb	r3, [r3, #0]
 80024ba:	b29b      	uxth	r3, r3
 80024bc:	461a      	mov	r2, r3
 80024be:	4924      	ldr	r1, [pc, #144]	; (8002550 <DioIrqHndlr+0x2bc>)
 80024c0:	4809      	ldr	r0, [pc, #36]	; (80024e8 <DioIrqHndlr+0x254>)
 80024c2:	f004 fb31 	bl	8006b28 <HAL_UART_Receive_DMA>
 80024c6:	e1a6      	b.n	8002816 <DioIrqHndlr+0x582>
 80024c8:	2000039c 	.word	0x2000039c
 80024cc:	200004d0 	.word	0x200004d0
 80024d0:	0800ccd0 	.word	0x0800ccd0
 80024d4:	20000438 	.word	0x20000438
 80024d8:	0800c680 	.word	0x0800c680
 80024dc:	0800c688 	.word	0x0800c688
 80024e0:	0800cd0c 	.word	0x0800cd0c
 80024e4:	20000688 	.word	0x20000688
 80024e8:	20000560 	.word	0x20000560
 80024ec:	200004dc 	.word	0x200004dc
 80024f0:	20000004 	.word	0x20000004
 80024f4:	20000008 	.word	0x20000008
 80024f8:	200004e0 	.word	0x200004e0
 80024fc:	200004d8 	.word	0x200004d8
 8002500:	200004e4 	.word	0x200004e4
 8002504:	0800cd44 	.word	0x0800cd44
 8002508:	0007a120 	.word	0x0007a120
 800250c:	20000000 	.word	0x20000000
 8002510:	200002ac 	.word	0x200002ac
 8002514:	0800cb74 	.word	0x0800cb74
 8002518:	19f25968 	.word	0x19f25968
 800251c:	0800cba0 	.word	0x0800cba0
 8002520:	20000290 	.word	0x20000290
 8002524:	0800c744 	.word	0x0800c744
 8002528:	0800c754 	.word	0x0800c754
 800252c:	0800c770 	.word	0x0800c770
 8002530:	2000027c 	.word	0x2000027c
 8002534:	0800c78c 	.word	0x0800c78c
 8002538:	0800c7a0 	.word	0x0800c7a0
 800253c:	0800c7b8 	.word	0x0800c7b8
 8002540:	0800c7d0 	.word	0x0800c7d0
 8002544:	0800c7e8 	.word	0x0800c7e8
 8002548:	0800c7fc 	.word	0x0800c7fc
 800254c:	20000001 	.word	0x20000001
 8002550:	20000318 	.word	0x20000318

		return;

	}

	if (radioIrq == IRQ_RX_DONE) {
 8002554:	89fb      	ldrh	r3, [r7, #14]
 8002556:	2b02      	cmp	r3, #2
 8002558:	f040 812a 	bne.w	80027b0 <DioIrqHndlr+0x51c>
		SUBGRF_GetPayload(rx_buffer, &rx_buffer_len, RX_BUFF_LENGTH);
 800255c:	2269      	movs	r2, #105	; 0x69
 800255e:	49b0      	ldr	r1, [pc, #704]	; (8002820 <DioIrqHndlr+0x58c>)
 8002560:	48b0      	ldr	r0, [pc, #704]	; (8002824 <DioIrqHndlr+0x590>)
 8002562:	f007 fe3f 	bl	800a1e4 <SUBGRF_GetPayload>
		rssi_value = SUBGRF_GetRssiInst();
 8002566:	f008 fc5e 	bl	800ae26 <SUBGRF_GetRssiInst>
 800256a:	4603      	mov	r3, r0
 800256c:	b2da      	uxtb	r2, r3
 800256e:	4bae      	ldr	r3, [pc, #696]	; (8002828 <DioIrqHndlr+0x594>)
 8002570:	701a      	strb	r2, [r3, #0]
		myDebug("\nGS Command Received: 0x%x\r\n");
 8002572:	48ae      	ldr	r0, [pc, #696]	; (800282c <DioIrqHndlr+0x598>)
 8002574:	f7fe f902 	bl	800077c <myDebug>

		uint8_t temp_rx_buffer_len = 0;
 8002578:	2300      	movs	r3, #0
 800257a:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
		temp_rx_buffer_len = countsDataBetweenFlags(rx_buffer, rx_buffer_len); // 7e...7e, size
 800257e:	4ba8      	ldr	r3, [pc, #672]	; (8002820 <DioIrqHndlr+0x58c>)
 8002580:	781b      	ldrb	r3, [r3, #0]
 8002582:	4619      	mov	r1, r3
 8002584:	48a7      	ldr	r0, [pc, #668]	; (8002824 <DioIrqHndlr+0x590>)
 8002586:	f7fe fc3b 	bl	8000e00 <countsDataBetweenFlags>
 800258a:	4603      	mov	r3, r0
 800258c:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

		if (temp_rx_buffer_len != -1) {
 8002590:	466b      	mov	r3, sp
 8002592:	60bb      	str	r3, [r7, #8]

			uint8_t temp_check_buff[temp_rx_buffer_len];
 8002594:	f897 605b 	ldrb.w	r6, [r7, #91]	; 0x5b
 8002598:	4633      	mov	r3, r6
 800259a:	3b01      	subs	r3, #1
 800259c:	657b      	str	r3, [r7, #84]	; 0x54
 800259e:	b2f3      	uxtb	r3, r6
 80025a0:	2200      	movs	r2, #0
 80025a2:	603b      	str	r3, [r7, #0]
 80025a4:	607a      	str	r2, [r7, #4]
 80025a6:	f04f 0200 	mov.w	r2, #0
 80025aa:	f04f 0300 	mov.w	r3, #0
 80025ae:	6879      	ldr	r1, [r7, #4]
 80025b0:	00cb      	lsls	r3, r1, #3
 80025b2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80025b6:	4684      	mov	ip, r0
 80025b8:	ea43 735c 	orr.w	r3, r3, ip, lsr #29
 80025bc:	4601      	mov	r1, r0
 80025be:	00ca      	lsls	r2, r1, #3
 80025c0:	b2f3      	uxtb	r3, r6
 80025c2:	2200      	movs	r2, #0
 80025c4:	469a      	mov	sl, r3
 80025c6:	4693      	mov	fp, r2
 80025c8:	f04f 0200 	mov.w	r2, #0
 80025cc:	f04f 0300 	mov.w	r3, #0
 80025d0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80025d4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80025d8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80025dc:	4633      	mov	r3, r6
 80025de:	3307      	adds	r3, #7
 80025e0:	08db      	lsrs	r3, r3, #3
 80025e2:	00db      	lsls	r3, r3, #3
 80025e4:	ebad 0d03 	sub.w	sp, sp, r3
 80025e8:	466b      	mov	r3, sp
 80025ea:	3300      	adds	r3, #0
 80025ec:	653b      	str	r3, [r7, #80]	; 0x50
			for (int i = 0; i < temp_rx_buffer_len; i++) {
 80025ee:	2300      	movs	r3, #0
 80025f0:	66bb      	str	r3, [r7, #104]	; 0x68
 80025f2:	e013      	b.n	800261c <DioIrqHndlr+0x388>
				temp_check_buff[i] = rx_buffer[i];
 80025f4:	4a8b      	ldr	r2, [pc, #556]	; (8002824 <DioIrqHndlr+0x590>)
 80025f6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80025f8:	4413      	add	r3, r2
 80025fa:	7819      	ldrb	r1, [r3, #0]
 80025fc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80025fe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002600:	4413      	add	r3, r2
 8002602:	460a      	mov	r2, r1
 8002604:	701a      	strb	r2, [r3, #0]
				myDebug("%02x ", temp_check_buff[i]); //display 7e to 7e
 8002606:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002608:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800260a:	4413      	add	r3, r2
 800260c:	781b      	ldrb	r3, [r3, #0]
 800260e:	4619      	mov	r1, r3
 8002610:	4887      	ldr	r0, [pc, #540]	; (8002830 <DioIrqHndlr+0x59c>)
 8002612:	f7fe f8b3 	bl	800077c <myDebug>
			for (int i = 0; i < temp_rx_buffer_len; i++) {
 8002616:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002618:	3301      	adds	r3, #1
 800261a:	66bb      	str	r3, [r7, #104]	; 0x68
 800261c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8002620:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002622:	429a      	cmp	r2, r3
 8002624:	dbe6      	blt.n	80025f4 <DioIrqHndlr+0x360>
			}
			myDebug("\r\n");
 8002626:	4883      	ldr	r0, [pc, #524]	; (8002834 <DioIrqHndlr+0x5a0>)
 8002628:	f7fe f8a8 	bl	800077c <myDebug>

			uint8_t crc_buff_len = temp_rx_buffer_len - 4;
 800262c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8002630:	3b04      	subs	r3, #4
 8002632:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			uint8_t crc_buff[crc_buff_len];
 8002636:	f897 104f 	ldrb.w	r1, [r7, #79]	; 0x4f
 800263a:	460b      	mov	r3, r1
 800263c:	3b01      	subs	r3, #1
 800263e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002640:	b2cb      	uxtb	r3, r1
 8002642:	2200      	movs	r2, #0
 8002644:	4698      	mov	r8, r3
 8002646:	4691      	mov	r9, r2
 8002648:	f04f 0200 	mov.w	r2, #0
 800264c:	f04f 0300 	mov.w	r3, #0
 8002650:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002654:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002658:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800265c:	b2cb      	uxtb	r3, r1
 800265e:	2200      	movs	r2, #0
 8002660:	461c      	mov	r4, r3
 8002662:	4615      	mov	r5, r2
 8002664:	f04f 0200 	mov.w	r2, #0
 8002668:	f04f 0300 	mov.w	r3, #0
 800266c:	00eb      	lsls	r3, r5, #3
 800266e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002672:	00e2      	lsls	r2, r4, #3
 8002674:	460b      	mov	r3, r1
 8002676:	3307      	adds	r3, #7
 8002678:	08db      	lsrs	r3, r3, #3
 800267a:	00db      	lsls	r3, r3, #3
 800267c:	ebad 0d03 	sub.w	sp, sp, r3
 8002680:	466b      	mov	r3, sp
 8002682:	3300      	adds	r3, #0
 8002684:	647b      	str	r3, [r7, #68]	; 0x44

			//			myDebug("\nGS Command Testing: 0x%x\r\n");

			int j = 0;
 8002686:	2300      	movs	r3, #0
 8002688:	667b      	str	r3, [r7, #100]	; 0x64
			for (int i = 1; i <= crc_buff_len; i++) {
 800268a:	2301      	movs	r3, #1
 800268c:	663b      	str	r3, [r7, #96]	; 0x60
 800268e:	e00e      	b.n	80026ae <DioIrqHndlr+0x41a>
				crc_buff[j] = temp_check_buff[i]; // index 1 to previous byte of crc
 8002690:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002692:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002694:	4413      	add	r3, r2
 8002696:	7819      	ldrb	r1, [r3, #0]
 8002698:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800269a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800269c:	4413      	add	r3, r2
 800269e:	460a      	mov	r2, r1
 80026a0:	701a      	strb	r2, [r3, #0]
				//				myDebug("%02x ", crc_buff[j]);
				j++;
 80026a2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80026a4:	3301      	adds	r3, #1
 80026a6:	667b      	str	r3, [r7, #100]	; 0x64
			for (int i = 1; i <= crc_buff_len; i++) {
 80026a8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80026aa:	3301      	adds	r3, #1
 80026ac:	663b      	str	r3, [r7, #96]	; 0x60
 80026ae:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80026b2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80026b4:	429a      	cmp	r2, r3
 80026b6:	ddeb      	ble.n	8002690 <DioIrqHndlr+0x3fc>
			}
			myDebug("\r\n");
 80026b8:	485e      	ldr	r0, [pc, #376]	; (8002834 <DioIrqHndlr+0x5a0>)
 80026ba:	f7fe f85f 	bl	800077c <myDebug>

			uint16_t crc = 0;
 80026be:	2300      	movs	r3, #0
 80026c0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
			crc = calculateCRC_CCITT_AX25(crc_buff, crc_buff_len);
 80026c4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80026c8:	4619      	mov	r1, r3
 80026ca:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80026cc:	f7fe f8e2 	bl	8000894 <calculateCRC_CCITT_AX25>
 80026d0:	4603      	mov	r3, r0
 80026d2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

			uint8_t calc_crc[2];
			calc_crc[0] = (crc >> 8) & 0xFF;
 80026d6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80026da:	0a1b      	lsrs	r3, r3, #8
 80026dc:	b29b      	uxth	r3, r3
 80026de:	b2db      	uxtb	r3, r3
 80026e0:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
			calc_crc[1] = crc & 0xFF;
 80026e4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80026e8:	b2db      	uxtb	r3, r3
 80026ea:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

			uint8_t msb_crc = temp_check_buff[temp_rx_buffer_len - 3];
 80026ee:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80026f2:	3b03      	subs	r3, #3
 80026f4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80026f6:	5cd3      	ldrb	r3, [r2, r3]
 80026f8:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
			uint8_t lsb_crc = temp_check_buff[temp_rx_buffer_len - 2];
 80026fc:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8002700:	3b02      	subs	r3, #2
 8002702:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002704:	5cd3      	ldrb	r3, [r2, r3]
 8002706:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40

			if (calc_crc[0] == msb_crc && calc_crc[1] == lsb_crc) {
 800270a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800270e:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 8002712:	429a      	cmp	r2, r3
 8002714:	d10f      	bne.n	8002736 <DioIrqHndlr+0x4a2>
 8002716:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800271a:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 800271e:	429a      	cmp	r2, r3
 8002720:	d109      	bne.n	8002736 <DioIrqHndlr+0x4a2>
				//				myDebug("GS Command checksum correct: 0x%x\r\n");
				memset(temp_check_buff, '\0', sizeof(temp_check_buff));
 8002722:	4633      	mov	r3, r6
 8002724:	461a      	mov	r2, r3
 8002726:	2100      	movs	r1, #0
 8002728:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800272a:	f009 faed 	bl	800bd08 <memset>
				RX_FLAG = 1;
 800272e:	4b42      	ldr	r3, [pc, #264]	; (8002838 <DioIrqHndlr+0x5a4>)
 8002730:	2201      	movs	r2, #1
 8002732:	601a      	str	r2, [r3, #0]
 8002734:	e02a      	b.n	800278c <DioIrqHndlr+0x4f8>

			} else {

				myDebug("\n********GS Command checksum incorrect: 0x%x\r\n");
 8002736:	4841      	ldr	r0, [pc, #260]	; (800283c <DioIrqHndlr+0x5a8>)
 8002738:	f7fe f820 	bl	800077c <myDebug>

				RX_FLAG = 0;
 800273c:	4b3e      	ldr	r3, [pc, #248]	; (8002838 <DioIrqHndlr+0x5a4>)
 800273e:	2200      	movs	r2, #0
 8002740:	601a      	str	r2, [r3, #0]

				COM_UART_TX[0] = 0x53;	//header
 8002742:	4b3f      	ldr	r3, [pc, #252]	; (8002840 <DioIrqHndlr+0x5ac>)
 8002744:	2253      	movs	r2, #83	; 0x53
 8002746:	701a      	strb	r2, [r3, #0]
				COM_UART_TX[1] = 0xac;	//packet_ type
 8002748:	4b3d      	ldr	r3, [pc, #244]	; (8002840 <DioIrqHndlr+0x5ac>)
 800274a:	22ac      	movs	r2, #172	; 0xac
 800274c:	705a      	strb	r2, [r3, #1]
				COM_UART_TX[2] = 0x04;	//length of info
 800274e:	4b3c      	ldr	r3, [pc, #240]	; (8002840 <DioIrqHndlr+0x5ac>)
 8002750:	2204      	movs	r2, #4
 8002752:	709a      	strb	r2, [r3, #2]
				COM_UART_TX[3] = 0x02;	//mcu_no
 8002754:	4b3a      	ldr	r3, [pc, #232]	; (8002840 <DioIrqHndlr+0x5ac>)
 8002756:	2202      	movs	r2, #2
 8002758:	70da      	strb	r2, [r3, #3]
				COM_UART_TX[4] = 0xcc;	//checksum_error
 800275a:	4b39      	ldr	r3, [pc, #228]	; (8002840 <DioIrqHndlr+0x5ac>)
 800275c:	22cc      	movs	r2, #204	; 0xcc
 800275e:	711a      	strb	r2, [r3, #4]
				COM_UART_TX[5] = 0xee;	//error prefix
 8002760:	4b37      	ldr	r3, [pc, #220]	; (8002840 <DioIrqHndlr+0x5ac>)
 8002762:	22ee      	movs	r2, #238	; 0xee
 8002764:	715a      	strb	r2, [r3, #5]

				for (int i = 6; i < com_uart_tx_p_len; i++) {
 8002766:	2306      	movs	r3, #6
 8002768:	65fb      	str	r3, [r7, #92]	; 0x5c
 800276a:	e007      	b.n	800277c <DioIrqHndlr+0x4e8>
					COM_UART_TX[i] = 0x00;
 800276c:	4a34      	ldr	r2, [pc, #208]	; (8002840 <DioIrqHndlr+0x5ac>)
 800276e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002770:	4413      	add	r3, r2
 8002772:	2200      	movs	r2, #0
 8002774:	701a      	strb	r2, [r3, #0]
				for (int i = 6; i < com_uart_tx_p_len; i++) {
 8002776:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002778:	3301      	adds	r3, #1
 800277a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800277c:	4b31      	ldr	r3, [pc, #196]	; (8002844 <DioIrqHndlr+0x5b0>)
 800277e:	781b      	ldrb	r3, [r3, #0]
 8002780:	461a      	mov	r2, r3
 8002782:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002784:	4293      	cmp	r3, r2
 8002786:	dbf1      	blt.n	800276c <DioIrqHndlr+0x4d8>
				}

				enableReqPA();
 8002788:	f7fe fae4 	bl	8000d54 <enableReqPA>
 800278c:	f8d7 d008 	ldr.w	sp, [r7, #8]
			}

			enableReqPA();
		}

		HAL_UART_Receive_DMA(&huart2, OBC_UART_RX, obc_plen);
 8002790:	4b2d      	ldr	r3, [pc, #180]	; (8002848 <DioIrqHndlr+0x5b4>)
 8002792:	781b      	ldrb	r3, [r3, #0]
 8002794:	b29b      	uxth	r3, r3
 8002796:	461a      	mov	r2, r3
 8002798:	492c      	ldr	r1, [pc, #176]	; (800284c <DioIrqHndlr+0x5b8>)
 800279a:	482d      	ldr	r0, [pc, #180]	; (8002850 <DioIrqHndlr+0x5bc>)
 800279c:	f004 f9c4 	bl	8006b28 <HAL_UART_Receive_DMA>

		HAL_UART_Receive_DMA(&hlpuart1, OBC_UART_RX, obc_plen);
 80027a0:	4b29      	ldr	r3, [pc, #164]	; (8002848 <DioIrqHndlr+0x5b4>)
 80027a2:	781b      	ldrb	r3, [r3, #0]
 80027a4:	b29b      	uxth	r3, r3
 80027a6:	461a      	mov	r2, r3
 80027a8:	4928      	ldr	r1, [pc, #160]	; (800284c <DioIrqHndlr+0x5b8>)
 80027aa:	482a      	ldr	r0, [pc, #168]	; (8002854 <DioIrqHndlr+0x5c0>)
 80027ac:	f004 f9bc 	bl	8006b28 <HAL_UART_Receive_DMA>

	}

	if (radioIrq == IRQ_RX_TX_TIMEOUT) {
 80027b0:	89fb      	ldrh	r3, [r7, #14]
 80027b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80027b6:	d12e      	bne.n	8002816 <DioIrqHndlr+0x582>

		setPacketParams(rx_buffer_len);
 80027b8:	4b19      	ldr	r3, [pc, #100]	; (8002820 <DioIrqHndlr+0x58c>)
 80027ba:	781b      	ldrb	r3, [r3, #0]
 80027bc:	4618      	mov	r0, r3
 80027be:	f7fe fb55 	bl	8000e6c <setPacketParams>
		setModulationParams(GFSK_BR_1200, GFSK_FDEV_1200);
 80027c2:	f640 31b8 	movw	r1, #3000	; 0xbb8
 80027c6:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 80027ca:	f7fe fb79 	bl	8000ec0 <setModulationParams>
		radioConfig(rx_buffer, rx_buffer_len);
 80027ce:	4b14      	ldr	r3, [pc, #80]	; (8002820 <DioIrqHndlr+0x58c>)
 80027d0:	781b      	ldrb	r3, [r3, #0]
 80027d2:	4619      	mov	r1, r3
 80027d4:	4813      	ldr	r0, [pc, #76]	; (8002824 <DioIrqHndlr+0x590>)
 80027d6:	f7fe fb91 	bl	8000efc <radioConfig>

		myDebug("\n########## RX TX TIMEOUT ##########\n");
 80027da:	481f      	ldr	r0, [pc, #124]	; (8002858 <DioIrqHndlr+0x5c4>)
 80027dc:	f7fd ffce 	bl	800077c <myDebug>

		SUBGRF_SetRfFrequency(FREQ_435_MHZ);
 80027e0:	481e      	ldr	r0, [pc, #120]	; (800285c <DioIrqHndlr+0x5c8>)
 80027e2:	f008 f85f 	bl	800a8a4 <SUBGRF_SetRfFrequency>
		SUBGRF_SetSwitch(RFO_LP, RFSWITCH_RX); /*Set RF switch*/
 80027e6:	2100      	movs	r1, #0
 80027e8:	2001      	movs	r0, #1
 80027ea:	f008 fca3 	bl	800b134 <SUBGRF_SetSwitch>
		SUBGRF_SetRxBoosted(0xFFFFFF);
 80027ee:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80027f2:	f007 fe83 	bl	800a4fc <SUBGRF_SetRxBoosted>

		HAL_UART_Receive_DMA(&huart2, OBC_UART_RX, obc_plen);
 80027f6:	4b14      	ldr	r3, [pc, #80]	; (8002848 <DioIrqHndlr+0x5b4>)
 80027f8:	781b      	ldrb	r3, [r3, #0]
 80027fa:	b29b      	uxth	r3, r3
 80027fc:	461a      	mov	r2, r3
 80027fe:	4913      	ldr	r1, [pc, #76]	; (800284c <DioIrqHndlr+0x5b8>)
 8002800:	4813      	ldr	r0, [pc, #76]	; (8002850 <DioIrqHndlr+0x5bc>)
 8002802:	f004 f991 	bl	8006b28 <HAL_UART_Receive_DMA>

		HAL_UART_Receive_DMA(&hlpuart1, OBC_UART_RX, obc_plen);
 8002806:	4b10      	ldr	r3, [pc, #64]	; (8002848 <DioIrqHndlr+0x5b4>)
 8002808:	781b      	ldrb	r3, [r3, #0]
 800280a:	b29b      	uxth	r3, r3
 800280c:	461a      	mov	r2, r3
 800280e:	490f      	ldr	r1, [pc, #60]	; (800284c <DioIrqHndlr+0x5b8>)
 8002810:	4810      	ldr	r0, [pc, #64]	; (8002854 <DioIrqHndlr+0x5c0>)
 8002812:	f004 f989 	bl	8006b28 <HAL_UART_Receive_DMA>
	}

}
 8002816:	377c      	adds	r7, #124	; 0x7c
 8002818:	46bd      	mov	sp, r7
 800281a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800281e:	bf00      	nop
 8002820:	20000000 	.word	0x20000000
 8002824:	200002ac 	.word	0x200002ac
 8002828:	20000315 	.word	0x20000315
 800282c:	0800cd7c 	.word	0x0800cd7c
 8002830:	0800c680 	.word	0x0800c680
 8002834:	0800c688 	.word	0x0800c688
 8002838:	200004ec 	.word	0x200004ec
 800283c:	0800cd9c 	.word	0x0800cd9c
 8002840:	20000370 	.word	0x20000370
 8002844:	20000002 	.word	0x20000002
 8002848:	20000001 	.word	0x20000001
 800284c:	20000318 	.word	0x20000318
 8002850:	20000688 	.word	0x20000688
 8002854:	20000560 	.word	0x20000560
 8002858:	0800cdcc 	.word	0x0800cdcc
 800285c:	19f25968 	.word	0x19f25968

08002860 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002860:	b480      	push	{r7}
 8002862:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002864:	b672      	cpsid	i
}
 8002866:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002868:	e7fe      	b.n	8002868 <Error_Handler+0x8>
	...

0800286c <WAIT_FOR_HANDSHAKE>:
#define ACK_LENGTH	(7)

extern uint8_t OBC_HANDSHAKE_FLAG;
uint8_t MainCMDHs[ACK_LENGTH];

void WAIT_FOR_HANDSHAKE() {
 800286c:	b580      	push	{r7, lr}
 800286e:	b086      	sub	sp, #24
 8002870:	af00      	add	r7, sp, #0

	memset(MainCMDHs, '\0', ACK_LENGTH);
 8002872:	2207      	movs	r2, #7
 8002874:	2100      	movs	r1, #0
 8002876:	486c      	ldr	r0, [pc, #432]	; (8002a28 <WAIT_FOR_HANDSHAKE+0x1bc>)
 8002878:	f009 fa46 	bl	800bd08 <memset>
	OBC_HANDSHAKE_FLAG = 0;
 800287c:	4b6b      	ldr	r3, [pc, #428]	; (8002a2c <WAIT_FOR_HANDSHAKE+0x1c0>)
 800287e:	2200      	movs	r2, #0
 8002880:	701a      	strb	r2, [r3, #0]
	if (HAL_UART_Receive(&huart2, MainCMDHs, ACK_LENGTH, 7000) == HAL_OK
 8002882:	f641 3358 	movw	r3, #7000	; 0x1b58
 8002886:	2207      	movs	r2, #7
 8002888:	4967      	ldr	r1, [pc, #412]	; (8002a28 <WAIT_FOR_HANDSHAKE+0x1bc>)
 800288a:	4869      	ldr	r0, [pc, #420]	; (8002a30 <WAIT_FOR_HANDSHAKE+0x1c4>)
 800288c:	f004 f887 	bl	800699e <HAL_UART_Receive>
 8002890:	4603      	mov	r3, r0
 8002892:	2b00      	cmp	r3, #0
 8002894:	d00a      	beq.n	80028ac <WAIT_FOR_HANDSHAKE+0x40>
			|| HAL_UART_Receive(&hlpuart1, MainCMDHs, ACK_LENGTH, 7000)
 8002896:	f641 3358 	movw	r3, #7000	; 0x1b58
 800289a:	2207      	movs	r2, #7
 800289c:	4962      	ldr	r1, [pc, #392]	; (8002a28 <WAIT_FOR_HANDSHAKE+0x1bc>)
 800289e:	4865      	ldr	r0, [pc, #404]	; (8002a34 <WAIT_FOR_HANDSHAKE+0x1c8>)
 80028a0:	f004 f87d 	bl	800699e <HAL_UART_Receive>
 80028a4:	4603      	mov	r3, r0
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	f040 80aa 	bne.w	8002a00 <WAIT_FOR_HANDSHAKE+0x194>
					== HAL_OK) {
		myDebug("--> Handshake command received from OBC: 0x%x\r\n");
 80028ac:	4862      	ldr	r0, [pc, #392]	; (8002a38 <WAIT_FOR_HANDSHAKE+0x1cc>)
 80028ae:	f7fd ff65 	bl	800077c <myDebug>
		for (int i = 0; i < (ACK_LENGTH); i++) {
 80028b2:	2300      	movs	r3, #0
 80028b4:	617b      	str	r3, [r7, #20]
 80028b6:	e00a      	b.n	80028ce <WAIT_FOR_HANDSHAKE+0x62>
			myDebug("%02x ", MainCMDHs[i]);
 80028b8:	4a5b      	ldr	r2, [pc, #364]	; (8002a28 <WAIT_FOR_HANDSHAKE+0x1bc>)
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	4413      	add	r3, r2
 80028be:	781b      	ldrb	r3, [r3, #0]
 80028c0:	4619      	mov	r1, r3
 80028c2:	485e      	ldr	r0, [pc, #376]	; (8002a3c <WAIT_FOR_HANDSHAKE+0x1d0>)
 80028c4:	f7fd ff5a 	bl	800077c <myDebug>
		for (int i = 0; i < (ACK_LENGTH); i++) {
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	3301      	adds	r3, #1
 80028cc:	617b      	str	r3, [r7, #20]
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	2b06      	cmp	r3, #6
 80028d2:	ddf1      	ble.n	80028b8 <WAIT_FOR_HANDSHAKE+0x4c>
		}
		myDebug("\n");
 80028d4:	485a      	ldr	r0, [pc, #360]	; (8002a40 <WAIT_FOR_HANDSHAKE+0x1d4>)
 80028d6:	f7fd ff51 	bl	800077c <myDebug>

		uint8_t header = 0x00;
 80028da:	2300      	movs	r3, #0
 80028dc:	71fb      	strb	r3, [r7, #7]

		if (MainCMDHs[0] == header) {
 80028de:	4b52      	ldr	r3, [pc, #328]	; (8002a28 <WAIT_FOR_HANDSHAKE+0x1bc>)
 80028e0:	781b      	ldrb	r3, [r3, #0]
 80028e2:	79fa      	ldrb	r2, [r7, #7]
 80028e4:	429a      	cmp	r2, r3
 80028e6:	d111      	bne.n	800290c <WAIT_FOR_HANDSHAKE+0xa0>

			for (int loop1 = 0; loop1 < sizeof(MainCMDHs); loop1++) {
 80028e8:	2300      	movs	r3, #0
 80028ea:	613b      	str	r3, [r7, #16]
 80028ec:	e00b      	b.n	8002906 <WAIT_FOR_HANDSHAKE+0x9a>
				MainCMDHs[loop1] = MainCMDHs[loop1 + 1];
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	3301      	adds	r3, #1
 80028f2:	4a4d      	ldr	r2, [pc, #308]	; (8002a28 <WAIT_FOR_HANDSHAKE+0x1bc>)
 80028f4:	5cd1      	ldrb	r1, [r2, r3]
 80028f6:	4a4c      	ldr	r2, [pc, #304]	; (8002a28 <WAIT_FOR_HANDSHAKE+0x1bc>)
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	4413      	add	r3, r2
 80028fc:	460a      	mov	r2, r1
 80028fe:	701a      	strb	r2, [r3, #0]
			for (int loop1 = 0; loop1 < sizeof(MainCMDHs); loop1++) {
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	3301      	adds	r3, #1
 8002904:	613b      	str	r3, [r7, #16]
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	2b06      	cmp	r3, #6
 800290a:	d9f0      	bls.n	80028ee <WAIT_FOR_HANDSHAKE+0x82>
			}
		}

		if (MainCMDHs[0] == ACK_HEAD && MainCMDHs[5] == ACK_TAIL) {
 800290c:	4b46      	ldr	r3, [pc, #280]	; (8002a28 <WAIT_FOR_HANDSHAKE+0x1bc>)
 800290e:	781b      	ldrb	r3, [r3, #0]
 8002910:	2b53      	cmp	r3, #83	; 0x53
 8002912:	d13a      	bne.n	800298a <WAIT_FOR_HANDSHAKE+0x11e>
 8002914:	4b44      	ldr	r3, [pc, #272]	; (8002a28 <WAIT_FOR_HANDSHAKE+0x1bc>)
 8002916:	795b      	ldrb	r3, [r3, #5]
 8002918:	2b7e      	cmp	r3, #126	; 0x7e
 800291a:	d136      	bne.n	800298a <WAIT_FOR_HANDSHAKE+0x11e>
			myDebug("--> Command Acknowledged successful!\n");
 800291c:	4849      	ldr	r0, [pc, #292]	; (8002a44 <WAIT_FOR_HANDSHAKE+0x1d8>)
 800291e:	f7fd ff2d 	bl	800077c <myDebug>
			if (HAL_UART_Transmit(&huart2, MainCMDHs, ACK_LENGTH, 2000)
 8002922:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002926:	2207      	movs	r2, #7
 8002928:	493f      	ldr	r1, [pc, #252]	; (8002a28 <WAIT_FOR_HANDSHAKE+0x1bc>)
 800292a:	4841      	ldr	r0, [pc, #260]	; (8002a30 <WAIT_FOR_HANDSHAKE+0x1c4>)
 800292c:	f003 ffb1 	bl	8006892 <HAL_UART_Transmit>
 8002930:	4603      	mov	r3, r0
 8002932:	2b00      	cmp	r3, #0
 8002934:	d009      	beq.n	800294a <WAIT_FOR_HANDSHAKE+0xde>
					== HAL_OK
					|| HAL_UART_Transmit(&hlpuart1, MainCMDHs, ACK_LENGTH, 2000)
 8002936:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800293a:	2207      	movs	r2, #7
 800293c:	493a      	ldr	r1, [pc, #232]	; (8002a28 <WAIT_FOR_HANDSHAKE+0x1bc>)
 800293e:	483d      	ldr	r0, [pc, #244]	; (8002a34 <WAIT_FOR_HANDSHAKE+0x1c8>)
 8002940:	f003 ffa7 	bl	8006892 <HAL_UART_Transmit>
 8002944:	4603      	mov	r3, r0
 8002946:	2b00      	cmp	r3, #0
 8002948:	d158      	bne.n	80029fc <WAIT_FOR_HANDSHAKE+0x190>
							== HAL_OK) {
				myDebug("--> Handshake ACK, re-transmit to OBC: \n");
 800294a:	483f      	ldr	r0, [pc, #252]	; (8002a48 <WAIT_FOR_HANDSHAKE+0x1dc>)
 800294c:	f7fd ff16 	bl	800077c <myDebug>
				for (int i = 0; i < (ACK_LENGTH); i++) {
 8002950:	2300      	movs	r3, #0
 8002952:	60fb      	str	r3, [r7, #12]
 8002954:	e00a      	b.n	800296c <WAIT_FOR_HANDSHAKE+0x100>
					myDebug("%02x ", MainCMDHs[i]);
 8002956:	4a34      	ldr	r2, [pc, #208]	; (8002a28 <WAIT_FOR_HANDSHAKE+0x1bc>)
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	4413      	add	r3, r2
 800295c:	781b      	ldrb	r3, [r3, #0]
 800295e:	4619      	mov	r1, r3
 8002960:	4836      	ldr	r0, [pc, #216]	; (8002a3c <WAIT_FOR_HANDSHAKE+0x1d0>)
 8002962:	f7fd ff0b 	bl	800077c <myDebug>
				for (int i = 0; i < (ACK_LENGTH); i++) {
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	3301      	adds	r3, #1
 800296a:	60fb      	str	r3, [r7, #12]
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	2b06      	cmp	r3, #6
 8002970:	ddf1      	ble.n	8002956 <WAIT_FOR_HANDSHAKE+0xea>
				}
				myDebug("\n");
 8002972:	4833      	ldr	r0, [pc, #204]	; (8002a40 <WAIT_FOR_HANDSHAKE+0x1d4>)
 8002974:	f7fd ff02 	bl	800077c <myDebug>
				OBC_HANDSHAKE_FLAG = 1;
 8002978:	4b2c      	ldr	r3, [pc, #176]	; (8002a2c <WAIT_FOR_HANDSHAKE+0x1c0>)
 800297a:	2201      	movs	r2, #1
 800297c:	701a      	strb	r2, [r3, #0]
				memset(MainCMDHs, '\0', ACK_LENGTH);
 800297e:	2207      	movs	r2, #7
 8002980:	2100      	movs	r1, #0
 8002982:	4829      	ldr	r0, [pc, #164]	; (8002a28 <WAIT_FOR_HANDSHAKE+0x1bc>)
 8002984:	f009 f9c0 	bl	800bd08 <memset>
			if (HAL_UART_Transmit(&huart2, MainCMDHs, ACK_LENGTH, 2000)
 8002988:	e038      	b.n	80029fc <WAIT_FOR_HANDSHAKE+0x190>
			}
		} else {
			myDebug("*** Unknown Handshake command received!\n");
 800298a:	4830      	ldr	r0, [pc, #192]	; (8002a4c <WAIT_FOR_HANDSHAKE+0x1e0>)
 800298c:	f7fd fef6 	bl	800077c <myDebug>
			if (HAL_UART_Transmit(&huart2, MainCMDHs, ACK_LENGTH, 2000)
 8002990:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002994:	2207      	movs	r2, #7
 8002996:	4924      	ldr	r1, [pc, #144]	; (8002a28 <WAIT_FOR_HANDSHAKE+0x1bc>)
 8002998:	4825      	ldr	r0, [pc, #148]	; (8002a30 <WAIT_FOR_HANDSHAKE+0x1c4>)
 800299a:	f003 ff7a 	bl	8006892 <HAL_UART_Transmit>
 800299e:	4603      	mov	r3, r0
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d009      	beq.n	80029b8 <WAIT_FOR_HANDSHAKE+0x14c>
					== HAL_OK
					|| HAL_UART_Transmit(&hlpuart1, MainCMDHs, ACK_LENGTH, 7000)
 80029a4:	f641 3358 	movw	r3, #7000	; 0x1b58
 80029a8:	2207      	movs	r2, #7
 80029aa:	491f      	ldr	r1, [pc, #124]	; (8002a28 <WAIT_FOR_HANDSHAKE+0x1bc>)
 80029ac:	4821      	ldr	r0, [pc, #132]	; (8002a34 <WAIT_FOR_HANDSHAKE+0x1c8>)
 80029ae:	f003 ff70 	bl	8006892 <HAL_UART_Transmit>
 80029b2:	4603      	mov	r3, r0
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d131      	bne.n	8002a1c <WAIT_FOR_HANDSHAKE+0x1b0>
							== HAL_OK) {
				myDebug("--> Unknown Handshake ACK, re-transmit to OBC.\n");
 80029b8:	4825      	ldr	r0, [pc, #148]	; (8002a50 <WAIT_FOR_HANDSHAKE+0x1e4>)
 80029ba:	f7fd fedf 	bl	800077c <myDebug>
				for (int i = 0; i < (ACK_LENGTH); i++) {
 80029be:	2300      	movs	r3, #0
 80029c0:	60bb      	str	r3, [r7, #8]
 80029c2:	e00a      	b.n	80029da <WAIT_FOR_HANDSHAKE+0x16e>
					myDebug("%02x ", MainCMDHs[i]);
 80029c4:	4a18      	ldr	r2, [pc, #96]	; (8002a28 <WAIT_FOR_HANDSHAKE+0x1bc>)
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	4413      	add	r3, r2
 80029ca:	781b      	ldrb	r3, [r3, #0]
 80029cc:	4619      	mov	r1, r3
 80029ce:	481b      	ldr	r0, [pc, #108]	; (8002a3c <WAIT_FOR_HANDSHAKE+0x1d0>)
 80029d0:	f7fd fed4 	bl	800077c <myDebug>
				for (int i = 0; i < (ACK_LENGTH); i++) {
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	3301      	adds	r3, #1
 80029d8:	60bb      	str	r3, [r7, #8]
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	2b06      	cmp	r3, #6
 80029de:	ddf1      	ble.n	80029c4 <WAIT_FOR_HANDSHAKE+0x158>
				}
				myDebug("\n");
 80029e0:	4817      	ldr	r0, [pc, #92]	; (8002a40 <WAIT_FOR_HANDSHAKE+0x1d4>)
 80029e2:	f7fd fecb 	bl	800077c <myDebug>
				memset(MainCMDHs, '\0', ACK_LENGTH);
 80029e6:	2207      	movs	r2, #7
 80029e8:	2100      	movs	r1, #0
 80029ea:	480f      	ldr	r0, [pc, #60]	; (8002a28 <WAIT_FOR_HANDSHAKE+0x1bc>)
 80029ec:	f009 f98c 	bl	800bd08 <memset>
				OBC_HANDSHAKE_FLAG = 0;
 80029f0:	4b0e      	ldr	r3, [pc, #56]	; (8002a2c <WAIT_FOR_HANDSHAKE+0x1c0>)
 80029f2:	2200      	movs	r2, #0
 80029f4:	701a      	strb	r2, [r3, #0]
				WAIT_FOR_HANDSHAKE();
 80029f6:	f7ff ff39 	bl	800286c <WAIT_FOR_HANDSHAKE>
					== HAL_OK) {
 80029fa:	e00f      	b.n	8002a1c <WAIT_FOR_HANDSHAKE+0x1b0>
			if (HAL_UART_Transmit(&huart2, MainCMDHs, ACK_LENGTH, 2000)
 80029fc:	bf00      	nop
					== HAL_OK) {
 80029fe:	e00d      	b.n	8002a1c <WAIT_FOR_HANDSHAKE+0x1b0>
			}
		}
	} else {
		OBC_HANDSHAKE_FLAG = 0;
 8002a00:	4b0a      	ldr	r3, [pc, #40]	; (8002a2c <WAIT_FOR_HANDSHAKE+0x1c0>)
 8002a02:	2200      	movs	r2, #0
 8002a04:	701a      	strb	r2, [r3, #0]
		myDebug("*** Handshake Command receive failed, try again!\n");
 8002a06:	4813      	ldr	r0, [pc, #76]	; (8002a54 <WAIT_FOR_HANDSHAKE+0x1e8>)
 8002a08:	f7fd feb8 	bl	800077c <myDebug>
		memset(MainCMDHs, '\0', ACK_LENGTH);
 8002a0c:	2207      	movs	r2, #7
 8002a0e:	2100      	movs	r1, #0
 8002a10:	4805      	ldr	r0, [pc, #20]	; (8002a28 <WAIT_FOR_HANDSHAKE+0x1bc>)
 8002a12:	f009 f979 	bl	800bd08 <memset>
		WAIT_FOR_HANDSHAKE();
 8002a16:	f7ff ff29 	bl	800286c <WAIT_FOR_HANDSHAKE>
	}
}
 8002a1a:	e000      	b.n	8002a1e <WAIT_FOR_HANDSHAKE+0x1b2>
					== HAL_OK) {
 8002a1c:	bf00      	nop
}
 8002a1e:	bf00      	nop
 8002a20:	3718      	adds	r7, #24
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}
 8002a26:	bf00      	nop
 8002a28:	200004f4 	.word	0x200004f4
 8002a2c:	200004d4 	.word	0x200004d4
 8002a30:	20000688 	.word	0x20000688
 8002a34:	20000560 	.word	0x20000560
 8002a38:	0800cdf4 	.word	0x0800cdf4
 8002a3c:	0800ce24 	.word	0x0800ce24
 8002a40:	0800ce2c 	.word	0x0800ce2c
 8002a44:	0800ce30 	.word	0x0800ce30
 8002a48:	0800ce58 	.word	0x0800ce58
 8002a4c:	0800ce84 	.word	0x0800ce84
 8002a50:	0800ceb0 	.word	0x0800ceb0
 8002a54:	0800cee0 	.word	0x0800cee0

08002a58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a5c:	bf00      	nop
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bc80      	pop	{r7}
 8002a62:	4770      	bx	lr

08002a64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a64:	b480      	push	{r7}
 8002a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002a68:	e7fe      	b.n	8002a68 <NMI_Handler+0x4>

08002a6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a6a:	b480      	push	{r7}
 8002a6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a6e:	e7fe      	b.n	8002a6e <HardFault_Handler+0x4>

08002a70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a70:	b480      	push	{r7}
 8002a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a74:	e7fe      	b.n	8002a74 <MemManage_Handler+0x4>

08002a76 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a76:	b480      	push	{r7}
 8002a78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a7a:	e7fe      	b.n	8002a7a <BusFault_Handler+0x4>

08002a7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a80:	e7fe      	b.n	8002a80 <UsageFault_Handler+0x4>

08002a82 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a82:	b480      	push	{r7}
 8002a84:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a86:	bf00      	nop
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bc80      	pop	{r7}
 8002a8c:	4770      	bx	lr

08002a8e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a8e:	b480      	push	{r7}
 8002a90:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a92:	bf00      	nop
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bc80      	pop	{r7}
 8002a98:	4770      	bx	lr

08002a9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a9a:	b480      	push	{r7}
 8002a9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a9e:	bf00      	nop
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bc80      	pop	{r7}
 8002aa4:	4770      	bx	lr

08002aa6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002aa6:	b580      	push	{r7, lr}
 8002aa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002aaa:	f000 fdc3 	bl	8003634 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002aae:	bf00      	nop
 8002ab0:	bd80      	pop	{r7, pc}
	...

08002ab4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 1 Interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8002ab8:	4802      	ldr	r0, [pc, #8]	; (8002ac4 <DMA1_Channel1_IRQHandler+0x10>)
 8002aba:	f001 f8bd 	bl	8003c38 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002abe:	bf00      	nop
 8002ac0:	bd80      	pop	{r7, pc}
 8002ac2:	bf00      	nop
 8002ac4:	2000071c 	.word	0x2000071c

08002ac8 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 2 Interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8002acc:	4802      	ldr	r0, [pc, #8]	; (8002ad8 <DMA1_Channel2_IRQHandler+0x10>)
 8002ace:	f001 f8b3 	bl	8003c38 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8002ad2:	bf00      	nop
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	2000077c 	.word	0x2000077c

08002adc <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 3 Interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002ae0:	4802      	ldr	r0, [pc, #8]	; (8002aec <DMA1_Channel3_IRQHandler+0x10>)
 8002ae2:	f001 f8a9 	bl	8003c38 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8002ae6:	bf00      	nop
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	bf00      	nop
 8002aec:	200007dc 	.word	0x200007dc

08002af0 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 4 Interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002af4:	4802      	ldr	r0, [pc, #8]	; (8002b00 <DMA1_Channel4_IRQHandler+0x10>)
 8002af6:	f001 f89f 	bl	8003c38 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8002afa:	bf00      	nop
 8002afc:	bd80      	pop	{r7, pc}
 8002afe:	bf00      	nop
 8002b00:	2000083c 	.word	0x2000083c

08002b04 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 5 Interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002b08:	4802      	ldr	r0, [pc, #8]	; (8002b14 <DMA1_Channel5_IRQHandler+0x10>)
 8002b0a:	f001 f895 	bl	8003c38 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8002b0e:	bf00      	nop
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	bf00      	nop
 8002b14:	2000089c 	.word	0x2000089c

08002b18 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 6 Interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002b1c:	4802      	ldr	r0, [pc, #8]	; (8002b28 <DMA1_Channel6_IRQHandler+0x10>)
 8002b1e:	f001 f88b 	bl	8003c38 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8002b22:	bf00      	nop
 8002b24:	bd80      	pop	{r7, pc}
 8002b26:	bf00      	nop
 8002b28:	200008fc 	.word	0x200008fc

08002b2c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 Interrupt.
  */
void USART1_IRQHandler(void)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002b30:	4802      	ldr	r0, [pc, #8]	; (8002b3c <USART1_IRQHandler+0x10>)
 8002b32:	f004 f845 	bl	8006bc0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002b36:	bf00      	nop
 8002b38:	bd80      	pop	{r7, pc}
 8002b3a:	bf00      	nop
 8002b3c:	200005f4 	.word	0x200005f4

08002b40 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002b44:	4802      	ldr	r0, [pc, #8]	; (8002b50 <USART2_IRQHandler+0x10>)
 8002b46:	f004 f83b 	bl	8006bc0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002b4a:	bf00      	nop
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	bf00      	nop
 8002b50:	20000688 	.word	0x20000688

08002b54 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 Interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8002b58:	4802      	ldr	r0, [pc, #8]	; (8002b64 <LPUART1_IRQHandler+0x10>)
 8002b5a:	f004 f831 	bl	8006bc0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8002b5e:	bf00      	nop
 8002b60:	bd80      	pop	{r7, pc}
 8002b62:	bf00      	nop
 8002b64:	20000560 	.word	0x20000560

08002b68 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 8002b6c:	4802      	ldr	r0, [pc, #8]	; (8002b78 <SUBGHZ_Radio_IRQHandler+0x10>)
 8002b6e:	f003 f9c3 	bl	8005ef8 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 8002b72:	bf00      	nop
 8002b74:	bd80      	pop	{r7, pc}
 8002b76:	bf00      	nop
 8002b78:	200004fc 	.word	0x200004fc

08002b7c <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b085      	sub	sp, #20
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 8002b84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b88:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002b8a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	4313      	orrs	r3, r2
 8002b92:	664b      	str	r3, [r1, #100]	; 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 8002b94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b98:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
}
 8002ba2:	bf00      	nop
 8002ba4:	3714      	adds	r7, #20
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bc80      	pop	{r7}
 8002baa:	4770      	bx	lr

08002bac <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 8002bb0:	4b06      	ldr	r3, [pc, #24]	; (8002bcc <MX_SUBGHZ_Init+0x20>)
 8002bb2:	2208      	movs	r2, #8
 8002bb4:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 8002bb6:	4805      	ldr	r0, [pc, #20]	; (8002bcc <MX_SUBGHZ_Init+0x20>)
 8002bb8:	f002 ff1c 	bl	80059f4 <HAL_SUBGHZ_Init>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d001      	beq.n	8002bc6 <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 8002bc2:	f7ff fe4d 	bl	8002860 <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 8002bc6:	bf00      	nop
 8002bc8:	bd80      	pop	{r7, pc}
 8002bca:	bf00      	nop
 8002bcc:	200004fc 	.word	0x200004fc

08002bd0 <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b082      	sub	sp, #8
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 8002bd8:	2001      	movs	r0, #1
 8002bda:	f7ff ffcf 	bl	8002b7c <LL_APB3_GRP1_EnableClock>

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 8002bde:	2200      	movs	r2, #0
 8002be0:	2100      	movs	r1, #0
 8002be2:	2032      	movs	r0, #50	; 0x32
 8002be4:	f000 fe0f 	bl	8003806 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 8002be8:	2032      	movs	r0, #50	; 0x32
 8002bea:	f000 fe26 	bl	800383a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 8002bee:	bf00      	nop
 8002bf0:	3708      	adds	r7, #8
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}

08002bf6 <SystemApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SystemApp_Init(void)
{
 8002bf6:	b480      	push	{r7}
 8002bf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SystemApp_Init_1 */

  /* USER CODE END SystemApp_Init_1 */

}
 8002bfa:	bf00      	nop
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bc80      	pop	{r7}
 8002c00:	4770      	bx	lr
	...

08002c04 <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b082      	sub	sp, #8
 8002c08:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	607b      	str	r3, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  if (SYS_TimerInitialisedFlag == 0)
 8002c0e:	4b06      	ldr	r3, [pc, #24]	; (8002c28 <HAL_GetTick+0x24>)
 8002c10:	781b      	ldrb	r3, [r3, #0]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d002      	beq.n	8002c1c <HAL_GetTick+0x18>

    /* USER CODE END HAL_GetTick_EarlyCall */
  }
  else
  {
    ret = TIMER_IF_GetTimerValue();
 8002c16:	f000 f908 	bl	8002e2a <TIMER_IF_GetTimerValue>
 8002c1a:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
  return ret;
 8002c1c:	687b      	ldr	r3, [r7, #4]
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	3708      	adds	r7, #8
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}
 8002c26:	bf00      	nop
 8002c28:	20000508 	.word	0x20000508

08002c2c <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b082      	sub	sp, #8
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	4618      	mov	r0, r3
 8002c38:	f000 f925 	bl	8002e86 <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 8002c3c:	bf00      	nop
 8002c3e:	3708      	adds	r7, #8
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}

08002c44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b086      	sub	sp, #24
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c4c:	4a14      	ldr	r2, [pc, #80]	; (8002ca0 <_sbrk+0x5c>)
 8002c4e:	4b15      	ldr	r3, [pc, #84]	; (8002ca4 <_sbrk+0x60>)
 8002c50:	1ad3      	subs	r3, r2, r3
 8002c52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c58:	4b13      	ldr	r3, [pc, #76]	; (8002ca8 <_sbrk+0x64>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d102      	bne.n	8002c66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002c60:	4b11      	ldr	r3, [pc, #68]	; (8002ca8 <_sbrk+0x64>)
 8002c62:	4a12      	ldr	r2, [pc, #72]	; (8002cac <_sbrk+0x68>)
 8002c64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c66:	4b10      	ldr	r3, [pc, #64]	; (8002ca8 <_sbrk+0x64>)
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	4413      	add	r3, r2
 8002c6e:	693a      	ldr	r2, [r7, #16]
 8002c70:	429a      	cmp	r2, r3
 8002c72:	d207      	bcs.n	8002c84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002c74:	f009 f850 	bl	800bd18 <__errno>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	220c      	movs	r2, #12
 8002c7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002c7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002c82:	e009      	b.n	8002c98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002c84:	4b08      	ldr	r3, [pc, #32]	; (8002ca8 <_sbrk+0x64>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002c8a:	4b07      	ldr	r3, [pc, #28]	; (8002ca8 <_sbrk+0x64>)
 8002c8c:	681a      	ldr	r2, [r3, #0]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	4413      	add	r3, r2
 8002c92:	4a05      	ldr	r2, [pc, #20]	; (8002ca8 <_sbrk+0x64>)
 8002c94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002c96:	68fb      	ldr	r3, [r7, #12]
}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	3718      	adds	r7, #24
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}
 8002ca0:	20010000 	.word	0x20010000
 8002ca4:	00000400 	.word	0x00000400
 8002ca8:	2000050c 	.word	0x2000050c
 8002cac:	20000c68 	.word	0x20000c68

08002cb0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8002cb4:	bf00      	nop
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bc80      	pop	{r7}
 8002cba:	4770      	bx	lr

08002cbc <LL_APB1_GRP1_EnableClock>:
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b085      	sub	sp, #20
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002cc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cc8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002cca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002cd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cd8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	4013      	ands	r3, r2
 8002cde:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
}
 8002ce2:	bf00      	nop
 8002ce4:	3714      	adds	r7, #20
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bc80      	pop	{r7}
 8002cea:	4770      	bx	lr

08002cec <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b088      	sub	sp, #32
 8002cf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002cf2:	f107 0310 	add.w	r3, r7, #16
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	601a      	str	r2, [r3, #0]
 8002cfa:	605a      	str	r2, [r3, #4]
 8002cfc:	609a      	str	r2, [r3, #8]
 8002cfe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d00:	1d3b      	adds	r3, r7, #4
 8002d02:	2200      	movs	r2, #0
 8002d04:	601a      	str	r2, [r3, #0]
 8002d06:	605a      	str	r2, [r3, #4]
 8002d08:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002d0a:	4b1d      	ldr	r3, [pc, #116]	; (8002d80 <MX_TIM2_Init+0x94>)
 8002d0c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002d10:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 48-1;
 8002d12:	4b1b      	ldr	r3, [pc, #108]	; (8002d80 <MX_TIM2_Init+0x94>)
 8002d14:	222f      	movs	r2, #47	; 0x2f
 8002d16:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d18:	4b19      	ldr	r3, [pc, #100]	; (8002d80 <MX_TIM2_Init+0x94>)
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000001-1;
 8002d1e:	4b18      	ldr	r3, [pc, #96]	; (8002d80 <MX_TIM2_Init+0x94>)
 8002d20:	4a18      	ldr	r2, [pc, #96]	; (8002d84 <MX_TIM2_Init+0x98>)
 8002d22:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d24:	4b16      	ldr	r3, [pc, #88]	; (8002d80 <MX_TIM2_Init+0x94>)
 8002d26:	2200      	movs	r2, #0
 8002d28:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002d2a:	4b15      	ldr	r3, [pc, #84]	; (8002d80 <MX_TIM2_Init+0x94>)
 8002d2c:	2280      	movs	r2, #128	; 0x80
 8002d2e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002d30:	4813      	ldr	r0, [pc, #76]	; (8002d80 <MX_TIM2_Init+0x94>)
 8002d32:	f003 fa7f 	bl	8006234 <HAL_TIM_Base_Init>
 8002d36:	4603      	mov	r3, r0
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d001      	beq.n	8002d40 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002d3c:	f7ff fd90 	bl	8002860 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d44:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002d46:	f107 0310 	add.w	r3, r7, #16
 8002d4a:	4619      	mov	r1, r3
 8002d4c:	480c      	ldr	r0, [pc, #48]	; (8002d80 <MX_TIM2_Init+0x94>)
 8002d4e:	f003 fb0d 	bl	800636c <HAL_TIM_ConfigClockSource>
 8002d52:	4603      	mov	r3, r0
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d001      	beq.n	8002d5c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002d58:	f7ff fd82 	bl	8002860 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d60:	2300      	movs	r3, #0
 8002d62:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002d64:	1d3b      	adds	r3, r7, #4
 8002d66:	4619      	mov	r1, r3
 8002d68:	4805      	ldr	r0, [pc, #20]	; (8002d80 <MX_TIM2_Init+0x94>)
 8002d6a:	f003 fcc3 	bl	80066f4 <HAL_TIMEx_MasterConfigSynchronization>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d001      	beq.n	8002d78 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002d74:	f7ff fd74 	bl	8002860 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002d78:	bf00      	nop
 8002d7a:	3720      	adds	r7, #32
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}
 8002d80:	20000510 	.word	0x20000510
 8002d84:	000f4240 	.word	0x000f4240

08002d88 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b082      	sub	sp, #8
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d98:	d102      	bne.n	8002da0 <HAL_TIM_Base_MspInit+0x18>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002d9a:	2001      	movs	r0, #1
 8002d9c:	f7ff ff8e 	bl	8002cbc <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002da0:	bf00      	nop
 8002da2:	3708      	adds	r7, #8
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}

08002da8 <TIMER_IF_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
UTIL_TIMER_Status_t TIMER_IF_Init(void)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b083      	sub	sp, #12
 8002dac:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8002dae:	2300      	movs	r3, #0
 8002db0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_Init */

  /* USER CODE END TIMER_IF_Init */
  return ret;
 8002db2:	79fb      	ldrb	r3, [r7, #7]
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	370c      	adds	r7, #12
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bc80      	pop	{r7}
 8002dbc:	4770      	bx	lr

08002dbe <TIMER_IF_StartTimer>:

UTIL_TIMER_Status_t TIMER_IF_StartTimer(uint32_t timeout)
{
 8002dbe:	b480      	push	{r7}
 8002dc0:	b085      	sub	sp, #20
 8002dc2:	af00      	add	r7, sp, #0
 8002dc4:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN TIMER_IF_StartTimer */

  /* USER CODE END TIMER_IF_StartTimer */
  return ret;
 8002dca:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	3714      	adds	r7, #20
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bc80      	pop	{r7}
 8002dd4:	4770      	bx	lr

08002dd6 <TIMER_IF_StopTimer>:

UTIL_TIMER_Status_t TIMER_IF_StopTimer(void)
{
 8002dd6:	b480      	push	{r7}
 8002dd8:	b083      	sub	sp, #12
 8002dda:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_StopTimer */

  /* USER CODE END TIMER_IF_StopTimer */
  return ret;
 8002de0:	79fb      	ldrb	r3, [r7, #7]
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	370c      	adds	r7, #12
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bc80      	pop	{r7}
 8002dea:	4770      	bx	lr

08002dec <TIMER_IF_SetTimerContext>:

uint32_t TIMER_IF_SetTimerContext(void)
{
 8002dec:	b480      	push	{r7}
 8002dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_SetTimerContext */

  /* USER CODE END TIMER_IF_SetTimerContext */

  /*return time context*/
  return RtcTimerContext;
 8002df0:	4b02      	ldr	r3, [pc, #8]	; (8002dfc <TIMER_IF_SetTimerContext+0x10>)
 8002df2:	681b      	ldr	r3, [r3, #0]
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bc80      	pop	{r7}
 8002dfa:	4770      	bx	lr
 8002dfc:	2000055c 	.word	0x2000055c

08002e00 <TIMER_IF_GetTimerContext>:

uint32_t TIMER_IF_GetTimerContext(void)
{
 8002e00:	b480      	push	{r7}
 8002e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_GetTimerContext */

  /* USER CODE END TIMER_IF_GetTimerContext */

  /*return time context*/
  return RtcTimerContext;
 8002e04:	4b02      	ldr	r3, [pc, #8]	; (8002e10 <TIMER_IF_GetTimerContext+0x10>)
 8002e06:	681b      	ldr	r3, [r3, #0]
}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bc80      	pop	{r7}
 8002e0e:	4770      	bx	lr
 8002e10:	2000055c 	.word	0x2000055c

08002e14 <TIMER_IF_GetTimerElapsedTime>:

uint32_t TIMER_IF_GetTimerElapsedTime(void)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b083      	sub	sp, #12
 8002e18:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime */
  return ret;
 8002e1e:	687b      	ldr	r3, [r7, #4]
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	370c      	adds	r7, #12
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bc80      	pop	{r7}
 8002e28:	4770      	bx	lr

08002e2a <TIMER_IF_GetTimerValue>:

uint32_t TIMER_IF_GetTimerValue(void)
{
 8002e2a:	b480      	push	{r7}
 8002e2c:	b083      	sub	sp, #12
 8002e2e:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002e30:	2300      	movs	r3, #0
 8002e32:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerValue */

  /* USER CODE END TIMER_IF_GetTimerValue */
  return ret;
 8002e34:	687b      	ldr	r3, [r7, #4]
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	370c      	adds	r7, #12
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bc80      	pop	{r7}
 8002e3e:	4770      	bx	lr

08002e40 <TIMER_IF_GetMinimumTimeout>:

uint32_t TIMER_IF_GetMinimumTimeout(void)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b083      	sub	sp, #12
 8002e44:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002e46:	2300      	movs	r3, #0
 8002e48:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout */

  /* USER CODE END TIMER_IF_GetMinimumTimeout */
  return ret;
 8002e4a:	687b      	ldr	r3, [r7, #4]
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	370c      	adds	r7, #12
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bc80      	pop	{r7}
 8002e54:	4770      	bx	lr

08002e56 <TIMER_IF_Convert_ms2Tick>:

uint32_t TIMER_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 8002e56:	b480      	push	{r7}
 8002e58:	b085      	sub	sp, #20
 8002e5a:	af00      	add	r7, sp, #0
 8002e5c:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick */

  /* USER CODE END TIMER_IF_Convert_ms2Tick */
  return ret;
 8002e62:	68fb      	ldr	r3, [r7, #12]
}
 8002e64:	4618      	mov	r0, r3
 8002e66:	3714      	adds	r7, #20
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bc80      	pop	{r7}
 8002e6c:	4770      	bx	lr

08002e6e <TIMER_IF_Convert_Tick2ms>:

uint32_t TIMER_IF_Convert_Tick2ms(uint32_t tick)
{
 8002e6e:	b480      	push	{r7}
 8002e70:	b085      	sub	sp, #20
 8002e72:	af00      	add	r7, sp, #0
 8002e74:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8002e76:	2300      	movs	r3, #0
 8002e78:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms */

  /* USER CODE END TIMER_IF_Convert_Tick2ms */
  return ret;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	3714      	adds	r7, #20
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bc80      	pop	{r7}
 8002e84:	4770      	bx	lr

08002e86 <TIMER_IF_DelayMs>:

void TIMER_IF_DelayMs(uint32_t delay)
{
 8002e86:	b480      	push	{r7}
 8002e88:	b083      	sub	sp, #12
 8002e8a:	af00      	add	r7, sp, #0
 8002e8c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_DelayMs */

  /* USER CODE END TIMER_IF_DelayMs */
}
 8002e8e:	bf00      	nop
 8002e90:	370c      	adds	r7, #12
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bc80      	pop	{r7}
 8002e96:	4770      	bx	lr

08002e98 <LL_AHB2_GRP1_EnableClock>:
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b085      	sub	sp, #20
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002ea0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ea4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002ea6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	4313      	orrs	r3, r2
 8002eae:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002eb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002eb4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	4013      	ands	r3, r2
 8002eba:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
}
 8002ebe:	bf00      	nop
 8002ec0:	3714      	adds	r7, #20
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bc80      	pop	{r7}
 8002ec6:	4770      	bx	lr

08002ec8 <LL_APB1_GRP1_EnableClock>:
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b085      	sub	sp, #20
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002ed0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ed4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002ed6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	4313      	orrs	r3, r2
 8002ede:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002ee0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ee4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	4013      	ands	r3, r2
 8002eea:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002eec:	68fb      	ldr	r3, [r7, #12]
}
 8002eee:	bf00      	nop
 8002ef0:	3714      	adds	r7, #20
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bc80      	pop	{r7}
 8002ef6:	4770      	bx	lr

08002ef8 <LL_APB1_GRP2_EnableClock>:
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b085      	sub	sp, #20
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR2, Periphs);
 8002f00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f04:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002f06:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	65cb      	str	r3, [r1, #92]	; 0x5c
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8002f10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f14:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	4013      	ands	r3, r2
 8002f1a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
}
 8002f1e:	bf00      	nop
 8002f20:	3714      	adds	r7, #20
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bc80      	pop	{r7}
 8002f26:	4770      	bx	lr

08002f28 <LL_APB2_GRP1_EnableClock>:
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b085      	sub	sp, #20
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002f30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f34:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002f36:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002f40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f44:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	4013      	ands	r3, r2
 8002f4a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
}
 8002f4e:	bf00      	nop
 8002f50:	3714      	adds	r7, #20
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bc80      	pop	{r7}
 8002f56:	4770      	bx	lr

08002f58 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8002f5c:	4b22      	ldr	r3, [pc, #136]	; (8002fe8 <MX_LPUART1_UART_Init+0x90>)
 8002f5e:	4a23      	ldr	r2, [pc, #140]	; (8002fec <MX_LPUART1_UART_Init+0x94>)
 8002f60:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8002f62:	4b21      	ldr	r3, [pc, #132]	; (8002fe8 <MX_LPUART1_UART_Init+0x90>)
 8002f64:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002f68:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002f6a:	4b1f      	ldr	r3, [pc, #124]	; (8002fe8 <MX_LPUART1_UART_Init+0x90>)
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8002f70:	4b1d      	ldr	r3, [pc, #116]	; (8002fe8 <MX_LPUART1_UART_Init+0x90>)
 8002f72:	2200      	movs	r2, #0
 8002f74:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8002f76:	4b1c      	ldr	r3, [pc, #112]	; (8002fe8 <MX_LPUART1_UART_Init+0x90>)
 8002f78:	2200      	movs	r2, #0
 8002f7a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8002f7c:	4b1a      	ldr	r3, [pc, #104]	; (8002fe8 <MX_LPUART1_UART_Init+0x90>)
 8002f7e:	220c      	movs	r2, #12
 8002f80:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f82:	4b19      	ldr	r3, [pc, #100]	; (8002fe8 <MX_LPUART1_UART_Init+0x90>)
 8002f84:	2200      	movs	r2, #0
 8002f86:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002f88:	4b17      	ldr	r3, [pc, #92]	; (8002fe8 <MX_LPUART1_UART_Init+0x90>)
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002f8e:	4b16      	ldr	r3, [pc, #88]	; (8002fe8 <MX_LPUART1_UART_Init+0x90>)
 8002f90:	2200      	movs	r2, #0
 8002f92:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002f94:	4b14      	ldr	r3, [pc, #80]	; (8002fe8 <MX_LPUART1_UART_Init+0x90>)
 8002f96:	2200      	movs	r2, #0
 8002f98:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8002f9a:	4b13      	ldr	r3, [pc, #76]	; (8002fe8 <MX_LPUART1_UART_Init+0x90>)
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8002fa0:	4811      	ldr	r0, [pc, #68]	; (8002fe8 <MX_LPUART1_UART_Init+0x90>)
 8002fa2:	f003 fc26 	bl	80067f2 <HAL_UART_Init>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d001      	beq.n	8002fb0 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8002fac:	f7ff fc58 	bl	8002860 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002fb0:	2100      	movs	r1, #0
 8002fb2:	480d      	ldr	r0, [pc, #52]	; (8002fe8 <MX_LPUART1_UART_Init+0x90>)
 8002fb4:	f005 f84e 	bl	8008054 <HAL_UARTEx_SetTxFifoThreshold>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d001      	beq.n	8002fc2 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002fbe:	f7ff fc4f 	bl	8002860 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002fc2:	2100      	movs	r1, #0
 8002fc4:	4808      	ldr	r0, [pc, #32]	; (8002fe8 <MX_LPUART1_UART_Init+0x90>)
 8002fc6:	f005 f883 	bl	80080d0 <HAL_UARTEx_SetRxFifoThreshold>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d001      	beq.n	8002fd4 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002fd0:	f7ff fc46 	bl	8002860 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8002fd4:	4804      	ldr	r0, [pc, #16]	; (8002fe8 <MX_LPUART1_UART_Init+0x90>)
 8002fd6:	f005 f805 	bl	8007fe4 <HAL_UARTEx_DisableFifoMode>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d001      	beq.n	8002fe4 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002fe0:	f7ff fc3e 	bl	8002860 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8002fe4:	bf00      	nop
 8002fe6:	bd80      	pop	{r7, pc}
 8002fe8:	20000560 	.word	0x20000560
 8002fec:	40008000 	.word	0x40008000

08002ff0 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002ff4:	4b22      	ldr	r3, [pc, #136]	; (8003080 <MX_USART1_UART_Init+0x90>)
 8002ff6:	4a23      	ldr	r2, [pc, #140]	; (8003084 <MX_USART1_UART_Init+0x94>)
 8002ff8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002ffa:	4b21      	ldr	r3, [pc, #132]	; (8003080 <MX_USART1_UART_Init+0x90>)
 8002ffc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003000:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003002:	4b1f      	ldr	r3, [pc, #124]	; (8003080 <MX_USART1_UART_Init+0x90>)
 8003004:	2200      	movs	r2, #0
 8003006:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003008:	4b1d      	ldr	r3, [pc, #116]	; (8003080 <MX_USART1_UART_Init+0x90>)
 800300a:	2200      	movs	r2, #0
 800300c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800300e:	4b1c      	ldr	r3, [pc, #112]	; (8003080 <MX_USART1_UART_Init+0x90>)
 8003010:	2200      	movs	r2, #0
 8003012:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003014:	4b1a      	ldr	r3, [pc, #104]	; (8003080 <MX_USART1_UART_Init+0x90>)
 8003016:	220c      	movs	r2, #12
 8003018:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800301a:	4b19      	ldr	r3, [pc, #100]	; (8003080 <MX_USART1_UART_Init+0x90>)
 800301c:	2200      	movs	r2, #0
 800301e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003020:	4b17      	ldr	r3, [pc, #92]	; (8003080 <MX_USART1_UART_Init+0x90>)
 8003022:	2200      	movs	r2, #0
 8003024:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003026:	4b16      	ldr	r3, [pc, #88]	; (8003080 <MX_USART1_UART_Init+0x90>)
 8003028:	2200      	movs	r2, #0
 800302a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800302c:	4b14      	ldr	r3, [pc, #80]	; (8003080 <MX_USART1_UART_Init+0x90>)
 800302e:	2200      	movs	r2, #0
 8003030:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003032:	4b13      	ldr	r3, [pc, #76]	; (8003080 <MX_USART1_UART_Init+0x90>)
 8003034:	2200      	movs	r2, #0
 8003036:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003038:	4811      	ldr	r0, [pc, #68]	; (8003080 <MX_USART1_UART_Init+0x90>)
 800303a:	f003 fbda 	bl	80067f2 <HAL_UART_Init>
 800303e:	4603      	mov	r3, r0
 8003040:	2b00      	cmp	r3, #0
 8003042:	d001      	beq.n	8003048 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8003044:	f7ff fc0c 	bl	8002860 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003048:	2100      	movs	r1, #0
 800304a:	480d      	ldr	r0, [pc, #52]	; (8003080 <MX_USART1_UART_Init+0x90>)
 800304c:	f005 f802 	bl	8008054 <HAL_UARTEx_SetTxFifoThreshold>
 8003050:	4603      	mov	r3, r0
 8003052:	2b00      	cmp	r3, #0
 8003054:	d001      	beq.n	800305a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8003056:	f7ff fc03 	bl	8002860 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800305a:	2100      	movs	r1, #0
 800305c:	4808      	ldr	r0, [pc, #32]	; (8003080 <MX_USART1_UART_Init+0x90>)
 800305e:	f005 f837 	bl	80080d0 <HAL_UARTEx_SetRxFifoThreshold>
 8003062:	4603      	mov	r3, r0
 8003064:	2b00      	cmp	r3, #0
 8003066:	d001      	beq.n	800306c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8003068:	f7ff fbfa 	bl	8002860 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800306c:	4804      	ldr	r0, [pc, #16]	; (8003080 <MX_USART1_UART_Init+0x90>)
 800306e:	f004 ffb9 	bl	8007fe4 <HAL_UARTEx_DisableFifoMode>
 8003072:	4603      	mov	r3, r0
 8003074:	2b00      	cmp	r3, #0
 8003076:	d001      	beq.n	800307c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8003078:	f7ff fbf2 	bl	8002860 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800307c:	bf00      	nop
 800307e:	bd80      	pop	{r7, pc}
 8003080:	200005f4 	.word	0x200005f4
 8003084:	40013800 	.word	0x40013800

08003088 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800308c:	4b22      	ldr	r3, [pc, #136]	; (8003118 <MX_USART2_UART_Init+0x90>)
 800308e:	4a23      	ldr	r2, [pc, #140]	; (800311c <MX_USART2_UART_Init+0x94>)
 8003090:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003092:	4b21      	ldr	r3, [pc, #132]	; (8003118 <MX_USART2_UART_Init+0x90>)
 8003094:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003098:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800309a:	4b1f      	ldr	r3, [pc, #124]	; (8003118 <MX_USART2_UART_Init+0x90>)
 800309c:	2200      	movs	r2, #0
 800309e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80030a0:	4b1d      	ldr	r3, [pc, #116]	; (8003118 <MX_USART2_UART_Init+0x90>)
 80030a2:	2200      	movs	r2, #0
 80030a4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80030a6:	4b1c      	ldr	r3, [pc, #112]	; (8003118 <MX_USART2_UART_Init+0x90>)
 80030a8:	2200      	movs	r2, #0
 80030aa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80030ac:	4b1a      	ldr	r3, [pc, #104]	; (8003118 <MX_USART2_UART_Init+0x90>)
 80030ae:	220c      	movs	r2, #12
 80030b0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80030b2:	4b19      	ldr	r3, [pc, #100]	; (8003118 <MX_USART2_UART_Init+0x90>)
 80030b4:	2200      	movs	r2, #0
 80030b6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80030b8:	4b17      	ldr	r3, [pc, #92]	; (8003118 <MX_USART2_UART_Init+0x90>)
 80030ba:	2200      	movs	r2, #0
 80030bc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80030be:	4b16      	ldr	r3, [pc, #88]	; (8003118 <MX_USART2_UART_Init+0x90>)
 80030c0:	2200      	movs	r2, #0
 80030c2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80030c4:	4b14      	ldr	r3, [pc, #80]	; (8003118 <MX_USART2_UART_Init+0x90>)
 80030c6:	2200      	movs	r2, #0
 80030c8:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80030ca:	4b13      	ldr	r3, [pc, #76]	; (8003118 <MX_USART2_UART_Init+0x90>)
 80030cc:	2200      	movs	r2, #0
 80030ce:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80030d0:	4811      	ldr	r0, [pc, #68]	; (8003118 <MX_USART2_UART_Init+0x90>)
 80030d2:	f003 fb8e 	bl	80067f2 <HAL_UART_Init>
 80030d6:	4603      	mov	r3, r0
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d001      	beq.n	80030e0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80030dc:	f7ff fbc0 	bl	8002860 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80030e0:	2100      	movs	r1, #0
 80030e2:	480d      	ldr	r0, [pc, #52]	; (8003118 <MX_USART2_UART_Init+0x90>)
 80030e4:	f004 ffb6 	bl	8008054 <HAL_UARTEx_SetTxFifoThreshold>
 80030e8:	4603      	mov	r3, r0
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d001      	beq.n	80030f2 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80030ee:	f7ff fbb7 	bl	8002860 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80030f2:	2100      	movs	r1, #0
 80030f4:	4808      	ldr	r0, [pc, #32]	; (8003118 <MX_USART2_UART_Init+0x90>)
 80030f6:	f004 ffeb 	bl	80080d0 <HAL_UARTEx_SetRxFifoThreshold>
 80030fa:	4603      	mov	r3, r0
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d001      	beq.n	8003104 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8003100:	f7ff fbae 	bl	8002860 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8003104:	4804      	ldr	r0, [pc, #16]	; (8003118 <MX_USART2_UART_Init+0x90>)
 8003106:	f004 ff6d 	bl	8007fe4 <HAL_UARTEx_DisableFifoMode>
 800310a:	4603      	mov	r3, r0
 800310c:	2b00      	cmp	r3, #0
 800310e:	d001      	beq.n	8003114 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8003110:	f7ff fba6 	bl	8002860 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003114:	bf00      	nop
 8003116:	bd80      	pop	{r7, pc}
 8003118:	20000688 	.word	0x20000688
 800311c:	40004400 	.word	0x40004400

08003120 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b096      	sub	sp, #88	; 0x58
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003128:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800312c:	2200      	movs	r2, #0
 800312e:	601a      	str	r2, [r3, #0]
 8003130:	605a      	str	r2, [r3, #4]
 8003132:	609a      	str	r2, [r3, #8]
 8003134:	60da      	str	r2, [r3, #12]
 8003136:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003138:	f107 030c 	add.w	r3, r7, #12
 800313c:	2238      	movs	r2, #56	; 0x38
 800313e:	2100      	movs	r1, #0
 8003140:	4618      	mov	r0, r3
 8003142:	f008 fde1 	bl	800bd08 <memset>
  if(uartHandle->Instance==LPUART1)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a99      	ldr	r2, [pc, #612]	; (80033b0 <HAL_UART_MspInit+0x290>)
 800314c:	4293      	cmp	r3, r2
 800314e:	f040 8092 	bne.w	8003276 <HAL_UART_MspInit+0x156>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8003152:	2320      	movs	r3, #32
 8003154:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8003156:	2300      	movs	r3, #0
 8003158:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800315a:	f107 030c 	add.w	r3, r7, #12
 800315e:	4618      	mov	r0, r3
 8003160:	f002 fa94 	bl	800568c <HAL_RCCEx_PeriphCLKConfig>
 8003164:	4603      	mov	r3, r0
 8003166:	2b00      	cmp	r3, #0
 8003168:	d001      	beq.n	800316e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800316a:	f7ff fb79 	bl	8002860 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800316e:	2001      	movs	r0, #1
 8003170:	f7ff fec2 	bl	8002ef8 <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003174:	2004      	movs	r0, #4
 8003176:	f7ff fe8f 	bl	8002e98 <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PC1     ------> LPUART1_TX
    PC0     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 800317a:	2303      	movs	r3, #3
 800317c:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800317e:	2302      	movs	r3, #2
 8003180:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003182:	2300      	movs	r3, #0
 8003184:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003186:	2300      	movs	r3, #0
 8003188:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800318a:	2308      	movs	r3, #8
 800318c:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800318e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003192:	4619      	mov	r1, r3
 8003194:	4887      	ldr	r0, [pc, #540]	; (80033b4 <HAL_UART_MspInit+0x294>)
 8003196:	f000 feed 	bl	8003f74 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel1;
 800319a:	4b87      	ldr	r3, [pc, #540]	; (80033b8 <HAL_UART_MspInit+0x298>)
 800319c:	4a87      	ldr	r2, [pc, #540]	; (80033bc <HAL_UART_MspInit+0x29c>)
 800319e:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 80031a0:	4b85      	ldr	r3, [pc, #532]	; (80033b8 <HAL_UART_MspInit+0x298>)
 80031a2:	2215      	movs	r2, #21
 80031a4:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80031a6:	4b84      	ldr	r3, [pc, #528]	; (80033b8 <HAL_UART_MspInit+0x298>)
 80031a8:	2200      	movs	r2, #0
 80031aa:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80031ac:	4b82      	ldr	r3, [pc, #520]	; (80033b8 <HAL_UART_MspInit+0x298>)
 80031ae:	2200      	movs	r2, #0
 80031b0:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80031b2:	4b81      	ldr	r3, [pc, #516]	; (80033b8 <HAL_UART_MspInit+0x298>)
 80031b4:	2280      	movs	r2, #128	; 0x80
 80031b6:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80031b8:	4b7f      	ldr	r3, [pc, #508]	; (80033b8 <HAL_UART_MspInit+0x298>)
 80031ba:	2200      	movs	r2, #0
 80031bc:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80031be:	4b7e      	ldr	r3, [pc, #504]	; (80033b8 <HAL_UART_MspInit+0x298>)
 80031c0:	2200      	movs	r2, #0
 80031c2:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_NORMAL;
 80031c4:	4b7c      	ldr	r3, [pc, #496]	; (80033b8 <HAL_UART_MspInit+0x298>)
 80031c6:	2200      	movs	r2, #0
 80031c8:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80031ca:	4b7b      	ldr	r3, [pc, #492]	; (80033b8 <HAL_UART_MspInit+0x298>)
 80031cc:	2200      	movs	r2, #0
 80031ce:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 80031d0:	4879      	ldr	r0, [pc, #484]	; (80033b8 <HAL_UART_MspInit+0x298>)
 80031d2:	f000 fb4d 	bl	8003870 <HAL_DMA_Init>
 80031d6:	4603      	mov	r3, r0
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d001      	beq.n	80031e0 <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 80031dc:	f7ff fb40 	bl	8002860 <Error_Handler>
    }

    if (HAL_DMA_ConfigChannelAttributes(&hdma_lpuart1_rx, DMA_CHANNEL_NPRIV) != HAL_OK)
 80031e0:	2110      	movs	r1, #16
 80031e2:	4875      	ldr	r0, [pc, #468]	; (80033b8 <HAL_UART_MspInit+0x298>)
 80031e4:	f000 fdee 	bl	8003dc4 <HAL_DMA_ConfigChannelAttributes>
 80031e8:	4603      	mov	r3, r0
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d001      	beq.n	80031f2 <HAL_UART_MspInit+0xd2>
    {
      Error_Handler();
 80031ee:	f7ff fb37 	bl	8002860 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	4a70      	ldr	r2, [pc, #448]	; (80033b8 <HAL_UART_MspInit+0x298>)
 80031f6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80031fa:	4a6f      	ldr	r2, [pc, #444]	; (80033b8 <HAL_UART_MspInit+0x298>)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel2;
 8003200:	4b6f      	ldr	r3, [pc, #444]	; (80033c0 <HAL_UART_MspInit+0x2a0>)
 8003202:	4a70      	ldr	r2, [pc, #448]	; (80033c4 <HAL_UART_MspInit+0x2a4>)
 8003204:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 8003206:	4b6e      	ldr	r3, [pc, #440]	; (80033c0 <HAL_UART_MspInit+0x2a0>)
 8003208:	2216      	movs	r2, #22
 800320a:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800320c:	4b6c      	ldr	r3, [pc, #432]	; (80033c0 <HAL_UART_MspInit+0x2a0>)
 800320e:	2210      	movs	r2, #16
 8003210:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003212:	4b6b      	ldr	r3, [pc, #428]	; (80033c0 <HAL_UART_MspInit+0x2a0>)
 8003214:	2200      	movs	r2, #0
 8003216:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003218:	4b69      	ldr	r3, [pc, #420]	; (80033c0 <HAL_UART_MspInit+0x2a0>)
 800321a:	2280      	movs	r2, #128	; 0x80
 800321c:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800321e:	4b68      	ldr	r3, [pc, #416]	; (80033c0 <HAL_UART_MspInit+0x2a0>)
 8003220:	2200      	movs	r2, #0
 8003222:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003224:	4b66      	ldr	r3, [pc, #408]	; (80033c0 <HAL_UART_MspInit+0x2a0>)
 8003226:	2200      	movs	r2, #0
 8003228:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 800322a:	4b65      	ldr	r3, [pc, #404]	; (80033c0 <HAL_UART_MspInit+0x2a0>)
 800322c:	2200      	movs	r2, #0
 800322e:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003230:	4b63      	ldr	r3, [pc, #396]	; (80033c0 <HAL_UART_MspInit+0x2a0>)
 8003232:	2200      	movs	r2, #0
 8003234:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8003236:	4862      	ldr	r0, [pc, #392]	; (80033c0 <HAL_UART_MspInit+0x2a0>)
 8003238:	f000 fb1a 	bl	8003870 <HAL_DMA_Init>
 800323c:	4603      	mov	r3, r0
 800323e:	2b00      	cmp	r3, #0
 8003240:	d001      	beq.n	8003246 <HAL_UART_MspInit+0x126>
    {
      Error_Handler();
 8003242:	f7ff fb0d 	bl	8002860 <Error_Handler>
    }

    if (HAL_DMA_ConfigChannelAttributes(&hdma_lpuart1_tx, DMA_CHANNEL_NPRIV) != HAL_OK)
 8003246:	2110      	movs	r1, #16
 8003248:	485d      	ldr	r0, [pc, #372]	; (80033c0 <HAL_UART_MspInit+0x2a0>)
 800324a:	f000 fdbb 	bl	8003dc4 <HAL_DMA_ConfigChannelAttributes>
 800324e:	4603      	mov	r3, r0
 8003250:	2b00      	cmp	r3, #0
 8003252:	d001      	beq.n	8003258 <HAL_UART_MspInit+0x138>
    {
      Error_Handler();
 8003254:	f7ff fb04 	bl	8002860 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	4a59      	ldr	r2, [pc, #356]	; (80033c0 <HAL_UART_MspInit+0x2a0>)
 800325c:	67da      	str	r2, [r3, #124]	; 0x7c
 800325e:	4a58      	ldr	r2, [pc, #352]	; (80033c0 <HAL_UART_MspInit+0x2a0>)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8003264:	2200      	movs	r2, #0
 8003266:	2100      	movs	r1, #0
 8003268:	2026      	movs	r0, #38	; 0x26
 800326a:	f000 facc 	bl	8003806 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 800326e:	2026      	movs	r0, #38	; 0x26
 8003270:	f000 fae3 	bl	800383a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003274:	e14c      	b.n	8003510 <HAL_UART_MspInit+0x3f0>
  else if(uartHandle->Instance==USART1)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a53      	ldr	r2, [pc, #332]	; (80033c8 <HAL_UART_MspInit+0x2a8>)
 800327c:	4293      	cmp	r3, r2
 800327e:	f040 80ad 	bne.w	80033dc <HAL_UART_MspInit+0x2bc>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003282:	2301      	movs	r3, #1
 8003284:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003286:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 800328a:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800328c:	f107 030c 	add.w	r3, r7, #12
 8003290:	4618      	mov	r0, r3
 8003292:	f002 f9fb 	bl	800568c <HAL_RCCEx_PeriphCLKConfig>
 8003296:	4603      	mov	r3, r0
 8003298:	2b00      	cmp	r3, #0
 800329a:	d001      	beq.n	80032a0 <HAL_UART_MspInit+0x180>
      Error_Handler();
 800329c:	f7ff fae0 	bl	8002860 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 80032a0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80032a4:	f7ff fe40 	bl	8002f28 <LL_APB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032a8:	2001      	movs	r0, #1
 80032aa:	f7ff fdf5 	bl	8002e98 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 80032ae:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80032b2:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032b4:	2302      	movs	r3, #2
 80032b6:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032b8:	2300      	movs	r3, #0
 80032ba:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032bc:	2300      	movs	r3, #0
 80032be:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80032c0:	2307      	movs	r3, #7
 80032c2:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032c4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80032c8:	4619      	mov	r1, r3
 80032ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80032ce:	f000 fe51 	bl	8003f74 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel3;
 80032d2:	4b3e      	ldr	r3, [pc, #248]	; (80033cc <HAL_UART_MspInit+0x2ac>)
 80032d4:	4a3e      	ldr	r2, [pc, #248]	; (80033d0 <HAL_UART_MspInit+0x2b0>)
 80032d6:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 80032d8:	4b3c      	ldr	r3, [pc, #240]	; (80033cc <HAL_UART_MspInit+0x2ac>)
 80032da:	2211      	movs	r2, #17
 80032dc:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80032de:	4b3b      	ldr	r3, [pc, #236]	; (80033cc <HAL_UART_MspInit+0x2ac>)
 80032e0:	2200      	movs	r2, #0
 80032e2:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80032e4:	4b39      	ldr	r3, [pc, #228]	; (80033cc <HAL_UART_MspInit+0x2ac>)
 80032e6:	2200      	movs	r2, #0
 80032e8:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80032ea:	4b38      	ldr	r3, [pc, #224]	; (80033cc <HAL_UART_MspInit+0x2ac>)
 80032ec:	2280      	movs	r2, #128	; 0x80
 80032ee:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80032f0:	4b36      	ldr	r3, [pc, #216]	; (80033cc <HAL_UART_MspInit+0x2ac>)
 80032f2:	2200      	movs	r2, #0
 80032f4:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80032f6:	4b35      	ldr	r3, [pc, #212]	; (80033cc <HAL_UART_MspInit+0x2ac>)
 80032f8:	2200      	movs	r2, #0
 80032fa:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80032fc:	4b33      	ldr	r3, [pc, #204]	; (80033cc <HAL_UART_MspInit+0x2ac>)
 80032fe:	2200      	movs	r2, #0
 8003300:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003302:	4b32      	ldr	r3, [pc, #200]	; (80033cc <HAL_UART_MspInit+0x2ac>)
 8003304:	2200      	movs	r2, #0
 8003306:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003308:	4830      	ldr	r0, [pc, #192]	; (80033cc <HAL_UART_MspInit+0x2ac>)
 800330a:	f000 fab1 	bl	8003870 <HAL_DMA_Init>
 800330e:	4603      	mov	r3, r0
 8003310:	2b00      	cmp	r3, #0
 8003312:	d001      	beq.n	8003318 <HAL_UART_MspInit+0x1f8>
      Error_Handler();
 8003314:	f7ff faa4 	bl	8002860 <Error_Handler>
    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart1_rx, DMA_CHANNEL_NPRIV) != HAL_OK)
 8003318:	2110      	movs	r1, #16
 800331a:	482c      	ldr	r0, [pc, #176]	; (80033cc <HAL_UART_MspInit+0x2ac>)
 800331c:	f000 fd52 	bl	8003dc4 <HAL_DMA_ConfigChannelAttributes>
 8003320:	4603      	mov	r3, r0
 8003322:	2b00      	cmp	r3, #0
 8003324:	d001      	beq.n	800332a <HAL_UART_MspInit+0x20a>
      Error_Handler();
 8003326:	f7ff fa9b 	bl	8002860 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	4a27      	ldr	r2, [pc, #156]	; (80033cc <HAL_UART_MspInit+0x2ac>)
 800332e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8003332:	4a26      	ldr	r2, [pc, #152]	; (80033cc <HAL_UART_MspInit+0x2ac>)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6293      	str	r3, [r2, #40]	; 0x28
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8003338:	4b26      	ldr	r3, [pc, #152]	; (80033d4 <HAL_UART_MspInit+0x2b4>)
 800333a:	4a27      	ldr	r2, [pc, #156]	; (80033d8 <HAL_UART_MspInit+0x2b8>)
 800333c:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 800333e:	4b25      	ldr	r3, [pc, #148]	; (80033d4 <HAL_UART_MspInit+0x2b4>)
 8003340:	2212      	movs	r2, #18
 8003342:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003344:	4b23      	ldr	r3, [pc, #140]	; (80033d4 <HAL_UART_MspInit+0x2b4>)
 8003346:	2210      	movs	r2, #16
 8003348:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800334a:	4b22      	ldr	r3, [pc, #136]	; (80033d4 <HAL_UART_MspInit+0x2b4>)
 800334c:	2200      	movs	r2, #0
 800334e:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003350:	4b20      	ldr	r3, [pc, #128]	; (80033d4 <HAL_UART_MspInit+0x2b4>)
 8003352:	2280      	movs	r2, #128	; 0x80
 8003354:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003356:	4b1f      	ldr	r3, [pc, #124]	; (80033d4 <HAL_UART_MspInit+0x2b4>)
 8003358:	2200      	movs	r2, #0
 800335a:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800335c:	4b1d      	ldr	r3, [pc, #116]	; (80033d4 <HAL_UART_MspInit+0x2b4>)
 800335e:	2200      	movs	r2, #0
 8003360:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8003362:	4b1c      	ldr	r3, [pc, #112]	; (80033d4 <HAL_UART_MspInit+0x2b4>)
 8003364:	2200      	movs	r2, #0
 8003366:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003368:	4b1a      	ldr	r3, [pc, #104]	; (80033d4 <HAL_UART_MspInit+0x2b4>)
 800336a:	2200      	movs	r2, #0
 800336c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800336e:	4819      	ldr	r0, [pc, #100]	; (80033d4 <HAL_UART_MspInit+0x2b4>)
 8003370:	f000 fa7e 	bl	8003870 <HAL_DMA_Init>
 8003374:	4603      	mov	r3, r0
 8003376:	2b00      	cmp	r3, #0
 8003378:	d001      	beq.n	800337e <HAL_UART_MspInit+0x25e>
      Error_Handler();
 800337a:	f7ff fa71 	bl	8002860 <Error_Handler>
    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart1_tx, DMA_CHANNEL_NPRIV) != HAL_OK)
 800337e:	2110      	movs	r1, #16
 8003380:	4814      	ldr	r0, [pc, #80]	; (80033d4 <HAL_UART_MspInit+0x2b4>)
 8003382:	f000 fd1f 	bl	8003dc4 <HAL_DMA_ConfigChannelAttributes>
 8003386:	4603      	mov	r3, r0
 8003388:	2b00      	cmp	r3, #0
 800338a:	d001      	beq.n	8003390 <HAL_UART_MspInit+0x270>
      Error_Handler();
 800338c:	f7ff fa68 	bl	8002860 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	4a10      	ldr	r2, [pc, #64]	; (80033d4 <HAL_UART_MspInit+0x2b4>)
 8003394:	67da      	str	r2, [r3, #124]	; 0x7c
 8003396:	4a0f      	ldr	r2, [pc, #60]	; (80033d4 <HAL_UART_MspInit+0x2b4>)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800339c:	2200      	movs	r2, #0
 800339e:	2100      	movs	r1, #0
 80033a0:	2024      	movs	r0, #36	; 0x24
 80033a2:	f000 fa30 	bl	8003806 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80033a6:	2024      	movs	r0, #36	; 0x24
 80033a8:	f000 fa47 	bl	800383a <HAL_NVIC_EnableIRQ>
}
 80033ac:	e0b0      	b.n	8003510 <HAL_UART_MspInit+0x3f0>
 80033ae:	bf00      	nop
 80033b0:	40008000 	.word	0x40008000
 80033b4:	48000800 	.word	0x48000800
 80033b8:	2000071c 	.word	0x2000071c
 80033bc:	40020008 	.word	0x40020008
 80033c0:	2000077c 	.word	0x2000077c
 80033c4:	4002001c 	.word	0x4002001c
 80033c8:	40013800 	.word	0x40013800
 80033cc:	200007dc 	.word	0x200007dc
 80033d0:	40020030 	.word	0x40020030
 80033d4:	2000083c 	.word	0x2000083c
 80033d8:	40020044 	.word	0x40020044
  else if(uartHandle->Instance==USART2)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a4d      	ldr	r2, [pc, #308]	; (8003518 <HAL_UART_MspInit+0x3f8>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	f040 8094 	bne.w	8003510 <HAL_UART_MspInit+0x3f0>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80033e8:	2302      	movs	r3, #2
 80033ea:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80033ec:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 80033f0:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80033f2:	f107 030c 	add.w	r3, r7, #12
 80033f6:	4618      	mov	r0, r3
 80033f8:	f002 f948 	bl	800568c <HAL_RCCEx_PeriphCLKConfig>
 80033fc:	4603      	mov	r3, r0
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d001      	beq.n	8003406 <HAL_UART_MspInit+0x2e6>
      Error_Handler();
 8003402:	f7ff fa2d 	bl	8002860 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003406:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800340a:	f7ff fd5d 	bl	8002ec8 <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800340e:	2001      	movs	r0, #1
 8003410:	f7ff fd42 	bl	8002e98 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = T_VCP_RX_Pin|T_VCP_RXA2_Pin;
 8003414:	230c      	movs	r3, #12
 8003416:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003418:	2302      	movs	r3, #2
 800341a:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800341c:	2300      	movs	r3, #0
 800341e:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003420:	2300      	movs	r3, #0
 8003422:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003424:	2307      	movs	r3, #7
 8003426:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003428:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800342c:	4619      	mov	r1, r3
 800342e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003432:	f000 fd9f 	bl	8003f74 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel5;
 8003436:	4b39      	ldr	r3, [pc, #228]	; (800351c <HAL_UART_MspInit+0x3fc>)
 8003438:	4a39      	ldr	r2, [pc, #228]	; (8003520 <HAL_UART_MspInit+0x400>)
 800343a:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 800343c:	4b37      	ldr	r3, [pc, #220]	; (800351c <HAL_UART_MspInit+0x3fc>)
 800343e:	2213      	movs	r2, #19
 8003440:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003442:	4b36      	ldr	r3, [pc, #216]	; (800351c <HAL_UART_MspInit+0x3fc>)
 8003444:	2200      	movs	r2, #0
 8003446:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003448:	4b34      	ldr	r3, [pc, #208]	; (800351c <HAL_UART_MspInit+0x3fc>)
 800344a:	2200      	movs	r2, #0
 800344c:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800344e:	4b33      	ldr	r3, [pc, #204]	; (800351c <HAL_UART_MspInit+0x3fc>)
 8003450:	2280      	movs	r2, #128	; 0x80
 8003452:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003454:	4b31      	ldr	r3, [pc, #196]	; (800351c <HAL_UART_MspInit+0x3fc>)
 8003456:	2200      	movs	r2, #0
 8003458:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800345a:	4b30      	ldr	r3, [pc, #192]	; (800351c <HAL_UART_MspInit+0x3fc>)
 800345c:	2200      	movs	r2, #0
 800345e:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8003460:	4b2e      	ldr	r3, [pc, #184]	; (800351c <HAL_UART_MspInit+0x3fc>)
 8003462:	2200      	movs	r2, #0
 8003464:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003466:	4b2d      	ldr	r3, [pc, #180]	; (800351c <HAL_UART_MspInit+0x3fc>)
 8003468:	2200      	movs	r2, #0
 800346a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800346c:	482b      	ldr	r0, [pc, #172]	; (800351c <HAL_UART_MspInit+0x3fc>)
 800346e:	f000 f9ff 	bl	8003870 <HAL_DMA_Init>
 8003472:	4603      	mov	r3, r0
 8003474:	2b00      	cmp	r3, #0
 8003476:	d001      	beq.n	800347c <HAL_UART_MspInit+0x35c>
      Error_Handler();
 8003478:	f7ff f9f2 	bl	8002860 <Error_Handler>
    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart2_rx, DMA_CHANNEL_NPRIV) != HAL_OK)
 800347c:	2110      	movs	r1, #16
 800347e:	4827      	ldr	r0, [pc, #156]	; (800351c <HAL_UART_MspInit+0x3fc>)
 8003480:	f000 fca0 	bl	8003dc4 <HAL_DMA_ConfigChannelAttributes>
 8003484:	4603      	mov	r3, r0
 8003486:	2b00      	cmp	r3, #0
 8003488:	d001      	beq.n	800348e <HAL_UART_MspInit+0x36e>
      Error_Handler();
 800348a:	f7ff f9e9 	bl	8002860 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	4a22      	ldr	r2, [pc, #136]	; (800351c <HAL_UART_MspInit+0x3fc>)
 8003492:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8003496:	4a21      	ldr	r2, [pc, #132]	; (800351c <HAL_UART_MspInit+0x3fc>)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6293      	str	r3, [r2, #40]	; 0x28
    hdma_usart2_tx.Instance = DMA1_Channel6;
 800349c:	4b21      	ldr	r3, [pc, #132]	; (8003524 <HAL_UART_MspInit+0x404>)
 800349e:	4a22      	ldr	r2, [pc, #136]	; (8003528 <HAL_UART_MspInit+0x408>)
 80034a0:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 80034a2:	4b20      	ldr	r3, [pc, #128]	; (8003524 <HAL_UART_MspInit+0x404>)
 80034a4:	2214      	movs	r2, #20
 80034a6:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80034a8:	4b1e      	ldr	r3, [pc, #120]	; (8003524 <HAL_UART_MspInit+0x404>)
 80034aa:	2210      	movs	r2, #16
 80034ac:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80034ae:	4b1d      	ldr	r3, [pc, #116]	; (8003524 <HAL_UART_MspInit+0x404>)
 80034b0:	2200      	movs	r2, #0
 80034b2:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80034b4:	4b1b      	ldr	r3, [pc, #108]	; (8003524 <HAL_UART_MspInit+0x404>)
 80034b6:	2280      	movs	r2, #128	; 0x80
 80034b8:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80034ba:	4b1a      	ldr	r3, [pc, #104]	; (8003524 <HAL_UART_MspInit+0x404>)
 80034bc:	2200      	movs	r2, #0
 80034be:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80034c0:	4b18      	ldr	r3, [pc, #96]	; (8003524 <HAL_UART_MspInit+0x404>)
 80034c2:	2200      	movs	r2, #0
 80034c4:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80034c6:	4b17      	ldr	r3, [pc, #92]	; (8003524 <HAL_UART_MspInit+0x404>)
 80034c8:	2200      	movs	r2, #0
 80034ca:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80034cc:	4b15      	ldr	r3, [pc, #84]	; (8003524 <HAL_UART_MspInit+0x404>)
 80034ce:	2200      	movs	r2, #0
 80034d0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80034d2:	4814      	ldr	r0, [pc, #80]	; (8003524 <HAL_UART_MspInit+0x404>)
 80034d4:	f000 f9cc 	bl	8003870 <HAL_DMA_Init>
 80034d8:	4603      	mov	r3, r0
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d001      	beq.n	80034e2 <HAL_UART_MspInit+0x3c2>
      Error_Handler();
 80034de:	f7ff f9bf 	bl	8002860 <Error_Handler>
    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart2_tx, DMA_CHANNEL_NPRIV) != HAL_OK)
 80034e2:	2110      	movs	r1, #16
 80034e4:	480f      	ldr	r0, [pc, #60]	; (8003524 <HAL_UART_MspInit+0x404>)
 80034e6:	f000 fc6d 	bl	8003dc4 <HAL_DMA_ConfigChannelAttributes>
 80034ea:	4603      	mov	r3, r0
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d001      	beq.n	80034f4 <HAL_UART_MspInit+0x3d4>
      Error_Handler();
 80034f0:	f7ff f9b6 	bl	8002860 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	4a0b      	ldr	r2, [pc, #44]	; (8003524 <HAL_UART_MspInit+0x404>)
 80034f8:	67da      	str	r2, [r3, #124]	; 0x7c
 80034fa:	4a0a      	ldr	r2, [pc, #40]	; (8003524 <HAL_UART_MspInit+0x404>)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003500:	2200      	movs	r2, #0
 8003502:	2100      	movs	r1, #0
 8003504:	2025      	movs	r0, #37	; 0x25
 8003506:	f000 f97e 	bl	8003806 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800350a:	2025      	movs	r0, #37	; 0x25
 800350c:	f000 f995 	bl	800383a <HAL_NVIC_EnableIRQ>
}
 8003510:	bf00      	nop
 8003512:	3758      	adds	r7, #88	; 0x58
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}
 8003518:	40004400 	.word	0x40004400
 800351c:	2000089c 	.word	0x2000089c
 8003520:	40020058 	.word	0x40020058
 8003524:	200008fc 	.word	0x200008fc
 8003528:	4002006c 	.word	0x4002006c

0800352c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800352c:	480d      	ldr	r0, [pc, #52]	; (8003564 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800352e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003530:	f7ff fbbe 	bl	8002cb0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003534:	480c      	ldr	r0, [pc, #48]	; (8003568 <LoopForever+0x6>)
  ldr r1, =_edata
 8003536:	490d      	ldr	r1, [pc, #52]	; (800356c <LoopForever+0xa>)
  ldr r2, =_sidata
 8003538:	4a0d      	ldr	r2, [pc, #52]	; (8003570 <LoopForever+0xe>)
  movs r3, #0
 800353a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800353c:	e002      	b.n	8003544 <LoopCopyDataInit>

0800353e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800353e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003540:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003542:	3304      	adds	r3, #4

08003544 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003544:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003546:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003548:	d3f9      	bcc.n	800353e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800354a:	4a0a      	ldr	r2, [pc, #40]	; (8003574 <LoopForever+0x12>)
  ldr r4, =_ebss
 800354c:	4c0a      	ldr	r4, [pc, #40]	; (8003578 <LoopForever+0x16>)
  movs r3, #0
 800354e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003550:	e001      	b.n	8003556 <LoopFillZerobss>

08003552 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003552:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003554:	3204      	adds	r2, #4

08003556 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003556:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003558:	d3fb      	bcc.n	8003552 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800355a:	f008 fbe3 	bl	800bd24 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800355e:	f7fd ff57 	bl	8001410 <main>

08003562 <LoopForever>:

LoopForever:
    b LoopForever
 8003562:	e7fe      	b.n	8003562 <LoopForever>
  ldr   r0, =_estack
 8003564:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8003568:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800356c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8003570:	0800d1cc 	.word	0x0800d1cc
  ldr r2, =_sbss
 8003574:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8003578:	20000c68 	.word	0x20000c68

0800357c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800357c:	e7fe      	b.n	800357c <ADC_IRQHandler>
	...

08003580 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b082      	sub	sp, #8
 8003584:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003586:	2300      	movs	r3, #0
 8003588:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800358a:	2003      	movs	r0, #3
 800358c:	f000 f930 	bl	80037f0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003590:	f001 fe9e 	bl	80052d0 <HAL_RCC_GetHCLKFreq>
 8003594:	4603      	mov	r3, r0
 8003596:	4a09      	ldr	r2, [pc, #36]	; (80035bc <HAL_Init+0x3c>)
 8003598:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800359a:	2000      	movs	r0, #0
 800359c:	f000 f810 	bl	80035c0 <HAL_InitTick>
 80035a0:	4603      	mov	r3, r0
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d002      	beq.n	80035ac <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	71fb      	strb	r3, [r7, #7]
 80035aa:	e001      	b.n	80035b0 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80035ac:	f7ff fa54 	bl	8002a58 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80035b0:	79fb      	ldrb	r3, [r7, #7]
}
 80035b2:	4618      	mov	r0, r3
 80035b4:	3708      	adds	r7, #8
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}
 80035ba:	bf00      	nop
 80035bc:	2000000c 	.word	0x2000000c

080035c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b084      	sub	sp, #16
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80035c8:	2300      	movs	r3, #0
 80035ca:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80035cc:	4b17      	ldr	r3, [pc, #92]	; (800362c <HAL_InitTick+0x6c>)
 80035ce:	781b      	ldrb	r3, [r3, #0]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d024      	beq.n	800361e <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80035d4:	f001 fe7c 	bl	80052d0 <HAL_RCC_GetHCLKFreq>
 80035d8:	4602      	mov	r2, r0
 80035da:	4b14      	ldr	r3, [pc, #80]	; (800362c <HAL_InitTick+0x6c>)
 80035dc:	781b      	ldrb	r3, [r3, #0]
 80035de:	4619      	mov	r1, r3
 80035e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80035e4:	fbb3 f3f1 	udiv	r3, r3, r1
 80035e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80035ec:	4618      	mov	r0, r3
 80035ee:	f000 f932 	bl	8003856 <HAL_SYSTICK_Config>
 80035f2:	4603      	mov	r3, r0
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d10f      	bne.n	8003618 <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2b0f      	cmp	r3, #15
 80035fc:	d809      	bhi.n	8003612 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80035fe:	2200      	movs	r2, #0
 8003600:	6879      	ldr	r1, [r7, #4]
 8003602:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003606:	f000 f8fe 	bl	8003806 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800360a:	4a09      	ldr	r2, [pc, #36]	; (8003630 <HAL_InitTick+0x70>)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6013      	str	r3, [r2, #0]
 8003610:	e007      	b.n	8003622 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	73fb      	strb	r3, [r7, #15]
 8003616:	e004      	b.n	8003622 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003618:	2301      	movs	r3, #1
 800361a:	73fb      	strb	r3, [r7, #15]
 800361c:	e001      	b.n	8003622 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003622:	7bfb      	ldrb	r3, [r7, #15]
}
 8003624:	4618      	mov	r0, r3
 8003626:	3710      	adds	r7, #16
 8003628:	46bd      	mov	sp, r7
 800362a:	bd80      	pop	{r7, pc}
 800362c:	20000014 	.word	0x20000014
 8003630:	20000010 	.word	0x20000010

08003634 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003634:	b480      	push	{r7}
 8003636:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003638:	4b05      	ldr	r3, [pc, #20]	; (8003650 <HAL_IncTick+0x1c>)
 800363a:	781b      	ldrb	r3, [r3, #0]
 800363c:	461a      	mov	r2, r3
 800363e:	4b05      	ldr	r3, [pc, #20]	; (8003654 <HAL_IncTick+0x20>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4413      	add	r3, r2
 8003644:	4a03      	ldr	r2, [pc, #12]	; (8003654 <HAL_IncTick+0x20>)
 8003646:	6013      	str	r3, [r2, #0]
}
 8003648:	bf00      	nop
 800364a:	46bd      	mov	sp, r7
 800364c:	bc80      	pop	{r7}
 800364e:	4770      	bx	lr
 8003650:	20000014 	.word	0x20000014
 8003654:	2000095c 	.word	0x2000095c

08003658 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003658:	b480      	push	{r7}
 800365a:	b085      	sub	sp, #20
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	f003 0307 	and.w	r3, r3, #7
 8003666:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003668:	4b0c      	ldr	r3, [pc, #48]	; (800369c <__NVIC_SetPriorityGrouping+0x44>)
 800366a:	68db      	ldr	r3, [r3, #12]
 800366c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800366e:	68ba      	ldr	r2, [r7, #8]
 8003670:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003674:	4013      	ands	r3, r2
 8003676:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003680:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003684:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003688:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800368a:	4a04      	ldr	r2, [pc, #16]	; (800369c <__NVIC_SetPriorityGrouping+0x44>)
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	60d3      	str	r3, [r2, #12]
}
 8003690:	bf00      	nop
 8003692:	3714      	adds	r7, #20
 8003694:	46bd      	mov	sp, r7
 8003696:	bc80      	pop	{r7}
 8003698:	4770      	bx	lr
 800369a:	bf00      	nop
 800369c:	e000ed00 	.word	0xe000ed00

080036a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80036a0:	b480      	push	{r7}
 80036a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80036a4:	4b04      	ldr	r3, [pc, #16]	; (80036b8 <__NVIC_GetPriorityGrouping+0x18>)
 80036a6:	68db      	ldr	r3, [r3, #12]
 80036a8:	0a1b      	lsrs	r3, r3, #8
 80036aa:	f003 0307 	and.w	r3, r3, #7
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bc80      	pop	{r7}
 80036b4:	4770      	bx	lr
 80036b6:	bf00      	nop
 80036b8:	e000ed00 	.word	0xe000ed00

080036bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036bc:	b480      	push	{r7}
 80036be:	b083      	sub	sp, #12
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	4603      	mov	r3, r0
 80036c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	db0b      	blt.n	80036e6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80036ce:	79fb      	ldrb	r3, [r7, #7]
 80036d0:	f003 021f 	and.w	r2, r3, #31
 80036d4:	4906      	ldr	r1, [pc, #24]	; (80036f0 <__NVIC_EnableIRQ+0x34>)
 80036d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036da:	095b      	lsrs	r3, r3, #5
 80036dc:	2001      	movs	r0, #1
 80036de:	fa00 f202 	lsl.w	r2, r0, r2
 80036e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80036e6:	bf00      	nop
 80036e8:	370c      	adds	r7, #12
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bc80      	pop	{r7}
 80036ee:	4770      	bx	lr
 80036f0:	e000e100 	.word	0xe000e100

080036f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80036f4:	b480      	push	{r7}
 80036f6:	b083      	sub	sp, #12
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	4603      	mov	r3, r0
 80036fc:	6039      	str	r1, [r7, #0]
 80036fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003700:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003704:	2b00      	cmp	r3, #0
 8003706:	db0a      	blt.n	800371e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	b2da      	uxtb	r2, r3
 800370c:	490c      	ldr	r1, [pc, #48]	; (8003740 <__NVIC_SetPriority+0x4c>)
 800370e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003712:	0112      	lsls	r2, r2, #4
 8003714:	b2d2      	uxtb	r2, r2
 8003716:	440b      	add	r3, r1
 8003718:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800371c:	e00a      	b.n	8003734 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	b2da      	uxtb	r2, r3
 8003722:	4908      	ldr	r1, [pc, #32]	; (8003744 <__NVIC_SetPriority+0x50>)
 8003724:	79fb      	ldrb	r3, [r7, #7]
 8003726:	f003 030f 	and.w	r3, r3, #15
 800372a:	3b04      	subs	r3, #4
 800372c:	0112      	lsls	r2, r2, #4
 800372e:	b2d2      	uxtb	r2, r2
 8003730:	440b      	add	r3, r1
 8003732:	761a      	strb	r2, [r3, #24]
}
 8003734:	bf00      	nop
 8003736:	370c      	adds	r7, #12
 8003738:	46bd      	mov	sp, r7
 800373a:	bc80      	pop	{r7}
 800373c:	4770      	bx	lr
 800373e:	bf00      	nop
 8003740:	e000e100 	.word	0xe000e100
 8003744:	e000ed00 	.word	0xe000ed00

08003748 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003748:	b480      	push	{r7}
 800374a:	b089      	sub	sp, #36	; 0x24
 800374c:	af00      	add	r7, sp, #0
 800374e:	60f8      	str	r0, [r7, #12]
 8003750:	60b9      	str	r1, [r7, #8]
 8003752:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	f003 0307 	and.w	r3, r3, #7
 800375a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800375c:	69fb      	ldr	r3, [r7, #28]
 800375e:	f1c3 0307 	rsb	r3, r3, #7
 8003762:	2b04      	cmp	r3, #4
 8003764:	bf28      	it	cs
 8003766:	2304      	movcs	r3, #4
 8003768:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800376a:	69fb      	ldr	r3, [r7, #28]
 800376c:	3304      	adds	r3, #4
 800376e:	2b06      	cmp	r3, #6
 8003770:	d902      	bls.n	8003778 <NVIC_EncodePriority+0x30>
 8003772:	69fb      	ldr	r3, [r7, #28]
 8003774:	3b03      	subs	r3, #3
 8003776:	e000      	b.n	800377a <NVIC_EncodePriority+0x32>
 8003778:	2300      	movs	r3, #0
 800377a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800377c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003780:	69bb      	ldr	r3, [r7, #24]
 8003782:	fa02 f303 	lsl.w	r3, r2, r3
 8003786:	43da      	mvns	r2, r3
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	401a      	ands	r2, r3
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003790:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	fa01 f303 	lsl.w	r3, r1, r3
 800379a:	43d9      	mvns	r1, r3
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037a0:	4313      	orrs	r3, r2
         );
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	3724      	adds	r7, #36	; 0x24
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bc80      	pop	{r7}
 80037aa:	4770      	bx	lr

080037ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b082      	sub	sp, #8
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	3b01      	subs	r3, #1
 80037b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80037bc:	d301      	bcc.n	80037c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80037be:	2301      	movs	r3, #1
 80037c0:	e00f      	b.n	80037e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80037c2:	4a0a      	ldr	r2, [pc, #40]	; (80037ec <SysTick_Config+0x40>)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	3b01      	subs	r3, #1
 80037c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80037ca:	210f      	movs	r1, #15
 80037cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80037d0:	f7ff ff90 	bl	80036f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80037d4:	4b05      	ldr	r3, [pc, #20]	; (80037ec <SysTick_Config+0x40>)
 80037d6:	2200      	movs	r2, #0
 80037d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80037da:	4b04      	ldr	r3, [pc, #16]	; (80037ec <SysTick_Config+0x40>)
 80037dc:	2207      	movs	r2, #7
 80037de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80037e0:	2300      	movs	r3, #0
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	3708      	adds	r7, #8
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}
 80037ea:	bf00      	nop
 80037ec:	e000e010 	.word	0xe000e010

080037f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b082      	sub	sp, #8
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80037f8:	6878      	ldr	r0, [r7, #4]
 80037fa:	f7ff ff2d 	bl	8003658 <__NVIC_SetPriorityGrouping>
}
 80037fe:	bf00      	nop
 8003800:	3708      	adds	r7, #8
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}

08003806 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003806:	b580      	push	{r7, lr}
 8003808:	b086      	sub	sp, #24
 800380a:	af00      	add	r7, sp, #0
 800380c:	4603      	mov	r3, r0
 800380e:	60b9      	str	r1, [r7, #8]
 8003810:	607a      	str	r2, [r7, #4]
 8003812:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003814:	f7ff ff44 	bl	80036a0 <__NVIC_GetPriorityGrouping>
 8003818:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800381a:	687a      	ldr	r2, [r7, #4]
 800381c:	68b9      	ldr	r1, [r7, #8]
 800381e:	6978      	ldr	r0, [r7, #20]
 8003820:	f7ff ff92 	bl	8003748 <NVIC_EncodePriority>
 8003824:	4602      	mov	r2, r0
 8003826:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800382a:	4611      	mov	r1, r2
 800382c:	4618      	mov	r0, r3
 800382e:	f7ff ff61 	bl	80036f4 <__NVIC_SetPriority>
}
 8003832:	bf00      	nop
 8003834:	3718      	adds	r7, #24
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}

0800383a <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800383a:	b580      	push	{r7, lr}
 800383c:	b082      	sub	sp, #8
 800383e:	af00      	add	r7, sp, #0
 8003840:	4603      	mov	r3, r0
 8003842:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003844:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003848:	4618      	mov	r0, r3
 800384a:	f7ff ff37 	bl	80036bc <__NVIC_EnableIRQ>
}
 800384e:	bf00      	nop
 8003850:	3708      	adds	r7, #8
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}

08003856 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003856:	b580      	push	{r7, lr}
 8003858:	b082      	sub	sp, #8
 800385a:	af00      	add	r7, sp, #0
 800385c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	f7ff ffa4 	bl	80037ac <SysTick_Config>
 8003864:	4603      	mov	r3, r0
}
 8003866:	4618      	mov	r0, r3
 8003868:	3708      	adds	r7, #8
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}
	...

08003870 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b082      	sub	sp, #8
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d101      	bne.n	8003882 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	e08e      	b.n	80039a0 <HAL_DMA_Init+0x130>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	461a      	mov	r2, r3
 8003888:	4b47      	ldr	r3, [pc, #284]	; (80039a8 <HAL_DMA_Init+0x138>)
 800388a:	429a      	cmp	r2, r3
 800388c:	d80f      	bhi.n	80038ae <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	461a      	mov	r2, r3
 8003894:	4b45      	ldr	r3, [pc, #276]	; (80039ac <HAL_DMA_Init+0x13c>)
 8003896:	4413      	add	r3, r2
 8003898:	4a45      	ldr	r2, [pc, #276]	; (80039b0 <HAL_DMA_Init+0x140>)
 800389a:	fba2 2303 	umull	r2, r3, r2, r3
 800389e:	091b      	lsrs	r3, r3, #4
 80038a0:	009a      	lsls	r2, r3, #2
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	4a42      	ldr	r2, [pc, #264]	; (80039b4 <HAL_DMA_Init+0x144>)
 80038aa:	641a      	str	r2, [r3, #64]	; 0x40
 80038ac:	e00e      	b.n	80038cc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	461a      	mov	r2, r3
 80038b4:	4b40      	ldr	r3, [pc, #256]	; (80039b8 <HAL_DMA_Init+0x148>)
 80038b6:	4413      	add	r3, r2
 80038b8:	4a3d      	ldr	r2, [pc, #244]	; (80039b0 <HAL_DMA_Init+0x140>)
 80038ba:	fba2 2303 	umull	r2, r3, r2, r3
 80038be:	091b      	lsrs	r3, r3, #4
 80038c0:	009a      	lsls	r2, r3, #2
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	4a3c      	ldr	r2, [pc, #240]	; (80039bc <HAL_DMA_Init+0x14c>)
 80038ca:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2202      	movs	r2, #2
 80038d0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	687a      	ldr	r2, [r7, #4]
 80038dc:	6812      	ldr	r2, [r2, #0]
 80038de:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80038e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038e6:	6013      	str	r3, [r2, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	6819      	ldr	r1, [r3, #0]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	689a      	ldr	r2, [r3, #8]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	68db      	ldr	r3, [r3, #12]
 80038f6:	431a      	orrs	r2, r3
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	691b      	ldr	r3, [r3, #16]
 80038fc:	431a      	orrs	r2, r3
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	695b      	ldr	r3, [r3, #20]
 8003902:	431a      	orrs	r2, r3
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	699b      	ldr	r3, [r3, #24]
 8003908:	431a      	orrs	r2, r3
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	69db      	ldr	r3, [r3, #28]
 800390e:	431a      	orrs	r2, r3
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6a1b      	ldr	r3, [r3, #32]
 8003914:	431a      	orrs	r2, r3
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	430a      	orrs	r2, r1
 800391c:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800391e:	6878      	ldr	r0, [r7, #4]
 8003920:	f000 fabc 	bl	8003e9c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	689b      	ldr	r3, [r3, #8]
 8003928:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800392c:	d102      	bne.n	8003934 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2200      	movs	r2, #0
 8003932:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	685a      	ldr	r2, [r3, #4]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800393c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003940:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003946:	687a      	ldr	r2, [r7, #4]
 8003948:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800394a:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d010      	beq.n	8003976 <HAL_DMA_Init+0x106>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	2b04      	cmp	r3, #4
 800395a:	d80c      	bhi.n	8003976 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800395c:	6878      	ldr	r0, [r7, #4]
 800395e:	f000 fae5 	bl	8003f2c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003966:	2200      	movs	r2, #0
 8003968:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800396e:	687a      	ldr	r2, [r7, #4]
 8003970:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003972:	605a      	str	r2, [r3, #4]
 8003974:	e008      	b.n	8003988 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = NULL;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2200      	movs	r2, #0
 800397a:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = NULL;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2200      	movs	r2, #0
 8003980:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2200      	movs	r2, #0
 8003986:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2200      	movs	r2, #0
 800398c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2201      	movs	r2, #1
 8003992:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2200      	movs	r2, #0
 800399a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800399e:	2300      	movs	r3, #0
}
 80039a0:	4618      	mov	r0, r3
 80039a2:	3708      	adds	r7, #8
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd80      	pop	{r7, pc}
 80039a8:	40020407 	.word	0x40020407
 80039ac:	bffdfff8 	.word	0xbffdfff8
 80039b0:	cccccccd 	.word	0xcccccccd
 80039b4:	40020000 	.word	0x40020000
 80039b8:	bffdfbf8 	.word	0xbffdfbf8
 80039bc:	40020400 	.word	0x40020400

080039c0 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b086      	sub	sp, #24
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	60f8      	str	r0, [r7, #12]
 80039c8:	60b9      	str	r1, [r7, #8]
 80039ca:	607a      	str	r2, [r7, #4]
 80039cc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80039ce:	2300      	movs	r3, #0
 80039d0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80039d8:	2b01      	cmp	r3, #1
 80039da:	d101      	bne.n	80039e0 <HAL_DMA_Start_IT+0x20>
 80039dc:	2302      	movs	r3, #2
 80039de:	e069      	b.n	8003ab4 <HAL_DMA_Start_IT+0xf4>
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	2201      	movs	r2, #1
 80039e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (hdma->State == HAL_DMA_STATE_READY)
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80039ee:	b2db      	uxtb	r3, r3
 80039f0:	2b01      	cmp	r3, #1
 80039f2:	d155      	bne.n	8003aa0 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	2202      	movs	r2, #2
 80039f8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	2200      	movs	r2, #0
 8003a00:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	681a      	ldr	r2, [r3, #0]
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f022 0201 	bic.w	r2, r2, #1
 8003a10:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	687a      	ldr	r2, [r7, #4]
 8003a16:	68b9      	ldr	r1, [r7, #8]
 8003a18:	68f8      	ldr	r0, [r7, #12]
 8003a1a:	f000 fa02 	bl	8003e22 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d008      	beq.n	8003a38 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	681a      	ldr	r2, [r3, #0]
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f042 020e 	orr.w	r2, r2, #14
 8003a34:	601a      	str	r2, [r3, #0]
 8003a36:	e00f      	b.n	8003a58 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	681a      	ldr	r2, [r3, #0]
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f022 0204 	bic.w	r2, r2, #4
 8003a46:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	681a      	ldr	r2, [r3, #0]
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f042 020a 	orr.w	r2, r2, #10
 8003a56:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d007      	beq.n	8003a76 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a6a:	681a      	ldr	r2, [r3, #0]
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a70:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a74:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != NULL)
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d007      	beq.n	8003a8e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a82:	681a      	ldr	r2, [r3, #0]
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a88:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a8c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	681a      	ldr	r2, [r3, #0]
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f042 0201 	orr.w	r2, r2, #1
 8003a9c:	601a      	str	r2, [r3, #0]
 8003a9e:	e008      	b.n	8003ab2 <HAL_DMA_Start_IT+0xf2>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	2280      	movs	r2, #128	; 0x80
 8003aa4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Return error status */
    status = HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003ab2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	3718      	adds	r7, #24
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bd80      	pop	{r7, pc}

08003abc <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003abc:	b480      	push	{r7}
 8003abe:	b083      	sub	sp, #12
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d101      	bne.n	8003ace <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	e04f      	b.n	8003b6e <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003ad4:	b2db      	uxtb	r3, r3
 8003ad6:	2b02      	cmp	r3, #2
 8003ad8:	d008      	beq.n	8003aec <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2204      	movs	r2, #4
 8003ade:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003ae8:	2301      	movs	r3, #1
 8003aea:	e040      	b.n	8003b6e <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	681a      	ldr	r2, [r3, #0]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f022 020e 	bic.w	r2, r2, #14
 8003afa:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b00:	681a      	ldr	r2, [r3, #0]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b06:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003b0a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	681a      	ldr	r2, [r3, #0]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f022 0201 	bic.w	r2, r2, #1
 8003b1a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b20:	f003 021c 	and.w	r2, r3, #28
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b28:	2101      	movs	r1, #1
 8003b2a:	fa01 f202 	lsl.w	r2, r1, r2
 8003b2e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b34:	687a      	ldr	r2, [r7, #4]
 8003b36:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003b38:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d00c      	beq.n	8003b5c <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b46:	681a      	ldr	r2, [r3, #0]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b4c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003b50:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b56:	687a      	ldr	r2, [r7, #4]
 8003b58:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003b5a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2201      	movs	r2, #1
 8003b60:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2200      	movs	r2, #0
 8003b68:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8003b6c:	2300      	movs	r3, #0
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	370c      	adds	r7, #12
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bc80      	pop	{r7}
 8003b76:	4770      	bx	lr

08003b78 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b084      	sub	sp, #16
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b80:	2300      	movs	r3, #0
 8003b82:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003b8a:	b2db      	uxtb	r3, r3
 8003b8c:	2b02      	cmp	r3, #2
 8003b8e:	d005      	beq.n	8003b9c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2204      	movs	r2, #4
 8003b94:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003b96:	2301      	movs	r3, #1
 8003b98:	73fb      	strb	r3, [r7, #15]
 8003b9a:	e047      	b.n	8003c2c <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	681a      	ldr	r2, [r3, #0]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f022 020e 	bic.w	r2, r2, #14
 8003baa:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	681a      	ldr	r2, [r3, #0]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f022 0201 	bic.w	r2, r2, #1
 8003bba:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bc0:	681a      	ldr	r2, [r3, #0]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bc6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003bca:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bd0:	f003 021c 	and.w	r2, r3, #28
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd8:	2101      	movs	r1, #1
 8003bda:	fa01 f202 	lsl.w	r2, r1, r2
 8003bde:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003be4:	687a      	ldr	r2, [r7, #4]
 8003be6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003be8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d00c      	beq.n	8003c0c <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bf6:	681a      	ldr	r2, [r3, #0]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bfc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003c00:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c06:	687a      	ldr	r2, [r7, #4]
 8003c08:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003c0a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2201      	movs	r2, #1
 8003c10:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2200      	movs	r2, #0
 8003c18:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d003      	beq.n	8003c2c <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c28:	6878      	ldr	r0, [r7, #4]
 8003c2a:	4798      	blx	r3
    }
  }
  return status;
 8003c2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c2e:	4618      	mov	r0, r3
 8003c30:	3710      	adds	r7, #16
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd80      	pop	{r7, pc}
	...

08003c38 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b084      	sub	sp, #16
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c54:	f003 031c 	and.w	r3, r3, #28
 8003c58:	2204      	movs	r2, #4
 8003c5a:	409a      	lsls	r2, r3
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	4013      	ands	r3, r2
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d027      	beq.n	8003cb4 <HAL_DMA_IRQHandler+0x7c>
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	f003 0304 	and.w	r3, r3, #4
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d022      	beq.n	8003cb4 <HAL_DMA_IRQHandler+0x7c>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f003 0320 	and.w	r3, r3, #32
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d107      	bne.n	8003c8c <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	681a      	ldr	r2, [r3, #0]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f022 0204 	bic.w	r2, r2, #4
 8003c8a:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c90:	f003 021c 	and.w	r2, r3, #28
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c98:	2104      	movs	r1, #4
 8003c9a:	fa01 f202 	lsl.w	r2, r1, r2
 8003c9e:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	f000 8081 	beq.w	8003dac <HAL_DMA_IRQHandler+0x174>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8003cb2:	e07b      	b.n	8003dac <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cb8:	f003 031c 	and.w	r3, r3, #28
 8003cbc:	2202      	movs	r2, #2
 8003cbe:	409a      	lsls	r2, r3
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	4013      	ands	r3, r2
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d03d      	beq.n	8003d44 <HAL_DMA_IRQHandler+0x10c>
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	f003 0302 	and.w	r3, r3, #2
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d038      	beq.n	8003d44 <HAL_DMA_IRQHandler+0x10c>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f003 0320 	and.w	r3, r3, #32
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d10b      	bne.n	8003cf8 <HAL_DMA_IRQHandler+0xc0>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	681a      	ldr	r2, [r3, #0]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f022 020a 	bic.w	r2, r2, #10
 8003cee:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	461a      	mov	r2, r3
 8003cfe:	4b2e      	ldr	r3, [pc, #184]	; (8003db8 <HAL_DMA_IRQHandler+0x180>)
 8003d00:	429a      	cmp	r2, r3
 8003d02:	d909      	bls.n	8003d18 <HAL_DMA_IRQHandler+0xe0>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d08:	f003 031c 	and.w	r3, r3, #28
 8003d0c:	4a2b      	ldr	r2, [pc, #172]	; (8003dbc <HAL_DMA_IRQHandler+0x184>)
 8003d0e:	2102      	movs	r1, #2
 8003d10:	fa01 f303 	lsl.w	r3, r1, r3
 8003d14:	6053      	str	r3, [r2, #4]
 8003d16:	e008      	b.n	8003d2a <HAL_DMA_IRQHandler+0xf2>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d1c:	f003 031c 	and.w	r3, r3, #28
 8003d20:	4a27      	ldr	r2, [pc, #156]	; (8003dc0 <HAL_DMA_IRQHandler+0x188>)
 8003d22:	2102      	movs	r1, #2
 8003d24:	fa01 f303 	lsl.w	r3, r1, r3
 8003d28:	6053      	str	r3, [r2, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      if (hdma->XferCpltCallback != NULL)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d038      	beq.n	8003dac <HAL_DMA_IRQHandler+0x174>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d3e:	6878      	ldr	r0, [r7, #4]
 8003d40:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8003d42:	e033      	b.n	8003dac <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d48:	f003 031c 	and.w	r3, r3, #28
 8003d4c:	2208      	movs	r2, #8
 8003d4e:	409a      	lsls	r2, r3
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	4013      	ands	r3, r2
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d02a      	beq.n	8003dae <HAL_DMA_IRQHandler+0x176>
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	f003 0308 	and.w	r3, r3, #8
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d025      	beq.n	8003dae <HAL_DMA_IRQHandler+0x176>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	681a      	ldr	r2, [r3, #0]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f022 020e 	bic.w	r2, r2, #14
 8003d70:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d76:	f003 021c 	and.w	r2, r3, #28
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d7e:	2101      	movs	r1, #1
 8003d80:	fa01 f202 	lsl.w	r2, r1, r2
 8003d84:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2201      	movs	r2, #1
 8003d8a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2201      	movs	r2, #1
 8003d90:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2200      	movs	r2, #0
 8003d98:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d004      	beq.n	8003dae <HAL_DMA_IRQHandler+0x176>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003da8:	6878      	ldr	r0, [r7, #4]
 8003daa:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003dac:	bf00      	nop
 8003dae:	bf00      	nop
}
 8003db0:	3710      	adds	r7, #16
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}
 8003db6:	bf00      	nop
 8003db8:	40020080 	.word	0x40020080
 8003dbc:	40020400 	.word	0x40020400
 8003dc0:	40020000 	.word	0x40020000

08003dc4 <HAL_DMA_ConfigChannelAttributes>:
  * @param ChannelAttributes specifies the DMA channel secure/privilege attributes.
  *        This parameter can be a one or a combination of @ref DMA_Channel_Attributes
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *hdma, uint32_t ChannelAttributes)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	b085      	sub	sp, #20
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
 8003dcc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003dce:	2300      	movs	r3, #0
 8003dd0:	72fb      	strb	r3, [r7, #11]
#if defined (CORE_CM0PLUS)
  uint32_t ccr_SECM;
#endif /* CORE_CM0PLUS */

  /* Check the DMA peripheral handle */
  if (hdma == NULL)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d103      	bne.n	8003de0 <HAL_DMA_ConfigChannelAttributes+0x1c>
  {
    status = HAL_ERROR;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	72fb      	strb	r3, [r7, #11]
    return status;
 8003ddc:	7afb      	ldrb	r3, [r7, #11]
 8003dde:	e01b      	b.n	8003e18 <HAL_DMA_ConfigChannelAttributes+0x54>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Read CCR register */
  ccr = READ_REG(hdma->Instance->CCR);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	60fb      	str	r3, [r7, #12]

  /* Apply any requested privilege/non-privilege attributes */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) != 0U)
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	f003 0310 	and.w	r3, r3, #16
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d00d      	beq.n	8003e0e <HAL_DMA_ConfigChannelAttributes+0x4a>
  {
    if ((ChannelAttributes & DMA_CCR_PRIV) != 0U)
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d004      	beq.n	8003e06 <HAL_DMA_ConfigChannelAttributes+0x42>
    {
      SET_BIT(ccr, DMA_CCR_PRIV);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e02:	60fb      	str	r3, [r7, #12]
 8003e04:	e003      	b.n	8003e0e <HAL_DMA_ConfigChannelAttributes+0x4a>
    }
    else
    {
      CLEAR_BIT(ccr, DMA_CCR_PRIV);
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003e0c:	60fb      	str	r3, [r7, #12]
  }

#endif /* CORE_CM0PLUS */

  /* Update CCR Register: PRIV, SECM, SCEC, DSEC bits */
  WRITE_REG(hdma->Instance->CCR, ccr);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	68fa      	ldr	r2, [r7, #12]
 8003e14:	601a      	str	r2, [r3, #0]

  return status;
 8003e16:	7afb      	ldrb	r3, [r7, #11]
}
 8003e18:	4618      	mov	r0, r3
 8003e1a:	3714      	adds	r7, #20
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bc80      	pop	{r7}
 8003e20:	4770      	bx	lr

08003e22 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e22:	b480      	push	{r7}
 8003e24:	b085      	sub	sp, #20
 8003e26:	af00      	add	r7, sp, #0
 8003e28:	60f8      	str	r0, [r7, #12]
 8003e2a:	60b9      	str	r1, [r7, #8]
 8003e2c:	607a      	str	r2, [r7, #4]
 8003e2e:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e34:	68fa      	ldr	r2, [r7, #12]
 8003e36:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003e38:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != NULL)
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d004      	beq.n	8003e4c <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e46:	68fa      	ldr	r2, [r7, #12]
 8003e48:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003e4a:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e50:	f003 021c 	and.w	r2, r3, #28
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e58:	2101      	movs	r1, #1
 8003e5a:	fa01 f202 	lsl.w	r2, r1, r2
 8003e5e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	683a      	ldr	r2, [r7, #0]
 8003e66:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	689b      	ldr	r3, [r3, #8]
 8003e6c:	2b10      	cmp	r3, #16
 8003e6e:	d108      	bne.n	8003e82 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	687a      	ldr	r2, [r7, #4]
 8003e76:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	68ba      	ldr	r2, [r7, #8]
 8003e7e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003e80:	e007      	b.n	8003e92 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	68ba      	ldr	r2, [r7, #8]
 8003e88:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	687a      	ldr	r2, [r7, #4]
 8003e90:	60da      	str	r2, [r3, #12]
}
 8003e92:	bf00      	nop
 8003e94:	3714      	adds	r7, #20
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bc80      	pop	{r7}
 8003e9a:	4770      	bx	lr

08003e9c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b085      	sub	sp, #20
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	461a      	mov	r2, r3
 8003eaa:	4b1c      	ldr	r3, [pc, #112]	; (8003f1c <DMA_CalcDMAMUXChannelBaseAndMask+0x80>)
 8003eac:	429a      	cmp	r2, r3
 8003eae:	d813      	bhi.n	8003ed8 <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eb4:	089b      	lsrs	r3, r3, #2
 8003eb6:	009b      	lsls	r3, r3, #2
 8003eb8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003ebc:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8003ec0:	687a      	ldr	r2, [r7, #4]
 8003ec2:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	b2db      	uxtb	r3, r3
 8003eca:	3b08      	subs	r3, #8
 8003ecc:	4a14      	ldr	r2, [pc, #80]	; (8003f20 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8003ece:	fba2 2303 	umull	r2, r3, r2, r3
 8003ed2:	091b      	lsrs	r3, r3, #4
 8003ed4:	60fb      	str	r3, [r7, #12]
 8003ed6:	e011      	b.n	8003efc <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003edc:	089b      	lsrs	r3, r3, #2
 8003ede:	009a      	lsls	r2, r3, #2
 8003ee0:	4b10      	ldr	r3, [pc, #64]	; (8003f24 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 8003ee2:	4413      	add	r3, r2
 8003ee4:	687a      	ldr	r2, [r7, #4]
 8003ee6:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	b2db      	uxtb	r3, r3
 8003eee:	3b08      	subs	r3, #8
 8003ef0:	4a0b      	ldr	r2, [pc, #44]	; (8003f20 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8003ef2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ef6:	091b      	lsrs	r3, r3, #4
 8003ef8:	3307      	adds	r3, #7
 8003efa:	60fb      	str	r3, [r7, #12]
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	4a0a      	ldr	r2, [pc, #40]	; (8003f28 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 8003f00:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	f003 031f 	and.w	r3, r3, #31
 8003f08:	2201      	movs	r2, #1
 8003f0a:	409a      	lsls	r2, r3
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003f10:	bf00      	nop
 8003f12:	3714      	adds	r7, #20
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bc80      	pop	{r7}
 8003f18:	4770      	bx	lr
 8003f1a:	bf00      	nop
 8003f1c:	40020407 	.word	0x40020407
 8003f20:	cccccccd 	.word	0xcccccccd
 8003f24:	4002081c 	.word	0x4002081c
 8003f28:	40020880 	.word	0x40020880

08003f2c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b085      	sub	sp, #20
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f3c:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003f3e:	68fa      	ldr	r2, [r7, #12]
 8003f40:	4b0a      	ldr	r3, [pc, #40]	; (8003f6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003f42:	4413      	add	r3, r2
 8003f44:	009b      	lsls	r3, r3, #2
 8003f46:	461a      	mov	r2, r3
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	4a08      	ldr	r2, [pc, #32]	; (8003f70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003f50:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	3b01      	subs	r3, #1
 8003f56:	f003 0303 	and.w	r3, r3, #3
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	409a      	lsls	r2, r3
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003f62:	bf00      	nop
 8003f64:	3714      	adds	r7, #20
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bc80      	pop	{r7}
 8003f6a:	4770      	bx	lr
 8003f6c:	1000823f 	.word	0x1000823f
 8003f70:	40020940 	.word	0x40020940

08003f74 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f74:	b480      	push	{r7}
 8003f76:	b087      	sub	sp, #28
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
 8003f7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003f7e:	2300      	movs	r3, #0
 8003f80:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003f82:	e140      	b.n	8004206 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	681a      	ldr	r2, [r3, #0]
 8003f88:	2101      	movs	r1, #1
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	fa01 f303 	lsl.w	r3, r1, r3
 8003f90:	4013      	ands	r3, r2
 8003f92:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	f000 8132 	beq.w	8004200 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	f003 0303 	and.w	r3, r3, #3
 8003fa4:	2b01      	cmp	r3, #1
 8003fa6:	d005      	beq.n	8003fb4 <HAL_GPIO_Init+0x40>
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	f003 0303 	and.w	r3, r3, #3
 8003fb0:	2b02      	cmp	r3, #2
 8003fb2:	d130      	bne.n	8004016 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	689b      	ldr	r3, [r3, #8]
 8003fb8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	005b      	lsls	r3, r3, #1
 8003fbe:	2203      	movs	r2, #3
 8003fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc4:	43db      	mvns	r3, r3
 8003fc6:	693a      	ldr	r2, [r7, #16]
 8003fc8:	4013      	ands	r3, r2
 8003fca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	68da      	ldr	r2, [r3, #12]
 8003fd0:	697b      	ldr	r3, [r7, #20]
 8003fd2:	005b      	lsls	r3, r3, #1
 8003fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd8:	693a      	ldr	r2, [r7, #16]
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	693a      	ldr	r2, [r7, #16]
 8003fe2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003fea:	2201      	movs	r2, #1
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff2:	43db      	mvns	r3, r3
 8003ff4:	693a      	ldr	r2, [r7, #16]
 8003ff6:	4013      	ands	r3, r2
 8003ff8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	091b      	lsrs	r3, r3, #4
 8004000:	f003 0201 	and.w	r2, r3, #1
 8004004:	697b      	ldr	r3, [r7, #20]
 8004006:	fa02 f303 	lsl.w	r3, r2, r3
 800400a:	693a      	ldr	r2, [r7, #16]
 800400c:	4313      	orrs	r3, r2
 800400e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	693a      	ldr	r2, [r7, #16]
 8004014:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	f003 0303 	and.w	r3, r3, #3
 800401e:	2b03      	cmp	r3, #3
 8004020:	d017      	beq.n	8004052 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	68db      	ldr	r3, [r3, #12]
 8004026:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004028:	697b      	ldr	r3, [r7, #20]
 800402a:	005b      	lsls	r3, r3, #1
 800402c:	2203      	movs	r2, #3
 800402e:	fa02 f303 	lsl.w	r3, r2, r3
 8004032:	43db      	mvns	r3, r3
 8004034:	693a      	ldr	r2, [r7, #16]
 8004036:	4013      	ands	r3, r2
 8004038:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	689a      	ldr	r2, [r3, #8]
 800403e:	697b      	ldr	r3, [r7, #20]
 8004040:	005b      	lsls	r3, r3, #1
 8004042:	fa02 f303 	lsl.w	r3, r2, r3
 8004046:	693a      	ldr	r2, [r7, #16]
 8004048:	4313      	orrs	r3, r2
 800404a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	693a      	ldr	r2, [r7, #16]
 8004050:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	f003 0303 	and.w	r3, r3, #3
 800405a:	2b02      	cmp	r3, #2
 800405c:	d123      	bne.n	80040a6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	08da      	lsrs	r2, r3, #3
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	3208      	adds	r2, #8
 8004066:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800406a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800406c:	697b      	ldr	r3, [r7, #20]
 800406e:	f003 0307 	and.w	r3, r3, #7
 8004072:	009b      	lsls	r3, r3, #2
 8004074:	220f      	movs	r2, #15
 8004076:	fa02 f303 	lsl.w	r3, r2, r3
 800407a:	43db      	mvns	r3, r3
 800407c:	693a      	ldr	r2, [r7, #16]
 800407e:	4013      	ands	r3, r2
 8004080:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	691a      	ldr	r2, [r3, #16]
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	f003 0307 	and.w	r3, r3, #7
 800408c:	009b      	lsls	r3, r3, #2
 800408e:	fa02 f303 	lsl.w	r3, r2, r3
 8004092:	693a      	ldr	r2, [r7, #16]
 8004094:	4313      	orrs	r3, r2
 8004096:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	08da      	lsrs	r2, r3, #3
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	3208      	adds	r2, #8
 80040a0:	6939      	ldr	r1, [r7, #16]
 80040a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	005b      	lsls	r3, r3, #1
 80040b0:	2203      	movs	r2, #3
 80040b2:	fa02 f303 	lsl.w	r3, r2, r3
 80040b6:	43db      	mvns	r3, r3
 80040b8:	693a      	ldr	r2, [r7, #16]
 80040ba:	4013      	ands	r3, r2
 80040bc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	f003 0203 	and.w	r2, r3, #3
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	005b      	lsls	r3, r3, #1
 80040ca:	fa02 f303 	lsl.w	r3, r2, r3
 80040ce:	693a      	ldr	r2, [r7, #16]
 80040d0:	4313      	orrs	r3, r2
 80040d2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	693a      	ldr	r2, [r7, #16]
 80040d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	f000 808c 	beq.w	8004200 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80040e8:	4a4e      	ldr	r2, [pc, #312]	; (8004224 <HAL_GPIO_Init+0x2b0>)
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	089b      	lsrs	r3, r3, #2
 80040ee:	3302      	adds	r3, #2
 80040f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040f4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 80040f6:	697b      	ldr	r3, [r7, #20]
 80040f8:	f003 0303 	and.w	r3, r3, #3
 80040fc:	009b      	lsls	r3, r3, #2
 80040fe:	2207      	movs	r2, #7
 8004100:	fa02 f303 	lsl.w	r3, r2, r3
 8004104:	43db      	mvns	r3, r3
 8004106:	693a      	ldr	r2, [r7, #16]
 8004108:	4013      	ands	r3, r2
 800410a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004112:	d00d      	beq.n	8004130 <HAL_GPIO_Init+0x1bc>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	4a44      	ldr	r2, [pc, #272]	; (8004228 <HAL_GPIO_Init+0x2b4>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d007      	beq.n	800412c <HAL_GPIO_Init+0x1b8>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	4a43      	ldr	r2, [pc, #268]	; (800422c <HAL_GPIO_Init+0x2b8>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d101      	bne.n	8004128 <HAL_GPIO_Init+0x1b4>
 8004124:	2302      	movs	r3, #2
 8004126:	e004      	b.n	8004132 <HAL_GPIO_Init+0x1be>
 8004128:	2307      	movs	r3, #7
 800412a:	e002      	b.n	8004132 <HAL_GPIO_Init+0x1be>
 800412c:	2301      	movs	r3, #1
 800412e:	e000      	b.n	8004132 <HAL_GPIO_Init+0x1be>
 8004130:	2300      	movs	r3, #0
 8004132:	697a      	ldr	r2, [r7, #20]
 8004134:	f002 0203 	and.w	r2, r2, #3
 8004138:	0092      	lsls	r2, r2, #2
 800413a:	4093      	lsls	r3, r2
 800413c:	693a      	ldr	r2, [r7, #16]
 800413e:	4313      	orrs	r3, r2
 8004140:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004142:	4938      	ldr	r1, [pc, #224]	; (8004224 <HAL_GPIO_Init+0x2b0>)
 8004144:	697b      	ldr	r3, [r7, #20]
 8004146:	089b      	lsrs	r3, r3, #2
 8004148:	3302      	adds	r3, #2
 800414a:	693a      	ldr	r2, [r7, #16]
 800414c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004150:	4b37      	ldr	r3, [pc, #220]	; (8004230 <HAL_GPIO_Init+0x2bc>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	43db      	mvns	r3, r3
 800415a:	693a      	ldr	r2, [r7, #16]
 800415c:	4013      	ands	r3, r2
 800415e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004168:	2b00      	cmp	r3, #0
 800416a:	d003      	beq.n	8004174 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 800416c:	693a      	ldr	r2, [r7, #16]
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	4313      	orrs	r3, r2
 8004172:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004174:	4a2e      	ldr	r2, [pc, #184]	; (8004230 <HAL_GPIO_Init+0x2bc>)
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800417a:	4b2d      	ldr	r3, [pc, #180]	; (8004230 <HAL_GPIO_Init+0x2bc>)
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	43db      	mvns	r3, r3
 8004184:	693a      	ldr	r2, [r7, #16]
 8004186:	4013      	ands	r3, r2
 8004188:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004192:	2b00      	cmp	r3, #0
 8004194:	d003      	beq.n	800419e <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8004196:	693a      	ldr	r2, [r7, #16]
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	4313      	orrs	r3, r2
 800419c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800419e:	4a24      	ldr	r2, [pc, #144]	; (8004230 <HAL_GPIO_Init+0x2bc>)
 80041a0:	693b      	ldr	r3, [r7, #16]
 80041a2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 80041a4:	4b22      	ldr	r3, [pc, #136]	; (8004230 <HAL_GPIO_Init+0x2bc>)
 80041a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80041aa:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	43db      	mvns	r3, r3
 80041b0:	693a      	ldr	r2, [r7, #16]
 80041b2:	4013      	ands	r3, r2
 80041b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d003      	beq.n	80041ca <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 80041c2:	693a      	ldr	r2, [r7, #16]
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	4313      	orrs	r3, r2
 80041c8:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 80041ca:	4a19      	ldr	r2, [pc, #100]	; (8004230 <HAL_GPIO_Init+0x2bc>)
 80041cc:	693b      	ldr	r3, [r7, #16]
 80041ce:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 80041d2:	4b17      	ldr	r3, [pc, #92]	; (8004230 <HAL_GPIO_Init+0x2bc>)
 80041d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041d8:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	43db      	mvns	r3, r3
 80041de:	693a      	ldr	r2, [r7, #16]
 80041e0:	4013      	ands	r3, r2
 80041e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d003      	beq.n	80041f8 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80041f0:	693a      	ldr	r2, [r7, #16]
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	4313      	orrs	r3, r2
 80041f6:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 80041f8:	4a0d      	ldr	r2, [pc, #52]	; (8004230 <HAL_GPIO_Init+0x2bc>)
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	3301      	adds	r3, #1
 8004204:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	681a      	ldr	r2, [r3, #0]
 800420a:	697b      	ldr	r3, [r7, #20]
 800420c:	fa22 f303 	lsr.w	r3, r2, r3
 8004210:	2b00      	cmp	r3, #0
 8004212:	f47f aeb7 	bne.w	8003f84 <HAL_GPIO_Init+0x10>
  }
}
 8004216:	bf00      	nop
 8004218:	bf00      	nop
 800421a:	371c      	adds	r7, #28
 800421c:	46bd      	mov	sp, r7
 800421e:	bc80      	pop	{r7}
 8004220:	4770      	bx	lr
 8004222:	bf00      	nop
 8004224:	40010000 	.word	0x40010000
 8004228:	48000400 	.word	0x48000400
 800422c:	48000800 	.word	0x48000800
 8004230:	58000800 	.word	0x58000800

08004234 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004234:	b480      	push	{r7}
 8004236:	b083      	sub	sp, #12
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
 800423c:	460b      	mov	r3, r1
 800423e:	807b      	strh	r3, [r7, #2]
 8004240:	4613      	mov	r3, r2
 8004242:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004244:	787b      	ldrb	r3, [r7, #1]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d003      	beq.n	8004252 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800424a:	887a      	ldrh	r2, [r7, #2]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004250:	e002      	b.n	8004258 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004252:	887a      	ldrh	r2, [r7, #2]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004258:	bf00      	nop
 800425a:	370c      	adds	r7, #12
 800425c:	46bd      	mov	sp, r7
 800425e:	bc80      	pop	{r7}
 8004260:	4770      	bx	lr
	...

08004264 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004264:	b480      	push	{r7}
 8004266:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004268:	4b04      	ldr	r3, [pc, #16]	; (800427c <HAL_PWR_EnableBkUpAccess+0x18>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a03      	ldr	r2, [pc, #12]	; (800427c <HAL_PWR_EnableBkUpAccess+0x18>)
 800426e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004272:	6013      	str	r3, [r2, #0]
}
 8004274:	bf00      	nop
 8004276:	46bd      	mov	sp, r7
 8004278:	bc80      	pop	{r7}
 800427a:	4770      	bx	lr
 800427c:	58000400 	.word	0x58000400

08004280 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004280:	b480      	push	{r7}
 8004282:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8004284:	4b03      	ldr	r3, [pc, #12]	; (8004294 <HAL_PWREx_GetVoltageRange+0x14>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 800428c:	4618      	mov	r0, r3
 800428e:	46bd      	mov	sp, r7
 8004290:	bc80      	pop	{r7}
 8004292:	4770      	bx	lr
 8004294:	58000400 	.word	0x58000400

08004298 <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 8004298:	b480      	push	{r7}
 800429a:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 800429c:	4b06      	ldr	r3, [pc, #24]	; (80042b8 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042a8:	d101      	bne.n	80042ae <LL_PWR_IsEnabledBkUpAccess+0x16>
 80042aa:	2301      	movs	r3, #1
 80042ac:	e000      	b.n	80042b0 <LL_PWR_IsEnabledBkUpAccess+0x18>
 80042ae:	2300      	movs	r3, #0
}
 80042b0:	4618      	mov	r0, r3
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bc80      	pop	{r7}
 80042b6:	4770      	bx	lr
 80042b8:	58000400 	.word	0x58000400

080042bc <LL_RCC_HSE_EnableTcxo>:
  * @note PB0 must be configured in analog mode prior enabling VDDTCXO supply
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_EnableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableTcxo(void)
{
 80042bc:	b480      	push	{r7}
 80042be:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80042c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80042ca:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80042ce:	6013      	str	r3, [r2, #0]
}
 80042d0:	bf00      	nop
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bc80      	pop	{r7}
 80042d6:	4770      	bx	lr

080042d8 <LL_RCC_HSE_DisableTcxo>:
  * @brief  Disable HSE VDDTCXO output on package pin PB0-VDDTCXO
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_DisableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_DisableTcxo(void)
{
 80042d8:	b480      	push	{r7}
 80042da:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80042dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80042e6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80042ea:	6013      	str	r3, [r2, #0]
}
 80042ec:	bf00      	nop
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bc80      	pop	{r7}
 80042f2:	4770      	bx	lr

080042f4 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler  division by 2
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 80042f4:	b480      	push	{r7}
 80042f6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80042f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004302:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004306:	d101      	bne.n	800430c <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8004308:	2301      	movs	r3, #1
 800430a:	e000      	b.n	800430e <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800430c:	2300      	movs	r3, #0
}
 800430e:	4618      	mov	r0, r3
 8004310:	46bd      	mov	sp, r7
 8004312:	bc80      	pop	{r7}
 8004314:	4770      	bx	lr

08004316 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8004316:	b480      	push	{r7}
 8004318:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800431a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004324:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004328:	6013      	str	r3, [r2, #0]
}
 800432a:	bf00      	nop
 800432c:	46bd      	mov	sp, r7
 800432e:	bc80      	pop	{r7}
 8004330:	4770      	bx	lr

08004332 <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8004332:	b480      	push	{r7}
 8004334:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8004336:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004340:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004344:	6013      	str	r3, [r2, #0]
}
 8004346:	bf00      	nop
 8004348:	46bd      	mov	sp, r7
 800434a:	bc80      	pop	{r7}
 800434c:	4770      	bx	lr

0800434e <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 800434e:	b480      	push	{r7}
 8004350:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8004352:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800435c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004360:	d101      	bne.n	8004366 <LL_RCC_HSE_IsReady+0x18>
 8004362:	2301      	movs	r3, #1
 8004364:	e000      	b.n	8004368 <LL_RCC_HSE_IsReady+0x1a>
 8004366:	2300      	movs	r3, #0
}
 8004368:	4618      	mov	r0, r3
 800436a:	46bd      	mov	sp, r7
 800436c:	bc80      	pop	{r7}
 800436e:	4770      	bx	lr

08004370 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8004370:	b480      	push	{r7}
 8004372:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8004374:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800437e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004382:	6013      	str	r3, [r2, #0]
}
 8004384:	bf00      	nop
 8004386:	46bd      	mov	sp, r7
 8004388:	bc80      	pop	{r7}
 800438a:	4770      	bx	lr

0800438c <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 800438c:	b480      	push	{r7}
 800438e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8004390:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800439a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800439e:	6013      	str	r3, [r2, #0]
}
 80043a0:	bf00      	nop
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bc80      	pop	{r7}
 80043a6:	4770      	bx	lr

080043a8 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80043a8:	b480      	push	{r7}
 80043aa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80043ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043ba:	d101      	bne.n	80043c0 <LL_RCC_HSI_IsReady+0x18>
 80043bc:	2301      	movs	r3, #1
 80043be:	e000      	b.n	80043c2 <LL_RCC_HSI_IsReady+0x1a>
 80043c0:	2300      	movs	r3, #0
}
 80043c2:	4618      	mov	r0, r3
 80043c4:	46bd      	mov	sp, r7
 80043c6:	bc80      	pop	{r7}
 80043c8:	4770      	bx	lr

080043ca <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 80043ca:	b480      	push	{r7}
 80043cc:	b083      	sub	sp, #12
 80043ce:	af00      	add	r7, sp, #0
 80043d0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80043d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	061b      	lsls	r3, r3, #24
 80043e0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80043e4:	4313      	orrs	r3, r2
 80043e6:	604b      	str	r3, [r1, #4]
}
 80043e8:	bf00      	nop
 80043ea:	370c      	adds	r7, #12
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bc80      	pop	{r7}
 80043f0:	4770      	bx	lr

080043f2 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 80043f2:	b480      	push	{r7}
 80043f4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80043f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043fe:	f003 0302 	and.w	r3, r3, #2
 8004402:	2b02      	cmp	r3, #2
 8004404:	d101      	bne.n	800440a <LL_RCC_LSE_IsReady+0x18>
 8004406:	2301      	movs	r3, #1
 8004408:	e000      	b.n	800440c <LL_RCC_LSE_IsReady+0x1a>
 800440a:	2300      	movs	r3, #0
}
 800440c:	4618      	mov	r0, r3
 800440e:	46bd      	mov	sp, r7
 8004410:	bc80      	pop	{r7}
 8004412:	4770      	bx	lr

08004414 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 8004414:	b480      	push	{r7}
 8004416:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8004418:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800441c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004420:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004424:	f043 0301 	orr.w	r3, r3, #1
 8004428:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800442c:	bf00      	nop
 800442e:	46bd      	mov	sp, r7
 8004430:	bc80      	pop	{r7}
 8004432:	4770      	bx	lr

08004434 <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 8004434:	b480      	push	{r7}
 8004436:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8004438:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800443c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004440:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004444:	f023 0301 	bic.w	r3, r3, #1
 8004448:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800444c:	bf00      	nop
 800444e:	46bd      	mov	sp, r7
 8004450:	bc80      	pop	{r7}
 8004452:	4770      	bx	lr

08004454 <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 8004454:	b480      	push	{r7}
 8004456:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8004458:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800445c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004460:	f003 0302 	and.w	r3, r3, #2
 8004464:	2b02      	cmp	r3, #2
 8004466:	d101      	bne.n	800446c <LL_RCC_LSI_IsReady+0x18>
 8004468:	2301      	movs	r3, #1
 800446a:	e000      	b.n	800446e <LL_RCC_LSI_IsReady+0x1a>
 800446c:	2300      	movs	r3, #0
}
 800446e:	4618      	mov	r0, r3
 8004470:	46bd      	mov	sp, r7
 8004472:	bc80      	pop	{r7}
 8004474:	4770      	bx	lr

08004476 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8004476:	b480      	push	{r7}
 8004478:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800447a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004484:	f043 0301 	orr.w	r3, r3, #1
 8004488:	6013      	str	r3, [r2, #0]
}
 800448a:	bf00      	nop
 800448c:	46bd      	mov	sp, r7
 800448e:	bc80      	pop	{r7}
 8004490:	4770      	bx	lr

08004492 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8004492:	b480      	push	{r7}
 8004494:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8004496:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80044a0:	f023 0301 	bic.w	r3, r3, #1
 80044a4:	6013      	str	r3, [r2, #0]
}
 80044a6:	bf00      	nop
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bc80      	pop	{r7}
 80044ac:	4770      	bx	lr

080044ae <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 80044ae:	b480      	push	{r7}
 80044b0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80044b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f003 0302 	and.w	r3, r3, #2
 80044bc:	2b02      	cmp	r3, #2
 80044be:	d101      	bne.n	80044c4 <LL_RCC_MSI_IsReady+0x16>
 80044c0:	2301      	movs	r3, #1
 80044c2:	e000      	b.n	80044c6 <LL_RCC_MSI_IsReady+0x18>
 80044c4:	2300      	movs	r3, #0
}
 80044c6:	4618      	mov	r0, r3
 80044c8:	46bd      	mov	sp, r7
 80044ca:	bc80      	pop	{r7}
 80044cc:	4770      	bx	lr

080044ce <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 80044ce:	b480      	push	{r7}
 80044d0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 80044d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f003 0308 	and.w	r3, r3, #8
 80044dc:	2b08      	cmp	r3, #8
 80044de:	d101      	bne.n	80044e4 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 80044e0:	2301      	movs	r3, #1
 80044e2:	e000      	b.n	80044e6 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 80044e4:	2300      	movs	r3, #0
}
 80044e6:	4618      	mov	r0, r3
 80044e8:	46bd      	mov	sp, r7
 80044ea:	bc80      	pop	{r7}
 80044ec:	4770      	bx	lr

080044ee <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 80044ee:	b480      	push	{r7}
 80044f0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 80044f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80044fc:	4618      	mov	r0, r3
 80044fe:	46bd      	mov	sp, r7
 8004500:	bc80      	pop	{r7}
 8004502:	4770      	bx	lr

08004504 <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 8004504:	b480      	push	{r7}
 8004506:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8004508:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800450c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004510:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8004514:	4618      	mov	r0, r3
 8004516:	46bd      	mov	sp, r7
 8004518:	bc80      	pop	{r7}
 800451a:	4770      	bx	lr

0800451c <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 800451c:	b480      	push	{r7}
 800451e:	b083      	sub	sp, #12
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8004524:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	021b      	lsls	r3, r3, #8
 8004532:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004536:	4313      	orrs	r3, r2
 8004538:	604b      	str	r3, [r1, #4]
}
 800453a:	bf00      	nop
 800453c:	370c      	adds	r7, #12
 800453e:	46bd      	mov	sp, r7
 8004540:	bc80      	pop	{r7}
 8004542:	4770      	bx	lr

08004544 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8004544:	b480      	push	{r7}
 8004546:	b083      	sub	sp, #12
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800454c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004550:	689b      	ldr	r3, [r3, #8]
 8004552:	f023 0203 	bic.w	r2, r3, #3
 8004556:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	4313      	orrs	r3, r2
 800455e:	608b      	str	r3, [r1, #8]
}
 8004560:	bf00      	nop
 8004562:	370c      	adds	r7, #12
 8004564:	46bd      	mov	sp, r7
 8004566:	bc80      	pop	{r7}
 8004568:	4770      	bx	lr

0800456a <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800456a:	b480      	push	{r7}
 800456c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800456e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004572:	689b      	ldr	r3, [r3, #8]
 8004574:	f003 030c 	and.w	r3, r3, #12
}
 8004578:	4618      	mov	r0, r3
 800457a:	46bd      	mov	sp, r7
 800457c:	bc80      	pop	{r7}
 800457e:	4770      	bx	lr

08004580 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8004580:	b480      	push	{r7}
 8004582:	b083      	sub	sp, #12
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8004588:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800458c:	689b      	ldr	r3, [r3, #8]
 800458e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004592:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	4313      	orrs	r3, r2
 800459a:	608b      	str	r3, [r1, #8]
}
 800459c:	bf00      	nop
 800459e:	370c      	adds	r7, #12
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bc80      	pop	{r7}
 80045a4:	4770      	bx	lr

080045a6 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80045a6:	b480      	push	{r7}
 80045a8:	b083      	sub	sp, #12
 80045aa:	af00      	add	r7, sp, #0
 80045ac:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80045ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045b2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80045b6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80045ba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	4313      	orrs	r3, r2
 80045c2:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80045c6:	bf00      	nop
 80045c8:	370c      	adds	r7, #12
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bc80      	pop	{r7}
 80045ce:	4770      	bx	lr

080045d0 <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 80045d0:	b480      	push	{r7}
 80045d2:	b083      	sub	sp, #12
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80045d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045dc:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80045e0:	f023 020f 	bic.w	r2, r3, #15
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	091b      	lsrs	r3, r3, #4
 80045e8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80045ec:	4313      	orrs	r3, r2
 80045ee:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80045f2:	bf00      	nop
 80045f4:	370c      	adds	r7, #12
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bc80      	pop	{r7}
 80045fa:	4770      	bx	lr

080045fc <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80045fc:	b480      	push	{r7}
 80045fe:	b083      	sub	sp, #12
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8004604:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004608:	689b      	ldr	r3, [r3, #8]
 800460a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800460e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	4313      	orrs	r3, r2
 8004616:	608b      	str	r3, [r1, #8]
}
 8004618:	bf00      	nop
 800461a:	370c      	adds	r7, #12
 800461c:	46bd      	mov	sp, r7
 800461e:	bc80      	pop	{r7}
 8004620:	4770      	bx	lr

08004622 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8004622:	b480      	push	{r7}
 8004624:	b083      	sub	sp, #12
 8004626:	af00      	add	r7, sp, #0
 8004628:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800462a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800462e:	689b      	ldr	r3, [r3, #8]
 8004630:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004634:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	4313      	orrs	r3, r2
 800463c:	608b      	str	r3, [r1, #8]
}
 800463e:	bf00      	nop
 8004640:	370c      	adds	r7, #12
 8004642:	46bd      	mov	sp, r7
 8004644:	bc80      	pop	{r7}
 8004646:	4770      	bx	lr

08004648 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8004648:	b480      	push	{r7}
 800464a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800464c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004650:	689b      	ldr	r3, [r3, #8]
 8004652:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004656:	4618      	mov	r0, r3
 8004658:	46bd      	mov	sp, r7
 800465a:	bc80      	pop	{r7}
 800465c:	4770      	bx	lr

0800465e <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 800465e:	b480      	push	{r7}
 8004660:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8004662:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004666:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800466a:	011b      	lsls	r3, r3, #4
 800466c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004670:	4618      	mov	r0, r3
 8004672:	46bd      	mov	sp, r7
 8004674:	bc80      	pop	{r7}
 8004676:	4770      	bx	lr

08004678 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8004678:	b480      	push	{r7}
 800467a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800467c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004680:	689b      	ldr	r3, [r3, #8]
 8004682:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8004686:	4618      	mov	r0, r3
 8004688:	46bd      	mov	sp, r7
 800468a:	bc80      	pop	{r7}
 800468c:	4770      	bx	lr

0800468e <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 800468e:	b480      	push	{r7}
 8004690:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8004692:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004696:	689b      	ldr	r3, [r3, #8]
 8004698:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 800469c:	4618      	mov	r0, r3
 800469e:	46bd      	mov	sp, r7
 80046a0:	bc80      	pop	{r7}
 80046a2:	4770      	bx	lr

080046a4 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80046a4:	b480      	push	{r7}
 80046a6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80046a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80046b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80046b6:	6013      	str	r3, [r2, #0]
}
 80046b8:	bf00      	nop
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bc80      	pop	{r7}
 80046be:	4770      	bx	lr

080046c0 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80046c0:	b480      	push	{r7}
 80046c2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80046c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80046ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80046d2:	6013      	str	r3, [r2, #0]
}
 80046d4:	bf00      	nop
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bc80      	pop	{r7}
 80046da:	4770      	bx	lr

080046dc <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80046dc:	b480      	push	{r7}
 80046de:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80046e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046ea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80046ee:	d101      	bne.n	80046f4 <LL_RCC_PLL_IsReady+0x18>
 80046f0:	2301      	movs	r3, #1
 80046f2:	e000      	b.n	80046f6 <LL_RCC_PLL_IsReady+0x1a>
 80046f4:	2300      	movs	r3, #0
}
 80046f6:	4618      	mov	r0, r3
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bc80      	pop	{r7}
 80046fc:	4770      	bx	lr

080046fe <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80046fe:	b480      	push	{r7}
 8004700:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8004702:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004706:	68db      	ldr	r3, [r3, #12]
 8004708:	0a1b      	lsrs	r3, r3, #8
 800470a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 800470e:	4618      	mov	r0, r3
 8004710:	46bd      	mov	sp, r7
 8004712:	bc80      	pop	{r7}
 8004714:	4770      	bx	lr

08004716 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8004716:	b480      	push	{r7}
 8004718:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800471a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800471e:	68db      	ldr	r3, [r3, #12]
 8004720:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8004724:	4618      	mov	r0, r3
 8004726:	46bd      	mov	sp, r7
 8004728:	bc80      	pop	{r7}
 800472a:	4770      	bx	lr

0800472c <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800472c:	b480      	push	{r7}
 800472e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8004730:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004734:	68db      	ldr	r3, [r3, #12]
 8004736:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 800473a:	4618      	mov	r0, r3
 800473c:	46bd      	mov	sp, r7
 800473e:	bc80      	pop	{r7}
 8004740:	4770      	bx	lr

08004742 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8004742:	b480      	push	{r7}
 8004744:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8004746:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800474a:	68db      	ldr	r3, [r3, #12]
 800474c:	f003 0303 	and.w	r3, r3, #3
}
 8004750:	4618      	mov	r0, r3
 8004752:	46bd      	mov	sp, r7
 8004754:	bc80      	pop	{r7}
 8004756:	4770      	bx	lr

08004758 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8004758:	b480      	push	{r7}
 800475a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800475c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004760:	689b      	ldr	r3, [r3, #8]
 8004762:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004766:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800476a:	d101      	bne.n	8004770 <LL_RCC_IsActiveFlag_HPRE+0x18>
 800476c:	2301      	movs	r3, #1
 800476e:	e000      	b.n	8004772 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8004770:	2300      	movs	r3, #0
}
 8004772:	4618      	mov	r0, r3
 8004774:	46bd      	mov	sp, r7
 8004776:	bc80      	pop	{r7}
 8004778:	4770      	bx	lr

0800477a <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 800477a:	b480      	push	{r7}
 800477c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800477e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004782:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004786:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800478a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800478e:	d101      	bne.n	8004794 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8004790:	2301      	movs	r3, #1
 8004792:	e000      	b.n	8004796 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8004794:	2300      	movs	r3, #0
}
 8004796:	4618      	mov	r0, r3
 8004798:	46bd      	mov	sp, r7
 800479a:	bc80      	pop	{r7}
 800479c:	4770      	bx	lr

0800479e <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 800479e:	b480      	push	{r7}
 80047a0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80047a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047a6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80047aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047b2:	d101      	bne.n	80047b8 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80047b4:	2301      	movs	r3, #1
 80047b6:	e000      	b.n	80047ba <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80047b8:	2300      	movs	r3, #0
}
 80047ba:	4618      	mov	r0, r3
 80047bc:	46bd      	mov	sp, r7
 80047be:	bc80      	pop	{r7}
 80047c0:	4770      	bx	lr

080047c2 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80047c2:	b480      	push	{r7}
 80047c4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80047c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047ca:	689b      	ldr	r3, [r3, #8]
 80047cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047d0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80047d4:	d101      	bne.n	80047da <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80047d6:	2301      	movs	r3, #1
 80047d8:	e000      	b.n	80047dc <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80047da:	2300      	movs	r3, #0
}
 80047dc:	4618      	mov	r0, r3
 80047de:	46bd      	mov	sp, r7
 80047e0:	bc80      	pop	{r7}
 80047e2:	4770      	bx	lr

080047e4 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 80047e4:	b480      	push	{r7}
 80047e6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80047e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047ec:	689b      	ldr	r3, [r3, #8]
 80047ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80047f2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80047f6:	d101      	bne.n	80047fc <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80047f8:	2301      	movs	r3, #1
 80047fa:	e000      	b.n	80047fe <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80047fc:	2300      	movs	r3, #0
}
 80047fe:	4618      	mov	r0, r3
 8004800:	46bd      	mov	sp, r7
 8004802:	bc80      	pop	{r7}
 8004804:	4770      	bx	lr
	...

08004808 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b088      	sub	sp, #32
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d101      	bne.n	800481a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004816:	2301      	movs	r3, #1
 8004818:	e36f      	b.n	8004efa <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800481a:	f7ff fea6 	bl	800456a <LL_RCC_GetSysClkSource>
 800481e:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004820:	f7ff ff8f 	bl	8004742 <LL_RCC_PLL_GetMainSource>
 8004824:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f003 0320 	and.w	r3, r3, #32
 800482e:	2b00      	cmp	r3, #0
 8004830:	f000 80c4 	beq.w	80049bc <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004834:	69fb      	ldr	r3, [r7, #28]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d005      	beq.n	8004846 <HAL_RCC_OscConfig+0x3e>
 800483a:	69fb      	ldr	r3, [r7, #28]
 800483c:	2b0c      	cmp	r3, #12
 800483e:	d176      	bne.n	800492e <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004840:	69bb      	ldr	r3, [r7, #24]
 8004842:	2b01      	cmp	r3, #1
 8004844:	d173      	bne.n	800492e <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6a1b      	ldr	r3, [r3, #32]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d101      	bne.n	8004852 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800484e:	2301      	movs	r3, #1
 8004850:	e353      	b.n	8004efa <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004856:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f003 0308 	and.w	r3, r3, #8
 8004860:	2b00      	cmp	r3, #0
 8004862:	d005      	beq.n	8004870 <HAL_RCC_OscConfig+0x68>
 8004864:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800486e:	e006      	b.n	800487e <HAL_RCC_OscConfig+0x76>
 8004870:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004874:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004878:	091b      	lsrs	r3, r3, #4
 800487a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800487e:	4293      	cmp	r3, r2
 8004880:	d222      	bcs.n	80048c8 <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004886:	4618      	mov	r0, r3
 8004888:	f000 fd5a 	bl	8005340 <RCC_SetFlashLatencyFromMSIRange>
 800488c:	4603      	mov	r3, r0
 800488e:	2b00      	cmp	r3, #0
 8004890:	d001      	beq.n	8004896 <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 8004892:	2301      	movs	r3, #1
 8004894:	e331      	b.n	8004efa <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004896:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80048a0:	f043 0308 	orr.w	r3, r3, #8
 80048a4:	6013      	str	r3, [r2, #0]
 80048a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048b4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80048b8:	4313      	orrs	r3, r2
 80048ba:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c0:	4618      	mov	r0, r3
 80048c2:	f7ff fe2b 	bl	800451c <LL_RCC_MSI_SetCalibTrimming>
 80048c6:	e021      	b.n	800490c <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80048c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80048d2:	f043 0308 	orr.w	r3, r3, #8
 80048d6:	6013      	str	r3, [r2, #0]
 80048d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048e6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80048ea:	4313      	orrs	r3, r2
 80048ec:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f2:	4618      	mov	r0, r3
 80048f4:	f7ff fe12 	bl	800451c <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048fc:	4618      	mov	r0, r3
 80048fe:	f000 fd1f 	bl	8005340 <RCC_SetFlashLatencyFromMSIRange>
 8004902:	4603      	mov	r3, r0
 8004904:	2b00      	cmp	r3, #0
 8004906:	d001      	beq.n	800490c <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 8004908:	2301      	movs	r3, #1
 800490a:	e2f6      	b.n	8004efa <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800490c:	f000 fce0 	bl	80052d0 <HAL_RCC_GetHCLKFreq>
 8004910:	4603      	mov	r3, r0
 8004912:	4aa7      	ldr	r2, [pc, #668]	; (8004bb0 <HAL_RCC_OscConfig+0x3a8>)
 8004914:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 8004916:	4ba7      	ldr	r3, [pc, #668]	; (8004bb4 <HAL_RCC_OscConfig+0x3ac>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4618      	mov	r0, r3
 800491c:	f7fe fe50 	bl	80035c0 <HAL_InitTick>
 8004920:	4603      	mov	r3, r0
 8004922:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8004924:	7cfb      	ldrb	r3, [r7, #19]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d047      	beq.n	80049ba <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 800492a:	7cfb      	ldrb	r3, [r7, #19]
 800492c:	e2e5      	b.n	8004efa <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6a1b      	ldr	r3, [r3, #32]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d02c      	beq.n	8004990 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004936:	f7ff fd9e 	bl	8004476 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800493a:	f7fe f963 	bl	8002c04 <HAL_GetTick>
 800493e:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8004940:	e008      	b.n	8004954 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004942:	f7fe f95f 	bl	8002c04 <HAL_GetTick>
 8004946:	4602      	mov	r2, r0
 8004948:	697b      	ldr	r3, [r7, #20]
 800494a:	1ad3      	subs	r3, r2, r3
 800494c:	2b02      	cmp	r3, #2
 800494e:	d901      	bls.n	8004954 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 8004950:	2303      	movs	r3, #3
 8004952:	e2d2      	b.n	8004efa <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 8004954:	f7ff fdab 	bl	80044ae <LL_RCC_MSI_IsReady>
 8004958:	4603      	mov	r3, r0
 800495a:	2b00      	cmp	r3, #0
 800495c:	d0f1      	beq.n	8004942 <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800495e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004968:	f043 0308 	orr.w	r3, r3, #8
 800496c:	6013      	str	r3, [r2, #0]
 800496e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800497c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004980:	4313      	orrs	r3, r2
 8004982:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004988:	4618      	mov	r0, r3
 800498a:	f7ff fdc7 	bl	800451c <LL_RCC_MSI_SetCalibTrimming>
 800498e:	e015      	b.n	80049bc <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004990:	f7ff fd7f 	bl	8004492 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004994:	f7fe f936 	bl	8002c04 <HAL_GetTick>
 8004998:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800499a:	e008      	b.n	80049ae <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800499c:	f7fe f932 	bl	8002c04 <HAL_GetTick>
 80049a0:	4602      	mov	r2, r0
 80049a2:	697b      	ldr	r3, [r7, #20]
 80049a4:	1ad3      	subs	r3, r2, r3
 80049a6:	2b02      	cmp	r3, #2
 80049a8:	d901      	bls.n	80049ae <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80049aa:	2303      	movs	r3, #3
 80049ac:	e2a5      	b.n	8004efa <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 80049ae:	f7ff fd7e 	bl	80044ae <LL_RCC_MSI_IsReady>
 80049b2:	4603      	mov	r3, r0
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d1f1      	bne.n	800499c <HAL_RCC_OscConfig+0x194>
 80049b8:	e000      	b.n	80049bc <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80049ba:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f003 0301 	and.w	r3, r3, #1
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d058      	beq.n	8004a7a <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80049c8:	69fb      	ldr	r3, [r7, #28]
 80049ca:	2b08      	cmp	r3, #8
 80049cc:	d005      	beq.n	80049da <HAL_RCC_OscConfig+0x1d2>
 80049ce:	69fb      	ldr	r3, [r7, #28]
 80049d0:	2b0c      	cmp	r3, #12
 80049d2:	d108      	bne.n	80049e6 <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80049d4:	69bb      	ldr	r3, [r7, #24]
 80049d6:	2b03      	cmp	r3, #3
 80049d8:	d105      	bne.n	80049e6 <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d14b      	bne.n	8004a7a <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 80049e2:	2301      	movs	r3, #1
 80049e4:	e289      	b.n	8004efa <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 80049e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	689b      	ldr	r3, [r3, #8]
 80049f4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80049f8:	4313      	orrs	r3, r2
 80049fa:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a04:	d102      	bne.n	8004a0c <HAL_RCC_OscConfig+0x204>
 8004a06:	f7ff fc86 	bl	8004316 <LL_RCC_HSE_Enable>
 8004a0a:	e00d      	b.n	8004a28 <HAL_RCC_OscConfig+0x220>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8004a14:	d104      	bne.n	8004a20 <HAL_RCC_OscConfig+0x218>
 8004a16:	f7ff fc51 	bl	80042bc <LL_RCC_HSE_EnableTcxo>
 8004a1a:	f7ff fc7c 	bl	8004316 <LL_RCC_HSE_Enable>
 8004a1e:	e003      	b.n	8004a28 <HAL_RCC_OscConfig+0x220>
 8004a20:	f7ff fc87 	bl	8004332 <LL_RCC_HSE_Disable>
 8004a24:	f7ff fc58 	bl	80042d8 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d012      	beq.n	8004a56 <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a30:	f7fe f8e8 	bl	8002c04 <HAL_GetTick>
 8004a34:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8004a36:	e008      	b.n	8004a4a <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a38:	f7fe f8e4 	bl	8002c04 <HAL_GetTick>
 8004a3c:	4602      	mov	r2, r0
 8004a3e:	697b      	ldr	r3, [r7, #20]
 8004a40:	1ad3      	subs	r3, r2, r3
 8004a42:	2b64      	cmp	r3, #100	; 0x64
 8004a44:	d901      	bls.n	8004a4a <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 8004a46:	2303      	movs	r3, #3
 8004a48:	e257      	b.n	8004efa <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 8004a4a:	f7ff fc80 	bl	800434e <LL_RCC_HSE_IsReady>
 8004a4e:	4603      	mov	r3, r0
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d0f1      	beq.n	8004a38 <HAL_RCC_OscConfig+0x230>
 8004a54:	e011      	b.n	8004a7a <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a56:	f7fe f8d5 	bl	8002c04 <HAL_GetTick>
 8004a5a:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8004a5c:	e008      	b.n	8004a70 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a5e:	f7fe f8d1 	bl	8002c04 <HAL_GetTick>
 8004a62:	4602      	mov	r2, r0
 8004a64:	697b      	ldr	r3, [r7, #20]
 8004a66:	1ad3      	subs	r3, r2, r3
 8004a68:	2b64      	cmp	r3, #100	; 0x64
 8004a6a:	d901      	bls.n	8004a70 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8004a6c:	2303      	movs	r3, #3
 8004a6e:	e244      	b.n	8004efa <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 8004a70:	f7ff fc6d 	bl	800434e <LL_RCC_HSE_IsReady>
 8004a74:	4603      	mov	r3, r0
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d1f1      	bne.n	8004a5e <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f003 0302 	and.w	r3, r3, #2
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d046      	beq.n	8004b14 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8004a86:	69fb      	ldr	r3, [r7, #28]
 8004a88:	2b04      	cmp	r3, #4
 8004a8a:	d005      	beq.n	8004a98 <HAL_RCC_OscConfig+0x290>
 8004a8c:	69fb      	ldr	r3, [r7, #28]
 8004a8e:	2b0c      	cmp	r3, #12
 8004a90:	d10e      	bne.n	8004ab0 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004a92:	69bb      	ldr	r3, [r7, #24]
 8004a94:	2b02      	cmp	r3, #2
 8004a96:	d10b      	bne.n	8004ab0 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	691b      	ldr	r3, [r3, #16]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d101      	bne.n	8004aa4 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	e22a      	b.n	8004efa <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	695b      	ldr	r3, [r3, #20]
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	f7ff fc8e 	bl	80043ca <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004aae:	e031      	b.n	8004b14 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	691b      	ldr	r3, [r3, #16]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d019      	beq.n	8004aec <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ab8:	f7ff fc5a 	bl	8004370 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004abc:	f7fe f8a2 	bl	8002c04 <HAL_GetTick>
 8004ac0:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8004ac2:	e008      	b.n	8004ad6 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ac4:	f7fe f89e 	bl	8002c04 <HAL_GetTick>
 8004ac8:	4602      	mov	r2, r0
 8004aca:	697b      	ldr	r3, [r7, #20]
 8004acc:	1ad3      	subs	r3, r2, r3
 8004ace:	2b02      	cmp	r3, #2
 8004ad0:	d901      	bls.n	8004ad6 <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 8004ad2:	2303      	movs	r3, #3
 8004ad4:	e211      	b.n	8004efa <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 8004ad6:	f7ff fc67 	bl	80043a8 <LL_RCC_HSI_IsReady>
 8004ada:	4603      	mov	r3, r0
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d0f1      	beq.n	8004ac4 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	695b      	ldr	r3, [r3, #20]
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	f7ff fc70 	bl	80043ca <LL_RCC_HSI_SetCalibTrimming>
 8004aea:	e013      	b.n	8004b14 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004aec:	f7ff fc4e 	bl	800438c <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004af0:	f7fe f888 	bl	8002c04 <HAL_GetTick>
 8004af4:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8004af6:	e008      	b.n	8004b0a <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004af8:	f7fe f884 	bl	8002c04 <HAL_GetTick>
 8004afc:	4602      	mov	r2, r0
 8004afe:	697b      	ldr	r3, [r7, #20]
 8004b00:	1ad3      	subs	r3, r2, r3
 8004b02:	2b02      	cmp	r3, #2
 8004b04:	d901      	bls.n	8004b0a <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 8004b06:	2303      	movs	r3, #3
 8004b08:	e1f7      	b.n	8004efa <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 8004b0a:	f7ff fc4d 	bl	80043a8 <LL_RCC_HSI_IsReady>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d1f1      	bne.n	8004af8 <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f003 0308 	and.w	r3, r3, #8
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d06e      	beq.n	8004bfe <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	699b      	ldr	r3, [r3, #24]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d056      	beq.n	8004bd6 <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 8004b28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b30:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	69da      	ldr	r2, [r3, #28]
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	f003 0310 	and.w	r3, r3, #16
 8004b3c:	429a      	cmp	r2, r3
 8004b3e:	d031      	beq.n	8004ba4 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	f003 0302 	and.w	r3, r3, #2
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d006      	beq.n	8004b58 <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d101      	bne.n	8004b58 <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 8004b54:	2301      	movs	r3, #1
 8004b56:	e1d0      	b.n	8004efa <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	f003 0301 	and.w	r3, r3, #1
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d013      	beq.n	8004b8a <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 8004b62:	f7ff fc67 	bl	8004434 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004b66:	f7fe f84d 	bl	8002c04 <HAL_GetTick>
 8004b6a:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8004b6c:	e008      	b.n	8004b80 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b6e:	f7fe f849 	bl	8002c04 <HAL_GetTick>
 8004b72:	4602      	mov	r2, r0
 8004b74:	697b      	ldr	r3, [r7, #20]
 8004b76:	1ad3      	subs	r3, r2, r3
 8004b78:	2b11      	cmp	r3, #17
 8004b7a:	d901      	bls.n	8004b80 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 8004b7c:	2303      	movs	r3, #3
 8004b7e:	e1bc      	b.n	8004efa <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 8004b80:	f7ff fc68 	bl	8004454 <LL_RCC_LSI_IsReady>
 8004b84:	4603      	mov	r3, r0
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d1f1      	bne.n	8004b6e <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8004b8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b92:	f023 0210 	bic.w	r2, r3, #16
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	69db      	ldr	r3, [r3, #28]
 8004b9a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004ba4:	f7ff fc36 	bl	8004414 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ba8:	f7fe f82c 	bl	8002c04 <HAL_GetTick>
 8004bac:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8004bae:	e00c      	b.n	8004bca <HAL_RCC_OscConfig+0x3c2>
 8004bb0:	2000000c 	.word	0x2000000c
 8004bb4:	20000010 	.word	0x20000010
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004bb8:	f7fe f824 	bl	8002c04 <HAL_GetTick>
 8004bbc:	4602      	mov	r2, r0
 8004bbe:	697b      	ldr	r3, [r7, #20]
 8004bc0:	1ad3      	subs	r3, r2, r3
 8004bc2:	2b11      	cmp	r3, #17
 8004bc4:	d901      	bls.n	8004bca <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8004bc6:	2303      	movs	r3, #3
 8004bc8:	e197      	b.n	8004efa <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 8004bca:	f7ff fc43 	bl	8004454 <LL_RCC_LSI_IsReady>
 8004bce:	4603      	mov	r3, r0
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d0f1      	beq.n	8004bb8 <HAL_RCC_OscConfig+0x3b0>
 8004bd4:	e013      	b.n	8004bfe <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004bd6:	f7ff fc2d 	bl	8004434 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004bda:	f7fe f813 	bl	8002c04 <HAL_GetTick>
 8004bde:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8004be0:	e008      	b.n	8004bf4 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004be2:	f7fe f80f 	bl	8002c04 <HAL_GetTick>
 8004be6:	4602      	mov	r2, r0
 8004be8:	697b      	ldr	r3, [r7, #20]
 8004bea:	1ad3      	subs	r3, r2, r3
 8004bec:	2b11      	cmp	r3, #17
 8004bee:	d901      	bls.n	8004bf4 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8004bf0:	2303      	movs	r3, #3
 8004bf2:	e182      	b.n	8004efa <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 8004bf4:	f7ff fc2e 	bl	8004454 <LL_RCC_LSI_IsReady>
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d1f1      	bne.n	8004be2 <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f003 0304 	and.w	r3, r3, #4
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	f000 80d8 	beq.w	8004dbc <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8004c0c:	f7ff fb44 	bl	8004298 <LL_PWR_IsEnabledBkUpAccess>
 8004c10:	4603      	mov	r3, r0
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d113      	bne.n	8004c3e <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8004c16:	f7ff fb25 	bl	8004264 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c1a:	f7fd fff3 	bl	8002c04 <HAL_GetTick>
 8004c1e:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8004c20:	e008      	b.n	8004c34 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c22:	f7fd ffef 	bl	8002c04 <HAL_GetTick>
 8004c26:	4602      	mov	r2, r0
 8004c28:	697b      	ldr	r3, [r7, #20]
 8004c2a:	1ad3      	subs	r3, r2, r3
 8004c2c:	2b02      	cmp	r3, #2
 8004c2e:	d901      	bls.n	8004c34 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8004c30:	2303      	movs	r3, #3
 8004c32:	e162      	b.n	8004efa <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8004c34:	f7ff fb30 	bl	8004298 <LL_PWR_IsEnabledBkUpAccess>
 8004c38:	4603      	mov	r3, r0
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d0f1      	beq.n	8004c22 <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	68db      	ldr	r3, [r3, #12]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d07b      	beq.n	8004d3e <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	68db      	ldr	r3, [r3, #12]
 8004c4a:	2b85      	cmp	r3, #133	; 0x85
 8004c4c:	d003      	beq.n	8004c56 <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	68db      	ldr	r3, [r3, #12]
 8004c52:	2b05      	cmp	r3, #5
 8004c54:	d109      	bne.n	8004c6a <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004c56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c5e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c62:	f043 0304 	orr.w	r3, r3, #4
 8004c66:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c6a:	f7fd ffcb 	bl	8002c04 <HAL_GetTick>
 8004c6e:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004c70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c78:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c7c:	f043 0301 	orr.w	r3, r3, #1
 8004c80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8004c84:	e00a      	b.n	8004c9c <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c86:	f7fd ffbd 	bl	8002c04 <HAL_GetTick>
 8004c8a:	4602      	mov	r2, r0
 8004c8c:	697b      	ldr	r3, [r7, #20]
 8004c8e:	1ad3      	subs	r3, r2, r3
 8004c90:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d901      	bls.n	8004c9c <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 8004c98:	2303      	movs	r3, #3
 8004c9a:	e12e      	b.n	8004efa <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 8004c9c:	f7ff fba9 	bl	80043f2 <LL_RCC_LSE_IsReady>
 8004ca0:	4603      	mov	r3, r0
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d0ef      	beq.n	8004c86 <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	68db      	ldr	r3, [r3, #12]
 8004caa:	2b81      	cmp	r3, #129	; 0x81
 8004cac:	d003      	beq.n	8004cb6 <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	68db      	ldr	r3, [r3, #12]
 8004cb2:	2b85      	cmp	r3, #133	; 0x85
 8004cb4:	d121      	bne.n	8004cfa <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cb6:	f7fd ffa5 	bl	8002c04 <HAL_GetTick>
 8004cba:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004cbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cc4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004cc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ccc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8004cd0:	e00a      	b.n	8004ce8 <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cd2:	f7fd ff97 	bl	8002c04 <HAL_GetTick>
 8004cd6:	4602      	mov	r2, r0
 8004cd8:	697b      	ldr	r3, [r7, #20]
 8004cda:	1ad3      	subs	r3, r2, r3
 8004cdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d901      	bls.n	8004ce8 <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 8004ce4:	2303      	movs	r3, #3
 8004ce6:	e108      	b.n	8004efa <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8004ce8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cf0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d0ec      	beq.n	8004cd2 <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8004cf8:	e060      	b.n	8004dbc <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cfa:	f7fd ff83 	bl	8002c04 <HAL_GetTick>
 8004cfe:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004d00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d08:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004d0c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004d14:	e00a      	b.n	8004d2c <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d16:	f7fd ff75 	bl	8002c04 <HAL_GetTick>
 8004d1a:	4602      	mov	r2, r0
 8004d1c:	697b      	ldr	r3, [r7, #20]
 8004d1e:	1ad3      	subs	r3, r2, r3
 8004d20:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d901      	bls.n	8004d2c <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8004d28:	2303      	movs	r3, #3
 8004d2a:	e0e6      	b.n	8004efa <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004d2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d34:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d1ec      	bne.n	8004d16 <HAL_RCC_OscConfig+0x50e>
 8004d3c:	e03e      	b.n	8004dbc <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d3e:	f7fd ff61 	bl	8002c04 <HAL_GetTick>
 8004d42:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004d44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d4c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004d50:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004d58:	e00a      	b.n	8004d70 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d5a:	f7fd ff53 	bl	8002c04 <HAL_GetTick>
 8004d5e:	4602      	mov	r2, r0
 8004d60:	697b      	ldr	r3, [r7, #20]
 8004d62:	1ad3      	subs	r3, r2, r3
 8004d64:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d901      	bls.n	8004d70 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8004d6c:	2303      	movs	r3, #3
 8004d6e:	e0c4      	b.n	8004efa <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004d70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d1ec      	bne.n	8004d5a <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d80:	f7fd ff40 	bl	8002c04 <HAL_GetTick>
 8004d84:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004d86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d8e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004d92:	f023 0301 	bic.w	r3, r3, #1
 8004d96:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8004d9a:	e00a      	b.n	8004db2 <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d9c:	f7fd ff32 	bl	8002c04 <HAL_GetTick>
 8004da0:	4602      	mov	r2, r0
 8004da2:	697b      	ldr	r3, [r7, #20]
 8004da4:	1ad3      	subs	r3, r2, r3
 8004da6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d901      	bls.n	8004db2 <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 8004dae:	2303      	movs	r3, #3
 8004db0:	e0a3      	b.n	8004efa <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 8004db2:	f7ff fb1e 	bl	80043f2 <LL_RCC_LSE_IsReady>
 8004db6:	4603      	mov	r3, r0
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d1ef      	bne.n	8004d9c <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	f000 8099 	beq.w	8004ef8 <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004dc6:	69fb      	ldr	r3, [r7, #28]
 8004dc8:	2b0c      	cmp	r3, #12
 8004dca:	d06c      	beq.n	8004ea6 <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dd0:	2b02      	cmp	r3, #2
 8004dd2:	d14b      	bne.n	8004e6c <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004dd4:	f7ff fc74 	bl	80046c0 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dd8:	f7fd ff14 	bl	8002c04 <HAL_GetTick>
 8004ddc:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8004dde:	e008      	b.n	8004df2 <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004de0:	f7fd ff10 	bl	8002c04 <HAL_GetTick>
 8004de4:	4602      	mov	r2, r0
 8004de6:	697b      	ldr	r3, [r7, #20]
 8004de8:	1ad3      	subs	r3, r2, r3
 8004dea:	2b0a      	cmp	r3, #10
 8004dec:	d901      	bls.n	8004df2 <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 8004dee:	2303      	movs	r3, #3
 8004df0:	e083      	b.n	8004efa <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8004df2:	f7ff fc73 	bl	80046dc <LL_RCC_PLL_IsReady>
 8004df6:	4603      	mov	r3, r0
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d1f1      	bne.n	8004de0 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004dfc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e00:	68da      	ldr	r2, [r3, #12]
 8004e02:	4b40      	ldr	r3, [pc, #256]	; (8004f04 <HAL_RCC_OscConfig+0x6fc>)
 8004e04:	4013      	ands	r3, r2
 8004e06:	687a      	ldr	r2, [r7, #4]
 8004e08:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8004e0a:	687a      	ldr	r2, [r7, #4]
 8004e0c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004e0e:	4311      	orrs	r1, r2
 8004e10:	687a      	ldr	r2, [r7, #4]
 8004e12:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004e14:	0212      	lsls	r2, r2, #8
 8004e16:	4311      	orrs	r1, r2
 8004e18:	687a      	ldr	r2, [r7, #4]
 8004e1a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004e1c:	4311      	orrs	r1, r2
 8004e1e:	687a      	ldr	r2, [r7, #4]
 8004e20:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004e22:	4311      	orrs	r1, r2
 8004e24:	687a      	ldr	r2, [r7, #4]
 8004e26:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004e28:	430a      	orrs	r2, r1
 8004e2a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e32:	f7ff fc37 	bl	80046a4 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004e36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e3a:	68db      	ldr	r3, [r3, #12]
 8004e3c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004e40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e44:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e46:	f7fd fedd 	bl	8002c04 <HAL_GetTick>
 8004e4a:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8004e4c:	e008      	b.n	8004e60 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e4e:	f7fd fed9 	bl	8002c04 <HAL_GetTick>
 8004e52:	4602      	mov	r2, r0
 8004e54:	697b      	ldr	r3, [r7, #20]
 8004e56:	1ad3      	subs	r3, r2, r3
 8004e58:	2b0a      	cmp	r3, #10
 8004e5a:	d901      	bls.n	8004e60 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 8004e5c:	2303      	movs	r3, #3
 8004e5e:	e04c      	b.n	8004efa <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 8004e60:	f7ff fc3c 	bl	80046dc <LL_RCC_PLL_IsReady>
 8004e64:	4603      	mov	r3, r0
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d0f1      	beq.n	8004e4e <HAL_RCC_OscConfig+0x646>
 8004e6a:	e045      	b.n	8004ef8 <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e6c:	f7ff fc28 	bl	80046c0 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e70:	f7fd fec8 	bl	8002c04 <HAL_GetTick>
 8004e74:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8004e76:	e008      	b.n	8004e8a <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e78:	f7fd fec4 	bl	8002c04 <HAL_GetTick>
 8004e7c:	4602      	mov	r2, r0
 8004e7e:	697b      	ldr	r3, [r7, #20]
 8004e80:	1ad3      	subs	r3, r2, r3
 8004e82:	2b0a      	cmp	r3, #10
 8004e84:	d901      	bls.n	8004e8a <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8004e86:	2303      	movs	r3, #3
 8004e88:	e037      	b.n	8004efa <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8004e8a:	f7ff fc27 	bl	80046dc <LL_RCC_PLL_IsReady>
 8004e8e:	4603      	mov	r3, r0
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d1f1      	bne.n	8004e78 <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8004e94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e98:	68da      	ldr	r2, [r3, #12]
 8004e9a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004e9e:	4b1a      	ldr	r3, [pc, #104]	; (8004f08 <HAL_RCC_OscConfig+0x700>)
 8004ea0:	4013      	ands	r3, r2
 8004ea2:	60cb      	str	r3, [r1, #12]
 8004ea4:	e028      	b.n	8004ef8 <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eaa:	2b01      	cmp	r3, #1
 8004eac:	d101      	bne.n	8004eb2 <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 8004eae:	2301      	movs	r3, #1
 8004eb0:	e023      	b.n	8004efa <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004eb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004eb6:	68db      	ldr	r3, [r3, #12]
 8004eb8:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8004eba:	69bb      	ldr	r3, [r7, #24]
 8004ebc:	f003 0203 	and.w	r2, r3, #3
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ec4:	429a      	cmp	r2, r3
 8004ec6:	d115      	bne.n	8004ef4 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8004ec8:	69bb      	ldr	r3, [r7, #24]
 8004eca:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ed2:	429a      	cmp	r2, r3
 8004ed4:	d10e      	bne.n	8004ef4 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8004ed6:	69bb      	ldr	r3, [r7, #24]
 8004ed8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ee0:	021b      	lsls	r3, r3, #8
 8004ee2:	429a      	cmp	r2, r3
 8004ee4:	d106      	bne.n	8004ef4 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8004ee6:	69bb      	ldr	r3, [r7, #24]
 8004ee8:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ef0:	429a      	cmp	r2, r3
 8004ef2:	d001      	beq.n	8004ef8 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	e000      	b.n	8004efa <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 8004ef8:	2300      	movs	r3, #0
}
 8004efa:	4618      	mov	r0, r3
 8004efc:	3720      	adds	r7, #32
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bd80      	pop	{r7, pc}
 8004f02:	bf00      	nop
 8004f04:	11c1808c 	.word	0x11c1808c
 8004f08:	eefefffc 	.word	0xeefefffc

08004f0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b084      	sub	sp, #16
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
 8004f14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d101      	bne.n	8004f20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	e12c      	b.n	800517a <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004f20:	4b98      	ldr	r3, [pc, #608]	; (8005184 <HAL_RCC_ClockConfig+0x278>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f003 0307 	and.w	r3, r3, #7
 8004f28:	683a      	ldr	r2, [r7, #0]
 8004f2a:	429a      	cmp	r2, r3
 8004f2c:	d91b      	bls.n	8004f66 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f2e:	4b95      	ldr	r3, [pc, #596]	; (8005184 <HAL_RCC_ClockConfig+0x278>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f023 0207 	bic.w	r2, r3, #7
 8004f36:	4993      	ldr	r1, [pc, #588]	; (8005184 <HAL_RCC_ClockConfig+0x278>)
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004f3e:	f7fd fe61 	bl	8002c04 <HAL_GetTick>
 8004f42:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f44:	e008      	b.n	8004f58 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004f46:	f7fd fe5d 	bl	8002c04 <HAL_GetTick>
 8004f4a:	4602      	mov	r2, r0
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	1ad3      	subs	r3, r2, r3
 8004f50:	2b02      	cmp	r3, #2
 8004f52:	d901      	bls.n	8004f58 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8004f54:	2303      	movs	r3, #3
 8004f56:	e110      	b.n	800517a <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f58:	4b8a      	ldr	r3, [pc, #552]	; (8005184 <HAL_RCC_ClockConfig+0x278>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f003 0307 	and.w	r3, r3, #7
 8004f60:	683a      	ldr	r2, [r7, #0]
 8004f62:	429a      	cmp	r2, r3
 8004f64:	d1ef      	bne.n	8004f46 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f003 0302 	and.w	r3, r3, #2
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d016      	beq.n	8004fa0 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	689b      	ldr	r3, [r3, #8]
 8004f76:	4618      	mov	r0, r3
 8004f78:	f7ff fb02 	bl	8004580 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004f7c:	f7fd fe42 	bl	8002c04 <HAL_GetTick>
 8004f80:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004f82:	e008      	b.n	8004f96 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004f84:	f7fd fe3e 	bl	8002c04 <HAL_GetTick>
 8004f88:	4602      	mov	r2, r0
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	1ad3      	subs	r3, r2, r3
 8004f8e:	2b02      	cmp	r3, #2
 8004f90:	d901      	bls.n	8004f96 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8004f92:	2303      	movs	r3, #3
 8004f94:	e0f1      	b.n	800517a <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004f96:	f7ff fbdf 	bl	8004758 <LL_RCC_IsActiveFlag_HPRE>
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d0f1      	beq.n	8004f84 <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f003 0320 	and.w	r3, r3, #32
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d016      	beq.n	8004fda <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	695b      	ldr	r3, [r3, #20]
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	f7ff faf8 	bl	80045a6 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004fb6:	f7fd fe25 	bl	8002c04 <HAL_GetTick>
 8004fba:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004fbc:	e008      	b.n	8004fd0 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004fbe:	f7fd fe21 	bl	8002c04 <HAL_GetTick>
 8004fc2:	4602      	mov	r2, r0
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	1ad3      	subs	r3, r2, r3
 8004fc8:	2b02      	cmp	r3, #2
 8004fca:	d901      	bls.n	8004fd0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8004fcc:	2303      	movs	r3, #3
 8004fce:	e0d4      	b.n	800517a <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004fd0:	f7ff fbd3 	bl	800477a <LL_RCC_IsActiveFlag_C2HPRE>
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d0f1      	beq.n	8004fbe <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d016      	beq.n	8005014 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	699b      	ldr	r3, [r3, #24]
 8004fea:	4618      	mov	r0, r3
 8004fec:	f7ff faf0 	bl	80045d0 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004ff0:	f7fd fe08 	bl	8002c04 <HAL_GetTick>
 8004ff4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8004ff6:	e008      	b.n	800500a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004ff8:	f7fd fe04 	bl	8002c04 <HAL_GetTick>
 8004ffc:	4602      	mov	r2, r0
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	1ad3      	subs	r3, r2, r3
 8005002:	2b02      	cmp	r3, #2
 8005004:	d901      	bls.n	800500a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8005006:	2303      	movs	r3, #3
 8005008:	e0b7      	b.n	800517a <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800500a:	f7ff fbc8 	bl	800479e <LL_RCC_IsActiveFlag_SHDHPRE>
 800500e:	4603      	mov	r3, r0
 8005010:	2b00      	cmp	r3, #0
 8005012:	d0f1      	beq.n	8004ff8 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f003 0304 	and.w	r3, r3, #4
 800501c:	2b00      	cmp	r3, #0
 800501e:	d016      	beq.n	800504e <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	68db      	ldr	r3, [r3, #12]
 8005024:	4618      	mov	r0, r3
 8005026:	f7ff fae9 	bl	80045fc <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800502a:	f7fd fdeb 	bl	8002c04 <HAL_GetTick>
 800502e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005030:	e008      	b.n	8005044 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005032:	f7fd fde7 	bl	8002c04 <HAL_GetTick>
 8005036:	4602      	mov	r2, r0
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	1ad3      	subs	r3, r2, r3
 800503c:	2b02      	cmp	r3, #2
 800503e:	d901      	bls.n	8005044 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8005040:	2303      	movs	r3, #3
 8005042:	e09a      	b.n	800517a <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005044:	f7ff fbbd 	bl	80047c2 <LL_RCC_IsActiveFlag_PPRE1>
 8005048:	4603      	mov	r3, r0
 800504a:	2b00      	cmp	r3, #0
 800504c:	d0f1      	beq.n	8005032 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f003 0308 	and.w	r3, r3, #8
 8005056:	2b00      	cmp	r3, #0
 8005058:	d017      	beq.n	800508a <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	691b      	ldr	r3, [r3, #16]
 800505e:	00db      	lsls	r3, r3, #3
 8005060:	4618      	mov	r0, r3
 8005062:	f7ff fade 	bl	8004622 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005066:	f7fd fdcd 	bl	8002c04 <HAL_GetTick>
 800506a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800506c:	e008      	b.n	8005080 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800506e:	f7fd fdc9 	bl	8002c04 <HAL_GetTick>
 8005072:	4602      	mov	r2, r0
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	1ad3      	subs	r3, r2, r3
 8005078:	2b02      	cmp	r3, #2
 800507a:	d901      	bls.n	8005080 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 800507c:	2303      	movs	r3, #3
 800507e:	e07c      	b.n	800517a <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005080:	f7ff fbb0 	bl	80047e4 <LL_RCC_IsActiveFlag_PPRE2>
 8005084:	4603      	mov	r3, r0
 8005086:	2b00      	cmp	r3, #0
 8005088:	d0f1      	beq.n	800506e <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f003 0301 	and.w	r3, r3, #1
 8005092:	2b00      	cmp	r3, #0
 8005094:	d043      	beq.n	800511e <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	685b      	ldr	r3, [r3, #4]
 800509a:	2b02      	cmp	r3, #2
 800509c:	d106      	bne.n	80050ac <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800509e:	f7ff f956 	bl	800434e <LL_RCC_HSE_IsReady>
 80050a2:	4603      	mov	r3, r0
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d11e      	bne.n	80050e6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80050a8:	2301      	movs	r3, #1
 80050aa:	e066      	b.n	800517a <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	685b      	ldr	r3, [r3, #4]
 80050b0:	2b03      	cmp	r3, #3
 80050b2:	d106      	bne.n	80050c2 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80050b4:	f7ff fb12 	bl	80046dc <LL_RCC_PLL_IsReady>
 80050b8:	4603      	mov	r3, r0
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d113      	bne.n	80050e6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80050be:	2301      	movs	r3, #1
 80050c0:	e05b      	b.n	800517a <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	685b      	ldr	r3, [r3, #4]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d106      	bne.n	80050d8 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80050ca:	f7ff f9f0 	bl	80044ae <LL_RCC_MSI_IsReady>
 80050ce:	4603      	mov	r3, r0
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d108      	bne.n	80050e6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80050d4:	2301      	movs	r3, #1
 80050d6:	e050      	b.n	800517a <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80050d8:	f7ff f966 	bl	80043a8 <LL_RCC_HSI_IsReady>
 80050dc:	4603      	mov	r3, r0
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d101      	bne.n	80050e6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80050e2:	2301      	movs	r3, #1
 80050e4:	e049      	b.n	800517a <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	685b      	ldr	r3, [r3, #4]
 80050ea:	4618      	mov	r0, r3
 80050ec:	f7ff fa2a 	bl	8004544 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80050f0:	f7fd fd88 	bl	8002c04 <HAL_GetTick>
 80050f4:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050f6:	e00a      	b.n	800510e <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050f8:	f7fd fd84 	bl	8002c04 <HAL_GetTick>
 80050fc:	4602      	mov	r2, r0
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	1ad3      	subs	r3, r2, r3
 8005102:	f241 3288 	movw	r2, #5000	; 0x1388
 8005106:	4293      	cmp	r3, r2
 8005108:	d901      	bls.n	800510e <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800510a:	2303      	movs	r3, #3
 800510c:	e035      	b.n	800517a <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800510e:	f7ff fa2c 	bl	800456a <LL_RCC_GetSysClkSource>
 8005112:	4602      	mov	r2, r0
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	685b      	ldr	r3, [r3, #4]
 8005118:	009b      	lsls	r3, r3, #2
 800511a:	429a      	cmp	r2, r3
 800511c:	d1ec      	bne.n	80050f8 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800511e:	4b19      	ldr	r3, [pc, #100]	; (8005184 <HAL_RCC_ClockConfig+0x278>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f003 0307 	and.w	r3, r3, #7
 8005126:	683a      	ldr	r2, [r7, #0]
 8005128:	429a      	cmp	r2, r3
 800512a:	d21b      	bcs.n	8005164 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800512c:	4b15      	ldr	r3, [pc, #84]	; (8005184 <HAL_RCC_ClockConfig+0x278>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f023 0207 	bic.w	r2, r3, #7
 8005134:	4913      	ldr	r1, [pc, #76]	; (8005184 <HAL_RCC_ClockConfig+0x278>)
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	4313      	orrs	r3, r2
 800513a:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800513c:	f7fd fd62 	bl	8002c04 <HAL_GetTick>
 8005140:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005142:	e008      	b.n	8005156 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005144:	f7fd fd5e 	bl	8002c04 <HAL_GetTick>
 8005148:	4602      	mov	r2, r0
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	1ad3      	subs	r3, r2, r3
 800514e:	2b02      	cmp	r3, #2
 8005150:	d901      	bls.n	8005156 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8005152:	2303      	movs	r3, #3
 8005154:	e011      	b.n	800517a <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005156:	4b0b      	ldr	r3, [pc, #44]	; (8005184 <HAL_RCC_ClockConfig+0x278>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f003 0307 	and.w	r3, r3, #7
 800515e:	683a      	ldr	r2, [r7, #0]
 8005160:	429a      	cmp	r2, r3
 8005162:	d1ef      	bne.n	8005144 <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005164:	f000 f8b4 	bl	80052d0 <HAL_RCC_GetHCLKFreq>
 8005168:	4603      	mov	r3, r0
 800516a:	4a07      	ldr	r2, [pc, #28]	; (8005188 <HAL_RCC_ClockConfig+0x27c>)
 800516c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 800516e:	4b07      	ldr	r3, [pc, #28]	; (800518c <HAL_RCC_ClockConfig+0x280>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4618      	mov	r0, r3
 8005174:	f7fe fa24 	bl	80035c0 <HAL_InitTick>
 8005178:	4603      	mov	r3, r0
}
 800517a:	4618      	mov	r0, r3
 800517c:	3710      	adds	r7, #16
 800517e:	46bd      	mov	sp, r7
 8005180:	bd80      	pop	{r7, pc}
 8005182:	bf00      	nop
 8005184:	58004000 	.word	0x58004000
 8005188:	2000000c 	.word	0x2000000c
 800518c:	20000010 	.word	0x20000010

08005190 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005190:	b590      	push	{r4, r7, lr}
 8005192:	b087      	sub	sp, #28
 8005194:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8005196:	2300      	movs	r3, #0
 8005198:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 800519a:	2300      	movs	r3, #0
 800519c:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800519e:	f7ff f9e4 	bl	800456a <LL_RCC_GetSysClkSource>
 80051a2:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80051a4:	f7ff facd 	bl	8004742 <LL_RCC_PLL_GetMainSource>
 80051a8:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d005      	beq.n	80051bc <HAL_RCC_GetSysClockFreq+0x2c>
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	2b0c      	cmp	r3, #12
 80051b4:	d139      	bne.n	800522a <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2b01      	cmp	r3, #1
 80051ba:	d136      	bne.n	800522a <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80051bc:	f7ff f987 	bl	80044ce <LL_RCC_MSI_IsEnabledRangeSelect>
 80051c0:	4603      	mov	r3, r0
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d115      	bne.n	80051f2 <HAL_RCC_GetSysClockFreq+0x62>
 80051c6:	f7ff f982 	bl	80044ce <LL_RCC_MSI_IsEnabledRangeSelect>
 80051ca:	4603      	mov	r3, r0
 80051cc:	2b01      	cmp	r3, #1
 80051ce:	d106      	bne.n	80051de <HAL_RCC_GetSysClockFreq+0x4e>
 80051d0:	f7ff f98d 	bl	80044ee <LL_RCC_MSI_GetRange>
 80051d4:	4603      	mov	r3, r0
 80051d6:	0a1b      	lsrs	r3, r3, #8
 80051d8:	f003 030f 	and.w	r3, r3, #15
 80051dc:	e005      	b.n	80051ea <HAL_RCC_GetSysClockFreq+0x5a>
 80051de:	f7ff f991 	bl	8004504 <LL_RCC_MSI_GetRangeAfterStandby>
 80051e2:	4603      	mov	r3, r0
 80051e4:	0a1b      	lsrs	r3, r3, #8
 80051e6:	f003 030f 	and.w	r3, r3, #15
 80051ea:	4a36      	ldr	r2, [pc, #216]	; (80052c4 <HAL_RCC_GetSysClockFreq+0x134>)
 80051ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051f0:	e014      	b.n	800521c <HAL_RCC_GetSysClockFreq+0x8c>
 80051f2:	f7ff f96c 	bl	80044ce <LL_RCC_MSI_IsEnabledRangeSelect>
 80051f6:	4603      	mov	r3, r0
 80051f8:	2b01      	cmp	r3, #1
 80051fa:	d106      	bne.n	800520a <HAL_RCC_GetSysClockFreq+0x7a>
 80051fc:	f7ff f977 	bl	80044ee <LL_RCC_MSI_GetRange>
 8005200:	4603      	mov	r3, r0
 8005202:	091b      	lsrs	r3, r3, #4
 8005204:	f003 030f 	and.w	r3, r3, #15
 8005208:	e005      	b.n	8005216 <HAL_RCC_GetSysClockFreq+0x86>
 800520a:	f7ff f97b 	bl	8004504 <LL_RCC_MSI_GetRangeAfterStandby>
 800520e:	4603      	mov	r3, r0
 8005210:	091b      	lsrs	r3, r3, #4
 8005212:	f003 030f 	and.w	r3, r3, #15
 8005216:	4a2b      	ldr	r2, [pc, #172]	; (80052c4 <HAL_RCC_GetSysClockFreq+0x134>)
 8005218:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800521c:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800521e:	68bb      	ldr	r3, [r7, #8]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d115      	bne.n	8005250 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8005224:	693b      	ldr	r3, [r7, #16]
 8005226:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005228:	e012      	b.n	8005250 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800522a:	68bb      	ldr	r3, [r7, #8]
 800522c:	2b04      	cmp	r3, #4
 800522e:	d102      	bne.n	8005236 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005230:	4b25      	ldr	r3, [pc, #148]	; (80052c8 <HAL_RCC_GetSysClockFreq+0x138>)
 8005232:	617b      	str	r3, [r7, #20]
 8005234:	e00c      	b.n	8005250 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005236:	68bb      	ldr	r3, [r7, #8]
 8005238:	2b08      	cmp	r3, #8
 800523a:	d109      	bne.n	8005250 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800523c:	f7ff f85a 	bl	80042f4 <LL_RCC_HSE_IsEnabledDiv2>
 8005240:	4603      	mov	r3, r0
 8005242:	2b01      	cmp	r3, #1
 8005244:	d102      	bne.n	800524c <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8005246:	4b20      	ldr	r3, [pc, #128]	; (80052c8 <HAL_RCC_GetSysClockFreq+0x138>)
 8005248:	617b      	str	r3, [r7, #20]
 800524a:	e001      	b.n	8005250 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800524c:	4b1f      	ldr	r3, [pc, #124]	; (80052cc <HAL_RCC_GetSysClockFreq+0x13c>)
 800524e:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005250:	f7ff f98b 	bl	800456a <LL_RCC_GetSysClkSource>
 8005254:	4603      	mov	r3, r0
 8005256:	2b0c      	cmp	r3, #12
 8005258:	d12f      	bne.n	80052ba <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800525a:	f7ff fa72 	bl	8004742 <LL_RCC_PLL_GetMainSource>
 800525e:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2b02      	cmp	r3, #2
 8005264:	d003      	beq.n	800526e <HAL_RCC_GetSysClockFreq+0xde>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2b03      	cmp	r3, #3
 800526a:	d003      	beq.n	8005274 <HAL_RCC_GetSysClockFreq+0xe4>
 800526c:	e00d      	b.n	800528a <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800526e:	4b16      	ldr	r3, [pc, #88]	; (80052c8 <HAL_RCC_GetSysClockFreq+0x138>)
 8005270:	60fb      	str	r3, [r7, #12]
        break;
 8005272:	e00d      	b.n	8005290 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005274:	f7ff f83e 	bl	80042f4 <LL_RCC_HSE_IsEnabledDiv2>
 8005278:	4603      	mov	r3, r0
 800527a:	2b01      	cmp	r3, #1
 800527c:	d102      	bne.n	8005284 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800527e:	4b12      	ldr	r3, [pc, #72]	; (80052c8 <HAL_RCC_GetSysClockFreq+0x138>)
 8005280:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8005282:	e005      	b.n	8005290 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8005284:	4b11      	ldr	r3, [pc, #68]	; (80052cc <HAL_RCC_GetSysClockFreq+0x13c>)
 8005286:	60fb      	str	r3, [r7, #12]
        break;
 8005288:	e002      	b.n	8005290 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 800528a:	693b      	ldr	r3, [r7, #16]
 800528c:	60fb      	str	r3, [r7, #12]
        break;
 800528e:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8005290:	f7ff fa35 	bl	80046fe <LL_RCC_PLL_GetN>
 8005294:	4602      	mov	r2, r0
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	fb03 f402 	mul.w	r4, r3, r2
 800529c:	f7ff fa46 	bl	800472c <LL_RCC_PLL_GetDivider>
 80052a0:	4603      	mov	r3, r0
 80052a2:	091b      	lsrs	r3, r3, #4
 80052a4:	3301      	adds	r3, #1
 80052a6:	fbb4 f4f3 	udiv	r4, r4, r3
 80052aa:	f7ff fa34 	bl	8004716 <LL_RCC_PLL_GetR>
 80052ae:	4603      	mov	r3, r0
 80052b0:	0f5b      	lsrs	r3, r3, #29
 80052b2:	3301      	adds	r3, #1
 80052b4:	fbb4 f3f3 	udiv	r3, r4, r3
 80052b8:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80052ba:	697b      	ldr	r3, [r7, #20]
}
 80052bc:	4618      	mov	r0, r3
 80052be:	371c      	adds	r7, #28
 80052c0:	46bd      	mov	sp, r7
 80052c2:	bd90      	pop	{r4, r7, pc}
 80052c4:	0800cfb4 	.word	0x0800cfb4
 80052c8:	00f42400 	.word	0x00f42400
 80052cc:	01e84800 	.word	0x01e84800

080052d0 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80052d0:	b598      	push	{r3, r4, r7, lr}
 80052d2:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80052d4:	f7ff ff5c 	bl	8005190 <HAL_RCC_GetSysClockFreq>
 80052d8:	4604      	mov	r4, r0
 80052da:	f7ff f9b5 	bl	8004648 <LL_RCC_GetAHBPrescaler>
 80052de:	4603      	mov	r3, r0
 80052e0:	091b      	lsrs	r3, r3, #4
 80052e2:	f003 030f 	and.w	r3, r3, #15
 80052e6:	4a03      	ldr	r2, [pc, #12]	; (80052f4 <HAL_RCC_GetHCLKFreq+0x24>)
 80052e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052ec:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80052f0:	4618      	mov	r0, r3
 80052f2:	bd98      	pop	{r3, r4, r7, pc}
 80052f4:	0800cf54 	.word	0x0800cf54

080052f8 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80052f8:	b598      	push	{r3, r4, r7, lr}
 80052fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80052fc:	f7ff ffe8 	bl	80052d0 <HAL_RCC_GetHCLKFreq>
 8005300:	4604      	mov	r4, r0
 8005302:	f7ff f9b9 	bl	8004678 <LL_RCC_GetAPB1Prescaler>
 8005306:	4603      	mov	r3, r0
 8005308:	0a1b      	lsrs	r3, r3, #8
 800530a:	4a03      	ldr	r2, [pc, #12]	; (8005318 <HAL_RCC_GetPCLK1Freq+0x20>)
 800530c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005310:	fa24 f303 	lsr.w	r3, r4, r3
}
 8005314:	4618      	mov	r0, r3
 8005316:	bd98      	pop	{r3, r4, r7, pc}
 8005318:	0800cf94 	.word	0x0800cf94

0800531c <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800531c:	b598      	push	{r3, r4, r7, lr}
 800531e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8005320:	f7ff ffd6 	bl	80052d0 <HAL_RCC_GetHCLKFreq>
 8005324:	4604      	mov	r4, r0
 8005326:	f7ff f9b2 	bl	800468e <LL_RCC_GetAPB2Prescaler>
 800532a:	4603      	mov	r3, r0
 800532c:	0adb      	lsrs	r3, r3, #11
 800532e:	4a03      	ldr	r2, [pc, #12]	; (800533c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005330:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005334:	fa24 f303 	lsr.w	r3, r4, r3
}
 8005338:	4618      	mov	r0, r3
 800533a:	bd98      	pop	{r3, r4, r7, pc}
 800533c:	0800cf94 	.word	0x0800cf94

08005340 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8005340:	b590      	push	{r4, r7, lr}
 8005342:	b085      	sub	sp, #20
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	091b      	lsrs	r3, r3, #4
 800534c:	f003 030f 	and.w	r3, r3, #15
 8005350:	4a10      	ldr	r2, [pc, #64]	; (8005394 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8005352:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005356:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8005358:	f7ff f981 	bl	800465e <LL_RCC_GetAHB3Prescaler>
 800535c:	4603      	mov	r3, r0
 800535e:	091b      	lsrs	r3, r3, #4
 8005360:	f003 030f 	and.w	r3, r3, #15
 8005364:	4a0c      	ldr	r2, [pc, #48]	; (8005398 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8005366:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800536a:	68fa      	ldr	r2, [r7, #12]
 800536c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005370:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8005372:	68bb      	ldr	r3, [r7, #8]
 8005374:	4a09      	ldr	r2, [pc, #36]	; (800539c <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8005376:	fba2 2303 	umull	r2, r3, r2, r3
 800537a:	0c9c      	lsrs	r4, r3, #18
 800537c:	f7fe ff80 	bl	8004280 <HAL_PWREx_GetVoltageRange>
 8005380:	4603      	mov	r3, r0
 8005382:	4619      	mov	r1, r3
 8005384:	4620      	mov	r0, r4
 8005386:	f000 f80b 	bl	80053a0 <RCC_SetFlashLatency>
 800538a:	4603      	mov	r3, r0
}
 800538c:	4618      	mov	r0, r3
 800538e:	3714      	adds	r7, #20
 8005390:	46bd      	mov	sp, r7
 8005392:	bd90      	pop	{r4, r7, pc}
 8005394:	0800cfb4 	.word	0x0800cfb4
 8005398:	0800cf54 	.word	0x0800cf54
 800539c:	431bde83 	.word	0x431bde83

080053a0 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b08e      	sub	sp, #56	; 0x38
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
 80053a8:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 80053aa:	4a3a      	ldr	r2, [pc, #232]	; (8005494 <RCC_SetFlashLatency+0xf4>)
 80053ac:	f107 0320 	add.w	r3, r7, #32
 80053b0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80053b4:	6018      	str	r0, [r3, #0]
 80053b6:	3304      	adds	r3, #4
 80053b8:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 80053ba:	4a37      	ldr	r2, [pc, #220]	; (8005498 <RCC_SetFlashLatency+0xf8>)
 80053bc:	f107 0318 	add.w	r3, r7, #24
 80053c0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80053c4:	6018      	str	r0, [r3, #0]
 80053c6:	3304      	adds	r3, #4
 80053c8:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 80053ca:	4a34      	ldr	r2, [pc, #208]	; (800549c <RCC_SetFlashLatency+0xfc>)
 80053cc:	f107 030c 	add.w	r3, r7, #12
 80053d0:	ca07      	ldmia	r2, {r0, r1, r2}
 80053d2:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80053d6:	2300      	movs	r3, #0
 80053d8:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80053e0:	d11b      	bne.n	800541a <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80053e2:	2300      	movs	r3, #0
 80053e4:	633b      	str	r3, [r7, #48]	; 0x30
 80053e6:	e014      	b.n	8005412 <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80053e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053ea:	005b      	lsls	r3, r3, #1
 80053ec:	3338      	adds	r3, #56	; 0x38
 80053ee:	443b      	add	r3, r7
 80053f0:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80053f4:	461a      	mov	r2, r3
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d807      	bhi.n	800540c <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80053fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053fe:	009b      	lsls	r3, r3, #2
 8005400:	3338      	adds	r3, #56	; 0x38
 8005402:	443b      	add	r3, r7
 8005404:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8005408:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800540a:	e021      	b.n	8005450 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800540c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800540e:	3301      	adds	r3, #1
 8005410:	633b      	str	r3, [r7, #48]	; 0x30
 8005412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005414:	2b02      	cmp	r3, #2
 8005416:	d9e7      	bls.n	80053e8 <RCC_SetFlashLatency+0x48>
 8005418:	e01a      	b.n	8005450 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800541a:	2300      	movs	r3, #0
 800541c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800541e:	e014      	b.n	800544a <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8005420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005422:	005b      	lsls	r3, r3, #1
 8005424:	3338      	adds	r3, #56	; 0x38
 8005426:	443b      	add	r3, r7
 8005428:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 800542c:	461a      	mov	r2, r3
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	4293      	cmp	r3, r2
 8005432:	d807      	bhi.n	8005444 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8005434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005436:	009b      	lsls	r3, r3, #2
 8005438:	3338      	adds	r3, #56	; 0x38
 800543a:	443b      	add	r3, r7
 800543c:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8005440:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005442:	e005      	b.n	8005450 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005446:	3301      	adds	r3, #1
 8005448:	62fb      	str	r3, [r7, #44]	; 0x2c
 800544a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800544c:	2b02      	cmp	r3, #2
 800544e:	d9e7      	bls.n	8005420 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005450:	4b13      	ldr	r3, [pc, #76]	; (80054a0 <RCC_SetFlashLatency+0x100>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f023 0207 	bic.w	r2, r3, #7
 8005458:	4911      	ldr	r1, [pc, #68]	; (80054a0 <RCC_SetFlashLatency+0x100>)
 800545a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800545c:	4313      	orrs	r3, r2
 800545e:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005460:	f7fd fbd0 	bl	8002c04 <HAL_GetTick>
 8005464:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8005466:	e008      	b.n	800547a <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005468:	f7fd fbcc 	bl	8002c04 <HAL_GetTick>
 800546c:	4602      	mov	r2, r0
 800546e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005470:	1ad3      	subs	r3, r2, r3
 8005472:	2b02      	cmp	r3, #2
 8005474:	d901      	bls.n	800547a <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 8005476:	2303      	movs	r3, #3
 8005478:	e007      	b.n	800548a <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800547a:	4b09      	ldr	r3, [pc, #36]	; (80054a0 <RCC_SetFlashLatency+0x100>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f003 0307 	and.w	r3, r3, #7
 8005482:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005484:	429a      	cmp	r2, r3
 8005486:	d1ef      	bne.n	8005468 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8005488:	2300      	movs	r3, #0
}
 800548a:	4618      	mov	r0, r3
 800548c:	3738      	adds	r7, #56	; 0x38
 800548e:	46bd      	mov	sp, r7
 8005490:	bd80      	pop	{r7, pc}
 8005492:	bf00      	nop
 8005494:	0800cf14 	.word	0x0800cf14
 8005498:	0800cf1c 	.word	0x0800cf1c
 800549c:	0800cf24 	.word	0x0800cf24
 80054a0:	58004000 	.word	0x58004000

080054a4 <LL_RCC_LSE_IsReady>:
{
 80054a4:	b480      	push	{r7}
 80054a6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80054a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054b0:	f003 0302 	and.w	r3, r3, #2
 80054b4:	2b02      	cmp	r3, #2
 80054b6:	d101      	bne.n	80054bc <LL_RCC_LSE_IsReady+0x18>
 80054b8:	2301      	movs	r3, #1
 80054ba:	e000      	b.n	80054be <LL_RCC_LSE_IsReady+0x1a>
 80054bc:	2300      	movs	r3, #0
}
 80054be:	4618      	mov	r0, r3
 80054c0:	46bd      	mov	sp, r7
 80054c2:	bc80      	pop	{r7}
 80054c4:	4770      	bx	lr

080054c6 <LL_RCC_SetUSARTClockSource>:
{
 80054c6:	b480      	push	{r7}
 80054c8:	b083      	sub	sp, #12
 80054ca:	af00      	add	r7, sp, #0
 80054cc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 80054ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054d2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	0c1b      	lsrs	r3, r3, #16
 80054da:	43db      	mvns	r3, r3
 80054dc:	401a      	ands	r2, r3
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	b29b      	uxth	r3, r3
 80054e2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80054e6:	4313      	orrs	r3, r2
 80054e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80054ec:	bf00      	nop
 80054ee:	370c      	adds	r7, #12
 80054f0:	46bd      	mov	sp, r7
 80054f2:	bc80      	pop	{r7}
 80054f4:	4770      	bx	lr

080054f6 <LL_RCC_SetI2SClockSource>:
{
 80054f6:	b480      	push	{r7}
 80054f8:	b083      	sub	sp, #12
 80054fa:	af00      	add	r7, sp, #0
 80054fc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 80054fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005502:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005506:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800550a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	4313      	orrs	r3, r2
 8005512:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005516:	bf00      	nop
 8005518:	370c      	adds	r7, #12
 800551a:	46bd      	mov	sp, r7
 800551c:	bc80      	pop	{r7}
 800551e:	4770      	bx	lr

08005520 <LL_RCC_SetLPUARTClockSource>:
{
 8005520:	b480      	push	{r7}
 8005522:	b083      	sub	sp, #12
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8005528:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800552c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005530:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005534:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	4313      	orrs	r3, r2
 800553c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005540:	bf00      	nop
 8005542:	370c      	adds	r7, #12
 8005544:	46bd      	mov	sp, r7
 8005546:	bc80      	pop	{r7}
 8005548:	4770      	bx	lr

0800554a <LL_RCC_SetI2CClockSource>:
{
 800554a:	b480      	push	{r7}
 800554c:	b083      	sub	sp, #12
 800554e:	af00      	add	r7, sp, #0
 8005550:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8005552:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005556:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	091b      	lsrs	r3, r3, #4
 800555e:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8005562:	43db      	mvns	r3, r3
 8005564:	401a      	ands	r2, r3
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	011b      	lsls	r3, r3, #4
 800556a:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800556e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005572:	4313      	orrs	r3, r2
 8005574:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005578:	bf00      	nop
 800557a:	370c      	adds	r7, #12
 800557c:	46bd      	mov	sp, r7
 800557e:	bc80      	pop	{r7}
 8005580:	4770      	bx	lr

08005582 <LL_RCC_SetLPTIMClockSource>:
{
 8005582:	b480      	push	{r7}
 8005584:	b083      	sub	sp, #12
 8005586:	af00      	add	r7, sp, #0
 8005588:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800558a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800558e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	0c1b      	lsrs	r3, r3, #16
 8005596:	041b      	lsls	r3, r3, #16
 8005598:	43db      	mvns	r3, r3
 800559a:	401a      	ands	r2, r3
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	041b      	lsls	r3, r3, #16
 80055a0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80055a4:	4313      	orrs	r3, r2
 80055a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80055aa:	bf00      	nop
 80055ac:	370c      	adds	r7, #12
 80055ae:	46bd      	mov	sp, r7
 80055b0:	bc80      	pop	{r7}
 80055b2:	4770      	bx	lr

080055b4 <LL_RCC_SetRNGClockSource>:
{
 80055b4:	b480      	push	{r7}
 80055b6:	b083      	sub	sp, #12
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80055bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055c4:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80055c8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	4313      	orrs	r3, r2
 80055d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80055d4:	bf00      	nop
 80055d6:	370c      	adds	r7, #12
 80055d8:	46bd      	mov	sp, r7
 80055da:	bc80      	pop	{r7}
 80055dc:	4770      	bx	lr

080055de <LL_RCC_SetADCClockSource>:
{
 80055de:	b480      	push	{r7}
 80055e0:	b083      	sub	sp, #12
 80055e2:	af00      	add	r7, sp, #0
 80055e4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80055e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055ee:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80055f2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	4313      	orrs	r3, r2
 80055fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80055fe:	bf00      	nop
 8005600:	370c      	adds	r7, #12
 8005602:	46bd      	mov	sp, r7
 8005604:	bc80      	pop	{r7}
 8005606:	4770      	bx	lr

08005608 <LL_RCC_SetRTCClockSource>:
{
 8005608:	b480      	push	{r7}
 800560a:	b083      	sub	sp, #12
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8005610:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005614:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005618:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800561c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	4313      	orrs	r3, r2
 8005624:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8005628:	bf00      	nop
 800562a:	370c      	adds	r7, #12
 800562c:	46bd      	mov	sp, r7
 800562e:	bc80      	pop	{r7}
 8005630:	4770      	bx	lr

08005632 <LL_RCC_GetRTCClockSource>:
{
 8005632:	b480      	push	{r7}
 8005634:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8005636:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800563a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800563e:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8005642:	4618      	mov	r0, r3
 8005644:	46bd      	mov	sp, r7
 8005646:	bc80      	pop	{r7}
 8005648:	4770      	bx	lr

0800564a <LL_RCC_ForceBackupDomainReset>:
{
 800564a:	b480      	push	{r7}
 800564c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800564e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005652:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005656:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800565a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800565e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005662:	bf00      	nop
 8005664:	46bd      	mov	sp, r7
 8005666:	bc80      	pop	{r7}
 8005668:	4770      	bx	lr

0800566a <LL_RCC_ReleaseBackupDomainReset>:
{
 800566a:	b480      	push	{r7}
 800566c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800566e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005672:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005676:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800567a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800567e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005682:	bf00      	nop
 8005684:	46bd      	mov	sp, r7
 8005686:	bc80      	pop	{r7}
 8005688:	4770      	bx	lr
	...

0800568c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b086      	sub	sp, #24
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8005694:	2300      	movs	r3, #0
 8005696:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8005698:	2300      	movs	r3, #0
 800569a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800569c:	2300      	movs	r3, #0
 800569e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d058      	beq.n	800575e <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 80056ac:	f7fe fdda 	bl	8004264 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80056b0:	f7fd faa8 	bl	8002c04 <HAL_GetTick>
 80056b4:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 80056b6:	e009      	b.n	80056cc <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056b8:	f7fd faa4 	bl	8002c04 <HAL_GetTick>
 80056bc:	4602      	mov	r2, r0
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	1ad3      	subs	r3, r2, r3
 80056c2:	2b02      	cmp	r3, #2
 80056c4:	d902      	bls.n	80056cc <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 80056c6:	2303      	movs	r3, #3
 80056c8:	74fb      	strb	r3, [r7, #19]
        break;
 80056ca:	e006      	b.n	80056da <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 80056cc:	4b7b      	ldr	r3, [pc, #492]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056d8:	d1ee      	bne.n	80056b8 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 80056da:	7cfb      	ldrb	r3, [r7, #19]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d13c      	bne.n	800575a <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 80056e0:	f7ff ffa7 	bl	8005632 <LL_RCC_GetRTCClockSource>
 80056e4:	4602      	mov	r2, r0
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056ea:	429a      	cmp	r2, r3
 80056ec:	d00f      	beq.n	800570e <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80056ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056fa:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80056fc:	f7ff ffa5 	bl	800564a <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005700:	f7ff ffb3 	bl	800566a <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005704:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005708:	697b      	ldr	r3, [r7, #20]
 800570a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 800570e:	697b      	ldr	r3, [r7, #20]
 8005710:	f003 0302 	and.w	r3, r3, #2
 8005714:	2b00      	cmp	r3, #0
 8005716:	d014      	beq.n	8005742 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005718:	f7fd fa74 	bl	8002c04 <HAL_GetTick>
 800571c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 800571e:	e00b      	b.n	8005738 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005720:	f7fd fa70 	bl	8002c04 <HAL_GetTick>
 8005724:	4602      	mov	r2, r0
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	1ad3      	subs	r3, r2, r3
 800572a:	f241 3288 	movw	r2, #5000	; 0x1388
 800572e:	4293      	cmp	r3, r2
 8005730:	d902      	bls.n	8005738 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8005732:	2303      	movs	r3, #3
 8005734:	74fb      	strb	r3, [r7, #19]
            break;
 8005736:	e004      	b.n	8005742 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8005738:	f7ff feb4 	bl	80054a4 <LL_RCC_LSE_IsReady>
 800573c:	4603      	mov	r3, r0
 800573e:	2b01      	cmp	r3, #1
 8005740:	d1ee      	bne.n	8005720 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8005742:	7cfb      	ldrb	r3, [r7, #19]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d105      	bne.n	8005754 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800574c:	4618      	mov	r0, r3
 800574e:	f7ff ff5b 	bl	8005608 <LL_RCC_SetRTCClockSource>
 8005752:	e004      	b.n	800575e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005754:	7cfb      	ldrb	r3, [r7, #19]
 8005756:	74bb      	strb	r3, [r7, #18]
 8005758:	e001      	b.n	800575e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800575a:	7cfb      	ldrb	r3, [r7, #19]
 800575c:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f003 0301 	and.w	r3, r3, #1
 8005766:	2b00      	cmp	r3, #0
 8005768:	d004      	beq.n	8005774 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	685b      	ldr	r3, [r3, #4]
 800576e:	4618      	mov	r0, r3
 8005770:	f7ff fea9 	bl	80054c6 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f003 0302 	and.w	r3, r3, #2
 800577c:	2b00      	cmp	r3, #0
 800577e:	d004      	beq.n	800578a <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	689b      	ldr	r3, [r3, #8]
 8005784:	4618      	mov	r0, r3
 8005786:	f7ff fe9e 	bl	80054c6 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f003 0320 	and.w	r3, r3, #32
 8005792:	2b00      	cmp	r3, #0
 8005794:	d004      	beq.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	691b      	ldr	r3, [r3, #16]
 800579a:	4618      	mov	r0, r3
 800579c:	f7ff fec0 	bl	8005520 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d004      	beq.n	80057b6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6a1b      	ldr	r3, [r3, #32]
 80057b0:	4618      	mov	r0, r3
 80057b2:	f7ff fee6 	bl	8005582 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d004      	beq.n	80057cc <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057c6:	4618      	mov	r0, r3
 80057c8:	f7ff fedb 	bl	8005582 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d004      	beq.n	80057e2 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057dc:	4618      	mov	r0, r3
 80057de:	f7ff fed0 	bl	8005582 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d004      	beq.n	80057f8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	695b      	ldr	r3, [r3, #20]
 80057f2:	4618      	mov	r0, r3
 80057f4:	f7ff fea9 	bl	800554a <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005800:	2b00      	cmp	r3, #0
 8005802:	d004      	beq.n	800580e <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	699b      	ldr	r3, [r3, #24]
 8005808:	4618      	mov	r0, r3
 800580a:	f7ff fe9e 	bl	800554a <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005816:	2b00      	cmp	r3, #0
 8005818:	d004      	beq.n	8005824 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	69db      	ldr	r3, [r3, #28]
 800581e:	4618      	mov	r0, r3
 8005820:	f7ff fe93 	bl	800554a <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f003 0310 	and.w	r3, r3, #16
 800582c:	2b00      	cmp	r3, #0
 800582e:	d011      	beq.n	8005854 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	68db      	ldr	r3, [r3, #12]
 8005834:	4618      	mov	r0, r3
 8005836:	f7ff fe5e 	bl	80054f6 <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	68db      	ldr	r3, [r3, #12]
 800583e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005842:	d107      	bne.n	8005854 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8005844:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005848:	68db      	ldr	r3, [r3, #12]
 800584a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800584e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005852:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800585c:	2b00      	cmp	r3, #0
 800585e:	d010      	beq.n	8005882 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005864:	4618      	mov	r0, r3
 8005866:	f7ff fea5 	bl	80055b4 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800586e:	2b00      	cmp	r3, #0
 8005870:	d107      	bne.n	8005882 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8005872:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005876:	68db      	ldr	r3, [r3, #12]
 8005878:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800587c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005880:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800588a:	2b00      	cmp	r3, #0
 800588c:	d011      	beq.n	80058b2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005892:	4618      	mov	r0, r3
 8005894:	f7ff fea3 	bl	80055de <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800589c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80058a0:	d107      	bne.n	80058b2 <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80058a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058a6:	68db      	ldr	r3, [r3, #12]
 80058a8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80058ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058b0:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 80058b2:	7cbb      	ldrb	r3, [r7, #18]
}
 80058b4:	4618      	mov	r0, r3
 80058b6:	3718      	adds	r7, #24
 80058b8:	46bd      	mov	sp, r7
 80058ba:	bd80      	pop	{r7, pc}
 80058bc:	58000400 	.word	0x58000400

080058c0 <LL_PWR_SetRadioBusyTrigger>:
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_NONE
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_WU_IT
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRadioBusyTrigger(uint32_t RadioBusyTrigger)
{
 80058c0:	b480      	push	{r7}
 80058c2:	b083      	sub	sp, #12
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 80058c8:	4b06      	ldr	r3, [pc, #24]	; (80058e4 <LL_PWR_SetRadioBusyTrigger+0x24>)
 80058ca:	689b      	ldr	r3, [r3, #8]
 80058cc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80058d0:	4904      	ldr	r1, [pc, #16]	; (80058e4 <LL_PWR_SetRadioBusyTrigger+0x24>)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	4313      	orrs	r3, r2
 80058d6:	608b      	str	r3, [r1, #8]
}
 80058d8:	bf00      	nop
 80058da:	370c      	adds	r7, #12
 80058dc:	46bd      	mov	sp, r7
 80058de:	bc80      	pop	{r7}
 80058e0:	4770      	bx	lr
 80058e2:	bf00      	nop
 80058e4:	58000400 	.word	0x58000400

080058e8 <LL_PWR_UnselectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level high.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_UnselectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_UnselectSUBGHZSPI_NSS(void)
{
 80058e8:	b480      	push	{r7}
 80058ea:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80058ec:	4b05      	ldr	r3, [pc, #20]	; (8005904 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 80058ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058f2:	4a04      	ldr	r2, [pc, #16]	; (8005904 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 80058f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80058fc:	bf00      	nop
 80058fe:	46bd      	mov	sp, r7
 8005900:	bc80      	pop	{r7}
 8005902:	4770      	bx	lr
 8005904:	58000400 	.word	0x58000400

08005908 <LL_PWR_SelectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level low.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_SelectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SelectSUBGHZSPI_NSS(void)
{
 8005908:	b480      	push	{r7}
 800590a:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 800590c:	4b05      	ldr	r3, [pc, #20]	; (8005924 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 800590e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005912:	4a04      	ldr	r2, [pc, #16]	; (8005924 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8005914:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005918:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800591c:	bf00      	nop
 800591e:	46bd      	mov	sp, r7
 8005920:	bc80      	pop	{r7}
 8005922:	4770      	bx	lr
 8005924:	58000400 	.word	0x58000400

08005928 <LL_PWR_ClearFlag_RFBUSY>:
  * @brief  Clear radio busy flag
  * @rmtoll SCR          CRFBUSYF      LL_PWR_ClearFlag_RFBUSY
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_RFBUSY(void)
{
 8005928:	b480      	push	{r7}
 800592a:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 800592c:	4b03      	ldr	r3, [pc, #12]	; (800593c <LL_PWR_ClearFlag_RFBUSY+0x14>)
 800592e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005932:	619a      	str	r2, [r3, #24]
}
 8005934:	bf00      	nop
 8005936:	46bd      	mov	sp, r7
 8005938:	bc80      	pop	{r7}
 800593a:	4770      	bx	lr
 800593c:	58000400 	.word	0x58000400

08005940 <LL_PWR_IsActiveFlag_RFBUSYS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYS       LL_PWR_IsActiveFlag_RFBUSYS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYS(void)
{
 8005940:	b480      	push	{r7}
 8005942:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8005944:	4b06      	ldr	r3, [pc, #24]	; (8005960 <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 8005946:	695b      	ldr	r3, [r3, #20]
 8005948:	f003 0302 	and.w	r3, r3, #2
 800594c:	2b02      	cmp	r3, #2
 800594e:	d101      	bne.n	8005954 <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 8005950:	2301      	movs	r3, #1
 8005952:	e000      	b.n	8005956 <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 8005954:	2300      	movs	r3, #0
}
 8005956:	4618      	mov	r0, r3
 8005958:	46bd      	mov	sp, r7
 800595a:	bc80      	pop	{r7}
 800595c:	4770      	bx	lr
 800595e:	bf00      	nop
 8005960:	58000400 	.word	0x58000400

08005964 <LL_PWR_IsActiveFlag_RFBUSYMS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYMS      LL_PWR_IsActiveFlag_RFBUSYMS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYMS(void)
{
 8005964:	b480      	push	{r7}
 8005966:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8005968:	4b06      	ldr	r3, [pc, #24]	; (8005984 <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 800596a:	695b      	ldr	r3, [r3, #20]
 800596c:	f003 0304 	and.w	r3, r3, #4
 8005970:	2b04      	cmp	r3, #4
 8005972:	d101      	bne.n	8005978 <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 8005974:	2301      	movs	r3, #1
 8005976:	e000      	b.n	800597a <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 8005978:	2300      	movs	r3, #0
}
 800597a:	4618      	mov	r0, r3
 800597c:	46bd      	mov	sp, r7
 800597e:	bc80      	pop	{r7}
 8005980:	4770      	bx	lr
 8005982:	bf00      	nop
 8005984:	58000400 	.word	0x58000400

08005988 <LL_RCC_RF_DisableReset>:
{
 8005988:	b480      	push	{r7}
 800598a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 800598c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005990:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005994:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005998:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800599c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80059a0:	bf00      	nop
 80059a2:	46bd      	mov	sp, r7
 80059a4:	bc80      	pop	{r7}
 80059a6:	4770      	bx	lr

080059a8 <LL_RCC_IsRFUnderReset>:
{
 80059a8:	b480      	push	{r7}
 80059aa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 80059ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80059b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80059b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80059bc:	d101      	bne.n	80059c2 <LL_RCC_IsRFUnderReset+0x1a>
 80059be:	2301      	movs	r3, #1
 80059c0:	e000      	b.n	80059c4 <LL_RCC_IsRFUnderReset+0x1c>
 80059c2:	2300      	movs	r3, #0
}
 80059c4:	4618      	mov	r0, r3
 80059c6:	46bd      	mov	sp, r7
 80059c8:	bc80      	pop	{r7}
 80059ca:	4770      	bx	lr

080059cc <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 80059cc:	b480      	push	{r7}
 80059ce:	b083      	sub	sp, #12
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80059d4:	4b06      	ldr	r3, [pc, #24]	; (80059f0 <LL_EXTI_EnableIT_32_63+0x24>)
 80059d6:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80059da:	4905      	ldr	r1, [pc, #20]	; (80059f0 <LL_EXTI_EnableIT_32_63+0x24>)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	4313      	orrs	r3, r2
 80059e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80059e4:	bf00      	nop
 80059e6:	370c      	adds	r7, #12
 80059e8:	46bd      	mov	sp, r7
 80059ea:	bc80      	pop	{r7}
 80059ec:	4770      	bx	lr
 80059ee:	bf00      	nop
 80059f0:	58000800 	.word	0x58000800

080059f4 <HAL_SUBGHZ_Init>:
  *         set the state to HAL_SUBGHZ_STATE_RESET_RF_READY with __HAL_SUBGHZ_RESET_HANDLE_STATE_RF_READY
  *         to avoid the reset of Radio peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b084      	sub	sp, #16
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  HAL_SUBGHZ_StateTypeDef subghz_state;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d103      	bne.n	8005a0a <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 8005a02:	2301      	movs	r3, #1
 8005a04:	73fb      	strb	r3, [r7, #15]
    return status;
 8005a06:	7bfb      	ldrb	r3, [r7, #15]
 8005a08:	e052      	b.n	8005ab0 <HAL_SUBGHZ_Init+0xbc>
  }
  else
  {
    status = HAL_OK;
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  subghz_state = hsubghz->State;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	799b      	ldrb	r3, [r3, #6]
 8005a12:	73bb      	strb	r3, [r7, #14]
  if ((subghz_state == HAL_SUBGHZ_STATE_RESET) ||
 8005a14:	7bbb      	ldrb	r3, [r7, #14]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d002      	beq.n	8005a20 <HAL_SUBGHZ_Init+0x2c>
 8005a1a:	7bbb      	ldrb	r3, [r7, #14]
 8005a1c:	2b03      	cmp	r3, #3
 8005a1e:	d109      	bne.n	8005a34 <HAL_SUBGHZ_Init+0x40>
      (subghz_state == HAL_SUBGHZ_STATE_RESET_RF_READY))
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2200      	movs	r2, #0
 8005a24:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 8005a26:	6878      	ldr	r0, [r7, #4]
 8005a28:	f7fd f8d2 	bl	8002bd0 <HAL_SUBGHZ_MspInit>
#if defined(CM0PLUS)
    /* Enable EXTI 44 : Radio IRQ ITs for CPU2 */
    LL_C2_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
#else
    /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
    LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 8005a2c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8005a30:	f7ff ffcc 	bl	80059cc <LL_EXTI_EnableIT_32_63>
#endif /* CM0PLUS */
  }

  if (subghz_state == HAL_SUBGHZ_STATE_RESET)
 8005a34:	7bbb      	ldrb	r3, [r7, #14]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d126      	bne.n	8005a88 <HAL_SUBGHZ_Init+0x94>
  {
    /* Reinitialize Radio peripheral only if SUBGHZ is in full RESET state */
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2202      	movs	r2, #2
 8005a3e:	719a      	strb	r2, [r3, #6]

    /* De-asserts the reset signal of the Radio peripheral */
    LL_RCC_RF_DisableReset();
 8005a40:	f7ff ffa2 	bl	8005988 <LL_RCC_RF_DisableReset>

    /* Verify that Radio in reset status flag is set */
    count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8005a44:	4b1c      	ldr	r3, [pc, #112]	; (8005ab8 <HAL_SUBGHZ_Init+0xc4>)
 8005a46:	681a      	ldr	r2, [r3, #0]
 8005a48:	4613      	mov	r3, r2
 8005a4a:	00db      	lsls	r3, r3, #3
 8005a4c:	1a9b      	subs	r3, r3, r2
 8005a4e:	009b      	lsls	r3, r3, #2
 8005a50:	0cdb      	lsrs	r3, r3, #19
 8005a52:	2264      	movs	r2, #100	; 0x64
 8005a54:	fb02 f303 	mul.w	r3, r2, r3
 8005a58:	60bb      	str	r3, [r7, #8]

    do
    {
      if (count == 0U)
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d105      	bne.n	8005a6c <HAL_SUBGHZ_Init+0x78>
      {
        status  = HAL_ERROR;
 8005a60:	2301      	movs	r3, #1
 8005a62:	73fb      	strb	r3, [r7, #15]
        hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2201      	movs	r2, #1
 8005a68:	609a      	str	r2, [r3, #8]
        break;
 8005a6a:	e007      	b.n	8005a7c <HAL_SUBGHZ_Init+0x88>
      }
      count--;
 8005a6c:	68bb      	ldr	r3, [r7, #8]
 8005a6e:	3b01      	subs	r3, #1
 8005a70:	60bb      	str	r3, [r7, #8]
    } while (LL_RCC_IsRFUnderReset() != 0UL);
 8005a72:	f7ff ff99 	bl	80059a8 <LL_RCC_IsRFUnderReset>
 8005a76:	4603      	mov	r3, r0
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d1ee      	bne.n	8005a5a <HAL_SUBGHZ_Init+0x66>

    /* Asserts the reset signal of the Radio peripheral */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8005a7c:	f7ff ff34 	bl	80058e8 <LL_PWR_UnselectSUBGHZSPI_NSS>
#if defined(CM0PLUS)
    /* Enable wakeup signal of the Radio peripheral */
    LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
    /* Enable wakeup signal of the Radio peripheral */
    LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 8005a80:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8005a84:	f7ff ff1c 	bl	80058c0 <LL_PWR_SetRadioBusyTrigger>
#endif /* CM0PLUS */
  }

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 8005a88:	f7ff ff4e 	bl	8005928 <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 8005a8c:	7bfb      	ldrb	r3, [r7, #15]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d10a      	bne.n	8005aa8 <HAL_SUBGHZ_Init+0xb4>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	4618      	mov	r0, r3
 8005a98:	f000 faac 	bl	8005ff4 <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2201      	movs	r2, #1
 8005aa0:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	609a      	str	r2, [r3, #8]
  }

  hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2201      	movs	r2, #1
 8005aac:	719a      	strb	r2, [r3, #6]

  return status;
 8005aae:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	3710      	adds	r7, #16
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	bd80      	pop	{r7, pc}
 8005ab8:	2000000c 	.word	0x2000000c

08005abc <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b086      	sub	sp, #24
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	60f8      	str	r0, [r7, #12]
 8005ac4:	607a      	str	r2, [r7, #4]
 8005ac6:	461a      	mov	r2, r3
 8005ac8:	460b      	mov	r3, r1
 8005aca:	817b      	strh	r3, [r7, #10]
 8005acc:	4613      	mov	r3, r2
 8005ace:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	799b      	ldrb	r3, [r3, #6]
 8005ad4:	b2db      	uxtb	r3, r3
 8005ad6:	2b01      	cmp	r3, #1
 8005ad8:	d14a      	bne.n	8005b70 <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	795b      	ldrb	r3, [r3, #5]
 8005ade:	2b01      	cmp	r3, #1
 8005ae0:	d101      	bne.n	8005ae6 <HAL_SUBGHZ_WriteRegisters+0x2a>
 8005ae2:	2302      	movs	r3, #2
 8005ae4:	e045      	b.n	8005b72 <HAL_SUBGHZ_WriteRegisters+0xb6>
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	2201      	movs	r2, #1
 8005aea:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	2202      	movs	r2, #2
 8005af0:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8005af2:	68f8      	ldr	r0, [r7, #12]
 8005af4:	f000 fb4c 	bl	8006190 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8005af8:	f7ff ff06 	bl	8005908 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 8005afc:	210d      	movs	r1, #13
 8005afe:	68f8      	ldr	r0, [r7, #12]
 8005b00:	f000 fa98 	bl	8006034 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8005b04:	897b      	ldrh	r3, [r7, #10]
 8005b06:	0a1b      	lsrs	r3, r3, #8
 8005b08:	b29b      	uxth	r3, r3
 8005b0a:	b2db      	uxtb	r3, r3
 8005b0c:	4619      	mov	r1, r3
 8005b0e:	68f8      	ldr	r0, [r7, #12]
 8005b10:	f000 fa90 	bl	8006034 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8005b14:	897b      	ldrh	r3, [r7, #10]
 8005b16:	b2db      	uxtb	r3, r3
 8005b18:	4619      	mov	r1, r3
 8005b1a:	68f8      	ldr	r0, [r7, #12]
 8005b1c:	f000 fa8a 	bl	8006034 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8005b20:	2300      	movs	r3, #0
 8005b22:	82bb      	strh	r3, [r7, #20]
 8005b24:	e00a      	b.n	8005b3c <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8005b26:	8abb      	ldrh	r3, [r7, #20]
 8005b28:	687a      	ldr	r2, [r7, #4]
 8005b2a:	4413      	add	r3, r2
 8005b2c:	781b      	ldrb	r3, [r3, #0]
 8005b2e:	4619      	mov	r1, r3
 8005b30:	68f8      	ldr	r0, [r7, #12]
 8005b32:	f000 fa7f 	bl	8006034 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8005b36:	8abb      	ldrh	r3, [r7, #20]
 8005b38:	3301      	adds	r3, #1
 8005b3a:	82bb      	strh	r3, [r7, #20]
 8005b3c:	8aba      	ldrh	r2, [r7, #20]
 8005b3e:	893b      	ldrh	r3, [r7, #8]
 8005b40:	429a      	cmp	r2, r3
 8005b42:	d3f0      	bcc.n	8005b26 <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8005b44:	f7ff fed0 	bl	80058e8 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8005b48:	68f8      	ldr	r0, [r7, #12]
 8005b4a:	f000 fb45 	bl	80061d8 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	689b      	ldr	r3, [r3, #8]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d002      	beq.n	8005b5c <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 8005b56:	2301      	movs	r3, #1
 8005b58:	75fb      	strb	r3, [r7, #23]
 8005b5a:	e001      	b.n	8005b60 <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	2201      	movs	r2, #1
 8005b64:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	2200      	movs	r2, #0
 8005b6a:	715a      	strb	r2, [r3, #5]

    return status;
 8005b6c:	7dfb      	ldrb	r3, [r7, #23]
 8005b6e:	e000      	b.n	8005b72 <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8005b70:	2302      	movs	r3, #2
  }
}
 8005b72:	4618      	mov	r0, r3
 8005b74:	3718      	adds	r7, #24
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bd80      	pop	{r7, pc}

08005b7a <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 8005b7a:	b580      	push	{r7, lr}
 8005b7c:	b088      	sub	sp, #32
 8005b7e:	af00      	add	r7, sp, #0
 8005b80:	60f8      	str	r0, [r7, #12]
 8005b82:	607a      	str	r2, [r7, #4]
 8005b84:	461a      	mov	r2, r3
 8005b86:	460b      	mov	r3, r1
 8005b88:	817b      	strh	r3, [r7, #10]
 8005b8a:	4613      	mov	r3, r2
 8005b8c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	799b      	ldrb	r3, [r3, #6]
 8005b96:	b2db      	uxtb	r3, r3
 8005b98:	2b01      	cmp	r3, #1
 8005b9a:	d14a      	bne.n	8005c32 <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	795b      	ldrb	r3, [r3, #5]
 8005ba0:	2b01      	cmp	r3, #1
 8005ba2:	d101      	bne.n	8005ba8 <HAL_SUBGHZ_ReadRegisters+0x2e>
 8005ba4:	2302      	movs	r3, #2
 8005ba6:	e045      	b.n	8005c34 <HAL_SUBGHZ_ReadRegisters+0xba>
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	2201      	movs	r2, #1
 8005bac:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8005bae:	68f8      	ldr	r0, [r7, #12]
 8005bb0:	f000 faee 	bl	8006190 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8005bb4:	f7ff fea8 	bl	8005908 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 8005bb8:	211d      	movs	r1, #29
 8005bba:	68f8      	ldr	r0, [r7, #12]
 8005bbc:	f000 fa3a 	bl	8006034 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8005bc0:	897b      	ldrh	r3, [r7, #10]
 8005bc2:	0a1b      	lsrs	r3, r3, #8
 8005bc4:	b29b      	uxth	r3, r3
 8005bc6:	b2db      	uxtb	r3, r3
 8005bc8:	4619      	mov	r1, r3
 8005bca:	68f8      	ldr	r0, [r7, #12]
 8005bcc:	f000 fa32 	bl	8006034 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8005bd0:	897b      	ldrh	r3, [r7, #10]
 8005bd2:	b2db      	uxtb	r3, r3
 8005bd4:	4619      	mov	r1, r3
 8005bd6:	68f8      	ldr	r0, [r7, #12]
 8005bd8:	f000 fa2c 	bl	8006034 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 8005bdc:	2100      	movs	r1, #0
 8005bde:	68f8      	ldr	r0, [r7, #12]
 8005be0:	f000 fa28 	bl	8006034 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8005be4:	2300      	movs	r3, #0
 8005be6:	82fb      	strh	r3, [r7, #22]
 8005be8:	e009      	b.n	8005bfe <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8005bea:	69b9      	ldr	r1, [r7, #24]
 8005bec:	68f8      	ldr	r0, [r7, #12]
 8005bee:	f000 fa77 	bl	80060e0 <SUBGHZSPI_Receive>
      pData++;
 8005bf2:	69bb      	ldr	r3, [r7, #24]
 8005bf4:	3301      	adds	r3, #1
 8005bf6:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8005bf8:	8afb      	ldrh	r3, [r7, #22]
 8005bfa:	3301      	adds	r3, #1
 8005bfc:	82fb      	strh	r3, [r7, #22]
 8005bfe:	8afa      	ldrh	r2, [r7, #22]
 8005c00:	893b      	ldrh	r3, [r7, #8]
 8005c02:	429a      	cmp	r2, r3
 8005c04:	d3f1      	bcc.n	8005bea <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8005c06:	f7ff fe6f 	bl	80058e8 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8005c0a:	68f8      	ldr	r0, [r7, #12]
 8005c0c:	f000 fae4 	bl	80061d8 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	689b      	ldr	r3, [r3, #8]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d002      	beq.n	8005c1e <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 8005c18:	2301      	movs	r3, #1
 8005c1a:	77fb      	strb	r3, [r7, #31]
 8005c1c:	e001      	b.n	8005c22 <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 8005c1e:	2300      	movs	r3, #0
 8005c20:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	2201      	movs	r2, #1
 8005c26:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	715a      	strb	r2, [r3, #5]

    return status;
 8005c2e:	7ffb      	ldrb	r3, [r7, #31]
 8005c30:	e000      	b.n	8005c34 <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 8005c32:	2302      	movs	r3, #2
  }
}
 8005c34:	4618      	mov	r0, r3
 8005c36:	3720      	adds	r7, #32
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	bd80      	pop	{r7, pc}

08005c3c <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b086      	sub	sp, #24
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	60f8      	str	r0, [r7, #12]
 8005c44:	607a      	str	r2, [r7, #4]
 8005c46:	461a      	mov	r2, r3
 8005c48:	460b      	mov	r3, r1
 8005c4a:	72fb      	strb	r3, [r7, #11]
 8005c4c:	4613      	mov	r3, r2
 8005c4e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0U]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	799b      	ldrb	r3, [r3, #6]
 8005c54:	b2db      	uxtb	r3, r3
 8005c56:	2b01      	cmp	r3, #1
 8005c58:	d14a      	bne.n	8005cf0 <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	795b      	ldrb	r3, [r3, #5]
 8005c5e:	2b01      	cmp	r3, #1
 8005c60:	d101      	bne.n	8005c66 <HAL_SUBGHZ_ExecSetCmd+0x2a>
 8005c62:	2302      	movs	r3, #2
 8005c64:	e045      	b.n	8005cf2 <HAL_SUBGHZ_ExecSetCmd+0xb6>
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	2201      	movs	r2, #1
 8005c6a:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8005c6c:	68f8      	ldr	r0, [r7, #12]
 8005c6e:	f000 fa8f 	bl	8006190 <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 8005c72:	7afb      	ldrb	r3, [r7, #11]
 8005c74:	2b84      	cmp	r3, #132	; 0x84
 8005c76:	d002      	beq.n	8005c7e <HAL_SUBGHZ_ExecSetCmd+0x42>
 8005c78:	7afb      	ldrb	r3, [r7, #11]
 8005c7a:	2b94      	cmp	r3, #148	; 0x94
 8005c7c:	d103      	bne.n	8005c86 <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	2201      	movs	r2, #1
 8005c82:	711a      	strb	r2, [r3, #4]
 8005c84:	e002      	b.n	8005c8c <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	2200      	movs	r2, #0
 8005c8a:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8005c8c:	f7ff fe3c 	bl	8005908 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8005c90:	7afb      	ldrb	r3, [r7, #11]
 8005c92:	4619      	mov	r1, r3
 8005c94:	68f8      	ldr	r0, [r7, #12]
 8005c96:	f000 f9cd 	bl	8006034 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	82bb      	strh	r3, [r7, #20]
 8005c9e:	e00a      	b.n	8005cb6 <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8005ca0:	8abb      	ldrh	r3, [r7, #20]
 8005ca2:	687a      	ldr	r2, [r7, #4]
 8005ca4:	4413      	add	r3, r2
 8005ca6:	781b      	ldrb	r3, [r3, #0]
 8005ca8:	4619      	mov	r1, r3
 8005caa:	68f8      	ldr	r0, [r7, #12]
 8005cac:	f000 f9c2 	bl	8006034 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8005cb0:	8abb      	ldrh	r3, [r7, #20]
 8005cb2:	3301      	adds	r3, #1
 8005cb4:	82bb      	strh	r3, [r7, #20]
 8005cb6:	8aba      	ldrh	r2, [r7, #20]
 8005cb8:	893b      	ldrh	r3, [r7, #8]
 8005cba:	429a      	cmp	r2, r3
 8005cbc:	d3f0      	bcc.n	8005ca0 <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8005cbe:	f7ff fe13 	bl	80058e8 <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 8005cc2:	7afb      	ldrb	r3, [r7, #11]
 8005cc4:	2b84      	cmp	r3, #132	; 0x84
 8005cc6:	d002      	beq.n	8005cce <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 8005cc8:	68f8      	ldr	r0, [r7, #12]
 8005cca:	f000 fa85 	bl	80061d8 <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	689b      	ldr	r3, [r3, #8]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d002      	beq.n	8005cdc <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	75fb      	strb	r3, [r7, #23]
 8005cda:	e001      	b.n	8005ce0 <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 8005cdc:	2300      	movs	r3, #0
 8005cde:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	2201      	movs	r2, #1
 8005ce4:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	2200      	movs	r2, #0
 8005cea:	715a      	strb	r2, [r3, #5]

    return status;
 8005cec:	7dfb      	ldrb	r3, [r7, #23]
 8005cee:	e000      	b.n	8005cf2 <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8005cf0:	2302      	movs	r3, #2
  }
}
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	3718      	adds	r7, #24
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	bd80      	pop	{r7, pc}

08005cfa <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8005cfa:	b580      	push	{r7, lr}
 8005cfc:	b088      	sub	sp, #32
 8005cfe:	af00      	add	r7, sp, #0
 8005d00:	60f8      	str	r0, [r7, #12]
 8005d02:	607a      	str	r2, [r7, #4]
 8005d04:	461a      	mov	r2, r3
 8005d06:	460b      	mov	r3, r1
 8005d08:	72fb      	strb	r3, [r7, #11]
 8005d0a:	4613      	mov	r3, r2
 8005d0c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	799b      	ldrb	r3, [r3, #6]
 8005d16:	b2db      	uxtb	r3, r3
 8005d18:	2b01      	cmp	r3, #1
 8005d1a:	d13d      	bne.n	8005d98 <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	795b      	ldrb	r3, [r3, #5]
 8005d20:	2b01      	cmp	r3, #1
 8005d22:	d101      	bne.n	8005d28 <HAL_SUBGHZ_ExecGetCmd+0x2e>
 8005d24:	2302      	movs	r3, #2
 8005d26:	e038      	b.n	8005d9a <HAL_SUBGHZ_ExecGetCmd+0xa0>
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	2201      	movs	r2, #1
 8005d2c:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8005d2e:	68f8      	ldr	r0, [r7, #12]
 8005d30:	f000 fa2e 	bl	8006190 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8005d34:	f7ff fde8 	bl	8005908 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8005d38:	7afb      	ldrb	r3, [r7, #11]
 8005d3a:	4619      	mov	r1, r3
 8005d3c:	68f8      	ldr	r0, [r7, #12]
 8005d3e:	f000 f979 	bl	8006034 <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8005d42:	2100      	movs	r1, #0
 8005d44:	68f8      	ldr	r0, [r7, #12]
 8005d46:	f000 f975 	bl	8006034 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	82fb      	strh	r3, [r7, #22]
 8005d4e:	e009      	b.n	8005d64 <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8005d50:	69b9      	ldr	r1, [r7, #24]
 8005d52:	68f8      	ldr	r0, [r7, #12]
 8005d54:	f000 f9c4 	bl	80060e0 <SUBGHZSPI_Receive>
      pData++;
 8005d58:	69bb      	ldr	r3, [r7, #24]
 8005d5a:	3301      	adds	r3, #1
 8005d5c:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8005d5e:	8afb      	ldrh	r3, [r7, #22]
 8005d60:	3301      	adds	r3, #1
 8005d62:	82fb      	strh	r3, [r7, #22]
 8005d64:	8afa      	ldrh	r2, [r7, #22]
 8005d66:	893b      	ldrh	r3, [r7, #8]
 8005d68:	429a      	cmp	r2, r3
 8005d6a:	d3f1      	bcc.n	8005d50 <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8005d6c:	f7ff fdbc 	bl	80058e8 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8005d70:	68f8      	ldr	r0, [r7, #12]
 8005d72:	f000 fa31 	bl	80061d8 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	689b      	ldr	r3, [r3, #8]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d002      	beq.n	8005d84 <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 8005d7e:	2301      	movs	r3, #1
 8005d80:	77fb      	strb	r3, [r7, #31]
 8005d82:	e001      	b.n	8005d88 <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 8005d84:	2300      	movs	r3, #0
 8005d86:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	2201      	movs	r2, #1
 8005d8c:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	2200      	movs	r2, #0
 8005d92:	715a      	strb	r2, [r3, #5]

    return status;
 8005d94:	7ffb      	ldrb	r3, [r7, #31]
 8005d96:	e000      	b.n	8005d9a <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8005d98:	2302      	movs	r3, #2
  }
}
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	3720      	adds	r7, #32
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	bd80      	pop	{r7, pc}

08005da2 <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 8005da2:	b580      	push	{r7, lr}
 8005da4:	b086      	sub	sp, #24
 8005da6:	af00      	add	r7, sp, #0
 8005da8:	60f8      	str	r0, [r7, #12]
 8005daa:	607a      	str	r2, [r7, #4]
 8005dac:	461a      	mov	r2, r3
 8005dae:	460b      	mov	r3, r1
 8005db0:	72fb      	strb	r3, [r7, #11]
 8005db2:	4613      	mov	r3, r2
 8005db4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	799b      	ldrb	r3, [r3, #6]
 8005dba:	b2db      	uxtb	r3, r3
 8005dbc:	2b01      	cmp	r3, #1
 8005dbe:	d13e      	bne.n	8005e3e <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	795b      	ldrb	r3, [r3, #5]
 8005dc4:	2b01      	cmp	r3, #1
 8005dc6:	d101      	bne.n	8005dcc <HAL_SUBGHZ_WriteBuffer+0x2a>
 8005dc8:	2302      	movs	r3, #2
 8005dca:	e039      	b.n	8005e40 <HAL_SUBGHZ_WriteBuffer+0x9e>
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	2201      	movs	r2, #1
 8005dd0:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8005dd2:	68f8      	ldr	r0, [r7, #12]
 8005dd4:	f000 f9dc 	bl	8006190 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8005dd8:	f7ff fd96 	bl	8005908 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 8005ddc:	210e      	movs	r1, #14
 8005dde:	68f8      	ldr	r0, [r7, #12]
 8005de0:	f000 f928 	bl	8006034 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8005de4:	7afb      	ldrb	r3, [r7, #11]
 8005de6:	4619      	mov	r1, r3
 8005de8:	68f8      	ldr	r0, [r7, #12]
 8005dea:	f000 f923 	bl	8006034 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8005dee:	2300      	movs	r3, #0
 8005df0:	82bb      	strh	r3, [r7, #20]
 8005df2:	e00a      	b.n	8005e0a <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8005df4:	8abb      	ldrh	r3, [r7, #20]
 8005df6:	687a      	ldr	r2, [r7, #4]
 8005df8:	4413      	add	r3, r2
 8005dfa:	781b      	ldrb	r3, [r3, #0]
 8005dfc:	4619      	mov	r1, r3
 8005dfe:	68f8      	ldr	r0, [r7, #12]
 8005e00:	f000 f918 	bl	8006034 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8005e04:	8abb      	ldrh	r3, [r7, #20]
 8005e06:	3301      	adds	r3, #1
 8005e08:	82bb      	strh	r3, [r7, #20]
 8005e0a:	8aba      	ldrh	r2, [r7, #20]
 8005e0c:	893b      	ldrh	r3, [r7, #8]
 8005e0e:	429a      	cmp	r2, r3
 8005e10:	d3f0      	bcc.n	8005df4 <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8005e12:	f7ff fd69 	bl	80058e8 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8005e16:	68f8      	ldr	r0, [r7, #12]
 8005e18:	f000 f9de 	bl	80061d8 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	689b      	ldr	r3, [r3, #8]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d002      	beq.n	8005e2a <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 8005e24:	2301      	movs	r3, #1
 8005e26:	75fb      	strb	r3, [r7, #23]
 8005e28:	e001      	b.n	8005e2e <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	2201      	movs	r2, #1
 8005e32:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	2200      	movs	r2, #0
 8005e38:	715a      	strb	r2, [r3, #5]

    return status;
 8005e3a:	7dfb      	ldrb	r3, [r7, #23]
 8005e3c:	e000      	b.n	8005e40 <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8005e3e:	2302      	movs	r3, #2
  }
}
 8005e40:	4618      	mov	r0, r3
 8005e42:	3718      	adds	r7, #24
 8005e44:	46bd      	mov	sp, r7
 8005e46:	bd80      	pop	{r7, pc}

08005e48 <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b088      	sub	sp, #32
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	60f8      	str	r0, [r7, #12]
 8005e50:	607a      	str	r2, [r7, #4]
 8005e52:	461a      	mov	r2, r3
 8005e54:	460b      	mov	r3, r1
 8005e56:	72fb      	strb	r3, [r7, #11]
 8005e58:	4613      	mov	r3, r2
 8005e5a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	799b      	ldrb	r3, [r3, #6]
 8005e64:	b2db      	uxtb	r3, r3
 8005e66:	2b01      	cmp	r3, #1
 8005e68:	d141      	bne.n	8005eee <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	795b      	ldrb	r3, [r3, #5]
 8005e6e:	2b01      	cmp	r3, #1
 8005e70:	d101      	bne.n	8005e76 <HAL_SUBGHZ_ReadBuffer+0x2e>
 8005e72:	2302      	movs	r3, #2
 8005e74:	e03c      	b.n	8005ef0 <HAL_SUBGHZ_ReadBuffer+0xa8>
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	2201      	movs	r2, #1
 8005e7a:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8005e7c:	68f8      	ldr	r0, [r7, #12]
 8005e7e:	f000 f987 	bl	8006190 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8005e82:	f7ff fd41 	bl	8005908 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 8005e86:	211e      	movs	r1, #30
 8005e88:	68f8      	ldr	r0, [r7, #12]
 8005e8a:	f000 f8d3 	bl	8006034 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8005e8e:	7afb      	ldrb	r3, [r7, #11]
 8005e90:	4619      	mov	r1, r3
 8005e92:	68f8      	ldr	r0, [r7, #12]
 8005e94:	f000 f8ce 	bl	8006034 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8005e98:	2100      	movs	r1, #0
 8005e9a:	68f8      	ldr	r0, [r7, #12]
 8005e9c:	f000 f8ca 	bl	8006034 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	82fb      	strh	r3, [r7, #22]
 8005ea4:	e009      	b.n	8005eba <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8005ea6:	69b9      	ldr	r1, [r7, #24]
 8005ea8:	68f8      	ldr	r0, [r7, #12]
 8005eaa:	f000 f919 	bl	80060e0 <SUBGHZSPI_Receive>
      pData++;
 8005eae:	69bb      	ldr	r3, [r7, #24]
 8005eb0:	3301      	adds	r3, #1
 8005eb2:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8005eb4:	8afb      	ldrh	r3, [r7, #22]
 8005eb6:	3301      	adds	r3, #1
 8005eb8:	82fb      	strh	r3, [r7, #22]
 8005eba:	8afa      	ldrh	r2, [r7, #22]
 8005ebc:	893b      	ldrh	r3, [r7, #8]
 8005ebe:	429a      	cmp	r2, r3
 8005ec0:	d3f1      	bcc.n	8005ea6 <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8005ec2:	f7ff fd11 	bl	80058e8 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8005ec6:	68f8      	ldr	r0, [r7, #12]
 8005ec8:	f000 f986 	bl	80061d8 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	689b      	ldr	r3, [r3, #8]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d002      	beq.n	8005eda <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 8005ed4:	2301      	movs	r3, #1
 8005ed6:	77fb      	strb	r3, [r7, #31]
 8005ed8:	e001      	b.n	8005ede <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 8005eda:	2300      	movs	r3, #0
 8005edc:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	2201      	movs	r2, #1
 8005ee2:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	715a      	strb	r2, [r3, #5]

    return status;
 8005eea:	7ffb      	ldrb	r3, [r7, #31]
 8005eec:	e000      	b.n	8005ef0 <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8005eee:	2302      	movs	r3, #2
  }
}
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	3720      	adds	r7, #32
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	bd80      	pop	{r7, pc}

08005ef8 <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b084      	sub	sp, #16
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2U] = {0U};
 8005f00:	2300      	movs	r3, #0
 8005f02:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 8005f04:	f107 020c 	add.w	r2, r7, #12
 8005f08:	2302      	movs	r3, #2
 8005f0a:	2112      	movs	r1, #18
 8005f0c:	6878      	ldr	r0, [r7, #4]
 8005f0e:	f7ff fef4 	bl	8005cfa <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 8005f12:	7b3b      	ldrb	r3, [r7, #12]
 8005f14:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8U) | tmpisr[1U];
 8005f16:	89fb      	ldrh	r3, [r7, #14]
 8005f18:	021b      	lsls	r3, r3, #8
 8005f1a:	b21a      	sxth	r2, r3
 8005f1c:	7b7b      	ldrb	r3, [r7, #13]
 8005f1e:	b21b      	sxth	r3, r3
 8005f20:	4313      	orrs	r3, r2
 8005f22:	b21b      	sxth	r3, r3
 8005f24:	81fb      	strh	r3, [r7, #14]

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2U);
 8005f26:	f107 020c 	add.w	r2, r7, #12
 8005f2a:	2302      	movs	r3, #2
 8005f2c:	2102      	movs	r1, #2
 8005f2e:	6878      	ldr	r0, [r7, #4]
 8005f30:	f7ff fe84 	bl	8005c3c <HAL_SUBGHZ_ExecSetCmd>

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 8005f34:	89fb      	ldrh	r3, [r7, #14]
 8005f36:	f003 0301 	and.w	r3, r3, #1
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d002      	beq.n	8005f44 <HAL_SUBGHZ_IRQHandler+0x4c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 8005f3e:	6878      	ldr	r0, [r7, #4]
 8005f40:	f005 f95c 	bl	800b1fc <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 8005f44:	89fb      	ldrh	r3, [r7, #14]
 8005f46:	f003 0302 	and.w	r3, r3, #2
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d002      	beq.n	8005f54 <HAL_SUBGHZ_IRQHandler+0x5c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 8005f4e:	6878      	ldr	r0, [r7, #4]
 8005f50:	f005 f962 	bl	800b218 <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 8005f54:	89fb      	ldrh	r3, [r7, #14]
 8005f56:	f003 0304 	and.w	r3, r3, #4
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d002      	beq.n	8005f64 <HAL_SUBGHZ_IRQHandler+0x6c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 8005f5e:	6878      	ldr	r0, [r7, #4]
 8005f60:	f005 f9b2 	bl	800b2c8 <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 8005f64:	89fb      	ldrh	r3, [r7, #14]
 8005f66:	f003 0308 	and.w	r3, r3, #8
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d002      	beq.n	8005f74 <HAL_SUBGHZ_IRQHandler+0x7c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 8005f6e:	6878      	ldr	r0, [r7, #4]
 8005f70:	f005 f9b8 	bl	800b2e4 <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 8005f74:	89fb      	ldrh	r3, [r7, #14]
 8005f76:	f003 0310 	and.w	r3, r3, #16
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d002      	beq.n	8005f84 <HAL_SUBGHZ_IRQHandler+0x8c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 8005f7e:	6878      	ldr	r0, [r7, #4]
 8005f80:	f005 f9be 	bl	800b300 <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 8005f84:	89fb      	ldrh	r3, [r7, #14]
 8005f86:	f003 0320 	and.w	r3, r3, #32
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d002      	beq.n	8005f94 <HAL_SUBGHZ_IRQHandler+0x9c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 8005f8e:	6878      	ldr	r0, [r7, #4]
 8005f90:	f005 f98c 	bl	800b2ac <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 8005f94:	89fb      	ldrh	r3, [r7, #14]
 8005f96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d002      	beq.n	8005fa4 <HAL_SUBGHZ_IRQHandler+0xac>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 8005f9e:	6878      	ldr	r0, [r7, #4]
 8005fa0:	f005 f948 	bl	800b234 <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 8005fa4:	89fb      	ldrh	r3, [r7, #14]
 8005fa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d00d      	beq.n	8005fca <HAL_SUBGHZ_IRQHandler+0xd2>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 8005fae:	89fb      	ldrh	r3, [r7, #14]
 8005fb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d004      	beq.n	8005fc2 <HAL_SUBGHZ_IRQHandler+0xca>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 8005fb8:	2101      	movs	r1, #1
 8005fba:	6878      	ldr	r0, [r7, #4]
 8005fbc:	f005 f948 	bl	800b250 <HAL_SUBGHZ_CADStatusCallback>
 8005fc0:	e003      	b.n	8005fca <HAL_SUBGHZ_IRQHandler+0xd2>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 8005fc2:	2100      	movs	r1, #0
 8005fc4:	6878      	ldr	r0, [r7, #4]
 8005fc6:	f005 f943 	bl	800b250 <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 8005fca:	89fb      	ldrh	r3, [r7, #14]
 8005fcc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d002      	beq.n	8005fda <HAL_SUBGHZ_IRQHandler+0xe2>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 8005fd4:	6878      	ldr	r0, [r7, #4]
 8005fd6:	f005 f959 	bl	800b28c <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LR_FHSS Hop interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_LR_FHSS_HOP) != RESET)
 8005fda:	89fb      	ldrh	r3, [r7, #14]
 8005fdc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d002      	beq.n	8005fea <HAL_SUBGHZ_IRQHandler+0xf2>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->LrFhssHopCallback(hsubghz);
#else
    HAL_SUBGHZ_LrFhssHopCallback(hsubghz);
 8005fe4:	6878      	ldr	r0, [r7, #4]
 8005fe6:	f005 f999 	bl	800b31c <HAL_SUBGHZ_LrFhssHopCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }
}
 8005fea:	bf00      	nop
 8005fec:	3710      	adds	r7, #16
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	bd80      	pop	{r7, pc}
	...

08005ff4 <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 8005ff4:	b480      	push	{r7}
 8005ff6:	b083      	sub	sp, #12
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8005ffc:	4b0c      	ldr	r3, [pc, #48]	; (8006030 <SUBGHZSPI_Init+0x3c>)
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	4a0b      	ldr	r2, [pc, #44]	; (8006030 <SUBGHZSPI_Init+0x3c>)
 8006002:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006006:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 8006008:	4a09      	ldr	r2, [pc, #36]	; (8006030 <SUBGHZSPI_Init+0x3c>)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	f443 7341 	orr.w	r3, r3, #772	; 0x304
 8006010:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 8006012:	4b07      	ldr	r3, [pc, #28]	; (8006030 <SUBGHZSPI_Init+0x3c>)
 8006014:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 8006018:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 800601a:	4b05      	ldr	r3, [pc, #20]	; (8006030 <SUBGHZSPI_Init+0x3c>)
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	4a04      	ldr	r2, [pc, #16]	; (8006030 <SUBGHZSPI_Init+0x3c>)
 8006020:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006024:	6013      	str	r3, [r2, #0]
}
 8006026:	bf00      	nop
 8006028:	370c      	adds	r7, #12
 800602a:	46bd      	mov	sp, r7
 800602c:	bc80      	pop	{r7}
 800602e:	4770      	bx	lr
 8006030:	58010000 	.word	0x58010000

08006034 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8006034:	b480      	push	{r7}
 8006036:	b087      	sub	sp, #28
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
 800603c:	460b      	mov	r3, r1
 800603e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8006040:	2300      	movs	r3, #0
 8006042:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8006044:	4b23      	ldr	r3, [pc, #140]	; (80060d4 <SUBGHZSPI_Transmit+0xa0>)
 8006046:	681a      	ldr	r2, [r3, #0]
 8006048:	4613      	mov	r3, r2
 800604a:	00db      	lsls	r3, r3, #3
 800604c:	1a9b      	subs	r3, r3, r2
 800604e:	009b      	lsls	r3, r3, #2
 8006050:	0cdb      	lsrs	r3, r3, #19
 8006052:	2264      	movs	r2, #100	; 0x64
 8006054:	fb02 f303 	mul.w	r3, r2, r3
 8006058:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d105      	bne.n	800606c <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 8006060:	2301      	movs	r3, #1
 8006062:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2201      	movs	r2, #1
 8006068:	609a      	str	r2, [r3, #8]
      break;
 800606a:	e008      	b.n	800607e <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	3b01      	subs	r3, #1
 8006070:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8006072:	4b19      	ldr	r3, [pc, #100]	; (80060d8 <SUBGHZSPI_Transmit+0xa4>)
 8006074:	689b      	ldr	r3, [r3, #8]
 8006076:	f003 0302 	and.w	r3, r3, #2
 800607a:	2b02      	cmp	r3, #2
 800607c:	d1ed      	bne.n	800605a <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 800607e:	4b17      	ldr	r3, [pc, #92]	; (80060dc <SUBGHZSPI_Transmit+0xa8>)
 8006080:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 8006082:	693b      	ldr	r3, [r7, #16]
 8006084:	78fa      	ldrb	r2, [r7, #3]
 8006086:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8006088:	4b12      	ldr	r3, [pc, #72]	; (80060d4 <SUBGHZSPI_Transmit+0xa0>)
 800608a:	681a      	ldr	r2, [r3, #0]
 800608c:	4613      	mov	r3, r2
 800608e:	00db      	lsls	r3, r3, #3
 8006090:	1a9b      	subs	r3, r3, r2
 8006092:	009b      	lsls	r3, r3, #2
 8006094:	0cdb      	lsrs	r3, r3, #19
 8006096:	2264      	movs	r2, #100	; 0x64
 8006098:	fb02 f303 	mul.w	r3, r2, r3
 800609c:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d105      	bne.n	80060b0 <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 80060a4:	2301      	movs	r3, #1
 80060a6:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2201      	movs	r2, #1
 80060ac:	609a      	str	r2, [r3, #8]
      break;
 80060ae:	e008      	b.n	80060c2 <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	3b01      	subs	r3, #1
 80060b4:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 80060b6:	4b08      	ldr	r3, [pc, #32]	; (80060d8 <SUBGHZSPI_Transmit+0xa4>)
 80060b8:	689b      	ldr	r3, [r3, #8]
 80060ba:	f003 0301 	and.w	r3, r3, #1
 80060be:	2b01      	cmp	r3, #1
 80060c0:	d1ed      	bne.n	800609e <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 80060c2:	4b05      	ldr	r3, [pc, #20]	; (80060d8 <SUBGHZSPI_Transmit+0xa4>)
 80060c4:	68db      	ldr	r3, [r3, #12]

  return status;
 80060c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80060c8:	4618      	mov	r0, r3
 80060ca:	371c      	adds	r7, #28
 80060cc:	46bd      	mov	sp, r7
 80060ce:	bc80      	pop	{r7}
 80060d0:	4770      	bx	lr
 80060d2:	bf00      	nop
 80060d4:	2000000c 	.word	0x2000000c
 80060d8:	58010000 	.word	0x58010000
 80060dc:	5801000c 	.word	0x5801000c

080060e0 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 80060e0:	b480      	push	{r7}
 80060e2:	b087      	sub	sp, #28
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
 80060e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80060ea:	2300      	movs	r3, #0
 80060ec:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80060ee:	4b25      	ldr	r3, [pc, #148]	; (8006184 <SUBGHZSPI_Receive+0xa4>)
 80060f0:	681a      	ldr	r2, [r3, #0]
 80060f2:	4613      	mov	r3, r2
 80060f4:	00db      	lsls	r3, r3, #3
 80060f6:	1a9b      	subs	r3, r3, r2
 80060f8:	009b      	lsls	r3, r3, #2
 80060fa:	0cdb      	lsrs	r3, r3, #19
 80060fc:	2264      	movs	r2, #100	; 0x64
 80060fe:	fb02 f303 	mul.w	r3, r2, r3
 8006102:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d105      	bne.n	8006116 <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 800610a:	2301      	movs	r3, #1
 800610c:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2201      	movs	r2, #1
 8006112:	609a      	str	r2, [r3, #8]
      break;
 8006114:	e008      	b.n	8006128 <SUBGHZSPI_Receive+0x48>
    }
    count--;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	3b01      	subs	r3, #1
 800611a:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 800611c:	4b1a      	ldr	r3, [pc, #104]	; (8006188 <SUBGHZSPI_Receive+0xa8>)
 800611e:	689b      	ldr	r3, [r3, #8]
 8006120:	f003 0302 	and.w	r3, r3, #2
 8006124:	2b02      	cmp	r3, #2
 8006126:	d1ed      	bne.n	8006104 <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8006128:	4b18      	ldr	r3, [pc, #96]	; (800618c <SUBGHZSPI_Receive+0xac>)
 800612a:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 800612c:	693b      	ldr	r3, [r7, #16]
 800612e:	22ff      	movs	r2, #255	; 0xff
 8006130:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8006132:	4b14      	ldr	r3, [pc, #80]	; (8006184 <SUBGHZSPI_Receive+0xa4>)
 8006134:	681a      	ldr	r2, [r3, #0]
 8006136:	4613      	mov	r3, r2
 8006138:	00db      	lsls	r3, r3, #3
 800613a:	1a9b      	subs	r3, r3, r2
 800613c:	009b      	lsls	r3, r3, #2
 800613e:	0cdb      	lsrs	r3, r3, #19
 8006140:	2264      	movs	r2, #100	; 0x64
 8006142:	fb02 f303 	mul.w	r3, r2, r3
 8006146:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d105      	bne.n	800615a <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 800614e:	2301      	movs	r3, #1
 8006150:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2201      	movs	r2, #1
 8006156:	609a      	str	r2, [r3, #8]
      break;
 8006158:	e008      	b.n	800616c <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	3b01      	subs	r3, #1
 800615e:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8006160:	4b09      	ldr	r3, [pc, #36]	; (8006188 <SUBGHZSPI_Receive+0xa8>)
 8006162:	689b      	ldr	r3, [r3, #8]
 8006164:	f003 0301 	and.w	r3, r3, #1
 8006168:	2b01      	cmp	r3, #1
 800616a:	d1ed      	bne.n	8006148 <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 800616c:	4b06      	ldr	r3, [pc, #24]	; (8006188 <SUBGHZSPI_Receive+0xa8>)
 800616e:	68db      	ldr	r3, [r3, #12]
 8006170:	b2da      	uxtb	r2, r3
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	701a      	strb	r2, [r3, #0]

  return status;
 8006176:	7dfb      	ldrb	r3, [r7, #23]
}
 8006178:	4618      	mov	r0, r3
 800617a:	371c      	adds	r7, #28
 800617c:	46bd      	mov	sp, r7
 800617e:	bc80      	pop	{r7}
 8006180:	4770      	bx	lr
 8006182:	bf00      	nop
 8006184:	2000000c 	.word	0x2000000c
 8006188:	58010000 	.word	0x58010000
 800618c:	5801000c 	.word	0x5801000c

08006190 <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b084      	sub	sp, #16
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	791b      	ldrb	r3, [r3, #4]
 800619c:	2b01      	cmp	r3, #1
 800619e:	d111      	bne.n	80061c4 <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 80061a0:	4b0c      	ldr	r3, [pc, #48]	; (80061d4 <SUBGHZ_CheckDeviceReady+0x44>)
 80061a2:	681a      	ldr	r2, [r3, #0]
 80061a4:	4613      	mov	r3, r2
 80061a6:	005b      	lsls	r3, r3, #1
 80061a8:	4413      	add	r3, r2
 80061aa:	00db      	lsls	r3, r3, #3
 80061ac:	0c1b      	lsrs	r3, r3, #16
 80061ae:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80061b0:	f7ff fbaa 	bl	8005908 <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	3b01      	subs	r3, #1
 80061b8:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d1f9      	bne.n	80061b4 <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80061c0:	f7ff fb92 	bl	80058e8 <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 80061c4:	6878      	ldr	r0, [r7, #4]
 80061c6:	f000 f807 	bl	80061d8 <SUBGHZ_WaitOnBusy>
 80061ca:	4603      	mov	r3, r0
}
 80061cc:	4618      	mov	r0, r3
 80061ce:	3710      	adds	r7, #16
 80061d0:	46bd      	mov	sp, r7
 80061d2:	bd80      	pop	{r7, pc}
 80061d4:	2000000c 	.word	0x2000000c

080061d8 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b086      	sub	sp, #24
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 80061e0:	2300      	movs	r3, #0
 80061e2:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 80061e4:	4b12      	ldr	r3, [pc, #72]	; (8006230 <SUBGHZ_WaitOnBusy+0x58>)
 80061e6:	681a      	ldr	r2, [r3, #0]
 80061e8:	4613      	mov	r3, r2
 80061ea:	005b      	lsls	r3, r3, #1
 80061ec:	4413      	add	r3, r2
 80061ee:	00db      	lsls	r3, r3, #3
 80061f0:	0d1b      	lsrs	r3, r3, #20
 80061f2:	2264      	movs	r2, #100	; 0x64
 80061f4:	fb02 f303 	mul.w	r3, r2, r3
 80061f8:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 80061fa:	f7ff fbb3 	bl	8005964 <LL_PWR_IsActiveFlag_RFBUSYMS>
 80061fe:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d105      	bne.n	8006212 <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 8006206:	2301      	movs	r3, #1
 8006208:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2202      	movs	r2, #2
 800620e:	609a      	str	r2, [r3, #8]
      break;
 8006210:	e009      	b.n	8006226 <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	3b01      	subs	r3, #1
 8006216:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8006218:	f7ff fb92 	bl	8005940 <LL_PWR_IsActiveFlag_RFBUSYS>
 800621c:	4602      	mov	r2, r0
 800621e:	693b      	ldr	r3, [r7, #16]
 8006220:	4013      	ands	r3, r2
 8006222:	2b01      	cmp	r3, #1
 8006224:	d0e9      	beq.n	80061fa <SUBGHZ_WaitOnBusy+0x22>

  return status;
 8006226:	7dfb      	ldrb	r3, [r7, #23]
}
 8006228:	4618      	mov	r0, r3
 800622a:	3718      	adds	r7, #24
 800622c:	46bd      	mov	sp, r7
 800622e:	bd80      	pop	{r7, pc}
 8006230:	2000000c 	.word	0x2000000c

08006234 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006234:	b580      	push	{r7, lr}
 8006236:	b082      	sub	sp, #8
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d101      	bne.n	8006246 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006242:	2301      	movs	r3, #1
 8006244:	e049      	b.n	80062da <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800624c:	b2db      	uxtb	r3, r3
 800624e:	2b00      	cmp	r3, #0
 8006250:	d106      	bne.n	8006260 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2200      	movs	r2, #0
 8006256:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800625a:	6878      	ldr	r0, [r7, #4]
 800625c:	f7fc fd94 	bl	8002d88 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2202      	movs	r2, #2
 8006264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681a      	ldr	r2, [r3, #0]
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	3304      	adds	r3, #4
 8006270:	4619      	mov	r1, r3
 8006272:	4610      	mov	r0, r2
 8006274:	f000 f944 	bl	8006500 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2201      	movs	r2, #1
 800627c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2201      	movs	r2, #1
 8006284:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2201      	movs	r2, #1
 800628c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2201      	movs	r2, #1
 8006294:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2201      	movs	r2, #1
 800629c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2201      	movs	r2, #1
 80062a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2201      	movs	r2, #1
 80062ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2201      	movs	r2, #1
 80062b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2201      	movs	r2, #1
 80062bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2201      	movs	r2, #1
 80062c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2201      	movs	r2, #1
 80062cc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2201      	movs	r2, #1
 80062d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80062d8:	2300      	movs	r3, #0
}
 80062da:	4618      	mov	r0, r3
 80062dc:	3708      	adds	r7, #8
 80062de:	46bd      	mov	sp, r7
 80062e0:	bd80      	pop	{r7, pc}
	...

080062e4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80062e4:	b480      	push	{r7}
 80062e6:	b085      	sub	sp, #20
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062f2:	b2db      	uxtb	r3, r3
 80062f4:	2b01      	cmp	r3, #1
 80062f6:	d001      	beq.n	80062fc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80062f8:	2301      	movs	r3, #1
 80062fa:	e02e      	b.n	800635a <HAL_TIM_Base_Start+0x76>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2202      	movs	r2, #2
 8006300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	4a16      	ldr	r2, [pc, #88]	; (8006364 <HAL_TIM_Base_Start+0x80>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d004      	beq.n	8006318 <HAL_TIM_Base_Start+0x34>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006316:	d115      	bne.n	8006344 <HAL_TIM_Base_Start+0x60>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	689a      	ldr	r2, [r3, #8]
 800631e:	4b12      	ldr	r3, [pc, #72]	; (8006368 <HAL_TIM_Base_Start+0x84>)
 8006320:	4013      	ands	r3, r2
 8006322:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	2b06      	cmp	r3, #6
 8006328:	d015      	beq.n	8006356 <HAL_TIM_Base_Start+0x72>
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006330:	d011      	beq.n	8006356 <HAL_TIM_Base_Start+0x72>
    {
      __HAL_TIM_ENABLE(htim);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	681a      	ldr	r2, [r3, #0]
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f042 0201 	orr.w	r2, r2, #1
 8006340:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006342:	e008      	b.n	8006356 <HAL_TIM_Base_Start+0x72>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	681a      	ldr	r2, [r3, #0]
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f042 0201 	orr.w	r2, r2, #1
 8006352:	601a      	str	r2, [r3, #0]
 8006354:	e000      	b.n	8006358 <HAL_TIM_Base_Start+0x74>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006356:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006358:	2300      	movs	r3, #0
}
 800635a:	4618      	mov	r0, r3
 800635c:	3714      	adds	r7, #20
 800635e:	46bd      	mov	sp, r7
 8006360:	bc80      	pop	{r7}
 8006362:	4770      	bx	lr
 8006364:	40012c00 	.word	0x40012c00
 8006368:	00010007 	.word	0x00010007

0800636c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b084      	sub	sp, #16
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
 8006374:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006376:	2300      	movs	r3, #0
 8006378:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006380:	2b01      	cmp	r3, #1
 8006382:	d101      	bne.n	8006388 <HAL_TIM_ConfigClockSource+0x1c>
 8006384:	2302      	movs	r3, #2
 8006386:	e0b6      	b.n	80064f6 <HAL_TIM_ConfigClockSource+0x18a>
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2201      	movs	r2, #1
 800638c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2202      	movs	r2, #2
 8006394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	689b      	ldr	r3, [r3, #8]
 800639e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80063a0:	68bb      	ldr	r3, [r7, #8]
 80063a2:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 80063a6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80063aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80063b2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	68ba      	ldr	r2, [r7, #8]
 80063ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80063c4:	d03e      	beq.n	8006444 <HAL_TIM_ConfigClockSource+0xd8>
 80063c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80063ca:	f200 8087 	bhi.w	80064dc <HAL_TIM_ConfigClockSource+0x170>
 80063ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063d2:	f000 8086 	beq.w	80064e2 <HAL_TIM_ConfigClockSource+0x176>
 80063d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063da:	d87f      	bhi.n	80064dc <HAL_TIM_ConfigClockSource+0x170>
 80063dc:	2b70      	cmp	r3, #112	; 0x70
 80063de:	d01a      	beq.n	8006416 <HAL_TIM_ConfigClockSource+0xaa>
 80063e0:	2b70      	cmp	r3, #112	; 0x70
 80063e2:	d87b      	bhi.n	80064dc <HAL_TIM_ConfigClockSource+0x170>
 80063e4:	2b60      	cmp	r3, #96	; 0x60
 80063e6:	d050      	beq.n	800648a <HAL_TIM_ConfigClockSource+0x11e>
 80063e8:	2b60      	cmp	r3, #96	; 0x60
 80063ea:	d877      	bhi.n	80064dc <HAL_TIM_ConfigClockSource+0x170>
 80063ec:	2b50      	cmp	r3, #80	; 0x50
 80063ee:	d03c      	beq.n	800646a <HAL_TIM_ConfigClockSource+0xfe>
 80063f0:	2b50      	cmp	r3, #80	; 0x50
 80063f2:	d873      	bhi.n	80064dc <HAL_TIM_ConfigClockSource+0x170>
 80063f4:	2b40      	cmp	r3, #64	; 0x40
 80063f6:	d058      	beq.n	80064aa <HAL_TIM_ConfigClockSource+0x13e>
 80063f8:	2b40      	cmp	r3, #64	; 0x40
 80063fa:	d86f      	bhi.n	80064dc <HAL_TIM_ConfigClockSource+0x170>
 80063fc:	2b30      	cmp	r3, #48	; 0x30
 80063fe:	d064      	beq.n	80064ca <HAL_TIM_ConfigClockSource+0x15e>
 8006400:	2b30      	cmp	r3, #48	; 0x30
 8006402:	d86b      	bhi.n	80064dc <HAL_TIM_ConfigClockSource+0x170>
 8006404:	2b20      	cmp	r3, #32
 8006406:	d060      	beq.n	80064ca <HAL_TIM_ConfigClockSource+0x15e>
 8006408:	2b20      	cmp	r3, #32
 800640a:	d867      	bhi.n	80064dc <HAL_TIM_ConfigClockSource+0x170>
 800640c:	2b00      	cmp	r3, #0
 800640e:	d05c      	beq.n	80064ca <HAL_TIM_ConfigClockSource+0x15e>
 8006410:	2b10      	cmp	r3, #16
 8006412:	d05a      	beq.n	80064ca <HAL_TIM_ConfigClockSource+0x15e>
 8006414:	e062      	b.n	80064dc <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006426:	f000 f946 	bl	80066b6 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	689b      	ldr	r3, [r3, #8]
 8006430:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006432:	68bb      	ldr	r3, [r7, #8]
 8006434:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006438:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	68ba      	ldr	r2, [r7, #8]
 8006440:	609a      	str	r2, [r3, #8]
      break;
 8006442:	e04f      	b.n	80064e4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006454:	f000 f92f 	bl	80066b6 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	689a      	ldr	r2, [r3, #8]
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006466:	609a      	str	r2, [r3, #8]
      break;
 8006468:	e03c      	b.n	80064e4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006476:	461a      	mov	r2, r3
 8006478:	f000 f8a4 	bl	80065c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	2150      	movs	r1, #80	; 0x50
 8006482:	4618      	mov	r0, r3
 8006484:	f000 f8fb 	bl	800667e <TIM_ITRx_SetConfig>
      break;
 8006488:	e02c      	b.n	80064e4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006496:	461a      	mov	r2, r3
 8006498:	f000 f8c2 	bl	8006620 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	2160      	movs	r1, #96	; 0x60
 80064a2:	4618      	mov	r0, r3
 80064a4:	f000 f8eb 	bl	800667e <TIM_ITRx_SetConfig>
      break;
 80064a8:	e01c      	b.n	80064e4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80064b6:	461a      	mov	r2, r3
 80064b8:	f000 f884 	bl	80065c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	2140      	movs	r1, #64	; 0x40
 80064c2:	4618      	mov	r0, r3
 80064c4:	f000 f8db 	bl	800667e <TIM_ITRx_SetConfig>
      break;
 80064c8:	e00c      	b.n	80064e4 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681a      	ldr	r2, [r3, #0]
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	4619      	mov	r1, r3
 80064d4:	4610      	mov	r0, r2
 80064d6:	f000 f8d2 	bl	800667e <TIM_ITRx_SetConfig>
      break;
 80064da:	e003      	b.n	80064e4 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80064dc:	2301      	movs	r3, #1
 80064de:	73fb      	strb	r3, [r7, #15]
      break;
 80064e0:	e000      	b.n	80064e4 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80064e2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2201      	movs	r2, #1
 80064e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2200      	movs	r2, #0
 80064f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80064f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80064f6:	4618      	mov	r0, r3
 80064f8:	3710      	adds	r7, #16
 80064fa:	46bd      	mov	sp, r7
 80064fc:	bd80      	pop	{r7, pc}
	...

08006500 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006500:	b480      	push	{r7}
 8006502:	b085      	sub	sp, #20
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
 8006508:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	4a29      	ldr	r2, [pc, #164]	; (80065b8 <TIM_Base_SetConfig+0xb8>)
 8006514:	4293      	cmp	r3, r2
 8006516:	d003      	beq.n	8006520 <TIM_Base_SetConfig+0x20>
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800651e:	d108      	bne.n	8006532 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006526:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	685b      	ldr	r3, [r3, #4]
 800652c:	68fa      	ldr	r2, [r7, #12]
 800652e:	4313      	orrs	r3, r2
 8006530:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	4a20      	ldr	r2, [pc, #128]	; (80065b8 <TIM_Base_SetConfig+0xb8>)
 8006536:	4293      	cmp	r3, r2
 8006538:	d00b      	beq.n	8006552 <TIM_Base_SetConfig+0x52>
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006540:	d007      	beq.n	8006552 <TIM_Base_SetConfig+0x52>
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	4a1d      	ldr	r2, [pc, #116]	; (80065bc <TIM_Base_SetConfig+0xbc>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d003      	beq.n	8006552 <TIM_Base_SetConfig+0x52>
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	4a1c      	ldr	r2, [pc, #112]	; (80065c0 <TIM_Base_SetConfig+0xc0>)
 800654e:	4293      	cmp	r3, r2
 8006550:	d108      	bne.n	8006564 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006558:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	68db      	ldr	r3, [r3, #12]
 800655e:	68fa      	ldr	r2, [r7, #12]
 8006560:	4313      	orrs	r3, r2
 8006562:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	695b      	ldr	r3, [r3, #20]
 800656e:	4313      	orrs	r3, r2
 8006570:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	68fa      	ldr	r2, [r7, #12]
 8006576:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	689a      	ldr	r2, [r3, #8]
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	681a      	ldr	r2, [r3, #0]
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	4a0b      	ldr	r2, [pc, #44]	; (80065b8 <TIM_Base_SetConfig+0xb8>)
 800658c:	4293      	cmp	r3, r2
 800658e:	d007      	beq.n	80065a0 <TIM_Base_SetConfig+0xa0>
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	4a0a      	ldr	r2, [pc, #40]	; (80065bc <TIM_Base_SetConfig+0xbc>)
 8006594:	4293      	cmp	r3, r2
 8006596:	d003      	beq.n	80065a0 <TIM_Base_SetConfig+0xa0>
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	4a09      	ldr	r2, [pc, #36]	; (80065c0 <TIM_Base_SetConfig+0xc0>)
 800659c:	4293      	cmp	r3, r2
 800659e:	d103      	bne.n	80065a8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	691a      	ldr	r2, [r3, #16]
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2201      	movs	r2, #1
 80065ac:	615a      	str	r2, [r3, #20]
}
 80065ae:	bf00      	nop
 80065b0:	3714      	adds	r7, #20
 80065b2:	46bd      	mov	sp, r7
 80065b4:	bc80      	pop	{r7}
 80065b6:	4770      	bx	lr
 80065b8:	40012c00 	.word	0x40012c00
 80065bc:	40014400 	.word	0x40014400
 80065c0:	40014800 	.word	0x40014800

080065c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80065c4:	b480      	push	{r7}
 80065c6:	b087      	sub	sp, #28
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	60f8      	str	r0, [r7, #12]
 80065cc:	60b9      	str	r1, [r7, #8]
 80065ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	6a1b      	ldr	r3, [r3, #32]
 80065d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	6a1b      	ldr	r3, [r3, #32]
 80065da:	f023 0201 	bic.w	r2, r3, #1
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	699b      	ldr	r3, [r3, #24]
 80065e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80065e8:	693b      	ldr	r3, [r7, #16]
 80065ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80065ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	011b      	lsls	r3, r3, #4
 80065f4:	693a      	ldr	r2, [r7, #16]
 80065f6:	4313      	orrs	r3, r2
 80065f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80065fa:	697b      	ldr	r3, [r7, #20]
 80065fc:	f023 030a 	bic.w	r3, r3, #10
 8006600:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006602:	697a      	ldr	r2, [r7, #20]
 8006604:	68bb      	ldr	r3, [r7, #8]
 8006606:	4313      	orrs	r3, r2
 8006608:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	693a      	ldr	r2, [r7, #16]
 800660e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	697a      	ldr	r2, [r7, #20]
 8006614:	621a      	str	r2, [r3, #32]
}
 8006616:	bf00      	nop
 8006618:	371c      	adds	r7, #28
 800661a:	46bd      	mov	sp, r7
 800661c:	bc80      	pop	{r7}
 800661e:	4770      	bx	lr

08006620 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006620:	b480      	push	{r7}
 8006622:	b087      	sub	sp, #28
 8006624:	af00      	add	r7, sp, #0
 8006626:	60f8      	str	r0, [r7, #12]
 8006628:	60b9      	str	r1, [r7, #8]
 800662a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	6a1b      	ldr	r3, [r3, #32]
 8006630:	f023 0210 	bic.w	r2, r3, #16
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	699b      	ldr	r3, [r3, #24]
 800663c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	6a1b      	ldr	r3, [r3, #32]
 8006642:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006644:	697b      	ldr	r3, [r7, #20]
 8006646:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800664a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	031b      	lsls	r3, r3, #12
 8006650:	697a      	ldr	r2, [r7, #20]
 8006652:	4313      	orrs	r3, r2
 8006654:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006656:	693b      	ldr	r3, [r7, #16]
 8006658:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800665c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800665e:	68bb      	ldr	r3, [r7, #8]
 8006660:	011b      	lsls	r3, r3, #4
 8006662:	693a      	ldr	r2, [r7, #16]
 8006664:	4313      	orrs	r3, r2
 8006666:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	697a      	ldr	r2, [r7, #20]
 800666c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	693a      	ldr	r2, [r7, #16]
 8006672:	621a      	str	r2, [r3, #32]
}
 8006674:	bf00      	nop
 8006676:	371c      	adds	r7, #28
 8006678:	46bd      	mov	sp, r7
 800667a:	bc80      	pop	{r7}
 800667c:	4770      	bx	lr

0800667e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800667e:	b480      	push	{r7}
 8006680:	b085      	sub	sp, #20
 8006682:	af00      	add	r7, sp, #0
 8006684:	6078      	str	r0, [r7, #4]
 8006686:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	689b      	ldr	r3, [r3, #8]
 800668c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8006694:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006698:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800669a:	683a      	ldr	r2, [r7, #0]
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	4313      	orrs	r3, r2
 80066a0:	f043 0307 	orr.w	r3, r3, #7
 80066a4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	68fa      	ldr	r2, [r7, #12]
 80066aa:	609a      	str	r2, [r3, #8]
}
 80066ac:	bf00      	nop
 80066ae:	3714      	adds	r7, #20
 80066b0:	46bd      	mov	sp, r7
 80066b2:	bc80      	pop	{r7}
 80066b4:	4770      	bx	lr

080066b6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80066b6:	b480      	push	{r7}
 80066b8:	b087      	sub	sp, #28
 80066ba:	af00      	add	r7, sp, #0
 80066bc:	60f8      	str	r0, [r7, #12]
 80066be:	60b9      	str	r1, [r7, #8]
 80066c0:	607a      	str	r2, [r7, #4]
 80066c2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	689b      	ldr	r3, [r3, #8]
 80066c8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80066ca:	697b      	ldr	r3, [r7, #20]
 80066cc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80066d0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	021a      	lsls	r2, r3, #8
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	431a      	orrs	r2, r3
 80066da:	68bb      	ldr	r3, [r7, #8]
 80066dc:	4313      	orrs	r3, r2
 80066de:	697a      	ldr	r2, [r7, #20]
 80066e0:	4313      	orrs	r3, r2
 80066e2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	697a      	ldr	r2, [r7, #20]
 80066e8:	609a      	str	r2, [r3, #8]
}
 80066ea:	bf00      	nop
 80066ec:	371c      	adds	r7, #28
 80066ee:	46bd      	mov	sp, r7
 80066f0:	bc80      	pop	{r7}
 80066f2:	4770      	bx	lr

080066f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80066f4:	b480      	push	{r7}
 80066f6:	b085      	sub	sp, #20
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
 80066fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006704:	2b01      	cmp	r3, #1
 8006706:	d101      	bne.n	800670c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006708:	2302      	movs	r3, #2
 800670a:	e04a      	b.n	80067a2 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2201      	movs	r2, #1
 8006710:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2202      	movs	r2, #2
 8006718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	685b      	ldr	r3, [r3, #4]
 8006722:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	689b      	ldr	r3, [r3, #8]
 800672a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	4a1e      	ldr	r2, [pc, #120]	; (80067ac <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8006732:	4293      	cmp	r3, r2
 8006734:	d108      	bne.n	8006748 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800673c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	685b      	ldr	r3, [r3, #4]
 8006742:	68fa      	ldr	r2, [r7, #12]
 8006744:	4313      	orrs	r3, r2
 8006746:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800674e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	68fa      	ldr	r2, [r7, #12]
 8006756:	4313      	orrs	r3, r2
 8006758:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	68fa      	ldr	r2, [r7, #12]
 8006760:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	4a11      	ldr	r2, [pc, #68]	; (80067ac <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8006768:	4293      	cmp	r3, r2
 800676a:	d004      	beq.n	8006776 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006774:	d10c      	bne.n	8006790 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006776:	68bb      	ldr	r3, [r7, #8]
 8006778:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800677c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	689b      	ldr	r3, [r3, #8]
 8006782:	68ba      	ldr	r2, [r7, #8]
 8006784:	4313      	orrs	r3, r2
 8006786:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	68ba      	ldr	r2, [r7, #8]
 800678e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2201      	movs	r2, #1
 8006794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2200      	movs	r2, #0
 800679c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80067a0:	2300      	movs	r3, #0
}
 80067a2:	4618      	mov	r0, r3
 80067a4:	3714      	adds	r7, #20
 80067a6:	46bd      	mov	sp, r7
 80067a8:	bc80      	pop	{r7}
 80067aa:	4770      	bx	lr
 80067ac:	40012c00 	.word	0x40012c00

080067b0 <LL_RCC_GetUSARTClockSource>:
{
 80067b0:	b480      	push	{r7}
 80067b2:	b083      	sub	sp, #12
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 80067b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80067bc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	401a      	ands	r2, r3
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	041b      	lsls	r3, r3, #16
 80067c8:	4313      	orrs	r3, r2
}
 80067ca:	4618      	mov	r0, r3
 80067cc:	370c      	adds	r7, #12
 80067ce:	46bd      	mov	sp, r7
 80067d0:	bc80      	pop	{r7}
 80067d2:	4770      	bx	lr

080067d4 <LL_RCC_GetLPUARTClockSource>:
{
 80067d4:	b480      	push	{r7}
 80067d6:	b083      	sub	sp, #12
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80067dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80067e0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	4013      	ands	r3, r2
}
 80067e8:	4618      	mov	r0, r3
 80067ea:	370c      	adds	r7, #12
 80067ec:	46bd      	mov	sp, r7
 80067ee:	bc80      	pop	{r7}
 80067f0:	4770      	bx	lr

080067f2 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80067f2:	b580      	push	{r7, lr}
 80067f4:	b082      	sub	sp, #8
 80067f6:	af00      	add	r7, sp, #0
 80067f8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d101      	bne.n	8006804 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006800:	2301      	movs	r3, #1
 8006802:	e042      	b.n	800688a <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800680a:	2b00      	cmp	r3, #0
 800680c:	d106      	bne.n	800681c <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2200      	movs	r2, #0
 8006812:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006816:	6878      	ldr	r0, [r7, #4]
 8006818:	f7fc fc82 	bl	8003120 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2224      	movs	r2, #36	; 0x24
 8006820:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	681a      	ldr	r2, [r3, #0]
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f022 0201 	bic.w	r2, r2, #1
 8006832:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006834:	6878      	ldr	r0, [r7, #4]
 8006836:	f000 fd0d 	bl	8007254 <UART_SetConfig>
 800683a:	4603      	mov	r3, r0
 800683c:	2b01      	cmp	r3, #1
 800683e:	d101      	bne.n	8006844 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006840:	2301      	movs	r3, #1
 8006842:	e022      	b.n	800688a <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006848:	2b00      	cmp	r3, #0
 800684a:	d002      	beq.n	8006852 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800684c:	6878      	ldr	r0, [r7, #4]
 800684e:	f000 ff75 	bl	800773c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	685a      	ldr	r2, [r3, #4]
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006860:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	689a      	ldr	r2, [r3, #8]
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006870:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	681a      	ldr	r2, [r3, #0]
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f042 0201 	orr.w	r2, r2, #1
 8006880:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006882:	6878      	ldr	r0, [r7, #4]
 8006884:	f000 fffb 	bl	800787e <UART_CheckIdleState>
 8006888:	4603      	mov	r3, r0
}
 800688a:	4618      	mov	r0, r3
 800688c:	3708      	adds	r7, #8
 800688e:	46bd      	mov	sp, r7
 8006890:	bd80      	pop	{r7, pc}

08006892 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006892:	b580      	push	{r7, lr}
 8006894:	b08a      	sub	sp, #40	; 0x28
 8006896:	af02      	add	r7, sp, #8
 8006898:	60f8      	str	r0, [r7, #12]
 800689a:	60b9      	str	r1, [r7, #8]
 800689c:	603b      	str	r3, [r7, #0]
 800689e:	4613      	mov	r3, r2
 80068a0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068a8:	2b20      	cmp	r3, #32
 80068aa:	d173      	bne.n	8006994 <HAL_UART_Transmit+0x102>
  {
    if ((pData == NULL) || (Size == 0U))
 80068ac:	68bb      	ldr	r3, [r7, #8]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d002      	beq.n	80068b8 <HAL_UART_Transmit+0x26>
 80068b2:	88fb      	ldrh	r3, [r7, #6]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d101      	bne.n	80068bc <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80068b8:	2301      	movs	r3, #1
 80068ba:	e06c      	b.n	8006996 <HAL_UART_Transmit+0x104>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	2200      	movs	r2, #0
 80068c0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	2221      	movs	r2, #33	; 0x21
 80068c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80068cc:	f7fc f99a 	bl	8002c04 <HAL_GetTick>
 80068d0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	88fa      	ldrh	r2, [r7, #6]
 80068d6:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	88fa      	ldrh	r2, [r7, #6]
 80068de:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	689b      	ldr	r3, [r3, #8]
 80068e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068ea:	d108      	bne.n	80068fe <HAL_UART_Transmit+0x6c>
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	691b      	ldr	r3, [r3, #16]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d104      	bne.n	80068fe <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80068f4:	2300      	movs	r3, #0
 80068f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80068f8:	68bb      	ldr	r3, [r7, #8]
 80068fa:	61bb      	str	r3, [r7, #24]
 80068fc:	e003      	b.n	8006906 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80068fe:	68bb      	ldr	r3, [r7, #8]
 8006900:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006902:	2300      	movs	r3, #0
 8006904:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006906:	e02c      	b.n	8006962 <HAL_UART_Transmit+0xd0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	9300      	str	r3, [sp, #0]
 800690c:	697b      	ldr	r3, [r7, #20]
 800690e:	2200      	movs	r2, #0
 8006910:	2180      	movs	r1, #128	; 0x80
 8006912:	68f8      	ldr	r0, [r7, #12]
 8006914:	f001 f801 	bl	800791a <UART_WaitOnFlagUntilTimeout>
 8006918:	4603      	mov	r3, r0
 800691a:	2b00      	cmp	r3, #0
 800691c:	d001      	beq.n	8006922 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800691e:	2303      	movs	r3, #3
 8006920:	e039      	b.n	8006996 <HAL_UART_Transmit+0x104>
      }
      if (pdata8bits == NULL)
 8006922:	69fb      	ldr	r3, [r7, #28]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d10b      	bne.n	8006940 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006928:	69bb      	ldr	r3, [r7, #24]
 800692a:	881b      	ldrh	r3, [r3, #0]
 800692c:	461a      	mov	r2, r3
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006936:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006938:	69bb      	ldr	r3, [r7, #24]
 800693a:	3302      	adds	r3, #2
 800693c:	61bb      	str	r3, [r7, #24]
 800693e:	e007      	b.n	8006950 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006940:	69fb      	ldr	r3, [r7, #28]
 8006942:	781a      	ldrb	r2, [r3, #0]
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800694a:	69fb      	ldr	r3, [r7, #28]
 800694c:	3301      	adds	r3, #1
 800694e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006956:	b29b      	uxth	r3, r3
 8006958:	3b01      	subs	r3, #1
 800695a:	b29a      	uxth	r2, r3
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006968:	b29b      	uxth	r3, r3
 800696a:	2b00      	cmp	r3, #0
 800696c:	d1cc      	bne.n	8006908 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	9300      	str	r3, [sp, #0]
 8006972:	697b      	ldr	r3, [r7, #20]
 8006974:	2200      	movs	r2, #0
 8006976:	2140      	movs	r1, #64	; 0x40
 8006978:	68f8      	ldr	r0, [r7, #12]
 800697a:	f000 ffce 	bl	800791a <UART_WaitOnFlagUntilTimeout>
 800697e:	4603      	mov	r3, r0
 8006980:	2b00      	cmp	r3, #0
 8006982:	d001      	beq.n	8006988 <HAL_UART_Transmit+0xf6>
    {
      return HAL_TIMEOUT;
 8006984:	2303      	movs	r3, #3
 8006986:	e006      	b.n	8006996 <HAL_UART_Transmit+0x104>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	2220      	movs	r2, #32
 800698c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8006990:	2300      	movs	r3, #0
 8006992:	e000      	b.n	8006996 <HAL_UART_Transmit+0x104>
  }
  else
  {
    return HAL_BUSY;
 8006994:	2302      	movs	r3, #2
  }
}
 8006996:	4618      	mov	r0, r3
 8006998:	3720      	adds	r7, #32
 800699a:	46bd      	mov	sp, r7
 800699c:	bd80      	pop	{r7, pc}

0800699e <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800699e:	b580      	push	{r7, lr}
 80069a0:	b08a      	sub	sp, #40	; 0x28
 80069a2:	af02      	add	r7, sp, #8
 80069a4:	60f8      	str	r0, [r7, #12]
 80069a6:	60b9      	str	r1, [r7, #8]
 80069a8:	603b      	str	r3, [r7, #0]
 80069aa:	4613      	mov	r3, r2
 80069ac:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80069b4:	2b20      	cmp	r3, #32
 80069b6:	f040 80b1 	bne.w	8006b1c <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 80069ba:	68bb      	ldr	r3, [r7, #8]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d002      	beq.n	80069c6 <HAL_UART_Receive+0x28>
 80069c0:	88fb      	ldrh	r3, [r7, #6]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d101      	bne.n	80069ca <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80069c6:	2301      	movs	r3, #1
 80069c8:	e0a9      	b.n	8006b1e <HAL_UART_Receive+0x180>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	2200      	movs	r2, #0
 80069ce:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	2222      	movs	r2, #34	; 0x22
 80069d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	2200      	movs	r2, #0
 80069de:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80069e0:	f7fc f910 	bl	8002c04 <HAL_GetTick>
 80069e4:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	88fa      	ldrh	r2, [r7, #6]
 80069ea:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	88fa      	ldrh	r2, [r7, #6]
 80069f2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	689b      	ldr	r3, [r3, #8]
 80069fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069fe:	d10e      	bne.n	8006a1e <HAL_UART_Receive+0x80>
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	691b      	ldr	r3, [r3, #16]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d105      	bne.n	8006a14 <HAL_UART_Receive+0x76>
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006a0e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006a12:	e02d      	b.n	8006a70 <HAL_UART_Receive+0xd2>
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	22ff      	movs	r2, #255	; 0xff
 8006a18:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006a1c:	e028      	b.n	8006a70 <HAL_UART_Receive+0xd2>
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	689b      	ldr	r3, [r3, #8]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d10d      	bne.n	8006a42 <HAL_UART_Receive+0xa4>
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	691b      	ldr	r3, [r3, #16]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d104      	bne.n	8006a38 <HAL_UART_Receive+0x9a>
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	22ff      	movs	r2, #255	; 0xff
 8006a32:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006a36:	e01b      	b.n	8006a70 <HAL_UART_Receive+0xd2>
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	227f      	movs	r2, #127	; 0x7f
 8006a3c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006a40:	e016      	b.n	8006a70 <HAL_UART_Receive+0xd2>
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	689b      	ldr	r3, [r3, #8]
 8006a46:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006a4a:	d10d      	bne.n	8006a68 <HAL_UART_Receive+0xca>
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	691b      	ldr	r3, [r3, #16]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d104      	bne.n	8006a5e <HAL_UART_Receive+0xc0>
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	227f      	movs	r2, #127	; 0x7f
 8006a58:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006a5c:	e008      	b.n	8006a70 <HAL_UART_Receive+0xd2>
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	223f      	movs	r2, #63	; 0x3f
 8006a62:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006a66:	e003      	b.n	8006a70 <HAL_UART_Receive+0xd2>
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006a76:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	689b      	ldr	r3, [r3, #8]
 8006a7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a80:	d108      	bne.n	8006a94 <HAL_UART_Receive+0xf6>
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	691b      	ldr	r3, [r3, #16]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d104      	bne.n	8006a94 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006a8e:	68bb      	ldr	r3, [r7, #8]
 8006a90:	61bb      	str	r3, [r7, #24]
 8006a92:	e003      	b.n	8006a9c <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8006a94:	68bb      	ldr	r3, [r7, #8]
 8006a96:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006a98:	2300      	movs	r3, #0
 8006a9a:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8006a9c:	e032      	b.n	8006b04 <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	9300      	str	r3, [sp, #0]
 8006aa2:	697b      	ldr	r3, [r7, #20]
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	2120      	movs	r1, #32
 8006aa8:	68f8      	ldr	r0, [r7, #12]
 8006aaa:	f000 ff36 	bl	800791a <UART_WaitOnFlagUntilTimeout>
 8006aae:	4603      	mov	r3, r0
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d001      	beq.n	8006ab8 <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 8006ab4:	2303      	movs	r3, #3
 8006ab6:	e032      	b.n	8006b1e <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 8006ab8:	69fb      	ldr	r3, [r7, #28]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d10c      	bne.n	8006ad8 <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ac4:	b29a      	uxth	r2, r3
 8006ac6:	8a7b      	ldrh	r3, [r7, #18]
 8006ac8:	4013      	ands	r3, r2
 8006aca:	b29a      	uxth	r2, r3
 8006acc:	69bb      	ldr	r3, [r7, #24]
 8006ace:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006ad0:	69bb      	ldr	r3, [r7, #24]
 8006ad2:	3302      	adds	r3, #2
 8006ad4:	61bb      	str	r3, [r7, #24]
 8006ad6:	e00c      	b.n	8006af2 <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ade:	b2da      	uxtb	r2, r3
 8006ae0:	8a7b      	ldrh	r3, [r7, #18]
 8006ae2:	b2db      	uxtb	r3, r3
 8006ae4:	4013      	ands	r3, r2
 8006ae6:	b2da      	uxtb	r2, r3
 8006ae8:	69fb      	ldr	r3, [r7, #28]
 8006aea:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8006aec:	69fb      	ldr	r3, [r7, #28]
 8006aee:	3301      	adds	r3, #1
 8006af0:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006af8:	b29b      	uxth	r3, r3
 8006afa:	3b01      	subs	r3, #1
 8006afc:	b29a      	uxth	r2, r3
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006b0a:	b29b      	uxth	r3, r3
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d1c6      	bne.n	8006a9e <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	2220      	movs	r2, #32
 8006b14:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 8006b18:	2300      	movs	r3, #0
 8006b1a:	e000      	b.n	8006b1e <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 8006b1c:	2302      	movs	r3, #2
  }
}
 8006b1e:	4618      	mov	r0, r3
 8006b20:	3720      	adds	r7, #32
 8006b22:	46bd      	mov	sp, r7
 8006b24:	bd80      	pop	{r7, pc}
	...

08006b28 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b08a      	sub	sp, #40	; 0x28
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	60f8      	str	r0, [r7, #12]
 8006b30:	60b9      	str	r1, [r7, #8]
 8006b32:	4613      	mov	r3, r2
 8006b34:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b3c:	2b20      	cmp	r3, #32
 8006b3e:	d137      	bne.n	8006bb0 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8006b40:	68bb      	ldr	r3, [r7, #8]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d002      	beq.n	8006b4c <HAL_UART_Receive_DMA+0x24>
 8006b46:	88fb      	ldrh	r3, [r7, #6]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d101      	bne.n	8006b50 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8006b4c:	2301      	movs	r3, #1
 8006b4e:	e030      	b.n	8006bb2 <HAL_UART_Receive_DMA+0x8a>
      }
    }

#endif /* CORE_CM0PLUS */
    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	2200      	movs	r2, #0
 8006b54:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	4a18      	ldr	r2, [pc, #96]	; (8006bbc <HAL_UART_Receive_DMA+0x94>)
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	d01f      	beq.n	8006ba0 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	685b      	ldr	r3, [r3, #4]
 8006b66:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d018      	beq.n	8006ba0 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b74:	697b      	ldr	r3, [r7, #20]
 8006b76:	e853 3f00 	ldrex	r3, [r3]
 8006b7a:	613b      	str	r3, [r7, #16]
   return(result);
 8006b7c:	693b      	ldr	r3, [r7, #16]
 8006b7e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006b82:	627b      	str	r3, [r7, #36]	; 0x24
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	461a      	mov	r2, r3
 8006b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b8c:	623b      	str	r3, [r7, #32]
 8006b8e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b90:	69f9      	ldr	r1, [r7, #28]
 8006b92:	6a3a      	ldr	r2, [r7, #32]
 8006b94:	e841 2300 	strex	r3, r2, [r1]
 8006b98:	61bb      	str	r3, [r7, #24]
   return(result);
 8006b9a:	69bb      	ldr	r3, [r7, #24]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d1e6      	bne.n	8006b6e <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8006ba0:	88fb      	ldrh	r3, [r7, #6]
 8006ba2:	461a      	mov	r2, r3
 8006ba4:	68b9      	ldr	r1, [r7, #8]
 8006ba6:	68f8      	ldr	r0, [r7, #12]
 8006ba8:	f000 ff80 	bl	8007aac <UART_Start_Receive_DMA>
 8006bac:	4603      	mov	r3, r0
 8006bae:	e000      	b.n	8006bb2 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006bb0:	2302      	movs	r3, #2
  }
}
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	3728      	adds	r7, #40	; 0x28
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	bd80      	pop	{r7, pc}
 8006bba:	bf00      	nop
 8006bbc:	40008000 	.word	0x40008000

08006bc0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	b0ba      	sub	sp, #232	; 0xe8
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	69db      	ldr	r3, [r3, #28]
 8006bce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	689b      	ldr	r3, [r3, #8]
 8006be2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006be6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006bea:	f640 030f 	movw	r3, #2063	; 0x80f
 8006bee:	4013      	ands	r3, r2
 8006bf0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006bf4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d11b      	bne.n	8006c34 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006bfc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c00:	f003 0320 	and.w	r3, r3, #32
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d015      	beq.n	8006c34 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006c08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c0c:	f003 0320 	and.w	r3, r3, #32
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d105      	bne.n	8006c20 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006c14:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d009      	beq.n	8006c34 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	f000 82e3 	beq.w	80071f0 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c2e:	6878      	ldr	r0, [r7, #4]
 8006c30:	4798      	blx	r3
      }
      return;
 8006c32:	e2dd      	b.n	80071f0 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006c34:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	f000 8123 	beq.w	8006e84 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006c3e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006c42:	4b8d      	ldr	r3, [pc, #564]	; (8006e78 <HAL_UART_IRQHandler+0x2b8>)
 8006c44:	4013      	ands	r3, r2
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d106      	bne.n	8006c58 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006c4a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006c4e:	4b8b      	ldr	r3, [pc, #556]	; (8006e7c <HAL_UART_IRQHandler+0x2bc>)
 8006c50:	4013      	ands	r3, r2
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	f000 8116 	beq.w	8006e84 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006c58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c5c:	f003 0301 	and.w	r3, r3, #1
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d011      	beq.n	8006c88 <HAL_UART_IRQHandler+0xc8>
 8006c64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d00b      	beq.n	8006c88 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	2201      	movs	r2, #1
 8006c76:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c7e:	f043 0201 	orr.w	r2, r3, #1
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006c88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c8c:	f003 0302 	and.w	r3, r3, #2
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d011      	beq.n	8006cb8 <HAL_UART_IRQHandler+0xf8>
 8006c94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c98:	f003 0301 	and.w	r3, r3, #1
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d00b      	beq.n	8006cb8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	2202      	movs	r2, #2
 8006ca6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cae:	f043 0204 	orr.w	r2, r3, #4
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006cb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cbc:	f003 0304 	and.w	r3, r3, #4
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d011      	beq.n	8006ce8 <HAL_UART_IRQHandler+0x128>
 8006cc4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006cc8:	f003 0301 	and.w	r3, r3, #1
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d00b      	beq.n	8006ce8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	2204      	movs	r2, #4
 8006cd6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cde:	f043 0202 	orr.w	r2, r3, #2
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006ce8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cec:	f003 0308 	and.w	r3, r3, #8
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d017      	beq.n	8006d24 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006cf4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006cf8:	f003 0320 	and.w	r3, r3, #32
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d105      	bne.n	8006d0c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006d00:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006d04:	4b5c      	ldr	r3, [pc, #368]	; (8006e78 <HAL_UART_IRQHandler+0x2b8>)
 8006d06:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d00b      	beq.n	8006d24 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	2208      	movs	r2, #8
 8006d12:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d1a:	f043 0208 	orr.w	r2, r3, #8
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006d24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d012      	beq.n	8006d56 <HAL_UART_IRQHandler+0x196>
 8006d30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d34:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d00c      	beq.n	8006d56 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006d44:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d4c:	f043 0220 	orr.w	r2, r3, #32
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	f000 8249 	beq.w	80071f4 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006d62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d66:	f003 0320 	and.w	r3, r3, #32
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d013      	beq.n	8006d96 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006d6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d72:	f003 0320 	and.w	r3, r3, #32
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d105      	bne.n	8006d86 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006d7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d007      	beq.n	8006d96 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d003      	beq.n	8006d96 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d92:	6878      	ldr	r0, [r7, #4]
 8006d94:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d9c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	689b      	ldr	r3, [r3, #8]
 8006da6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006daa:	2b40      	cmp	r3, #64	; 0x40
 8006dac:	d005      	beq.n	8006dba <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006dae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006db2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d054      	beq.n	8006e64 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006dba:	6878      	ldr	r0, [r7, #4]
 8006dbc:	f000 ff5c 	bl	8007c78 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	689b      	ldr	r3, [r3, #8]
 8006dc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dca:	2b40      	cmp	r3, #64	; 0x40
 8006dcc:	d146      	bne.n	8006e5c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	3308      	adds	r3, #8
 8006dd4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dd8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006ddc:	e853 3f00 	ldrex	r3, [r3]
 8006de0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006de4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006de8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006dec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	3308      	adds	r3, #8
 8006df6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006dfa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006dfe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e02:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006e06:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006e0a:	e841 2300 	strex	r3, r2, [r1]
 8006e0e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006e12:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d1d9      	bne.n	8006dce <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d017      	beq.n	8006e54 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006e2a:	4a15      	ldr	r2, [pc, #84]	; (8006e80 <HAL_UART_IRQHandler+0x2c0>)
 8006e2c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006e34:	4618      	mov	r0, r3
 8006e36:	f7fc fe9f 	bl	8003b78 <HAL_DMA_Abort_IT>
 8006e3a:	4603      	mov	r3, r0
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d019      	beq.n	8006e74 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006e46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e48:	687a      	ldr	r2, [r7, #4]
 8006e4a:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8006e4e:	4610      	mov	r0, r2
 8006e50:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e52:	e00f      	b.n	8006e74 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006e54:	6878      	ldr	r0, [r7, #4]
 8006e56:	f000 f9e9 	bl	800722c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e5a:	e00b      	b.n	8006e74 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006e5c:	6878      	ldr	r0, [r7, #4]
 8006e5e:	f000 f9e5 	bl	800722c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e62:	e007      	b.n	8006e74 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006e64:	6878      	ldr	r0, [r7, #4]
 8006e66:	f000 f9e1 	bl	800722c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8006e72:	e1bf      	b.n	80071f4 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e74:	bf00      	nop
    return;
 8006e76:	e1bd      	b.n	80071f4 <HAL_UART_IRQHandler+0x634>
 8006e78:	10000001 	.word	0x10000001
 8006e7c:	04000120 	.word	0x04000120
 8006e80:	08007f2d 	.word	0x08007f2d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e88:	2b01      	cmp	r3, #1
 8006e8a:	f040 8153 	bne.w	8007134 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006e8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e92:	f003 0310 	and.w	r3, r3, #16
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	f000 814c 	beq.w	8007134 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006e9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ea0:	f003 0310 	and.w	r3, r3, #16
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	f000 8145 	beq.w	8007134 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	2210      	movs	r2, #16
 8006eb0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	689b      	ldr	r3, [r3, #8]
 8006eb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ebc:	2b40      	cmp	r3, #64	; 0x40
 8006ebe:	f040 80bb 	bne.w	8007038 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	685b      	ldr	r3, [r3, #4]
 8006ecc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006ed0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	f000 818f 	beq.w	80071f8 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006ee0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006ee4:	429a      	cmp	r2, r3
 8006ee6:	f080 8187 	bcs.w	80071f8 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006ef0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f003 0320 	and.w	r3, r3, #32
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	f040 8087 	bne.w	8007016 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f10:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006f14:	e853 3f00 	ldrex	r3, [r3]
 8006f18:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006f1c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006f20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006f24:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	461a      	mov	r2, r3
 8006f2e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006f32:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006f36:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f3a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006f3e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006f42:	e841 2300 	strex	r3, r2, [r1]
 8006f46:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006f4a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d1da      	bne.n	8006f08 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	3308      	adds	r3, #8
 8006f58:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f5a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006f5c:	e853 3f00 	ldrex	r3, [r3]
 8006f60:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006f62:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006f64:	f023 0301 	bic.w	r3, r3, #1
 8006f68:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	3308      	adds	r3, #8
 8006f72:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006f76:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006f7a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f7c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006f7e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006f82:	e841 2300 	strex	r3, r2, [r1]
 8006f86:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006f88:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d1e1      	bne.n	8006f52 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	3308      	adds	r3, #8
 8006f94:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f96:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006f98:	e853 3f00 	ldrex	r3, [r3]
 8006f9c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006f9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006fa0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006fa4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	3308      	adds	r3, #8
 8006fae:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006fb2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006fb4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fb6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006fb8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006fba:	e841 2300 	strex	r3, r2, [r1]
 8006fbe:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006fc0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d1e3      	bne.n	8006f8e <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2220      	movs	r2, #32
 8006fca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006fdc:	e853 3f00 	ldrex	r3, [r3]
 8006fe0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006fe2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006fe4:	f023 0310 	bic.w	r3, r3, #16
 8006fe8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	461a      	mov	r2, r3
 8006ff2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006ff6:	65bb      	str	r3, [r7, #88]	; 0x58
 8006ff8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ffa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006ffc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006ffe:	e841 2300 	strex	r3, r2, [r1]
 8007002:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007004:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007006:	2b00      	cmp	r3, #0
 8007008:	d1e4      	bne.n	8006fd4 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007010:	4618      	mov	r0, r3
 8007012:	f7fc fd53 	bl	8003abc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	2202      	movs	r2, #2
 800701a:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007028:	b29b      	uxth	r3, r3
 800702a:	1ad3      	subs	r3, r2, r3
 800702c:	b29b      	uxth	r3, r3
 800702e:	4619      	mov	r1, r3
 8007030:	6878      	ldr	r0, [r7, #4]
 8007032:	f000 f904 	bl	800723e <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007036:	e0df      	b.n	80071f8 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007044:	b29b      	uxth	r3, r3
 8007046:	1ad3      	subs	r3, r2, r3
 8007048:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007052:	b29b      	uxth	r3, r3
 8007054:	2b00      	cmp	r3, #0
 8007056:	f000 80d1 	beq.w	80071fc <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 800705a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800705e:	2b00      	cmp	r3, #0
 8007060:	f000 80cc 	beq.w	80071fc <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800706a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800706c:	e853 3f00 	ldrex	r3, [r3]
 8007070:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007072:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007074:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007078:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	461a      	mov	r2, r3
 8007082:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007086:	647b      	str	r3, [r7, #68]	; 0x44
 8007088:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800708a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800708c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800708e:	e841 2300 	strex	r3, r2, [r1]
 8007092:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007094:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007096:	2b00      	cmp	r3, #0
 8007098:	d1e4      	bne.n	8007064 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	3308      	adds	r3, #8
 80070a0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070a4:	e853 3f00 	ldrex	r3, [r3]
 80070a8:	623b      	str	r3, [r7, #32]
   return(result);
 80070aa:	6a3b      	ldr	r3, [r7, #32]
 80070ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80070b0:	f023 0301 	bic.w	r3, r3, #1
 80070b4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	3308      	adds	r3, #8
 80070be:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80070c2:	633a      	str	r2, [r7, #48]	; 0x30
 80070c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80070c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80070ca:	e841 2300 	strex	r3, r2, [r1]
 80070ce:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80070d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d1e1      	bne.n	800709a <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2220      	movs	r2, #32
 80070da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	2200      	movs	r2, #0
 80070e2:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2200      	movs	r2, #0
 80070e8:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070f0:	693b      	ldr	r3, [r7, #16]
 80070f2:	e853 3f00 	ldrex	r3, [r3]
 80070f6:	60fb      	str	r3, [r7, #12]
   return(result);
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	f023 0310 	bic.w	r3, r3, #16
 80070fe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	461a      	mov	r2, r3
 8007108:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800710c:	61fb      	str	r3, [r7, #28]
 800710e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007110:	69b9      	ldr	r1, [r7, #24]
 8007112:	69fa      	ldr	r2, [r7, #28]
 8007114:	e841 2300 	strex	r3, r2, [r1]
 8007118:	617b      	str	r3, [r7, #20]
   return(result);
 800711a:	697b      	ldr	r3, [r7, #20]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d1e4      	bne.n	80070ea <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2202      	movs	r2, #2
 8007124:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007126:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800712a:	4619      	mov	r1, r3
 800712c:	6878      	ldr	r0, [r7, #4]
 800712e:	f000 f886 	bl	800723e <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007132:	e063      	b.n	80071fc <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007134:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007138:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800713c:	2b00      	cmp	r3, #0
 800713e:	d00e      	beq.n	800715e <HAL_UART_IRQHandler+0x59e>
 8007140:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007144:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007148:	2b00      	cmp	r3, #0
 800714a:	d008      	beq.n	800715e <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007154:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007156:	6878      	ldr	r0, [r7, #4]
 8007158:	f000 ff29 	bl	8007fae <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800715c:	e051      	b.n	8007202 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800715e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007162:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007166:	2b00      	cmp	r3, #0
 8007168:	d014      	beq.n	8007194 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800716a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800716e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007172:	2b00      	cmp	r3, #0
 8007174:	d105      	bne.n	8007182 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007176:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800717a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800717e:	2b00      	cmp	r3, #0
 8007180:	d008      	beq.n	8007194 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007186:	2b00      	cmp	r3, #0
 8007188:	d03a      	beq.n	8007200 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800718e:	6878      	ldr	r0, [r7, #4]
 8007190:	4798      	blx	r3
    }
    return;
 8007192:	e035      	b.n	8007200 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007194:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007198:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800719c:	2b00      	cmp	r3, #0
 800719e:	d009      	beq.n	80071b4 <HAL_UART_IRQHandler+0x5f4>
 80071a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d003      	beq.n	80071b4 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 80071ac:	6878      	ldr	r0, [r7, #4]
 80071ae:	f000 fed3 	bl	8007f58 <UART_EndTransmit_IT>
    return;
 80071b2:	e026      	b.n	8007202 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80071b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071b8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d009      	beq.n	80071d4 <HAL_UART_IRQHandler+0x614>
 80071c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071c4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d003      	beq.n	80071d4 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80071cc:	6878      	ldr	r0, [r7, #4]
 80071ce:	f000 ff00 	bl	8007fd2 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80071d2:	e016      	b.n	8007202 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80071d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d010      	beq.n	8007202 <HAL_UART_IRQHandler+0x642>
 80071e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	da0c      	bge.n	8007202 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80071e8:	6878      	ldr	r0, [r7, #4]
 80071ea:	f000 fee9 	bl	8007fc0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80071ee:	e008      	b.n	8007202 <HAL_UART_IRQHandler+0x642>
      return;
 80071f0:	bf00      	nop
 80071f2:	e006      	b.n	8007202 <HAL_UART_IRQHandler+0x642>
    return;
 80071f4:	bf00      	nop
 80071f6:	e004      	b.n	8007202 <HAL_UART_IRQHandler+0x642>
      return;
 80071f8:	bf00      	nop
 80071fa:	e002      	b.n	8007202 <HAL_UART_IRQHandler+0x642>
      return;
 80071fc:	bf00      	nop
 80071fe:	e000      	b.n	8007202 <HAL_UART_IRQHandler+0x642>
    return;
 8007200:	bf00      	nop
  }
}
 8007202:	37e8      	adds	r7, #232	; 0xe8
 8007204:	46bd      	mov	sp, r7
 8007206:	bd80      	pop	{r7, pc}

08007208 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007208:	b480      	push	{r7}
 800720a:	b083      	sub	sp, #12
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007210:	bf00      	nop
 8007212:	370c      	adds	r7, #12
 8007214:	46bd      	mov	sp, r7
 8007216:	bc80      	pop	{r7}
 8007218:	4770      	bx	lr

0800721a <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800721a:	b480      	push	{r7}
 800721c:	b083      	sub	sp, #12
 800721e:	af00      	add	r7, sp, #0
 8007220:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8007222:	bf00      	nop
 8007224:	370c      	adds	r7, #12
 8007226:	46bd      	mov	sp, r7
 8007228:	bc80      	pop	{r7}
 800722a:	4770      	bx	lr

0800722c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800722c:	b480      	push	{r7}
 800722e:	b083      	sub	sp, #12
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007234:	bf00      	nop
 8007236:	370c      	adds	r7, #12
 8007238:	46bd      	mov	sp, r7
 800723a:	bc80      	pop	{r7}
 800723c:	4770      	bx	lr

0800723e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800723e:	b480      	push	{r7}
 8007240:	b083      	sub	sp, #12
 8007242:	af00      	add	r7, sp, #0
 8007244:	6078      	str	r0, [r7, #4]
 8007246:	460b      	mov	r3, r1
 8007248:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800724a:	bf00      	nop
 800724c:	370c      	adds	r7, #12
 800724e:	46bd      	mov	sp, r7
 8007250:	bc80      	pop	{r7}
 8007252:	4770      	bx	lr

08007254 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007254:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007258:	b08c      	sub	sp, #48	; 0x30
 800725a:	af00      	add	r7, sp, #0
 800725c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800725e:	2300      	movs	r3, #0
 8007260:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007264:	697b      	ldr	r3, [r7, #20]
 8007266:	689a      	ldr	r2, [r3, #8]
 8007268:	697b      	ldr	r3, [r7, #20]
 800726a:	691b      	ldr	r3, [r3, #16]
 800726c:	431a      	orrs	r2, r3
 800726e:	697b      	ldr	r3, [r7, #20]
 8007270:	695b      	ldr	r3, [r3, #20]
 8007272:	431a      	orrs	r2, r3
 8007274:	697b      	ldr	r3, [r7, #20]
 8007276:	69db      	ldr	r3, [r3, #28]
 8007278:	4313      	orrs	r3, r2
 800727a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800727c:	697b      	ldr	r3, [r7, #20]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	681a      	ldr	r2, [r3, #0]
 8007282:	4b94      	ldr	r3, [pc, #592]	; (80074d4 <UART_SetConfig+0x280>)
 8007284:	4013      	ands	r3, r2
 8007286:	697a      	ldr	r2, [r7, #20]
 8007288:	6812      	ldr	r2, [r2, #0]
 800728a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800728c:	430b      	orrs	r3, r1
 800728e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007290:	697b      	ldr	r3, [r7, #20]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	685b      	ldr	r3, [r3, #4]
 8007296:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800729a:	697b      	ldr	r3, [r7, #20]
 800729c:	68da      	ldr	r2, [r3, #12]
 800729e:	697b      	ldr	r3, [r7, #20]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	430a      	orrs	r2, r1
 80072a4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80072a6:	697b      	ldr	r3, [r7, #20]
 80072a8:	699b      	ldr	r3, [r3, #24]
 80072aa:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80072ac:	697b      	ldr	r3, [r7, #20]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	4a89      	ldr	r2, [pc, #548]	; (80074d8 <UART_SetConfig+0x284>)
 80072b2:	4293      	cmp	r3, r2
 80072b4:	d004      	beq.n	80072c0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80072b6:	697b      	ldr	r3, [r7, #20]
 80072b8:	6a1b      	ldr	r3, [r3, #32]
 80072ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80072bc:	4313      	orrs	r3, r2
 80072be:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80072c0:	697b      	ldr	r3, [r7, #20]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	689b      	ldr	r3, [r3, #8]
 80072c6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80072ca:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80072ce:	697a      	ldr	r2, [r7, #20]
 80072d0:	6812      	ldr	r2, [r2, #0]
 80072d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80072d4:	430b      	orrs	r3, r1
 80072d6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80072d8:	697b      	ldr	r3, [r7, #20]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072de:	f023 010f 	bic.w	r1, r3, #15
 80072e2:	697b      	ldr	r3, [r7, #20]
 80072e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80072e6:	697b      	ldr	r3, [r7, #20]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	430a      	orrs	r2, r1
 80072ec:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80072ee:	697b      	ldr	r3, [r7, #20]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	4a7a      	ldr	r2, [pc, #488]	; (80074dc <UART_SetConfig+0x288>)
 80072f4:	4293      	cmp	r3, r2
 80072f6:	d127      	bne.n	8007348 <UART_SetConfig+0xf4>
 80072f8:	2003      	movs	r0, #3
 80072fa:	f7ff fa59 	bl	80067b0 <LL_RCC_GetUSARTClockSource>
 80072fe:	4603      	mov	r3, r0
 8007300:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 8007304:	2b03      	cmp	r3, #3
 8007306:	d81b      	bhi.n	8007340 <UART_SetConfig+0xec>
 8007308:	a201      	add	r2, pc, #4	; (adr r2, 8007310 <UART_SetConfig+0xbc>)
 800730a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800730e:	bf00      	nop
 8007310:	08007321 	.word	0x08007321
 8007314:	08007331 	.word	0x08007331
 8007318:	08007329 	.word	0x08007329
 800731c:	08007339 	.word	0x08007339
 8007320:	2301      	movs	r3, #1
 8007322:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007326:	e080      	b.n	800742a <UART_SetConfig+0x1d6>
 8007328:	2302      	movs	r3, #2
 800732a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800732e:	e07c      	b.n	800742a <UART_SetConfig+0x1d6>
 8007330:	2304      	movs	r3, #4
 8007332:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007336:	e078      	b.n	800742a <UART_SetConfig+0x1d6>
 8007338:	2308      	movs	r3, #8
 800733a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800733e:	e074      	b.n	800742a <UART_SetConfig+0x1d6>
 8007340:	2310      	movs	r3, #16
 8007342:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007346:	e070      	b.n	800742a <UART_SetConfig+0x1d6>
 8007348:	697b      	ldr	r3, [r7, #20]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	4a64      	ldr	r2, [pc, #400]	; (80074e0 <UART_SetConfig+0x28c>)
 800734e:	4293      	cmp	r3, r2
 8007350:	d138      	bne.n	80073c4 <UART_SetConfig+0x170>
 8007352:	200c      	movs	r0, #12
 8007354:	f7ff fa2c 	bl	80067b0 <LL_RCC_GetUSARTClockSource>
 8007358:	4603      	mov	r3, r0
 800735a:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 800735e:	2b0c      	cmp	r3, #12
 8007360:	d82c      	bhi.n	80073bc <UART_SetConfig+0x168>
 8007362:	a201      	add	r2, pc, #4	; (adr r2, 8007368 <UART_SetConfig+0x114>)
 8007364:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007368:	0800739d 	.word	0x0800739d
 800736c:	080073bd 	.word	0x080073bd
 8007370:	080073bd 	.word	0x080073bd
 8007374:	080073bd 	.word	0x080073bd
 8007378:	080073ad 	.word	0x080073ad
 800737c:	080073bd 	.word	0x080073bd
 8007380:	080073bd 	.word	0x080073bd
 8007384:	080073bd 	.word	0x080073bd
 8007388:	080073a5 	.word	0x080073a5
 800738c:	080073bd 	.word	0x080073bd
 8007390:	080073bd 	.word	0x080073bd
 8007394:	080073bd 	.word	0x080073bd
 8007398:	080073b5 	.word	0x080073b5
 800739c:	2300      	movs	r3, #0
 800739e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80073a2:	e042      	b.n	800742a <UART_SetConfig+0x1d6>
 80073a4:	2302      	movs	r3, #2
 80073a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80073aa:	e03e      	b.n	800742a <UART_SetConfig+0x1d6>
 80073ac:	2304      	movs	r3, #4
 80073ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80073b2:	e03a      	b.n	800742a <UART_SetConfig+0x1d6>
 80073b4:	2308      	movs	r3, #8
 80073b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80073ba:	e036      	b.n	800742a <UART_SetConfig+0x1d6>
 80073bc:	2310      	movs	r3, #16
 80073be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80073c2:	e032      	b.n	800742a <UART_SetConfig+0x1d6>
 80073c4:	697b      	ldr	r3, [r7, #20]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	4a43      	ldr	r2, [pc, #268]	; (80074d8 <UART_SetConfig+0x284>)
 80073ca:	4293      	cmp	r3, r2
 80073cc:	d12a      	bne.n	8007424 <UART_SetConfig+0x1d0>
 80073ce:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80073d2:	f7ff f9ff 	bl	80067d4 <LL_RCC_GetLPUARTClockSource>
 80073d6:	4603      	mov	r3, r0
 80073d8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80073dc:	d01a      	beq.n	8007414 <UART_SetConfig+0x1c0>
 80073de:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80073e2:	d81b      	bhi.n	800741c <UART_SetConfig+0x1c8>
 80073e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80073e8:	d00c      	beq.n	8007404 <UART_SetConfig+0x1b0>
 80073ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80073ee:	d815      	bhi.n	800741c <UART_SetConfig+0x1c8>
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d003      	beq.n	80073fc <UART_SetConfig+0x1a8>
 80073f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80073f8:	d008      	beq.n	800740c <UART_SetConfig+0x1b8>
 80073fa:	e00f      	b.n	800741c <UART_SetConfig+0x1c8>
 80073fc:	2300      	movs	r3, #0
 80073fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007402:	e012      	b.n	800742a <UART_SetConfig+0x1d6>
 8007404:	2302      	movs	r3, #2
 8007406:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800740a:	e00e      	b.n	800742a <UART_SetConfig+0x1d6>
 800740c:	2304      	movs	r3, #4
 800740e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007412:	e00a      	b.n	800742a <UART_SetConfig+0x1d6>
 8007414:	2308      	movs	r3, #8
 8007416:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800741a:	e006      	b.n	800742a <UART_SetConfig+0x1d6>
 800741c:	2310      	movs	r3, #16
 800741e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007422:	e002      	b.n	800742a <UART_SetConfig+0x1d6>
 8007424:	2310      	movs	r3, #16
 8007426:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800742a:	697b      	ldr	r3, [r7, #20]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	4a2a      	ldr	r2, [pc, #168]	; (80074d8 <UART_SetConfig+0x284>)
 8007430:	4293      	cmp	r3, r2
 8007432:	f040 80a4 	bne.w	800757e <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007436:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800743a:	2b08      	cmp	r3, #8
 800743c:	d823      	bhi.n	8007486 <UART_SetConfig+0x232>
 800743e:	a201      	add	r2, pc, #4	; (adr r2, 8007444 <UART_SetConfig+0x1f0>)
 8007440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007444:	08007469 	.word	0x08007469
 8007448:	08007487 	.word	0x08007487
 800744c:	08007471 	.word	0x08007471
 8007450:	08007487 	.word	0x08007487
 8007454:	08007477 	.word	0x08007477
 8007458:	08007487 	.word	0x08007487
 800745c:	08007487 	.word	0x08007487
 8007460:	08007487 	.word	0x08007487
 8007464:	0800747f 	.word	0x0800747f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007468:	f7fd ff46 	bl	80052f8 <HAL_RCC_GetPCLK1Freq>
 800746c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800746e:	e010      	b.n	8007492 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007470:	4b1c      	ldr	r3, [pc, #112]	; (80074e4 <UART_SetConfig+0x290>)
 8007472:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007474:	e00d      	b.n	8007492 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007476:	f7fd fe8b 	bl	8005190 <HAL_RCC_GetSysClockFreq>
 800747a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800747c:	e009      	b.n	8007492 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800747e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007482:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007484:	e005      	b.n	8007492 <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 8007486:	2300      	movs	r3, #0
 8007488:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800748a:	2301      	movs	r3, #1
 800748c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007490:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007494:	2b00      	cmp	r3, #0
 8007496:	f000 8137 	beq.w	8007708 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800749a:	697b      	ldr	r3, [r7, #20]
 800749c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800749e:	4a12      	ldr	r2, [pc, #72]	; (80074e8 <UART_SetConfig+0x294>)
 80074a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80074a4:	461a      	mov	r2, r3
 80074a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80074ac:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80074ae:	697b      	ldr	r3, [r7, #20]
 80074b0:	685a      	ldr	r2, [r3, #4]
 80074b2:	4613      	mov	r3, r2
 80074b4:	005b      	lsls	r3, r3, #1
 80074b6:	4413      	add	r3, r2
 80074b8:	69ba      	ldr	r2, [r7, #24]
 80074ba:	429a      	cmp	r2, r3
 80074bc:	d305      	bcc.n	80074ca <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80074be:	697b      	ldr	r3, [r7, #20]
 80074c0:	685b      	ldr	r3, [r3, #4]
 80074c2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80074c4:	69ba      	ldr	r2, [r7, #24]
 80074c6:	429a      	cmp	r2, r3
 80074c8:	d910      	bls.n	80074ec <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 80074ca:	2301      	movs	r3, #1
 80074cc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80074d0:	e11a      	b.n	8007708 <UART_SetConfig+0x4b4>
 80074d2:	bf00      	nop
 80074d4:	cfff69f3 	.word	0xcfff69f3
 80074d8:	40008000 	.word	0x40008000
 80074dc:	40013800 	.word	0x40013800
 80074e0:	40004400 	.word	0x40004400
 80074e4:	00f42400 	.word	0x00f42400
 80074e8:	0800d020 	.word	0x0800d020
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80074ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ee:	2200      	movs	r2, #0
 80074f0:	60bb      	str	r3, [r7, #8]
 80074f2:	60fa      	str	r2, [r7, #12]
 80074f4:	697b      	ldr	r3, [r7, #20]
 80074f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074f8:	4a8e      	ldr	r2, [pc, #568]	; (8007734 <UART_SetConfig+0x4e0>)
 80074fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80074fe:	b29b      	uxth	r3, r3
 8007500:	2200      	movs	r2, #0
 8007502:	603b      	str	r3, [r7, #0]
 8007504:	607a      	str	r2, [r7, #4]
 8007506:	e9d7 2300 	ldrd	r2, r3, [r7]
 800750a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800750e:	f7f8 fe87 	bl	8000220 <__aeabi_uldivmod>
 8007512:	4602      	mov	r2, r0
 8007514:	460b      	mov	r3, r1
 8007516:	4610      	mov	r0, r2
 8007518:	4619      	mov	r1, r3
 800751a:	f04f 0200 	mov.w	r2, #0
 800751e:	f04f 0300 	mov.w	r3, #0
 8007522:	020b      	lsls	r3, r1, #8
 8007524:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007528:	0202      	lsls	r2, r0, #8
 800752a:	6979      	ldr	r1, [r7, #20]
 800752c:	6849      	ldr	r1, [r1, #4]
 800752e:	0849      	lsrs	r1, r1, #1
 8007530:	2000      	movs	r0, #0
 8007532:	460c      	mov	r4, r1
 8007534:	4605      	mov	r5, r0
 8007536:	eb12 0804 	adds.w	r8, r2, r4
 800753a:	eb43 0905 	adc.w	r9, r3, r5
 800753e:	697b      	ldr	r3, [r7, #20]
 8007540:	685b      	ldr	r3, [r3, #4]
 8007542:	2200      	movs	r2, #0
 8007544:	469a      	mov	sl, r3
 8007546:	4693      	mov	fp, r2
 8007548:	4652      	mov	r2, sl
 800754a:	465b      	mov	r3, fp
 800754c:	4640      	mov	r0, r8
 800754e:	4649      	mov	r1, r9
 8007550:	f7f8 fe66 	bl	8000220 <__aeabi_uldivmod>
 8007554:	4602      	mov	r2, r0
 8007556:	460b      	mov	r3, r1
 8007558:	4613      	mov	r3, r2
 800755a:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800755c:	6a3b      	ldr	r3, [r7, #32]
 800755e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007562:	d308      	bcc.n	8007576 <UART_SetConfig+0x322>
 8007564:	6a3b      	ldr	r3, [r7, #32]
 8007566:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800756a:	d204      	bcs.n	8007576 <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 800756c:	697b      	ldr	r3, [r7, #20]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	6a3a      	ldr	r2, [r7, #32]
 8007572:	60da      	str	r2, [r3, #12]
 8007574:	e0c8      	b.n	8007708 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 8007576:	2301      	movs	r3, #1
 8007578:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800757c:	e0c4      	b.n	8007708 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800757e:	697b      	ldr	r3, [r7, #20]
 8007580:	69db      	ldr	r3, [r3, #28]
 8007582:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007586:	d167      	bne.n	8007658 <UART_SetConfig+0x404>
  {
    switch (clocksource)
 8007588:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800758c:	2b08      	cmp	r3, #8
 800758e:	d828      	bhi.n	80075e2 <UART_SetConfig+0x38e>
 8007590:	a201      	add	r2, pc, #4	; (adr r2, 8007598 <UART_SetConfig+0x344>)
 8007592:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007596:	bf00      	nop
 8007598:	080075bd 	.word	0x080075bd
 800759c:	080075c5 	.word	0x080075c5
 80075a0:	080075cd 	.word	0x080075cd
 80075a4:	080075e3 	.word	0x080075e3
 80075a8:	080075d3 	.word	0x080075d3
 80075ac:	080075e3 	.word	0x080075e3
 80075b0:	080075e3 	.word	0x080075e3
 80075b4:	080075e3 	.word	0x080075e3
 80075b8:	080075db 	.word	0x080075db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80075bc:	f7fd fe9c 	bl	80052f8 <HAL_RCC_GetPCLK1Freq>
 80075c0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80075c2:	e014      	b.n	80075ee <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80075c4:	f7fd feaa 	bl	800531c <HAL_RCC_GetPCLK2Freq>
 80075c8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80075ca:	e010      	b.n	80075ee <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80075cc:	4b5a      	ldr	r3, [pc, #360]	; (8007738 <UART_SetConfig+0x4e4>)
 80075ce:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80075d0:	e00d      	b.n	80075ee <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80075d2:	f7fd fddd 	bl	8005190 <HAL_RCC_GetSysClockFreq>
 80075d6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80075d8:	e009      	b.n	80075ee <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80075da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80075de:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80075e0:	e005      	b.n	80075ee <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 80075e2:	2300      	movs	r3, #0
 80075e4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80075e6:	2301      	movs	r3, #1
 80075e8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80075ec:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80075ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	f000 8089 	beq.w	8007708 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80075f6:	697b      	ldr	r3, [r7, #20]
 80075f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075fa:	4a4e      	ldr	r2, [pc, #312]	; (8007734 <UART_SetConfig+0x4e0>)
 80075fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007600:	461a      	mov	r2, r3
 8007602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007604:	fbb3 f3f2 	udiv	r3, r3, r2
 8007608:	005a      	lsls	r2, r3, #1
 800760a:	697b      	ldr	r3, [r7, #20]
 800760c:	685b      	ldr	r3, [r3, #4]
 800760e:	085b      	lsrs	r3, r3, #1
 8007610:	441a      	add	r2, r3
 8007612:	697b      	ldr	r3, [r7, #20]
 8007614:	685b      	ldr	r3, [r3, #4]
 8007616:	fbb2 f3f3 	udiv	r3, r2, r3
 800761a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800761c:	6a3b      	ldr	r3, [r7, #32]
 800761e:	2b0f      	cmp	r3, #15
 8007620:	d916      	bls.n	8007650 <UART_SetConfig+0x3fc>
 8007622:	6a3b      	ldr	r3, [r7, #32]
 8007624:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007628:	d212      	bcs.n	8007650 <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800762a:	6a3b      	ldr	r3, [r7, #32]
 800762c:	b29b      	uxth	r3, r3
 800762e:	f023 030f 	bic.w	r3, r3, #15
 8007632:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007634:	6a3b      	ldr	r3, [r7, #32]
 8007636:	085b      	lsrs	r3, r3, #1
 8007638:	b29b      	uxth	r3, r3
 800763a:	f003 0307 	and.w	r3, r3, #7
 800763e:	b29a      	uxth	r2, r3
 8007640:	8bfb      	ldrh	r3, [r7, #30]
 8007642:	4313      	orrs	r3, r2
 8007644:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007646:	697b      	ldr	r3, [r7, #20]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	8bfa      	ldrh	r2, [r7, #30]
 800764c:	60da      	str	r2, [r3, #12]
 800764e:	e05b      	b.n	8007708 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8007650:	2301      	movs	r3, #1
 8007652:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007656:	e057      	b.n	8007708 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007658:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800765c:	2b08      	cmp	r3, #8
 800765e:	d828      	bhi.n	80076b2 <UART_SetConfig+0x45e>
 8007660:	a201      	add	r2, pc, #4	; (adr r2, 8007668 <UART_SetConfig+0x414>)
 8007662:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007666:	bf00      	nop
 8007668:	0800768d 	.word	0x0800768d
 800766c:	08007695 	.word	0x08007695
 8007670:	0800769d 	.word	0x0800769d
 8007674:	080076b3 	.word	0x080076b3
 8007678:	080076a3 	.word	0x080076a3
 800767c:	080076b3 	.word	0x080076b3
 8007680:	080076b3 	.word	0x080076b3
 8007684:	080076b3 	.word	0x080076b3
 8007688:	080076ab 	.word	0x080076ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800768c:	f7fd fe34 	bl	80052f8 <HAL_RCC_GetPCLK1Freq>
 8007690:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007692:	e014      	b.n	80076be <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007694:	f7fd fe42 	bl	800531c <HAL_RCC_GetPCLK2Freq>
 8007698:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800769a:	e010      	b.n	80076be <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800769c:	4b26      	ldr	r3, [pc, #152]	; (8007738 <UART_SetConfig+0x4e4>)
 800769e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80076a0:	e00d      	b.n	80076be <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80076a2:	f7fd fd75 	bl	8005190 <HAL_RCC_GetSysClockFreq>
 80076a6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80076a8:	e009      	b.n	80076be <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80076aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80076ae:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80076b0:	e005      	b.n	80076be <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 80076b2:	2300      	movs	r3, #0
 80076b4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80076b6:	2301      	movs	r3, #1
 80076b8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80076bc:	bf00      	nop
    }

    if (pclk != 0U)
 80076be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d021      	beq.n	8007708 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80076c4:	697b      	ldr	r3, [r7, #20]
 80076c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076c8:	4a1a      	ldr	r2, [pc, #104]	; (8007734 <UART_SetConfig+0x4e0>)
 80076ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80076ce:	461a      	mov	r2, r3
 80076d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076d2:	fbb3 f2f2 	udiv	r2, r3, r2
 80076d6:	697b      	ldr	r3, [r7, #20]
 80076d8:	685b      	ldr	r3, [r3, #4]
 80076da:	085b      	lsrs	r3, r3, #1
 80076dc:	441a      	add	r2, r3
 80076de:	697b      	ldr	r3, [r7, #20]
 80076e0:	685b      	ldr	r3, [r3, #4]
 80076e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80076e6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80076e8:	6a3b      	ldr	r3, [r7, #32]
 80076ea:	2b0f      	cmp	r3, #15
 80076ec:	d909      	bls.n	8007702 <UART_SetConfig+0x4ae>
 80076ee:	6a3b      	ldr	r3, [r7, #32]
 80076f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80076f4:	d205      	bcs.n	8007702 <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80076f6:	6a3b      	ldr	r3, [r7, #32]
 80076f8:	b29a      	uxth	r2, r3
 80076fa:	697b      	ldr	r3, [r7, #20]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	60da      	str	r2, [r3, #12]
 8007700:	e002      	b.n	8007708 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8007702:	2301      	movs	r3, #1
 8007704:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007708:	697b      	ldr	r3, [r7, #20]
 800770a:	2201      	movs	r2, #1
 800770c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007710:	697b      	ldr	r3, [r7, #20]
 8007712:	2201      	movs	r2, #1
 8007714:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007718:	697b      	ldr	r3, [r7, #20]
 800771a:	2200      	movs	r2, #0
 800771c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800771e:	697b      	ldr	r3, [r7, #20]
 8007720:	2200      	movs	r2, #0
 8007722:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8007724:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8007728:	4618      	mov	r0, r3
 800772a:	3730      	adds	r7, #48	; 0x30
 800772c:	46bd      	mov	sp, r7
 800772e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007732:	bf00      	nop
 8007734:	0800d020 	.word	0x0800d020
 8007738:	00f42400 	.word	0x00f42400

0800773c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800773c:	b480      	push	{r7}
 800773e:	b083      	sub	sp, #12
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007748:	f003 0301 	and.w	r3, r3, #1
 800774c:	2b00      	cmp	r3, #0
 800774e:	d00a      	beq.n	8007766 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	685b      	ldr	r3, [r3, #4]
 8007756:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	430a      	orrs	r2, r1
 8007764:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800776a:	f003 0302 	and.w	r3, r3, #2
 800776e:	2b00      	cmp	r3, #0
 8007770:	d00a      	beq.n	8007788 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	685b      	ldr	r3, [r3, #4]
 8007778:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	430a      	orrs	r2, r1
 8007786:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800778c:	f003 0304 	and.w	r3, r3, #4
 8007790:	2b00      	cmp	r3, #0
 8007792:	d00a      	beq.n	80077aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	685b      	ldr	r3, [r3, #4]
 800779a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	430a      	orrs	r2, r1
 80077a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077ae:	f003 0308 	and.w	r3, r3, #8
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d00a      	beq.n	80077cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	685b      	ldr	r3, [r3, #4]
 80077bc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	430a      	orrs	r2, r1
 80077ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077d0:	f003 0310 	and.w	r3, r3, #16
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d00a      	beq.n	80077ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	689b      	ldr	r3, [r3, #8]
 80077de:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	430a      	orrs	r2, r1
 80077ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077f2:	f003 0320 	and.w	r3, r3, #32
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d00a      	beq.n	8007810 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	689b      	ldr	r3, [r3, #8]
 8007800:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	430a      	orrs	r2, r1
 800780e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007814:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007818:	2b00      	cmp	r3, #0
 800781a:	d01a      	beq.n	8007852 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	685b      	ldr	r3, [r3, #4]
 8007822:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	430a      	orrs	r2, r1
 8007830:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007836:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800783a:	d10a      	bne.n	8007852 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	685b      	ldr	r3, [r3, #4]
 8007842:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	430a      	orrs	r2, r1
 8007850:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007856:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800785a:	2b00      	cmp	r3, #0
 800785c:	d00a      	beq.n	8007874 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	685b      	ldr	r3, [r3, #4]
 8007864:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	430a      	orrs	r2, r1
 8007872:	605a      	str	r2, [r3, #4]
  }
}
 8007874:	bf00      	nop
 8007876:	370c      	adds	r7, #12
 8007878:	46bd      	mov	sp, r7
 800787a:	bc80      	pop	{r7}
 800787c:	4770      	bx	lr

0800787e <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800787e:	b580      	push	{r7, lr}
 8007880:	b086      	sub	sp, #24
 8007882:	af02      	add	r7, sp, #8
 8007884:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	2200      	movs	r2, #0
 800788a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800788e:	f7fb f9b9 	bl	8002c04 <HAL_GetTick>
 8007892:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	f003 0308 	and.w	r3, r3, #8
 800789e:	2b08      	cmp	r3, #8
 80078a0:	d10e      	bne.n	80078c0 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80078a2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80078a6:	9300      	str	r3, [sp, #0]
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	2200      	movs	r2, #0
 80078ac:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80078b0:	6878      	ldr	r0, [r7, #4]
 80078b2:	f000 f832 	bl	800791a <UART_WaitOnFlagUntilTimeout>
 80078b6:	4603      	mov	r3, r0
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d001      	beq.n	80078c0 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80078bc:	2303      	movs	r3, #3
 80078be:	e028      	b.n	8007912 <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	f003 0304 	and.w	r3, r3, #4
 80078ca:	2b04      	cmp	r3, #4
 80078cc:	d10e      	bne.n	80078ec <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80078ce:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80078d2:	9300      	str	r3, [sp, #0]
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	2200      	movs	r2, #0
 80078d8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80078dc:	6878      	ldr	r0, [r7, #4]
 80078de:	f000 f81c 	bl	800791a <UART_WaitOnFlagUntilTimeout>
 80078e2:	4603      	mov	r3, r0
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d001      	beq.n	80078ec <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80078e8:	2303      	movs	r3, #3
 80078ea:	e012      	b.n	8007912 <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2220      	movs	r2, #32
 80078f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	2220      	movs	r2, #32
 80078f8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2200      	movs	r2, #0
 8007900:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	2200      	movs	r2, #0
 8007906:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	2200      	movs	r2, #0
 800790c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007910:	2300      	movs	r3, #0
}
 8007912:	4618      	mov	r0, r3
 8007914:	3710      	adds	r7, #16
 8007916:	46bd      	mov	sp, r7
 8007918:	bd80      	pop	{r7, pc}

0800791a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800791a:	b580      	push	{r7, lr}
 800791c:	b09c      	sub	sp, #112	; 0x70
 800791e:	af00      	add	r7, sp, #0
 8007920:	60f8      	str	r0, [r7, #12]
 8007922:	60b9      	str	r1, [r7, #8]
 8007924:	603b      	str	r3, [r7, #0]
 8007926:	4613      	mov	r3, r2
 8007928:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800792a:	e0a9      	b.n	8007a80 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800792c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800792e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007932:	f000 80a5 	beq.w	8007a80 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007936:	f7fb f965 	bl	8002c04 <HAL_GetTick>
 800793a:	4602      	mov	r2, r0
 800793c:	683b      	ldr	r3, [r7, #0]
 800793e:	1ad3      	subs	r3, r2, r3
 8007940:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007942:	429a      	cmp	r2, r3
 8007944:	d302      	bcc.n	800794c <UART_WaitOnFlagUntilTimeout+0x32>
 8007946:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007948:	2b00      	cmp	r3, #0
 800794a:	d140      	bne.n	80079ce <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007952:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007954:	e853 3f00 	ldrex	r3, [r3]
 8007958:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800795a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800795c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007960:	667b      	str	r3, [r7, #100]	; 0x64
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	461a      	mov	r2, r3
 8007968:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800796a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800796c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800796e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007970:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007972:	e841 2300 	strex	r3, r2, [r1]
 8007976:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007978:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800797a:	2b00      	cmp	r3, #0
 800797c:	d1e6      	bne.n	800794c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	3308      	adds	r3, #8
 8007984:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007986:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007988:	e853 3f00 	ldrex	r3, [r3]
 800798c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800798e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007990:	f023 0301 	bic.w	r3, r3, #1
 8007994:	663b      	str	r3, [r7, #96]	; 0x60
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	3308      	adds	r3, #8
 800799c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800799e:	64ba      	str	r2, [r7, #72]	; 0x48
 80079a0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079a2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80079a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80079a6:	e841 2300 	strex	r3, r2, [r1]
 80079aa:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80079ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d1e5      	bne.n	800797e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	2220      	movs	r2, #32
 80079b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	2220      	movs	r2, #32
 80079be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	2200      	movs	r2, #0
 80079c6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

        return HAL_TIMEOUT;
 80079ca:	2303      	movs	r3, #3
 80079cc:	e069      	b.n	8007aa2 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	f003 0304 	and.w	r3, r3, #4
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d051      	beq.n	8007a80 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	69db      	ldr	r3, [r3, #28]
 80079e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80079e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80079ea:	d149      	bne.n	8007a80 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80079f4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079fe:	e853 3f00 	ldrex	r3, [r3]
 8007a02:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a06:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007a0a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	461a      	mov	r2, r3
 8007a12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a14:	637b      	str	r3, [r7, #52]	; 0x34
 8007a16:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a18:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007a1a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007a1c:	e841 2300 	strex	r3, r2, [r1]
 8007a20:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007a22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d1e6      	bne.n	80079f6 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	3308      	adds	r3, #8
 8007a2e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a30:	697b      	ldr	r3, [r7, #20]
 8007a32:	e853 3f00 	ldrex	r3, [r3]
 8007a36:	613b      	str	r3, [r7, #16]
   return(result);
 8007a38:	693b      	ldr	r3, [r7, #16]
 8007a3a:	f023 0301 	bic.w	r3, r3, #1
 8007a3e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	3308      	adds	r3, #8
 8007a46:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007a48:	623a      	str	r2, [r7, #32]
 8007a4a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a4c:	69f9      	ldr	r1, [r7, #28]
 8007a4e:	6a3a      	ldr	r2, [r7, #32]
 8007a50:	e841 2300 	strex	r3, r2, [r1]
 8007a54:	61bb      	str	r3, [r7, #24]
   return(result);
 8007a56:	69bb      	ldr	r3, [r7, #24]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d1e5      	bne.n	8007a28 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	2220      	movs	r2, #32
 8007a60:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	2220      	movs	r2, #32
 8007a68:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	2220      	movs	r2, #32
 8007a70:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	2200      	movs	r2, #0
 8007a78:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8007a7c:	2303      	movs	r3, #3
 8007a7e:	e010      	b.n	8007aa2 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	69da      	ldr	r2, [r3, #28]
 8007a86:	68bb      	ldr	r3, [r7, #8]
 8007a88:	4013      	ands	r3, r2
 8007a8a:	68ba      	ldr	r2, [r7, #8]
 8007a8c:	429a      	cmp	r2, r3
 8007a8e:	bf0c      	ite	eq
 8007a90:	2301      	moveq	r3, #1
 8007a92:	2300      	movne	r3, #0
 8007a94:	b2db      	uxtb	r3, r3
 8007a96:	461a      	mov	r2, r3
 8007a98:	79fb      	ldrb	r3, [r7, #7]
 8007a9a:	429a      	cmp	r2, r3
 8007a9c:	f43f af46 	beq.w	800792c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007aa0:	2300      	movs	r3, #0
}
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	3770      	adds	r7, #112	; 0x70
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	bd80      	pop	{r7, pc}
	...

08007aac <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007aac:	b580      	push	{r7, lr}
 8007aae:	b096      	sub	sp, #88	; 0x58
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	60f8      	str	r0, [r7, #12]
 8007ab4:	60b9      	str	r1, [r7, #8]
 8007ab6:	4613      	mov	r3, r2
 8007ab8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	68ba      	ldr	r2, [r7, #8]
 8007abe:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	88fa      	ldrh	r2, [r7, #6]
 8007ac4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	2200      	movs	r2, #0
 8007acc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	2222      	movs	r2, #34	; 0x22
 8007ad4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if (huart->hdmarx != NULL)
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d02d      	beq.n	8007b3e <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007ae8:	4a40      	ldr	r2, [pc, #256]	; (8007bec <UART_Start_Receive_DMA+0x140>)
 8007aea:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007af2:	4a3f      	ldr	r2, [pc, #252]	; (8007bf0 <UART_Start_Receive_DMA+0x144>)
 8007af4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007afc:	4a3d      	ldr	r2, [pc, #244]	; (8007bf4 <UART_Start_Receive_DMA+0x148>)
 8007afe:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007b06:	2200      	movs	r2, #0
 8007b08:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	3324      	adds	r3, #36	; 0x24
 8007b16:	4619      	mov	r1, r3
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b1c:	461a      	mov	r2, r3
 8007b1e:	88fb      	ldrh	r3, [r7, #6]
 8007b20:	f7fb ff4e 	bl	80039c0 <HAL_DMA_Start_IT>
 8007b24:	4603      	mov	r3, r0
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d009      	beq.n	8007b3e <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	2210      	movs	r2, #16
 8007b2e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	2220      	movs	r2, #32
 8007b36:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      return HAL_ERROR;
 8007b3a:	2301      	movs	r3, #1
 8007b3c:	e051      	b.n	8007be2 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	691b      	ldr	r3, [r3, #16]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d018      	beq.n	8007b78 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b4e:	e853 3f00 	ldrex	r3, [r3]
 8007b52:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007b54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007b5a:	657b      	str	r3, [r7, #84]	; 0x54
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	461a      	mov	r2, r3
 8007b62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007b64:	64bb      	str	r3, [r7, #72]	; 0x48
 8007b66:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b68:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007b6a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007b6c:	e841 2300 	strex	r3, r2, [r1]
 8007b70:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007b72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d1e6      	bne.n	8007b46 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	3308      	adds	r3, #8
 8007b7e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b82:	e853 3f00 	ldrex	r3, [r3]
 8007b86:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b8a:	f043 0301 	orr.w	r3, r3, #1
 8007b8e:	653b      	str	r3, [r7, #80]	; 0x50
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	3308      	adds	r3, #8
 8007b96:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007b98:	637a      	str	r2, [r7, #52]	; 0x34
 8007b9a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b9c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007b9e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007ba0:	e841 2300 	strex	r3, r2, [r1]
 8007ba4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007ba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d1e5      	bne.n	8007b78 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	3308      	adds	r3, #8
 8007bb2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bb4:	697b      	ldr	r3, [r7, #20]
 8007bb6:	e853 3f00 	ldrex	r3, [r3]
 8007bba:	613b      	str	r3, [r7, #16]
   return(result);
 8007bbc:	693b      	ldr	r3, [r7, #16]
 8007bbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007bc2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	3308      	adds	r3, #8
 8007bca:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007bcc:	623a      	str	r2, [r7, #32]
 8007bce:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bd0:	69f9      	ldr	r1, [r7, #28]
 8007bd2:	6a3a      	ldr	r2, [r7, #32]
 8007bd4:	e841 2300 	strex	r3, r2, [r1]
 8007bd8:	61bb      	str	r3, [r7, #24]
   return(result);
 8007bda:	69bb      	ldr	r3, [r7, #24]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d1e5      	bne.n	8007bac <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8007be0:	2300      	movs	r3, #0
}
 8007be2:	4618      	mov	r0, r3
 8007be4:	3758      	adds	r7, #88	; 0x58
 8007be6:	46bd      	mov	sp, r7
 8007be8:	bd80      	pop	{r7, pc}
 8007bea:	bf00      	nop
 8007bec:	08007d43 	.word	0x08007d43
 8007bf0:	08007e6f 	.word	0x08007e6f
 8007bf4:	08007ead 	.word	0x08007ead

08007bf8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007bf8:	b480      	push	{r7}
 8007bfa:	b08f      	sub	sp, #60	; 0x3c
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c06:	6a3b      	ldr	r3, [r7, #32]
 8007c08:	e853 3f00 	ldrex	r3, [r3]
 8007c0c:	61fb      	str	r3, [r7, #28]
   return(result);
 8007c0e:	69fb      	ldr	r3, [r7, #28]
 8007c10:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007c14:	637b      	str	r3, [r7, #52]	; 0x34
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	461a      	mov	r2, r3
 8007c1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c1e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007c20:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c22:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007c24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007c26:	e841 2300 	strex	r3, r2, [r1]
 8007c2a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d1e6      	bne.n	8007c00 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	3308      	adds	r3, #8
 8007c38:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	e853 3f00 	ldrex	r3, [r3]
 8007c40:	60bb      	str	r3, [r7, #8]
   return(result);
 8007c42:	68bb      	ldr	r3, [r7, #8]
 8007c44:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8007c48:	633b      	str	r3, [r7, #48]	; 0x30
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	3308      	adds	r3, #8
 8007c50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c52:	61ba      	str	r2, [r7, #24]
 8007c54:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c56:	6979      	ldr	r1, [r7, #20]
 8007c58:	69ba      	ldr	r2, [r7, #24]
 8007c5a:	e841 2300 	strex	r3, r2, [r1]
 8007c5e:	613b      	str	r3, [r7, #16]
   return(result);
 8007c60:	693b      	ldr	r3, [r7, #16]
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d1e5      	bne.n	8007c32 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	2220      	movs	r2, #32
 8007c6a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 8007c6e:	bf00      	nop
 8007c70:	373c      	adds	r7, #60	; 0x3c
 8007c72:	46bd      	mov	sp, r7
 8007c74:	bc80      	pop	{r7}
 8007c76:	4770      	bx	lr

08007c78 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007c78:	b480      	push	{r7}
 8007c7a:	b095      	sub	sp, #84	; 0x54
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c88:	e853 3f00 	ldrex	r3, [r3]
 8007c8c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c90:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007c94:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	461a      	mov	r2, r3
 8007c9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c9e:	643b      	str	r3, [r7, #64]	; 0x40
 8007ca0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ca2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007ca4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007ca6:	e841 2300 	strex	r3, r2, [r1]
 8007caa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007cac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d1e6      	bne.n	8007c80 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	3308      	adds	r3, #8
 8007cb8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cba:	6a3b      	ldr	r3, [r7, #32]
 8007cbc:	e853 3f00 	ldrex	r3, [r3]
 8007cc0:	61fb      	str	r3, [r7, #28]
   return(result);
 8007cc2:	69fb      	ldr	r3, [r7, #28]
 8007cc4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007cc8:	f023 0301 	bic.w	r3, r3, #1
 8007ccc:	64bb      	str	r3, [r7, #72]	; 0x48
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	3308      	adds	r3, #8
 8007cd4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007cd6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007cd8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cda:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007cdc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007cde:	e841 2300 	strex	r3, r2, [r1]
 8007ce2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d1e3      	bne.n	8007cb2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007cee:	2b01      	cmp	r3, #1
 8007cf0:	d118      	bne.n	8007d24 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	e853 3f00 	ldrex	r3, [r3]
 8007cfe:	60bb      	str	r3, [r7, #8]
   return(result);
 8007d00:	68bb      	ldr	r3, [r7, #8]
 8007d02:	f023 0310 	bic.w	r3, r3, #16
 8007d06:	647b      	str	r3, [r7, #68]	; 0x44
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	461a      	mov	r2, r3
 8007d0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007d10:	61bb      	str	r3, [r7, #24]
 8007d12:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d14:	6979      	ldr	r1, [r7, #20]
 8007d16:	69ba      	ldr	r2, [r7, #24]
 8007d18:	e841 2300 	strex	r3, r2, [r1]
 8007d1c:	613b      	str	r3, [r7, #16]
   return(result);
 8007d1e:	693b      	ldr	r3, [r7, #16]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d1e6      	bne.n	8007cf2 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2220      	movs	r2, #32
 8007d28:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	2200      	movs	r2, #0
 8007d30:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	2200      	movs	r2, #0
 8007d36:	675a      	str	r2, [r3, #116]	; 0x74
}
 8007d38:	bf00      	nop
 8007d3a:	3754      	adds	r7, #84	; 0x54
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	bc80      	pop	{r7}
 8007d40:	4770      	bx	lr

08007d42 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007d42:	b580      	push	{r7, lr}
 8007d44:	b09c      	sub	sp, #112	; 0x70
 8007d46:	af00      	add	r7, sp, #0
 8007d48:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d4e:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	f003 0320 	and.w	r3, r3, #32
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d171      	bne.n	8007e42 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8007d5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d60:	2200      	movs	r2, #0
 8007d62:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007d66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d6e:	e853 3f00 	ldrex	r3, [r3]
 8007d72:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007d74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d76:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007d7a:	66bb      	str	r3, [r7, #104]	; 0x68
 8007d7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	461a      	mov	r2, r3
 8007d82:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007d84:	65bb      	str	r3, [r7, #88]	; 0x58
 8007d86:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d88:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007d8a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007d8c:	e841 2300 	strex	r3, r2, [r1]
 8007d90:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007d92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d1e6      	bne.n	8007d66 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	3308      	adds	r3, #8
 8007d9e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007da0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007da2:	e853 3f00 	ldrex	r3, [r3]
 8007da6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007da8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007daa:	f023 0301 	bic.w	r3, r3, #1
 8007dae:	667b      	str	r3, [r7, #100]	; 0x64
 8007db0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	3308      	adds	r3, #8
 8007db6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007db8:	647a      	str	r2, [r7, #68]	; 0x44
 8007dba:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dbc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007dbe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007dc0:	e841 2300 	strex	r3, r2, [r1]
 8007dc4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007dc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d1e5      	bne.n	8007d98 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007dcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	3308      	adds	r3, #8
 8007dd2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dd6:	e853 3f00 	ldrex	r3, [r3]
 8007dda:	623b      	str	r3, [r7, #32]
   return(result);
 8007ddc:	6a3b      	ldr	r3, [r7, #32]
 8007dde:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007de2:	663b      	str	r3, [r7, #96]	; 0x60
 8007de4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	3308      	adds	r3, #8
 8007dea:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007dec:	633a      	str	r2, [r7, #48]	; 0x30
 8007dee:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007df0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007df2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007df4:	e841 2300 	strex	r3, r2, [r1]
 8007df8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d1e5      	bne.n	8007dcc <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007e00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e02:	2220      	movs	r2, #32
 8007e04:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e0c:	2b01      	cmp	r3, #1
 8007e0e:	d118      	bne.n	8007e42 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e16:	693b      	ldr	r3, [r7, #16]
 8007e18:	e853 3f00 	ldrex	r3, [r3]
 8007e1c:	60fb      	str	r3, [r7, #12]
   return(result);
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	f023 0310 	bic.w	r3, r3, #16
 8007e24:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007e26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	461a      	mov	r2, r3
 8007e2c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007e2e:	61fb      	str	r3, [r7, #28]
 8007e30:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e32:	69b9      	ldr	r1, [r7, #24]
 8007e34:	69fa      	ldr	r2, [r7, #28]
 8007e36:	e841 2300 	strex	r3, r2, [r1]
 8007e3a:	617b      	str	r3, [r7, #20]
   return(result);
 8007e3c:	697b      	ldr	r3, [r7, #20]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d1e6      	bne.n	8007e10 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007e42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e44:	2200      	movs	r2, #0
 8007e46:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e4c:	2b01      	cmp	r3, #1
 8007e4e:	d107      	bne.n	8007e60 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007e50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e52:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007e56:	4619      	mov	r1, r3
 8007e58:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007e5a:	f7ff f9f0 	bl	800723e <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007e5e:	e002      	b.n	8007e66 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8007e60:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007e62:	f7f9 f87b 	bl	8000f5c <HAL_UART_RxCpltCallback>
}
 8007e66:	bf00      	nop
 8007e68:	3770      	adds	r7, #112	; 0x70
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	bd80      	pop	{r7, pc}

08007e6e <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007e6e:	b580      	push	{r7, lr}
 8007e70:	b084      	sub	sp, #16
 8007e72:	af00      	add	r7, sp, #0
 8007e74:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e7a:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	2201      	movs	r2, #1
 8007e80:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e86:	2b01      	cmp	r3, #1
 8007e88:	d109      	bne.n	8007e9e <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007e90:	085b      	lsrs	r3, r3, #1
 8007e92:	b29b      	uxth	r3, r3
 8007e94:	4619      	mov	r1, r3
 8007e96:	68f8      	ldr	r0, [r7, #12]
 8007e98:	f7ff f9d1 	bl	800723e <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007e9c:	e002      	b.n	8007ea4 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8007e9e:	68f8      	ldr	r0, [r7, #12]
 8007ea0:	f7ff f9bb 	bl	800721a <HAL_UART_RxHalfCpltCallback>
}
 8007ea4:	bf00      	nop
 8007ea6:	3710      	adds	r7, #16
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	bd80      	pop	{r7, pc}

08007eac <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007eac:	b580      	push	{r7, lr}
 8007eae:	b086      	sub	sp, #24
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007eb8:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8007eba:	697b      	ldr	r3, [r7, #20]
 8007ebc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ec0:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8007ec2:	697b      	ldr	r3, [r7, #20]
 8007ec4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007ec8:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8007eca:	697b      	ldr	r3, [r7, #20]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	689b      	ldr	r3, [r3, #8]
 8007ed0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ed4:	2b80      	cmp	r3, #128	; 0x80
 8007ed6:	d109      	bne.n	8007eec <UART_DMAError+0x40>
 8007ed8:	693b      	ldr	r3, [r7, #16]
 8007eda:	2b21      	cmp	r3, #33	; 0x21
 8007edc:	d106      	bne.n	8007eec <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8007ede:	697b      	ldr	r3, [r7, #20]
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8007ee6:	6978      	ldr	r0, [r7, #20]
 8007ee8:	f7ff fe86 	bl	8007bf8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007eec:	697b      	ldr	r3, [r7, #20]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	689b      	ldr	r3, [r3, #8]
 8007ef2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ef6:	2b40      	cmp	r3, #64	; 0x40
 8007ef8:	d109      	bne.n	8007f0e <UART_DMAError+0x62>
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	2b22      	cmp	r3, #34	; 0x22
 8007efe:	d106      	bne.n	8007f0e <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8007f00:	697b      	ldr	r3, [r7, #20]
 8007f02:	2200      	movs	r2, #0
 8007f04:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8007f08:	6978      	ldr	r0, [r7, #20]
 8007f0a:	f7ff feb5 	bl	8007c78 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007f0e:	697b      	ldr	r3, [r7, #20]
 8007f10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f14:	f043 0210 	orr.w	r2, r3, #16
 8007f18:	697b      	ldr	r3, [r7, #20]
 8007f1a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007f1e:	6978      	ldr	r0, [r7, #20]
 8007f20:	f7ff f984 	bl	800722c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007f24:	bf00      	nop
 8007f26:	3718      	adds	r7, #24
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	bd80      	pop	{r7, pc}

08007f2c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b084      	sub	sp, #16
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f38:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	2200      	movs	r2, #0
 8007f46:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007f4a:	68f8      	ldr	r0, [r7, #12]
 8007f4c:	f7ff f96e 	bl	800722c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007f50:	bf00      	nop
 8007f52:	3710      	adds	r7, #16
 8007f54:	46bd      	mov	sp, r7
 8007f56:	bd80      	pop	{r7, pc}

08007f58 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	b088      	sub	sp, #32
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	e853 3f00 	ldrex	r3, [r3]
 8007f6c:	60bb      	str	r3, [r7, #8]
   return(result);
 8007f6e:	68bb      	ldr	r3, [r7, #8]
 8007f70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f74:	61fb      	str	r3, [r7, #28]
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	461a      	mov	r2, r3
 8007f7c:	69fb      	ldr	r3, [r7, #28]
 8007f7e:	61bb      	str	r3, [r7, #24]
 8007f80:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f82:	6979      	ldr	r1, [r7, #20]
 8007f84:	69ba      	ldr	r2, [r7, #24]
 8007f86:	e841 2300 	strex	r3, r2, [r1]
 8007f8a:	613b      	str	r3, [r7, #16]
   return(result);
 8007f8c:	693b      	ldr	r3, [r7, #16]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d1e6      	bne.n	8007f60 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	2220      	movs	r2, #32
 8007f96:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007fa0:	6878      	ldr	r0, [r7, #4]
 8007fa2:	f7ff f931 	bl	8007208 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007fa6:	bf00      	nop
 8007fa8:	3720      	adds	r7, #32
 8007faa:	46bd      	mov	sp, r7
 8007fac:	bd80      	pop	{r7, pc}

08007fae <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007fae:	b480      	push	{r7}
 8007fb0:	b083      	sub	sp, #12
 8007fb2:	af00      	add	r7, sp, #0
 8007fb4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007fb6:	bf00      	nop
 8007fb8:	370c      	adds	r7, #12
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	bc80      	pop	{r7}
 8007fbe:	4770      	bx	lr

08007fc0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007fc0:	b480      	push	{r7}
 8007fc2:	b083      	sub	sp, #12
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007fc8:	bf00      	nop
 8007fca:	370c      	adds	r7, #12
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	bc80      	pop	{r7}
 8007fd0:	4770      	bx	lr

08007fd2 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007fd2:	b480      	push	{r7}
 8007fd4:	b083      	sub	sp, #12
 8007fd6:	af00      	add	r7, sp, #0
 8007fd8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007fda:	bf00      	nop
 8007fdc:	370c      	adds	r7, #12
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	bc80      	pop	{r7}
 8007fe2:	4770      	bx	lr

08007fe4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007fe4:	b480      	push	{r7}
 8007fe6:	b085      	sub	sp, #20
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007ff2:	2b01      	cmp	r3, #1
 8007ff4:	d101      	bne.n	8007ffa <HAL_UARTEx_DisableFifoMode+0x16>
 8007ff6:	2302      	movs	r3, #2
 8007ff8:	e027      	b.n	800804a <HAL_UARTEx_DisableFifoMode+0x66>
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	2201      	movs	r2, #1
 8007ffe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	2224      	movs	r2, #36	; 0x24
 8008006:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	681a      	ldr	r2, [r3, #0]
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	f022 0201 	bic.w	r2, r2, #1
 8008020:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008028:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	2200      	movs	r2, #0
 800802e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	68fa      	ldr	r2, [r7, #12]
 8008036:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	2220      	movs	r2, #32
 800803c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	2200      	movs	r2, #0
 8008044:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008048:	2300      	movs	r3, #0
}
 800804a:	4618      	mov	r0, r3
 800804c:	3714      	adds	r7, #20
 800804e:	46bd      	mov	sp, r7
 8008050:	bc80      	pop	{r7}
 8008052:	4770      	bx	lr

08008054 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008054:	b580      	push	{r7, lr}
 8008056:	b084      	sub	sp, #16
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
 800805c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008064:	2b01      	cmp	r3, #1
 8008066:	d101      	bne.n	800806c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008068:	2302      	movs	r3, #2
 800806a:	e02d      	b.n	80080c8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	2201      	movs	r2, #1
 8008070:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2224      	movs	r2, #36	; 0x24
 8008078:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	681a      	ldr	r2, [r3, #0]
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	f022 0201 	bic.w	r2, r2, #1
 8008092:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	689b      	ldr	r3, [r3, #8]
 800809a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	683a      	ldr	r2, [r7, #0]
 80080a4:	430a      	orrs	r2, r1
 80080a6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80080a8:	6878      	ldr	r0, [r7, #4]
 80080aa:	f000 f84f 	bl	800814c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	68fa      	ldr	r2, [r7, #12]
 80080b4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	2220      	movs	r2, #32
 80080ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	2200      	movs	r2, #0
 80080c2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80080c6:	2300      	movs	r3, #0
}
 80080c8:	4618      	mov	r0, r3
 80080ca:	3710      	adds	r7, #16
 80080cc:	46bd      	mov	sp, r7
 80080ce:	bd80      	pop	{r7, pc}

080080d0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b084      	sub	sp, #16
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
 80080d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80080e0:	2b01      	cmp	r3, #1
 80080e2:	d101      	bne.n	80080e8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80080e4:	2302      	movs	r3, #2
 80080e6:	e02d      	b.n	8008144 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	2201      	movs	r2, #1
 80080ec:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	2224      	movs	r2, #36	; 0x24
 80080f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	681a      	ldr	r2, [r3, #0]
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	f022 0201 	bic.w	r2, r2, #1
 800810e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	689b      	ldr	r3, [r3, #8]
 8008116:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	683a      	ldr	r2, [r7, #0]
 8008120:	430a      	orrs	r2, r1
 8008122:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008124:	6878      	ldr	r0, [r7, #4]
 8008126:	f000 f811 	bl	800814c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	68fa      	ldr	r2, [r7, #12]
 8008130:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	2220      	movs	r2, #32
 8008136:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	2200      	movs	r2, #0
 800813e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008142:	2300      	movs	r3, #0
}
 8008144:	4618      	mov	r0, r3
 8008146:	3710      	adds	r7, #16
 8008148:	46bd      	mov	sp, r7
 800814a:	bd80      	pop	{r7, pc}

0800814c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800814c:	b480      	push	{r7}
 800814e:	b085      	sub	sp, #20
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008158:	2b00      	cmp	r3, #0
 800815a:	d108      	bne.n	800816e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	2201      	movs	r2, #1
 8008160:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	2201      	movs	r2, #1
 8008168:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800816c:	e031      	b.n	80081d2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800816e:	2308      	movs	r3, #8
 8008170:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008172:	2308      	movs	r3, #8
 8008174:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	689b      	ldr	r3, [r3, #8]
 800817c:	0e5b      	lsrs	r3, r3, #25
 800817e:	b2db      	uxtb	r3, r3
 8008180:	f003 0307 	and.w	r3, r3, #7
 8008184:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	689b      	ldr	r3, [r3, #8]
 800818c:	0f5b      	lsrs	r3, r3, #29
 800818e:	b2db      	uxtb	r3, r3
 8008190:	f003 0307 	and.w	r3, r3, #7
 8008194:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008196:	7bbb      	ldrb	r3, [r7, #14]
 8008198:	7b3a      	ldrb	r2, [r7, #12]
 800819a:	4910      	ldr	r1, [pc, #64]	; (80081dc <UARTEx_SetNbDataToProcess+0x90>)
 800819c:	5c8a      	ldrb	r2, [r1, r2]
 800819e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80081a2:	7b3a      	ldrb	r2, [r7, #12]
 80081a4:	490e      	ldr	r1, [pc, #56]	; (80081e0 <UARTEx_SetNbDataToProcess+0x94>)
 80081a6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80081a8:	fb93 f3f2 	sdiv	r3, r3, r2
 80081ac:	b29a      	uxth	r2, r3
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80081b4:	7bfb      	ldrb	r3, [r7, #15]
 80081b6:	7b7a      	ldrb	r2, [r7, #13]
 80081b8:	4908      	ldr	r1, [pc, #32]	; (80081dc <UARTEx_SetNbDataToProcess+0x90>)
 80081ba:	5c8a      	ldrb	r2, [r1, r2]
 80081bc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80081c0:	7b7a      	ldrb	r2, [r7, #13]
 80081c2:	4907      	ldr	r1, [pc, #28]	; (80081e0 <UARTEx_SetNbDataToProcess+0x94>)
 80081c4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80081c6:	fb93 f3f2 	sdiv	r3, r3, r2
 80081ca:	b29a      	uxth	r2, r3
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80081d2:	bf00      	nop
 80081d4:	3714      	adds	r7, #20
 80081d6:	46bd      	mov	sp, r7
 80081d8:	bc80      	pop	{r7}
 80081da:	4770      	bx	lr
 80081dc:	0800d038 	.word	0x0800d038
 80081e0:	0800d040 	.word	0x0800d040

080081e4 <RadioInit>:
TimerEvent_t RxTimeoutTimer;

/* Private  functions ---------------------------------------------------------*/

static void RadioInit( RadioEvents_t *events )
{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b084      	sub	sp, #16
 80081e8:	af02      	add	r7, sp, #8
 80081ea:	6078      	str	r0, [r7, #4]
    RadioEvents = events;
 80081ec:	4a24      	ldr	r2, [pc, #144]	; (8008280 <RadioInit+0x9c>)
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	6013      	str	r3, [r2, #0]

    SubgRf.RxContinuous = false;
 80081f2:	4b24      	ldr	r3, [pc, #144]	; (8008284 <RadioInit+0xa0>)
 80081f4:	2200      	movs	r2, #0
 80081f6:	705a      	strb	r2, [r3, #1]
    SubgRf.TxTimeout = 0;
 80081f8:	4b22      	ldr	r3, [pc, #136]	; (8008284 <RadioInit+0xa0>)
 80081fa:	2200      	movs	r2, #0
 80081fc:	605a      	str	r2, [r3, #4]
    SubgRf.RxTimeout = 0;
 80081fe:	4b21      	ldr	r3, [pc, #132]	; (8008284 <RadioInit+0xa0>)
 8008200:	2200      	movs	r2, #0
 8008202:	609a      	str	r2, [r3, #8]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8008204:	4b1f      	ldr	r3, [pc, #124]	; (8008284 <RadioInit+0xa0>)
 8008206:	2200      	movs	r2, #0
 8008208:	659a      	str	r2, [r3, #88]	; 0x58
#if( RADIO_LR_FHSS_IS_ON == 1 )
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    SUBGRF_Init( RadioOnDioIrq );
 800820a:	481f      	ldr	r0, [pc, #124]	; (8008288 <RadioInit+0xa4>)
 800820c:	f001 ff88 	bl	800a120 <SUBGRF_Init>
    /*SubgRf.publicNetwork set to false*/
    SubgRf.PublicNetwork.Current = false;
 8008210:	4b1c      	ldr	r3, [pc, #112]	; (8008284 <RadioInit+0xa0>)
 8008212:	2200      	movs	r2, #0
 8008214:	735a      	strb	r2, [r3, #13]
    SubgRf.PublicNetwork.Previous = false;
 8008216:	4b1b      	ldr	r3, [pc, #108]	; (8008284 <RadioInit+0xa0>)
 8008218:	2200      	movs	r2, #0
 800821a:	731a      	strb	r2, [r3, #12]

    RADIO_IRQ_PROCESS_INIT();

    SUBGRF_SetRegulatorMode( );
 800821c:	f002 fa1c 	bl	800a658 <SUBGRF_SetRegulatorMode>

    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 8008220:	2100      	movs	r1, #0
 8008222:	2000      	movs	r0, #0
 8008224:	f002 fde8 	bl	800adf8 <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams( RFO_LP, 0, RADIO_RAMP_200_US );
 8008228:	2204      	movs	r2, #4
 800822a:	2100      	movs	r1, #0
 800822c:	2001      	movs	r0, #1
 800822e:	f002 fba5 	bl	800a97c <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8008232:	2300      	movs	r3, #0
 8008234:	2200      	movs	r2, #0
 8008236:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800823a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800823e:	f002 fad5 	bl	800a7ec <SUBGRF_SetDioIrqParams>

    RadioSleep();
 8008242:	f000 fe91 	bl	8008f68 <RadioSleep>
    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 8008246:	2300      	movs	r3, #0
 8008248:	9300      	str	r3, [sp, #0]
 800824a:	4b10      	ldr	r3, [pc, #64]	; (800828c <RadioInit+0xa8>)
 800824c:	2200      	movs	r2, #0
 800824e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8008252:	480f      	ldr	r0, [pc, #60]	; (8008290 <RadioInit+0xac>)
 8008254:	f003 fb1e 	bl	800b894 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 8008258:	2300      	movs	r3, #0
 800825a:	9300      	str	r3, [sp, #0]
 800825c:	4b0d      	ldr	r3, [pc, #52]	; (8008294 <RadioInit+0xb0>)
 800825e:	2200      	movs	r2, #0
 8008260:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8008264:	480c      	ldr	r0, [pc, #48]	; (8008298 <RadioInit+0xb4>)
 8008266:	f003 fb15 	bl	800b894 <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 800826a:	4809      	ldr	r0, [pc, #36]	; (8008290 <RadioInit+0xac>)
 800826c:	f003 fbb6 	bl	800b9dc <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 8008270:	4809      	ldr	r0, [pc, #36]	; (8008298 <RadioInit+0xb4>)
 8008272:	f003 fbb3 	bl	800b9dc <UTIL_TIMER_Stop>
}
 8008276:	bf00      	nop
 8008278:	3708      	adds	r7, #8
 800827a:	46bd      	mov	sp, r7
 800827c:	bd80      	pop	{r7, pc}
 800827e:	bf00      	nop
 8008280:	20000a60 	.word	0x20000a60
 8008284:	20000a64 	.word	0x20000a64
 8008288:	08009361 	.word	0x08009361
 800828c:	080092e9 	.word	0x080092e9
 8008290:	20000ac0 	.word	0x20000ac0
 8008294:	080092fd 	.word	0x080092fd
 8008298:	20000ad8 	.word	0x20000ad8

0800829c <RadioGetStatus>:

static RadioState_t RadioGetStatus( void )
{
 800829c:	b580      	push	{r7, lr}
 800829e:	af00      	add	r7, sp, #0
    switch( SUBGRF_GetOperatingMode( ) )
 80082a0:	f001 ff86 	bl	800a1b0 <SUBGRF_GetOperatingMode>
 80082a4:	4603      	mov	r3, r0
 80082a6:	2b07      	cmp	r3, #7
 80082a8:	d00a      	beq.n	80082c0 <RadioGetStatus+0x24>
 80082aa:	2b07      	cmp	r3, #7
 80082ac:	dc0a      	bgt.n	80082c4 <RadioGetStatus+0x28>
 80082ae:	2b04      	cmp	r3, #4
 80082b0:	d002      	beq.n	80082b8 <RadioGetStatus+0x1c>
 80082b2:	2b05      	cmp	r3, #5
 80082b4:	d002      	beq.n	80082bc <RadioGetStatus+0x20>
 80082b6:	e005      	b.n	80082c4 <RadioGetStatus+0x28>
    {
        case MODE_TX:
            return RF_TX_RUNNING;
 80082b8:	2302      	movs	r3, #2
 80082ba:	e004      	b.n	80082c6 <RadioGetStatus+0x2a>
        case MODE_RX:
            return RF_RX_RUNNING;
 80082bc:	2301      	movs	r3, #1
 80082be:	e002      	b.n	80082c6 <RadioGetStatus+0x2a>
        case MODE_CAD:
            return RF_CAD;
 80082c0:	2303      	movs	r3, #3
 80082c2:	e000      	b.n	80082c6 <RadioGetStatus+0x2a>
        default:
            return RF_IDLE;
 80082c4:	2300      	movs	r3, #0
    }
}
 80082c6:	4618      	mov	r0, r3
 80082c8:	bd80      	pop	{r7, pc}
	...

080082cc <RadioSetModem>:

static void RadioSetModem( RadioModems_t modem )
{
 80082cc:	b580      	push	{r7, lr}
 80082ce:	b082      	sub	sp, #8
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	4603      	mov	r3, r0
 80082d4:	71fb      	strb	r3, [r7, #7]
    SubgRf.Modem = modem;
 80082d6:	4a2a      	ldr	r2, [pc, #168]	; (8008380 <RadioSetModem+0xb4>)
 80082d8:	79fb      	ldrb	r3, [r7, #7]
 80082da:	7013      	strb	r3, [r2, #0]
    RFW_SetRadioModem( modem );
 80082dc:	79fb      	ldrb	r3, [r7, #7]
 80082de:	4618      	mov	r0, r3
 80082e0:	f003 f95d 	bl	800b59e <RFW_SetRadioModem>
    switch( modem )
 80082e4:	79fb      	ldrb	r3, [r7, #7]
 80082e6:	2b05      	cmp	r3, #5
 80082e8:	d80e      	bhi.n	8008308 <RadioSetModem+0x3c>
 80082ea:	a201      	add	r2, pc, #4	; (adr r2, 80082f0 <RadioSetModem+0x24>)
 80082ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082f0:	08008317 	.word	0x08008317
 80082f4:	08008325 	.word	0x08008325
 80082f8:	08008309 	.word	0x08008309
 80082fc:	0800834b 	.word	0x0800834b
 8008300:	08008359 	.word	0x08008359
 8008304:	08008367 	.word	0x08008367
    {
    default:
    case MODEM_MSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GMSK );
 8008308:	2003      	movs	r0, #3
 800830a:	f002 fb11 	bl	800a930 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 800830e:	4b1c      	ldr	r3, [pc, #112]	; (8008380 <RadioSetModem+0xb4>)
 8008310:	2200      	movs	r2, #0
 8008312:	735a      	strb	r2, [r3, #13]
        break;
 8008314:	e02f      	b.n	8008376 <RadioSetModem+0xaa>
    case MODEM_FSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8008316:	2000      	movs	r0, #0
 8008318:	f002 fb0a 	bl	800a930 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 800831c:	4b18      	ldr	r3, [pc, #96]	; (8008380 <RadioSetModem+0xb4>)
 800831e:	2200      	movs	r2, #0
 8008320:	735a      	strb	r2, [r3, #13]
        break;
 8008322:	e028      	b.n	8008376 <RadioSetModem+0xaa>
    case MODEM_LORA:
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 8008324:	2001      	movs	r0, #1
 8008326:	f002 fb03 	bl	800a930 <SUBGRF_SetPacketType>
        // Public/Private network register is reset when switching modems
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 800832a:	4b15      	ldr	r3, [pc, #84]	; (8008380 <RadioSetModem+0xb4>)
 800832c:	7b5a      	ldrb	r2, [r3, #13]
 800832e:	4b14      	ldr	r3, [pc, #80]	; (8008380 <RadioSetModem+0xb4>)
 8008330:	7b1b      	ldrb	r3, [r3, #12]
 8008332:	429a      	cmp	r2, r3
 8008334:	d01e      	beq.n	8008374 <RadioSetModem+0xa8>
        {
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 8008336:	4b12      	ldr	r3, [pc, #72]	; (8008380 <RadioSetModem+0xb4>)
 8008338:	7b1a      	ldrb	r2, [r3, #12]
 800833a:	4b11      	ldr	r3, [pc, #68]	; (8008380 <RadioSetModem+0xb4>)
 800833c:	735a      	strb	r2, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 800833e:	4b10      	ldr	r3, [pc, #64]	; (8008380 <RadioSetModem+0xb4>)
 8008340:	7b5b      	ldrb	r3, [r3, #13]
 8008342:	4618      	mov	r0, r3
 8008344:	f000 ff9a 	bl	800927c <RadioSetPublicNetwork>
        }
        break;
 8008348:	e014      	b.n	8008374 <RadioSetModem+0xa8>
    case MODEM_BPSK:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 800834a:	2002      	movs	r0, #2
 800834c:	f002 faf0 	bl	800a930 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8008350:	4b0b      	ldr	r3, [pc, #44]	; (8008380 <RadioSetModem+0xb4>)
 8008352:	2200      	movs	r2, #0
 8008354:	735a      	strb	r2, [r3, #13]
        break;
 8008356:	e00e      	b.n	8008376 <RadioSetModem+0xaa>
#if (RADIO_SIGFOX_ENABLE == 1)
    case MODEM_SIGFOX_TX:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8008358:	2002      	movs	r0, #2
 800835a:	f002 fae9 	bl	800a930 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 800835e:	4b08      	ldr	r3, [pc, #32]	; (8008380 <RadioSetModem+0xb4>)
 8008360:	2200      	movs	r2, #0
 8008362:	735a      	strb	r2, [r3, #13]
        break;
 8008364:	e007      	b.n	8008376 <RadioSetModem+0xaa>
    case MODEM_SIGFOX_RX:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8008366:	2000      	movs	r0, #0
 8008368:	f002 fae2 	bl	800a930 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 800836c:	4b04      	ldr	r3, [pc, #16]	; (8008380 <RadioSetModem+0xb4>)
 800836e:	2200      	movs	r2, #0
 8008370:	735a      	strb	r2, [r3, #13]
        break;
 8008372:	e000      	b.n	8008376 <RadioSetModem+0xaa>
        break;
 8008374:	bf00      	nop
#endif /*RADIO_SIGFOX_ENABLE == 1*/
    }
}
 8008376:	bf00      	nop
 8008378:	3708      	adds	r7, #8
 800837a:	46bd      	mov	sp, r7
 800837c:	bd80      	pop	{r7, pc}
 800837e:	bf00      	nop
 8008380:	20000a64 	.word	0x20000a64

08008384 <RadioSetChannel>:

static void RadioSetChannel( uint32_t freq )
{
 8008384:	b580      	push	{r7, lr}
 8008386:	b082      	sub	sp, #8
 8008388:	af00      	add	r7, sp, #0
 800838a:	6078      	str	r0, [r7, #4]
    SUBGRF_SetRfFrequency( freq );
 800838c:	6878      	ldr	r0, [r7, #4]
 800838e:	f002 fa89 	bl	800a8a4 <SUBGRF_SetRfFrequency>
}
 8008392:	bf00      	nop
 8008394:	3708      	adds	r7, #8
 8008396:	46bd      	mov	sp, r7
 8008398:	bd80      	pop	{r7, pc}

0800839a <RadioIsChannelFree>:

static bool RadioIsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 800839a:	b580      	push	{r7, lr}
 800839c:	b090      	sub	sp, #64	; 0x40
 800839e:	af0a      	add	r7, sp, #40	; 0x28
 80083a0:	60f8      	str	r0, [r7, #12]
 80083a2:	60b9      	str	r1, [r7, #8]
 80083a4:	603b      	str	r3, [r7, #0]
 80083a6:	4613      	mov	r3, r2
 80083a8:	80fb      	strh	r3, [r7, #6]
    bool status = true;
 80083aa:	2301      	movs	r3, #1
 80083ac:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 80083ae:	2300      	movs	r3, #0
 80083b0:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 80083b2:	2300      	movs	r3, #0
 80083b4:	613b      	str	r3, [r7, #16]

    RadioStandby( );
 80083b6:	f000 fdea 	bl	8008f8e <RadioStandby>

    RadioSetModem( MODEM_FSK );
 80083ba:	2000      	movs	r0, #0
 80083bc:	f7ff ff86 	bl	80082cc <RadioSetModem>

    RadioSetChannel( freq );
 80083c0:	68f8      	ldr	r0, [r7, #12]
 80083c2:	f7ff ffdf 	bl	8008384 <RadioSetChannel>

    // Set Rx bandwidth. Other parameters are not used.
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 80083c6:	2301      	movs	r3, #1
 80083c8:	9309      	str	r3, [sp, #36]	; 0x24
 80083ca:	2300      	movs	r3, #0
 80083cc:	9308      	str	r3, [sp, #32]
 80083ce:	2300      	movs	r3, #0
 80083d0:	9307      	str	r3, [sp, #28]
 80083d2:	2300      	movs	r3, #0
 80083d4:	9306      	str	r3, [sp, #24]
 80083d6:	2300      	movs	r3, #0
 80083d8:	9305      	str	r3, [sp, #20]
 80083da:	2300      	movs	r3, #0
 80083dc:	9304      	str	r3, [sp, #16]
 80083de:	2300      	movs	r3, #0
 80083e0:	9303      	str	r3, [sp, #12]
 80083e2:	2300      	movs	r3, #0
 80083e4:	9302      	str	r3, [sp, #8]
 80083e6:	2303      	movs	r3, #3
 80083e8:	9301      	str	r3, [sp, #4]
 80083ea:	68bb      	ldr	r3, [r7, #8]
 80083ec:	9300      	str	r3, [sp, #0]
 80083ee:	2300      	movs	r3, #0
 80083f0:	f44f 7216 	mov.w	r2, #600	; 0x258
 80083f4:	68b9      	ldr	r1, [r7, #8]
 80083f6:	2000      	movs	r0, #0
 80083f8:	f000 f83c 	bl	8008474 <RadioSetRxConfig>
                      0, false, 0, 0, false, true );
    RadioRx( 0 );
 80083fc:	2000      	movs	r0, #0
 80083fe:	f000 fdcd 	bl	8008f9c <RadioRx>

    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 8008402:	f000 ff69 	bl	80092d8 <RadioGetWakeupTime>
 8008406:	4603      	mov	r3, r0
 8008408:	4618      	mov	r0, r3
 800840a:	f7fa fc0f 	bl	8002c2c <HAL_Delay>

    carrierSenseTime = TimerGetCurrentTime( );
 800840e:	f003 fb7f 	bl	800bb10 <UTIL_TIMER_GetCurrentTime>
 8008412:	6138      	str	r0, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8008414:	e00d      	b.n	8008432 <RadioIsChannelFree+0x98>
    {
        rssi = RadioRssi( MODEM_FSK );
 8008416:	2000      	movs	r0, #0
 8008418:	f000 feae 	bl	8009178 <RadioRssi>
 800841c:	4603      	mov	r3, r0
 800841e:	82bb      	strh	r3, [r7, #20]

        if( rssi > rssiThresh )
 8008420:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8008424:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008428:	429a      	cmp	r2, r3
 800842a:	dd02      	ble.n	8008432 <RadioIsChannelFree+0x98>
        {
            status = false;
 800842c:	2300      	movs	r3, #0
 800842e:	75fb      	strb	r3, [r7, #23]
            break;
 8008430:	e006      	b.n	8008440 <RadioIsChannelFree+0xa6>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8008432:	6938      	ldr	r0, [r7, #16]
 8008434:	f003 fb7e 	bl	800bb34 <UTIL_TIMER_GetElapsedTime>
 8008438:	4602      	mov	r2, r0
 800843a:	683b      	ldr	r3, [r7, #0]
 800843c:	4293      	cmp	r3, r2
 800843e:	d8ea      	bhi.n	8008416 <RadioIsChannelFree+0x7c>
        }
    }
    RadioStandby( );
 8008440:	f000 fda5 	bl	8008f8e <RadioStandby>

    return status;
 8008444:	7dfb      	ldrb	r3, [r7, #23]
}
 8008446:	4618      	mov	r0, r3
 8008448:	3718      	adds	r7, #24
 800844a:	46bd      	mov	sp, r7
 800844c:	bd80      	pop	{r7, pc}

0800844e <RadioRandom>:

static uint32_t RadioRandom( void )
{
 800844e:	b580      	push	{r7, lr}
 8008450:	b082      	sub	sp, #8
 8008452:	af00      	add	r7, sp, #0
    uint32_t rnd = 0;
 8008454:	2300      	movs	r3, #0
 8008456:	607b      	str	r3, [r7, #4]

    /*
     * Radio setup for random number generation
     */
    // Disable modem interrupts
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8008458:	2300      	movs	r3, #0
 800845a:	2200      	movs	r2, #0
 800845c:	2100      	movs	r1, #0
 800845e:	2000      	movs	r0, #0
 8008460:	f002 f9c4 	bl	800a7ec <SUBGRF_SetDioIrqParams>

    rnd = SUBGRF_GetRandom();
 8008464:	f001 ff75 	bl	800a352 <SUBGRF_GetRandom>
 8008468:	6078      	str	r0, [r7, #4]

    return rnd;
 800846a:	687b      	ldr	r3, [r7, #4]
}
 800846c:	4618      	mov	r0, r3
 800846e:	3708      	adds	r7, #8
 8008470:	46bd      	mov	sp, r7
 8008472:	bd80      	pop	{r7, pc}

08008474 <RadioSetRxConfig>:
                              uint32_t bandwidthAfc, uint16_t preambleLen,
                              uint16_t symbTimeout, bool fixLen,
                              uint8_t payloadLen,
                              bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                              bool iqInverted, bool rxContinuous )
{
 8008474:	b580      	push	{r7, lr}
 8008476:	b08a      	sub	sp, #40	; 0x28
 8008478:	af00      	add	r7, sp, #0
 800847a:	60b9      	str	r1, [r7, #8]
 800847c:	607a      	str	r2, [r7, #4]
 800847e:	461a      	mov	r2, r3
 8008480:	4603      	mov	r3, r0
 8008482:	73fb      	strb	r3, [r7, #15]
 8008484:	4613      	mov	r3, r2
 8008486:	73bb      	strb	r3, [r7, #14]
#if (RADIO_SIGFOX_ENABLE == 1)
    uint8_t modReg;
#endif
    SubgRf.RxContinuous = rxContinuous;
 8008488:	4ab9      	ldr	r2, [pc, #740]	; (8008770 <RadioSetRxConfig+0x2fc>)
 800848a:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800848e:	7053      	strb	r3, [r2, #1]
    RFW_DeInit();
 8008490:	f003 f843 	bl	800b51a <RFW_DeInit>
    if( rxContinuous == true )
 8008494:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8008498:	2b00      	cmp	r3, #0
 800849a:	d001      	beq.n	80084a0 <RadioSetRxConfig+0x2c>
    {
        symbTimeout = 0;
 800849c:	2300      	movs	r3, #0
 800849e:	873b      	strh	r3, [r7, #56]	; 0x38
    }
    if( fixLen == true )
 80084a0:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d004      	beq.n	80084b2 <RadioSetRxConfig+0x3e>
    {
        MaxPayloadLength = payloadLen;
 80084a8:	4ab2      	ldr	r2, [pc, #712]	; (8008774 <RadioSetRxConfig+0x300>)
 80084aa:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80084ae:	7013      	strb	r3, [r2, #0]
 80084b0:	e002      	b.n	80084b8 <RadioSetRxConfig+0x44>
    }
    else
    {
        MaxPayloadLength = 0xFF;
 80084b2:	4bb0      	ldr	r3, [pc, #704]	; (8008774 <RadioSetRxConfig+0x300>)
 80084b4:	22ff      	movs	r2, #255	; 0xff
 80084b6:	701a      	strb	r2, [r3, #0]
    }

    switch( modem )
 80084b8:	7bfb      	ldrb	r3, [r7, #15]
 80084ba:	2b05      	cmp	r3, #5
 80084bc:	d009      	beq.n	80084d2 <RadioSetRxConfig+0x5e>
 80084be:	2b05      	cmp	r3, #5
 80084c0:	f300 81d7 	bgt.w	8008872 <RadioSetRxConfig+0x3fe>
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	f000 80bf 	beq.w	8008648 <RadioSetRxConfig+0x1d4>
 80084ca:	2b01      	cmp	r3, #1
 80084cc:	f000 8124 	beq.w	8008718 <RadioSetRxConfig+0x2a4>
            // Timeout Max, Timeout handled directly in SetRx function
            SubgRf.RxTimeout = 0xFFFF;

            break;
        default:
            break;
 80084d0:	e1cf      	b.n	8008872 <RadioSetRxConfig+0x3fe>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 80084d2:	2001      	movs	r0, #1
 80084d4:	f002 f882 	bl	800a5dc <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80084d8:	4ba5      	ldr	r3, [pc, #660]	; (8008770 <RadioSetRxConfig+0x2fc>)
 80084da:	2200      	movs	r2, #0
 80084dc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 80084e0:	4aa3      	ldr	r2, [pc, #652]	; (8008770 <RadioSetRxConfig+0x2fc>)
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 80084e6:	4ba2      	ldr	r3, [pc, #648]	; (8008770 <RadioSetRxConfig+0x2fc>)
 80084e8:	2209      	movs	r2, #9
 80084ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 80084ee:	4ba0      	ldr	r3, [pc, #640]	; (8008770 <RadioSetRxConfig+0x2fc>)
 80084f0:	f44f 7248 	mov.w	r2, #800	; 0x320
 80084f4:	641a      	str	r2, [r3, #64]	; 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 80084f6:	68b8      	ldr	r0, [r7, #8]
 80084f8:	f002 ff42 	bl	800b380 <SUBGRF_GetFskBandwidthRegValue>
 80084fc:	4603      	mov	r3, r0
 80084fe:	461a      	mov	r2, r3
 8008500:	4b9b      	ldr	r3, [pc, #620]	; (8008770 <RadioSetRxConfig+0x2fc>)
 8008502:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8008506:	4b9a      	ldr	r3, [pc, #616]	; (8008770 <RadioSetRxConfig+0x2fc>)
 8008508:	2200      	movs	r2, #0
 800850a:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 800850c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800850e:	00db      	lsls	r3, r3, #3
 8008510:	b29a      	uxth	r2, r3
 8008512:	4b97      	ldr	r3, [pc, #604]	; (8008770 <RadioSetRxConfig+0x2fc>)
 8008514:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 8008516:	4b96      	ldr	r3, [pc, #600]	; (8008770 <RadioSetRxConfig+0x2fc>)
 8008518:	2200      	movs	r2, #0
 800851a:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 800851c:	4b94      	ldr	r3, [pc, #592]	; (8008770 <RadioSetRxConfig+0x2fc>)
 800851e:	2210      	movs	r2, #16
 8008520:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8008522:	4b93      	ldr	r3, [pc, #588]	; (8008770 <RadioSetRxConfig+0x2fc>)
 8008524:	2200      	movs	r2, #0
 8008526:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 8008528:	4b91      	ldr	r3, [pc, #580]	; (8008770 <RadioSetRxConfig+0x2fc>)
 800852a:	2200      	movs	r2, #0
 800852c:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 800852e:	4b91      	ldr	r3, [pc, #580]	; (8008774 <RadioSetRxConfig+0x300>)
 8008530:	781a      	ldrb	r2, [r3, #0]
 8008532:	4b8f      	ldr	r3, [pc, #572]	; (8008770 <RadioSetRxConfig+0x2fc>)
 8008534:	759a      	strb	r2, [r3, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8008536:	4b8e      	ldr	r3, [pc, #568]	; (8008770 <RadioSetRxConfig+0x2fc>)
 8008538:	2201      	movs	r2, #1
 800853a:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 800853c:	4b8c      	ldr	r3, [pc, #560]	; (8008770 <RadioSetRxConfig+0x2fc>)
 800853e:	2200      	movs	r2, #0
 8008540:	761a      	strb	r2, [r3, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 8008542:	2005      	movs	r0, #5
 8008544:	f7ff fec2 	bl	80082cc <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8008548:	488b      	ldr	r0, [pc, #556]	; (8008778 <RadioSetRxConfig+0x304>)
 800854a:	f002 fae5 	bl	800ab18 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800854e:	488b      	ldr	r0, [pc, #556]	; (800877c <RadioSetRxConfig+0x308>)
 8008550:	f002 fbb4 	bl	800acbc <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8008554:	4a8a      	ldr	r2, [pc, #552]	; (8008780 <RadioSetRxConfig+0x30c>)
 8008556:	f107 031c 	add.w	r3, r7, #28
 800855a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800855e:	e883 0003 	stmia.w	r3, {r0, r1}
 8008562:	f107 031c 	add.w	r3, r7, #28
 8008566:	4618      	mov	r0, r3
 8008568:	f001 fe71 	bl	800a24e <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 800856c:	f240 10ff 	movw	r0, #511	; 0x1ff
 8008570:	f001 febc 	bl	800a2ec <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(SUBGHZ_AGCGFORSTCFGR);
 8008574:	f640 00b8 	movw	r0, #2232	; 0x8b8
 8008578:	f000 fe1d 	bl	80091b6 <RadioRead>
 800857c:	4603      	mov	r3, r0
 800857e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=RADIO_BIT_MASK(4);
 8008582:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008586:	f023 0310 	bic.w	r3, r3, #16
 800858a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_AGCGFORSTCFGR, modReg);
 800858e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008592:	4619      	mov	r1, r3
 8008594:	f640 00b8 	movw	r0, #2232	; 0x8b8
 8008598:	f000 fdfb 	bl	8009192 <RadioWrite>
            RadioWrite(SUBGHZ_AGCGFORSTPOWTHR, 0x4 );
 800859c:	2104      	movs	r1, #4
 800859e:	f640 00b9 	movw	r0, #2233	; 0x8b9
 80085a2:	f000 fdf6 	bl	8009192 <RadioWrite>
            modReg= RadioRead(SUBGHZ_AGCRSSICTL0R);
 80085a6:	f640 009b 	movw	r0, #2203	; 0x89b
 80085aa:	f000 fe04 	bl	80091b6 <RadioRead>
 80085ae:	4603      	mov	r3, r0
 80085b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 80085b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80085b8:	f023 031c 	bic.w	r3, r3, #28
 80085bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_AGCRSSICTL0R, (modReg| (0x1<<3) ) );
 80085c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80085c4:	f043 0308 	orr.w	r3, r3, #8
 80085c8:	b2db      	uxtb	r3, r3
 80085ca:	4619      	mov	r1, r3
 80085cc:	f640 009b 	movw	r0, #2203	; 0x89b
 80085d0:	f000 fddf 	bl	8009192 <RadioWrite>
            modReg= RadioRead(SUBGHZ_GAFCR);
 80085d4:	f240 60d1 	movw	r0, #1745	; 0x6d1
 80085d8:	f000 fded 	bl	80091b6 <RadioRead>
 80085dc:	4603      	mov	r3, r0
 80085de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 80085e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80085e6:	f023 0318 	bic.w	r3, r3, #24
 80085ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_GAFCR, (modReg| (0x3<<3) ));
 80085ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80085f2:	f043 0318 	orr.w	r3, r3, #24
 80085f6:	b2db      	uxtb	r3, r3
 80085f8:	4619      	mov	r1, r3
 80085fa:	f240 60d1 	movw	r0, #1745	; 0x6d1
 80085fe:	f000 fdc8 	bl	8009192 <RadioWrite>
            modReg= RadioRead(SUBGHZ_GBSYNCR);
 8008602:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8008606:	f000 fdd6 	bl	80091b6 <RadioRead>
 800860a:	4603      	mov	r3, r0
 800860c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 8008610:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008614:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008618:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_GBSYNCR, (modReg| (0x5<<4) ));
 800861c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008620:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8008624:	b2db      	uxtb	r3, r3
 8008626:	4619      	mov	r1, r3
 8008628:	f240 60ac 	movw	r0, #1708	; 0x6ac
 800862c:	f000 fdb1 	bl	8009192 <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8008630:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8008632:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8008636:	fb02 f303 	mul.w	r3, r2, r3
 800863a:	461a      	mov	r2, r3
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008642:	4a4b      	ldr	r2, [pc, #300]	; (8008770 <RadioSetRxConfig+0x2fc>)
 8008644:	6093      	str	r3, [r2, #8]
            break;
 8008646:	e115      	b.n	8008874 <RadioSetRxConfig+0x400>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8008648:	2000      	movs	r0, #0
 800864a:	f001 ffc7 	bl	800a5dc <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800864e:	4b48      	ldr	r3, [pc, #288]	; (8008770 <RadioSetRxConfig+0x2fc>)
 8008650:	2200      	movs	r2, #0
 8008652:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8008656:	4a46      	ldr	r2, [pc, #280]	; (8008770 <RadioSetRxConfig+0x2fc>)
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 800865c:	4b44      	ldr	r3, [pc, #272]	; (8008770 <RadioSetRxConfig+0x2fc>)
 800865e:	220b      	movs	r2, #11
 8008660:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8008664:	68b8      	ldr	r0, [r7, #8]
 8008666:	f002 fe8b 	bl	800b380 <SUBGRF_GetFskBandwidthRegValue>
 800866a:	4603      	mov	r3, r0
 800866c:	461a      	mov	r2, r3
 800866e:	4b40      	ldr	r3, [pc, #256]	; (8008770 <RadioSetRxConfig+0x2fc>)
 8008670:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8008674:	4b3e      	ldr	r3, [pc, #248]	; (8008770 <RadioSetRxConfig+0x2fc>)
 8008676:	2200      	movs	r2, #0
 8008678:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 800867a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800867c:	00db      	lsls	r3, r3, #3
 800867e:	b29a      	uxth	r2, r3
 8008680:	4b3b      	ldr	r3, [pc, #236]	; (8008770 <RadioSetRxConfig+0x2fc>)
 8008682:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8008684:	4b3a      	ldr	r3, [pc, #232]	; (8008770 <RadioSetRxConfig+0x2fc>)
 8008686:	2204      	movs	r2, #4
 8008688:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 800868a:	4b39      	ldr	r3, [pc, #228]	; (8008770 <RadioSetRxConfig+0x2fc>)
 800868c:	2218      	movs	r2, #24
 800868e:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8008690:	4b37      	ldr	r3, [pc, #220]	; (8008770 <RadioSetRxConfig+0x2fc>)
 8008692:	2200      	movs	r2, #0
 8008694:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8008696:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800869a:	f083 0301 	eor.w	r3, r3, #1
 800869e:	b2db      	uxtb	r3, r3
 80086a0:	461a      	mov	r2, r3
 80086a2:	4b33      	ldr	r3, [pc, #204]	; (8008770 <RadioSetRxConfig+0x2fc>)
 80086a4:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 80086a6:	4b33      	ldr	r3, [pc, #204]	; (8008774 <RadioSetRxConfig+0x300>)
 80086a8:	781a      	ldrb	r2, [r3, #0]
 80086aa:	4b31      	ldr	r3, [pc, #196]	; (8008770 <RadioSetRxConfig+0x2fc>)
 80086ac:	759a      	strb	r2, [r3, #22]
            if( crcOn == true )
 80086ae:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d003      	beq.n	80086be <RadioSetRxConfig+0x24a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 80086b6:	4b2e      	ldr	r3, [pc, #184]	; (8008770 <RadioSetRxConfig+0x2fc>)
 80086b8:	22f2      	movs	r2, #242	; 0xf2
 80086ba:	75da      	strb	r2, [r3, #23]
 80086bc:	e002      	b.n	80086c4 <RadioSetRxConfig+0x250>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 80086be:	4b2c      	ldr	r3, [pc, #176]	; (8008770 <RadioSetRxConfig+0x2fc>)
 80086c0:	2201      	movs	r2, #1
 80086c2:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 80086c4:	4b2a      	ldr	r3, [pc, #168]	; (8008770 <RadioSetRxConfig+0x2fc>)
 80086c6:	2201      	movs	r2, #1
 80086c8:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 80086ca:	f000 fc60 	bl	8008f8e <RadioStandby>
            RadioSetModem( MODEM_FSK );
 80086ce:	2000      	movs	r0, #0
 80086d0:	f7ff fdfc 	bl	80082cc <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80086d4:	4828      	ldr	r0, [pc, #160]	; (8008778 <RadioSetRxConfig+0x304>)
 80086d6:	f002 fa1f 	bl	800ab18 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80086da:	4828      	ldr	r0, [pc, #160]	; (800877c <RadioSetRxConfig+0x308>)
 80086dc:	f002 faee 	bl	800acbc <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 80086e0:	4a28      	ldr	r2, [pc, #160]	; (8008784 <RadioSetRxConfig+0x310>)
 80086e2:	f107 0314 	add.w	r3, r7, #20
 80086e6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80086ea:	e883 0003 	stmia.w	r3, {r0, r1}
 80086ee:	f107 0314 	add.w	r3, r7, #20
 80086f2:	4618      	mov	r0, r3
 80086f4:	f001 fdab 	bl	800a24e <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 80086f8:	f240 10ff 	movw	r0, #511	; 0x1ff
 80086fc:	f001 fdf6 	bl	800a2ec <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8008700:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8008702:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8008706:	fb02 f303 	mul.w	r3, r2, r3
 800870a:	461a      	mov	r2, r3
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008712:	4a17      	ldr	r2, [pc, #92]	; (8008770 <RadioSetRxConfig+0x2fc>)
 8008714:	6093      	str	r3, [r2, #8]
            break;
 8008716:	e0ad      	b.n	8008874 <RadioSetRxConfig+0x400>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8008718:	2000      	movs	r0, #0
 800871a:	f001 ff5f 	bl	800a5dc <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800871e:	4b14      	ldr	r3, [pc, #80]	; (8008770 <RadioSetRxConfig+0x2fc>)
 8008720:	2201      	movs	r2, #1
 8008722:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	b2da      	uxtb	r2, r3
 800872a:	4b11      	ldr	r3, [pc, #68]	; (8008770 <RadioSetRxConfig+0x2fc>)
 800872c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 8008730:	4a15      	ldr	r2, [pc, #84]	; (8008788 <RadioSetRxConfig+0x314>)
 8008732:	68bb      	ldr	r3, [r7, #8]
 8008734:	4413      	add	r3, r2
 8008736:	781a      	ldrb	r2, [r3, #0]
 8008738:	4b0d      	ldr	r3, [pc, #52]	; (8008770 <RadioSetRxConfig+0x2fc>)
 800873a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 800873e:	4a0c      	ldr	r2, [pc, #48]	; (8008770 <RadioSetRxConfig+0x2fc>)
 8008740:	7bbb      	ldrb	r3, [r7, #14]
 8008742:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8008746:	68bb      	ldr	r3, [r7, #8]
 8008748:	2b00      	cmp	r3, #0
 800874a:	d105      	bne.n	8008758 <RadioSetRxConfig+0x2e4>
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	2b0b      	cmp	r3, #11
 8008750:	d008      	beq.n	8008764 <RadioSetRxConfig+0x2f0>
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	2b0c      	cmp	r3, #12
 8008756:	d005      	beq.n	8008764 <RadioSetRxConfig+0x2f0>
 8008758:	68bb      	ldr	r3, [r7, #8]
 800875a:	2b01      	cmp	r3, #1
 800875c:	d116      	bne.n	800878c <RadioSetRxConfig+0x318>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	2b0c      	cmp	r3, #12
 8008762:	d113      	bne.n	800878c <RadioSetRxConfig+0x318>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8008764:	4b02      	ldr	r3, [pc, #8]	; (8008770 <RadioSetRxConfig+0x2fc>)
 8008766:	2201      	movs	r2, #1
 8008768:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 800876c:	e012      	b.n	8008794 <RadioSetRxConfig+0x320>
 800876e:	bf00      	nop
 8008770:	20000a64 	.word	0x20000a64
 8008774:	20000015 	.word	0x20000015
 8008778:	20000a9c 	.word	0x20000a9c
 800877c:	20000a72 	.word	0x20000a72
 8008780:	0800cf30 	.word	0x0800cf30
 8008784:	0800cf38 	.word	0x0800cf38
 8008788:	0800d0d4 	.word	0x0800d0d4
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 800878c:	4b3b      	ldr	r3, [pc, #236]	; (800887c <RadioSetRxConfig+0x408>)
 800878e:	2200      	movs	r2, #0
 8008790:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8008794:	4b39      	ldr	r3, [pc, #228]	; (800887c <RadioSetRxConfig+0x408>)
 8008796:	2201      	movs	r2, #1
 8008798:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 800879a:	4b38      	ldr	r3, [pc, #224]	; (800887c <RadioSetRxConfig+0x408>)
 800879c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80087a0:	2b05      	cmp	r3, #5
 80087a2:	d004      	beq.n	80087ae <RadioSetRxConfig+0x33a>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 80087a4:	4b35      	ldr	r3, [pc, #212]	; (800887c <RadioSetRxConfig+0x408>)
 80087a6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 80087aa:	2b06      	cmp	r3, #6
 80087ac:	d10a      	bne.n	80087c4 <RadioSetRxConfig+0x350>
                if( preambleLen < 12 )
 80087ae:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80087b0:	2b0b      	cmp	r3, #11
 80087b2:	d803      	bhi.n	80087bc <RadioSetRxConfig+0x348>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 80087b4:	4b31      	ldr	r3, [pc, #196]	; (800887c <RadioSetRxConfig+0x408>)
 80087b6:	220c      	movs	r2, #12
 80087b8:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 80087ba:	e006      	b.n	80087ca <RadioSetRxConfig+0x356>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 80087bc:	4a2f      	ldr	r2, [pc, #188]	; (800887c <RadioSetRxConfig+0x408>)
 80087be:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80087c0:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 80087c2:	e002      	b.n	80087ca <RadioSetRxConfig+0x356>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 80087c4:	4a2d      	ldr	r2, [pc, #180]	; (800887c <RadioSetRxConfig+0x408>)
 80087c6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80087c8:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 80087ca:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 80087ce:	4b2b      	ldr	r3, [pc, #172]	; (800887c <RadioSetRxConfig+0x408>)
 80087d0:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 80087d2:	4b2b      	ldr	r3, [pc, #172]	; (8008880 <RadioSetRxConfig+0x40c>)
 80087d4:	781a      	ldrb	r2, [r3, #0]
 80087d6:	4b29      	ldr	r3, [pc, #164]	; (800887c <RadioSetRxConfig+0x408>)
 80087d8:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 80087da:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 80087de:	4b27      	ldr	r3, [pc, #156]	; (800887c <RadioSetRxConfig+0x408>)
 80087e0:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 80087e4:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 80087e8:	4b24      	ldr	r3, [pc, #144]	; (800887c <RadioSetRxConfig+0x408>)
 80087ea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 80087ee:	f000 fbce 	bl	8008f8e <RadioStandby>
            RadioSetModem( MODEM_LORA );
 80087f2:	2001      	movs	r0, #1
 80087f4:	f7ff fd6a 	bl	80082cc <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80087f8:	4822      	ldr	r0, [pc, #136]	; (8008884 <RadioSetRxConfig+0x410>)
 80087fa:	f002 f98d 	bl	800ab18 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80087fe:	4822      	ldr	r0, [pc, #136]	; (8008888 <RadioSetRxConfig+0x414>)
 8008800:	f002 fa5c 	bl	800acbc <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8008804:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8008806:	b2db      	uxtb	r3, r3
 8008808:	4618      	mov	r0, r3
 800880a:	f001 fef6 	bl	800a5fa <SUBGRF_SetLoRaSymbNumTimeout>
            SUBGRF_WriteRegister(SUBGHZ_AGCCFG,SUBGRF_ReadRegister(SUBGHZ_AGCCFG)&0x1);
 800880e:	f640 00a3 	movw	r0, #2211	; 0x8a3
 8008812:	f002 fbaf 	bl	800af74 <SUBGRF_ReadRegister>
 8008816:	4603      	mov	r3, r0
 8008818:	f003 0301 	and.w	r3, r3, #1
 800881c:	b2db      	uxtb	r3, r3
 800881e:	4619      	mov	r1, r3
 8008820:	f640 00a3 	movw	r0, #2211	; 0x8a3
 8008824:	f002 fb92 	bl	800af4c <SUBGRF_WriteRegister>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8008828:	4b14      	ldr	r3, [pc, #80]	; (800887c <RadioSetRxConfig+0x408>)
 800882a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800882e:	2b01      	cmp	r3, #1
 8008830:	d10d      	bne.n	800884e <RadioSetRxConfig+0x3da>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 8008832:	f240 7036 	movw	r0, #1846	; 0x736
 8008836:	f002 fb9d 	bl	800af74 <SUBGRF_ReadRegister>
 800883a:	4603      	mov	r3, r0
 800883c:	f023 0304 	bic.w	r3, r3, #4
 8008840:	b2db      	uxtb	r3, r3
 8008842:	4619      	mov	r1, r3
 8008844:	f240 7036 	movw	r0, #1846	; 0x736
 8008848:	f002 fb80 	bl	800af4c <SUBGRF_WriteRegister>
 800884c:	e00c      	b.n	8008868 <RadioSetRxConfig+0x3f4>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 800884e:	f240 7036 	movw	r0, #1846	; 0x736
 8008852:	f002 fb8f 	bl	800af74 <SUBGRF_ReadRegister>
 8008856:	4603      	mov	r3, r0
 8008858:	f043 0304 	orr.w	r3, r3, #4
 800885c:	b2db      	uxtb	r3, r3
 800885e:	4619      	mov	r1, r3
 8008860:	f240 7036 	movw	r0, #1846	; 0x736
 8008864:	f002 fb72 	bl	800af4c <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 8008868:	4b04      	ldr	r3, [pc, #16]	; (800887c <RadioSetRxConfig+0x408>)
 800886a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800886e:	609a      	str	r2, [r3, #8]
            break;
 8008870:	e000      	b.n	8008874 <RadioSetRxConfig+0x400>
            break;
 8008872:	bf00      	nop
    }
}
 8008874:	bf00      	nop
 8008876:	3728      	adds	r7, #40	; 0x28
 8008878:	46bd      	mov	sp, r7
 800887a:	bd80      	pop	{r7, pc}
 800887c:	20000a64 	.word	0x20000a64
 8008880:	20000015 	.word	0x20000015
 8008884:	20000a9c 	.word	0x20000a9c
 8008888:	20000a72 	.word	0x20000a72

0800888c <RadioSetTxConfig>:
static void RadioSetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                              uint32_t bandwidth, uint32_t datarate,
                              uint8_t coderate, uint16_t preambleLen,
                              bool fixLen, bool crcOn, bool freqHopOn,
                              uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 800888c:	b580      	push	{r7, lr}
 800888e:	b086      	sub	sp, #24
 8008890:	af00      	add	r7, sp, #0
 8008892:	60ba      	str	r2, [r7, #8]
 8008894:	607b      	str	r3, [r7, #4]
 8008896:	4603      	mov	r3, r0
 8008898:	73fb      	strb	r3, [r7, #15]
 800889a:	460b      	mov	r3, r1
 800889c:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    RFW_DeInit();
 800889e:	f002 fe3c 	bl	800b51a <RFW_DeInit>
    switch( modem )
 80088a2:	7bfb      	ldrb	r3, [r7, #15]
 80088a4:	2b04      	cmp	r3, #4
 80088a6:	f000 80c7 	beq.w	8008a38 <RadioSetTxConfig+0x1ac>
 80088aa:	2b04      	cmp	r3, #4
 80088ac:	f300 80d6 	bgt.w	8008a5c <RadioSetTxConfig+0x1d0>
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d002      	beq.n	80088ba <RadioSetTxConfig+0x2e>
 80088b4:	2b01      	cmp	r3, #1
 80088b6:	d059      	beq.n	800896c <RadioSetTxConfig+0xe0>
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
            break;
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 80088b8:	e0d0      	b.n	8008a5c <RadioSetTxConfig+0x1d0>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80088ba:	4b77      	ldr	r3, [pc, #476]	; (8008a98 <RadioSetTxConfig+0x20c>)
 80088bc:	2200      	movs	r2, #0
 80088be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 80088c2:	4a75      	ldr	r2, [pc, #468]	; (8008a98 <RadioSetTxConfig+0x20c>)
 80088c4:	6a3b      	ldr	r3, [r7, #32]
 80088c6:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 80088c8:	4b73      	ldr	r3, [pc, #460]	; (8008a98 <RadioSetTxConfig+0x20c>)
 80088ca:	220b      	movs	r2, #11
 80088cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 80088d0:	6878      	ldr	r0, [r7, #4]
 80088d2:	f002 fd55 	bl	800b380 <SUBGRF_GetFskBandwidthRegValue>
 80088d6:	4603      	mov	r3, r0
 80088d8:	461a      	mov	r2, r3
 80088da:	4b6f      	ldr	r3, [pc, #444]	; (8008a98 <RadioSetTxConfig+0x20c>)
 80088dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 80088e0:	4a6d      	ldr	r2, [pc, #436]	; (8008a98 <RadioSetTxConfig+0x20c>)
 80088e2:	68bb      	ldr	r3, [r7, #8]
 80088e4:	6413      	str	r3, [r2, #64]	; 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80088e6:	4b6c      	ldr	r3, [pc, #432]	; (8008a98 <RadioSetTxConfig+0x20c>)
 80088e8:	2200      	movs	r2, #0
 80088ea:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 80088ec:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80088ee:	00db      	lsls	r3, r3, #3
 80088f0:	b29a      	uxth	r2, r3
 80088f2:	4b69      	ldr	r3, [pc, #420]	; (8008a98 <RadioSetTxConfig+0x20c>)
 80088f4:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 80088f6:	4b68      	ldr	r3, [pc, #416]	; (8008a98 <RadioSetTxConfig+0x20c>)
 80088f8:	2204      	movs	r2, #4
 80088fa:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 80088fc:	4b66      	ldr	r3, [pc, #408]	; (8008a98 <RadioSetTxConfig+0x20c>)
 80088fe:	2218      	movs	r2, #24
 8008900:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8008902:	4b65      	ldr	r3, [pc, #404]	; (8008a98 <RadioSetTxConfig+0x20c>)
 8008904:	2200      	movs	r2, #0
 8008906:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8008908:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800890c:	f083 0301 	eor.w	r3, r3, #1
 8008910:	b2db      	uxtb	r3, r3
 8008912:	461a      	mov	r2, r3
 8008914:	4b60      	ldr	r3, [pc, #384]	; (8008a98 <RadioSetTxConfig+0x20c>)
 8008916:	755a      	strb	r2, [r3, #21]
            if( crcOn == true )
 8008918:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800891c:	2b00      	cmp	r3, #0
 800891e:	d003      	beq.n	8008928 <RadioSetTxConfig+0x9c>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8008920:	4b5d      	ldr	r3, [pc, #372]	; (8008a98 <RadioSetTxConfig+0x20c>)
 8008922:	22f2      	movs	r2, #242	; 0xf2
 8008924:	75da      	strb	r2, [r3, #23]
 8008926:	e002      	b.n	800892e <RadioSetTxConfig+0xa2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8008928:	4b5b      	ldr	r3, [pc, #364]	; (8008a98 <RadioSetTxConfig+0x20c>)
 800892a:	2201      	movs	r2, #1
 800892c:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 800892e:	4b5a      	ldr	r3, [pc, #360]	; (8008a98 <RadioSetTxConfig+0x20c>)
 8008930:	2201      	movs	r2, #1
 8008932:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 8008934:	f000 fb2b 	bl	8008f8e <RadioStandby>
            RadioSetModem(  MODEM_FSK  );
 8008938:	2000      	movs	r0, #0
 800893a:	f7ff fcc7 	bl	80082cc <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800893e:	4857      	ldr	r0, [pc, #348]	; (8008a9c <RadioSetTxConfig+0x210>)
 8008940:	f002 f8ea 	bl	800ab18 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008944:	4856      	ldr	r0, [pc, #344]	; (8008aa0 <RadioSetTxConfig+0x214>)
 8008946:	f002 f9b9 	bl	800acbc <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 800894a:	4a56      	ldr	r2, [pc, #344]	; (8008aa4 <RadioSetTxConfig+0x218>)
 800894c:	f107 0310 	add.w	r3, r7, #16
 8008950:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008954:	e883 0003 	stmia.w	r3, {r0, r1}
 8008958:	f107 0310 	add.w	r3, r7, #16
 800895c:	4618      	mov	r0, r3
 800895e:	f001 fc76 	bl	800a24e <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8008962:	f240 10ff 	movw	r0, #511	; 0x1ff
 8008966:	f001 fcc1 	bl	800a2ec <SUBGRF_SetWhiteningSeed>
            break;
 800896a:	e078      	b.n	8008a5e <RadioSetTxConfig+0x1d2>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800896c:	4b4a      	ldr	r3, [pc, #296]	; (8008a98 <RadioSetTxConfig+0x20c>)
 800896e:	2201      	movs	r2, #1
 8008970:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 8008974:	6a3b      	ldr	r3, [r7, #32]
 8008976:	b2da      	uxtb	r2, r3
 8008978:	4b47      	ldr	r3, [pc, #284]	; (8008a98 <RadioSetTxConfig+0x20c>)
 800897a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 800897e:	4a4a      	ldr	r2, [pc, #296]	; (8008aa8 <RadioSetTxConfig+0x21c>)
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	4413      	add	r3, r2
 8008984:	781a      	ldrb	r2, [r3, #0]
 8008986:	4b44      	ldr	r3, [pc, #272]	; (8008a98 <RadioSetTxConfig+0x20c>)
 8008988:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 800898c:	4a42      	ldr	r2, [pc, #264]	; (8008a98 <RadioSetTxConfig+0x20c>)
 800898e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008992:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	2b00      	cmp	r3, #0
 800899a:	d105      	bne.n	80089a8 <RadioSetTxConfig+0x11c>
 800899c:	6a3b      	ldr	r3, [r7, #32]
 800899e:	2b0b      	cmp	r3, #11
 80089a0:	d008      	beq.n	80089b4 <RadioSetTxConfig+0x128>
 80089a2:	6a3b      	ldr	r3, [r7, #32]
 80089a4:	2b0c      	cmp	r3, #12
 80089a6:	d005      	beq.n	80089b4 <RadioSetTxConfig+0x128>
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	2b01      	cmp	r3, #1
 80089ac:	d107      	bne.n	80089be <RadioSetTxConfig+0x132>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 80089ae:	6a3b      	ldr	r3, [r7, #32]
 80089b0:	2b0c      	cmp	r3, #12
 80089b2:	d104      	bne.n	80089be <RadioSetTxConfig+0x132>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 80089b4:	4b38      	ldr	r3, [pc, #224]	; (8008a98 <RadioSetTxConfig+0x20c>)
 80089b6:	2201      	movs	r2, #1
 80089b8:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 80089bc:	e003      	b.n	80089c6 <RadioSetTxConfig+0x13a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 80089be:	4b36      	ldr	r3, [pc, #216]	; (8008a98 <RadioSetTxConfig+0x20c>)
 80089c0:	2200      	movs	r2, #0
 80089c2:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 80089c6:	4b34      	ldr	r3, [pc, #208]	; (8008a98 <RadioSetTxConfig+0x20c>)
 80089c8:	2201      	movs	r2, #1
 80089ca:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 80089cc:	4b32      	ldr	r3, [pc, #200]	; (8008a98 <RadioSetTxConfig+0x20c>)
 80089ce:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80089d2:	2b05      	cmp	r3, #5
 80089d4:	d004      	beq.n	80089e0 <RadioSetTxConfig+0x154>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 80089d6:	4b30      	ldr	r3, [pc, #192]	; (8008a98 <RadioSetTxConfig+0x20c>)
 80089d8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 80089dc:	2b06      	cmp	r3, #6
 80089de:	d10a      	bne.n	80089f6 <RadioSetTxConfig+0x16a>
                if( preambleLen < 12 )
 80089e0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80089e2:	2b0b      	cmp	r3, #11
 80089e4:	d803      	bhi.n	80089ee <RadioSetTxConfig+0x162>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 80089e6:	4b2c      	ldr	r3, [pc, #176]	; (8008a98 <RadioSetTxConfig+0x20c>)
 80089e8:	220c      	movs	r2, #12
 80089ea:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 80089ec:	e006      	b.n	80089fc <RadioSetTxConfig+0x170>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 80089ee:	4a2a      	ldr	r2, [pc, #168]	; (8008a98 <RadioSetTxConfig+0x20c>)
 80089f0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80089f2:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 80089f4:	e002      	b.n	80089fc <RadioSetTxConfig+0x170>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 80089f6:	4a28      	ldr	r2, [pc, #160]	; (8008a98 <RadioSetTxConfig+0x20c>)
 80089f8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80089fa:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 80089fc:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8008a00:	4b25      	ldr	r3, [pc, #148]	; (8008a98 <RadioSetTxConfig+0x20c>)
 8008a02:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8008a04:	4b29      	ldr	r3, [pc, #164]	; (8008aac <RadioSetTxConfig+0x220>)
 8008a06:	781a      	ldrb	r2, [r3, #0]
 8008a08:	4b23      	ldr	r3, [pc, #140]	; (8008a98 <RadioSetTxConfig+0x20c>)
 8008a0a:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8008a0c:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8008a10:	4b21      	ldr	r3, [pc, #132]	; (8008a98 <RadioSetTxConfig+0x20c>)
 8008a12:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8008a16:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8008a1a:	4b1f      	ldr	r3, [pc, #124]	; (8008a98 <RadioSetTxConfig+0x20c>)
 8008a1c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 8008a20:	f000 fab5 	bl	8008f8e <RadioStandby>
            RadioSetModem( MODEM_LORA );
 8008a24:	2001      	movs	r0, #1
 8008a26:	f7ff fc51 	bl	80082cc <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8008a2a:	481c      	ldr	r0, [pc, #112]	; (8008a9c <RadioSetTxConfig+0x210>)
 8008a2c:	f002 f874 	bl	800ab18 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008a30:	481b      	ldr	r0, [pc, #108]	; (8008aa0 <RadioSetTxConfig+0x214>)
 8008a32:	f002 f943 	bl	800acbc <SUBGRF_SetPacketParams>
            break;
 8008a36:	e012      	b.n	8008a5e <RadioSetTxConfig+0x1d2>
            RadioSetModem(MODEM_SIGFOX_TX);
 8008a38:	2004      	movs	r0, #4
 8008a3a:	f7ff fc47 	bl	80082cc <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 8008a3e:	4b16      	ldr	r3, [pc, #88]	; (8008a98 <RadioSetTxConfig+0x20c>)
 8008a40:	2202      	movs	r2, #2
 8008a42:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 8008a46:	4a14      	ldr	r2, [pc, #80]	; (8008a98 <RadioSetTxConfig+0x20c>)
 8008a48:	6a3b      	ldr	r3, [r7, #32]
 8008a4a:	6493      	str	r3, [r2, #72]	; 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 8008a4c:	4b12      	ldr	r3, [pc, #72]	; (8008a98 <RadioSetTxConfig+0x20c>)
 8008a4e:	2216      	movs	r2, #22
 8008a50:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8008a54:	4811      	ldr	r0, [pc, #68]	; (8008a9c <RadioSetTxConfig+0x210>)
 8008a56:	f002 f85f 	bl	800ab18 <SUBGRF_SetModulationParams>
            break;
 8008a5a:	e000      	b.n	8008a5e <RadioSetTxConfig+0x1d2>
            break;
 8008a5c:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 8008a5e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008a62:	4618      	mov	r0, r3
 8008a64:	f002 fb8e 	bl	800b184 <SUBGRF_SetRfTxPower>
 8008a68:	4603      	mov	r3, r0
 8008a6a:	461a      	mov	r2, r3
 8008a6c:	4b0a      	ldr	r3, [pc, #40]	; (8008a98 <RadioSetTxConfig+0x20c>)
 8008a6e:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8008a72:	210e      	movs	r1, #14
 8008a74:	f640 101f 	movw	r0, #2335	; 0x91f
 8008a78:	f002 fa68 	bl	800af4c <SUBGRF_WriteRegister>
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 8008a7c:	4b06      	ldr	r3, [pc, #24]	; (8008a98 <RadioSetTxConfig+0x20c>)
 8008a7e:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8008a82:	4618      	mov	r0, r3
 8008a84:	f002 fd5d 	bl	800b542 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 8008a88:	4a03      	ldr	r2, [pc, #12]	; (8008a98 <RadioSetTxConfig+0x20c>)
 8008a8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a8c:	6053      	str	r3, [r2, #4]
}
 8008a8e:	bf00      	nop
 8008a90:	3718      	adds	r7, #24
 8008a92:	46bd      	mov	sp, r7
 8008a94:	bd80      	pop	{r7, pc}
 8008a96:	bf00      	nop
 8008a98:	20000a64 	.word	0x20000a64
 8008a9c:	20000a9c 	.word	0x20000a9c
 8008aa0:	20000a72 	.word	0x20000a72
 8008aa4:	0800cf38 	.word	0x0800cf38
 8008aa8:	0800d0d4 	.word	0x0800d0d4
 8008aac:	20000015 	.word	0x20000015

08008ab0 <RadioCheckRfFrequency>:

static bool RadioCheckRfFrequency( uint32_t frequency )
{
 8008ab0:	b480      	push	{r7}
 8008ab2:	b083      	sub	sp, #12
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	6078      	str	r0, [r7, #4]
    return true;
 8008ab8:	2301      	movs	r3, #1
}
 8008aba:	4618      	mov	r0, r3
 8008abc:	370c      	adds	r7, #12
 8008abe:	46bd      	mov	sp, r7
 8008ac0:	bc80      	pop	{r7}
 8008ac2:	4770      	bx	lr

08008ac4 <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
 8008ac4:	b480      	push	{r7}
 8008ac6:	b085      	sub	sp, #20
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	4603      	mov	r3, r0
 8008acc:	71fb      	strb	r3, [r7, #7]
    uint32_t bandwidthInHz = 0;
 8008ace:	2300      	movs	r3, #0
 8008ad0:	60fb      	str	r3, [r7, #12]

    switch( bw )
 8008ad2:	79fb      	ldrb	r3, [r7, #7]
 8008ad4:	2b0a      	cmp	r3, #10
 8008ad6:	d83e      	bhi.n	8008b56 <RadioGetLoRaBandwidthInHz+0x92>
 8008ad8:	a201      	add	r2, pc, #4	; (adr r2, 8008ae0 <RadioGetLoRaBandwidthInHz+0x1c>)
 8008ada:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ade:	bf00      	nop
 8008ae0:	08008b0d 	.word	0x08008b0d
 8008ae4:	08008b1d 	.word	0x08008b1d
 8008ae8:	08008b2d 	.word	0x08008b2d
 8008aec:	08008b3d 	.word	0x08008b3d
 8008af0:	08008b45 	.word	0x08008b45
 8008af4:	08008b4b 	.word	0x08008b4b
 8008af8:	08008b51 	.word	0x08008b51
 8008afc:	08008b57 	.word	0x08008b57
 8008b00:	08008b15 	.word	0x08008b15
 8008b04:	08008b25 	.word	0x08008b25
 8008b08:	08008b35 	.word	0x08008b35
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
 8008b0c:	f641 6384 	movw	r3, #7812	; 0x1e84
 8008b10:	60fb      	str	r3, [r7, #12]
        break;
 8008b12:	e020      	b.n	8008b56 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 8008b14:	f642 03b1 	movw	r3, #10417	; 0x28b1
 8008b18:	60fb      	str	r3, [r7, #12]
        break;
 8008b1a:	e01c      	b.n	8008b56 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 8008b1c:	f643 5309 	movw	r3, #15625	; 0x3d09
 8008b20:	60fb      	str	r3, [r7, #12]
        break;
 8008b22:	e018      	b.n	8008b56 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 8008b24:	f245 1361 	movw	r3, #20833	; 0x5161
 8008b28:	60fb      	str	r3, [r7, #12]
        break;
 8008b2a:	e014      	b.n	8008b56 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 8008b2c:	f647 2312 	movw	r3, #31250	; 0x7a12
 8008b30:	60fb      	str	r3, [r7, #12]
        break;
 8008b32:	e010      	b.n	8008b56 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 8008b34:	f24a 23c3 	movw	r3, #41667	; 0xa2c3
 8008b38:	60fb      	str	r3, [r7, #12]
        break;
 8008b3a:	e00c      	b.n	8008b56 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 8008b3c:	f24f 4324 	movw	r3, #62500	; 0xf424
 8008b40:	60fb      	str	r3, [r7, #12]
        break;
 8008b42:	e008      	b.n	8008b56 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 8008b44:	4b07      	ldr	r3, [pc, #28]	; (8008b64 <RadioGetLoRaBandwidthInHz+0xa0>)
 8008b46:	60fb      	str	r3, [r7, #12]
        break;
 8008b48:	e005      	b.n	8008b56 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 8008b4a:	4b07      	ldr	r3, [pc, #28]	; (8008b68 <RadioGetLoRaBandwidthInHz+0xa4>)
 8008b4c:	60fb      	str	r3, [r7, #12]
        break;
 8008b4e:	e002      	b.n	8008b56 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 8008b50:	4b06      	ldr	r3, [pc, #24]	; (8008b6c <RadioGetLoRaBandwidthInHz+0xa8>)
 8008b52:	60fb      	str	r3, [r7, #12]
        break;
 8008b54:	bf00      	nop
    }

    return bandwidthInHz;
 8008b56:	68fb      	ldr	r3, [r7, #12]
}
 8008b58:	4618      	mov	r0, r3
 8008b5a:	3714      	adds	r7, #20
 8008b5c:	46bd      	mov	sp, r7
 8008b5e:	bc80      	pop	{r7}
 8008b60:	4770      	bx	lr
 8008b62:	bf00      	nop
 8008b64:	0001e848 	.word	0x0001e848
 8008b68:	0003d090 	.word	0x0003d090
 8008b6c:	0007a120 	.word	0x0007a120

08008b70 <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8008b70:	b480      	push	{r7}
 8008b72:	b083      	sub	sp, #12
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	6078      	str	r0, [r7, #4]
 8008b78:	4608      	mov	r0, r1
 8008b7a:	4611      	mov	r1, r2
 8008b7c:	461a      	mov	r2, r3
 8008b7e:	4603      	mov	r3, r0
 8008b80:	70fb      	strb	r3, [r7, #3]
 8008b82:	460b      	mov	r3, r1
 8008b84:	803b      	strh	r3, [r7, #0]
 8008b86:	4613      	mov	r3, r2
 8008b88:	70bb      	strb	r3, [r7, #2]
    return ( preambleLen << 3 ) +
 8008b8a:	883b      	ldrh	r3, [r7, #0]
 8008b8c:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8008b8e:	78ba      	ldrb	r2, [r7, #2]
 8008b90:	f082 0201 	eor.w	r2, r2, #1
 8008b94:	b2d2      	uxtb	r2, r2
 8008b96:	2a00      	cmp	r2, #0
 8008b98:	d001      	beq.n	8008b9e <RadioGetGfskTimeOnAirNumerator+0x2e>
 8008b9a:	2208      	movs	r2, #8
 8008b9c:	e000      	b.n	8008ba0 <RadioGetGfskTimeOnAirNumerator+0x30>
 8008b9e:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 8008ba0:	4413      	add	r3, r2
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8008ba2:	f103 0218 	add.w	r2, r3, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 8008ba6:	7c3b      	ldrb	r3, [r7, #16]
 8008ba8:	7d39      	ldrb	r1, [r7, #20]
 8008baa:	2900      	cmp	r1, #0
 8008bac:	d001      	beq.n	8008bb2 <RadioGetGfskTimeOnAirNumerator+0x42>
 8008bae:	2102      	movs	r1, #2
 8008bb0:	e000      	b.n	8008bb4 <RadioGetGfskTimeOnAirNumerator+0x44>
 8008bb2:	2100      	movs	r1, #0
 8008bb4:	440b      	add	r3, r1
 8008bb6:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8008bb8:	4413      	add	r3, r2
}
 8008bba:	4618      	mov	r0, r3
 8008bbc:	370c      	adds	r7, #12
 8008bbe:	46bd      	mov	sp, r7
 8008bc0:	bc80      	pop	{r7}
 8008bc2:	4770      	bx	lr

08008bc4 <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8008bc4:	b480      	push	{r7}
 8008bc6:	b08b      	sub	sp, #44	; 0x2c
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	60f8      	str	r0, [r7, #12]
 8008bcc:	60b9      	str	r1, [r7, #8]
 8008bce:	4611      	mov	r1, r2
 8008bd0:	461a      	mov	r2, r3
 8008bd2:	460b      	mov	r3, r1
 8008bd4:	71fb      	strb	r3, [r7, #7]
 8008bd6:	4613      	mov	r3, r2
 8008bd8:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 8008bda:	79fb      	ldrb	r3, [r7, #7]
 8008bdc:	3304      	adds	r3, #4
 8008bde:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 8008be0:	2300      	movs	r3, #0
 8008be2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 8008be6:	68bb      	ldr	r3, [r7, #8]
 8008be8:	2b05      	cmp	r3, #5
 8008bea:	d002      	beq.n	8008bf2 <RadioGetLoRaTimeOnAirNumerator+0x2e>
 8008bec:	68bb      	ldr	r3, [r7, #8]
 8008bee:	2b06      	cmp	r3, #6
 8008bf0:	d104      	bne.n	8008bfc <RadioGetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 8008bf2:	88bb      	ldrh	r3, [r7, #4]
 8008bf4:	2b0b      	cmp	r3, #11
 8008bf6:	d801      	bhi.n	8008bfc <RadioGetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 8008bf8:	230c      	movs	r3, #12
 8008bfa:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d105      	bne.n	8008c0e <RadioGetLoRaTimeOnAirNumerator+0x4a>
 8008c02:	68bb      	ldr	r3, [r7, #8]
 8008c04:	2b0b      	cmp	r3, #11
 8008c06:	d008      	beq.n	8008c1a <RadioGetLoRaTimeOnAirNumerator+0x56>
 8008c08:	68bb      	ldr	r3, [r7, #8]
 8008c0a:	2b0c      	cmp	r3, #12
 8008c0c:	d005      	beq.n	8008c1a <RadioGetLoRaTimeOnAirNumerator+0x56>
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	2b01      	cmp	r3, #1
 8008c12:	d105      	bne.n	8008c20 <RadioGetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8008c14:	68bb      	ldr	r3, [r7, #8]
 8008c16:	2b0c      	cmp	r3, #12
 8008c18:	d102      	bne.n	8008c20 <RadioGetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 8008c1a:	2301      	movs	r3, #1
 8008c1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8008c20:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8008c24:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 8008c26:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008c2a:	2a00      	cmp	r2, #0
 8008c2c:	d001      	beq.n	8008c32 <RadioGetLoRaTimeOnAirNumerator+0x6e>
 8008c2e:	2210      	movs	r2, #16
 8008c30:	e000      	b.n	8008c34 <RadioGetLoRaTimeOnAirNumerator+0x70>
 8008c32:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8008c34:	4413      	add	r3, r2
 8008c36:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 8008c38:	68bb      	ldr	r3, [r7, #8]
 8008c3a:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 8008c3c:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 8008c3e:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8008c42:	2a00      	cmp	r2, #0
 8008c44:	d001      	beq.n	8008c4a <RadioGetLoRaTimeOnAirNumerator+0x86>
 8008c46:	2200      	movs	r2, #0
 8008c48:	e000      	b.n	8008c4c <RadioGetLoRaTimeOnAirNumerator+0x88>
 8008c4a:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 8008c4c:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8008c4e:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 8008c50:	68bb      	ldr	r3, [r7, #8]
 8008c52:	2b06      	cmp	r3, #6
 8008c54:	d803      	bhi.n	8008c5e <RadioGetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 8008c56:	68bb      	ldr	r3, [r7, #8]
 8008c58:	009b      	lsls	r3, r3, #2
 8008c5a:	623b      	str	r3, [r7, #32]
 8008c5c:	e00e      	b.n	8008c7c <RadioGetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 8008c5e:	69fb      	ldr	r3, [r7, #28]
 8008c60:	3308      	adds	r3, #8
 8008c62:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 8008c64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d004      	beq.n	8008c76 <RadioGetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 8008c6c:	68bb      	ldr	r3, [r7, #8]
 8008c6e:	3b02      	subs	r3, #2
 8008c70:	009b      	lsls	r3, r3, #2
 8008c72:	623b      	str	r3, [r7, #32]
 8008c74:	e002      	b.n	8008c7c <RadioGetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 8008c76:	68bb      	ldr	r3, [r7, #8]
 8008c78:	009b      	lsls	r3, r3, #2
 8008c7a:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 8008c7c:	69fb      	ldr	r3, [r7, #28]
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	da01      	bge.n	8008c86 <RadioGetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 8008c82:	2300      	movs	r3, #0
 8008c84:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 8008c86:	69fa      	ldr	r2, [r7, #28]
 8008c88:	6a3b      	ldr	r3, [r7, #32]
 8008c8a:	4413      	add	r3, r2
 8008c8c:	1e5a      	subs	r2, r3, #1
 8008c8e:	6a3b      	ldr	r3, [r7, #32]
 8008c90:	fb92 f3f3 	sdiv	r3, r2, r3
 8008c94:	697a      	ldr	r2, [r7, #20]
 8008c96:	fb03 f202 	mul.w	r2, r3, r2
 8008c9a:	88bb      	ldrh	r3, [r7, #4]
 8008c9c:	4413      	add	r3, r2
    int32_t intermediate =
 8008c9e:	330c      	adds	r3, #12
 8008ca0:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 8008ca2:	68bb      	ldr	r3, [r7, #8]
 8008ca4:	2b06      	cmp	r3, #6
 8008ca6:	d802      	bhi.n	8008cae <RadioGetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 8008ca8:	69bb      	ldr	r3, [r7, #24]
 8008caa:	3302      	adds	r3, #2
 8008cac:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 8008cae:	69bb      	ldr	r3, [r7, #24]
 8008cb0:	009b      	lsls	r3, r3, #2
 8008cb2:	1c5a      	adds	r2, r3, #1
 8008cb4:	68bb      	ldr	r3, [r7, #8]
 8008cb6:	3b02      	subs	r3, #2
 8008cb8:	fa02 f303 	lsl.w	r3, r2, r3
}
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	372c      	adds	r7, #44	; 0x2c
 8008cc0:	46bd      	mov	sp, r7
 8008cc2:	bc80      	pop	{r7}
 8008cc4:	4770      	bx	lr
	...

08008cc8 <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	b08a      	sub	sp, #40	; 0x28
 8008ccc:	af04      	add	r7, sp, #16
 8008cce:	60b9      	str	r1, [r7, #8]
 8008cd0:	607a      	str	r2, [r7, #4]
 8008cd2:	461a      	mov	r2, r3
 8008cd4:	4603      	mov	r3, r0
 8008cd6:	73fb      	strb	r3, [r7, #15]
 8008cd8:	4613      	mov	r3, r2
 8008cda:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 8008cdc:	2300      	movs	r3, #0
 8008cde:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 8008ce0:	2301      	movs	r3, #1
 8008ce2:	613b      	str	r3, [r7, #16]

    switch( modem )
 8008ce4:	7bfb      	ldrb	r3, [r7, #15]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d002      	beq.n	8008cf0 <RadioTimeOnAir+0x28>
 8008cea:	2b01      	cmp	r3, #1
 8008cec:	d017      	beq.n	8008d1e <RadioTimeOnAir+0x56>
                                                                  fixLen, payloadLen, crcOn );
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
        }
        break;
    default:
        break;
 8008cee:	e035      	b.n	8008d5c <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 8008cf0:	f897 0024 	ldrb.w	r0, [r7, #36]	; 0x24
 8008cf4:	8c3a      	ldrh	r2, [r7, #32]
 8008cf6:	7bb9      	ldrb	r1, [r7, #14]
 8008cf8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008cfc:	9301      	str	r3, [sp, #4]
 8008cfe:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008d02:	9300      	str	r3, [sp, #0]
 8008d04:	4603      	mov	r3, r0
 8008d06:	6878      	ldr	r0, [r7, #4]
 8008d08:	f7ff ff32 	bl	8008b70 <RadioGetGfskTimeOnAirNumerator>
 8008d0c:	4603      	mov	r3, r0
 8008d0e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008d12:	fb02 f303 	mul.w	r3, r2, r3
 8008d16:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	613b      	str	r3, [r7, #16]
        break;
 8008d1c:	e01e      	b.n	8008d5c <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 8008d1e:	8c39      	ldrh	r1, [r7, #32]
 8008d20:	7bba      	ldrb	r2, [r7, #14]
 8008d22:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008d26:	9302      	str	r3, [sp, #8]
 8008d28:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008d2c:	9301      	str	r3, [sp, #4]
 8008d2e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008d32:	9300      	str	r3, [sp, #0]
 8008d34:	460b      	mov	r3, r1
 8008d36:	6879      	ldr	r1, [r7, #4]
 8008d38:	68b8      	ldr	r0, [r7, #8]
 8008d3a:	f7ff ff43 	bl	8008bc4 <RadioGetLoRaTimeOnAirNumerator>
 8008d3e:	4603      	mov	r3, r0
 8008d40:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008d44:	fb02 f303 	mul.w	r3, r2, r3
 8008d48:	617b      	str	r3, [r7, #20]
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 8008d4a:	4a0a      	ldr	r2, [pc, #40]	; (8008d74 <RadioTimeOnAir+0xac>)
 8008d4c:	68bb      	ldr	r3, [r7, #8]
 8008d4e:	4413      	add	r3, r2
 8008d50:	781b      	ldrb	r3, [r3, #0]
 8008d52:	4618      	mov	r0, r3
 8008d54:	f7ff feb6 	bl	8008ac4 <RadioGetLoRaBandwidthInHz>
 8008d58:	6138      	str	r0, [r7, #16]
        break;
 8008d5a:	bf00      	nop
    }
    // Perform integral ceil()
    return DIVC( numerator, denominator );
 8008d5c:	697a      	ldr	r2, [r7, #20]
 8008d5e:	693b      	ldr	r3, [r7, #16]
 8008d60:	4413      	add	r3, r2
 8008d62:	1e5a      	subs	r2, r3, #1
 8008d64:	693b      	ldr	r3, [r7, #16]
 8008d66:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	3718      	adds	r7, #24
 8008d6e:	46bd      	mov	sp, r7
 8008d70:	bd80      	pop	{r7, pc}
 8008d72:	bf00      	nop
 8008d74:	0800d0d4 	.word	0x0800d0d4

08008d78 <RadioSend>:

static radio_status_t RadioSend( uint8_t *buffer, uint8_t size )
{
 8008d78:	b580      	push	{r7, lr}
 8008d7a:	b084      	sub	sp, #16
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	6078      	str	r0, [r7, #4]
 8008d80:	460b      	mov	r3, r1
 8008d82:	70fb      	strb	r3, [r7, #3]
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 8008d84:	2300      	movs	r3, #0
 8008d86:	2200      	movs	r2, #0
 8008d88:	f240 2101 	movw	r1, #513	; 0x201
 8008d8c:	f240 2001 	movw	r0, #513	; 0x201
 8008d90:	f001 fd2c 	bl	800a7ec <SUBGRF_SetDioIrqParams>

    /* Set DBG pin */
    DBG_GPIO_RADIO_TX( SET );

    /* Set RF switch */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8008d94:	4b70      	ldr	r3, [pc, #448]	; (8008f58 <RadioSend+0x1e0>)
 8008d96:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8008d9a:	2101      	movs	r1, #1
 8008d9c:	4618      	mov	r0, r3
 8008d9e:	f002 f9c9 	bl	800b134 <SUBGRF_SetSwitch>
    /* WORKAROUND - Modulation Quality with 500 kHz LoRaTM Bandwidth*/
    /* RegTxModulation = @address 0x0889 */
    if( ( SubgRf.Modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 8008da2:	4b6d      	ldr	r3, [pc, #436]	; (8008f58 <RadioSend+0x1e0>)
 8008da4:	781b      	ldrb	r3, [r3, #0]
 8008da6:	2b01      	cmp	r3, #1
 8008da8:	d112      	bne.n	8008dd0 <RadioSend+0x58>
 8008daa:	4b6b      	ldr	r3, [pc, #428]	; (8008f58 <RadioSend+0x1e0>)
 8008dac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008db0:	2b06      	cmp	r3, #6
 8008db2:	d10d      	bne.n	8008dd0 <RadioSend+0x58>
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 8008db4:	f640 0089 	movw	r0, #2185	; 0x889
 8008db8:	f002 f8dc 	bl	800af74 <SUBGRF_ReadRegister>
 8008dbc:	4603      	mov	r3, r0
 8008dbe:	f023 0304 	bic.w	r3, r3, #4
 8008dc2:	b2db      	uxtb	r3, r3
 8008dc4:	4619      	mov	r1, r3
 8008dc6:	f640 0089 	movw	r0, #2185	; 0x889
 8008dca:	f002 f8bf 	bl	800af4c <SUBGRF_WriteRegister>
 8008dce:	e00c      	b.n	8008dea <RadioSend+0x72>
    }
    else
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 8008dd0:	f640 0089 	movw	r0, #2185	; 0x889
 8008dd4:	f002 f8ce 	bl	800af74 <SUBGRF_ReadRegister>
 8008dd8:	4603      	mov	r3, r0
 8008dda:	f043 0304 	orr.w	r3, r3, #4
 8008dde:	b2db      	uxtb	r3, r3
 8008de0:	4619      	mov	r1, r3
 8008de2:	f640 0089 	movw	r0, #2185	; 0x889
 8008de6:	f002 f8b1 	bl	800af4c <SUBGRF_WriteRegister>
    }
    else
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    {
        /* WORKAROUND END */
        switch( SubgRf.Modem )
 8008dea:	4b5b      	ldr	r3, [pc, #364]	; (8008f58 <RadioSend+0x1e0>)
 8008dec:	781b      	ldrb	r3, [r3, #0]
 8008dee:	2b04      	cmp	r3, #4
 8008df0:	f200 80a2 	bhi.w	8008f38 <RadioSend+0x1c0>
 8008df4:	a201      	add	r2, pc, #4	; (adr r2, 8008dfc <RadioSend+0x84>)
 8008df6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dfa:	bf00      	nop
 8008dfc:	08008e2b 	.word	0x08008e2b
 8008e00:	08008e11 	.word	0x08008e11
 8008e04:	08008e2b 	.word	0x08008e2b
 8008e08:	08008e81 	.word	0x08008e81
 8008e0c:	08008ea1 	.word	0x08008ea1
        {
        case MODEM_LORA:
        {
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 8008e10:	4a51      	ldr	r2, [pc, #324]	; (8008f58 <RadioSend+0x1e0>)
 8008e12:	78fb      	ldrb	r3, [r7, #3]
 8008e14:	77d3      	strb	r3, [r2, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008e16:	4851      	ldr	r0, [pc, #324]	; (8008f5c <RadioSend+0x1e4>)
 8008e18:	f001 ff50 	bl	800acbc <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8008e1c:	78fb      	ldrb	r3, [r7, #3]
 8008e1e:	2200      	movs	r2, #0
 8008e20:	4619      	mov	r1, r3
 8008e22:	6878      	ldr	r0, [r7, #4]
 8008e24:	f001 fa00 	bl	800a228 <SUBGRF_SendPayload>
            break;
 8008e28:	e087      	b.n	8008f3a <RadioSend+0x1c2>
        }
        case MODEM_MSK:
        case MODEM_FSK:
        {
            if ( 1UL == RFW_Is_Init( ) )
 8008e2a:	f002 fb7c 	bl	800b526 <RFW_Is_Init>
 8008e2e:	4603      	mov	r3, r0
 8008e30:	2b01      	cmp	r3, #1
 8008e32:	d118      	bne.n	8008e66 <RadioSend+0xee>
            {
                uint8_t outsize;
                if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 8008e34:	f107 020d 	add.w	r2, r7, #13
 8008e38:	78fb      	ldrb	r3, [r7, #3]
 8008e3a:	4619      	mov	r1, r3
 8008e3c:	6878      	ldr	r0, [r7, #4]
 8008e3e:	f002 fb8a 	bl	800b556 <RFW_TransmitInit>
 8008e42:	4603      	mov	r3, r0
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d10c      	bne.n	8008e62 <RadioSend+0xea>
                {
                    SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 8008e48:	7b7a      	ldrb	r2, [r7, #13]
 8008e4a:	4b43      	ldr	r3, [pc, #268]	; (8008f58 <RadioSend+0x1e0>)
 8008e4c:	759a      	strb	r2, [r3, #22]
                    SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008e4e:	4843      	ldr	r0, [pc, #268]	; (8008f5c <RadioSend+0x1e4>)
 8008e50:	f001 ff34 	bl	800acbc <SUBGRF_SetPacketParams>
                    SUBGRF_SendPayload( buffer, outsize, 0 );
 8008e54:	7b7b      	ldrb	r3, [r7, #13]
 8008e56:	2200      	movs	r2, #0
 8008e58:	4619      	mov	r1, r3
 8008e5a:	6878      	ldr	r0, [r7, #4]
 8008e5c:	f001 f9e4 	bl	800a228 <SUBGRF_SendPayload>
            {
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
                SUBGRF_SendPayload( buffer, size, 0 );
            }
            break;
 8008e60:	e06b      	b.n	8008f3a <RadioSend+0x1c2>
                    return RADIO_STATUS_ERROR;
 8008e62:	2303      	movs	r3, #3
 8008e64:	e073      	b.n	8008f4e <RadioSend+0x1d6>
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 8008e66:	4a3c      	ldr	r2, [pc, #240]	; (8008f58 <RadioSend+0x1e0>)
 8008e68:	78fb      	ldrb	r3, [r7, #3]
 8008e6a:	7593      	strb	r3, [r2, #22]
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008e6c:	483b      	ldr	r0, [pc, #236]	; (8008f5c <RadioSend+0x1e4>)
 8008e6e:	f001 ff25 	bl	800acbc <SUBGRF_SetPacketParams>
                SUBGRF_SendPayload( buffer, size, 0 );
 8008e72:	78fb      	ldrb	r3, [r7, #3]
 8008e74:	2200      	movs	r2, #0
 8008e76:	4619      	mov	r1, r3
 8008e78:	6878      	ldr	r0, [r7, #4]
 8008e7a:	f001 f9d5 	bl	800a228 <SUBGRF_SendPayload>
            break;
 8008e7e:	e05c      	b.n	8008f3a <RadioSend+0x1c2>
        }
        case MODEM_BPSK:
        {
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8008e80:	4b35      	ldr	r3, [pc, #212]	; (8008f58 <RadioSend+0x1e0>)
 8008e82:	2202      	movs	r2, #2
 8008e84:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 8008e86:	4a34      	ldr	r2, [pc, #208]	; (8008f58 <RadioSend+0x1e0>)
 8008e88:	78fb      	ldrb	r3, [r7, #3]
 8008e8a:	7693      	strb	r3, [r2, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008e8c:	4833      	ldr	r0, [pc, #204]	; (8008f5c <RadioSend+0x1e4>)
 8008e8e:	f001 ff15 	bl	800acbc <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8008e92:	78fb      	ldrb	r3, [r7, #3]
 8008e94:	2200      	movs	r2, #0
 8008e96:	4619      	mov	r1, r3
 8008e98:	6878      	ldr	r0, [r7, #4]
 8008e9a:	f001 f9c5 	bl	800a228 <SUBGRF_SendPayload>
            break;
 8008e9e:	e04c      	b.n	8008f3a <RadioSend+0x1c2>
        case MODEM_SIGFOX_TX:
        {
            /* from bpsk to dbpsk */
            /* first 1 bit duplicated */
            /* RadioBuffer is 1 bytes more */
            payload_integration( RadioBuffer, buffer, size );
 8008ea0:	78fb      	ldrb	r3, [r7, #3]
 8008ea2:	461a      	mov	r2, r3
 8008ea4:	6879      	ldr	r1, [r7, #4]
 8008ea6:	482e      	ldr	r0, [pc, #184]	; (8008f60 <RadioSend+0x1e8>)
 8008ea8:	f000 fc98 	bl	80097dc <payload_integration>

            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8008eac:	4b2a      	ldr	r3, [pc, #168]	; (8008f58 <RadioSend+0x1e0>)
 8008eae:	2202      	movs	r2, #2
 8008eb0:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 8008eb2:	78fb      	ldrb	r3, [r7, #3]
 8008eb4:	3301      	adds	r3, #1
 8008eb6:	b2da      	uxtb	r2, r3
 8008eb8:	4b27      	ldr	r3, [pc, #156]	; (8008f58 <RadioSend+0x1e0>)
 8008eba:	769a      	strb	r2, [r3, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008ebc:	4827      	ldr	r0, [pc, #156]	; (8008f5c <RadioSend+0x1e4>)
 8008ebe:	f001 fefd 	bl	800acbc <SUBGRF_SetPacketParams>

            RadioWrite( SUBGHZ_RAM_RAMPUPL, 0 ); // clean start-up LSB
 8008ec2:	2100      	movs	r1, #0
 8008ec4:	20f1      	movs	r0, #241	; 0xf1
 8008ec6:	f000 f964 	bl	8009192 <RadioWrite>
            RadioWrite( SUBGHZ_RAM_RAMPUPH, 0 ); // clean start-up MSB
 8008eca:	2100      	movs	r1, #0
 8008ecc:	20f0      	movs	r0, #240	; 0xf0
 8008ece:	f000 f960 	bl	8009192 <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 8008ed2:	4b21      	ldr	r3, [pc, #132]	; (8008f58 <RadioSend+0x1e0>)
 8008ed4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008ed6:	2b64      	cmp	r3, #100	; 0x64
 8008ed8:	d108      	bne.n	8008eec <RadioSend+0x174>
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0x70 ); // clean end of frame LSB
 8008eda:	2170      	movs	r1, #112	; 0x70
 8008edc:	20f3      	movs	r0, #243	; 0xf3
 8008ede:	f000 f958 	bl	8009192 <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x1D ); // clean end of frame MSB
 8008ee2:	211d      	movs	r1, #29
 8008ee4:	20f2      	movs	r0, #242	; 0xf2
 8008ee6:	f000 f954 	bl	8009192 <RadioWrite>
 8008eea:	e007      	b.n	8008efc <RadioSend+0x184>
            }
            else // 600 bps
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0xE1 ); // clean end of frame LSB
 8008eec:	21e1      	movs	r1, #225	; 0xe1
 8008eee:	20f3      	movs	r0, #243	; 0xf3
 8008ef0:	f000 f94f 	bl	8009192 <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x04 ); // clean end of frame MSB
 8008ef4:	2104      	movs	r1, #4
 8008ef6:	20f2      	movs	r0, #242	; 0xf2
 8008ef8:	f000 f94b 	bl	8009192 <RadioWrite>
            }

            uint16_t bitNum = ( size * 8 ) + 2;
 8008efc:	78fb      	ldrb	r3, [r7, #3]
 8008efe:	b29b      	uxth	r3, r3
 8008f00:	00db      	lsls	r3, r3, #3
 8008f02:	b29b      	uxth	r3, r3
 8008f04:	3302      	adds	r3, #2
 8008f06:	81fb      	strh	r3, [r7, #14]
            RadioWrite( SUBGHZ_RAM_FRAMELIMH, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 8008f08:	89fb      	ldrh	r3, [r7, #14]
 8008f0a:	0a1b      	lsrs	r3, r3, #8
 8008f0c:	b29b      	uxth	r3, r3
 8008f0e:	b2db      	uxtb	r3, r3
 8008f10:	4619      	mov	r1, r3
 8008f12:	20f4      	movs	r0, #244	; 0xf4
 8008f14:	f000 f93d 	bl	8009192 <RadioWrite>
            RadioWrite( SUBGHZ_RAM_FRAMELIML, bitNum & 0x00FF );             // limit frame
 8008f18:	89fb      	ldrh	r3, [r7, #14]
 8008f1a:	b2db      	uxtb	r3, r3
 8008f1c:	4619      	mov	r1, r3
 8008f1e:	20f5      	movs	r0, #245	; 0xf5
 8008f20:	f000 f937 	bl	8009192 <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size + 1, 0xFFFFFF );
 8008f24:	78fb      	ldrb	r3, [r7, #3]
 8008f26:	3301      	adds	r3, #1
 8008f28:	b2db      	uxtb	r3, r3
 8008f2a:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8008f2e:	4619      	mov	r1, r3
 8008f30:	480b      	ldr	r0, [pc, #44]	; (8008f60 <RadioSend+0x1e8>)
 8008f32:	f001 f979 	bl	800a228 <SUBGRF_SendPayload>
            break;
 8008f36:	e000      	b.n	8008f3a <RadioSend+0x1c2>
        }
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 8008f38:	bf00      	nop
        }

        TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 8008f3a:	4b07      	ldr	r3, [pc, #28]	; (8008f58 <RadioSend+0x1e0>)
 8008f3c:	685b      	ldr	r3, [r3, #4]
 8008f3e:	4619      	mov	r1, r3
 8008f40:	4808      	ldr	r0, [pc, #32]	; (8008f64 <RadioSend+0x1ec>)
 8008f42:	f002 fdbb 	bl	800babc <UTIL_TIMER_SetPeriod>
        TimerStart( &TxTimeoutTimer );
 8008f46:	4807      	ldr	r0, [pc, #28]	; (8008f64 <RadioSend+0x1ec>)
 8008f48:	f002 fcda 	bl	800b900 <UTIL_TIMER_Start>
    }

    return RADIO_STATUS_OK;
 8008f4c:	2300      	movs	r3, #0
}
 8008f4e:	4618      	mov	r0, r3
 8008f50:	3710      	adds	r7, #16
 8008f52:	46bd      	mov	sp, r7
 8008f54:	bd80      	pop	{r7, pc}
 8008f56:	bf00      	nop
 8008f58:	20000a64 	.word	0x20000a64
 8008f5c:	20000a72 	.word	0x20000a72
 8008f60:	20000960 	.word	0x20000960
 8008f64:	20000ac0 	.word	0x20000ac0

08008f68 <RadioSleep>:

static void RadioSleep( void )
{
 8008f68:	b580      	push	{r7, lr}
 8008f6a:	b082      	sub	sp, #8
 8008f6c:	af00      	add	r7, sp, #0
    SleepParams_t params = { 0 };
 8008f6e:	2300      	movs	r3, #0
 8008f70:	713b      	strb	r3, [r7, #4]

    params.Fields.WarmStart = 1;
 8008f72:	793b      	ldrb	r3, [r7, #4]
 8008f74:	f043 0304 	orr.w	r3, r3, #4
 8008f78:	713b      	strb	r3, [r7, #4]
    SUBGRF_SetSleep( params );
 8008f7a:	7938      	ldrb	r0, [r7, #4]
 8008f7c:	f001 fa30 	bl	800a3e0 <SUBGRF_SetSleep>

    RADIO_DELAY_MS( 2 );
 8008f80:	2002      	movs	r0, #2
 8008f82:	f7f9 fe53 	bl	8002c2c <HAL_Delay>
}
 8008f86:	bf00      	nop
 8008f88:	3708      	adds	r7, #8
 8008f8a:	46bd      	mov	sp, r7
 8008f8c:	bd80      	pop	{r7, pc}

08008f8e <RadioStandby>:

static void RadioStandby( void )
{
 8008f8e:	b580      	push	{r7, lr}
 8008f90:	af00      	add	r7, sp, #0
    SUBGRF_SetStandby( STDBY_RC );
 8008f92:	2000      	movs	r0, #0
 8008f94:	f001 fa56 	bl	800a444 <SUBGRF_SetStandby>
}
 8008f98:	bf00      	nop
 8008f9a:	bd80      	pop	{r7, pc}

08008f9c <RadioRx>:

static void RadioRx( uint32_t timeout )
{
 8008f9c:	b580      	push	{r7, lr}
 8008f9e:	b082      	sub	sp, #8
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init( ) )
 8008fa4:	f002 fabf 	bl	800b526 <RFW_Is_Init>
 8008fa8:	4603      	mov	r3, r0
 8008faa:	2b01      	cmp	r3, #1
 8008fac:	d102      	bne.n	8008fb4 <RadioRx+0x18>
    {
        RFW_ReceiveInit( );
 8008fae:	f002 fae2 	bl	800b576 <RFW_ReceiveInit>
 8008fb2:	e007      	b.n	8008fc4 <RadioRx+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8008fb4:	2300      	movs	r3, #0
 8008fb6:	2200      	movs	r2, #0
 8008fb8:	f240 2162 	movw	r1, #610	; 0x262
 8008fbc:	f240 2062 	movw	r0, #610	; 0x262
 8008fc0:	f001 fc14 	bl	800a7ec <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }

    if( timeout != 0 )
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d006      	beq.n	8008fd8 <RadioRx+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 8008fca:	6879      	ldr	r1, [r7, #4]
 8008fcc:	4811      	ldr	r0, [pc, #68]	; (8009014 <RadioRx+0x78>)
 8008fce:	f002 fd75 	bl	800babc <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8008fd2:	4810      	ldr	r0, [pc, #64]	; (8009014 <RadioRx+0x78>)
 8008fd4:	f002 fc94 	bl	800b900 <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8008fd8:	4b0f      	ldr	r3, [pc, #60]	; (8009018 <RadioRx+0x7c>)
 8008fda:	2200      	movs	r2, #0
 8008fdc:	659a      	str	r2, [r3, #88]	; 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8008fde:	4b0e      	ldr	r3, [pc, #56]	; (8009018 <RadioRx+0x7c>)
 8008fe0:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8008fe4:	2100      	movs	r1, #0
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	f002 f8a4 	bl	800b134 <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 8008fec:	4b0a      	ldr	r3, [pc, #40]	; (8009018 <RadioRx+0x7c>)
 8008fee:	785b      	ldrb	r3, [r3, #1]
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d004      	beq.n	8008ffe <RadioRx+0x62>
    {
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8008ff4:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8008ff8:	f001 fa60 	bl	800a4bc <SUBGRF_SetRx>
    }
    else
    {
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
    }
}
 8008ffc:	e005      	b.n	800900a <RadioRx+0x6e>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 8008ffe:	4b06      	ldr	r3, [pc, #24]	; (8009018 <RadioRx+0x7c>)
 8009000:	689b      	ldr	r3, [r3, #8]
 8009002:	019b      	lsls	r3, r3, #6
 8009004:	4618      	mov	r0, r3
 8009006:	f001 fa59 	bl	800a4bc <SUBGRF_SetRx>
}
 800900a:	bf00      	nop
 800900c:	3708      	adds	r7, #8
 800900e:	46bd      	mov	sp, r7
 8009010:	bd80      	pop	{r7, pc}
 8009012:	bf00      	nop
 8009014:	20000ad8 	.word	0x20000ad8
 8009018:	20000a64 	.word	0x20000a64

0800901c <RadioRxBoosted>:

static void RadioRxBoosted( uint32_t timeout )
{
 800901c:	b580      	push	{r7, lr}
 800901e:	b082      	sub	sp, #8
 8009020:	af00      	add	r7, sp, #0
 8009022:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init() )
 8009024:	f002 fa7f 	bl	800b526 <RFW_Is_Init>
 8009028:	4603      	mov	r3, r0
 800902a:	2b01      	cmp	r3, #1
 800902c:	d102      	bne.n	8009034 <RadioRxBoosted+0x18>
    {
        RFW_ReceiveInit();
 800902e:	f002 faa2 	bl	800b576 <RFW_ReceiveInit>
 8009032:	e007      	b.n	8009044 <RadioRxBoosted+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8009034:	2300      	movs	r3, #0
 8009036:	2200      	movs	r2, #0
 8009038:	f240 2162 	movw	r1, #610	; 0x262
 800903c:	f240 2062 	movw	r0, #610	; 0x262
 8009040:	f001 fbd4 	bl	800a7ec <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }
    if( timeout != 0 )
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	2b00      	cmp	r3, #0
 8009048:	d006      	beq.n	8009058 <RadioRxBoosted+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 800904a:	6879      	ldr	r1, [r7, #4]
 800904c:	4811      	ldr	r0, [pc, #68]	; (8009094 <RadioRxBoosted+0x78>)
 800904e:	f002 fd35 	bl	800babc <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8009052:	4810      	ldr	r0, [pc, #64]	; (8009094 <RadioRxBoosted+0x78>)
 8009054:	f002 fc54 	bl	800b900 <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8009058:	4b0f      	ldr	r3, [pc, #60]	; (8009098 <RadioRxBoosted+0x7c>)
 800905a:	2200      	movs	r2, #0
 800905c:	659a      	str	r2, [r3, #88]	; 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 800905e:	4b0e      	ldr	r3, [pc, #56]	; (8009098 <RadioRxBoosted+0x7c>)
 8009060:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8009064:	2100      	movs	r1, #0
 8009066:	4618      	mov	r0, r3
 8009068:	f002 f864 	bl	800b134 <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 800906c:	4b0a      	ldr	r3, [pc, #40]	; (8009098 <RadioRxBoosted+0x7c>)
 800906e:	785b      	ldrb	r3, [r3, #1]
 8009070:	2b00      	cmp	r3, #0
 8009072:	d004      	beq.n	800907e <RadioRxBoosted+0x62>
    {
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 8009074:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8009078:	f001 fa40 	bl	800a4fc <SUBGRF_SetRxBoosted>
    }
    else
    {
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
    }
}
 800907c:	e005      	b.n	800908a <RadioRxBoosted+0x6e>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 800907e:	4b06      	ldr	r3, [pc, #24]	; (8009098 <RadioRxBoosted+0x7c>)
 8009080:	689b      	ldr	r3, [r3, #8]
 8009082:	019b      	lsls	r3, r3, #6
 8009084:	4618      	mov	r0, r3
 8009086:	f001 fa39 	bl	800a4fc <SUBGRF_SetRxBoosted>
}
 800908a:	bf00      	nop
 800908c:	3708      	adds	r7, #8
 800908e:	46bd      	mov	sp, r7
 8009090:	bd80      	pop	{r7, pc}
 8009092:	bf00      	nop
 8009094:	20000ad8 	.word	0x20000ad8
 8009098:	20000a64 	.word	0x20000a64

0800909c <RadioSetRxDutyCycle>:

static void RadioSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 800909c:	b580      	push	{r7, lr}
 800909e:	b082      	sub	sp, #8
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	6078      	str	r0, [r7, #4]
 80090a4:	6039      	str	r1, [r7, #0]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 2 * rxTime + sleepTime;
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	005a      	lsls	r2, r3, #1
 80090aa:	683b      	ldr	r3, [r7, #0]
 80090ac:	4413      	add	r3, r2
 80090ae:	4a0c      	ldr	r2, [pc, #48]	; (80090e0 <RadioSetRxDutyCycle+0x44>)
 80090b0:	6593      	str	r3, [r2, #88]	; 0x58
    /*Enable also the IRQ_PREAMBLE_DETECTED*/
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 80090b2:	2300      	movs	r3, #0
 80090b4:	2200      	movs	r2, #0
 80090b6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80090ba:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80090be:	f001 fb95 	bl	800a7ec <SUBGRF_SetDioIrqParams>
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 80090c2:	4b07      	ldr	r3, [pc, #28]	; (80090e0 <RadioSetRxDutyCycle+0x44>)
 80090c4:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80090c8:	2100      	movs	r1, #0
 80090ca:	4618      	mov	r0, r3
 80090cc:	f002 f832 	bl	800b134 <SUBGRF_SetSwitch>
    /* Start Rx DutyCycle*/
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 80090d0:	6839      	ldr	r1, [r7, #0]
 80090d2:	6878      	ldr	r0, [r7, #4]
 80090d4:	f001 fa36 	bl	800a544 <SUBGRF_SetRxDutyCycle>
}
 80090d8:	bf00      	nop
 80090da:	3708      	adds	r7, #8
 80090dc:	46bd      	mov	sp, r7
 80090de:	bd80      	pop	{r7, pc}
 80090e0:	20000a64 	.word	0x20000a64

080090e4 <RadioStartCad>:

static void RadioStartCad( void )
{
 80090e4:	b580      	push	{r7, lr}
 80090e6:	af00      	add	r7, sp, #0
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 80090e8:	4b09      	ldr	r3, [pc, #36]	; (8009110 <RadioStartCad+0x2c>)
 80090ea:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80090ee:	2100      	movs	r1, #0
 80090f0:	4618      	mov	r0, r3
 80090f2:	f002 f81f 	bl	800b134 <SUBGRF_SetSwitch>

    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 80090f6:	2300      	movs	r3, #0
 80090f8:	2200      	movs	r2, #0
 80090fa:	f44f 71c0 	mov.w	r1, #384	; 0x180
 80090fe:	f44f 70c0 	mov.w	r0, #384	; 0x180
 8009102:	f001 fb73 	bl	800a7ec <SUBGRF_SetDioIrqParams>
                            IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );
    SUBGRF_SetCad( );
 8009106:	f001 fa49 	bl	800a59c <SUBGRF_SetCad>
}
 800910a:	bf00      	nop
 800910c:	bd80      	pop	{r7, pc}
 800910e:	bf00      	nop
 8009110:	20000a64 	.word	0x20000a64

08009114 <RadioSetTxContinuousWave>:

static void RadioSetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 8009114:	b580      	push	{r7, lr}
 8009116:	b084      	sub	sp, #16
 8009118:	af00      	add	r7, sp, #0
 800911a:	6078      	str	r0, [r7, #4]
 800911c:	460b      	mov	r3, r1
 800911e:	70fb      	strb	r3, [r7, #3]
 8009120:	4613      	mov	r3, r2
 8009122:	803b      	strh	r3, [r7, #0]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    uint32_t timeout = ( uint32_t )time * 1000;
 8009124:	883b      	ldrh	r3, [r7, #0]
 8009126:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800912a:	fb02 f303 	mul.w	r3, r2, r3
 800912e:	60fb      	str	r3, [r7, #12]
    uint8_t antswitchpow;

    SUBGRF_SetRfFrequency( freq );
 8009130:	6878      	ldr	r0, [r7, #4]
 8009132:	f001 fbb7 	bl	800a8a4 <SUBGRF_SetRfFrequency>

    antswitchpow = SUBGRF_SetRfTxPower( power );
 8009136:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800913a:	4618      	mov	r0, r3
 800913c:	f002 f822 	bl	800b184 <SUBGRF_SetRfTxPower>
 8009140:	4603      	mov	r3, r0
 8009142:	72fb      	strb	r3, [r7, #11]

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8009144:	210e      	movs	r1, #14
 8009146:	f640 101f 	movw	r0, #2335	; 0x91f
 800914a:	f001 feff 	bl	800af4c <SUBGRF_WriteRegister>

    /* Set RF switch */
    SUBGRF_SetSwitch( antswitchpow, RFSWITCH_TX );
 800914e:	7afb      	ldrb	r3, [r7, #11]
 8009150:	2101      	movs	r1, #1
 8009152:	4618      	mov	r0, r3
 8009154:	f001 ffee 	bl	800b134 <SUBGRF_SetSwitch>

    SUBGRF_SetTxContinuousWave( );
 8009158:	f001 fa2e 	bl	800a5b8 <SUBGRF_SetTxContinuousWave>

    TimerSetValue( &TxTimeoutTimer, timeout );
 800915c:	68f9      	ldr	r1, [r7, #12]
 800915e:	4805      	ldr	r0, [pc, #20]	; (8009174 <RadioSetTxContinuousWave+0x60>)
 8009160:	f002 fcac 	bl	800babc <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 8009164:	4803      	ldr	r0, [pc, #12]	; (8009174 <RadioSetTxContinuousWave+0x60>)
 8009166:	f002 fbcb 	bl	800b900 <UTIL_TIMER_Start>
}
 800916a:	bf00      	nop
 800916c:	3710      	adds	r7, #16
 800916e:	46bd      	mov	sp, r7
 8009170:	bd80      	pop	{r7, pc}
 8009172:	bf00      	nop
 8009174:	20000ac0 	.word	0x20000ac0

08009178 <RadioRssi>:

static int16_t RadioRssi( RadioModems_t modem )
{
 8009178:	b580      	push	{r7, lr}
 800917a:	b082      	sub	sp, #8
 800917c:	af00      	add	r7, sp, #0
 800917e:	4603      	mov	r3, r0
 8009180:	71fb      	strb	r3, [r7, #7]
    return SUBGRF_GetRssiInst( );
 8009182:	f001 fe50 	bl	800ae26 <SUBGRF_GetRssiInst>
 8009186:	4603      	mov	r3, r0
 8009188:	b21b      	sxth	r3, r3
}
 800918a:	4618      	mov	r0, r3
 800918c:	3708      	adds	r7, #8
 800918e:	46bd      	mov	sp, r7
 8009190:	bd80      	pop	{r7, pc}

08009192 <RadioWrite>:

static void RadioWrite( uint16_t addr, uint8_t data )
{
 8009192:	b580      	push	{r7, lr}
 8009194:	b082      	sub	sp, #8
 8009196:	af00      	add	r7, sp, #0
 8009198:	4603      	mov	r3, r0
 800919a:	460a      	mov	r2, r1
 800919c:	80fb      	strh	r3, [r7, #6]
 800919e:	4613      	mov	r3, r2
 80091a0:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegister( addr, data );
 80091a2:	797a      	ldrb	r2, [r7, #5]
 80091a4:	88fb      	ldrh	r3, [r7, #6]
 80091a6:	4611      	mov	r1, r2
 80091a8:	4618      	mov	r0, r3
 80091aa:	f001 fecf 	bl	800af4c <SUBGRF_WriteRegister>
}
 80091ae:	bf00      	nop
 80091b0:	3708      	adds	r7, #8
 80091b2:	46bd      	mov	sp, r7
 80091b4:	bd80      	pop	{r7, pc}

080091b6 <RadioRead>:

static uint8_t RadioRead( uint16_t addr )
{
 80091b6:	b580      	push	{r7, lr}
 80091b8:	b082      	sub	sp, #8
 80091ba:	af00      	add	r7, sp, #0
 80091bc:	4603      	mov	r3, r0
 80091be:	80fb      	strh	r3, [r7, #6]
    return SUBGRF_ReadRegister( addr );
 80091c0:	88fb      	ldrh	r3, [r7, #6]
 80091c2:	4618      	mov	r0, r3
 80091c4:	f001 fed6 	bl	800af74 <SUBGRF_ReadRegister>
 80091c8:	4603      	mov	r3, r0
}
 80091ca:	4618      	mov	r0, r3
 80091cc:	3708      	adds	r7, #8
 80091ce:	46bd      	mov	sp, r7
 80091d0:	bd80      	pop	{r7, pc}

080091d2 <RadioWriteRegisters>:

static void RadioWriteRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 80091d2:	b580      	push	{r7, lr}
 80091d4:	b082      	sub	sp, #8
 80091d6:	af00      	add	r7, sp, #0
 80091d8:	4603      	mov	r3, r0
 80091da:	6039      	str	r1, [r7, #0]
 80091dc:	80fb      	strh	r3, [r7, #6]
 80091de:	4613      	mov	r3, r2
 80091e0:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegisters( addr, buffer, size );
 80091e2:	797b      	ldrb	r3, [r7, #5]
 80091e4:	b29a      	uxth	r2, r3
 80091e6:	88fb      	ldrh	r3, [r7, #6]
 80091e8:	6839      	ldr	r1, [r7, #0]
 80091ea:	4618      	mov	r0, r3
 80091ec:	f001 fed6 	bl	800af9c <SUBGRF_WriteRegisters>
}
 80091f0:	bf00      	nop
 80091f2:	3708      	adds	r7, #8
 80091f4:	46bd      	mov	sp, r7
 80091f6:	bd80      	pop	{r7, pc}

080091f8 <RadioReadRegisters>:

static void RadioReadRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 80091f8:	b580      	push	{r7, lr}
 80091fa:	b082      	sub	sp, #8
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	4603      	mov	r3, r0
 8009200:	6039      	str	r1, [r7, #0]
 8009202:	80fb      	strh	r3, [r7, #6]
 8009204:	4613      	mov	r3, r2
 8009206:	717b      	strb	r3, [r7, #5]
    SUBGRF_ReadRegisters( addr, buffer, size );
 8009208:	797b      	ldrb	r3, [r7, #5]
 800920a:	b29a      	uxth	r2, r3
 800920c:	88fb      	ldrh	r3, [r7, #6]
 800920e:	6839      	ldr	r1, [r7, #0]
 8009210:	4618      	mov	r0, r3
 8009212:	f001 fee5 	bl	800afe0 <SUBGRF_ReadRegisters>
}
 8009216:	bf00      	nop
 8009218:	3708      	adds	r7, #8
 800921a:	46bd      	mov	sp, r7
 800921c:	bd80      	pop	{r7, pc}
	...

08009220 <RadioSetMaxPayloadLength>:

static void RadioSetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 8009220:	b580      	push	{r7, lr}
 8009222:	b082      	sub	sp, #8
 8009224:	af00      	add	r7, sp, #0
 8009226:	4603      	mov	r3, r0
 8009228:	460a      	mov	r2, r1
 800922a:	71fb      	strb	r3, [r7, #7]
 800922c:	4613      	mov	r3, r2
 800922e:	71bb      	strb	r3, [r7, #6]
    if( modem == MODEM_LORA )
 8009230:	79fb      	ldrb	r3, [r7, #7]
 8009232:	2b01      	cmp	r3, #1
 8009234:	d10a      	bne.n	800924c <RadioSetMaxPayloadLength+0x2c>
    {
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 8009236:	4a0e      	ldr	r2, [pc, #56]	; (8009270 <RadioSetMaxPayloadLength+0x50>)
 8009238:	79bb      	ldrb	r3, [r7, #6]
 800923a:	7013      	strb	r3, [r2, #0]
 800923c:	4b0c      	ldr	r3, [pc, #48]	; (8009270 <RadioSetMaxPayloadLength+0x50>)
 800923e:	781a      	ldrb	r2, [r3, #0]
 8009240:	4b0c      	ldr	r3, [pc, #48]	; (8009274 <RadioSetMaxPayloadLength+0x54>)
 8009242:	77da      	strb	r2, [r3, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8009244:	480c      	ldr	r0, [pc, #48]	; (8009278 <RadioSetMaxPayloadLength+0x58>)
 8009246:	f001 fd39 	bl	800acbc <SUBGRF_SetPacketParams>
        {
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
        }
    }
}
 800924a:	e00d      	b.n	8009268 <RadioSetMaxPayloadLength+0x48>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 800924c:	4b09      	ldr	r3, [pc, #36]	; (8009274 <RadioSetMaxPayloadLength+0x54>)
 800924e:	7d5b      	ldrb	r3, [r3, #21]
 8009250:	2b01      	cmp	r3, #1
 8009252:	d109      	bne.n	8009268 <RadioSetMaxPayloadLength+0x48>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 8009254:	4a06      	ldr	r2, [pc, #24]	; (8009270 <RadioSetMaxPayloadLength+0x50>)
 8009256:	79bb      	ldrb	r3, [r7, #6]
 8009258:	7013      	strb	r3, [r2, #0]
 800925a:	4b05      	ldr	r3, [pc, #20]	; (8009270 <RadioSetMaxPayloadLength+0x50>)
 800925c:	781a      	ldrb	r2, [r3, #0]
 800925e:	4b05      	ldr	r3, [pc, #20]	; (8009274 <RadioSetMaxPayloadLength+0x54>)
 8009260:	759a      	strb	r2, [r3, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8009262:	4805      	ldr	r0, [pc, #20]	; (8009278 <RadioSetMaxPayloadLength+0x58>)
 8009264:	f001 fd2a 	bl	800acbc <SUBGRF_SetPacketParams>
}
 8009268:	bf00      	nop
 800926a:	3708      	adds	r7, #8
 800926c:	46bd      	mov	sp, r7
 800926e:	bd80      	pop	{r7, pc}
 8009270:	20000015 	.word	0x20000015
 8009274:	20000a64 	.word	0x20000a64
 8009278:	20000a72 	.word	0x20000a72

0800927c <RadioSetPublicNetwork>:

static void RadioSetPublicNetwork( bool enable )
{
 800927c:	b580      	push	{r7, lr}
 800927e:	b082      	sub	sp, #8
 8009280:	af00      	add	r7, sp, #0
 8009282:	4603      	mov	r3, r0
 8009284:	71fb      	strb	r3, [r7, #7]
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 8009286:	4a13      	ldr	r2, [pc, #76]	; (80092d4 <RadioSetPublicNetwork+0x58>)
 8009288:	79fb      	ldrb	r3, [r7, #7]
 800928a:	7313      	strb	r3, [r2, #12]
 800928c:	4b11      	ldr	r3, [pc, #68]	; (80092d4 <RadioSetPublicNetwork+0x58>)
 800928e:	7b1a      	ldrb	r2, [r3, #12]
 8009290:	4b10      	ldr	r3, [pc, #64]	; (80092d4 <RadioSetPublicNetwork+0x58>)
 8009292:	735a      	strb	r2, [r3, #13]

    RadioSetModem( MODEM_LORA );
 8009294:	2001      	movs	r0, #1
 8009296:	f7ff f819 	bl	80082cc <RadioSetModem>
    if( enable == true )
 800929a:	79fb      	ldrb	r3, [r7, #7]
 800929c:	2b00      	cmp	r3, #0
 800929e:	d00a      	beq.n	80092b6 <RadioSetPublicNetwork+0x3a>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 80092a0:	2134      	movs	r1, #52	; 0x34
 80092a2:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 80092a6:	f001 fe51 	bl	800af4c <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 80092aa:	2144      	movs	r1, #68	; 0x44
 80092ac:	f240 7041 	movw	r0, #1857	; 0x741
 80092b0:	f001 fe4c 	bl	800af4c <SUBGRF_WriteRegister>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
    }
}
 80092b4:	e009      	b.n	80092ca <RadioSetPublicNetwork+0x4e>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 80092b6:	2114      	movs	r1, #20
 80092b8:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 80092bc:	f001 fe46 	bl	800af4c <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 80092c0:	2124      	movs	r1, #36	; 0x24
 80092c2:	f240 7041 	movw	r0, #1857	; 0x741
 80092c6:	f001 fe41 	bl	800af4c <SUBGRF_WriteRegister>
}
 80092ca:	bf00      	nop
 80092cc:	3708      	adds	r7, #8
 80092ce:	46bd      	mov	sp, r7
 80092d0:	bd80      	pop	{r7, pc}
 80092d2:	bf00      	nop
 80092d4:	20000a64 	.word	0x20000a64

080092d8 <RadioGetWakeupTime>:

static uint32_t RadioGetWakeupTime( void )
{
 80092d8:	b580      	push	{r7, lr}
 80092da:	af00      	add	r7, sp, #0
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 80092dc:	f001 ff86 	bl	800b1ec <SUBGRF_GetRadioWakeUpTime>
 80092e0:	4603      	mov	r3, r0
 80092e2:	3303      	adds	r3, #3
}
 80092e4:	4618      	mov	r0, r3
 80092e6:	bd80      	pop	{r7, pc}

080092e8 <RadioOnTxTimeoutIrq>:

static void RadioOnTxTimeoutIrq( void *context )
{
 80092e8:	b580      	push	{r7, lr}
 80092ea:	b082      	sub	sp, #8
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	6078      	str	r0, [r7, #4]
    RADIO_TX_TIMEOUT_PROCESS();
 80092f0:	f000 f80e 	bl	8009310 <RadioOnTxTimeoutProcess>
}
 80092f4:	bf00      	nop
 80092f6:	3708      	adds	r7, #8
 80092f8:	46bd      	mov	sp, r7
 80092fa:	bd80      	pop	{r7, pc}

080092fc <RadioOnRxTimeoutIrq>:

static void RadioOnRxTimeoutIrq( void *context )
{
 80092fc:	b580      	push	{r7, lr}
 80092fe:	b082      	sub	sp, #8
 8009300:	af00      	add	r7, sp, #0
 8009302:	6078      	str	r0, [r7, #4]
    RADIO_RX_TIMEOUT_PROCESS();
 8009304:	f000 f818 	bl	8009338 <RadioOnRxTimeoutProcess>
}
 8009308:	bf00      	nop
 800930a:	3708      	adds	r7, #8
 800930c:	46bd      	mov	sp, r7
 800930e:	bd80      	pop	{r7, pc}

08009310 <RadioOnTxTimeoutProcess>:

static void RadioOnTxTimeoutProcess( void )
{
 8009310:	b580      	push	{r7, lr}
 8009312:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_TX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8009314:	4b07      	ldr	r3, [pc, #28]	; (8009334 <RadioOnTxTimeoutProcess+0x24>)
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	2b00      	cmp	r3, #0
 800931a:	d008      	beq.n	800932e <RadioOnTxTimeoutProcess+0x1e>
 800931c:	4b05      	ldr	r3, [pc, #20]	; (8009334 <RadioOnTxTimeoutProcess+0x24>)
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	685b      	ldr	r3, [r3, #4]
 8009322:	2b00      	cmp	r3, #0
 8009324:	d003      	beq.n	800932e <RadioOnTxTimeoutProcess+0x1e>
    {
        RadioEvents->TxTimeout( );
 8009326:	4b03      	ldr	r3, [pc, #12]	; (8009334 <RadioOnTxTimeoutProcess+0x24>)
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	685b      	ldr	r3, [r3, #4]
 800932c:	4798      	blx	r3
    }
}
 800932e:	bf00      	nop
 8009330:	bd80      	pop	{r7, pc}
 8009332:	bf00      	nop
 8009334:	20000a60 	.word	0x20000a60

08009338 <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 8009338:	b580      	push	{r7, lr}
 800933a:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_RX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800933c:	4b07      	ldr	r3, [pc, #28]	; (800935c <RadioOnRxTimeoutProcess+0x24>)
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	2b00      	cmp	r3, #0
 8009342:	d008      	beq.n	8009356 <RadioOnRxTimeoutProcess+0x1e>
 8009344:	4b05      	ldr	r3, [pc, #20]	; (800935c <RadioOnRxTimeoutProcess+0x24>)
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	68db      	ldr	r3, [r3, #12]
 800934a:	2b00      	cmp	r3, #0
 800934c:	d003      	beq.n	8009356 <RadioOnRxTimeoutProcess+0x1e>
    {
        RadioEvents->RxTimeout( );
 800934e:	4b03      	ldr	r3, [pc, #12]	; (800935c <RadioOnRxTimeoutProcess+0x24>)
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	68db      	ldr	r3, [r3, #12]
 8009354:	4798      	blx	r3
    }
}
 8009356:	bf00      	nop
 8009358:	bd80      	pop	{r7, pc}
 800935a:	bf00      	nop
 800935c:	20000a60 	.word	0x20000a60

08009360 <RadioOnDioIrq>:

static void RadioOnDioIrq( RadioIrqMasks_t radioIrq )
{
 8009360:	b580      	push	{r7, lr}
 8009362:	b082      	sub	sp, #8
 8009364:	af00      	add	r7, sp, #0
 8009366:	4603      	mov	r3, r0
 8009368:	80fb      	strh	r3, [r7, #6]
    SubgRf.RadioIrq = radioIrq;
 800936a:	4a05      	ldr	r2, [pc, #20]	; (8009380 <RadioOnDioIrq+0x20>)
 800936c:	88fb      	ldrh	r3, [r7, #6]
 800936e:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54

    RADIO_IRQ_PROCESS();
 8009372:	f000 f807 	bl	8009384 <RadioIrqProcess>
}
 8009376:	bf00      	nop
 8009378:	3708      	adds	r7, #8
 800937a:	46bd      	mov	sp, r7
 800937c:	bd80      	pop	{r7, pc}
 800937e:	bf00      	nop
 8009380:	20000a64 	.word	0x20000a64

08009384 <RadioIrqProcess>:

static void RadioIrqProcess( void )
{
 8009384:	b5b0      	push	{r4, r5, r7, lr}
 8009386:	b082      	sub	sp, #8
 8009388:	af00      	add	r7, sp, #0
    uint8_t size = 0;
 800938a:	2300      	movs	r3, #0
 800938c:	71fb      	strb	r3, [r7, #7]
    int32_t cfo = 0;
 800938e:	2300      	movs	r3, #0
 8009390:	603b      	str	r3, [r7, #0]

    switch( SubgRf.RadioIrq )
 8009392:	4ba5      	ldr	r3, [pc, #660]	; (8009628 <RadioIrqProcess+0x2a4>)
 8009394:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8009398:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800939c:	f000 810d 	beq.w	80095ba <RadioIrqProcess+0x236>
 80093a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80093a4:	f300 81c0 	bgt.w	8009728 <RadioIrqProcess+0x3a4>
 80093a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80093ac:	f000 80f1 	beq.w	8009592 <RadioIrqProcess+0x20e>
 80093b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80093b4:	f300 81b8 	bgt.w	8009728 <RadioIrqProcess+0x3a4>
 80093b8:	2b80      	cmp	r3, #128	; 0x80
 80093ba:	f000 80d6 	beq.w	800956a <RadioIrqProcess+0x1e6>
 80093be:	2b80      	cmp	r3, #128	; 0x80
 80093c0:	f300 81b2 	bgt.w	8009728 <RadioIrqProcess+0x3a4>
 80093c4:	2b20      	cmp	r3, #32
 80093c6:	dc49      	bgt.n	800945c <RadioIrqProcess+0xd8>
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	f340 81ad 	ble.w	8009728 <RadioIrqProcess+0x3a4>
 80093ce:	3b01      	subs	r3, #1
 80093d0:	2b1f      	cmp	r3, #31
 80093d2:	f200 81a9 	bhi.w	8009728 <RadioIrqProcess+0x3a4>
 80093d6:	a201      	add	r2, pc, #4	; (adr r2, 80093dc <RadioIrqProcess+0x58>)
 80093d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093dc:	08009465 	.word	0x08009465
 80093e0:	0800949f 	.word	0x0800949f
 80093e4:	08009729 	.word	0x08009729
 80093e8:	08009645 	.word	0x08009645
 80093ec:	08009729 	.word	0x08009729
 80093f0:	08009729 	.word	0x08009729
 80093f4:	08009729 	.word	0x08009729
 80093f8:	080096b3 	.word	0x080096b3
 80093fc:	08009729 	.word	0x08009729
 8009400:	08009729 	.word	0x08009729
 8009404:	08009729 	.word	0x08009729
 8009408:	08009729 	.word	0x08009729
 800940c:	08009729 	.word	0x08009729
 8009410:	08009729 	.word	0x08009729
 8009414:	08009729 	.word	0x08009729
 8009418:	08009729 	.word	0x08009729
 800941c:	08009729 	.word	0x08009729
 8009420:	08009729 	.word	0x08009729
 8009424:	08009729 	.word	0x08009729
 8009428:	08009729 	.word	0x08009729
 800942c:	08009729 	.word	0x08009729
 8009430:	08009729 	.word	0x08009729
 8009434:	08009729 	.word	0x08009729
 8009438:	08009729 	.word	0x08009729
 800943c:	08009729 	.word	0x08009729
 8009440:	08009729 	.word	0x08009729
 8009444:	08009729 	.word	0x08009729
 8009448:	08009729 	.word	0x08009729
 800944c:	08009729 	.word	0x08009729
 8009450:	08009729 	.word	0x08009729
 8009454:	08009729 	.word	0x08009729
 8009458:	080096c3 	.word	0x080096c3
 800945c:	2b40      	cmp	r3, #64	; 0x40
 800945e:	f000 814b 	beq.w	80096f8 <RadioIrqProcess+0x374>
        MW_LOG( TS_ON, VLEVEL_M,  "HOP\r\n" );
        break;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    default:
        break;
 8009462:	e161      	b.n	8009728 <RadioIrqProcess+0x3a4>
        TimerStop( &TxTimeoutTimer );
 8009464:	4871      	ldr	r0, [pc, #452]	; (800962c <RadioIrqProcess+0x2a8>)
 8009466:	f002 fab9 	bl	800b9dc <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 800946a:	2000      	movs	r0, #0
 800946c:	f000 ffea 	bl	800a444 <SUBGRF_SetStandby>
        if( RFW_Is_LongPacketModeEnabled() == 1 )
 8009470:	f002 f860 	bl	800b534 <RFW_Is_LongPacketModeEnabled>
 8009474:	4603      	mov	r3, r0
 8009476:	2b01      	cmp	r3, #1
 8009478:	d101      	bne.n	800947e <RadioIrqProcess+0xfa>
            RFW_DeInit_TxLongPacket( );
 800947a:	f002 f884 	bl	800b586 <RFW_DeInit_TxLongPacket>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 800947e:	4b6c      	ldr	r3, [pc, #432]	; (8009630 <RadioIrqProcess+0x2ac>)
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	2b00      	cmp	r3, #0
 8009484:	f000 8152 	beq.w	800972c <RadioIrqProcess+0x3a8>
 8009488:	4b69      	ldr	r3, [pc, #420]	; (8009630 <RadioIrqProcess+0x2ac>)
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	2b00      	cmp	r3, #0
 8009490:	f000 814c 	beq.w	800972c <RadioIrqProcess+0x3a8>
            RadioEvents->TxDone( );
 8009494:	4b66      	ldr	r3, [pc, #408]	; (8009630 <RadioIrqProcess+0x2ac>)
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	4798      	blx	r3
        break;
 800949c:	e146      	b.n	800972c <RadioIrqProcess+0x3a8>
        TimerStop( &RxTimeoutTimer );
 800949e:	4865      	ldr	r0, [pc, #404]	; (8009634 <RadioIrqProcess+0x2b0>)
 80094a0:	f002 fa9c 	bl	800b9dc <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 80094a4:	4b60      	ldr	r3, [pc, #384]	; (8009628 <RadioIrqProcess+0x2a4>)
 80094a6:	785b      	ldrb	r3, [r3, #1]
 80094a8:	f083 0301 	eor.w	r3, r3, #1
 80094ac:	b2db      	uxtb	r3, r3
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d014      	beq.n	80094dc <RadioIrqProcess+0x158>
            SUBGRF_SetStandby( STDBY_RC );
 80094b2:	2000      	movs	r0, #0
 80094b4:	f000 ffc6 	bl	800a444 <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( SUBGHZ_RTCCTLR, 0x00 );
 80094b8:	2100      	movs	r1, #0
 80094ba:	f640 1002 	movw	r0, #2306	; 0x902
 80094be:	f001 fd45 	bl	800af4c <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( SUBGHZ_EVENTMASKR, SUBGRF_ReadRegister( SUBGHZ_EVENTMASKR ) | ( 1 << 1 ) );
 80094c2:	f640 1044 	movw	r0, #2372	; 0x944
 80094c6:	f001 fd55 	bl	800af74 <SUBGRF_ReadRegister>
 80094ca:	4603      	mov	r3, r0
 80094cc:	f043 0302 	orr.w	r3, r3, #2
 80094d0:	b2db      	uxtb	r3, r3
 80094d2:	4619      	mov	r1, r3
 80094d4:	f640 1044 	movw	r0, #2372	; 0x944
 80094d8:	f001 fd38 	bl	800af4c <SUBGRF_WriteRegister>
        SUBGRF_GetPayload( RadioBuffer, &size, 255 );
 80094dc:	1dfb      	adds	r3, r7, #7
 80094de:	22ff      	movs	r2, #255	; 0xff
 80094e0:	4619      	mov	r1, r3
 80094e2:	4855      	ldr	r0, [pc, #340]	; (8009638 <RadioIrqProcess+0x2b4>)
 80094e4:	f000 fe7e 	bl	800a1e4 <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &( SubgRf.PacketStatus ) );
 80094e8:	4854      	ldr	r0, [pc, #336]	; (800963c <RadioIrqProcess+0x2b8>)
 80094ea:	f001 fcdd 	bl	800aea8 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 80094ee:	4b50      	ldr	r3, [pc, #320]	; (8009630 <RadioIrqProcess+0x2ac>)
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	f000 811c 	beq.w	8009730 <RadioIrqProcess+0x3ac>
 80094f8:	4b4d      	ldr	r3, [pc, #308]	; (8009630 <RadioIrqProcess+0x2ac>)
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	689b      	ldr	r3, [r3, #8]
 80094fe:	2b00      	cmp	r3, #0
 8009500:	f000 8116 	beq.w	8009730 <RadioIrqProcess+0x3ac>
            switch( SubgRf.PacketStatus.packetType )
 8009504:	4b48      	ldr	r3, [pc, #288]	; (8009628 <RadioIrqProcess+0x2a4>)
 8009506:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800950a:	2b01      	cmp	r3, #1
 800950c:	d10e      	bne.n	800952c <RadioIrqProcess+0x1a8>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt,
 800950e:	4b48      	ldr	r3, [pc, #288]	; (8009630 <RadioIrqProcess+0x2ac>)
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	689c      	ldr	r4, [r3, #8]
 8009514:	79fb      	ldrb	r3, [r7, #7]
 8009516:	b299      	uxth	r1, r3
 8009518:	4b43      	ldr	r3, [pc, #268]	; (8009628 <RadioIrqProcess+0x2a4>)
 800951a:	f993 3030 	ldrsb.w	r3, [r3, #48]	; 0x30
 800951e:	b21a      	sxth	r2, r3
 8009520:	4b41      	ldr	r3, [pc, #260]	; (8009628 <RadioIrqProcess+0x2a4>)
 8009522:	f993 3031 	ldrsb.w	r3, [r3, #49]	; 0x31
 8009526:	4844      	ldr	r0, [pc, #272]	; (8009638 <RadioIrqProcess+0x2b4>)
 8009528:	47a0      	blx	r4
                break;
 800952a:	e01d      	b.n	8009568 <RadioIrqProcess+0x1e4>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 800952c:	4b3e      	ldr	r3, [pc, #248]	; (8009628 <RadioIrqProcess+0x2a4>)
 800952e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009530:	463a      	mov	r2, r7
 8009532:	4611      	mov	r1, r2
 8009534:	4618      	mov	r0, r3
 8009536:	f001 ff4b 	bl	800b3d0 <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, ( int8_t ) DIVR( cfo, 1000 ) );
 800953a:	4b3d      	ldr	r3, [pc, #244]	; (8009630 <RadioIrqProcess+0x2ac>)
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	689c      	ldr	r4, [r3, #8]
 8009540:	79fb      	ldrb	r3, [r7, #7]
 8009542:	b299      	uxth	r1, r3
 8009544:	4b38      	ldr	r3, [pc, #224]	; (8009628 <RadioIrqProcess+0x2a4>)
 8009546:	f993 3029 	ldrsb.w	r3, [r3, #41]	; 0x29
 800954a:	b218      	sxth	r0, r3
 800954c:	683b      	ldr	r3, [r7, #0]
 800954e:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8009552:	4a3b      	ldr	r2, [pc, #236]	; (8009640 <RadioIrqProcess+0x2bc>)
 8009554:	fb82 5203 	smull	r5, r2, r2, r3
 8009558:	1192      	asrs	r2, r2, #6
 800955a:	17db      	asrs	r3, r3, #31
 800955c:	1ad3      	subs	r3, r2, r3
 800955e:	b25b      	sxtb	r3, r3
 8009560:	4602      	mov	r2, r0
 8009562:	4835      	ldr	r0, [pc, #212]	; (8009638 <RadioIrqProcess+0x2b4>)
 8009564:	47a0      	blx	r4
                break;
 8009566:	bf00      	nop
        break;
 8009568:	e0e2      	b.n	8009730 <RadioIrqProcess+0x3ac>
        SUBGRF_SetStandby( STDBY_RC );
 800956a:	2000      	movs	r0, #0
 800956c:	f000 ff6a 	bl	800a444 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8009570:	4b2f      	ldr	r3, [pc, #188]	; (8009630 <RadioIrqProcess+0x2ac>)
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	2b00      	cmp	r3, #0
 8009576:	f000 80dd 	beq.w	8009734 <RadioIrqProcess+0x3b0>
 800957a:	4b2d      	ldr	r3, [pc, #180]	; (8009630 <RadioIrqProcess+0x2ac>)
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	699b      	ldr	r3, [r3, #24]
 8009580:	2b00      	cmp	r3, #0
 8009582:	f000 80d7 	beq.w	8009734 <RadioIrqProcess+0x3b0>
            RadioEvents->CadDone( false );
 8009586:	4b2a      	ldr	r3, [pc, #168]	; (8009630 <RadioIrqProcess+0x2ac>)
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	699b      	ldr	r3, [r3, #24]
 800958c:	2000      	movs	r0, #0
 800958e:	4798      	blx	r3
        break;
 8009590:	e0d0      	b.n	8009734 <RadioIrqProcess+0x3b0>
        SUBGRF_SetStandby( STDBY_RC );
 8009592:	2000      	movs	r0, #0
 8009594:	f000 ff56 	bl	800a444 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8009598:	4b25      	ldr	r3, [pc, #148]	; (8009630 <RadioIrqProcess+0x2ac>)
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	2b00      	cmp	r3, #0
 800959e:	f000 80cb 	beq.w	8009738 <RadioIrqProcess+0x3b4>
 80095a2:	4b23      	ldr	r3, [pc, #140]	; (8009630 <RadioIrqProcess+0x2ac>)
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	699b      	ldr	r3, [r3, #24]
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	f000 80c5 	beq.w	8009738 <RadioIrqProcess+0x3b4>
            RadioEvents->CadDone( true );
 80095ae:	4b20      	ldr	r3, [pc, #128]	; (8009630 <RadioIrqProcess+0x2ac>)
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	699b      	ldr	r3, [r3, #24]
 80095b4:	2001      	movs	r0, #1
 80095b6:	4798      	blx	r3
        break;
 80095b8:	e0be      	b.n	8009738 <RadioIrqProcess+0x3b4>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 80095ba:	f000 fdf9 	bl	800a1b0 <SUBGRF_GetOperatingMode>
 80095be:	4603      	mov	r3, r0
 80095c0:	2b04      	cmp	r3, #4
 80095c2:	d115      	bne.n	80095f0 <RadioIrqProcess+0x26c>
            TimerStop( &TxTimeoutTimer );
 80095c4:	4819      	ldr	r0, [pc, #100]	; (800962c <RadioIrqProcess+0x2a8>)
 80095c6:	f002 fa09 	bl	800b9dc <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 80095ca:	2000      	movs	r0, #0
 80095cc:	f000 ff3a 	bl	800a444 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 80095d0:	4b17      	ldr	r3, [pc, #92]	; (8009630 <RadioIrqProcess+0x2ac>)
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	f000 80b1 	beq.w	800973c <RadioIrqProcess+0x3b8>
 80095da:	4b15      	ldr	r3, [pc, #84]	; (8009630 <RadioIrqProcess+0x2ac>)
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	685b      	ldr	r3, [r3, #4]
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	f000 80ab 	beq.w	800973c <RadioIrqProcess+0x3b8>
                RadioEvents->TxTimeout( );
 80095e6:	4b12      	ldr	r3, [pc, #72]	; (8009630 <RadioIrqProcess+0x2ac>)
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	685b      	ldr	r3, [r3, #4]
 80095ec:	4798      	blx	r3
        break;
 80095ee:	e0a5      	b.n	800973c <RadioIrqProcess+0x3b8>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 80095f0:	f000 fdde 	bl	800a1b0 <SUBGRF_GetOperatingMode>
 80095f4:	4603      	mov	r3, r0
 80095f6:	2b05      	cmp	r3, #5
 80095f8:	f040 80a0 	bne.w	800973c <RadioIrqProcess+0x3b8>
            TimerStop( &RxTimeoutTimer );
 80095fc:	480d      	ldr	r0, [pc, #52]	; (8009634 <RadioIrqProcess+0x2b0>)
 80095fe:	f002 f9ed 	bl	800b9dc <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 8009602:	2000      	movs	r0, #0
 8009604:	f000 ff1e 	bl	800a444 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8009608:	4b09      	ldr	r3, [pc, #36]	; (8009630 <RadioIrqProcess+0x2ac>)
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	2b00      	cmp	r3, #0
 800960e:	f000 8095 	beq.w	800973c <RadioIrqProcess+0x3b8>
 8009612:	4b07      	ldr	r3, [pc, #28]	; (8009630 <RadioIrqProcess+0x2ac>)
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	68db      	ldr	r3, [r3, #12]
 8009618:	2b00      	cmp	r3, #0
 800961a:	f000 808f 	beq.w	800973c <RadioIrqProcess+0x3b8>
                RadioEvents->RxTimeout( );
 800961e:	4b04      	ldr	r3, [pc, #16]	; (8009630 <RadioIrqProcess+0x2ac>)
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	68db      	ldr	r3, [r3, #12]
 8009624:	4798      	blx	r3
        break;
 8009626:	e089      	b.n	800973c <RadioIrqProcess+0x3b8>
 8009628:	20000a64 	.word	0x20000a64
 800962c:	20000ac0 	.word	0x20000ac0
 8009630:	20000a60 	.word	0x20000a60
 8009634:	20000ad8 	.word	0x20000ad8
 8009638:	20000960 	.word	0x20000960
 800963c:	20000a88 	.word	0x20000a88
 8009640:	10624dd3 	.word	0x10624dd3
        if( SubgRf.RxDcPreambleDetectTimeout != 0 )
 8009644:	4b44      	ldr	r3, [pc, #272]	; (8009758 <RadioIrqProcess+0x3d4>)
 8009646:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009648:	2b00      	cmp	r3, #0
 800964a:	d079      	beq.n	8009740 <RadioIrqProcess+0x3bc>
            Radio.Write( SUBGHZ_RTCPRDR2, ( SubgRf.RxDcPreambleDetectTimeout >> 16 ) & 0xFF ); /*Update Radio RTC Period MSB*/
 800964c:	4a43      	ldr	r2, [pc, #268]	; (800975c <RadioIrqProcess+0x3d8>)
 800964e:	4b42      	ldr	r3, [pc, #264]	; (8009758 <RadioIrqProcess+0x3d4>)
 8009650:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009652:	0c1b      	lsrs	r3, r3, #16
 8009654:	b2db      	uxtb	r3, r3
 8009656:	4619      	mov	r1, r3
 8009658:	f640 1003 	movw	r0, #2307	; 0x903
 800965c:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR1, ( SubgRf.RxDcPreambleDetectTimeout >> 8 ) & 0xFF ); /*Update Radio RTC Period MidByte*/
 800965e:	4a3f      	ldr	r2, [pc, #252]	; (800975c <RadioIrqProcess+0x3d8>)
 8009660:	4b3d      	ldr	r3, [pc, #244]	; (8009758 <RadioIrqProcess+0x3d4>)
 8009662:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009664:	0a1b      	lsrs	r3, r3, #8
 8009666:	b2db      	uxtb	r3, r3
 8009668:	4619      	mov	r1, r3
 800966a:	f640 1004 	movw	r0, #2308	; 0x904
 800966e:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR0, ( SubgRf.RxDcPreambleDetectTimeout ) & 0xFF ); /*Update Radio RTC Period lsb*/
 8009670:	4a3a      	ldr	r2, [pc, #232]	; (800975c <RadioIrqProcess+0x3d8>)
 8009672:	4b39      	ldr	r3, [pc, #228]	; (8009758 <RadioIrqProcess+0x3d4>)
 8009674:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009676:	b2db      	uxtb	r3, r3
 8009678:	4619      	mov	r1, r3
 800967a:	f640 1005 	movw	r0, #2309	; 0x905
 800967e:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCCTLR, Radio.Read( SUBGHZ_RTCCTLR ) | 0x1 ); /*restart Radio RTC*/
 8009680:	4c36      	ldr	r4, [pc, #216]	; (800975c <RadioIrqProcess+0x3d8>)
 8009682:	4b37      	ldr	r3, [pc, #220]	; (8009760 <RadioIrqProcess+0x3dc>)
 8009684:	f640 1002 	movw	r0, #2306	; 0x902
 8009688:	4798      	blx	r3
 800968a:	4603      	mov	r3, r0
 800968c:	f043 0301 	orr.w	r3, r3, #1
 8009690:	b2db      	uxtb	r3, r3
 8009692:	4619      	mov	r1, r3
 8009694:	f640 1002 	movw	r0, #2306	; 0x902
 8009698:	47a0      	blx	r4
            SubgRf.RxDcPreambleDetectTimeout = 0;
 800969a:	4b2f      	ldr	r3, [pc, #188]	; (8009758 <RadioIrqProcess+0x3d4>)
 800969c:	2200      	movs	r2, #0
 800969e:	659a      	str	r2, [r3, #88]	; 0x58
            SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 80096a0:	2300      	movs	r3, #0
 80096a2:	2200      	movs	r2, #0
 80096a4:	f240 2162 	movw	r1, #610	; 0x262
 80096a8:	f240 2062 	movw	r0, #610	; 0x262
 80096ac:	f001 f89e 	bl	800a7ec <SUBGRF_SetDioIrqParams>
        break;
 80096b0:	e046      	b.n	8009740 <RadioIrqProcess+0x3bc>
        if( 1UL == RFW_Is_Init( ) )
 80096b2:	f001 ff38 	bl	800b526 <RFW_Is_Init>
 80096b6:	4603      	mov	r3, r0
 80096b8:	2b01      	cmp	r3, #1
 80096ba:	d143      	bne.n	8009744 <RadioIrqProcess+0x3c0>
            RFW_ReceivePayload( );
 80096bc:	f001 ff69 	bl	800b592 <RFW_ReceivePayload>
        break;
 80096c0:	e040      	b.n	8009744 <RadioIrqProcess+0x3c0>
        TimerStop( &RxTimeoutTimer );
 80096c2:	4828      	ldr	r0, [pc, #160]	; (8009764 <RadioIrqProcess+0x3e0>)
 80096c4:	f002 f98a 	bl	800b9dc <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 80096c8:	4b23      	ldr	r3, [pc, #140]	; (8009758 <RadioIrqProcess+0x3d4>)
 80096ca:	785b      	ldrb	r3, [r3, #1]
 80096cc:	f083 0301 	eor.w	r3, r3, #1
 80096d0:	b2db      	uxtb	r3, r3
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d002      	beq.n	80096dc <RadioIrqProcess+0x358>
            SUBGRF_SetStandby( STDBY_RC );
 80096d6:	2000      	movs	r0, #0
 80096d8:	f000 feb4 	bl	800a444 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 80096dc:	4b22      	ldr	r3, [pc, #136]	; (8009768 <RadioIrqProcess+0x3e4>)
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d031      	beq.n	8009748 <RadioIrqProcess+0x3c4>
 80096e4:	4b20      	ldr	r3, [pc, #128]	; (8009768 <RadioIrqProcess+0x3e4>)
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	68db      	ldr	r3, [r3, #12]
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d02c      	beq.n	8009748 <RadioIrqProcess+0x3c4>
            RadioEvents->RxTimeout( );
 80096ee:	4b1e      	ldr	r3, [pc, #120]	; (8009768 <RadioIrqProcess+0x3e4>)
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	68db      	ldr	r3, [r3, #12]
 80096f4:	4798      	blx	r3
        break;
 80096f6:	e027      	b.n	8009748 <RadioIrqProcess+0x3c4>
        if( SubgRf.RxContinuous == false )
 80096f8:	4b17      	ldr	r3, [pc, #92]	; (8009758 <RadioIrqProcess+0x3d4>)
 80096fa:	785b      	ldrb	r3, [r3, #1]
 80096fc:	f083 0301 	eor.w	r3, r3, #1
 8009700:	b2db      	uxtb	r3, r3
 8009702:	2b00      	cmp	r3, #0
 8009704:	d002      	beq.n	800970c <RadioIrqProcess+0x388>
            SUBGRF_SetStandby( STDBY_RC );
 8009706:	2000      	movs	r0, #0
 8009708:	f000 fe9c 	bl	800a444 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 800970c:	4b16      	ldr	r3, [pc, #88]	; (8009768 <RadioIrqProcess+0x3e4>)
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	2b00      	cmp	r3, #0
 8009712:	d01b      	beq.n	800974c <RadioIrqProcess+0x3c8>
 8009714:	4b14      	ldr	r3, [pc, #80]	; (8009768 <RadioIrqProcess+0x3e4>)
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	691b      	ldr	r3, [r3, #16]
 800971a:	2b00      	cmp	r3, #0
 800971c:	d016      	beq.n	800974c <RadioIrqProcess+0x3c8>
            RadioEvents->RxError( );
 800971e:	4b12      	ldr	r3, [pc, #72]	; (8009768 <RadioIrqProcess+0x3e4>)
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	691b      	ldr	r3, [r3, #16]
 8009724:	4798      	blx	r3
        break;
 8009726:	e011      	b.n	800974c <RadioIrqProcess+0x3c8>
        break;
 8009728:	bf00      	nop
 800972a:	e010      	b.n	800974e <RadioIrqProcess+0x3ca>
        break;
 800972c:	bf00      	nop
 800972e:	e00e      	b.n	800974e <RadioIrqProcess+0x3ca>
        break;
 8009730:	bf00      	nop
 8009732:	e00c      	b.n	800974e <RadioIrqProcess+0x3ca>
        break;
 8009734:	bf00      	nop
 8009736:	e00a      	b.n	800974e <RadioIrqProcess+0x3ca>
        break;
 8009738:	bf00      	nop
 800973a:	e008      	b.n	800974e <RadioIrqProcess+0x3ca>
        break;
 800973c:	bf00      	nop
 800973e:	e006      	b.n	800974e <RadioIrqProcess+0x3ca>
        break;
 8009740:	bf00      	nop
 8009742:	e004      	b.n	800974e <RadioIrqProcess+0x3ca>
        break;
 8009744:	bf00      	nop
 8009746:	e002      	b.n	800974e <RadioIrqProcess+0x3ca>
        break;
 8009748:	bf00      	nop
 800974a:	e000      	b.n	800974e <RadioIrqProcess+0x3ca>
        break;
 800974c:	bf00      	nop
    }
}
 800974e:	bf00      	nop
 8009750:	3708      	adds	r7, #8
 8009752:	46bd      	mov	sp, r7
 8009754:	bdb0      	pop	{r4, r5, r7, pc}
 8009756:	bf00      	nop
 8009758:	20000a64 	.word	0x20000a64
 800975c:	08009193 	.word	0x08009193
 8009760:	080091b7 	.word	0x080091b7
 8009764:	20000ad8 	.word	0x20000ad8
 8009768:	20000a60 	.word	0x20000a60

0800976c <RadioTxPrbs>:

static void RadioTxPrbs( void )
{
 800976c:	b580      	push	{r7, lr}
 800976e:	af00      	add	r7, sp, #0
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8009770:	4b09      	ldr	r3, [pc, #36]	; (8009798 <RadioTxPrbs+0x2c>)
 8009772:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8009776:	2101      	movs	r1, #1
 8009778:	4618      	mov	r0, r3
 800977a:	f001 fcdb 	bl	800b134 <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_GPKTCTL1AR, 0x2d );  // sel mode prbs9 instead of preamble
 800977e:	4b07      	ldr	r3, [pc, #28]	; (800979c <RadioTxPrbs+0x30>)
 8009780:	212d      	movs	r1, #45	; 0x2d
 8009782:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8009786:	4798      	blx	r3
    SUBGRF_SetTxInfinitePreamble( );
 8009788:	f000 ff1f 	bl	800a5ca <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 800978c:	4804      	ldr	r0, [pc, #16]	; (80097a0 <RadioTxPrbs+0x34>)
 800978e:	f000 fe75 	bl	800a47c <SUBGRF_SetTx>
}
 8009792:	bf00      	nop
 8009794:	bd80      	pop	{r7, pc}
 8009796:	bf00      	nop
 8009798:	20000a64 	.word	0x20000a64
 800979c:	08009193 	.word	0x08009193
 80097a0:	000fffff 	.word	0x000fffff

080097a4 <RadioTxCw>:

static void RadioTxCw( int8_t power )
{
 80097a4:	b580      	push	{r7, lr}
 80097a6:	b084      	sub	sp, #16
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	4603      	mov	r3, r0
 80097ac:	71fb      	strb	r3, [r7, #7]
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 80097ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80097b2:	4618      	mov	r0, r3
 80097b4:	f001 fce6 	bl	800b184 <SUBGRF_SetRfTxPower>
 80097b8:	4603      	mov	r3, r0
 80097ba:	73fb      	strb	r3, [r7, #15]
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 80097bc:	210e      	movs	r1, #14
 80097be:	f640 101f 	movw	r0, #2335	; 0x91f
 80097c2:	f001 fbc3 	bl	800af4c <SUBGRF_WriteRegister>
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 80097c6:	7bfb      	ldrb	r3, [r7, #15]
 80097c8:	2101      	movs	r1, #1
 80097ca:	4618      	mov	r0, r3
 80097cc:	f001 fcb2 	bl	800b134 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 80097d0:	f000 fef2 	bl	800a5b8 <SUBGRF_SetTxContinuousWave>
}
 80097d4:	bf00      	nop
 80097d6:	3710      	adds	r7, #16
 80097d8:	46bd      	mov	sp, r7
 80097da:	bd80      	pop	{r7, pc}

080097dc <payload_integration>:

#if (RADIO_SIGFOX_ENABLE == 1)
static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 80097dc:	b480      	push	{r7}
 80097de:	b089      	sub	sp, #36	; 0x24
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	60f8      	str	r0, [r7, #12]
 80097e4:	60b9      	str	r1, [r7, #8]
 80097e6:	4613      	mov	r3, r2
 80097e8:	71fb      	strb	r3, [r7, #7]
    uint8_t prevInt = 0;
 80097ea:	2300      	movs	r3, #0
 80097ec:	77fb      	strb	r3, [r7, #31]
    uint8_t currBit;
    uint8_t index_bit;
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int32_t i = 0;
 80097ee:	2300      	movs	r3, #0
 80097f0:	61bb      	str	r3, [r7, #24]

    for( i = 0; i < size; i++ )
 80097f2:	2300      	movs	r3, #0
 80097f4:	61bb      	str	r3, [r7, #24]
 80097f6:	e011      	b.n	800981c <payload_integration+0x40>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 80097f8:	69bb      	ldr	r3, [r7, #24]
 80097fa:	68ba      	ldr	r2, [r7, #8]
 80097fc:	4413      	add	r3, r2
 80097fe:	781a      	ldrb	r2, [r3, #0]
 8009800:	69bb      	ldr	r3, [r7, #24]
 8009802:	68b9      	ldr	r1, [r7, #8]
 8009804:	440b      	add	r3, r1
 8009806:	43d2      	mvns	r2, r2
 8009808:	b2d2      	uxtb	r2, r2
 800980a:	701a      	strb	r2, [r3, #0]
        /* init outBuffer */
        outBuffer[i] = 0;
 800980c:	69bb      	ldr	r3, [r7, #24]
 800980e:	68fa      	ldr	r2, [r7, #12]
 8009810:	4413      	add	r3, r2
 8009812:	2200      	movs	r2, #0
 8009814:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < size; i++ )
 8009816:	69bb      	ldr	r3, [r7, #24]
 8009818:	3301      	adds	r3, #1
 800981a:	61bb      	str	r3, [r7, #24]
 800981c:	79fb      	ldrb	r3, [r7, #7]
 800981e:	69ba      	ldr	r2, [r7, #24]
 8009820:	429a      	cmp	r2, r3
 8009822:	dbe9      	blt.n	80097f8 <payload_integration+0x1c>
    }

    for( i = 0; i < ( size * 8 ); i++ )
 8009824:	2300      	movs	r3, #0
 8009826:	61bb      	str	r3, [r7, #24]
 8009828:	e049      	b.n	80098be <payload_integration+0xe2>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
 800982a:	69bb      	ldr	r3, [r7, #24]
 800982c:	425a      	negs	r2, r3
 800982e:	f003 0307 	and.w	r3, r3, #7
 8009832:	f002 0207 	and.w	r2, r2, #7
 8009836:	bf58      	it	pl
 8009838:	4253      	negpl	r3, r2
 800983a:	b2db      	uxtb	r3, r3
 800983c:	f1c3 0307 	rsb	r3, r3, #7
 8009840:	75fb      	strb	r3, [r7, #23]
        index_byte = i / 8;
 8009842:	69bb      	ldr	r3, [r7, #24]
 8009844:	2b00      	cmp	r3, #0
 8009846:	da00      	bge.n	800984a <payload_integration+0x6e>
 8009848:	3307      	adds	r3, #7
 800984a:	10db      	asrs	r3, r3, #3
 800984c:	75bb      	strb	r3, [r7, #22]
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 800984e:	69bb      	ldr	r3, [r7, #24]
 8009850:	3301      	adds	r3, #1
 8009852:	425a      	negs	r2, r3
 8009854:	f003 0307 	and.w	r3, r3, #7
 8009858:	f002 0207 	and.w	r2, r2, #7
 800985c:	bf58      	it	pl
 800985e:	4253      	negpl	r3, r2
 8009860:	b2db      	uxtb	r3, r3
 8009862:	f1c3 0307 	rsb	r3, r3, #7
 8009866:	757b      	strb	r3, [r7, #21]
        index_byte_out = ( i + 1 ) / 8;
 8009868:	69bb      	ldr	r3, [r7, #24]
 800986a:	3301      	adds	r3, #1
 800986c:	2b00      	cmp	r3, #0
 800986e:	da00      	bge.n	8009872 <payload_integration+0x96>
 8009870:	3307      	adds	r3, #7
 8009872:	10db      	asrs	r3, r3, #3
 8009874:	753b      	strb	r3, [r7, #20]
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 8009876:	7dbb      	ldrb	r3, [r7, #22]
 8009878:	68ba      	ldr	r2, [r7, #8]
 800987a:	4413      	add	r3, r2
 800987c:	781b      	ldrb	r3, [r3, #0]
 800987e:	461a      	mov	r2, r3
 8009880:	7dfb      	ldrb	r3, [r7, #23]
 8009882:	fa42 f303 	asr.w	r3, r2, r3
 8009886:	b2db      	uxtb	r3, r3
 8009888:	f003 0301 	and.w	r3, r3, #1
 800988c:	74fb      	strb	r3, [r7, #19]
        /* integration */
        prevInt ^= currBit;
 800988e:	7ffa      	ldrb	r2, [r7, #31]
 8009890:	7cfb      	ldrb	r3, [r7, #19]
 8009892:	4053      	eors	r3, r2
 8009894:	77fb      	strb	r3, [r7, #31]
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 8009896:	7d3b      	ldrb	r3, [r7, #20]
 8009898:	68fa      	ldr	r2, [r7, #12]
 800989a:	4413      	add	r3, r2
 800989c:	781b      	ldrb	r3, [r3, #0]
 800989e:	b25a      	sxtb	r2, r3
 80098a0:	7ff9      	ldrb	r1, [r7, #31]
 80098a2:	7d7b      	ldrb	r3, [r7, #21]
 80098a4:	fa01 f303 	lsl.w	r3, r1, r3
 80098a8:	b25b      	sxtb	r3, r3
 80098aa:	4313      	orrs	r3, r2
 80098ac:	b259      	sxtb	r1, r3
 80098ae:	7d3b      	ldrb	r3, [r7, #20]
 80098b0:	68fa      	ldr	r2, [r7, #12]
 80098b2:	4413      	add	r3, r2
 80098b4:	b2ca      	uxtb	r2, r1
 80098b6:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < ( size * 8 ); i++ )
 80098b8:	69bb      	ldr	r3, [r7, #24]
 80098ba:	3301      	adds	r3, #1
 80098bc:	61bb      	str	r3, [r7, #24]
 80098be:	79fb      	ldrb	r3, [r7, #7]
 80098c0:	00db      	lsls	r3, r3, #3
 80098c2:	69ba      	ldr	r2, [r7, #24]
 80098c4:	429a      	cmp	r2, r3
 80098c6:	dbb0      	blt.n	800982a <payload_integration+0x4e>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 80098c8:	7ffb      	ldrb	r3, [r7, #31]
 80098ca:	01db      	lsls	r3, r3, #7
 80098cc:	b25a      	sxtb	r2, r3
 80098ce:	7ffb      	ldrb	r3, [r7, #31]
 80098d0:	019b      	lsls	r3, r3, #6
 80098d2:	b25b      	sxtb	r3, r3
 80098d4:	4313      	orrs	r3, r2
 80098d6:	b25b      	sxtb	r3, r3
 80098d8:	7ffa      	ldrb	r2, [r7, #31]
 80098da:	2a00      	cmp	r2, #0
 80098dc:	d101      	bne.n	80098e2 <payload_integration+0x106>
 80098de:	2220      	movs	r2, #32
 80098e0:	e000      	b.n	80098e4 <payload_integration+0x108>
 80098e2:	2200      	movs	r2, #0
 80098e4:	4313      	orrs	r3, r2
 80098e6:	b259      	sxtb	r1, r3
 80098e8:	79fb      	ldrb	r3, [r7, #7]
 80098ea:	68fa      	ldr	r2, [r7, #12]
 80098ec:	4413      	add	r3, r2
 80098ee:	b2ca      	uxtb	r2, r1
 80098f0:	701a      	strb	r2, [r3, #0]
}
 80098f2:	bf00      	nop
 80098f4:	3724      	adds	r7, #36	; 0x24
 80098f6:	46bd      	mov	sp, r7
 80098f8:	bc80      	pop	{r7}
 80098fa:	4770      	bx	lr

080098fc <RadioSetRxGenericConfig>:
#endif /*RADIO_SIGFOX_ENABLE == 1*/

static int32_t RadioSetRxGenericConfig( GenericModems_t modem, RxConfigGeneric_t *config, uint32_t rxContinuous,
                                        uint32_t symbTimeout )
{
 80098fc:	b580      	push	{r7, lr}
 80098fe:	b08c      	sub	sp, #48	; 0x30
 8009900:	af00      	add	r7, sp, #0
 8009902:	60b9      	str	r1, [r7, #8]
 8009904:	607a      	str	r2, [r7, #4]
 8009906:	603b      	str	r3, [r7, #0]
 8009908:	4603      	mov	r3, r0
 800990a:	73fb      	strb	r3, [r7, #15]
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    int32_t status = 0;
 800990c:	2300      	movs	r3, #0
 800990e:	62bb      	str	r3, [r7, #40]	; 0x28
    uint8_t syncword[8] = {0};
 8009910:	2300      	movs	r3, #0
 8009912:	623b      	str	r3, [r7, #32]
 8009914:	2300      	movs	r3, #0
 8009916:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t MaxPayloadLength;

    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 8009918:	f001 fdff 	bl	800b51a <RFW_DeInit>

    if( rxContinuous != 0 )
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	2b00      	cmp	r3, #0
 8009920:	d001      	beq.n	8009926 <RadioSetRxGenericConfig+0x2a>
    {
        symbTimeout = 0;
 8009922:	2300      	movs	r3, #0
 8009924:	603b      	str	r3, [r7, #0]
    }
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	2b00      	cmp	r3, #0
 800992a:	bf14      	ite	ne
 800992c:	2301      	movne	r3, #1
 800992e:	2300      	moveq	r3, #0
 8009930:	b2da      	uxtb	r2, r3
 8009932:	4ba3      	ldr	r3, [pc, #652]	; (8009bc0 <RadioSetRxGenericConfig+0x2c4>)
 8009934:	705a      	strb	r2, [r3, #1]

    switch( modem )
 8009936:	7bfb      	ldrb	r3, [r7, #15]
 8009938:	2b00      	cmp	r3, #0
 800993a:	d003      	beq.n	8009944 <RadioSetRxGenericConfig+0x48>
 800993c:	2b01      	cmp	r3, #1
 800993e:	f000 80dc 	beq.w	8009afa <RadioSetRxGenericConfig+0x1fe>

        // Timeout Max, Timeout handled directly in SetRx function
        SubgRf.RxTimeout = 0xFFFF;
        break;
    default:
        break;
 8009942:	e194      	b.n	8009c6e <RadioSetRxGenericConfig+0x372>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 8009944:	68bb      	ldr	r3, [r7, #8]
 8009946:	689b      	ldr	r3, [r3, #8]
 8009948:	2b00      	cmp	r3, #0
 800994a:	d003      	beq.n	8009954 <RadioSetRxGenericConfig+0x58>
 800994c:	68bb      	ldr	r3, [r7, #8]
 800994e:	68db      	ldr	r3, [r3, #12]
 8009950:	2b00      	cmp	r3, #0
 8009952:	d102      	bne.n	800995a <RadioSetRxGenericConfig+0x5e>
            return -1;
 8009954:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009958:	e18a      	b.n	8009c70 <RadioSetRxGenericConfig+0x374>
        if( config->fsk.SyncWordLength > 8 )
 800995a:	68bb      	ldr	r3, [r7, #8]
 800995c:	7f9b      	ldrb	r3, [r3, #30]
 800995e:	2b08      	cmp	r3, #8
 8009960:	d902      	bls.n	8009968 <RadioSetRxGenericConfig+0x6c>
            return -1;
 8009962:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009966:	e183      	b.n	8009c70 <RadioSetRxGenericConfig+0x374>
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 8009968:	68bb      	ldr	r3, [r7, #8]
 800996a:	6919      	ldr	r1, [r3, #16]
 800996c:	68bb      	ldr	r3, [r7, #8]
 800996e:	7f9b      	ldrb	r3, [r3, #30]
 8009970:	b29a      	uxth	r2, r3
 8009972:	f107 0320 	add.w	r3, r7, #32
 8009976:	4618      	mov	r0, r3
 8009978:	f001 ff52 	bl	800b820 <UTIL_MEM_cpy_8>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 800997c:	68bb      	ldr	r3, [r7, #8]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	2b00      	cmp	r3, #0
 8009982:	bf14      	ite	ne
 8009984:	2301      	movne	r3, #1
 8009986:	2300      	moveq	r3, #0
 8009988:	b2db      	uxtb	r3, r3
 800998a:	4618      	mov	r0, r3
 800998c:	f000 fe26 	bl	800a5dc <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8009990:	4b8b      	ldr	r3, [pc, #556]	; (8009bc0 <RadioSetRxGenericConfig+0x2c4>)
 8009992:	2200      	movs	r2, #0
 8009994:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 8009998:	68bb      	ldr	r3, [r7, #8]
 800999a:	689b      	ldr	r3, [r3, #8]
 800999c:	4a88      	ldr	r2, [pc, #544]	; (8009bc0 <RadioSetRxGenericConfig+0x2c4>)
 800999e:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 80099a0:	68bb      	ldr	r3, [r7, #8]
 80099a2:	f893 2020 	ldrb.w	r2, [r3, #32]
 80099a6:	4b86      	ldr	r3, [pc, #536]	; (8009bc0 <RadioSetRxGenericConfig+0x2c4>)
 80099a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 80099ac:	68bb      	ldr	r3, [r7, #8]
 80099ae:	685b      	ldr	r3, [r3, #4]
 80099b0:	4618      	mov	r0, r3
 80099b2:	f001 fce5 	bl	800b380 <SUBGRF_GetFskBandwidthRegValue>
 80099b6:	4603      	mov	r3, r0
 80099b8:	461a      	mov	r2, r3
 80099ba:	4b81      	ldr	r3, [pc, #516]	; (8009bc0 <RadioSetRxGenericConfig+0x2c4>)
 80099bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80099c0:	4b7f      	ldr	r3, [pc, #508]	; (8009bc0 <RadioSetRxGenericConfig+0x2c4>)
 80099c2:	2200      	movs	r2, #0
 80099c4:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 80099c6:	68bb      	ldr	r3, [r7, #8]
 80099c8:	68db      	ldr	r3, [r3, #12]
 80099ca:	b29b      	uxth	r3, r3
 80099cc:	00db      	lsls	r3, r3, #3
 80099ce:	b29a      	uxth	r2, r3
 80099d0:	4b7b      	ldr	r3, [pc, #492]	; (8009bc0 <RadioSetRxGenericConfig+0x2c4>)
 80099d2:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 80099d4:	68bb      	ldr	r3, [r7, #8]
 80099d6:	7fda      	ldrb	r2, [r3, #31]
 80099d8:	4b79      	ldr	r3, [pc, #484]	; (8009bc0 <RadioSetRxGenericConfig+0x2c4>)
 80099da:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 80099dc:	68bb      	ldr	r3, [r7, #8]
 80099de:	7f9b      	ldrb	r3, [r3, #30]
 80099e0:	00db      	lsls	r3, r3, #3
 80099e2:	b2da      	uxtb	r2, r3
 80099e4:	4b76      	ldr	r3, [pc, #472]	; (8009bc0 <RadioSetRxGenericConfig+0x2c4>)
 80099e6:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 80099e8:	68bb      	ldr	r3, [r7, #8]
 80099ea:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 80099ee:	4b74      	ldr	r3, [pc, #464]	; (8009bc0 <RadioSetRxGenericConfig+0x2c4>)
 80099f0:	751a      	strb	r2, [r3, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 80099f2:	68bb      	ldr	r3, [r7, #8]
 80099f4:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d105      	bne.n	8009a08 <RadioSetRxGenericConfig+0x10c>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 80099fc:	68bb      	ldr	r3, [r7, #8]
 80099fe:	695b      	ldr	r3, [r3, #20]
 8009a00:	b2da      	uxtb	r2, r3
 8009a02:	4b6f      	ldr	r3, [pc, #444]	; (8009bc0 <RadioSetRxGenericConfig+0x2c4>)
 8009a04:	759a      	strb	r2, [r3, #22]
 8009a06:	e00b      	b.n	8009a20 <RadioSetRxGenericConfig+0x124>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 8009a08:	68bb      	ldr	r3, [r7, #8]
 8009a0a:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8009a0e:	2b02      	cmp	r3, #2
 8009a10:	d103      	bne.n	8009a1a <RadioSetRxGenericConfig+0x11e>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 8009a12:	4b6b      	ldr	r3, [pc, #428]	; (8009bc0 <RadioSetRxGenericConfig+0x2c4>)
 8009a14:	22ff      	movs	r2, #255	; 0xff
 8009a16:	759a      	strb	r2, [r3, #22]
 8009a18:	e002      	b.n	8009a20 <RadioSetRxGenericConfig+0x124>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 8009a1a:	4b69      	ldr	r3, [pc, #420]	; (8009bc0 <RadioSetRxGenericConfig+0x2c4>)
 8009a1c:	22ff      	movs	r2, #255	; 0xff
 8009a1e:	759a      	strb	r2, [r3, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 8009a20:	68bb      	ldr	r3, [r7, #8]
 8009a22:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009a26:	2b02      	cmp	r3, #2
 8009a28:	d004      	beq.n	8009a34 <RadioSetRxGenericConfig+0x138>
            || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8009a2a:	68bb      	ldr	r3, [r7, #8]
 8009a2c:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8009a30:	2b02      	cmp	r3, #2
 8009a32:	d12d      	bne.n	8009a90 <RadioSetRxGenericConfig+0x194>
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 8009a34:	68bb      	ldr	r3, [r7, #8]
 8009a36:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8009a3a:	2bf1      	cmp	r3, #241	; 0xf1
 8009a3c:	d00c      	beq.n	8009a58 <RadioSetRxGenericConfig+0x15c>
 8009a3e:	68bb      	ldr	r3, [r7, #8]
 8009a40:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8009a44:	2bf2      	cmp	r3, #242	; 0xf2
 8009a46:	d007      	beq.n	8009a58 <RadioSetRxGenericConfig+0x15c>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8009a48:	68bb      	ldr	r3, [r7, #8]
 8009a4a:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8009a4e:	2b01      	cmp	r3, #1
 8009a50:	d002      	beq.n	8009a58 <RadioSetRxGenericConfig+0x15c>
                return -1;
 8009a52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009a56:	e10b      	b.n	8009c70 <RadioSetRxGenericConfig+0x374>
            ConfigGeneric.rtx = CONFIG_RX;
 8009a58:	2300      	movs	r3, #0
 8009a5a:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.RxConfig = config;
 8009a5c:	68bb      	ldr	r3, [r7, #8]
 8009a5e:	61bb      	str	r3, [r7, #24]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 8009a60:	4b58      	ldr	r3, [pc, #352]	; (8009bc4 <RadioSetRxGenericConfig+0x2c8>)
 8009a62:	6819      	ldr	r1, [r3, #0]
 8009a64:	f107 0314 	add.w	r3, r7, #20
 8009a68:	4a57      	ldr	r2, [pc, #348]	; (8009bc8 <RadioSetRxGenericConfig+0x2cc>)
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	f001 fd48 	bl	800b500 <RFW_Init>
 8009a70:	4603      	mov	r3, r0
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d002      	beq.n	8009a7c <RadioSetRxGenericConfig+0x180>
                return -1;
 8009a76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009a7a:	e0f9      	b.n	8009c70 <RadioSetRxGenericConfig+0x374>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8009a7c:	4b50      	ldr	r3, [pc, #320]	; (8009bc0 <RadioSetRxGenericConfig+0x2c4>)
 8009a7e:	2200      	movs	r2, #0
 8009a80:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 8009a82:	4b4f      	ldr	r3, [pc, #316]	; (8009bc0 <RadioSetRxGenericConfig+0x2c4>)
 8009a84:	2201      	movs	r2, #1
 8009a86:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8009a88:	4b4d      	ldr	r3, [pc, #308]	; (8009bc0 <RadioSetRxGenericConfig+0x2c4>)
 8009a8a:	2200      	movs	r2, #0
 8009a8c:	755a      	strb	r2, [r3, #21]
        {
 8009a8e:	e00e      	b.n	8009aae <RadioSetRxGenericConfig+0x1b2>
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 8009a90:	68bb      	ldr	r3, [r7, #8]
 8009a92:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8009a96:	4b4a      	ldr	r3, [pc, #296]	; (8009bc0 <RadioSetRxGenericConfig+0x2c4>)
 8009a98:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 8009a9a:	68bb      	ldr	r3, [r7, #8]
 8009a9c:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8009aa0:	4b47      	ldr	r3, [pc, #284]	; (8009bc0 <RadioSetRxGenericConfig+0x2c4>)
 8009aa2:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 8009aa4:	68bb      	ldr	r3, [r7, #8]
 8009aa6:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8009aaa:	4b45      	ldr	r3, [pc, #276]	; (8009bc0 <RadioSetRxGenericConfig+0x2c4>)
 8009aac:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 8009aae:	f7ff fa6e 	bl	8008f8e <RadioStandby>
        RadioSetModem( MODEM_FSK );
 8009ab2:	2000      	movs	r0, #0
 8009ab4:	f7fe fc0a 	bl	80082cc <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8009ab8:	4844      	ldr	r0, [pc, #272]	; (8009bcc <RadioSetRxGenericConfig+0x2d0>)
 8009aba:	f001 f82d 	bl	800ab18 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8009abe:	4844      	ldr	r0, [pc, #272]	; (8009bd0 <RadioSetRxGenericConfig+0x2d4>)
 8009ac0:	f001 f8fc 	bl	800acbc <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8009ac4:	f107 0320 	add.w	r3, r7, #32
 8009ac8:	4618      	mov	r0, r3
 8009aca:	f000 fbc0 	bl	800a24e <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 8009ace:	68bb      	ldr	r3, [r7, #8]
 8009ad0:	8b9b      	ldrh	r3, [r3, #28]
 8009ad2:	4618      	mov	r0, r3
 8009ad4:	f000 fc0a 	bl	800a2ec <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 8009ad8:	68bb      	ldr	r3, [r7, #8]
 8009ada:	8b1b      	ldrh	r3, [r3, #24]
 8009adc:	4618      	mov	r0, r3
 8009ade:	f000 fbe5 	bl	800a2ac <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 8009ae2:	683b      	ldr	r3, [r7, #0]
 8009ae4:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8009ae8:	fb03 f202 	mul.w	r2, r3, r2
 8009aec:	68bb      	ldr	r3, [r7, #8]
 8009aee:	689b      	ldr	r3, [r3, #8]
 8009af0:	fbb2 f3f3 	udiv	r3, r2, r3
 8009af4:	4a32      	ldr	r2, [pc, #200]	; (8009bc0 <RadioSetRxGenericConfig+0x2c4>)
 8009af6:	6093      	str	r3, [r2, #8]
        break;
 8009af8:	e0b9      	b.n	8009c6e <RadioSetRxGenericConfig+0x372>
        if( config->lora.PreambleLen == 0 )
 8009afa:	68bb      	ldr	r3, [r7, #8]
 8009afc:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d102      	bne.n	8009b08 <RadioSetRxGenericConfig+0x20c>
            return -1;
 8009b02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009b06:	e0b3      	b.n	8009c70 <RadioSetRxGenericConfig+0x374>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 8009b08:	68bb      	ldr	r3, [r7, #8]
 8009b0a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8009b0e:	2b01      	cmp	r3, #1
 8009b10:	d104      	bne.n	8009b1c <RadioSetRxGenericConfig+0x220>
            MaxPayloadLength = config->fsk.MaxPayloadLength;
 8009b12:	68bb      	ldr	r3, [r7, #8]
 8009b14:	695b      	ldr	r3, [r3, #20]
 8009b16:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8009b1a:	e002      	b.n	8009b22 <RadioSetRxGenericConfig+0x226>
            MaxPayloadLength = 0xFF;
 8009b1c:	23ff      	movs	r3, #255	; 0xff
 8009b1e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 8009b22:	68bb      	ldr	r3, [r7, #8]
 8009b24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	bf14      	ite	ne
 8009b2a:	2301      	movne	r3, #1
 8009b2c:	2300      	moveq	r3, #0
 8009b2e:	b2db      	uxtb	r3, r3
 8009b30:	4618      	mov	r0, r3
 8009b32:	f000 fd53 	bl	800a5dc <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8009b36:	683b      	ldr	r3, [r7, #0]
 8009b38:	b2db      	uxtb	r3, r3
 8009b3a:	4618      	mov	r0, r3
 8009b3c:	f000 fd5d 	bl	800a5fa <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8009b40:	4b1f      	ldr	r3, [pc, #124]	; (8009bc0 <RadioSetRxGenericConfig+0x2c4>)
 8009b42:	2201      	movs	r2, #1
 8009b44:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 8009b48:	68bb      	ldr	r3, [r7, #8]
 8009b4a:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8009b4e:	4b1c      	ldr	r3, [pc, #112]	; (8009bc0 <RadioSetRxGenericConfig+0x2c4>)
 8009b50:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 8009b54:	68bb      	ldr	r3, [r7, #8]
 8009b56:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 8009b5a:	4b19      	ldr	r3, [pc, #100]	; (8009bc0 <RadioSetRxGenericConfig+0x2c4>)
 8009b5c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 8009b60:	68bb      	ldr	r3, [r7, #8]
 8009b62:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 8009b66:	4b16      	ldr	r3, [pc, #88]	; (8009bc0 <RadioSetRxGenericConfig+0x2c4>)
 8009b68:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 8009b6c:	68bb      	ldr	r3, [r7, #8]
 8009b6e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009b72:	2b02      	cmp	r3, #2
 8009b74:	d010      	beq.n	8009b98 <RadioSetRxGenericConfig+0x29c>
 8009b76:	2b02      	cmp	r3, #2
 8009b78:	dc2c      	bgt.n	8009bd4 <RadioSetRxGenericConfig+0x2d8>
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d002      	beq.n	8009b84 <RadioSetRxGenericConfig+0x288>
 8009b7e:	2b01      	cmp	r3, #1
 8009b80:	d005      	beq.n	8009b8e <RadioSetRxGenericConfig+0x292>
            break;
 8009b82:	e027      	b.n	8009bd4 <RadioSetRxGenericConfig+0x2d8>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8009b84:	4b0e      	ldr	r3, [pc, #56]	; (8009bc0 <RadioSetRxGenericConfig+0x2c4>)
 8009b86:	2200      	movs	r2, #0
 8009b88:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8009b8c:	e023      	b.n	8009bd6 <RadioSetRxGenericConfig+0x2da>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8009b8e:	4b0c      	ldr	r3, [pc, #48]	; (8009bc0 <RadioSetRxGenericConfig+0x2c4>)
 8009b90:	2201      	movs	r2, #1
 8009b92:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8009b96:	e01e      	b.n	8009bd6 <RadioSetRxGenericConfig+0x2da>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 8009b98:	68bb      	ldr	r3, [r7, #8]
 8009b9a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009b9e:	2b0b      	cmp	r3, #11
 8009ba0:	d004      	beq.n	8009bac <RadioSetRxGenericConfig+0x2b0>
 8009ba2:	68bb      	ldr	r3, [r7, #8]
 8009ba4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009ba8:	2b0c      	cmp	r3, #12
 8009baa:	d104      	bne.n	8009bb6 <RadioSetRxGenericConfig+0x2ba>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8009bac:	4b04      	ldr	r3, [pc, #16]	; (8009bc0 <RadioSetRxGenericConfig+0x2c4>)
 8009bae:	2201      	movs	r2, #1
 8009bb0:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8009bb4:	e00f      	b.n	8009bd6 <RadioSetRxGenericConfig+0x2da>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8009bb6:	4b02      	ldr	r3, [pc, #8]	; (8009bc0 <RadioSetRxGenericConfig+0x2c4>)
 8009bb8:	2200      	movs	r2, #0
 8009bba:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8009bbe:	e00a      	b.n	8009bd6 <RadioSetRxGenericConfig+0x2da>
 8009bc0:	20000a64 	.word	0x20000a64
 8009bc4:	20000a60 	.word	0x20000a60
 8009bc8:	20000ad8 	.word	0x20000ad8
 8009bcc:	20000a9c 	.word	0x20000a9c
 8009bd0:	20000a72 	.word	0x20000a72
            break;
 8009bd4:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8009bd6:	4b28      	ldr	r3, [pc, #160]	; (8009c78 <RadioSetRxGenericConfig+0x37c>)
 8009bd8:	2201      	movs	r2, #1
 8009bda:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 8009bdc:	68bb      	ldr	r3, [r7, #8]
 8009bde:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 8009be0:	4b25      	ldr	r3, [pc, #148]	; (8009c78 <RadioSetRxGenericConfig+0x37c>)
 8009be2:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 8009be4:	68bb      	ldr	r3, [r7, #8]
 8009be6:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 8009bea:	4b23      	ldr	r3, [pc, #140]	; (8009c78 <RadioSetRxGenericConfig+0x37c>)
 8009bec:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8009bee:	4a22      	ldr	r2, [pc, #136]	; (8009c78 <RadioSetRxGenericConfig+0x37c>)
 8009bf0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009bf4:	77d3      	strb	r3, [r2, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 8009bf6:	68bb      	ldr	r3, [r7, #8]
 8009bf8:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8009bfc:	4b1e      	ldr	r3, [pc, #120]	; (8009c78 <RadioSetRxGenericConfig+0x37c>)
 8009bfe:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 8009c02:	68bb      	ldr	r3, [r7, #8]
 8009c04:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 8009c08:	4b1b      	ldr	r3, [pc, #108]	; (8009c78 <RadioSetRxGenericConfig+0x37c>)
 8009c0a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RadioStandby( );
 8009c0e:	f7ff f9be 	bl	8008f8e <RadioStandby>
        RadioSetModem( MODEM_LORA );
 8009c12:	2001      	movs	r0, #1
 8009c14:	f7fe fb5a 	bl	80082cc <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8009c18:	4818      	ldr	r0, [pc, #96]	; (8009c7c <RadioSetRxGenericConfig+0x380>)
 8009c1a:	f000 ff7d 	bl	800ab18 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8009c1e:	4818      	ldr	r0, [pc, #96]	; (8009c80 <RadioSetRxGenericConfig+0x384>)
 8009c20:	f001 f84c 	bl	800acbc <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8009c24:	4b14      	ldr	r3, [pc, #80]	; (8009c78 <RadioSetRxGenericConfig+0x37c>)
 8009c26:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8009c2a:	2b01      	cmp	r3, #1
 8009c2c:	d10d      	bne.n	8009c4a <RadioSetRxGenericConfig+0x34e>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 8009c2e:	f240 7036 	movw	r0, #1846	; 0x736
 8009c32:	f001 f99f 	bl	800af74 <SUBGRF_ReadRegister>
 8009c36:	4603      	mov	r3, r0
 8009c38:	f023 0304 	bic.w	r3, r3, #4
 8009c3c:	b2db      	uxtb	r3, r3
 8009c3e:	4619      	mov	r1, r3
 8009c40:	f240 7036 	movw	r0, #1846	; 0x736
 8009c44:	f001 f982 	bl	800af4c <SUBGRF_WriteRegister>
 8009c48:	e00c      	b.n	8009c64 <RadioSetRxGenericConfig+0x368>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 8009c4a:	f240 7036 	movw	r0, #1846	; 0x736
 8009c4e:	f001 f991 	bl	800af74 <SUBGRF_ReadRegister>
 8009c52:	4603      	mov	r3, r0
 8009c54:	f043 0304 	orr.w	r3, r3, #4
 8009c58:	b2db      	uxtb	r3, r3
 8009c5a:	4619      	mov	r1, r3
 8009c5c:	f240 7036 	movw	r0, #1846	; 0x736
 8009c60:	f001 f974 	bl	800af4c <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 8009c64:	4b04      	ldr	r3, [pc, #16]	; (8009c78 <RadioSetRxGenericConfig+0x37c>)
 8009c66:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009c6a:	609a      	str	r2, [r3, #8]
        break;
 8009c6c:	bf00      	nop
    }
    return status;
 8009c6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 8009c70:	4618      	mov	r0, r3
 8009c72:	3730      	adds	r7, #48	; 0x30
 8009c74:	46bd      	mov	sp, r7
 8009c76:	bd80      	pop	{r7, pc}
 8009c78:	20000a64 	.word	0x20000a64
 8009c7c:	20000a9c 	.word	0x20000a9c
 8009c80:	20000a72 	.word	0x20000a72

08009c84 <RadioSetTxGenericConfig>:

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t *config, int8_t power,
                                        uint32_t timeout )
{
 8009c84:	b580      	push	{r7, lr}
 8009c86:	b08e      	sub	sp, #56	; 0x38
 8009c88:	af00      	add	r7, sp, #0
 8009c8a:	60b9      	str	r1, [r7, #8]
 8009c8c:	607b      	str	r3, [r7, #4]
 8009c8e:	4603      	mov	r3, r0
 8009c90:	73fb      	strb	r3, [r7, #15]
 8009c92:	4613      	mov	r3, r2
 8009c94:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    uint8_t syncword[8] = {0};
 8009c96:	2300      	movs	r3, #0
 8009c98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009c9a:	2300      	movs	r3, #0
 8009c9c:	633b      	str	r3, [r7, #48]	; 0x30
    RadioModems_t radio_modem;
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 8009c9e:	f001 fc3c 	bl	800b51a <RFW_DeInit>
    switch( modem )
 8009ca2:	7bfb      	ldrb	r3, [r7, #15]
 8009ca4:	2b03      	cmp	r3, #3
 8009ca6:	f200 8204 	bhi.w	800a0b2 <RadioSetTxGenericConfig+0x42e>
 8009caa:	a201      	add	r2, pc, #4	; (adr r2, 8009cb0 <RadioSetTxGenericConfig+0x2c>)
 8009cac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cb0:	08009e35 	.word	0x08009e35
 8009cb4:	08009f7d 	.word	0x08009f7d
 8009cb8:	0800a075 	.word	0x0800a075
 8009cbc:	08009cc1 	.word	0x08009cc1
    {
    case GENERIC_MSK:
        if( config->msk.SyncWordLength > 8 )
 8009cc0:	68bb      	ldr	r3, [r7, #8]
 8009cc2:	7c9b      	ldrb	r3, [r3, #18]
 8009cc4:	2b08      	cmp	r3, #8
 8009cc6:	d902      	bls.n	8009cce <RadioSetTxGenericConfig+0x4a>
        {
            return -1;
 8009cc8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009ccc:	e206      	b.n	800a0dc <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8( syncword, config->msk.SyncWord, config->msk.SyncWordLength );
 8009cce:	68bb      	ldr	r3, [r7, #8]
 8009cd0:	6899      	ldr	r1, [r3, #8]
 8009cd2:	68bb      	ldr	r3, [r7, #8]
 8009cd4:	7c9b      	ldrb	r3, [r3, #18]
 8009cd6:	b29a      	uxth	r2, r3
 8009cd8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009cdc:	4618      	mov	r0, r3
 8009cde:	f001 fd9f 	bl	800b820 <UTIL_MEM_cpy_8>
        }
        if( ( config->msk.BitRate == 0 ) )
 8009ce2:	68bb      	ldr	r3, [r7, #8]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d102      	bne.n	8009cf0 <RadioSetTxGenericConfig+0x6c>
        {
            return -1;
 8009cea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009cee:	e1f5      	b.n	800a0dc <RadioSetTxGenericConfig+0x458>
        }
        else if( config->msk.BitRate <= 10000 )
 8009cf0:	68bb      	ldr	r3, [r7, #8]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	f242 7210 	movw	r2, #10000	; 0x2710
 8009cf8:	4293      	cmp	r3, r2
 8009cfa:	d813      	bhi.n	8009d24 <RadioSetTxGenericConfig+0xa0>
        {
            /*max msk modulator datarate is 10kbps*/
            radio_modem = MODEM_MSK;
 8009cfc:	2302      	movs	r3, #2
 8009cfe:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GMSK;
 8009d02:	4b99      	ldr	r3, [pc, #612]	; (8009f68 <RadioSetTxGenericConfig+0x2e4>)
 8009d04:	2203      	movs	r2, #3
 8009d06:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GMSK;
 8009d08:	4b97      	ldr	r3, [pc, #604]	; (8009f68 <RadioSetTxGenericConfig+0x2e4>)
 8009d0a:	2203      	movs	r2, #3
 8009d0c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 8009d10:	68bb      	ldr	r3, [r7, #8]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	4a94      	ldr	r2, [pc, #592]	; (8009f68 <RadioSetTxGenericConfig+0x2e4>)
 8009d16:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 8009d18:	68bb      	ldr	r3, [r7, #8]
 8009d1a:	7cda      	ldrb	r2, [r3, #19]
 8009d1c:	4b92      	ldr	r3, [pc, #584]	; (8009f68 <RadioSetTxGenericConfig+0x2e4>)
 8009d1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009d22:	e017      	b.n	8009d54 <RadioSetTxGenericConfig+0xd0>
        }
        else
        {
            radio_modem = MODEM_FSK;
 8009d24:	2300      	movs	r3, #0
 8009d26:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8009d2a:	4b8f      	ldr	r3, [pc, #572]	; (8009f68 <RadioSetTxGenericConfig+0x2e4>)
 8009d2c:	2200      	movs	r2, #0
 8009d2e:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8009d30:	4b8d      	ldr	r3, [pc, #564]	; (8009f68 <RadioSetTxGenericConfig+0x2e4>)
 8009d32:	2200      	movs	r2, #0
 8009d34:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 8009d38:	68bb      	ldr	r3, [r7, #8]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	4a8a      	ldr	r2, [pc, #552]	; (8009f68 <RadioSetTxGenericConfig+0x2e4>)
 8009d3e:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 8009d40:	68bb      	ldr	r3, [r7, #8]
 8009d42:	7cda      	ldrb	r2, [r3, #19]
 8009d44:	4b88      	ldr	r3, [pc, #544]	; (8009f68 <RadioSetTxGenericConfig+0x2e4>)
 8009d46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            /*do msk with gfsk modulator*/
            SubgRf.ModulationParams.Params.Gfsk.Fdev = config->msk.BitRate / 4;
 8009d4a:	68bb      	ldr	r3, [r7, #8]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	089b      	lsrs	r3, r3, #2
 8009d50:	4a85      	ldr	r2, [pc, #532]	; (8009f68 <RadioSetTxGenericConfig+0x2e4>)
 8009d52:	6413      	str	r3, [r2, #64]	; 0x40
        }

        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->msk.PreambleLen ) << 3; // convert byte into bit
 8009d54:	68bb      	ldr	r3, [r7, #8]
 8009d56:	685b      	ldr	r3, [r3, #4]
 8009d58:	b29b      	uxth	r3, r3
 8009d5a:	00db      	lsls	r3, r3, #3
 8009d5c:	b29a      	uxth	r2, r3
 8009d5e:	4b82      	ldr	r3, [pc, #520]	; (8009f68 <RadioSetTxGenericConfig+0x2e4>)
 8009d60:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 8009d62:	4b81      	ldr	r3, [pc, #516]	; (8009f68 <RadioSetTxGenericConfig+0x2e4>)
 8009d64:	2204      	movs	r2, #4
 8009d66:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->msk.SyncWordLength ) << 3; // convert byte into bit
 8009d68:	68bb      	ldr	r3, [r7, #8]
 8009d6a:	7c9b      	ldrb	r3, [r3, #18]
 8009d6c:	00db      	lsls	r3, r3, #3
 8009d6e:	b2da      	uxtb	r2, r3
 8009d70:	4b7d      	ldr	r3, [pc, #500]	; (8009f68 <RadioSetTxGenericConfig+0x2e4>)
 8009d72:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 8009d74:	4b7c      	ldr	r3, [pc, #496]	; (8009f68 <RadioSetTxGenericConfig+0x2e4>)
 8009d76:	2200      	movs	r2, #0
 8009d78:	751a      	strb	r2, [r3, #20]

        if( ( config->msk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 8009d7a:	68bb      	ldr	r3, [r7, #8]
 8009d7c:	7d9b      	ldrb	r3, [r3, #22]
 8009d7e:	2b02      	cmp	r3, #2
 8009d80:	d003      	beq.n	8009d8a <RadioSetTxGenericConfig+0x106>
            || ( config->msk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8009d82:	68bb      	ldr	r3, [r7, #8]
 8009d84:	7d1b      	ldrb	r3, [r3, #20]
 8009d86:	2b02      	cmp	r3, #2
 8009d88:	d12b      	bne.n	8009de2 <RadioSetTxGenericConfig+0x15e>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 8009d8a:	68bb      	ldr	r3, [r7, #8]
 8009d8c:	7d5b      	ldrb	r3, [r3, #21]
 8009d8e:	2bf1      	cmp	r3, #241	; 0xf1
 8009d90:	d00a      	beq.n	8009da8 <RadioSetTxGenericConfig+0x124>
 8009d92:	68bb      	ldr	r3, [r7, #8]
 8009d94:	7d5b      	ldrb	r3, [r3, #21]
 8009d96:	2bf2      	cmp	r3, #242	; 0xf2
 8009d98:	d006      	beq.n	8009da8 <RadioSetTxGenericConfig+0x124>
                && ( config->msk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8009d9a:	68bb      	ldr	r3, [r7, #8]
 8009d9c:	7d5b      	ldrb	r3, [r3, #21]
 8009d9e:	2b01      	cmp	r3, #1
 8009da0:	d002      	beq.n	8009da8 <RadioSetTxGenericConfig+0x124>
            {
                return -1;
 8009da2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009da6:	e199      	b.n	800a0dc <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            /*msk and fsk are union, no need for copy as fsk/msk struct are on same address*/
            ConfigGeneric.TxConfig = config;
 8009da8:	68bb      	ldr	r3, [r7, #8]
 8009daa:	623b      	str	r3, [r7, #32]
            ConfigGeneric.rtx = CONFIG_TX;
 8009dac:	2301      	movs	r3, #1
 8009dae:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 8009db2:	4b6e      	ldr	r3, [pc, #440]	; (8009f6c <RadioSetTxGenericConfig+0x2e8>)
 8009db4:	6819      	ldr	r1, [r3, #0]
 8009db6:	f107 0320 	add.w	r3, r7, #32
 8009dba:	4a6d      	ldr	r2, [pc, #436]	; (8009f70 <RadioSetTxGenericConfig+0x2ec>)
 8009dbc:	4618      	mov	r0, r3
 8009dbe:	f001 fb9f 	bl	800b500 <RFW_Init>
 8009dc2:	4603      	mov	r3, r0
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d002      	beq.n	8009dce <RadioSetTxGenericConfig+0x14a>
            {
                return -1;
 8009dc8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009dcc:	e186      	b.n	800a0dc <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8009dce:	4b66      	ldr	r3, [pc, #408]	; (8009f68 <RadioSetTxGenericConfig+0x2e4>)
 8009dd0:	2200      	movs	r2, #0
 8009dd2:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 8009dd4:	4b64      	ldr	r3, [pc, #400]	; (8009f68 <RadioSetTxGenericConfig+0x2e4>)
 8009dd6:	2201      	movs	r2, #1
 8009dd8:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8009dda:	4b63      	ldr	r3, [pc, #396]	; (8009f68 <RadioSetTxGenericConfig+0x2e4>)
 8009ddc:	2200      	movs	r2, #0
 8009dde:	755a      	strb	r2, [r3, #21]
        {
 8009de0:	e00b      	b.n	8009dfa <RadioSetTxGenericConfig+0x176>
        }
        else
        {
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->msk.CrcLength;
 8009de2:	68bb      	ldr	r3, [r7, #8]
 8009de4:	7d5a      	ldrb	r2, [r3, #21]
 8009de6:	4b60      	ldr	r3, [pc, #384]	; (8009f68 <RadioSetTxGenericConfig+0x2e4>)
 8009de8:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->msk.Whitening;
 8009dea:	68bb      	ldr	r3, [r7, #8]
 8009dec:	7d9a      	ldrb	r2, [r3, #22]
 8009dee:	4b5e      	ldr	r3, [pc, #376]	; (8009f68 <RadioSetTxGenericConfig+0x2e4>)
 8009df0:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->msk.HeaderType;
 8009df2:	68bb      	ldr	r3, [r7, #8]
 8009df4:	7d1a      	ldrb	r2, [r3, #20]
 8009df6:	4b5c      	ldr	r3, [pc, #368]	; (8009f68 <RadioSetTxGenericConfig+0x2e4>)
 8009df8:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 8009dfa:	f7ff f8c8 	bl	8008f8e <RadioStandby>
        RadioSetModem( radio_modem );
 8009dfe:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009e02:	4618      	mov	r0, r3
 8009e04:	f7fe fa62 	bl	80082cc <RadioSetModem>

        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8009e08:	485a      	ldr	r0, [pc, #360]	; (8009f74 <RadioSetTxGenericConfig+0x2f0>)
 8009e0a:	f000 fe85 	bl	800ab18 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8009e0e:	485a      	ldr	r0, [pc, #360]	; (8009f78 <RadioSetTxGenericConfig+0x2f4>)
 8009e10:	f000 ff54 	bl	800acbc <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8009e14:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009e18:	4618      	mov	r0, r3
 8009e1a:	f000 fa18 	bl	800a24e <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->msk.whiteSeed );
 8009e1e:	68bb      	ldr	r3, [r7, #8]
 8009e20:	8a1b      	ldrh	r3, [r3, #16]
 8009e22:	4618      	mov	r0, r3
 8009e24:	f000 fa62 	bl	800a2ec <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->msk.CrcPolynomial );
 8009e28:	68bb      	ldr	r3, [r7, #8]
 8009e2a:	899b      	ldrh	r3, [r3, #12]
 8009e2c:	4618      	mov	r0, r3
 8009e2e:	f000 fa3d 	bl	800a2ac <SUBGRF_SetCrcPolynomial>
        break;
 8009e32:	e13f      	b.n	800a0b4 <RadioSetTxGenericConfig+0x430>
    case GENERIC_FSK:
        if( config->fsk.BitRate == 0 )
 8009e34:	68bb      	ldr	r3, [r7, #8]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d102      	bne.n	8009e42 <RadioSetTxGenericConfig+0x1be>
        {
            return -1;
 8009e3c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009e40:	e14c      	b.n	800a0dc <RadioSetTxGenericConfig+0x458>
        }
        if( config->fsk.SyncWordLength > 8 )
 8009e42:	68bb      	ldr	r3, [r7, #8]
 8009e44:	7c9b      	ldrb	r3, [r3, #18]
 8009e46:	2b08      	cmp	r3, #8
 8009e48:	d902      	bls.n	8009e50 <RadioSetTxGenericConfig+0x1cc>
        {
            return -1;
 8009e4a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009e4e:	e145      	b.n	800a0dc <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 8009e50:	68bb      	ldr	r3, [r7, #8]
 8009e52:	6899      	ldr	r1, [r3, #8]
 8009e54:	68bb      	ldr	r3, [r7, #8]
 8009e56:	7c9b      	ldrb	r3, [r3, #18]
 8009e58:	b29a      	uxth	r2, r3
 8009e5a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009e5e:	4618      	mov	r0, r3
 8009e60:	f001 fcde 	bl	800b820 <UTIL_MEM_cpy_8>
        }
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8009e64:	4b40      	ldr	r3, [pc, #256]	; (8009f68 <RadioSetTxGenericConfig+0x2e4>)
 8009e66:	2200      	movs	r2, #0
 8009e68:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 8009e6c:	68bb      	ldr	r3, [r7, #8]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	4a3d      	ldr	r2, [pc, #244]	; (8009f68 <RadioSetTxGenericConfig+0x2e4>)
 8009e72:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 8009e74:	68bb      	ldr	r3, [r7, #8]
 8009e76:	7cda      	ldrb	r2, [r3, #19]
 8009e78:	4b3b      	ldr	r3, [pc, #236]	; (8009f68 <RadioSetTxGenericConfig+0x2e4>)
 8009e7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 8009e7e:	68bb      	ldr	r3, [r7, #8]
 8009e80:	699b      	ldr	r3, [r3, #24]
 8009e82:	4a39      	ldr	r2, [pc, #228]	; (8009f68 <RadioSetTxGenericConfig+0x2e4>)
 8009e84:	6413      	str	r3, [r2, #64]	; 0x40

        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8009e86:	4b38      	ldr	r3, [pc, #224]	; (8009f68 <RadioSetTxGenericConfig+0x2e4>)
 8009e88:	2200      	movs	r2, #0
 8009e8a:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 8009e8c:	68bb      	ldr	r3, [r7, #8]
 8009e8e:	685b      	ldr	r3, [r3, #4]
 8009e90:	b29b      	uxth	r3, r3
 8009e92:	00db      	lsls	r3, r3, #3
 8009e94:	b29a      	uxth	r2, r3
 8009e96:	4b34      	ldr	r3, [pc, #208]	; (8009f68 <RadioSetTxGenericConfig+0x2e4>)
 8009e98:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 8009e9a:	4b33      	ldr	r3, [pc, #204]	; (8009f68 <RadioSetTxGenericConfig+0x2e4>)
 8009e9c:	2204      	movs	r2, #4
 8009e9e:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 8009ea0:	68bb      	ldr	r3, [r7, #8]
 8009ea2:	7c9b      	ldrb	r3, [r3, #18]
 8009ea4:	00db      	lsls	r3, r3, #3
 8009ea6:	b2da      	uxtb	r2, r3
 8009ea8:	4b2f      	ldr	r3, [pc, #188]	; (8009f68 <RadioSetTxGenericConfig+0x2e4>)
 8009eaa:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 8009eac:	4b2e      	ldr	r3, [pc, #184]	; (8009f68 <RadioSetTxGenericConfig+0x2e4>)
 8009eae:	2200      	movs	r2, #0
 8009eb0:	751a      	strb	r2, [r3, #20]

        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 8009eb2:	68bb      	ldr	r3, [r7, #8]
 8009eb4:	7d9b      	ldrb	r3, [r3, #22]
 8009eb6:	2b02      	cmp	r3, #2
 8009eb8:	d003      	beq.n	8009ec2 <RadioSetTxGenericConfig+0x23e>
            || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8009eba:	68bb      	ldr	r3, [r7, #8]
 8009ebc:	7d1b      	ldrb	r3, [r3, #20]
 8009ebe:	2b02      	cmp	r3, #2
 8009ec0:	d12a      	bne.n	8009f18 <RadioSetTxGenericConfig+0x294>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 8009ec2:	68bb      	ldr	r3, [r7, #8]
 8009ec4:	7d5b      	ldrb	r3, [r3, #21]
 8009ec6:	2bf1      	cmp	r3, #241	; 0xf1
 8009ec8:	d00a      	beq.n	8009ee0 <RadioSetTxGenericConfig+0x25c>
 8009eca:	68bb      	ldr	r3, [r7, #8]
 8009ecc:	7d5b      	ldrb	r3, [r3, #21]
 8009ece:	2bf2      	cmp	r3, #242	; 0xf2
 8009ed0:	d006      	beq.n	8009ee0 <RadioSetTxGenericConfig+0x25c>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8009ed2:	68bb      	ldr	r3, [r7, #8]
 8009ed4:	7d5b      	ldrb	r3, [r3, #21]
 8009ed6:	2b01      	cmp	r3, #1
 8009ed8:	d002      	beq.n	8009ee0 <RadioSetTxGenericConfig+0x25c>
            {
                return -1;
 8009eda:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009ede:	e0fd      	b.n	800a0dc <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            ConfigGeneric.rtx = CONFIG_TX;
 8009ee0:	2301      	movs	r3, #1
 8009ee2:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.TxConfig = config;
 8009ee4:	68bb      	ldr	r3, [r7, #8]
 8009ee6:	617b      	str	r3, [r7, #20]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 8009ee8:	4b20      	ldr	r3, [pc, #128]	; (8009f6c <RadioSetTxGenericConfig+0x2e8>)
 8009eea:	6819      	ldr	r1, [r3, #0]
 8009eec:	f107 0314 	add.w	r3, r7, #20
 8009ef0:	4a1f      	ldr	r2, [pc, #124]	; (8009f70 <RadioSetTxGenericConfig+0x2ec>)
 8009ef2:	4618      	mov	r0, r3
 8009ef4:	f001 fb04 	bl	800b500 <RFW_Init>
 8009ef8:	4603      	mov	r3, r0
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d002      	beq.n	8009f04 <RadioSetTxGenericConfig+0x280>
            {
                return -1;
 8009efe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009f02:	e0eb      	b.n	800a0dc <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8009f04:	4b18      	ldr	r3, [pc, #96]	; (8009f68 <RadioSetTxGenericConfig+0x2e4>)
 8009f06:	2200      	movs	r2, #0
 8009f08:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 8009f0a:	4b17      	ldr	r3, [pc, #92]	; (8009f68 <RadioSetTxGenericConfig+0x2e4>)
 8009f0c:	2201      	movs	r2, #1
 8009f0e:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8009f10:	4b15      	ldr	r3, [pc, #84]	; (8009f68 <RadioSetTxGenericConfig+0x2e4>)
 8009f12:	2200      	movs	r2, #0
 8009f14:	755a      	strb	r2, [r3, #21]
        {
 8009f16:	e00b      	b.n	8009f30 <RadioSetTxGenericConfig+0x2ac>
        }
        else
        {
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 8009f18:	68bb      	ldr	r3, [r7, #8]
 8009f1a:	7d5a      	ldrb	r2, [r3, #21]
 8009f1c:	4b12      	ldr	r3, [pc, #72]	; (8009f68 <RadioSetTxGenericConfig+0x2e4>)
 8009f1e:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 8009f20:	68bb      	ldr	r3, [r7, #8]
 8009f22:	7d9a      	ldrb	r2, [r3, #22]
 8009f24:	4b10      	ldr	r3, [pc, #64]	; (8009f68 <RadioSetTxGenericConfig+0x2e4>)
 8009f26:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 8009f28:	68bb      	ldr	r3, [r7, #8]
 8009f2a:	7d1a      	ldrb	r2, [r3, #20]
 8009f2c:	4b0e      	ldr	r3, [pc, #56]	; (8009f68 <RadioSetTxGenericConfig+0x2e4>)
 8009f2e:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 8009f30:	f7ff f82d 	bl	8008f8e <RadioStandby>
        RadioSetModem( MODEM_FSK );
 8009f34:	2000      	movs	r0, #0
 8009f36:	f7fe f9c9 	bl	80082cc <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8009f3a:	480e      	ldr	r0, [pc, #56]	; (8009f74 <RadioSetTxGenericConfig+0x2f0>)
 8009f3c:	f000 fdec 	bl	800ab18 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8009f40:	480d      	ldr	r0, [pc, #52]	; (8009f78 <RadioSetTxGenericConfig+0x2f4>)
 8009f42:	f000 febb 	bl	800acbc <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8009f46:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009f4a:	4618      	mov	r0, r3
 8009f4c:	f000 f97f 	bl	800a24e <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 8009f50:	68bb      	ldr	r3, [r7, #8]
 8009f52:	8a1b      	ldrh	r3, [r3, #16]
 8009f54:	4618      	mov	r0, r3
 8009f56:	f000 f9c9 	bl	800a2ec <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 8009f5a:	68bb      	ldr	r3, [r7, #8]
 8009f5c:	899b      	ldrh	r3, [r3, #12]
 8009f5e:	4618      	mov	r0, r3
 8009f60:	f000 f9a4 	bl	800a2ac <SUBGRF_SetCrcPolynomial>
        break;
 8009f64:	e0a6      	b.n	800a0b4 <RadioSetTxGenericConfig+0x430>
 8009f66:	bf00      	nop
 8009f68:	20000a64 	.word	0x20000a64
 8009f6c:	20000a60 	.word	0x20000a60
 8009f70:	20000ac0 	.word	0x20000ac0
 8009f74:	20000a9c 	.word	0x20000a9c
 8009f78:	20000a72 	.word	0x20000a72
    case GENERIC_LORA:
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8009f7c:	4b59      	ldr	r3, [pc, #356]	; (800a0e4 <RadioSetTxGenericConfig+0x460>)
 8009f7e:	2201      	movs	r2, #1
 8009f80:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 8009f84:	68bb      	ldr	r3, [r7, #8]
 8009f86:	781a      	ldrb	r2, [r3, #0]
 8009f88:	4b56      	ldr	r3, [pc, #344]	; (800a0e4 <RadioSetTxGenericConfig+0x460>)
 8009f8a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 8009f8e:	68bb      	ldr	r3, [r7, #8]
 8009f90:	785a      	ldrb	r2, [r3, #1]
 8009f92:	4b54      	ldr	r3, [pc, #336]	; (800a0e4 <RadioSetTxGenericConfig+0x460>)
 8009f94:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 8009f98:	68bb      	ldr	r3, [r7, #8]
 8009f9a:	789a      	ldrb	r2, [r3, #2]
 8009f9c:	4b51      	ldr	r3, [pc, #324]	; (800a0e4 <RadioSetTxGenericConfig+0x460>)
 8009f9e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 8009fa2:	68bb      	ldr	r3, [r7, #8]
 8009fa4:	78db      	ldrb	r3, [r3, #3]
 8009fa6:	2b02      	cmp	r3, #2
 8009fa8:	d010      	beq.n	8009fcc <RadioSetTxGenericConfig+0x348>
 8009faa:	2b02      	cmp	r3, #2
 8009fac:	dc20      	bgt.n	8009ff0 <RadioSetTxGenericConfig+0x36c>
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d002      	beq.n	8009fb8 <RadioSetTxGenericConfig+0x334>
 8009fb2:	2b01      	cmp	r3, #1
 8009fb4:	d005      	beq.n	8009fc2 <RadioSetTxGenericConfig+0x33e>
            {
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
            }
            break;
        default:
            break;
 8009fb6:	e01b      	b.n	8009ff0 <RadioSetTxGenericConfig+0x36c>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8009fb8:	4b4a      	ldr	r3, [pc, #296]	; (800a0e4 <RadioSetTxGenericConfig+0x460>)
 8009fba:	2200      	movs	r2, #0
 8009fbc:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8009fc0:	e017      	b.n	8009ff2 <RadioSetTxGenericConfig+0x36e>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8009fc2:	4b48      	ldr	r3, [pc, #288]	; (800a0e4 <RadioSetTxGenericConfig+0x460>)
 8009fc4:	2201      	movs	r2, #1
 8009fc6:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8009fca:	e012      	b.n	8009ff2 <RadioSetTxGenericConfig+0x36e>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 8009fcc:	68bb      	ldr	r3, [r7, #8]
 8009fce:	781b      	ldrb	r3, [r3, #0]
 8009fd0:	2b0b      	cmp	r3, #11
 8009fd2:	d003      	beq.n	8009fdc <RadioSetTxGenericConfig+0x358>
 8009fd4:	68bb      	ldr	r3, [r7, #8]
 8009fd6:	781b      	ldrb	r3, [r3, #0]
 8009fd8:	2b0c      	cmp	r3, #12
 8009fda:	d104      	bne.n	8009fe6 <RadioSetTxGenericConfig+0x362>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8009fdc:	4b41      	ldr	r3, [pc, #260]	; (800a0e4 <RadioSetTxGenericConfig+0x460>)
 8009fde:	2201      	movs	r2, #1
 8009fe0:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8009fe4:	e005      	b.n	8009ff2 <RadioSetTxGenericConfig+0x36e>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8009fe6:	4b3f      	ldr	r3, [pc, #252]	; (800a0e4 <RadioSetTxGenericConfig+0x460>)
 8009fe8:	2200      	movs	r2, #0
 8009fea:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8009fee:	e000      	b.n	8009ff2 <RadioSetTxGenericConfig+0x36e>
            break;
 8009ff0:	bf00      	nop
        }

        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8009ff2:	4b3c      	ldr	r3, [pc, #240]	; (800a0e4 <RadioSetTxGenericConfig+0x460>)
 8009ff4:	2201      	movs	r2, #1
 8009ff6:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 8009ff8:	68bb      	ldr	r3, [r7, #8]
 8009ffa:	889a      	ldrh	r2, [r3, #4]
 8009ffc:	4b39      	ldr	r3, [pc, #228]	; (800a0e4 <RadioSetTxGenericConfig+0x460>)
 8009ffe:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 800a000:	68bb      	ldr	r3, [r7, #8]
 800a002:	799a      	ldrb	r2, [r3, #6]
 800a004:	4b37      	ldr	r3, [pc, #220]	; (800a0e4 <RadioSetTxGenericConfig+0x460>)
 800a006:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 800a008:	68bb      	ldr	r3, [r7, #8]
 800a00a:	79da      	ldrb	r2, [r3, #7]
 800a00c:	4b35      	ldr	r3, [pc, #212]	; (800a0e4 <RadioSetTxGenericConfig+0x460>)
 800a00e:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 800a012:	68bb      	ldr	r3, [r7, #8]
 800a014:	7a1a      	ldrb	r2, [r3, #8]
 800a016:	4b33      	ldr	r3, [pc, #204]	; (800a0e4 <RadioSetTxGenericConfig+0x460>)
 800a018:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        RadioStandby( );
 800a01c:	f7fe ffb7 	bl	8008f8e <RadioStandby>
        RadioSetModem( MODEM_LORA );
 800a020:	2001      	movs	r0, #1
 800a022:	f7fe f953 	bl	80082cc <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800a026:	4830      	ldr	r0, [pc, #192]	; (800a0e8 <RadioSetTxGenericConfig+0x464>)
 800a028:	f000 fd76 	bl	800ab18 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800a02c:	482f      	ldr	r0, [pc, #188]	; (800a0ec <RadioSetTxGenericConfig+0x468>)
 800a02e:	f000 fe45 	bl	800acbc <SUBGRF_SetPacketParams>

        /* WORKAROUND - Modulation Quality with 500 kHz LoRa Bandwidth, see STM32WL Erratasheet */
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 800a032:	4b2c      	ldr	r3, [pc, #176]	; (800a0e4 <RadioSetTxGenericConfig+0x460>)
 800a034:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a038:	2b06      	cmp	r3, #6
 800a03a:	d10d      	bne.n	800a058 <RadioSetTxGenericConfig+0x3d4>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 800a03c:	f640 0089 	movw	r0, #2185	; 0x889
 800a040:	f000 ff98 	bl	800af74 <SUBGRF_ReadRegister>
 800a044:	4603      	mov	r3, r0
 800a046:	f023 0304 	bic.w	r3, r3, #4
 800a04a:	b2db      	uxtb	r3, r3
 800a04c:	4619      	mov	r1, r3
 800a04e:	f640 0089 	movw	r0, #2185	; 0x889
 800a052:	f000 ff7b 	bl	800af4c <SUBGRF_WriteRegister>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
        }
        /* WORKAROUND END */
        break;
 800a056:	e02d      	b.n	800a0b4 <RadioSetTxGenericConfig+0x430>
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 800a058:	f640 0089 	movw	r0, #2185	; 0x889
 800a05c:	f000 ff8a 	bl	800af74 <SUBGRF_ReadRegister>
 800a060:	4603      	mov	r3, r0
 800a062:	f043 0304 	orr.w	r3, r3, #4
 800a066:	b2db      	uxtb	r3, r3
 800a068:	4619      	mov	r1, r3
 800a06a:	f640 0089 	movw	r0, #2185	; 0x889
 800a06e:	f000 ff6d 	bl	800af4c <SUBGRF_WriteRegister>
        break;
 800a072:	e01f      	b.n	800a0b4 <RadioSetTxGenericConfig+0x430>
    case GENERIC_BPSK:
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 800a074:	68bb      	ldr	r3, [r7, #8]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d004      	beq.n	800a086 <RadioSetTxGenericConfig+0x402>
 800a07c:	68bb      	ldr	r3, [r7, #8]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a084:	d902      	bls.n	800a08c <RadioSetTxGenericConfig+0x408>
        {
            return -1;
 800a086:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a08a:	e027      	b.n	800a0dc <RadioSetTxGenericConfig+0x458>
        }
        RadioSetModem( MODEM_BPSK );
 800a08c:	2003      	movs	r0, #3
 800a08e:	f7fe f91d 	bl	80082cc <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 800a092:	4b14      	ldr	r3, [pc, #80]	; (800a0e4 <RadioSetTxGenericConfig+0x460>)
 800a094:	2202      	movs	r2, #2
 800a096:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 800a09a:	68bb      	ldr	r3, [r7, #8]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	4a11      	ldr	r2, [pc, #68]	; (800a0e4 <RadioSetTxGenericConfig+0x460>)
 800a0a0:	6493      	str	r3, [r2, #72]	; 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 800a0a2:	4b10      	ldr	r3, [pc, #64]	; (800a0e4 <RadioSetTxGenericConfig+0x460>)
 800a0a4:	2216      	movs	r2, #22
 800a0a6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800a0aa:	480f      	ldr	r0, [pc, #60]	; (800a0e8 <RadioSetTxGenericConfig+0x464>)
 800a0ac:	f000 fd34 	bl	800ab18 <SUBGRF_SetModulationParams>
        break;
 800a0b0:	e000      	b.n	800a0b4 <RadioSetTxGenericConfig+0x430>
    default:
        break;
 800a0b2:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 800a0b4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a0b8:	4618      	mov	r0, r3
 800a0ba:	f001 f863 	bl	800b184 <SUBGRF_SetRfTxPower>
 800a0be:	4603      	mov	r3, r0
 800a0c0:	461a      	mov	r2, r3
 800a0c2:	4b08      	ldr	r3, [pc, #32]	; (800a0e4 <RadioSetTxGenericConfig+0x460>)
 800a0c4:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 800a0c8:	4b06      	ldr	r3, [pc, #24]	; (800a0e4 <RadioSetTxGenericConfig+0x460>)
 800a0ca:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800a0ce:	4618      	mov	r0, r3
 800a0d0:	f001 fa37 	bl	800b542 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 800a0d4:	4a03      	ldr	r2, [pc, #12]	; (800a0e4 <RadioSetTxGenericConfig+0x460>)
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	6053      	str	r3, [r2, #4]
    return 0;
 800a0da:	2300      	movs	r3, #0
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 800a0dc:	4618      	mov	r0, r3
 800a0de:	3738      	adds	r7, #56	; 0x38
 800a0e0:	46bd      	mov	sp, r7
 800a0e2:	bd80      	pop	{r7, pc}
 800a0e4:	20000a64 	.word	0x20000a64
 800a0e8:	20000a9c 	.word	0x20000a9c
 800a0ec:	20000a72 	.word	0x20000a72

0800a0f0 <RadioLrFhssSetCfg>:
    return ( prbs31_val - 1 ) % ( max );
}
#endif /* RADIO_LR_FHSS_IS_ON == 1 */

static radio_status_t RadioLrFhssSetCfg( const radio_lr_fhss_cfg_params_t *cfg_params )
{
 800a0f0:	b480      	push	{r7}
 800a0f2:	b085      	sub	sp, #20
 800a0f4:	af00      	add	r7, sp, #0
 800a0f6:	6078      	str	r0, [r7, #4]
    radio_status_t status = RADIO_STATUS_UNSUPPORTED_FEATURE;
 800a0f8:	2301      	movs	r3, #1
 800a0fa:	73fb      	strb	r3, [r7, #15]
    {
        return status;
    }
    SubgRf.lr_fhss.is_lr_fhss_on = true;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    return  status;
 800a0fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0fe:	4618      	mov	r0, r3
 800a100:	3714      	adds	r7, #20
 800a102:	46bd      	mov	sp, r7
 800a104:	bc80      	pop	{r7}
 800a106:	4770      	bx	lr

0800a108 <RadioLrFhssGetTimeOnAirInMs>:

static radio_status_t RadioLrFhssGetTimeOnAirInMs( const radio_lr_fhss_time_on_air_params_t *params,
                                                    uint32_t *time_on_air_in_ms )
{
 800a108:	b480      	push	{r7}
 800a10a:	b083      	sub	sp, #12
 800a10c:	af00      	add	r7, sp, #0
 800a10e:	6078      	str	r0, [r7, #4]
 800a110:	6039      	str	r1, [r7, #0]
    *time_on_air_in_ms = lr_fhss_get_time_on_air_in_ms( &params->radio_lr_fhss_params.lr_fhss_params,
                                                        params->pld_len_in_bytes );

    return RADIO_STATUS_OK;
#else
    return RADIO_STATUS_UNSUPPORTED_FEATURE;
 800a112:	2301      	movs	r3, #1
#endif /* RADIO_LR_FHSS_IS_ON */
 800a114:	4618      	mov	r0, r3
 800a116:	370c      	adds	r7, #12
 800a118:	46bd      	mov	sp, r7
 800a11a:	bc80      	pop	{r7}
 800a11c:	4770      	bx	lr
	...

0800a120 <SUBGRF_Init>:
 */
static DioIrqHandler RadioOnDioIrqCb;

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 800a120:	b580      	push	{r7, lr}
 800a122:	b084      	sub	sp, #16
 800a124:	af00      	add	r7, sp, #0
 800a126:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d002      	beq.n	800a134 <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 800a12e:	4a1d      	ldr	r2, [pc, #116]	; (800a1a4 <SUBGRF_Init+0x84>)
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 800a134:	f7f8 fd3a 	bl	8002bac <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 800a138:	2002      	movs	r0, #2
 800a13a:	f001 f8ff 	bl	800b33c <Radio_SMPS_Set>

    ImageCalibrated = false;
 800a13e:	4b1a      	ldr	r3, [pc, #104]	; (800a1a8 <SUBGRF_Init+0x88>)
 800a140:	2200      	movs	r2, #0
 800a142:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 800a144:	2000      	movs	r0, #0
 800a146:	f000 f97d 	bl	800a444 <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 800a14a:	f001 fb3e 	bl	800b7ca <RBI_IsTCXO>
 800a14e:	4603      	mov	r3, r0
 800a150:	2b01      	cmp	r3, #1
 800a152:	d10e      	bne.n	800a172 <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 800a154:	2140      	movs	r1, #64	; 0x40
 800a156:	2001      	movs	r0, #1
 800a158:	f000 fb82 	bl	800a860 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 800a15c:	2100      	movs	r1, #0
 800a15e:	f640 1011 	movw	r0, #2321	; 0x911
 800a162:	f000 fef3 	bl	800af4c <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 800a166:	237f      	movs	r3, #127	; 0x7f
 800a168:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 800a16a:	7b38      	ldrb	r0, [r7, #12]
 800a16c:	f000 fa8b 	bl	800a686 <SUBGRF_Calibrate>
 800a170:	e009      	b.n	800a186 <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 800a172:	2120      	movs	r1, #32
 800a174:	f640 1011 	movw	r0, #2321	; 0x911
 800a178:	f000 fee8 	bl	800af4c <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 800a17c:	2120      	movs	r1, #32
 800a17e:	f640 1012 	movw	r0, #2322	; 0x912
 800a182:	f000 fee3 	bl	800af4c <SUBGRF_WriteRegister>
    }

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 800a186:	210e      	movs	r1, #14
 800a188:	f640 101f 	movw	r0, #2335	; 0x91f
 800a18c:	f000 fede 	bl	800af4c <SUBGRF_WriteRegister>

    /* Init RF Switch */
    RBI_Init();
 800a190:	f001 fa86 	bl	800b6a0 <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 800a194:	4b05      	ldr	r3, [pc, #20]	; (800a1ac <SUBGRF_Init+0x8c>)
 800a196:	2201      	movs	r2, #1
 800a198:	701a      	strb	r2, [r3, #0]
}
 800a19a:	bf00      	nop
 800a19c:	3710      	adds	r7, #16
 800a19e:	46bd      	mov	sp, r7
 800a1a0:	bd80      	pop	{r7, pc}
 800a1a2:	bf00      	nop
 800a1a4:	20000afc 	.word	0x20000afc
 800a1a8:	20000af8 	.word	0x20000af8
 800a1ac:	20000af0 	.word	0x20000af0

0800a1b0 <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 800a1b0:	b480      	push	{r7}
 800a1b2:	af00      	add	r7, sp, #0
    return OperatingMode;
 800a1b4:	4b02      	ldr	r3, [pc, #8]	; (800a1c0 <SUBGRF_GetOperatingMode+0x10>)
 800a1b6:	781b      	ldrb	r3, [r3, #0]
}
 800a1b8:	4618      	mov	r0, r3
 800a1ba:	46bd      	mov	sp, r7
 800a1bc:	bc80      	pop	{r7}
 800a1be:	4770      	bx	lr
 800a1c0:	20000af0 	.word	0x20000af0

0800a1c4 <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 800a1c4:	b580      	push	{r7, lr}
 800a1c6:	b082      	sub	sp, #8
 800a1c8:	af00      	add	r7, sp, #0
 800a1ca:	6078      	str	r0, [r7, #4]
 800a1cc:	460b      	mov	r3, r1
 800a1ce:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 800a1d0:	78fb      	ldrb	r3, [r7, #3]
 800a1d2:	461a      	mov	r2, r3
 800a1d4:	6879      	ldr	r1, [r7, #4]
 800a1d6:	2000      	movs	r0, #0
 800a1d8:	f000 ff24 	bl	800b024 <SUBGRF_WriteBuffer>
}
 800a1dc:	bf00      	nop
 800a1de:	3708      	adds	r7, #8
 800a1e0:	46bd      	mov	sp, r7
 800a1e2:	bd80      	pop	{r7, pc}

0800a1e4 <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 800a1e4:	b580      	push	{r7, lr}
 800a1e6:	b086      	sub	sp, #24
 800a1e8:	af00      	add	r7, sp, #0
 800a1ea:	60f8      	str	r0, [r7, #12]
 800a1ec:	60b9      	str	r1, [r7, #8]
 800a1ee:	4613      	mov	r3, r2
 800a1f0:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 800a1f2:	2300      	movs	r3, #0
 800a1f4:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 800a1f6:	f107 0317 	add.w	r3, r7, #23
 800a1fa:	4619      	mov	r1, r3
 800a1fc:	68b8      	ldr	r0, [r7, #8]
 800a1fe:	f000 fe27 	bl	800ae50 <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 800a202:	68bb      	ldr	r3, [r7, #8]
 800a204:	781b      	ldrb	r3, [r3, #0]
 800a206:	79fa      	ldrb	r2, [r7, #7]
 800a208:	429a      	cmp	r2, r3
 800a20a:	d201      	bcs.n	800a210 <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 800a20c:	2301      	movs	r3, #1
 800a20e:	e007      	b.n	800a220 <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 800a210:	7df8      	ldrb	r0, [r7, #23]
 800a212:	68bb      	ldr	r3, [r7, #8]
 800a214:	781b      	ldrb	r3, [r3, #0]
 800a216:	461a      	mov	r2, r3
 800a218:	68f9      	ldr	r1, [r7, #12]
 800a21a:	f000 ff25 	bl	800b068 <SUBGRF_ReadBuffer>

    return 0;
 800a21e:	2300      	movs	r3, #0
}
 800a220:	4618      	mov	r0, r3
 800a222:	3718      	adds	r7, #24
 800a224:	46bd      	mov	sp, r7
 800a226:	bd80      	pop	{r7, pc}

0800a228 <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 800a228:	b580      	push	{r7, lr}
 800a22a:	b084      	sub	sp, #16
 800a22c:	af00      	add	r7, sp, #0
 800a22e:	60f8      	str	r0, [r7, #12]
 800a230:	460b      	mov	r3, r1
 800a232:	607a      	str	r2, [r7, #4]
 800a234:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 800a236:	7afb      	ldrb	r3, [r7, #11]
 800a238:	4619      	mov	r1, r3
 800a23a:	68f8      	ldr	r0, [r7, #12]
 800a23c:	f7ff ffc2 	bl	800a1c4 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 800a240:	6878      	ldr	r0, [r7, #4]
 800a242:	f000 f91b 	bl	800a47c <SUBGRF_SetTx>
}
 800a246:	bf00      	nop
 800a248:	3710      	adds	r7, #16
 800a24a:	46bd      	mov	sp, r7
 800a24c:	bd80      	pop	{r7, pc}

0800a24e <SUBGRF_SetSyncWord>:

uint8_t SUBGRF_SetSyncWord( uint8_t *syncWord )
{
 800a24e:	b580      	push	{r7, lr}
 800a250:	b082      	sub	sp, #8
 800a252:	af00      	add	r7, sp, #0
 800a254:	6078      	str	r0, [r7, #4]
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 800a256:	2208      	movs	r2, #8
 800a258:	6879      	ldr	r1, [r7, #4]
 800a25a:	f44f 60d8 	mov.w	r0, #1728	; 0x6c0
 800a25e:	f000 fe9d 	bl	800af9c <SUBGRF_WriteRegisters>
    return 0;
 800a262:	2300      	movs	r3, #0
}
 800a264:	4618      	mov	r0, r3
 800a266:	3708      	adds	r7, #8
 800a268:	46bd      	mov	sp, r7
 800a26a:	bd80      	pop	{r7, pc}

0800a26c <SUBGRF_SetCrcSeed>:

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 800a26c:	b580      	push	{r7, lr}
 800a26e:	b084      	sub	sp, #16
 800a270:	af00      	add	r7, sp, #0
 800a272:	4603      	mov	r3, r0
 800a274:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 800a276:	88fb      	ldrh	r3, [r7, #6]
 800a278:	0a1b      	lsrs	r3, r3, #8
 800a27a:	b29b      	uxth	r3, r3
 800a27c:	b2db      	uxtb	r3, r3
 800a27e:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 800a280:	88fb      	ldrh	r3, [r7, #6]
 800a282:	b2db      	uxtb	r3, r3
 800a284:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 800a286:	f000 fb6f 	bl	800a968 <SUBGRF_GetPacketType>
 800a28a:	4603      	mov	r3, r0
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d108      	bne.n	800a2a2 <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 800a290:	f107 030c 	add.w	r3, r7, #12
 800a294:	2202      	movs	r2, #2
 800a296:	4619      	mov	r1, r3
 800a298:	f240 60bc 	movw	r0, #1724	; 0x6bc
 800a29c:	f000 fe7e 	bl	800af9c <SUBGRF_WriteRegisters>
            break;
 800a2a0:	e000      	b.n	800a2a4 <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 800a2a2:	bf00      	nop
    }
}
 800a2a4:	bf00      	nop
 800a2a6:	3710      	adds	r7, #16
 800a2a8:	46bd      	mov	sp, r7
 800a2aa:	bd80      	pop	{r7, pc}

0800a2ac <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 800a2ac:	b580      	push	{r7, lr}
 800a2ae:	b084      	sub	sp, #16
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	4603      	mov	r3, r0
 800a2b4:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 800a2b6:	88fb      	ldrh	r3, [r7, #6]
 800a2b8:	0a1b      	lsrs	r3, r3, #8
 800a2ba:	b29b      	uxth	r3, r3
 800a2bc:	b2db      	uxtb	r3, r3
 800a2be:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 800a2c0:	88fb      	ldrh	r3, [r7, #6]
 800a2c2:	b2db      	uxtb	r3, r3
 800a2c4:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 800a2c6:	f000 fb4f 	bl	800a968 <SUBGRF_GetPacketType>
 800a2ca:	4603      	mov	r3, r0
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d108      	bne.n	800a2e2 <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 800a2d0:	f107 030c 	add.w	r3, r7, #12
 800a2d4:	2202      	movs	r2, #2
 800a2d6:	4619      	mov	r1, r3
 800a2d8:	f240 60be 	movw	r0, #1726	; 0x6be
 800a2dc:	f000 fe5e 	bl	800af9c <SUBGRF_WriteRegisters>
            break;
 800a2e0:	e000      	b.n	800a2e4 <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 800a2e2:	bf00      	nop
    }
}
 800a2e4:	bf00      	nop
 800a2e6:	3710      	adds	r7, #16
 800a2e8:	46bd      	mov	sp, r7
 800a2ea:	bd80      	pop	{r7, pc}

0800a2ec <SUBGRF_SetWhiteningSeed>:

void SUBGRF_SetWhiteningSeed( uint16_t seed )
{
 800a2ec:	b580      	push	{r7, lr}
 800a2ee:	b084      	sub	sp, #16
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	4603      	mov	r3, r0
 800a2f4:	80fb      	strh	r3, [r7, #6]
    uint8_t regValue = 0;
 800a2f6:	2300      	movs	r3, #0
 800a2f8:	73fb      	strb	r3, [r7, #15]

    switch( SUBGRF_GetPacketType( ) )
 800a2fa:	f000 fb35 	bl	800a968 <SUBGRF_GetPacketType>
 800a2fe:	4603      	mov	r3, r0
 800a300:	2b00      	cmp	r3, #0
 800a302:	d121      	bne.n	800a348 <SUBGRF_SetWhiteningSeed+0x5c>
    {
        case PACKET_TYPE_GFSK:
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 800a304:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 800a308:	f000 fe34 	bl	800af74 <SUBGRF_ReadRegister>
 800a30c:	4603      	mov	r3, r0
 800a30e:	f023 0301 	bic.w	r3, r3, #1
 800a312:	73fb      	strb	r3, [r7, #15]
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 800a314:	88fb      	ldrh	r3, [r7, #6]
 800a316:	0a1b      	lsrs	r3, r3, #8
 800a318:	b29b      	uxth	r3, r3
 800a31a:	b25b      	sxtb	r3, r3
 800a31c:	f003 0301 	and.w	r3, r3, #1
 800a320:	b25a      	sxtb	r2, r3
 800a322:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a326:	4313      	orrs	r3, r2
 800a328:	b25b      	sxtb	r3, r3
 800a32a:	73fb      	strb	r3, [r7, #15]
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 800a32c:	7bfb      	ldrb	r3, [r7, #15]
 800a32e:	4619      	mov	r1, r3
 800a330:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 800a334:	f000 fe0a 	bl	800af4c <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 800a338:	88fb      	ldrh	r3, [r7, #6]
 800a33a:	b2db      	uxtb	r3, r3
 800a33c:	4619      	mov	r1, r3
 800a33e:	f240 60b9 	movw	r0, #1721	; 0x6b9
 800a342:	f000 fe03 	bl	800af4c <SUBGRF_WriteRegister>
            break;
 800a346:	e000      	b.n	800a34a <SUBGRF_SetWhiteningSeed+0x5e>

        default:
            break;
 800a348:	bf00      	nop
    }
}
 800a34a:	bf00      	nop
 800a34c:	3710      	adds	r7, #16
 800a34e:	46bd      	mov	sp, r7
 800a350:	bd80      	pop	{r7, pc}

0800a352 <SUBGRF_GetRandom>:

uint32_t SUBGRF_GetRandom( void )
{
 800a352:	b580      	push	{r7, lr}
 800a354:	b082      	sub	sp, #8
 800a356:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 800a358:	2300      	movs	r3, #0
 800a35a:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 800a35c:	2300      	movs	r3, #0
 800a35e:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 800a360:	2300      	movs	r3, #0
 800a362:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 800a364:	f640 00e2 	movw	r0, #2274	; 0x8e2
 800a368:	f000 fe04 	bl	800af74 <SUBGRF_ReadRegister>
 800a36c:	4603      	mov	r3, r0
 800a36e:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 800a370:	79fb      	ldrb	r3, [r7, #7]
 800a372:	f023 0301 	bic.w	r3, r3, #1
 800a376:	b2db      	uxtb	r3, r3
 800a378:	4619      	mov	r1, r3
 800a37a:	f640 00e2 	movw	r0, #2274	; 0x8e2
 800a37e:	f000 fde5 	bl	800af4c <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 800a382:	f640 00e5 	movw	r0, #2277	; 0x8e5
 800a386:	f000 fdf5 	bl	800af74 <SUBGRF_ReadRegister>
 800a38a:	4603      	mov	r3, r0
 800a38c:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 800a38e:	79bb      	ldrb	r3, [r7, #6]
 800a390:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a394:	b2db      	uxtb	r3, r3
 800a396:	4619      	mov	r1, r3
 800a398:	f640 00e5 	movw	r0, #2277	; 0x8e5
 800a39c:	f000 fdd6 	bl	800af4c <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 800a3a0:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800a3a4:	f000 f88a 	bl	800a4bc <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 800a3a8:	463b      	mov	r3, r7
 800a3aa:	2204      	movs	r2, #4
 800a3ac:	4619      	mov	r1, r3
 800a3ae:	f640 0019 	movw	r0, #2073	; 0x819
 800a3b2:	f000 fe15 	bl	800afe0 <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 800a3b6:	2000      	movs	r0, #0
 800a3b8:	f000 f844 	bl	800a444 <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 800a3bc:	79fb      	ldrb	r3, [r7, #7]
 800a3be:	4619      	mov	r1, r3
 800a3c0:	f640 00e2 	movw	r0, #2274	; 0x8e2
 800a3c4:	f000 fdc2 	bl	800af4c <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 800a3c8:	79bb      	ldrb	r3, [r7, #6]
 800a3ca:	4619      	mov	r1, r3
 800a3cc:	f640 00e5 	movw	r0, #2277	; 0x8e5
 800a3d0:	f000 fdbc 	bl	800af4c <SUBGRF_WriteRegister>

    return number;
 800a3d4:	683b      	ldr	r3, [r7, #0]
}
 800a3d6:	4618      	mov	r0, r3
 800a3d8:	3708      	adds	r7, #8
 800a3da:	46bd      	mov	sp, r7
 800a3dc:	bd80      	pop	{r7, pc}
	...

0800a3e0 <SUBGRF_SetSleep>:

void SUBGRF_SetSleep( SleepParams_t sleepConfig )
{
 800a3e0:	b580      	push	{r7, lr}
 800a3e2:	b084      	sub	sp, #16
 800a3e4:	af00      	add	r7, sp, #0
 800a3e6:	7138      	strb	r0, [r7, #4]
    /* switch the antenna OFF by SW */
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 800a3e8:	2000      	movs	r0, #0
 800a3ea:	f001 f999 	bl	800b720 <RBI_ConfigRFSwitch>

    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 800a3ee:	2002      	movs	r0, #2
 800a3f0:	f000 ffa4 	bl	800b33c <Radio_SMPS_Set>

    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 800a3f4:	793b      	ldrb	r3, [r7, #4]
 800a3f6:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800a3fa:	b2db      	uxtb	r3, r3
 800a3fc:	009b      	lsls	r3, r3, #2
 800a3fe:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 800a400:	793b      	ldrb	r3, [r7, #4]
 800a402:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800a406:	b2db      	uxtb	r3, r3
 800a408:	005b      	lsls	r3, r3, #1
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 800a40a:	b25b      	sxtb	r3, r3
 800a40c:	4313      	orrs	r3, r2
 800a40e:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 800a410:	793b      	ldrb	r3, [r7, #4]
 800a412:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800a416:	b2db      	uxtb	r3, r3
 800a418:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 800a41a:	4313      	orrs	r3, r2
 800a41c:	b25b      	sxtb	r3, r3
 800a41e:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 800a420:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 800a422:	f107 030f 	add.w	r3, r7, #15
 800a426:	2201      	movs	r2, #1
 800a428:	4619      	mov	r1, r3
 800a42a:	2084      	movs	r0, #132	; 0x84
 800a42c:	f000 fe3e 	bl	800b0ac <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 800a430:	4b03      	ldr	r3, [pc, #12]	; (800a440 <SUBGRF_SetSleep+0x60>)
 800a432:	2200      	movs	r2, #0
 800a434:	701a      	strb	r2, [r3, #0]
}
 800a436:	bf00      	nop
 800a438:	3710      	adds	r7, #16
 800a43a:	46bd      	mov	sp, r7
 800a43c:	bd80      	pop	{r7, pc}
 800a43e:	bf00      	nop
 800a440:	20000af0 	.word	0x20000af0

0800a444 <SUBGRF_SetStandby>:

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 800a444:	b580      	push	{r7, lr}
 800a446:	b082      	sub	sp, #8
 800a448:	af00      	add	r7, sp, #0
 800a44a:	4603      	mov	r3, r0
 800a44c:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 800a44e:	1dfb      	adds	r3, r7, #7
 800a450:	2201      	movs	r2, #1
 800a452:	4619      	mov	r1, r3
 800a454:	2080      	movs	r0, #128	; 0x80
 800a456:	f000 fe29 	bl	800b0ac <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 800a45a:	79fb      	ldrb	r3, [r7, #7]
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d103      	bne.n	800a468 <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 800a460:	4b05      	ldr	r3, [pc, #20]	; (800a478 <SUBGRF_SetStandby+0x34>)
 800a462:	2201      	movs	r2, #1
 800a464:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 800a466:	e002      	b.n	800a46e <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 800a468:	4b03      	ldr	r3, [pc, #12]	; (800a478 <SUBGRF_SetStandby+0x34>)
 800a46a:	2202      	movs	r2, #2
 800a46c:	701a      	strb	r2, [r3, #0]
}
 800a46e:	bf00      	nop
 800a470:	3708      	adds	r7, #8
 800a472:	46bd      	mov	sp, r7
 800a474:	bd80      	pop	{r7, pc}
 800a476:	bf00      	nop
 800a478:	20000af0 	.word	0x20000af0

0800a47c <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 800a47c:	b580      	push	{r7, lr}
 800a47e:	b084      	sub	sp, #16
 800a480:	af00      	add	r7, sp, #0
 800a482:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 800a484:	4b0c      	ldr	r3, [pc, #48]	; (800a4b8 <SUBGRF_SetTx+0x3c>)
 800a486:	2204      	movs	r2, #4
 800a488:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	0c1b      	lsrs	r3, r3, #16
 800a48e:	b2db      	uxtb	r3, r3
 800a490:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	0a1b      	lsrs	r3, r3, #8
 800a496:	b2db      	uxtb	r3, r3
 800a498:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	b2db      	uxtb	r3, r3
 800a49e:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 800a4a0:	f107 030c 	add.w	r3, r7, #12
 800a4a4:	2203      	movs	r2, #3
 800a4a6:	4619      	mov	r1, r3
 800a4a8:	2083      	movs	r0, #131	; 0x83
 800a4aa:	f000 fdff 	bl	800b0ac <SUBGRF_WriteCommand>
}
 800a4ae:	bf00      	nop
 800a4b0:	3710      	adds	r7, #16
 800a4b2:	46bd      	mov	sp, r7
 800a4b4:	bd80      	pop	{r7, pc}
 800a4b6:	bf00      	nop
 800a4b8:	20000af0 	.word	0x20000af0

0800a4bc <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 800a4bc:	b580      	push	{r7, lr}
 800a4be:	b084      	sub	sp, #16
 800a4c0:	af00      	add	r7, sp, #0
 800a4c2:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 800a4c4:	4b0c      	ldr	r3, [pc, #48]	; (800a4f8 <SUBGRF_SetRx+0x3c>)
 800a4c6:	2205      	movs	r2, #5
 800a4c8:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	0c1b      	lsrs	r3, r3, #16
 800a4ce:	b2db      	uxtb	r3, r3
 800a4d0:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	0a1b      	lsrs	r3, r3, #8
 800a4d6:	b2db      	uxtb	r3, r3
 800a4d8:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	b2db      	uxtb	r3, r3
 800a4de:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 800a4e0:	f107 030c 	add.w	r3, r7, #12
 800a4e4:	2203      	movs	r2, #3
 800a4e6:	4619      	mov	r1, r3
 800a4e8:	2082      	movs	r0, #130	; 0x82
 800a4ea:	f000 fddf 	bl	800b0ac <SUBGRF_WriteCommand>
}
 800a4ee:	bf00      	nop
 800a4f0:	3710      	adds	r7, #16
 800a4f2:	46bd      	mov	sp, r7
 800a4f4:	bd80      	pop	{r7, pc}
 800a4f6:	bf00      	nop
 800a4f8:	20000af0 	.word	0x20000af0

0800a4fc <SUBGRF_SetRxBoosted>:

void SUBGRF_SetRxBoosted( uint32_t timeout )
{
 800a4fc:	b580      	push	{r7, lr}
 800a4fe:	b084      	sub	sp, #16
 800a500:	af00      	add	r7, sp, #0
 800a502:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 800a504:	4b0e      	ldr	r3, [pc, #56]	; (800a540 <SUBGRF_SetRxBoosted+0x44>)
 800a506:	2205      	movs	r2, #5
 800a508:	701a      	strb	r2, [r3, #0]

    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 800a50a:	2197      	movs	r1, #151	; 0x97
 800a50c:	f640 00ac 	movw	r0, #2220	; 0x8ac
 800a510:	f000 fd1c 	bl	800af4c <SUBGRF_WriteRegister>

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	0c1b      	lsrs	r3, r3, #16
 800a518:	b2db      	uxtb	r3, r3
 800a51a:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	0a1b      	lsrs	r3, r3, #8
 800a520:	b2db      	uxtb	r3, r3
 800a522:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	b2db      	uxtb	r3, r3
 800a528:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 800a52a:	f107 030c 	add.w	r3, r7, #12
 800a52e:	2203      	movs	r2, #3
 800a530:	4619      	mov	r1, r3
 800a532:	2082      	movs	r0, #130	; 0x82
 800a534:	f000 fdba 	bl	800b0ac <SUBGRF_WriteCommand>
}
 800a538:	bf00      	nop
 800a53a:	3710      	adds	r7, #16
 800a53c:	46bd      	mov	sp, r7
 800a53e:	bd80      	pop	{r7, pc}
 800a540:	20000af0 	.word	0x20000af0

0800a544 <SUBGRF_SetRxDutyCycle>:

void SUBGRF_SetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 800a544:	b580      	push	{r7, lr}
 800a546:	b084      	sub	sp, #16
 800a548:	af00      	add	r7, sp, #0
 800a54a:	6078      	str	r0, [r7, #4]
 800a54c:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];

    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	0c1b      	lsrs	r3, r3, #16
 800a552:	b2db      	uxtb	r3, r3
 800a554:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	0a1b      	lsrs	r3, r3, #8
 800a55a:	b2db      	uxtb	r3, r3
 800a55c:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	b2db      	uxtb	r3, r3
 800a562:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 800a564:	683b      	ldr	r3, [r7, #0]
 800a566:	0c1b      	lsrs	r3, r3, #16
 800a568:	b2db      	uxtb	r3, r3
 800a56a:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 800a56c:	683b      	ldr	r3, [r7, #0]
 800a56e:	0a1b      	lsrs	r3, r3, #8
 800a570:	b2db      	uxtb	r3, r3
 800a572:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 800a574:	683b      	ldr	r3, [r7, #0]
 800a576:	b2db      	uxtb	r3, r3
 800a578:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 800a57a:	f107 0308 	add.w	r3, r7, #8
 800a57e:	2206      	movs	r2, #6
 800a580:	4619      	mov	r1, r3
 800a582:	2094      	movs	r0, #148	; 0x94
 800a584:	f000 fd92 	bl	800b0ac <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 800a588:	4b03      	ldr	r3, [pc, #12]	; (800a598 <SUBGRF_SetRxDutyCycle+0x54>)
 800a58a:	2206      	movs	r2, #6
 800a58c:	701a      	strb	r2, [r3, #0]
}
 800a58e:	bf00      	nop
 800a590:	3710      	adds	r7, #16
 800a592:	46bd      	mov	sp, r7
 800a594:	bd80      	pop	{r7, pc}
 800a596:	bf00      	nop
 800a598:	20000af0 	.word	0x20000af0

0800a59c <SUBGRF_SetCad>:

void SUBGRF_SetCad( void )
{
 800a59c:	b580      	push	{r7, lr}
 800a59e:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 800a5a0:	2200      	movs	r2, #0
 800a5a2:	2100      	movs	r1, #0
 800a5a4:	20c5      	movs	r0, #197	; 0xc5
 800a5a6:	f000 fd81 	bl	800b0ac <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 800a5aa:	4b02      	ldr	r3, [pc, #8]	; (800a5b4 <SUBGRF_SetCad+0x18>)
 800a5ac:	2207      	movs	r2, #7
 800a5ae:	701a      	strb	r2, [r3, #0]
}
 800a5b0:	bf00      	nop
 800a5b2:	bd80      	pop	{r7, pc}
 800a5b4:	20000af0 	.word	0x20000af0

0800a5b8 <SUBGRF_SetTxContinuousWave>:

void SUBGRF_SetTxContinuousWave( void )
{
 800a5b8:	b580      	push	{r7, lr}
 800a5ba:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 800a5bc:	2200      	movs	r2, #0
 800a5be:	2100      	movs	r1, #0
 800a5c0:	20d1      	movs	r0, #209	; 0xd1
 800a5c2:	f000 fd73 	bl	800b0ac <SUBGRF_WriteCommand>
}
 800a5c6:	bf00      	nop
 800a5c8:	bd80      	pop	{r7, pc}

0800a5ca <SUBGRF_SetTxInfinitePreamble>:

void SUBGRF_SetTxInfinitePreamble( void )
{
 800a5ca:	b580      	push	{r7, lr}
 800a5cc:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 800a5ce:	2200      	movs	r2, #0
 800a5d0:	2100      	movs	r1, #0
 800a5d2:	20d2      	movs	r0, #210	; 0xd2
 800a5d4:	f000 fd6a 	bl	800b0ac <SUBGRF_WriteCommand>
}
 800a5d8:	bf00      	nop
 800a5da:	bd80      	pop	{r7, pc}

0800a5dc <SUBGRF_SetStopRxTimerOnPreambleDetect>:

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 800a5dc:	b580      	push	{r7, lr}
 800a5de:	b082      	sub	sp, #8
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	4603      	mov	r3, r0
 800a5e4:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 800a5e6:	1dfb      	adds	r3, r7, #7
 800a5e8:	2201      	movs	r2, #1
 800a5ea:	4619      	mov	r1, r3
 800a5ec:	209f      	movs	r0, #159	; 0x9f
 800a5ee:	f000 fd5d 	bl	800b0ac <SUBGRF_WriteCommand>
}
 800a5f2:	bf00      	nop
 800a5f4:	3708      	adds	r7, #8
 800a5f6:	46bd      	mov	sp, r7
 800a5f8:	bd80      	pop	{r7, pc}

0800a5fa <SUBGRF_SetLoRaSymbNumTimeout>:

void SUBGRF_SetLoRaSymbNumTimeout( uint8_t symbNum )
{
 800a5fa:	b580      	push	{r7, lr}
 800a5fc:	b084      	sub	sp, #16
 800a5fe:	af00      	add	r7, sp, #0
 800a600:	4603      	mov	r3, r0
 800a602:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 800a604:	1dfb      	adds	r3, r7, #7
 800a606:	2201      	movs	r2, #1
 800a608:	4619      	mov	r1, r3
 800a60a:	20a0      	movs	r0, #160	; 0xa0
 800a60c:	f000 fd4e 	bl	800b0ac <SUBGRF_WriteCommand>

    if( symbNum >= 64 )
 800a610:	79fb      	ldrb	r3, [r7, #7]
 800a612:	2b3f      	cmp	r3, #63	; 0x3f
 800a614:	d91c      	bls.n	800a650 <SUBGRF_SetLoRaSymbNumTimeout+0x56>
    {
        uint8_t mant = symbNum >> 1;
 800a616:	79fb      	ldrb	r3, [r7, #7]
 800a618:	085b      	lsrs	r3, r3, #1
 800a61a:	73fb      	strb	r3, [r7, #15]
        uint8_t exp  = 0;
 800a61c:	2300      	movs	r3, #0
 800a61e:	73bb      	strb	r3, [r7, #14]
        uint8_t reg  = 0;
 800a620:	2300      	movs	r3, #0
 800a622:	737b      	strb	r3, [r7, #13]

        while( mant > 31 )
 800a624:	e005      	b.n	800a632 <SUBGRF_SetLoRaSymbNumTimeout+0x38>
        {
            mant >>= 2;
 800a626:	7bfb      	ldrb	r3, [r7, #15]
 800a628:	089b      	lsrs	r3, r3, #2
 800a62a:	73fb      	strb	r3, [r7, #15]
            exp++;
 800a62c:	7bbb      	ldrb	r3, [r7, #14]
 800a62e:	3301      	adds	r3, #1
 800a630:	73bb      	strb	r3, [r7, #14]
        while( mant > 31 )
 800a632:	7bfb      	ldrb	r3, [r7, #15]
 800a634:	2b1f      	cmp	r3, #31
 800a636:	d8f6      	bhi.n	800a626 <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
        }

        reg = exp + ( mant << 3 );
 800a638:	7bfb      	ldrb	r3, [r7, #15]
 800a63a:	00db      	lsls	r3, r3, #3
 800a63c:	b2da      	uxtb	r2, r3
 800a63e:	7bbb      	ldrb	r3, [r7, #14]
 800a640:	4413      	add	r3, r2
 800a642:	737b      	strb	r3, [r7, #13]
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 800a644:	7b7b      	ldrb	r3, [r7, #13]
 800a646:	4619      	mov	r1, r3
 800a648:	f240 7006 	movw	r0, #1798	; 0x706
 800a64c:	f000 fc7e 	bl	800af4c <SUBGRF_WriteRegister>
    }
}
 800a650:	bf00      	nop
 800a652:	3710      	adds	r7, #16
 800a654:	46bd      	mov	sp, r7
 800a656:	bd80      	pop	{r7, pc}

0800a658 <SUBGRF_SetRegulatorMode>:

void SUBGRF_SetRegulatorMode( void )
{
 800a658:	b580      	push	{r7, lr}
 800a65a:	b082      	sub	sp, #8
 800a65c:	af00      	add	r7, sp, #0
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 800a65e:	f001 f8bf 	bl	800b7e0 <RBI_IsDCDC>
 800a662:	4603      	mov	r3, r0
 800a664:	2b01      	cmp	r3, #1
 800a666:	d102      	bne.n	800a66e <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 800a668:	2301      	movs	r3, #1
 800a66a:	71fb      	strb	r3, [r7, #7]
 800a66c:	e001      	b.n	800a672 <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 800a66e:	2300      	movs	r3, #0
 800a670:	71fb      	strb	r3, [r7, #7]
    }
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 800a672:	1dfb      	adds	r3, r7, #7
 800a674:	2201      	movs	r2, #1
 800a676:	4619      	mov	r1, r3
 800a678:	2096      	movs	r0, #150	; 0x96
 800a67a:	f000 fd17 	bl	800b0ac <SUBGRF_WriteCommand>
}
 800a67e:	bf00      	nop
 800a680:	3708      	adds	r7, #8
 800a682:	46bd      	mov	sp, r7
 800a684:	bd80      	pop	{r7, pc}

0800a686 <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 800a686:	b580      	push	{r7, lr}
 800a688:	b084      	sub	sp, #16
 800a68a:	af00      	add	r7, sp, #0
 800a68c:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800a68e:	793b      	ldrb	r3, [r7, #4]
 800a690:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800a694:	b2db      	uxtb	r3, r3
 800a696:	019b      	lsls	r3, r3, #6
 800a698:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 800a69a:	793b      	ldrb	r3, [r7, #4]
 800a69c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800a6a0:	b2db      	uxtb	r3, r3
 800a6a2:	015b      	lsls	r3, r3, #5
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800a6a4:	b25b      	sxtb	r3, r3
 800a6a6:	4313      	orrs	r3, r2
 800a6a8:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 800a6aa:	793b      	ldrb	r3, [r7, #4]
 800a6ac:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800a6b0:	b2db      	uxtb	r3, r3
 800a6b2:	011b      	lsls	r3, r3, #4
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 800a6b4:	b25b      	sxtb	r3, r3
 800a6b6:	4313      	orrs	r3, r2
 800a6b8:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 800a6ba:	793b      	ldrb	r3, [r7, #4]
 800a6bc:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800a6c0:	b2db      	uxtb	r3, r3
 800a6c2:	00db      	lsls	r3, r3, #3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 800a6c4:	b25b      	sxtb	r3, r3
 800a6c6:	4313      	orrs	r3, r2
 800a6c8:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 800a6ca:	793b      	ldrb	r3, [r7, #4]
 800a6cc:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800a6d0:	b2db      	uxtb	r3, r3
 800a6d2:	009b      	lsls	r3, r3, #2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 800a6d4:	b25b      	sxtb	r3, r3
 800a6d6:	4313      	orrs	r3, r2
 800a6d8:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 800a6da:	793b      	ldrb	r3, [r7, #4]
 800a6dc:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800a6e0:	b2db      	uxtb	r3, r3
 800a6e2:	005b      	lsls	r3, r3, #1
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 800a6e4:	b25b      	sxtb	r3, r3
 800a6e6:	4313      	orrs	r3, r2
 800a6e8:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 800a6ea:	793b      	ldrb	r3, [r7, #4]
 800a6ec:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800a6f0:	b2db      	uxtb	r3, r3
 800a6f2:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 800a6f4:	4313      	orrs	r3, r2
 800a6f6:	b25b      	sxtb	r3, r3
 800a6f8:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800a6fa:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 800a6fc:	f107 030f 	add.w	r3, r7, #15
 800a700:	2201      	movs	r2, #1
 800a702:	4619      	mov	r1, r3
 800a704:	2089      	movs	r0, #137	; 0x89
 800a706:	f000 fcd1 	bl	800b0ac <SUBGRF_WriteCommand>
}
 800a70a:	bf00      	nop
 800a70c:	3710      	adds	r7, #16
 800a70e:	46bd      	mov	sp, r7
 800a710:	bd80      	pop	{r7, pc}
	...

0800a714 <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 800a714:	b580      	push	{r7, lr}
 800a716:	b084      	sub	sp, #16
 800a718:	af00      	add	r7, sp, #0
 800a71a:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	4a1d      	ldr	r2, [pc, #116]	; (800a794 <SUBGRF_CalibrateImage+0x80>)
 800a720:	4293      	cmp	r3, r2
 800a722:	d904      	bls.n	800a72e <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 800a724:	23e1      	movs	r3, #225	; 0xe1
 800a726:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 800a728:	23e9      	movs	r3, #233	; 0xe9
 800a72a:	737b      	strb	r3, [r7, #13]
 800a72c:	e027      	b.n	800a77e <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 850000000 )
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	4a19      	ldr	r2, [pc, #100]	; (800a798 <SUBGRF_CalibrateImage+0x84>)
 800a732:	4293      	cmp	r3, r2
 800a734:	d904      	bls.n	800a740 <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 800a736:	23d7      	movs	r3, #215	; 0xd7
 800a738:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 800a73a:	23db      	movs	r3, #219	; 0xdb
 800a73c:	737b      	strb	r3, [r7, #13]
 800a73e:	e01e      	b.n	800a77e <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 770000000 )
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	4a16      	ldr	r2, [pc, #88]	; (800a79c <SUBGRF_CalibrateImage+0x88>)
 800a744:	4293      	cmp	r3, r2
 800a746:	d904      	bls.n	800a752 <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 800a748:	23c1      	movs	r3, #193	; 0xc1
 800a74a:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 800a74c:	23c5      	movs	r3, #197	; 0xc5
 800a74e:	737b      	strb	r3, [r7, #13]
 800a750:	e015      	b.n	800a77e <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 460000000 )
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	4a12      	ldr	r2, [pc, #72]	; (800a7a0 <SUBGRF_CalibrateImage+0x8c>)
 800a756:	4293      	cmp	r3, r2
 800a758:	d904      	bls.n	800a764 <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 800a75a:	2375      	movs	r3, #117	; 0x75
 800a75c:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 800a75e:	2381      	movs	r3, #129	; 0x81
 800a760:	737b      	strb	r3, [r7, #13]
 800a762:	e00c      	b.n	800a77e <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 425000000 )
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	4a0f      	ldr	r2, [pc, #60]	; (800a7a4 <SUBGRF_CalibrateImage+0x90>)
 800a768:	4293      	cmp	r3, r2
 800a76a:	d904      	bls.n	800a776 <SUBGRF_CalibrateImage+0x62>
    {
        calFreq[0] = 0x6B;
 800a76c:	236b      	movs	r3, #107	; 0x6b
 800a76e:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 800a770:	236f      	movs	r3, #111	; 0x6f
 800a772:	737b      	strb	r3, [r7, #13]
 800a774:	e003      	b.n	800a77e <SUBGRF_CalibrateImage+0x6a>
    }
    else /* freq <= 425000000*/
    {
        /* [ 156MHz - 171MHz ] */
        calFreq[0] = 0x29;
 800a776:	2329      	movs	r3, #41	; 0x29
 800a778:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x2B ;
 800a77a:	232b      	movs	r3, #43	; 0x2b
 800a77c:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 800a77e:	f107 030c 	add.w	r3, r7, #12
 800a782:	2202      	movs	r2, #2
 800a784:	4619      	mov	r1, r3
 800a786:	2098      	movs	r0, #152	; 0x98
 800a788:	f000 fc90 	bl	800b0ac <SUBGRF_WriteCommand>
}
 800a78c:	bf00      	nop
 800a78e:	3710      	adds	r7, #16
 800a790:	46bd      	mov	sp, r7
 800a792:	bd80      	pop	{r7, pc}
 800a794:	35a4e900 	.word	0x35a4e900
 800a798:	32a9f880 	.word	0x32a9f880
 800a79c:	2de54480 	.word	0x2de54480
 800a7a0:	1b6b0b00 	.word	0x1b6b0b00
 800a7a4:	1954fc40 	.word	0x1954fc40

0800a7a8 <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 800a7a8:	b590      	push	{r4, r7, lr}
 800a7aa:	b085      	sub	sp, #20
 800a7ac:	af00      	add	r7, sp, #0
 800a7ae:	4604      	mov	r4, r0
 800a7b0:	4608      	mov	r0, r1
 800a7b2:	4611      	mov	r1, r2
 800a7b4:	461a      	mov	r2, r3
 800a7b6:	4623      	mov	r3, r4
 800a7b8:	71fb      	strb	r3, [r7, #7]
 800a7ba:	4603      	mov	r3, r0
 800a7bc:	71bb      	strb	r3, [r7, #6]
 800a7be:	460b      	mov	r3, r1
 800a7c0:	717b      	strb	r3, [r7, #5]
 800a7c2:	4613      	mov	r3, r2
 800a7c4:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 800a7c6:	79fb      	ldrb	r3, [r7, #7]
 800a7c8:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 800a7ca:	79bb      	ldrb	r3, [r7, #6]
 800a7cc:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 800a7ce:	797b      	ldrb	r3, [r7, #5]
 800a7d0:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 800a7d2:	793b      	ldrb	r3, [r7, #4]
 800a7d4:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 800a7d6:	f107 030c 	add.w	r3, r7, #12
 800a7da:	2204      	movs	r2, #4
 800a7dc:	4619      	mov	r1, r3
 800a7de:	2095      	movs	r0, #149	; 0x95
 800a7e0:	f000 fc64 	bl	800b0ac <SUBGRF_WriteCommand>
}
 800a7e4:	bf00      	nop
 800a7e6:	3714      	adds	r7, #20
 800a7e8:	46bd      	mov	sp, r7
 800a7ea:	bd90      	pop	{r4, r7, pc}

0800a7ec <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 800a7ec:	b590      	push	{r4, r7, lr}
 800a7ee:	b085      	sub	sp, #20
 800a7f0:	af00      	add	r7, sp, #0
 800a7f2:	4604      	mov	r4, r0
 800a7f4:	4608      	mov	r0, r1
 800a7f6:	4611      	mov	r1, r2
 800a7f8:	461a      	mov	r2, r3
 800a7fa:	4623      	mov	r3, r4
 800a7fc:	80fb      	strh	r3, [r7, #6]
 800a7fe:	4603      	mov	r3, r0
 800a800:	80bb      	strh	r3, [r7, #4]
 800a802:	460b      	mov	r3, r1
 800a804:	807b      	strh	r3, [r7, #2]
 800a806:	4613      	mov	r3, r2
 800a808:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 800a80a:	88fb      	ldrh	r3, [r7, #6]
 800a80c:	0a1b      	lsrs	r3, r3, #8
 800a80e:	b29b      	uxth	r3, r3
 800a810:	b2db      	uxtb	r3, r3
 800a812:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 800a814:	88fb      	ldrh	r3, [r7, #6]
 800a816:	b2db      	uxtb	r3, r3
 800a818:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 800a81a:	88bb      	ldrh	r3, [r7, #4]
 800a81c:	0a1b      	lsrs	r3, r3, #8
 800a81e:	b29b      	uxth	r3, r3
 800a820:	b2db      	uxtb	r3, r3
 800a822:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 800a824:	88bb      	ldrh	r3, [r7, #4]
 800a826:	b2db      	uxtb	r3, r3
 800a828:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 800a82a:	887b      	ldrh	r3, [r7, #2]
 800a82c:	0a1b      	lsrs	r3, r3, #8
 800a82e:	b29b      	uxth	r3, r3
 800a830:	b2db      	uxtb	r3, r3
 800a832:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 800a834:	887b      	ldrh	r3, [r7, #2]
 800a836:	b2db      	uxtb	r3, r3
 800a838:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 800a83a:	883b      	ldrh	r3, [r7, #0]
 800a83c:	0a1b      	lsrs	r3, r3, #8
 800a83e:	b29b      	uxth	r3, r3
 800a840:	b2db      	uxtb	r3, r3
 800a842:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 800a844:	883b      	ldrh	r3, [r7, #0]
 800a846:	b2db      	uxtb	r3, r3
 800a848:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 800a84a:	f107 0308 	add.w	r3, r7, #8
 800a84e:	2208      	movs	r2, #8
 800a850:	4619      	mov	r1, r3
 800a852:	2008      	movs	r0, #8
 800a854:	f000 fc2a 	bl	800b0ac <SUBGRF_WriteCommand>
}
 800a858:	bf00      	nop
 800a85a:	3714      	adds	r7, #20
 800a85c:	46bd      	mov	sp, r7
 800a85e:	bd90      	pop	{r4, r7, pc}

0800a860 <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 800a860:	b580      	push	{r7, lr}
 800a862:	b084      	sub	sp, #16
 800a864:	af00      	add	r7, sp, #0
 800a866:	4603      	mov	r3, r0
 800a868:	6039      	str	r1, [r7, #0]
 800a86a:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 800a86c:	79fb      	ldrb	r3, [r7, #7]
 800a86e:	f003 0307 	and.w	r3, r3, #7
 800a872:	b2db      	uxtb	r3, r3
 800a874:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800a876:	683b      	ldr	r3, [r7, #0]
 800a878:	0c1b      	lsrs	r3, r3, #16
 800a87a:	b2db      	uxtb	r3, r3
 800a87c:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800a87e:	683b      	ldr	r3, [r7, #0]
 800a880:	0a1b      	lsrs	r3, r3, #8
 800a882:	b2db      	uxtb	r3, r3
 800a884:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 800a886:	683b      	ldr	r3, [r7, #0]
 800a888:	b2db      	uxtb	r3, r3
 800a88a:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 800a88c:	f107 030c 	add.w	r3, r7, #12
 800a890:	2204      	movs	r2, #4
 800a892:	4619      	mov	r1, r3
 800a894:	2097      	movs	r0, #151	; 0x97
 800a896:	f000 fc09 	bl	800b0ac <SUBGRF_WriteCommand>
}
 800a89a:	bf00      	nop
 800a89c:	3710      	adds	r7, #16
 800a89e:	46bd      	mov	sp, r7
 800a8a0:	bd80      	pop	{r7, pc}
	...

0800a8a4 <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 800a8a4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800a8a8:	b084      	sub	sp, #16
 800a8aa:	af00      	add	r7, sp, #0
 800a8ac:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 800a8ae:	2300      	movs	r3, #0
 800a8b0:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 800a8b2:	4b1d      	ldr	r3, [pc, #116]	; (800a928 <SUBGRF_SetRfFrequency+0x84>)
 800a8b4:	781b      	ldrb	r3, [r3, #0]
 800a8b6:	f083 0301 	eor.w	r3, r3, #1
 800a8ba:	b2db      	uxtb	r3, r3
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d005      	beq.n	800a8cc <SUBGRF_SetRfFrequency+0x28>
    {
        SUBGRF_CalibrateImage( frequency );
 800a8c0:	6878      	ldr	r0, [r7, #4]
 800a8c2:	f7ff ff27 	bl	800a714 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 800a8c6:	4b18      	ldr	r3, [pc, #96]	; (800a928 <SUBGRF_SetRfFrequency+0x84>)
 800a8c8:	2201      	movs	r2, #1
 800a8ca:	701a      	strb	r2, [r3, #0]
    }
    SX_FREQ_TO_CHANNEL(chan, frequency);
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	2200      	movs	r2, #0
 800a8d0:	461c      	mov	r4, r3
 800a8d2:	4615      	mov	r5, r2
 800a8d4:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 800a8d8:	ea4f 6844 	mov.w	r8, r4, lsl #25
 800a8dc:	4a13      	ldr	r2, [pc, #76]	; (800a92c <SUBGRF_SetRfFrequency+0x88>)
 800a8de:	f04f 0300 	mov.w	r3, #0
 800a8e2:	4640      	mov	r0, r8
 800a8e4:	4649      	mov	r1, r9
 800a8e6:	f7f5 fc9b 	bl	8000220 <__aeabi_uldivmod>
 800a8ea:	4602      	mov	r2, r0
 800a8ec:	460b      	mov	r3, r1
 800a8ee:	4613      	mov	r3, r2
 800a8f0:	60fb      	str	r3, [r7, #12]
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	0e1b      	lsrs	r3, r3, #24
 800a8f6:	b2db      	uxtb	r3, r3
 800a8f8:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	0c1b      	lsrs	r3, r3, #16
 800a8fe:	b2db      	uxtb	r3, r3
 800a900:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	0a1b      	lsrs	r3, r3, #8
 800a906:	b2db      	uxtb	r3, r3
 800a908:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	b2db      	uxtb	r3, r3
 800a90e:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 800a910:	f107 0308 	add.w	r3, r7, #8
 800a914:	2204      	movs	r2, #4
 800a916:	4619      	mov	r1, r3
 800a918:	2086      	movs	r0, #134	; 0x86
 800a91a:	f000 fbc7 	bl	800b0ac <SUBGRF_WriteCommand>
}
 800a91e:	bf00      	nop
 800a920:	3710      	adds	r7, #16
 800a922:	46bd      	mov	sp, r7
 800a924:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800a928:	20000af8 	.word	0x20000af8
 800a92c:	01e84800 	.word	0x01e84800

0800a930 <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 800a930:	b580      	push	{r7, lr}
 800a932:	b082      	sub	sp, #8
 800a934:	af00      	add	r7, sp, #0
 800a936:	4603      	mov	r3, r0
 800a938:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 800a93a:	79fa      	ldrb	r2, [r7, #7]
 800a93c:	4b09      	ldr	r3, [pc, #36]	; (800a964 <SUBGRF_SetPacketType+0x34>)
 800a93e:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 800a940:	79fb      	ldrb	r3, [r7, #7]
 800a942:	2b00      	cmp	r3, #0
 800a944:	d104      	bne.n	800a950 <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 800a946:	2100      	movs	r1, #0
 800a948:	f240 60ac 	movw	r0, #1708	; 0x6ac
 800a94c:	f000 fafe 	bl	800af4c <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 800a950:	1dfb      	adds	r3, r7, #7
 800a952:	2201      	movs	r2, #1
 800a954:	4619      	mov	r1, r3
 800a956:	208a      	movs	r0, #138	; 0x8a
 800a958:	f000 fba8 	bl	800b0ac <SUBGRF_WriteCommand>
}
 800a95c:	bf00      	nop
 800a95e:	3708      	adds	r7, #8
 800a960:	46bd      	mov	sp, r7
 800a962:	bd80      	pop	{r7, pc}
 800a964:	20000af1 	.word	0x20000af1

0800a968 <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 800a968:	b480      	push	{r7}
 800a96a:	af00      	add	r7, sp, #0
    return PacketType;
 800a96c:	4b02      	ldr	r3, [pc, #8]	; (800a978 <SUBGRF_GetPacketType+0x10>)
 800a96e:	781b      	ldrb	r3, [r3, #0]
}
 800a970:	4618      	mov	r0, r3
 800a972:	46bd      	mov	sp, r7
 800a974:	bc80      	pop	{r7}
 800a976:	4770      	bx	lr
 800a978:	20000af1 	.word	0x20000af1

0800a97c <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime )
{
 800a97c:	b580      	push	{r7, lr}
 800a97e:	b084      	sub	sp, #16
 800a980:	af00      	add	r7, sp, #0
 800a982:	4603      	mov	r3, r0
 800a984:	71fb      	strb	r3, [r7, #7]
 800a986:	460b      	mov	r3, r1
 800a988:	71bb      	strb	r3, [r7, #6]
 800a98a:	4613      	mov	r3, r2
 800a98c:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];
    int32_t max_power;

    if (paSelect == RFO_LP)
 800a98e:	79fb      	ldrb	r3, [r7, #7]
 800a990:	2b01      	cmp	r3, #1
 800a992:	d149      	bne.n	800aa28 <SUBGRF_SetTxParams+0xac>
    {
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 800a994:	2000      	movs	r0, #0
 800a996:	f000 ff2e 	bl	800b7f6 <RBI_GetRFOMaxPowerConfig>
 800a99a:	60f8      	str	r0, [r7, #12]
        if (power >  max_power)
 800a99c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800a9a0:	68fa      	ldr	r2, [r7, #12]
 800a9a2:	429a      	cmp	r2, r3
 800a9a4:	da01      	bge.n	800a9aa <SUBGRF_SetTxParams+0x2e>
        {
          power = max_power;
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 14)
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	2b0e      	cmp	r3, #14
 800a9ae:	d10e      	bne.n	800a9ce <SUBGRF_SetTxParams+0x52>
        {
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 800a9b0:	2301      	movs	r3, #1
 800a9b2:	2201      	movs	r2, #1
 800a9b4:	2100      	movs	r1, #0
 800a9b6:	2004      	movs	r0, #4
 800a9b8:	f7ff fef6 	bl	800a7a8 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 800a9bc:	79ba      	ldrb	r2, [r7, #6]
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	b2db      	uxtb	r3, r3
 800a9c2:	1ad3      	subs	r3, r2, r3
 800a9c4:	b2db      	uxtb	r3, r3
 800a9c6:	330e      	adds	r3, #14
 800a9c8:	b2db      	uxtb	r3, r3
 800a9ca:	71bb      	strb	r3, [r7, #6]
 800a9cc:	e01f      	b.n	800aa0e <SUBGRF_SetTxParams+0x92>
        }
        else if (max_power == 10)
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	2b0a      	cmp	r3, #10
 800a9d2:	d10e      	bne.n	800a9f2 <SUBGRF_SetTxParams+0x76>
        {
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 800a9d4:	2301      	movs	r3, #1
 800a9d6:	2201      	movs	r2, #1
 800a9d8:	2100      	movs	r1, #0
 800a9da:	2001      	movs	r0, #1
 800a9dc:	f7ff fee4 	bl	800a7a8 <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 800a9e0:	79ba      	ldrb	r2, [r7, #6]
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	b2db      	uxtb	r3, r3
 800a9e6:	1ad3      	subs	r3, r2, r3
 800a9e8:	b2db      	uxtb	r3, r3
 800a9ea:	330d      	adds	r3, #13
 800a9ec:	b2db      	uxtb	r3, r3
 800a9ee:	71bb      	strb	r3, [r7, #6]
 800a9f0:	e00d      	b.n	800aa0e <SUBGRF_SetTxParams+0x92>
        }
        else /*default 15dBm*/
        {
            SUBGRF_SetPaConfig(0x07, 0x00, 0x01, 0x01);
 800a9f2:	2301      	movs	r3, #1
 800a9f4:	2201      	movs	r2, #1
 800a9f6:	2100      	movs	r1, #0
 800a9f8:	2007      	movs	r0, #7
 800a9fa:	f7ff fed5 	bl	800a7a8 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 800a9fe:	79ba      	ldrb	r2, [r7, #6]
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	b2db      	uxtb	r3, r3
 800aa04:	1ad3      	subs	r3, r2, r3
 800aa06:	b2db      	uxtb	r3, r3
 800aa08:	330e      	adds	r3, #14
 800aa0a:	b2db      	uxtb	r3, r3
 800aa0c:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -17)
 800aa0e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800aa12:	f113 0f11 	cmn.w	r3, #17
 800aa16:	da01      	bge.n	800aa1c <SUBGRF_SetTxParams+0xa0>
        {
            power = -17;
 800aa18:	23ef      	movs	r3, #239	; 0xef
 800aa1a:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 800aa1c:	2118      	movs	r1, #24
 800aa1e:	f640 00e7 	movw	r0, #2279	; 0x8e7
 800aa22:	f000 fa93 	bl	800af4c <SUBGRF_WriteRegister>
 800aa26:	e067      	b.n	800aaf8 <SUBGRF_SetTxParams+0x17c>
    }
    else /* rfo_hp*/
    {
        /* WORKAROUND - Better Resistance of the RFO High Power Tx to Antenna Mismatch, see STM32WL Erratasheet*/
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 800aa28:	f640 00d8 	movw	r0, #2264	; 0x8d8
 800aa2c:	f000 faa2 	bl	800af74 <SUBGRF_ReadRegister>
 800aa30:	4603      	mov	r3, r0
 800aa32:	f043 031e 	orr.w	r3, r3, #30
 800aa36:	b2db      	uxtb	r3, r3
 800aa38:	4619      	mov	r1, r3
 800aa3a:	f640 00d8 	movw	r0, #2264	; 0x8d8
 800aa3e:	f000 fa85 	bl	800af4c <SUBGRF_WriteRegister>
        /* WORKAROUND END*/
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 800aa42:	2001      	movs	r0, #1
 800aa44:	f000 fed7 	bl	800b7f6 <RBI_GetRFOMaxPowerConfig>
 800aa48:	60f8      	str	r0, [r7, #12]
        if (power > max_power)
 800aa4a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800aa4e:	68fa      	ldr	r2, [r7, #12]
 800aa50:	429a      	cmp	r2, r3
 800aa52:	da01      	bge.n	800aa58 <SUBGRF_SetTxParams+0xdc>
        {
            power = max_power;
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 20)
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	2b14      	cmp	r3, #20
 800aa5c:	d10e      	bne.n	800aa7c <SUBGRF_SetTxParams+0x100>
        {
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 800aa5e:	2301      	movs	r3, #1
 800aa60:	2200      	movs	r2, #0
 800aa62:	2105      	movs	r1, #5
 800aa64:	2003      	movs	r0, #3
 800aa66:	f7ff fe9f 	bl	800a7a8 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 800aa6a:	79ba      	ldrb	r2, [r7, #6]
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	b2db      	uxtb	r3, r3
 800aa70:	1ad3      	subs	r3, r2, r3
 800aa72:	b2db      	uxtb	r3, r3
 800aa74:	3316      	adds	r3, #22
 800aa76:	b2db      	uxtb	r3, r3
 800aa78:	71bb      	strb	r3, [r7, #6]
 800aa7a:	e031      	b.n	800aae0 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 17)
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	2b11      	cmp	r3, #17
 800aa80:	d10e      	bne.n	800aaa0 <SUBGRF_SetTxParams+0x124>
        {
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 800aa82:	2301      	movs	r3, #1
 800aa84:	2200      	movs	r2, #0
 800aa86:	2103      	movs	r1, #3
 800aa88:	2002      	movs	r0, #2
 800aa8a:	f7ff fe8d 	bl	800a7a8 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 800aa8e:	79ba      	ldrb	r2, [r7, #6]
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	b2db      	uxtb	r3, r3
 800aa94:	1ad3      	subs	r3, r2, r3
 800aa96:	b2db      	uxtb	r3, r3
 800aa98:	3316      	adds	r3, #22
 800aa9a:	b2db      	uxtb	r3, r3
 800aa9c:	71bb      	strb	r3, [r7, #6]
 800aa9e:	e01f      	b.n	800aae0 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 14)
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	2b0e      	cmp	r3, #14
 800aaa4:	d10e      	bne.n	800aac4 <SUBGRF_SetTxParams+0x148>
        {
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 800aaa6:	2301      	movs	r3, #1
 800aaa8:	2200      	movs	r2, #0
 800aaaa:	2102      	movs	r1, #2
 800aaac:	2002      	movs	r0, #2
 800aaae:	f7ff fe7b 	bl	800a7a8 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 800aab2:	79ba      	ldrb	r2, [r7, #6]
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	b2db      	uxtb	r3, r3
 800aab8:	1ad3      	subs	r3, r2, r3
 800aaba:	b2db      	uxtb	r3, r3
 800aabc:	330e      	adds	r3, #14
 800aabe:	b2db      	uxtb	r3, r3
 800aac0:	71bb      	strb	r3, [r7, #6]
 800aac2:	e00d      	b.n	800aae0 <SUBGRF_SetTxParams+0x164>
        }
        else /*22dBm*/
        {
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 800aac4:	2301      	movs	r3, #1
 800aac6:	2200      	movs	r2, #0
 800aac8:	2107      	movs	r1, #7
 800aaca:	2004      	movs	r0, #4
 800aacc:	f7ff fe6c 	bl	800a7a8 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 800aad0:	79ba      	ldrb	r2, [r7, #6]
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	b2db      	uxtb	r3, r3
 800aad6:	1ad3      	subs	r3, r2, r3
 800aad8:	b2db      	uxtb	r3, r3
 800aada:	3316      	adds	r3, #22
 800aadc:	b2db      	uxtb	r3, r3
 800aade:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -9)
 800aae0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800aae4:	f113 0f09 	cmn.w	r3, #9
 800aae8:	da01      	bge.n	800aaee <SUBGRF_SetTxParams+0x172>
        {
            power = -9;
 800aaea:	23f7      	movs	r3, #247	; 0xf7
 800aaec:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 800aaee:	2138      	movs	r1, #56	; 0x38
 800aaf0:	f640 00e7 	movw	r0, #2279	; 0x8e7
 800aaf4:	f000 fa2a 	bl	800af4c <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 800aaf8:	79bb      	ldrb	r3, [r7, #6]
 800aafa:	723b      	strb	r3, [r7, #8]
    buf[1] = (uint8_t)rampTime;
 800aafc:	797b      	ldrb	r3, [r7, #5]
 800aafe:	727b      	strb	r3, [r7, #9]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 800ab00:	f107 0308 	add.w	r3, r7, #8
 800ab04:	2202      	movs	r2, #2
 800ab06:	4619      	mov	r1, r3
 800ab08:	208e      	movs	r0, #142	; 0x8e
 800ab0a:	f000 facf 	bl	800b0ac <SUBGRF_WriteCommand>
}
 800ab0e:	bf00      	nop
 800ab10:	3710      	adds	r7, #16
 800ab12:	46bd      	mov	sp, r7
 800ab14:	bd80      	pop	{r7, pc}
	...

0800ab18 <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 800ab18:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800ab1c:	b086      	sub	sp, #24
 800ab1e:	af00      	add	r7, sp, #0
 800ab20:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 800ab22:	2300      	movs	r3, #0
 800ab24:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 800ab26:	4a61      	ldr	r2, [pc, #388]	; (800acac <SUBGRF_SetModulationParams+0x194>)
 800ab28:	f107 0308 	add.w	r3, r7, #8
 800ab2c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ab30:	e883 0003 	stmia.w	r3, {r0, r1}

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	781a      	ldrb	r2, [r3, #0]
 800ab38:	4b5d      	ldr	r3, [pc, #372]	; (800acb0 <SUBGRF_SetModulationParams+0x198>)
 800ab3a:	781b      	ldrb	r3, [r3, #0]
 800ab3c:	429a      	cmp	r2, r3
 800ab3e:	d004      	beq.n	800ab4a <SUBGRF_SetModulationParams+0x32>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	781b      	ldrb	r3, [r3, #0]
 800ab44:	4618      	mov	r0, r3
 800ab46:	f7ff fef3 	bl	800a930 <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	781b      	ldrb	r3, [r3, #0]
 800ab4e:	2b03      	cmp	r3, #3
 800ab50:	f200 80a5 	bhi.w	800ac9e <SUBGRF_SetModulationParams+0x186>
 800ab54:	a201      	add	r2, pc, #4	; (adr r2, 800ab5c <SUBGRF_SetModulationParams+0x44>)
 800ab56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab5a:	bf00      	nop
 800ab5c:	0800ab6d 	.word	0x0800ab6d
 800ab60:	0800ac2d 	.word	0x0800ac2d
 800ab64:	0800abef 	.word	0x0800abef
 800ab68:	0800ac5b 	.word	0x0800ac5b
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 800ab6c:	2308      	movs	r3, #8
 800ab6e:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	685b      	ldr	r3, [r3, #4]
 800ab74:	4a4f      	ldr	r2, [pc, #316]	; (800acb4 <SUBGRF_SetModulationParams+0x19c>)
 800ab76:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab7a:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 800ab7c:	697b      	ldr	r3, [r7, #20]
 800ab7e:	0c1b      	lsrs	r3, r3, #16
 800ab80:	b2db      	uxtb	r3, r3
 800ab82:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 800ab84:	697b      	ldr	r3, [r7, #20]
 800ab86:	0a1b      	lsrs	r3, r3, #8
 800ab88:	b2db      	uxtb	r3, r3
 800ab8a:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 800ab8c:	697b      	ldr	r3, [r7, #20]
 800ab8e:	b2db      	uxtb	r3, r3
 800ab90:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	7b1b      	ldrb	r3, [r3, #12]
 800ab96:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	7b5b      	ldrb	r3, [r3, #13]
 800ab9c:	733b      	strb	r3, [r7, #12]
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	689b      	ldr	r3, [r3, #8]
 800aba2:	2200      	movs	r2, #0
 800aba4:	461c      	mov	r4, r3
 800aba6:	4615      	mov	r5, r2
 800aba8:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 800abac:	ea4f 6844 	mov.w	r8, r4, lsl #25
 800abb0:	4a41      	ldr	r2, [pc, #260]	; (800acb8 <SUBGRF_SetModulationParams+0x1a0>)
 800abb2:	f04f 0300 	mov.w	r3, #0
 800abb6:	4640      	mov	r0, r8
 800abb8:	4649      	mov	r1, r9
 800abba:	f7f5 fb31 	bl	8000220 <__aeabi_uldivmod>
 800abbe:	4602      	mov	r2, r0
 800abc0:	460b      	mov	r3, r1
 800abc2:	4613      	mov	r3, r2
 800abc4:	617b      	str	r3, [r7, #20]
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 800abc6:	697b      	ldr	r3, [r7, #20]
 800abc8:	0c1b      	lsrs	r3, r3, #16
 800abca:	b2db      	uxtb	r3, r3
 800abcc:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 800abce:	697b      	ldr	r3, [r7, #20]
 800abd0:	0a1b      	lsrs	r3, r3, #8
 800abd2:	b2db      	uxtb	r3, r3
 800abd4:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 800abd6:	697b      	ldr	r3, [r7, #20]
 800abd8:	b2db      	uxtb	r3, r3
 800abda:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800abdc:	7cfb      	ldrb	r3, [r7, #19]
 800abde:	b29a      	uxth	r2, r3
 800abe0:	f107 0308 	add.w	r3, r7, #8
 800abe4:	4619      	mov	r1, r3
 800abe6:	208b      	movs	r0, #139	; 0x8b
 800abe8:	f000 fa60 	bl	800b0ac <SUBGRF_WriteCommand>
        break;
 800abec:	e058      	b.n	800aca0 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_BPSK:
        n = 4;
 800abee:	2304      	movs	r3, #4
 800abf0:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	691b      	ldr	r3, [r3, #16]
 800abf6:	4a2f      	ldr	r2, [pc, #188]	; (800acb4 <SUBGRF_SetModulationParams+0x19c>)
 800abf8:	fbb2 f3f3 	udiv	r3, r2, r3
 800abfc:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 800abfe:	697b      	ldr	r3, [r7, #20]
 800ac00:	0c1b      	lsrs	r3, r3, #16
 800ac02:	b2db      	uxtb	r3, r3
 800ac04:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 800ac06:	697b      	ldr	r3, [r7, #20]
 800ac08:	0a1b      	lsrs	r3, r3, #8
 800ac0a:	b2db      	uxtb	r3, r3
 800ac0c:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 800ac0e:	697b      	ldr	r3, [r7, #20]
 800ac10:	b2db      	uxtb	r3, r3
 800ac12:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	7d1b      	ldrb	r3, [r3, #20]
 800ac18:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800ac1a:	7cfb      	ldrb	r3, [r7, #19]
 800ac1c:	b29a      	uxth	r2, r3
 800ac1e:	f107 0308 	add.w	r3, r7, #8
 800ac22:	4619      	mov	r1, r3
 800ac24:	208b      	movs	r0, #139	; 0x8b
 800ac26:	f000 fa41 	bl	800b0ac <SUBGRF_WriteCommand>
        break;
 800ac2a:	e039      	b.n	800aca0 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_LORA:
        n = 4;
 800ac2c:	2304      	movs	r3, #4
 800ac2e:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	7e1b      	ldrb	r3, [r3, #24]
 800ac34:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	7e5b      	ldrb	r3, [r3, #25]
 800ac3a:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	7e9b      	ldrb	r3, [r3, #26]
 800ac40:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	7edb      	ldrb	r3, [r3, #27]
 800ac46:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800ac48:	7cfb      	ldrb	r3, [r7, #19]
 800ac4a:	b29a      	uxth	r2, r3
 800ac4c:	f107 0308 	add.w	r3, r7, #8
 800ac50:	4619      	mov	r1, r3
 800ac52:	208b      	movs	r0, #139	; 0x8b
 800ac54:	f000 fa2a 	bl	800b0ac <SUBGRF_WriteCommand>

        break;
 800ac58:	e022      	b.n	800aca0 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_GMSK:
        n = 5;
 800ac5a:	2305      	movs	r3, #5
 800ac5c:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	685b      	ldr	r3, [r3, #4]
 800ac62:	4a14      	ldr	r2, [pc, #80]	; (800acb4 <SUBGRF_SetModulationParams+0x19c>)
 800ac64:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac68:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 800ac6a:	697b      	ldr	r3, [r7, #20]
 800ac6c:	0c1b      	lsrs	r3, r3, #16
 800ac6e:	b2db      	uxtb	r3, r3
 800ac70:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 800ac72:	697b      	ldr	r3, [r7, #20]
 800ac74:	0a1b      	lsrs	r3, r3, #8
 800ac76:	b2db      	uxtb	r3, r3
 800ac78:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 800ac7a:	697b      	ldr	r3, [r7, #20]
 800ac7c:	b2db      	uxtb	r3, r3
 800ac7e:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	7b1b      	ldrb	r3, [r3, #12]
 800ac84:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	7b5b      	ldrb	r3, [r3, #13]
 800ac8a:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800ac8c:	7cfb      	ldrb	r3, [r7, #19]
 800ac8e:	b29a      	uxth	r2, r3
 800ac90:	f107 0308 	add.w	r3, r7, #8
 800ac94:	4619      	mov	r1, r3
 800ac96:	208b      	movs	r0, #139	; 0x8b
 800ac98:	f000 fa08 	bl	800b0ac <SUBGRF_WriteCommand>
        break;
 800ac9c:	e000      	b.n	800aca0 <SUBGRF_SetModulationParams+0x188>
    default:
    case PACKET_TYPE_NONE:
      break;
 800ac9e:	bf00      	nop
    }
}
 800aca0:	bf00      	nop
 800aca2:	3718      	adds	r7, #24
 800aca4:	46bd      	mov	sp, r7
 800aca6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800acaa:	bf00      	nop
 800acac:	0800cf40 	.word	0x0800cf40
 800acb0:	20000af1 	.word	0x20000af1
 800acb4:	3d090000 	.word	0x3d090000
 800acb8:	01e84800 	.word	0x01e84800

0800acbc <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 800acbc:	b580      	push	{r7, lr}
 800acbe:	b086      	sub	sp, #24
 800acc0:	af00      	add	r7, sp, #0
 800acc2:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 800acc4:	2300      	movs	r3, #0
 800acc6:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 800acc8:	4a48      	ldr	r2, [pc, #288]	; (800adec <SUBGRF_SetPacketParams+0x130>)
 800acca:	f107 030c 	add.w	r3, r7, #12
 800acce:	ca07      	ldmia	r2, {r0, r1, r2}
 800acd0:	c303      	stmia	r3!, {r0, r1}
 800acd2:	701a      	strb	r2, [r3, #0]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	781a      	ldrb	r2, [r3, #0]
 800acd8:	4b45      	ldr	r3, [pc, #276]	; (800adf0 <SUBGRF_SetPacketParams+0x134>)
 800acda:	781b      	ldrb	r3, [r3, #0]
 800acdc:	429a      	cmp	r2, r3
 800acde:	d004      	beq.n	800acea <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	781b      	ldrb	r3, [r3, #0]
 800ace4:	4618      	mov	r0, r3
 800ace6:	f7ff fe23 	bl	800a930 <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	781b      	ldrb	r3, [r3, #0]
 800acee:	2b03      	cmp	r3, #3
 800acf0:	d878      	bhi.n	800ade4 <SUBGRF_SetPacketParams+0x128>
 800acf2:	a201      	add	r2, pc, #4	; (adr r2, 800acf8 <SUBGRF_SetPacketParams+0x3c>)
 800acf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acf8:	0800ad09 	.word	0x0800ad09
 800acfc:	0800ad99 	.word	0x0800ad99
 800ad00:	0800ad8d 	.word	0x0800ad8d
 800ad04:	0800ad09 	.word	0x0800ad09
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	7a5b      	ldrb	r3, [r3, #9]
 800ad0c:	2bf1      	cmp	r3, #241	; 0xf1
 800ad0e:	d10a      	bne.n	800ad26 <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 800ad10:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800ad14:	f7ff faaa 	bl	800a26c <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 800ad18:	f248 0005 	movw	r0, #32773	; 0x8005
 800ad1c:	f7ff fac6 	bl	800a2ac <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 800ad20:	2302      	movs	r3, #2
 800ad22:	75bb      	strb	r3, [r7, #22]
 800ad24:	e011      	b.n	800ad4a <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	7a5b      	ldrb	r3, [r3, #9]
 800ad2a:	2bf2      	cmp	r3, #242	; 0xf2
 800ad2c:	d10a      	bne.n	800ad44 <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 800ad2e:	f641 500f 	movw	r0, #7439	; 0x1d0f
 800ad32:	f7ff fa9b 	bl	800a26c <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 800ad36:	f241 0021 	movw	r0, #4129	; 0x1021
 800ad3a:	f7ff fab7 	bl	800a2ac <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 800ad3e:	2306      	movs	r3, #6
 800ad40:	75bb      	strb	r3, [r7, #22]
 800ad42:	e002      	b.n	800ad4a <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	7a5b      	ldrb	r3, [r3, #9]
 800ad48:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 800ad4a:	2309      	movs	r3, #9
 800ad4c:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	885b      	ldrh	r3, [r3, #2]
 800ad52:	0a1b      	lsrs	r3, r3, #8
 800ad54:	b29b      	uxth	r3, r3
 800ad56:	b2db      	uxtb	r3, r3
 800ad58:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	885b      	ldrh	r3, [r3, #2]
 800ad5e:	b2db      	uxtb	r3, r3
 800ad60:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	791b      	ldrb	r3, [r3, #4]
 800ad66:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	795b      	ldrb	r3, [r3, #5]
 800ad6c:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	799b      	ldrb	r3, [r3, #6]
 800ad72:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	79db      	ldrb	r3, [r3, #7]
 800ad78:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	7a1b      	ldrb	r3, [r3, #8]
 800ad7e:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 800ad80:	7dbb      	ldrb	r3, [r7, #22]
 800ad82:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	7a9b      	ldrb	r3, [r3, #10]
 800ad88:	753b      	strb	r3, [r7, #20]
        break;
 800ad8a:	e022      	b.n	800add2 <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 800ad8c:	2301      	movs	r3, #1
 800ad8e:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	7b1b      	ldrb	r3, [r3, #12]
 800ad94:	733b      	strb	r3, [r7, #12]
        break;
 800ad96:	e01c      	b.n	800add2 <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 800ad98:	2306      	movs	r3, #6
 800ad9a:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	89db      	ldrh	r3, [r3, #14]
 800ada0:	0a1b      	lsrs	r3, r3, #8
 800ada2:	b29b      	uxth	r3, r3
 800ada4:	b2db      	uxtb	r3, r3
 800ada6:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	89db      	ldrh	r3, [r3, #14]
 800adac:	b2db      	uxtb	r3, r3
 800adae:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	7c1a      	ldrb	r2, [r3, #16]
 800adb4:	4b0f      	ldr	r3, [pc, #60]	; (800adf4 <SUBGRF_SetPacketParams+0x138>)
 800adb6:	4611      	mov	r1, r2
 800adb8:	7019      	strb	r1, [r3, #0]
 800adba:	4613      	mov	r3, r2
 800adbc:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	7c5b      	ldrb	r3, [r3, #17]
 800adc2:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	7c9b      	ldrb	r3, [r3, #18]
 800adc8:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	7cdb      	ldrb	r3, [r3, #19]
 800adce:	747b      	strb	r3, [r7, #17]
        break;
 800add0:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 800add2:	7dfb      	ldrb	r3, [r7, #23]
 800add4:	b29a      	uxth	r2, r3
 800add6:	f107 030c 	add.w	r3, r7, #12
 800adda:	4619      	mov	r1, r3
 800addc:	208c      	movs	r0, #140	; 0x8c
 800adde:	f000 f965 	bl	800b0ac <SUBGRF_WriteCommand>
 800ade2:	e000      	b.n	800ade6 <SUBGRF_SetPacketParams+0x12a>
        return;
 800ade4:	bf00      	nop
}
 800ade6:	3718      	adds	r7, #24
 800ade8:	46bd      	mov	sp, r7
 800adea:	bd80      	pop	{r7, pc}
 800adec:	0800cf48 	.word	0x0800cf48
 800adf0:	20000af1 	.word	0x20000af1
 800adf4:	20000af2 	.word	0x20000af2

0800adf8 <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 800adf8:	b580      	push	{r7, lr}
 800adfa:	b084      	sub	sp, #16
 800adfc:	af00      	add	r7, sp, #0
 800adfe:	4603      	mov	r3, r0
 800ae00:	460a      	mov	r2, r1
 800ae02:	71fb      	strb	r3, [r7, #7]
 800ae04:	4613      	mov	r3, r2
 800ae06:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 800ae08:	79fb      	ldrb	r3, [r7, #7]
 800ae0a:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 800ae0c:	79bb      	ldrb	r3, [r7, #6]
 800ae0e:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 800ae10:	f107 030c 	add.w	r3, r7, #12
 800ae14:	2202      	movs	r2, #2
 800ae16:	4619      	mov	r1, r3
 800ae18:	208f      	movs	r0, #143	; 0x8f
 800ae1a:	f000 f947 	bl	800b0ac <SUBGRF_WriteCommand>
}
 800ae1e:	bf00      	nop
 800ae20:	3710      	adds	r7, #16
 800ae22:	46bd      	mov	sp, r7
 800ae24:	bd80      	pop	{r7, pc}

0800ae26 <SUBGRF_GetRssiInst>:
    status.Fields.ChipMode = ( stat & ( 0x07 << 4 ) ) >> 4;
    return status;
}

int8_t SUBGRF_GetRssiInst( void )
{
 800ae26:	b580      	push	{r7, lr}
 800ae28:	b082      	sub	sp, #8
 800ae2a:	af00      	add	r7, sp, #0
    uint8_t buf[1];
    int8_t rssi = 0;
 800ae2c:	2300      	movs	r3, #0
 800ae2e:	71fb      	strb	r3, [r7, #7]

    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 800ae30:	1d3b      	adds	r3, r7, #4
 800ae32:	2201      	movs	r2, #1
 800ae34:	4619      	mov	r1, r3
 800ae36:	2015      	movs	r0, #21
 800ae38:	f000 f95a 	bl	800b0f0 <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 800ae3c:	793b      	ldrb	r3, [r7, #4]
 800ae3e:	425b      	negs	r3, r3
 800ae40:	105b      	asrs	r3, r3, #1
 800ae42:	71fb      	strb	r3, [r7, #7]
    return rssi;
 800ae44:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 800ae48:	4618      	mov	r0, r3
 800ae4a:	3708      	adds	r7, #8
 800ae4c:	46bd      	mov	sp, r7
 800ae4e:	bd80      	pop	{r7, pc}

0800ae50 <SUBGRF_GetRxBufferStatus>:

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 800ae50:	b580      	push	{r7, lr}
 800ae52:	b084      	sub	sp, #16
 800ae54:	af00      	add	r7, sp, #0
 800ae56:	6078      	str	r0, [r7, #4]
 800ae58:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 800ae5a:	f107 030c 	add.w	r3, r7, #12
 800ae5e:	2202      	movs	r2, #2
 800ae60:	4619      	mov	r1, r3
 800ae62:	2013      	movs	r0, #19
 800ae64:	f000 f944 	bl	800b0f0 <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 800ae68:	f7ff fd7e 	bl	800a968 <SUBGRF_GetPacketType>
 800ae6c:	4603      	mov	r3, r0
 800ae6e:	2b01      	cmp	r3, #1
 800ae70:	d10d      	bne.n	800ae8e <SUBGRF_GetRxBufferStatus+0x3e>
 800ae72:	4b0c      	ldr	r3, [pc, #48]	; (800aea4 <SUBGRF_GetRxBufferStatus+0x54>)
 800ae74:	781b      	ldrb	r3, [r3, #0]
 800ae76:	b2db      	uxtb	r3, r3
 800ae78:	2b01      	cmp	r3, #1
 800ae7a:	d108      	bne.n	800ae8e <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 800ae7c:	f240 7002 	movw	r0, #1794	; 0x702
 800ae80:	f000 f878 	bl	800af74 <SUBGRF_ReadRegister>
 800ae84:	4603      	mov	r3, r0
 800ae86:	461a      	mov	r2, r3
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	701a      	strb	r2, [r3, #0]
 800ae8c:	e002      	b.n	800ae94 <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 800ae8e:	7b3a      	ldrb	r2, [r7, #12]
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 800ae94:	7b7a      	ldrb	r2, [r7, #13]
 800ae96:	683b      	ldr	r3, [r7, #0]
 800ae98:	701a      	strb	r2, [r3, #0]
}
 800ae9a:	bf00      	nop
 800ae9c:	3710      	adds	r7, #16
 800ae9e:	46bd      	mov	sp, r7
 800aea0:	bd80      	pop	{r7, pc}
 800aea2:	bf00      	nop
 800aea4:	20000af2 	.word	0x20000af2

0800aea8 <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 800aea8:	b580      	push	{r7, lr}
 800aeaa:	b084      	sub	sp, #16
 800aeac:	af00      	add	r7, sp, #0
 800aeae:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 800aeb0:	f107 030c 	add.w	r3, r7, #12
 800aeb4:	2203      	movs	r2, #3
 800aeb6:	4619      	mov	r1, r3
 800aeb8:	2014      	movs	r0, #20
 800aeba:	f000 f919 	bl	800b0f0 <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 800aebe:	f7ff fd53 	bl	800a968 <SUBGRF_GetPacketType>
 800aec2:	4603      	mov	r3, r0
 800aec4:	461a      	mov	r2, r3
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	781b      	ldrb	r3, [r3, #0]
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d002      	beq.n	800aed8 <SUBGRF_GetPacketStatus+0x30>
 800aed2:	2b01      	cmp	r3, #1
 800aed4:	d013      	beq.n	800aefe <SUBGRF_GetPacketStatus+0x56>
 800aed6:	e02a      	b.n	800af2e <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 800aed8:	7b3a      	ldrb	r2, [r7, #12]
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 800aede:	7b7b      	ldrb	r3, [r7, #13]
 800aee0:	425b      	negs	r3, r3
 800aee2:	105b      	asrs	r3, r3, #1
 800aee4:	b25a      	sxtb	r2, r3
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 800aeea:	7bbb      	ldrb	r3, [r7, #14]
 800aeec:	425b      	negs	r3, r3
 800aeee:	105b      	asrs	r3, r3, #1
 800aef0:	b25a      	sxtb	r2, r3
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	2200      	movs	r2, #0
 800aefa:	609a      	str	r2, [r3, #8]
            break;
 800aefc:	e020      	b.n	800af40 <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 800aefe:	7b3b      	ldrb	r3, [r7, #12]
 800af00:	425b      	negs	r3, r3
 800af02:	105b      	asrs	r3, r3, #1
 800af04:	b25a      	sxtb	r2, r3
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 800af0a:	7b7b      	ldrb	r3, [r7, #13]
 800af0c:	b25b      	sxtb	r3, r3
 800af0e:	3302      	adds	r3, #2
 800af10:	109b      	asrs	r3, r3, #2
 800af12:	b25a      	sxtb	r2, r3
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 800af18:	7bbb      	ldrb	r3, [r7, #14]
 800af1a:	425b      	negs	r3, r3
 800af1c:	105b      	asrs	r3, r3, #1
 800af1e:	b25a      	sxtb	r2, r3
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 800af24:	4b08      	ldr	r3, [pc, #32]	; (800af48 <SUBGRF_GetPacketStatus+0xa0>)
 800af26:	681a      	ldr	r2, [r3, #0]
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	611a      	str	r2, [r3, #16]
            break;
 800af2c:	e008      	b.n	800af40 <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 800af2e:	2214      	movs	r2, #20
 800af30:	2100      	movs	r1, #0
 800af32:	6878      	ldr	r0, [r7, #4]
 800af34:	f000 fc93 	bl	800b85e <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	220f      	movs	r2, #15
 800af3c:	701a      	strb	r2, [r3, #0]
            break;
 800af3e:	bf00      	nop
    }
}
 800af40:	bf00      	nop
 800af42:	3710      	adds	r7, #16
 800af44:	46bd      	mov	sp, r7
 800af46:	bd80      	pop	{r7, pc}
 800af48:	20000af4 	.word	0x20000af4

0800af4c <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 800af4c:	b580      	push	{r7, lr}
 800af4e:	b082      	sub	sp, #8
 800af50:	af00      	add	r7, sp, #0
 800af52:	4603      	mov	r3, r0
 800af54:	460a      	mov	r2, r1
 800af56:	80fb      	strh	r3, [r7, #6]
 800af58:	4613      	mov	r3, r2
 800af5a:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 800af5c:	1d7a      	adds	r2, r7, #5
 800af5e:	88f9      	ldrh	r1, [r7, #6]
 800af60:	2301      	movs	r3, #1
 800af62:	4803      	ldr	r0, [pc, #12]	; (800af70 <SUBGRF_WriteRegister+0x24>)
 800af64:	f7fa fdaa 	bl	8005abc <HAL_SUBGHZ_WriteRegisters>
}
 800af68:	bf00      	nop
 800af6a:	3708      	adds	r7, #8
 800af6c:	46bd      	mov	sp, r7
 800af6e:	bd80      	pop	{r7, pc}
 800af70:	200004fc 	.word	0x200004fc

0800af74 <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 800af74:	b580      	push	{r7, lr}
 800af76:	b084      	sub	sp, #16
 800af78:	af00      	add	r7, sp, #0
 800af7a:	4603      	mov	r3, r0
 800af7c:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 800af7e:	f107 020f 	add.w	r2, r7, #15
 800af82:	88f9      	ldrh	r1, [r7, #6]
 800af84:	2301      	movs	r3, #1
 800af86:	4804      	ldr	r0, [pc, #16]	; (800af98 <SUBGRF_ReadRegister+0x24>)
 800af88:	f7fa fdf7 	bl	8005b7a <HAL_SUBGHZ_ReadRegisters>
    return data;
 800af8c:	7bfb      	ldrb	r3, [r7, #15]
}
 800af8e:	4618      	mov	r0, r3
 800af90:	3710      	adds	r7, #16
 800af92:	46bd      	mov	sp, r7
 800af94:	bd80      	pop	{r7, pc}
 800af96:	bf00      	nop
 800af98:	200004fc 	.word	0x200004fc

0800af9c <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 800af9c:	b580      	push	{r7, lr}
 800af9e:	b086      	sub	sp, #24
 800afa0:	af00      	add	r7, sp, #0
 800afa2:	4603      	mov	r3, r0
 800afa4:	6039      	str	r1, [r7, #0]
 800afa6:	80fb      	strh	r3, [r7, #6]
 800afa8:	4613      	mov	r3, r2
 800afaa:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800afac:	f3ef 8310 	mrs	r3, PRIMASK
 800afb0:	60fb      	str	r3, [r7, #12]
  return(result);
 800afb2:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800afb4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800afb6:	b672      	cpsid	i
}
 800afb8:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 800afba:	88bb      	ldrh	r3, [r7, #4]
 800afbc:	88f9      	ldrh	r1, [r7, #6]
 800afbe:	683a      	ldr	r2, [r7, #0]
 800afc0:	4806      	ldr	r0, [pc, #24]	; (800afdc <SUBGRF_WriteRegisters+0x40>)
 800afc2:	f7fa fd7b 	bl	8005abc <HAL_SUBGHZ_WriteRegisters>
 800afc6:	697b      	ldr	r3, [r7, #20]
 800afc8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800afca:	693b      	ldr	r3, [r7, #16]
 800afcc:	f383 8810 	msr	PRIMASK, r3
}
 800afd0:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800afd2:	bf00      	nop
 800afd4:	3718      	adds	r7, #24
 800afd6:	46bd      	mov	sp, r7
 800afd8:	bd80      	pop	{r7, pc}
 800afda:	bf00      	nop
 800afdc:	200004fc 	.word	0x200004fc

0800afe0 <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 800afe0:	b580      	push	{r7, lr}
 800afe2:	b086      	sub	sp, #24
 800afe4:	af00      	add	r7, sp, #0
 800afe6:	4603      	mov	r3, r0
 800afe8:	6039      	str	r1, [r7, #0]
 800afea:	80fb      	strh	r3, [r7, #6]
 800afec:	4613      	mov	r3, r2
 800afee:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aff0:	f3ef 8310 	mrs	r3, PRIMASK
 800aff4:	60fb      	str	r3, [r7, #12]
  return(result);
 800aff6:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800aff8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800affa:	b672      	cpsid	i
}
 800affc:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 800affe:	88bb      	ldrh	r3, [r7, #4]
 800b000:	88f9      	ldrh	r1, [r7, #6]
 800b002:	683a      	ldr	r2, [r7, #0]
 800b004:	4806      	ldr	r0, [pc, #24]	; (800b020 <SUBGRF_ReadRegisters+0x40>)
 800b006:	f7fa fdb8 	bl	8005b7a <HAL_SUBGHZ_ReadRegisters>
 800b00a:	697b      	ldr	r3, [r7, #20]
 800b00c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b00e:	693b      	ldr	r3, [r7, #16]
 800b010:	f383 8810 	msr	PRIMASK, r3
}
 800b014:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800b016:	bf00      	nop
 800b018:	3718      	adds	r7, #24
 800b01a:	46bd      	mov	sp, r7
 800b01c:	bd80      	pop	{r7, pc}
 800b01e:	bf00      	nop
 800b020:	200004fc 	.word	0x200004fc

0800b024 <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 800b024:	b580      	push	{r7, lr}
 800b026:	b086      	sub	sp, #24
 800b028:	af00      	add	r7, sp, #0
 800b02a:	4603      	mov	r3, r0
 800b02c:	6039      	str	r1, [r7, #0]
 800b02e:	71fb      	strb	r3, [r7, #7]
 800b030:	4613      	mov	r3, r2
 800b032:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b034:	f3ef 8310 	mrs	r3, PRIMASK
 800b038:	60fb      	str	r3, [r7, #12]
  return(result);
 800b03a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800b03c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b03e:	b672      	cpsid	i
}
 800b040:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 800b042:	79bb      	ldrb	r3, [r7, #6]
 800b044:	b29b      	uxth	r3, r3
 800b046:	79f9      	ldrb	r1, [r7, #7]
 800b048:	683a      	ldr	r2, [r7, #0]
 800b04a:	4806      	ldr	r0, [pc, #24]	; (800b064 <SUBGRF_WriteBuffer+0x40>)
 800b04c:	f7fa fea9 	bl	8005da2 <HAL_SUBGHZ_WriteBuffer>
 800b050:	697b      	ldr	r3, [r7, #20]
 800b052:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b054:	693b      	ldr	r3, [r7, #16]
 800b056:	f383 8810 	msr	PRIMASK, r3
}
 800b05a:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800b05c:	bf00      	nop
 800b05e:	3718      	adds	r7, #24
 800b060:	46bd      	mov	sp, r7
 800b062:	bd80      	pop	{r7, pc}
 800b064:	200004fc 	.word	0x200004fc

0800b068 <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 800b068:	b580      	push	{r7, lr}
 800b06a:	b086      	sub	sp, #24
 800b06c:	af00      	add	r7, sp, #0
 800b06e:	4603      	mov	r3, r0
 800b070:	6039      	str	r1, [r7, #0]
 800b072:	71fb      	strb	r3, [r7, #7]
 800b074:	4613      	mov	r3, r2
 800b076:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b078:	f3ef 8310 	mrs	r3, PRIMASK
 800b07c:	60fb      	str	r3, [r7, #12]
  return(result);
 800b07e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800b080:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b082:	b672      	cpsid	i
}
 800b084:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 800b086:	79bb      	ldrb	r3, [r7, #6]
 800b088:	b29b      	uxth	r3, r3
 800b08a:	79f9      	ldrb	r1, [r7, #7]
 800b08c:	683a      	ldr	r2, [r7, #0]
 800b08e:	4806      	ldr	r0, [pc, #24]	; (800b0a8 <SUBGRF_ReadBuffer+0x40>)
 800b090:	f7fa feda 	bl	8005e48 <HAL_SUBGHZ_ReadBuffer>
 800b094:	697b      	ldr	r3, [r7, #20]
 800b096:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b098:	693b      	ldr	r3, [r7, #16]
 800b09a:	f383 8810 	msr	PRIMASK, r3
}
 800b09e:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800b0a0:	bf00      	nop
 800b0a2:	3718      	adds	r7, #24
 800b0a4:	46bd      	mov	sp, r7
 800b0a6:	bd80      	pop	{r7, pc}
 800b0a8:	200004fc 	.word	0x200004fc

0800b0ac <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 800b0ac:	b580      	push	{r7, lr}
 800b0ae:	b086      	sub	sp, #24
 800b0b0:	af00      	add	r7, sp, #0
 800b0b2:	4603      	mov	r3, r0
 800b0b4:	6039      	str	r1, [r7, #0]
 800b0b6:	71fb      	strb	r3, [r7, #7]
 800b0b8:	4613      	mov	r3, r2
 800b0ba:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b0bc:	f3ef 8310 	mrs	r3, PRIMASK
 800b0c0:	60fb      	str	r3, [r7, #12]
  return(result);
 800b0c2:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800b0c4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b0c6:	b672      	cpsid	i
}
 800b0c8:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 800b0ca:	88bb      	ldrh	r3, [r7, #4]
 800b0cc:	79f9      	ldrb	r1, [r7, #7]
 800b0ce:	683a      	ldr	r2, [r7, #0]
 800b0d0:	4806      	ldr	r0, [pc, #24]	; (800b0ec <SUBGRF_WriteCommand+0x40>)
 800b0d2:	f7fa fdb3 	bl	8005c3c <HAL_SUBGHZ_ExecSetCmd>
 800b0d6:	697b      	ldr	r3, [r7, #20]
 800b0d8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b0da:	693b      	ldr	r3, [r7, #16]
 800b0dc:	f383 8810 	msr	PRIMASK, r3
}
 800b0e0:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800b0e2:	bf00      	nop
 800b0e4:	3718      	adds	r7, #24
 800b0e6:	46bd      	mov	sp, r7
 800b0e8:	bd80      	pop	{r7, pc}
 800b0ea:	bf00      	nop
 800b0ec:	200004fc 	.word	0x200004fc

0800b0f0 <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 800b0f0:	b580      	push	{r7, lr}
 800b0f2:	b086      	sub	sp, #24
 800b0f4:	af00      	add	r7, sp, #0
 800b0f6:	4603      	mov	r3, r0
 800b0f8:	6039      	str	r1, [r7, #0]
 800b0fa:	71fb      	strb	r3, [r7, #7]
 800b0fc:	4613      	mov	r3, r2
 800b0fe:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b100:	f3ef 8310 	mrs	r3, PRIMASK
 800b104:	60fb      	str	r3, [r7, #12]
  return(result);
 800b106:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800b108:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b10a:	b672      	cpsid	i
}
 800b10c:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 800b10e:	88bb      	ldrh	r3, [r7, #4]
 800b110:	79f9      	ldrb	r1, [r7, #7]
 800b112:	683a      	ldr	r2, [r7, #0]
 800b114:	4806      	ldr	r0, [pc, #24]	; (800b130 <SUBGRF_ReadCommand+0x40>)
 800b116:	f7fa fdf0 	bl	8005cfa <HAL_SUBGHZ_ExecGetCmd>
 800b11a:	697b      	ldr	r3, [r7, #20]
 800b11c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b11e:	693b      	ldr	r3, [r7, #16]
 800b120:	f383 8810 	msr	PRIMASK, r3
}
 800b124:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800b126:	bf00      	nop
 800b128:	3718      	adds	r7, #24
 800b12a:	46bd      	mov	sp, r7
 800b12c:	bd80      	pop	{r7, pc}
 800b12e:	bf00      	nop
 800b130:	200004fc 	.word	0x200004fc

0800b134 <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 800b134:	b580      	push	{r7, lr}
 800b136:	b084      	sub	sp, #16
 800b138:	af00      	add	r7, sp, #0
 800b13a:	4603      	mov	r3, r0
 800b13c:	460a      	mov	r2, r1
 800b13e:	71fb      	strb	r3, [r7, #7]
 800b140:	4613      	mov	r3, r2
 800b142:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 800b144:	2301      	movs	r3, #1
 800b146:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 800b148:	79bb      	ldrb	r3, [r7, #6]
 800b14a:	2b01      	cmp	r3, #1
 800b14c:	d10d      	bne.n	800b16a <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 800b14e:	79fb      	ldrb	r3, [r7, #7]
 800b150:	2b01      	cmp	r3, #1
 800b152:	d104      	bne.n	800b15e <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 800b154:	2302      	movs	r3, #2
 800b156:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 800b158:	2004      	movs	r0, #4
 800b15a:	f000 f8ef 	bl	800b33c <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 800b15e:	79fb      	ldrb	r3, [r7, #7]
 800b160:	2b02      	cmp	r3, #2
 800b162:	d107      	bne.n	800b174 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 800b164:	2303      	movs	r3, #3
 800b166:	73fb      	strb	r3, [r7, #15]
 800b168:	e004      	b.n	800b174 <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 800b16a:	79bb      	ldrb	r3, [r7, #6]
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d101      	bne.n	800b174 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 800b170:	2301      	movs	r3, #1
 800b172:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 800b174:	7bfb      	ldrb	r3, [r7, #15]
 800b176:	4618      	mov	r0, r3
 800b178:	f000 fad2 	bl	800b720 <RBI_ConfigRFSwitch>
}
 800b17c:	bf00      	nop
 800b17e:	3710      	adds	r7, #16
 800b180:	46bd      	mov	sp, r7
 800b182:	bd80      	pop	{r7, pc}

0800b184 <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power )
{
 800b184:	b580      	push	{r7, lr}
 800b186:	b084      	sub	sp, #16
 800b188:	af00      	add	r7, sp, #0
 800b18a:	4603      	mov	r3, r0
 800b18c:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 800b18e:	2301      	movs	r3, #1
 800b190:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 800b192:	f000 fb0f 	bl	800b7b4 <RBI_GetTxConfig>
 800b196:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 800b198:	68bb      	ldr	r3, [r7, #8]
 800b19a:	2b02      	cmp	r3, #2
 800b19c:	d016      	beq.n	800b1cc <SUBGRF_SetRfTxPower+0x48>
 800b19e:	68bb      	ldr	r3, [r7, #8]
 800b1a0:	2b02      	cmp	r3, #2
 800b1a2:	dc16      	bgt.n	800b1d2 <SUBGRF_SetRfTxPower+0x4e>
 800b1a4:	68bb      	ldr	r3, [r7, #8]
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d003      	beq.n	800b1b2 <SUBGRF_SetRfTxPower+0x2e>
 800b1aa:	68bb      	ldr	r3, [r7, #8]
 800b1ac:	2b01      	cmp	r3, #1
 800b1ae:	d00a      	beq.n	800b1c6 <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 800b1b0:	e00f      	b.n	800b1d2 <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 800b1b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b1b6:	2b0f      	cmp	r3, #15
 800b1b8:	dd02      	ble.n	800b1c0 <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 800b1ba:	2302      	movs	r3, #2
 800b1bc:	73fb      	strb	r3, [r7, #15]
            break;
 800b1be:	e009      	b.n	800b1d4 <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 800b1c0:	2301      	movs	r3, #1
 800b1c2:	73fb      	strb	r3, [r7, #15]
            break;
 800b1c4:	e006      	b.n	800b1d4 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 800b1c6:	2301      	movs	r3, #1
 800b1c8:	73fb      	strb	r3, [r7, #15]
            break;
 800b1ca:	e003      	b.n	800b1d4 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 800b1cc:	2302      	movs	r3, #2
 800b1ce:	73fb      	strb	r3, [r7, #15]
            break;
 800b1d0:	e000      	b.n	800b1d4 <SUBGRF_SetRfTxPower+0x50>
            break;
 800b1d2:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 800b1d4:	f997 1007 	ldrsb.w	r1, [r7, #7]
 800b1d8:	7bfb      	ldrb	r3, [r7, #15]
 800b1da:	2202      	movs	r2, #2
 800b1dc:	4618      	mov	r0, r3
 800b1de:	f7ff fbcd 	bl	800a97c <SUBGRF_SetTxParams>

    return paSelect;
 800b1e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1e4:	4618      	mov	r0, r3
 800b1e6:	3710      	adds	r7, #16
 800b1e8:	46bd      	mov	sp, r7
 800b1ea:	bd80      	pop	{r7, pc}

0800b1ec <SUBGRF_GetRadioWakeUpTime>:

uint32_t SUBGRF_GetRadioWakeUpTime( void )
{
 800b1ec:	b480      	push	{r7}
 800b1ee:	af00      	add	r7, sp, #0
    return RF_WAKEUP_TIME;
 800b1f0:	2301      	movs	r3, #1
}
 800b1f2:	4618      	mov	r0, r3
 800b1f4:	46bd      	mov	sp, r7
 800b1f6:	bc80      	pop	{r7}
 800b1f8:	4770      	bx	lr
	...

0800b1fc <HAL_SUBGHZ_TxCpltCallback>:

/* HAL_SUBGHz Callbacks definitions */
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800b1fc:	b580      	push	{r7, lr}
 800b1fe:	b082      	sub	sp, #8
 800b200:	af00      	add	r7, sp, #0
 800b202:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 800b204:	4b03      	ldr	r3, [pc, #12]	; (800b214 <HAL_SUBGHZ_TxCpltCallback+0x18>)
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	2001      	movs	r0, #1
 800b20a:	4798      	blx	r3
}
 800b20c:	bf00      	nop
 800b20e:	3708      	adds	r7, #8
 800b210:	46bd      	mov	sp, r7
 800b212:	bd80      	pop	{r7, pc}
 800b214:	20000afc 	.word	0x20000afc

0800b218 <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800b218:	b580      	push	{r7, lr}
 800b21a:	b082      	sub	sp, #8
 800b21c:	af00      	add	r7, sp, #0
 800b21e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 800b220:	4b03      	ldr	r3, [pc, #12]	; (800b230 <HAL_SUBGHZ_RxCpltCallback+0x18>)
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	2002      	movs	r0, #2
 800b226:	4798      	blx	r3
}
 800b228:	bf00      	nop
 800b22a:	3708      	adds	r7, #8
 800b22c:	46bd      	mov	sp, r7
 800b22e:	bd80      	pop	{r7, pc}
 800b230:	20000afc 	.word	0x20000afc

0800b234 <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 800b234:	b580      	push	{r7, lr}
 800b236:	b082      	sub	sp, #8
 800b238:	af00      	add	r7, sp, #0
 800b23a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 800b23c:	4b03      	ldr	r3, [pc, #12]	; (800b24c <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	2040      	movs	r0, #64	; 0x40
 800b242:	4798      	blx	r3
}
 800b244:	bf00      	nop
 800b246:	3708      	adds	r7, #8
 800b248:	46bd      	mov	sp, r7
 800b24a:	bd80      	pop	{r7, pc}
 800b24c:	20000afc 	.word	0x20000afc

0800b250 <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 800b250:	b580      	push	{r7, lr}
 800b252:	b082      	sub	sp, #8
 800b254:	af00      	add	r7, sp, #0
 800b256:	6078      	str	r0, [r7, #4]
 800b258:	460b      	mov	r3, r1
 800b25a:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 800b25c:	78fb      	ldrb	r3, [r7, #3]
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d002      	beq.n	800b268 <HAL_SUBGHZ_CADStatusCallback+0x18>
 800b262:	2b01      	cmp	r3, #1
 800b264:	d005      	beq.n	800b272 <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 800b266:	e00a      	b.n	800b27e <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 800b268:	4b07      	ldr	r3, [pc, #28]	; (800b288 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	2080      	movs	r0, #128	; 0x80
 800b26e:	4798      	blx	r3
            break;
 800b270:	e005      	b.n	800b27e <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 800b272:	4b05      	ldr	r3, [pc, #20]	; (800b288 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	f44f 7080 	mov.w	r0, #256	; 0x100
 800b27a:	4798      	blx	r3
            break;
 800b27c:	bf00      	nop
    }
}
 800b27e:	bf00      	nop
 800b280:	3708      	adds	r7, #8
 800b282:	46bd      	mov	sp, r7
 800b284:	bd80      	pop	{r7, pc}
 800b286:	bf00      	nop
 800b288:	20000afc 	.word	0x20000afc

0800b28c <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800b28c:	b580      	push	{r7, lr}
 800b28e:	b082      	sub	sp, #8
 800b290:	af00      	add	r7, sp, #0
 800b292:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 800b294:	4b04      	ldr	r3, [pc, #16]	; (800b2a8 <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	f44f 7000 	mov.w	r0, #512	; 0x200
 800b29c:	4798      	blx	r3
}
 800b29e:	bf00      	nop
 800b2a0:	3708      	adds	r7, #8
 800b2a2:	46bd      	mov	sp, r7
 800b2a4:	bd80      	pop	{r7, pc}
 800b2a6:	bf00      	nop
 800b2a8:	20000afc 	.word	0x20000afc

0800b2ac <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800b2ac:	b580      	push	{r7, lr}
 800b2ae:	b082      	sub	sp, #8
 800b2b0:	af00      	add	r7, sp, #0
 800b2b2:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 800b2b4:	4b03      	ldr	r3, [pc, #12]	; (800b2c4 <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	2020      	movs	r0, #32
 800b2ba:	4798      	blx	r3
}
 800b2bc:	bf00      	nop
 800b2be:	3708      	adds	r7, #8
 800b2c0:	46bd      	mov	sp, r7
 800b2c2:	bd80      	pop	{r7, pc}
 800b2c4:	20000afc 	.word	0x20000afc

0800b2c8 <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800b2c8:	b580      	push	{r7, lr}
 800b2ca:	b082      	sub	sp, #8
 800b2cc:	af00      	add	r7, sp, #0
 800b2ce:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 800b2d0:	4b03      	ldr	r3, [pc, #12]	; (800b2e0 <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	2004      	movs	r0, #4
 800b2d6:	4798      	blx	r3
}
 800b2d8:	bf00      	nop
 800b2da:	3708      	adds	r7, #8
 800b2dc:	46bd      	mov	sp, r7
 800b2de:	bd80      	pop	{r7, pc}
 800b2e0:	20000afc 	.word	0x20000afc

0800b2e4 <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800b2e4:	b580      	push	{r7, lr}
 800b2e6:	b082      	sub	sp, #8
 800b2e8:	af00      	add	r7, sp, #0
 800b2ea:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 800b2ec:	4b03      	ldr	r3, [pc, #12]	; (800b2fc <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	2008      	movs	r0, #8
 800b2f2:	4798      	blx	r3
}
 800b2f4:	bf00      	nop
 800b2f6:	3708      	adds	r7, #8
 800b2f8:	46bd      	mov	sp, r7
 800b2fa:	bd80      	pop	{r7, pc}
 800b2fc:	20000afc 	.word	0x20000afc

0800b300 <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800b300:	b580      	push	{r7, lr}
 800b302:	b082      	sub	sp, #8
 800b304:	af00      	add	r7, sp, #0
 800b306:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 800b308:	4b03      	ldr	r3, [pc, #12]	; (800b318 <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	2010      	movs	r0, #16
 800b30e:	4798      	blx	r3
}
 800b310:	bf00      	nop
 800b312:	3708      	adds	r7, #8
 800b314:	46bd      	mov	sp, r7
 800b316:	bd80      	pop	{r7, pc}
 800b318:	20000afc 	.word	0x20000afc

0800b31c <HAL_SUBGHZ_LrFhssHopCallback>:

void HAL_SUBGHZ_LrFhssHopCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800b31c:	b580      	push	{r7, lr}
 800b31e:	b082      	sub	sp, #8
 800b320:	af00      	add	r7, sp, #0
 800b322:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
 800b324:	4b04      	ldr	r3, [pc, #16]	; (800b338 <HAL_SUBGHZ_LrFhssHopCallback+0x1c>)
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800b32c:	4798      	blx	r3
}
 800b32e:	bf00      	nop
 800b330:	3708      	adds	r7, #8
 800b332:	46bd      	mov	sp, r7
 800b334:	bd80      	pop	{r7, pc}
 800b336:	bf00      	nop
 800b338:	20000afc 	.word	0x20000afc

0800b33c <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 800b33c:	b580      	push	{r7, lr}
 800b33e:	b084      	sub	sp, #16
 800b340:	af00      	add	r7, sp, #0
 800b342:	4603      	mov	r3, r0
 800b344:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 800b346:	f000 fa4b 	bl	800b7e0 <RBI_IsDCDC>
 800b34a:	4603      	mov	r3, r0
 800b34c:	2b01      	cmp	r3, #1
 800b34e:	d112      	bne.n	800b376 <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 800b350:	f640 1023 	movw	r0, #2339	; 0x923
 800b354:	f7ff fe0e 	bl	800af74 <SUBGRF_ReadRegister>
 800b358:	4603      	mov	r3, r0
 800b35a:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 800b35c:	7bfb      	ldrb	r3, [r7, #15]
 800b35e:	f023 0306 	bic.w	r3, r3, #6
 800b362:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 800b364:	7bfa      	ldrb	r2, [r7, #15]
 800b366:	79fb      	ldrb	r3, [r7, #7]
 800b368:	4313      	orrs	r3, r2
 800b36a:	b2db      	uxtb	r3, r3
 800b36c:	4619      	mov	r1, r3
 800b36e:	f640 1023 	movw	r0, #2339	; 0x923
 800b372:	f7ff fdeb 	bl	800af4c <SUBGRF_WriteRegister>
  }
}
 800b376:	bf00      	nop
 800b378:	3710      	adds	r7, #16
 800b37a:	46bd      	mov	sp, r7
 800b37c:	bd80      	pop	{r7, pc}
	...

0800b380 <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
 800b380:	b480      	push	{r7}
 800b382:	b085      	sub	sp, #20
 800b384:	af00      	add	r7, sp, #0
 800b386:	6078      	str	r0, [r7, #4]
    uint8_t i;

    if( bandwidth == 0 )
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d101      	bne.n	800b392 <SUBGRF_GetFskBandwidthRegValue+0x12>
    {
        return( 0x1F );
 800b38e:	231f      	movs	r3, #31
 800b390:	e016      	b.n	800b3c0 <SUBGRF_GetFskBandwidthRegValue+0x40>
    }

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 800b392:	2300      	movs	r3, #0
 800b394:	73fb      	strb	r3, [r7, #15]
 800b396:	e00f      	b.n	800b3b8 <SUBGRF_GetFskBandwidthRegValue+0x38>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 800b398:	7bfb      	ldrb	r3, [r7, #15]
 800b39a:	4a0c      	ldr	r2, [pc, #48]	; (800b3cc <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 800b39c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b3a0:	687a      	ldr	r2, [r7, #4]
 800b3a2:	429a      	cmp	r2, r3
 800b3a4:	d205      	bcs.n	800b3b2 <SUBGRF_GetFskBandwidthRegValue+0x32>
        {
            return FskBandwidths[i].RegValue;
 800b3a6:	7bfb      	ldrb	r3, [r7, #15]
 800b3a8:	4a08      	ldr	r2, [pc, #32]	; (800b3cc <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 800b3aa:	00db      	lsls	r3, r3, #3
 800b3ac:	4413      	add	r3, r2
 800b3ae:	791b      	ldrb	r3, [r3, #4]
 800b3b0:	e006      	b.n	800b3c0 <SUBGRF_GetFskBandwidthRegValue+0x40>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 800b3b2:	7bfb      	ldrb	r3, [r7, #15]
 800b3b4:	3301      	adds	r3, #1
 800b3b6:	73fb      	strb	r3, [r7, #15]
 800b3b8:	7bfb      	ldrb	r3, [r7, #15]
 800b3ba:	2b15      	cmp	r3, #21
 800b3bc:	d9ec      	bls.n	800b398 <SUBGRF_GetFskBandwidthRegValue+0x18>
        }
    }
    // ERROR: Value not found
    while( 1 );
 800b3be:	e7fe      	b.n	800b3be <SUBGRF_GetFskBandwidthRegValue+0x3e>
}
 800b3c0:	4618      	mov	r0, r3
 800b3c2:	3714      	adds	r7, #20
 800b3c4:	46bd      	mov	sp, r7
 800b3c6:	bc80      	pop	{r7}
 800b3c8:	4770      	bx	lr
 800b3ca:	bf00      	nop
 800b3cc:	0800d0d8 	.word	0x0800d0d8

0800b3d0 <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 800b3d0:	b580      	push	{r7, lr}
 800b3d2:	b08a      	sub	sp, #40	; 0x28
 800b3d4:	af00      	add	r7, sp, #0
 800b3d6:	6078      	str	r0, [r7, #4]
 800b3d8:	6039      	str	r1, [r7, #0]
  uint8_t BwMant[] = {4, 8, 10, 12};
 800b3da:	4b35      	ldr	r3, [pc, #212]	; (800b4b0 <SUBGRF_GetCFO+0xe0>)
 800b3dc:	60fb      	str	r3, [r7, #12]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSELR ));
 800b3de:	f640 0007 	movw	r0, #2055	; 0x807
 800b3e2:	f7ff fdc7 	bl	800af74 <SUBGRF_ReadRegister>
 800b3e6:	4603      	mov	r3, r0
 800b3e8:	77fb      	strb	r3, [r7, #31]
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 800b3ea:	7ffb      	ldrb	r3, [r7, #31]
 800b3ec:	08db      	lsrs	r3, r3, #3
 800b3ee:	b2db      	uxtb	r3, r3
 800b3f0:	f003 0303 	and.w	r3, r3, #3
 800b3f4:	3328      	adds	r3, #40	; 0x28
 800b3f6:	443b      	add	r3, r7
 800b3f8:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 800b3fc:	77bb      	strb	r3, [r7, #30]
  uint8_t bandwidth_exp = reg & 0x7;
 800b3fe:	7ffb      	ldrb	r3, [r7, #31]
 800b400:	f003 0307 	and.w	r3, r3, #7
 800b404:	777b      	strb	r3, [r7, #29]
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp + 1 )));
 800b406:	7fba      	ldrb	r2, [r7, #30]
 800b408:	7f7b      	ldrb	r3, [r7, #29]
 800b40a:	3301      	adds	r3, #1
 800b40c:	fa02 f303 	lsl.w	r3, r2, r3
 800b410:	461a      	mov	r2, r3
 800b412:	4b28      	ldr	r3, [pc, #160]	; (800b4b4 <SUBGRF_GetCFO+0xe4>)
 800b414:	fbb3 f3f2 	udiv	r3, r3, r2
 800b418:	61bb      	str	r3, [r7, #24]
  uint32_t cf_osr = cf_fs / bitRate;
 800b41a:	69ba      	ldr	r2, [r7, #24]
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b422:	617b      	str	r3, [r7, #20]
  uint8_t interp = 1;
 800b424:	2301      	movs	r3, #1
 800b426:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 800b42a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b42e:	697a      	ldr	r2, [r7, #20]
 800b430:	fb02 f303 	mul.w	r3, r2, r3
 800b434:	2b07      	cmp	r3, #7
 800b436:	d802      	bhi.n	800b43e <SUBGRF_GetCFO+0x6e>
  {
    interp = 2;
 800b438:	2302      	movs	r3, #2
 800b43a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  if (cf_osr * interp < 4)
 800b43e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b442:	697a      	ldr	r2, [r7, #20]
 800b444:	fb02 f303 	mul.w	r3, r2, r3
 800b448:	2b03      	cmp	r3, #3
 800b44a:	d802      	bhi.n	800b452 <SUBGRF_GetCFO+0x82>
  {
    interp = 4;
 800b44c:	2304      	movs	r3, #4
 800b44e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 800b452:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b456:	69bb      	ldr	r3, [r7, #24]
 800b458:	fb02 f303 	mul.w	r3, r2, r3
 800b45c:	613b      	str	r3, [r7, #16]
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_GCFORH ) & 0xF ) << 8;
 800b45e:	f44f 60d6 	mov.w	r0, #1712	; 0x6b0
 800b462:	f7ff fd87 	bl	800af74 <SUBGRF_ReadRegister>
 800b466:	4603      	mov	r3, r0
 800b468:	021b      	lsls	r3, r3, #8
 800b46a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800b46e:	623b      	str	r3, [r7, #32]
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_GCFORL );
 800b470:	f240 60b1 	movw	r0, #1713	; 0x6b1
 800b474:	f7ff fd7e 	bl	800af74 <SUBGRF_ReadRegister>
 800b478:	4603      	mov	r3, r0
 800b47a:	461a      	mov	r2, r3
 800b47c:	6a3b      	ldr	r3, [r7, #32]
 800b47e:	4313      	orrs	r3, r2
 800b480:	623b      	str	r3, [r7, #32]
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 800b482:	6a3b      	ldr	r3, [r7, #32]
 800b484:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d005      	beq.n	800b498 <SUBGRF_GetCFO+0xc8>
  {
    cfo_bin |= 0xFFFFF000;
 800b48c:	6a3b      	ldr	r3, [r7, #32]
 800b48e:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800b492:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800b496:	623b      	str	r3, [r7, #32]
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 800b498:	693b      	ldr	r3, [r7, #16]
 800b49a:	095b      	lsrs	r3, r3, #5
 800b49c:	6a3a      	ldr	r2, [r7, #32]
 800b49e:	fb02 f303 	mul.w	r3, r2, r3
 800b4a2:	11da      	asrs	r2, r3, #7
 800b4a4:	683b      	ldr	r3, [r7, #0]
 800b4a6:	601a      	str	r2, [r3, #0]
}
 800b4a8:	bf00      	nop
 800b4aa:	3728      	adds	r7, #40	; 0x28
 800b4ac:	46bd      	mov	sp, r7
 800b4ae:	bd80      	pop	{r7, pc}
 800b4b0:	0c0a0804 	.word	0x0c0a0804
 800b4b4:	01e84800 	.word	0x01e84800

0800b4b8 <RFW_TransmitLongPacket>:
#endif /* RFW_ENABLE == 1 */

/* Exported functions --------------------------------------------------------*/
int32_t RFW_TransmitLongPacket( uint16_t payload_size, uint32_t timeout,
                                void ( *TxLongPacketGetNextChunkCb )( uint8_t **buffer, uint8_t buffer_size ) )
{
 800b4b8:	b480      	push	{r7}
 800b4ba:	b087      	sub	sp, #28
 800b4bc:	af00      	add	r7, sp, #0
 800b4be:	4603      	mov	r3, r0
 800b4c0:	60b9      	str	r1, [r7, #8]
 800b4c2:	607a      	str	r2, [r7, #4]
 800b4c4:	81fb      	strh	r3, [r7, #14]
    int32_t status = 0;
 800b4c6:	2300      	movs	r3, #0
 800b4c8:	617b      	str	r3, [r7, #20]
        default:
            break;
        }
    }
#else
    status = -1;
 800b4ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b4ce:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 800b4d0:	697b      	ldr	r3, [r7, #20]
}
 800b4d2:	4618      	mov	r0, r3
 800b4d4:	371c      	adds	r7, #28
 800b4d6:	46bd      	mov	sp, r7
 800b4d8:	bc80      	pop	{r7}
 800b4da:	4770      	bx	lr

0800b4dc <RFW_ReceiveLongPacket>:

int32_t RFW_ReceiveLongPacket( uint8_t boosted_mode, uint32_t timeout,
                               void ( *RxLongPacketStoreChunkCb )( uint8_t *buffer, uint8_t chunk_size ) )
{
 800b4dc:	b480      	push	{r7}
 800b4de:	b087      	sub	sp, #28
 800b4e0:	af00      	add	r7, sp, #0
 800b4e2:	4603      	mov	r3, r0
 800b4e4:	60b9      	str	r1, [r7, #8]
 800b4e6:	607a      	str	r2, [r7, #4]
 800b4e8:	73fb      	strb	r3, [r7, #15]
    int32_t status = 0;
 800b4ea:	2300      	movs	r3, #0
 800b4ec:	617b      	str	r3, [r7, #20]
        {
            SUBGRF_SetRx( 0xFFFFFF ); /* Rx Continuous */
        }
    }
#else
    status = -1;
 800b4ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b4f2:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 800b4f4:	697b      	ldr	r3, [r7, #20]
}
 800b4f6:	4618      	mov	r0, r3
 800b4f8:	371c      	adds	r7, #28
 800b4fa:	46bd      	mov	sp, r7
 800b4fc:	bc80      	pop	{r7}
 800b4fe:	4770      	bx	lr

0800b500 <RFW_Init>:

int32_t RFW_Init( ConfigGeneric_t *config, RadioEvents_t *RadioEvents, TimerEvent_t *TimeoutTimerEvent )
{
 800b500:	b480      	push	{r7}
 800b502:	b085      	sub	sp, #20
 800b504:	af00      	add	r7, sp, #0
 800b506:	60f8      	str	r0, [r7, #12]
 800b508:	60b9      	str	r1, [r7, #8]
 800b50a:	607a      	str	r2, [r7, #4]
    RFWPacket.Init.Enable = 1;
    /* Initialize Timer for end of fixed packet, started at sync*/
    TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
    return 0;
#else
    return -1;
 800b50c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
#endif /* RFW_ENABLE == 1 */
}
 800b510:	4618      	mov	r0, r3
 800b512:	3714      	adds	r7, #20
 800b514:	46bd      	mov	sp, r7
 800b516:	bc80      	pop	{r7}
 800b518:	4770      	bx	lr

0800b51a <RFW_DeInit>:

void RFW_DeInit( void )
{
 800b51a:	b480      	push	{r7}
 800b51c:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Enable = 0; /*Disable the RFWPacket decoding*/
#endif /* RFW_ENABLE == 1 */
}
 800b51e:	bf00      	nop
 800b520:	46bd      	mov	sp, r7
 800b522:	bc80      	pop	{r7}
 800b524:	4770      	bx	lr

0800b526 <RFW_Is_Init>:

uint8_t RFW_Is_Init( void )
{
 800b526:	b480      	push	{r7}
 800b528:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.Init.Enable;
#else
    return 0;
 800b52a:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 800b52c:	4618      	mov	r0, r3
 800b52e:	46bd      	mov	sp, r7
 800b530:	bc80      	pop	{r7}
 800b532:	4770      	bx	lr

0800b534 <RFW_Is_LongPacketModeEnabled>:

uint8_t RFW_Is_LongPacketModeEnabled( void )
{
 800b534:	b480      	push	{r7}
 800b536:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.LongPacketModeEnable;
#else
    return 0;
 800b538:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 800b53a:	4618      	mov	r0, r3
 800b53c:	46bd      	mov	sp, r7
 800b53e:	bc80      	pop	{r7}
 800b540:	4770      	bx	lr

0800b542 <RFW_SetAntSwitch>:

void RFW_SetAntSwitch( uint8_t AntSwitch )
{
 800b542:	b480      	push	{r7}
 800b544:	b083      	sub	sp, #12
 800b546:	af00      	add	r7, sp, #0
 800b548:	4603      	mov	r3, r0
 800b54a:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.AntSwitchPaSelect = AntSwitch;
#endif /* RFW_ENABLE == 1 */
}
 800b54c:	bf00      	nop
 800b54e:	370c      	adds	r7, #12
 800b550:	46bd      	mov	sp, r7
 800b552:	bc80      	pop	{r7}
 800b554:	4770      	bx	lr

0800b556 <RFW_TransmitInit>:

int32_t RFW_TransmitInit( uint8_t *inOutBuffer, uint8_t size, uint8_t *outSize )
{
 800b556:	b480      	push	{r7}
 800b558:	b087      	sub	sp, #28
 800b55a:	af00      	add	r7, sp, #0
 800b55c:	60f8      	str	r0, [r7, #12]
 800b55e:	460b      	mov	r3, r1
 800b560:	607a      	str	r2, [r7, #4]
 800b562:	72fb      	strb	r3, [r7, #11]
    int32_t status = -1;
 800b564:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b568:	617b      	str	r3, [r7, #20]
        RFWPacket.LongPacketModeEnable = 0;

        status = 0;
    }
#endif /* RFW_ENABLE == 1 */
    return status;
 800b56a:	697b      	ldr	r3, [r7, #20]
}
 800b56c:	4618      	mov	r0, r3
 800b56e:	371c      	adds	r7, #28
 800b570:	46bd      	mov	sp, r7
 800b572:	bc80      	pop	{r7}
 800b574:	4770      	bx	lr

0800b576 <RFW_ReceiveInit>:

int32_t RFW_ReceiveInit( void )
{
 800b576:	b480      	push	{r7}
 800b578:	af00      	add	r7, sp, #0
    RFWPacket.RxPayloadOffset = 0;

    RFWPacket.LongPacketModeEnable = 0;
    return 0;
#else
    return -1;
 800b57a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
#endif /* RFW_ENABLE == 1 */
}
 800b57e:	4618      	mov	r0, r3
 800b580:	46bd      	mov	sp, r7
 800b582:	bc80      	pop	{r7}
 800b584:	4770      	bx	lr

0800b586 <RFW_DeInit_TxLongPacket>:

void RFW_DeInit_TxLongPacket( void )
{
 800b586:	b480      	push	{r7}
 800b588:	af00      	add	r7, sp, #0
    /*long packet WA*/
    uint8_t reg = SUBGRF_ReadRegister( SUBGHZ_GPKTCTL1AR );
    SUBGRF_WriteRegister( SUBGHZ_GPKTCTL1AR, reg & ~0x02 ); /* clear infinite_sequence bit */
    SUBGRF_WriteRegister( SUBGHZ_GRTXPLDLEN, 0xFF ); /* RxTxPldLen: reset to 0xFF */
#endif /* RFW_LONGPACKET_ENABLE == 1 */
}
 800b58a:	bf00      	nop
 800b58c:	46bd      	mov	sp, r7
 800b58e:	bc80      	pop	{r7}
 800b590:	4770      	bx	lr

0800b592 <RFW_ReceivePayload>:

void RFW_ReceivePayload( void )
{
 800b592:	b480      	push	{r7}
 800b594:	af00      	add	r7, sp, #0
        /*timeout*/
        SUBGRF_SetStandby( STDBY_RC );
        RFWPacket.Init.RadioEvents->RxTimeout( );
    }
#endif /* RFW_ENABLE == 1 */
}
 800b596:	bf00      	nop
 800b598:	46bd      	mov	sp, r7
 800b59a:	bc80      	pop	{r7}
 800b59c:	4770      	bx	lr

0800b59e <RFW_SetRadioModem>:

void RFW_SetRadioModem( RadioModems_t Modem )
{
 800b59e:	b480      	push	{r7}
 800b5a0:	b083      	sub	sp, #12
 800b5a2:	af00      	add	r7, sp, #0
 800b5a4:	4603      	mov	r3, r0
 800b5a6:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Modem = Modem;
#endif /* RFW_ENABLE == 1 */
}
 800b5a8:	bf00      	nop
 800b5aa:	370c      	adds	r7, #12
 800b5ac:	46bd      	mov	sp, r7
 800b5ae:	bc80      	pop	{r7}
 800b5b0:	4770      	bx	lr

0800b5b2 <MX_SubGHz_Phy_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_SubGHz_Phy_Init(void)
{
 800b5b2:	b580      	push	{r7, lr}
 800b5b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_1 */

  /* USER CODE END MX_SubGHz_Phy_Init_1 */
  SystemApp_Init();
 800b5b6:	f7f7 fb1e 	bl	8002bf6 <SystemApp_Init>
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_1_1 */

  /* USER CODE END MX_SubGHz_Phy_Init_1_1 */
  SubghzApp_Init();
 800b5ba:	f000 f809 	bl	800b5d0 <SubghzApp_Init>
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_2 */

  /* USER CODE END MX_SubGHz_Phy_Init_2 */
}
 800b5be:	bf00      	nop
 800b5c0:	bd80      	pop	{r7, pc}

0800b5c2 <MX_SubGHz_Phy_Process>:

void MX_SubGHz_Phy_Process(void)
{
 800b5c2:	b480      	push	{r7}
 800b5c4:	af00      	add	r7, sp, #0

  /* USER CODE END MX_SubGHz_Phy_Process_1 */
  /* USER CODE BEGIN MX_SubGHz_Phy_Process_OS */

  /* USER CODE END MX_SubGHz_Phy_Process_OS */
}
 800b5c6:	bf00      	nop
 800b5c8:	46bd      	mov	sp, r7
 800b5ca:	bc80      	pop	{r7}
 800b5cc:	4770      	bx	lr
	...

0800b5d0 <SubghzApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SubghzApp_Init(void)
{
 800b5d0:	b580      	push	{r7, lr}
 800b5d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SubghzApp_Init_1 */

  /* USER CODE END SubghzApp_Init_1 */

  /* Radio initialization */
  RadioEvents.TxDone = OnTxDone;
 800b5d4:	4b0a      	ldr	r3, [pc, #40]	; (800b600 <SubghzApp_Init+0x30>)
 800b5d6:	4a0b      	ldr	r2, [pc, #44]	; (800b604 <SubghzApp_Init+0x34>)
 800b5d8:	601a      	str	r2, [r3, #0]
  RadioEvents.RxDone = OnRxDone;
 800b5da:	4b09      	ldr	r3, [pc, #36]	; (800b600 <SubghzApp_Init+0x30>)
 800b5dc:	4a0a      	ldr	r2, [pc, #40]	; (800b608 <SubghzApp_Init+0x38>)
 800b5de:	609a      	str	r2, [r3, #8]
  RadioEvents.TxTimeout = OnTxTimeout;
 800b5e0:	4b07      	ldr	r3, [pc, #28]	; (800b600 <SubghzApp_Init+0x30>)
 800b5e2:	4a0a      	ldr	r2, [pc, #40]	; (800b60c <SubghzApp_Init+0x3c>)
 800b5e4:	605a      	str	r2, [r3, #4]
  RadioEvents.RxTimeout = OnRxTimeout;
 800b5e6:	4b06      	ldr	r3, [pc, #24]	; (800b600 <SubghzApp_Init+0x30>)
 800b5e8:	4a09      	ldr	r2, [pc, #36]	; (800b610 <SubghzApp_Init+0x40>)
 800b5ea:	60da      	str	r2, [r3, #12]
  RadioEvents.RxError = OnRxError;
 800b5ec:	4b04      	ldr	r3, [pc, #16]	; (800b600 <SubghzApp_Init+0x30>)
 800b5ee:	4a09      	ldr	r2, [pc, #36]	; (800b614 <SubghzApp_Init+0x44>)
 800b5f0:	611a      	str	r2, [r3, #16]

  Radio.Init(&RadioEvents);
 800b5f2:	4b09      	ldr	r3, [pc, #36]	; (800b618 <SubghzApp_Init+0x48>)
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	4802      	ldr	r0, [pc, #8]	; (800b600 <SubghzApp_Init+0x30>)
 800b5f8:	4798      	blx	r3

  /* USER CODE BEGIN SubghzApp_Init_2 */

  /* USER CODE END SubghzApp_Init_2 */
}
 800b5fa:	bf00      	nop
 800b5fc:	bd80      	pop	{r7, pc}
 800b5fe:	bf00      	nop
 800b600:	20000b00 	.word	0x20000b00
 800b604:	0800b61d 	.word	0x0800b61d
 800b608:	0800b629 	.word	0x0800b629
 800b60c:	0800b64d 	.word	0x0800b64d
 800b610:	0800b659 	.word	0x0800b659
 800b614:	0800b665 	.word	0x0800b665
 800b618:	0800d048 	.word	0x0800d048

0800b61c <OnTxDone>:

/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/
static void OnTxDone(void)
{
 800b61c:	b480      	push	{r7}
 800b61e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnTxDone */
  /* USER CODE END OnTxDone */
}
 800b620:	bf00      	nop
 800b622:	46bd      	mov	sp, r7
 800b624:	bc80      	pop	{r7}
 800b626:	4770      	bx	lr

0800b628 <OnRxDone>:

static void OnRxDone(uint8_t *payload, uint16_t size, int16_t rssi, int8_t LoraSnr_FskCfo)
{
 800b628:	b480      	push	{r7}
 800b62a:	b085      	sub	sp, #20
 800b62c:	af00      	add	r7, sp, #0
 800b62e:	60f8      	str	r0, [r7, #12]
 800b630:	4608      	mov	r0, r1
 800b632:	4611      	mov	r1, r2
 800b634:	461a      	mov	r2, r3
 800b636:	4603      	mov	r3, r0
 800b638:	817b      	strh	r3, [r7, #10]
 800b63a:	460b      	mov	r3, r1
 800b63c:	813b      	strh	r3, [r7, #8]
 800b63e:	4613      	mov	r3, r2
 800b640:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnRxDone */
  /* USER CODE END OnRxDone */
}
 800b642:	bf00      	nop
 800b644:	3714      	adds	r7, #20
 800b646:	46bd      	mov	sp, r7
 800b648:	bc80      	pop	{r7}
 800b64a:	4770      	bx	lr

0800b64c <OnTxTimeout>:

static void OnTxTimeout(void)
{
 800b64c:	b480      	push	{r7}
 800b64e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnTxTimeout */
  /* USER CODE END OnTxTimeout */
}
 800b650:	bf00      	nop
 800b652:	46bd      	mov	sp, r7
 800b654:	bc80      	pop	{r7}
 800b656:	4770      	bx	lr

0800b658 <OnRxTimeout>:

static void OnRxTimeout(void)
{
 800b658:	b480      	push	{r7}
 800b65a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnRxTimeout */
  /* USER CODE END OnRxTimeout */
}
 800b65c:	bf00      	nop
 800b65e:	46bd      	mov	sp, r7
 800b660:	bc80      	pop	{r7}
 800b662:	4770      	bx	lr

0800b664 <OnRxError>:

static void OnRxError(void)
{
 800b664:	b480      	push	{r7}
 800b666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnRxError */
  /* USER CODE END OnRxError */
}
 800b668:	bf00      	nop
 800b66a:	46bd      	mov	sp, r7
 800b66c:	bc80      	pop	{r7}
 800b66e:	4770      	bx	lr

0800b670 <LL_AHB2_GRP1_EnableClock>:
{
 800b670:	b480      	push	{r7}
 800b672:	b085      	sub	sp, #20
 800b674:	af00      	add	r7, sp, #0
 800b676:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800b678:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b67c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b67e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	4313      	orrs	r3, r2
 800b686:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800b688:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b68c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	4013      	ands	r3, r2
 800b692:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800b694:	68fb      	ldr	r3, [r7, #12]
}
 800b696:	bf00      	nop
 800b698:	3714      	adds	r7, #20
 800b69a:	46bd      	mov	sp, r7
 800b69c:	bc80      	pop	{r7}
 800b69e:	4770      	bx	lr

0800b6a0 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 800b6a0:	b580      	push	{r7, lr}
 800b6a2:	b086      	sub	sp, #24
 800b6a4:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
#else
  /* 2/ Or implement RBI_Init here */
  int32_t retcode = 0;
 800b6a6:	2300      	movs	r3, #0
 800b6a8:	617b      	str	r3, [r7, #20]
  /* USER CODE BEGIN RBI_Init_2 */
	GPIO_InitTypeDef gpio_init_structure = { 0 };
 800b6aa:	463b      	mov	r3, r7
 800b6ac:	2200      	movs	r2, #0
 800b6ae:	601a      	str	r2, [r3, #0]
 800b6b0:	605a      	str	r2, [r3, #4]
 800b6b2:	609a      	str	r2, [r3, #8]
 800b6b4:	60da      	str	r2, [r3, #12]
 800b6b6:	611a      	str	r2, [r3, #16]

	/* Enable the Radio Switch Clock */
	RF_SW_CTRL3_GPIO_CLK_ENABLE();
 800b6b8:	2004      	movs	r0, #4
 800b6ba:	f7ff ffd9 	bl	800b670 <LL_AHB2_GRP1_EnableClock>

	/* Configure the Radio Switch pin */
	gpio_init_structure.Pin = RF_SW_CTRL1_PIN;
 800b6be:	2310      	movs	r3, #16
 800b6c0:	603b      	str	r3, [r7, #0]
	gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 800b6c2:	2301      	movs	r3, #1
 800b6c4:	607b      	str	r3, [r7, #4]
	gpio_init_structure.Pull = GPIO_NOPULL;
 800b6c6:	2300      	movs	r3, #0
 800b6c8:	60bb      	str	r3, [r7, #8]
	gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b6ca:	2303      	movs	r3, #3
 800b6cc:	60fb      	str	r3, [r7, #12]

	HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 800b6ce:	463b      	mov	r3, r7
 800b6d0:	4619      	mov	r1, r3
 800b6d2:	4812      	ldr	r0, [pc, #72]	; (800b71c <RBI_Init+0x7c>)
 800b6d4:	f7f8 fc4e 	bl	8003f74 <HAL_GPIO_Init>

	gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 800b6d8:	2320      	movs	r3, #32
 800b6da:	603b      	str	r3, [r7, #0]
	HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 800b6dc:	463b      	mov	r3, r7
 800b6de:	4619      	mov	r1, r3
 800b6e0:	480e      	ldr	r0, [pc, #56]	; (800b71c <RBI_Init+0x7c>)
 800b6e2:	f7f8 fc47 	bl	8003f74 <HAL_GPIO_Init>

	gpio_init_structure.Pin = RF_SW_CTRL3_PIN;
 800b6e6:	2308      	movs	r3, #8
 800b6e8:	603b      	str	r3, [r7, #0]
	HAL_GPIO_Init(RF_SW_CTRL3_GPIO_PORT, &gpio_init_structure);
 800b6ea:	463b      	mov	r3, r7
 800b6ec:	4619      	mov	r1, r3
 800b6ee:	480b      	ldr	r0, [pc, #44]	; (800b71c <RBI_Init+0x7c>)
 800b6f0:	f7f8 fc40 	bl	8003f74 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 800b6f4:	2200      	movs	r2, #0
 800b6f6:	2120      	movs	r1, #32
 800b6f8:	4808      	ldr	r0, [pc, #32]	; (800b71c <RBI_Init+0x7c>)
 800b6fa:	f7f8 fd9b 	bl	8004234 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 800b6fe:	2200      	movs	r2, #0
 800b700:	2110      	movs	r1, #16
 800b702:	4806      	ldr	r0, [pc, #24]	; (800b71c <RBI_Init+0x7c>)
 800b704:	f7f8 fd96 	bl	8004234 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET);
 800b708:	2200      	movs	r2, #0
 800b70a:	2108      	movs	r1, #8
 800b70c:	4803      	ldr	r0, [pc, #12]	; (800b71c <RBI_Init+0x7c>)
 800b70e:	f7f8 fd91 	bl	8004234 <HAL_GPIO_WritePin>
  /* USER CODE END RBI_Init_2 */
  return retcode;
 800b712:	697b      	ldr	r3, [r7, #20]
#endif  /* USE_BSP_DRIVER  */
}
 800b714:	4618      	mov	r0, r3
 800b716:	3718      	adds	r7, #24
 800b718:	46bd      	mov	sp, r7
 800b71a:	bd80      	pop	{r7, pc}
 800b71c:	48000800 	.word	0x48000800

0800b720 <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 800b720:	b580      	push	{r7, lr}
 800b722:	b084      	sub	sp, #16
 800b724:	af00      	add	r7, sp, #0
 800b726:	4603      	mov	r3, r0
 800b728:	71fb      	strb	r3, [r7, #7]
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
#else
  /* 2/ Or implement RBI_ConfigRFSwitch here */
  int32_t retcode = 0;
 800b72a:	2300      	movs	r3, #0
 800b72c:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */

	switch (Config) {
 800b72e:	79fb      	ldrb	r3, [r7, #7]
 800b730:	2b03      	cmp	r3, #3
 800b732:	d837      	bhi.n	800b7a4 <RBI_ConfigRFSwitch+0x84>
 800b734:	a201      	add	r2, pc, #4	; (adr r2, 800b73c <RBI_ConfigRFSwitch+0x1c>)
 800b736:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b73a:	bf00      	nop
 800b73c:	0800b74d 	.word	0x0800b74d
 800b740:	0800b763 	.word	0x0800b763
 800b744:	0800b779 	.word	0x0800b779
 800b748:	0800b78f 	.word	0x0800b78f
	case RADIO_SWITCH_OFF: {
		/* Turn off switch */
		//		HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN,
		//				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET);
 800b74c:	2201      	movs	r2, #1
 800b74e:	2110      	movs	r1, #16
 800b750:	4817      	ldr	r0, [pc, #92]	; (800b7b0 <RBI_ConfigRFSwitch+0x90>)
 800b752:	f7f8 fd6f 	bl	8004234 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET);
 800b756:	2201      	movs	r2, #1
 800b758:	2120      	movs	r1, #32
 800b75a:	4815      	ldr	r0, [pc, #84]	; (800b7b0 <RBI_ConfigRFSwitch+0x90>)
 800b75c:	f7f8 fd6a 	bl	8004234 <HAL_GPIO_WritePin>
		break;
 800b760:	e021      	b.n	800b7a6 <RBI_ConfigRFSwitch+0x86>
	}
	case RADIO_SWITCH_RX: {
		/*Turns On in Rx Mode the RF Switch */
		//		HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
		HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN,
 800b762:	2200      	movs	r2, #0
 800b764:	2110      	movs	r1, #16
 800b766:	4812      	ldr	r0, [pc, #72]	; (800b7b0 <RBI_ConfigRFSwitch+0x90>)
 800b768:	f7f8 fd64 	bl	8004234 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN,
 800b76c:	2200      	movs	r2, #0
 800b76e:	2120      	movs	r1, #32
 800b770:	480f      	ldr	r0, [pc, #60]	; (800b7b0 <RBI_ConfigRFSwitch+0x90>)
 800b772:	f7f8 fd5f 	bl	8004234 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		break;
 800b776:	e016      	b.n	800b7a6 <RBI_ConfigRFSwitch+0x86>
	}
	case RADIO_SWITCH_RFO_LP: {
		/*Turns On in Tx Low Power the RF Switch */
		//		HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
		HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN,
 800b778:	2200      	movs	r2, #0
 800b77a:	2110      	movs	r1, #16
 800b77c:	480c      	ldr	r0, [pc, #48]	; (800b7b0 <RBI_ConfigRFSwitch+0x90>)
 800b77e:	f7f8 fd59 	bl	8004234 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET);
 800b782:	2201      	movs	r2, #1
 800b784:	2120      	movs	r1, #32
 800b786:	480a      	ldr	r0, [pc, #40]	; (800b7b0 <RBI_ConfigRFSwitch+0x90>)
 800b788:	f7f8 fd54 	bl	8004234 <HAL_GPIO_WritePin>
		break;
 800b78c:	e00b      	b.n	800b7a6 <RBI_ConfigRFSwitch+0x86>
	}
	case RADIO_SWITCH_RFO_HP: {
		/*Turns On in Tx High Power the RF Switch */
		//		HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
		HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN,
 800b78e:	2200      	movs	r2, #0
 800b790:	2110      	movs	r1, #16
 800b792:	4807      	ldr	r0, [pc, #28]	; (800b7b0 <RBI_ConfigRFSwitch+0x90>)
 800b794:	f7f8 fd4e 	bl	8004234 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET);
 800b798:	2201      	movs	r2, #1
 800b79a:	2120      	movs	r1, #32
 800b79c:	4804      	ldr	r0, [pc, #16]	; (800b7b0 <RBI_ConfigRFSwitch+0x90>)
 800b79e:	f7f8 fd49 	bl	8004234 <HAL_GPIO_WritePin>
		break;
 800b7a2:	e000      	b.n	800b7a6 <RBI_ConfigRFSwitch+0x86>
	}
	default:
		break;
 800b7a4:	bf00      	nop
//	default:
//		break;
//	}

  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
 800b7a6:	68fb      	ldr	r3, [r7, #12]
#endif  /* USE_BSP_DRIVER */
}
 800b7a8:	4618      	mov	r0, r3
 800b7aa:	3710      	adds	r7, #16
 800b7ac:	46bd      	mov	sp, r7
 800b7ae:	bd80      	pop	{r7, pc}
 800b7b0:	48000800 	.word	0x48000800

0800b7b4 <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 800b7b4:	b480      	push	{r7}
 800b7b6:	b083      	sub	sp, #12
 800b7b8:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
#else
  /* 2/ Or implement RBI_GetTxConfig here */
  int32_t retcode = RBI_CONF_RFO;
 800b7ba:	2300      	movs	r3, #0
 800b7bc:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
	return RADIO_CONF_RFO_LP_HP;
 800b7be:	2300      	movs	r3, #0
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800b7c0:	4618      	mov	r0, r3
 800b7c2:	370c      	adds	r7, #12
 800b7c4:	46bd      	mov	sp, r7
 800b7c6:	bc80      	pop	{r7}
 800b7c8:	4770      	bx	lr

0800b7ca <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 800b7ca:	b480      	push	{r7}
 800b7cc:	b083      	sub	sp, #12
 800b7ce:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
#else
  /* 2/ Or implement RBI_IsTCXO here */
  int32_t retcode = IS_TCXO_SUPPORTED;
 800b7d0:	2301      	movs	r3, #1
 800b7d2:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_IsTCXO_2 */
	return IS_TCXO_SUPPORTED;
 800b7d4:	2301      	movs	r3, #1
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800b7d6:	4618      	mov	r0, r3
 800b7d8:	370c      	adds	r7, #12
 800b7da:	46bd      	mov	sp, r7
 800b7dc:	bc80      	pop	{r7}
 800b7de:	4770      	bx	lr

0800b7e0 <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 800b7e0:	b480      	push	{r7}
 800b7e2:	b083      	sub	sp, #12
 800b7e4:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
#else
  /* 2/ Or implement RBI_IsDCDC here */
  int32_t retcode = IS_DCDC_SUPPORTED;
 800b7e6:	2301      	movs	r3, #1
 800b7e8:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_IsDCDC_2 */
	return IS_DCDC_SUPPORTED;
 800b7ea:	2301      	movs	r3, #1
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800b7ec:	4618      	mov	r0, r3
 800b7ee:	370c      	adds	r7, #12
 800b7f0:	46bd      	mov	sp, r7
 800b7f2:	bc80      	pop	{r7}
 800b7f4:	4770      	bx	lr

0800b7f6 <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 800b7f6:	b480      	push	{r7}
 800b7f8:	b085      	sub	sp, #20
 800b7fa:	af00      	add	r7, sp, #0
 800b7fc:	4603      	mov	r3, r0
 800b7fe:	71fb      	strb	r3, [r7, #7]
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
#else
  /* 2/ Or implement RBI_RBI_GetRFOMaxPowerConfig here */
  int32_t ret = 0;
 800b800:	2300      	movs	r3, #0
 800b802:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN RBI_GetRFOMaxPowerConfig_2 */
// #warning user to provide its board code or to call his board driver functions
	if (Config == RBI_RFO_LP_MAXPOWER) {
 800b804:	79fb      	ldrb	r3, [r7, #7]
 800b806:	2b00      	cmp	r3, #0
 800b808:	d102      	bne.n	800b810 <RBI_GetRFOMaxPowerConfig+0x1a>
		ret = 15; /*dBm*/
 800b80a:	230f      	movs	r3, #15
 800b80c:	60fb      	str	r3, [r7, #12]
 800b80e:	e001      	b.n	800b814 <RBI_GetRFOMaxPowerConfig+0x1e>
	} else {
		ret = 22; /*dBm*/
 800b810:	2316      	movs	r3, #22
 800b812:	60fb      	str	r3, [r7, #12]
	}
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
 800b814:	68fb      	ldr	r3, [r7, #12]
#endif  /* USE_BSP_DRIVER  */
}
 800b816:	4618      	mov	r0, r3
 800b818:	3714      	adds	r7, #20
 800b81a:	46bd      	mov	sp, r7
 800b81c:	bc80      	pop	{r7}
 800b81e:	4770      	bx	lr

0800b820 <UTIL_MEM_cpy_8>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
 800b820:	b480      	push	{r7}
 800b822:	b087      	sub	sp, #28
 800b824:	af00      	add	r7, sp, #0
 800b826:	60f8      	str	r0, [r7, #12]
 800b828:	60b9      	str	r1, [r7, #8]
 800b82a:	4613      	mov	r3, r2
 800b82c:	80fb      	strh	r3, [r7, #6]
  uint8_t* dst8= (uint8_t *) dst;
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	617b      	str	r3, [r7, #20]
  uint8_t* src8= (uint8_t *) src;
 800b832:	68bb      	ldr	r3, [r7, #8]
 800b834:	613b      	str	r3, [r7, #16]

  while( size-- )
 800b836:	e007      	b.n	800b848 <UTIL_MEM_cpy_8+0x28>
    {
        *dst8++ = *src8++;
 800b838:	693a      	ldr	r2, [r7, #16]
 800b83a:	1c53      	adds	r3, r2, #1
 800b83c:	613b      	str	r3, [r7, #16]
 800b83e:	697b      	ldr	r3, [r7, #20]
 800b840:	1c59      	adds	r1, r3, #1
 800b842:	6179      	str	r1, [r7, #20]
 800b844:	7812      	ldrb	r2, [r2, #0]
 800b846:	701a      	strb	r2, [r3, #0]
  while( size-- )
 800b848:	88fb      	ldrh	r3, [r7, #6]
 800b84a:	1e5a      	subs	r2, r3, #1
 800b84c:	80fa      	strh	r2, [r7, #6]
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d1f2      	bne.n	800b838 <UTIL_MEM_cpy_8+0x18>
    }
}
 800b852:	bf00      	nop
 800b854:	bf00      	nop
 800b856:	371c      	adds	r7, #28
 800b858:	46bd      	mov	sp, r7
 800b85a:	bc80      	pop	{r7}
 800b85c:	4770      	bx	lr

0800b85e <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 800b85e:	b480      	push	{r7}
 800b860:	b085      	sub	sp, #20
 800b862:	af00      	add	r7, sp, #0
 800b864:	6078      	str	r0, [r7, #4]
 800b866:	460b      	mov	r3, r1
 800b868:	70fb      	strb	r3, [r7, #3]
 800b86a:	4613      	mov	r3, r2
 800b86c:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	60fb      	str	r3, [r7, #12]
  while( size-- )
 800b872:	e004      	b.n	800b87e <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	1c5a      	adds	r2, r3, #1
 800b878:	60fa      	str	r2, [r7, #12]
 800b87a:	78fa      	ldrb	r2, [r7, #3]
 800b87c:	701a      	strb	r2, [r3, #0]
  while( size-- )
 800b87e:	883b      	ldrh	r3, [r7, #0]
 800b880:	1e5a      	subs	r2, r3, #1
 800b882:	803a      	strh	r2, [r7, #0]
 800b884:	2b00      	cmp	r3, #0
 800b886:	d1f5      	bne.n	800b874 <UTIL_MEM_set_8+0x16>
  }
}
 800b888:	bf00      	nop
 800b88a:	bf00      	nop
 800b88c:	3714      	adds	r7, #20
 800b88e:	46bd      	mov	sp, r7
 800b890:	bc80      	pop	{r7}
 800b892:	4770      	bx	lr

0800b894 <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 800b894:	b580      	push	{r7, lr}
 800b896:	b084      	sub	sp, #16
 800b898:	af00      	add	r7, sp, #0
 800b89a:	60f8      	str	r0, [r7, #12]
 800b89c:	60b9      	str	r1, [r7, #8]
 800b89e:	603b      	str	r3, [r7, #0]
 800b8a0:	4613      	mov	r3, r2
 800b8a2:	71fb      	strb	r3, [r7, #7]
  if((TimerObject != NULL) && (Callback != NULL))
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d023      	beq.n	800b8f2 <UTIL_TIMER_Create+0x5e>
 800b8aa:	683b      	ldr	r3, [r7, #0]
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d020      	beq.n	800b8f2 <UTIL_TIMER_Create+0x5e>
  {
    TimerObject->Timestamp = 0U;
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	2200      	movs	r2, #0
 800b8b4:	601a      	str	r2, [r3, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 800b8b6:	4b11      	ldr	r3, [pc, #68]	; (800b8fc <UTIL_TIMER_Create+0x68>)
 800b8b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8ba:	68b8      	ldr	r0, [r7, #8]
 800b8bc:	4798      	blx	r3
 800b8be:	4602      	mov	r2, r0
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	605a      	str	r2, [r3, #4]
    TimerObject->IsPending = 0U;
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	2200      	movs	r2, #0
 800b8c8:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 0U;
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	2200      	movs	r2, #0
 800b8ce:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	2200      	movs	r2, #0
 800b8d4:	729a      	strb	r2, [r3, #10]
    TimerObject->Callback = Callback;
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	683a      	ldr	r2, [r7, #0]
 800b8da:	60da      	str	r2, [r3, #12]
    TimerObject->argument = Argument;
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	69ba      	ldr	r2, [r7, #24]
 800b8e0:	611a      	str	r2, [r3, #16]
    TimerObject->Mode = Mode;
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	79fa      	ldrb	r2, [r7, #7]
 800b8e6:	72da      	strb	r2, [r3, #11]
    TimerObject->Next = NULL;
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	2200      	movs	r2, #0
 800b8ec:	615a      	str	r2, [r3, #20]
    return UTIL_TIMER_OK;
 800b8ee:	2300      	movs	r3, #0
 800b8f0:	e000      	b.n	800b8f4 <UTIL_TIMER_Create+0x60>
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 800b8f2:	2301      	movs	r3, #1
  }
}
 800b8f4:	4618      	mov	r0, r3
 800b8f6:	3710      	adds	r7, #16
 800b8f8:	46bd      	mov	sp, r7
 800b8fa:	bd80      	pop	{r7, pc}
 800b8fc:	0800cff4 	.word	0x0800cff4

0800b900 <UTIL_TIMER_Start>:

UTIL_TIMER_Status_t UTIL_TIMER_Start( UTIL_TIMER_Object_t *TimerObject)
{
 800b900:	b580      	push	{r7, lr}
 800b902:	b08a      	sub	sp, #40	; 0x28
 800b904:	af00      	add	r7, sp, #0
 800b906:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 800b908:	2300      	movs	r3, #0
 800b90a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t elapsedTime;
  uint32_t minValue;
  uint32_t ticks;
    
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	2b00      	cmp	r3, #0
 800b912:	d056      	beq.n	800b9c2 <UTIL_TIMER_Start+0xc2>
 800b914:	6878      	ldr	r0, [r7, #4]
 800b916:	f000 f929 	bl	800bb6c <TimerExists>
 800b91a:	4603      	mov	r3, r0
 800b91c:	f083 0301 	eor.w	r3, r3, #1
 800b920:	b2db      	uxtb	r3, r3
 800b922:	2b00      	cmp	r3, #0
 800b924:	d04d      	beq.n	800b9c2 <UTIL_TIMER_Start+0xc2>
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	7a5b      	ldrb	r3, [r3, #9]
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d149      	bne.n	800b9c2 <UTIL_TIMER_Start+0xc2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b92e:	f3ef 8310 	mrs	r3, PRIMASK
 800b932:	613b      	str	r3, [r7, #16]
  return(result);
 800b934:	693b      	ldr	r3, [r7, #16]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 800b936:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800b938:	b672      	cpsid	i
}
 800b93a:	bf00      	nop
    ticks = TimerObject->ReloadValue;
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	685b      	ldr	r3, [r3, #4]
 800b940:	623b      	str	r3, [r7, #32]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 800b942:	4b24      	ldr	r3, [pc, #144]	; (800b9d4 <UTIL_TIMER_Start+0xd4>)
 800b944:	6a1b      	ldr	r3, [r3, #32]
 800b946:	4798      	blx	r3
 800b948:	61b8      	str	r0, [r7, #24]
    
    if( ticks < minValue )
 800b94a:	6a3a      	ldr	r2, [r7, #32]
 800b94c:	69bb      	ldr	r3, [r7, #24]
 800b94e:	429a      	cmp	r2, r3
 800b950:	d201      	bcs.n	800b956 <UTIL_TIMER_Start+0x56>
    {
      ticks = minValue;
 800b952:	69bb      	ldr	r3, [r7, #24]
 800b954:	623b      	str	r3, [r7, #32]
    }
    
    TimerObject->Timestamp = ticks;
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	6a3a      	ldr	r2, [r7, #32]
 800b95a:	601a      	str	r2, [r3, #0]
    TimerObject->IsPending = 0U;
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	2200      	movs	r2, #0
 800b960:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 1U;
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	2201      	movs	r2, #1
 800b966:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	2200      	movs	r2, #0
 800b96c:	729a      	strb	r2, [r3, #10]
    if( TimerListHead == NULL )
 800b96e:	4b1a      	ldr	r3, [pc, #104]	; (800b9d8 <UTIL_TIMER_Start+0xd8>)
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	2b00      	cmp	r3, #0
 800b974:	d106      	bne.n	800b984 <UTIL_TIMER_Start+0x84>
    {
      UTIL_TimerDriver.SetTimerContext();
 800b976:	4b17      	ldr	r3, [pc, #92]	; (800b9d4 <UTIL_TIMER_Start+0xd4>)
 800b978:	691b      	ldr	r3, [r3, #16]
 800b97a:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 800b97c:	6878      	ldr	r0, [r7, #4]
 800b97e:	f000 f96b 	bl	800bc58 <TimerInsertNewHeadTimer>
 800b982:	e017      	b.n	800b9b4 <UTIL_TIMER_Start+0xb4>
    }
    else 
    {
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 800b984:	4b13      	ldr	r3, [pc, #76]	; (800b9d4 <UTIL_TIMER_Start+0xd4>)
 800b986:	699b      	ldr	r3, [r3, #24]
 800b988:	4798      	blx	r3
 800b98a:	6178      	str	r0, [r7, #20]
      TimerObject->Timestamp += elapsedTime;
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	681a      	ldr	r2, [r3, #0]
 800b990:	697b      	ldr	r3, [r7, #20]
 800b992:	441a      	add	r2, r3
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	601a      	str	r2, [r3, #0]
      
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	681a      	ldr	r2, [r3, #0]
 800b99c:	4b0e      	ldr	r3, [pc, #56]	; (800b9d8 <UTIL_TIMER_Start+0xd8>)
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	429a      	cmp	r2, r3
 800b9a4:	d203      	bcs.n	800b9ae <UTIL_TIMER_Start+0xae>
      {
        TimerInsertNewHeadTimer( TimerObject);
 800b9a6:	6878      	ldr	r0, [r7, #4]
 800b9a8:	f000 f956 	bl	800bc58 <TimerInsertNewHeadTimer>
 800b9ac:	e002      	b.n	800b9b4 <UTIL_TIMER_Start+0xb4>
      }
      else
      {
        TimerInsertTimer( TimerObject);
 800b9ae:	6878      	ldr	r0, [r7, #4]
 800b9b0:	f000 f922 	bl	800bbf8 <TimerInsertTimer>
 800b9b4:	69fb      	ldr	r3, [r7, #28]
 800b9b6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	f383 8810 	msr	PRIMASK, r3
}
 800b9be:	bf00      	nop
  {
 800b9c0:	e002      	b.n	800b9c8 <UTIL_TIMER_Start+0xc8>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret =  UTIL_TIMER_INVALID_PARAM;
 800b9c2:	2301      	movs	r3, #1
 800b9c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return ret;
 800b9c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800b9cc:	4618      	mov	r0, r3
 800b9ce:	3728      	adds	r7, #40	; 0x28
 800b9d0:	46bd      	mov	sp, r7
 800b9d2:	bd80      	pop	{r7, pc}
 800b9d4:	0800cff4 	.word	0x0800cff4
 800b9d8:	20000b1c 	.word	0x20000b1c

0800b9dc <UTIL_TIMER_Stop>:
  }
  return ret;
}

UTIL_TIMER_Status_t UTIL_TIMER_Stop( UTIL_TIMER_Object_t *TimerObject )
{
 800b9dc:	b580      	push	{r7, lr}
 800b9de:	b088      	sub	sp, #32
 800b9e0:	af00      	add	r7, sp, #0
 800b9e2:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 800b9e4:	2300      	movs	r3, #0
 800b9e6:	77fb      	strb	r3, [r7, #31]

  if (NULL != TimerObject)
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d05b      	beq.n	800baa6 <UTIL_TIMER_Stop+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b9ee:	f3ef 8310 	mrs	r3, PRIMASK
 800b9f2:	60fb      	str	r3, [r7, #12]
  return(result);
 800b9f4:	68fb      	ldr	r3, [r7, #12]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 800b9f6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800b9f8:	b672      	cpsid	i
}
 800b9fa:	bf00      	nop
    UTIL_TIMER_Object_t* prev = TimerListHead;
 800b9fc:	4b2d      	ldr	r3, [pc, #180]	; (800bab4 <UTIL_TIMER_Stop+0xd8>)
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	61bb      	str	r3, [r7, #24]
    UTIL_TIMER_Object_t* cur = TimerListHead;
 800ba02:	4b2c      	ldr	r3, [pc, #176]	; (800bab4 <UTIL_TIMER_Stop+0xd8>)
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	617b      	str	r3, [r7, #20]
    TimerObject->IsReloadStopped = 1U;
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	2201      	movs	r2, #1
 800ba0c:	729a      	strb	r2, [r3, #10]
    
    /* List is empty or the Obj to stop does not exist  */
    if(NULL != TimerListHead)
 800ba0e:	4b29      	ldr	r3, [pc, #164]	; (800bab4 <UTIL_TIMER_Stop+0xd8>)
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d041      	beq.n	800ba9a <UTIL_TIMER_Stop+0xbe>
    {
      TimerObject->IsRunning = 0U;
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	2200      	movs	r2, #0
 800ba1a:	725a      	strb	r2, [r3, #9]
      
      if( TimerListHead == TimerObject ) /* Stop the Head */
 800ba1c:	4b25      	ldr	r3, [pc, #148]	; (800bab4 <UTIL_TIMER_Stop+0xd8>)
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	687a      	ldr	r2, [r7, #4]
 800ba22:	429a      	cmp	r2, r3
 800ba24:	d134      	bne.n	800ba90 <UTIL_TIMER_Stop+0xb4>
      {
          TimerListHead->IsPending = 0;
 800ba26:	4b23      	ldr	r3, [pc, #140]	; (800bab4 <UTIL_TIMER_Stop+0xd8>)
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	2200      	movs	r2, #0
 800ba2c:	721a      	strb	r2, [r3, #8]
          if( TimerListHead->Next != NULL )
 800ba2e:	4b21      	ldr	r3, [pc, #132]	; (800bab4 <UTIL_TIMER_Stop+0xd8>)
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	695b      	ldr	r3, [r3, #20]
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d00a      	beq.n	800ba4e <UTIL_TIMER_Stop+0x72>
          {
            TimerListHead = TimerListHead->Next;
 800ba38:	4b1e      	ldr	r3, [pc, #120]	; (800bab4 <UTIL_TIMER_Stop+0xd8>)
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	695b      	ldr	r3, [r3, #20]
 800ba3e:	4a1d      	ldr	r2, [pc, #116]	; (800bab4 <UTIL_TIMER_Stop+0xd8>)
 800ba40:	6013      	str	r3, [r2, #0]
            TimerSetTimeout( TimerListHead );
 800ba42:	4b1c      	ldr	r3, [pc, #112]	; (800bab4 <UTIL_TIMER_Stop+0xd8>)
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	4618      	mov	r0, r3
 800ba48:	f000 f8ac 	bl	800bba4 <TimerSetTimeout>
 800ba4c:	e023      	b.n	800ba96 <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            UTIL_TimerDriver.StopTimerEvt( );
 800ba4e:	4b1a      	ldr	r3, [pc, #104]	; (800bab8 <UTIL_TIMER_Stop+0xdc>)
 800ba50:	68db      	ldr	r3, [r3, #12]
 800ba52:	4798      	blx	r3
            TimerListHead = NULL;
 800ba54:	4b17      	ldr	r3, [pc, #92]	; (800bab4 <UTIL_TIMER_Stop+0xd8>)
 800ba56:	2200      	movs	r2, #0
 800ba58:	601a      	str	r2, [r3, #0]
 800ba5a:	e01c      	b.n	800ba96 <UTIL_TIMER_Stop+0xba>
      }
      else /* Stop an object within the list */
      {      
        while( cur != NULL )
        {
          if( cur == TimerObject )
 800ba5c:	697a      	ldr	r2, [r7, #20]
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	429a      	cmp	r2, r3
 800ba62:	d110      	bne.n	800ba86 <UTIL_TIMER_Stop+0xaa>
          {
            if( cur->Next != NULL )
 800ba64:	697b      	ldr	r3, [r7, #20]
 800ba66:	695b      	ldr	r3, [r3, #20]
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d006      	beq.n	800ba7a <UTIL_TIMER_Stop+0x9e>
            {
              cur = cur->Next;
 800ba6c:	697b      	ldr	r3, [r7, #20]
 800ba6e:	695b      	ldr	r3, [r3, #20]
 800ba70:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 800ba72:	69bb      	ldr	r3, [r7, #24]
 800ba74:	697a      	ldr	r2, [r7, #20]
 800ba76:	615a      	str	r2, [r3, #20]
            else
            {
              cur = NULL;
              prev->Next = cur;
            }
            break;
 800ba78:	e00d      	b.n	800ba96 <UTIL_TIMER_Stop+0xba>
              cur = NULL;
 800ba7a:	2300      	movs	r3, #0
 800ba7c:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 800ba7e:	69bb      	ldr	r3, [r7, #24]
 800ba80:	697a      	ldr	r2, [r7, #20]
 800ba82:	615a      	str	r2, [r3, #20]
            break;
 800ba84:	e007      	b.n	800ba96 <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            prev = cur;
 800ba86:	697b      	ldr	r3, [r7, #20]
 800ba88:	61bb      	str	r3, [r7, #24]
            cur = cur->Next;
 800ba8a:	697b      	ldr	r3, [r7, #20]
 800ba8c:	695b      	ldr	r3, [r3, #20]
 800ba8e:	617b      	str	r3, [r7, #20]
        while( cur != NULL )
 800ba90:	697b      	ldr	r3, [r7, #20]
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d1e2      	bne.n	800ba5c <UTIL_TIMER_Stop+0x80>
          }
        }   
      }
      ret = UTIL_TIMER_OK;
 800ba96:	2300      	movs	r3, #0
 800ba98:	77fb      	strb	r3, [r7, #31]
 800ba9a:	693b      	ldr	r3, [r7, #16]
 800ba9c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ba9e:	68bb      	ldr	r3, [r7, #8]
 800baa0:	f383 8810 	msr	PRIMASK, r3
}
 800baa4:	e001      	b.n	800baaa <UTIL_TIMER_Stop+0xce>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret = UTIL_TIMER_INVALID_PARAM;
 800baa6:	2301      	movs	r3, #1
 800baa8:	77fb      	strb	r3, [r7, #31]
  }
  return ret;
 800baaa:	7ffb      	ldrb	r3, [r7, #31]
}
 800baac:	4618      	mov	r0, r3
 800baae:	3720      	adds	r7, #32
 800bab0:	46bd      	mov	sp, r7
 800bab2:	bd80      	pop	{r7, pc}
 800bab4:	20000b1c 	.word	0x20000b1c
 800bab8:	0800cff4 	.word	0x0800cff4

0800babc <UTIL_TIMER_SetPeriod>:

UTIL_TIMER_Status_t UTIL_TIMER_SetPeriod(UTIL_TIMER_Object_t *TimerObject, uint32_t NewPeriodValue)
{
 800babc:	b580      	push	{r7, lr}
 800babe:	b084      	sub	sp, #16
 800bac0:	af00      	add	r7, sp, #0
 800bac2:	6078      	str	r0, [r7, #4]
 800bac4:	6039      	str	r1, [r7, #0]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 800bac6:	2300      	movs	r3, #0
 800bac8:	73fb      	strb	r3, [r7, #15]
  
  if(NULL == TimerObject)
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d102      	bne.n	800bad6 <UTIL_TIMER_SetPeriod+0x1a>
  {
	  ret = UTIL_TIMER_INVALID_PARAM;
 800bad0:	2301      	movs	r3, #1
 800bad2:	73fb      	strb	r3, [r7, #15]
 800bad4:	e014      	b.n	800bb00 <UTIL_TIMER_SetPeriod+0x44>
  }
  else
  {
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 800bad6:	4b0d      	ldr	r3, [pc, #52]	; (800bb0c <UTIL_TIMER_SetPeriod+0x50>)
 800bad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bada:	6838      	ldr	r0, [r7, #0]
 800badc:	4798      	blx	r3
 800bade:	4602      	mov	r2, r0
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	605a      	str	r2, [r3, #4]
    if(TimerExists(TimerObject))
 800bae4:	6878      	ldr	r0, [r7, #4]
 800bae6:	f000 f841 	bl	800bb6c <TimerExists>
 800baea:	4603      	mov	r3, r0
 800baec:	2b00      	cmp	r3, #0
 800baee:	d007      	beq.n	800bb00 <UTIL_TIMER_SetPeriod+0x44>
    {
      (void)UTIL_TIMER_Stop(TimerObject);
 800baf0:	6878      	ldr	r0, [r7, #4]
 800baf2:	f7ff ff73 	bl	800b9dc <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 800baf6:	6878      	ldr	r0, [r7, #4]
 800baf8:	f7ff ff02 	bl	800b900 <UTIL_TIMER_Start>
 800bafc:	4603      	mov	r3, r0
 800bafe:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 800bb00:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb02:	4618      	mov	r0, r3
 800bb04:	3710      	adds	r7, #16
 800bb06:	46bd      	mov	sp, r7
 800bb08:	bd80      	pop	{r7, pc}
 800bb0a:	bf00      	nop
 800bb0c:	0800cff4 	.word	0x0800cff4

0800bb10 <UTIL_TIMER_GetCurrentTime>:
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 800bb10:	b580      	push	{r7, lr}
 800bb12:	b082      	sub	sp, #8
 800bb14:	af00      	add	r7, sp, #0
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 800bb16:	4b06      	ldr	r3, [pc, #24]	; (800bb30 <UTIL_TIMER_GetCurrentTime+0x20>)
 800bb18:	69db      	ldr	r3, [r3, #28]
 800bb1a:	4798      	blx	r3
 800bb1c:	6078      	str	r0, [r7, #4]
  return  UTIL_TimerDriver.Tick2ms(now);
 800bb1e:	4b04      	ldr	r3, [pc, #16]	; (800bb30 <UTIL_TIMER_GetCurrentTime+0x20>)
 800bb20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb22:	6878      	ldr	r0, [r7, #4]
 800bb24:	4798      	blx	r3
 800bb26:	4603      	mov	r3, r0
}
 800bb28:	4618      	mov	r0, r3
 800bb2a:	3708      	adds	r7, #8
 800bb2c:	46bd      	mov	sp, r7
 800bb2e:	bd80      	pop	{r7, pc}
 800bb30:	0800cff4 	.word	0x0800cff4

0800bb34 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 800bb34:	b580      	push	{r7, lr}
 800bb36:	b084      	sub	sp, #16
 800bb38:	af00      	add	r7, sp, #0
 800bb3a:	6078      	str	r0, [r7, #4]
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 800bb3c:	4b0a      	ldr	r3, [pc, #40]	; (800bb68 <UTIL_TIMER_GetElapsedTime+0x34>)
 800bb3e:	69db      	ldr	r3, [r3, #28]
 800bb40:	4798      	blx	r3
 800bb42:	60f8      	str	r0, [r7, #12]
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 800bb44:	4b08      	ldr	r3, [pc, #32]	; (800bb68 <UTIL_TIMER_GetElapsedTime+0x34>)
 800bb46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb48:	6878      	ldr	r0, [r7, #4]
 800bb4a:	4798      	blx	r3
 800bb4c:	60b8      	str	r0, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 800bb4e:	4b06      	ldr	r3, [pc, #24]	; (800bb68 <UTIL_TIMER_GetElapsedTime+0x34>)
 800bb50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb52:	68f9      	ldr	r1, [r7, #12]
 800bb54:	68ba      	ldr	r2, [r7, #8]
 800bb56:	1a8a      	subs	r2, r1, r2
 800bb58:	4610      	mov	r0, r2
 800bb5a:	4798      	blx	r3
 800bb5c:	4603      	mov	r3, r0
}
 800bb5e:	4618      	mov	r0, r3
 800bb60:	3710      	adds	r7, #16
 800bb62:	46bd      	mov	sp, r7
 800bb64:	bd80      	pop	{r7, pc}
 800bb66:	bf00      	nop
 800bb68:	0800cff4 	.word	0x0800cff4

0800bb6c <TimerExists>:
 *
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
 800bb6c:	b480      	push	{r7}
 800bb6e:	b085      	sub	sp, #20
 800bb70:	af00      	add	r7, sp, #0
 800bb72:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800bb74:	4b0a      	ldr	r3, [pc, #40]	; (800bba0 <TimerExists+0x34>)
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 800bb7a:	e008      	b.n	800bb8e <TimerExists+0x22>
  {
    if( cur == TimerObject )
 800bb7c:	68fa      	ldr	r2, [r7, #12]
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	429a      	cmp	r2, r3
 800bb82:	d101      	bne.n	800bb88 <TimerExists+0x1c>
    {
      return true;
 800bb84:	2301      	movs	r3, #1
 800bb86:	e006      	b.n	800bb96 <TimerExists+0x2a>
    }
    cur = cur->Next;
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	695b      	ldr	r3, [r3, #20]
 800bb8c:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d1f3      	bne.n	800bb7c <TimerExists+0x10>
  }
  return false;
 800bb94:	2300      	movs	r3, #0
}
 800bb96:	4618      	mov	r0, r3
 800bb98:	3714      	adds	r7, #20
 800bb9a:	46bd      	mov	sp, r7
 800bb9c:	bc80      	pop	{r7}
 800bb9e:	4770      	bx	lr
 800bba0:	20000b1c 	.word	0x20000b1c

0800bba4 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 800bba4:	b590      	push	{r4, r7, lr}
 800bba6:	b085      	sub	sp, #20
 800bba8:	af00      	add	r7, sp, #0
 800bbaa:	6078      	str	r0, [r7, #4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 800bbac:	4b11      	ldr	r3, [pc, #68]	; (800bbf4 <TimerSetTimeout+0x50>)
 800bbae:	6a1b      	ldr	r3, [r3, #32]
 800bbb0:	4798      	blx	r3
 800bbb2:	60f8      	str	r0, [r7, #12]
  TimerObject->IsPending = 1;
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	2201      	movs	r2, #1
 800bbb8:	721a      	strb	r2, [r3, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	681c      	ldr	r4, [r3, #0]
 800bbbe:	4b0d      	ldr	r3, [pc, #52]	; (800bbf4 <TimerSetTimeout+0x50>)
 800bbc0:	699b      	ldr	r3, [r3, #24]
 800bbc2:	4798      	blx	r3
 800bbc4:	4602      	mov	r2, r0
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	4413      	add	r3, r2
 800bbca:	429c      	cmp	r4, r3
 800bbcc:	d207      	bcs.n	800bbde <TimerSetTimeout+0x3a>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 800bbce:	4b09      	ldr	r3, [pc, #36]	; (800bbf4 <TimerSetTimeout+0x50>)
 800bbd0:	699b      	ldr	r3, [r3, #24]
 800bbd2:	4798      	blx	r3
 800bbd4:	4602      	mov	r2, r0
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	441a      	add	r2, r3
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	601a      	str	r2, [r3, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 800bbde:	4b05      	ldr	r3, [pc, #20]	; (800bbf4 <TimerSetTimeout+0x50>)
 800bbe0:	689b      	ldr	r3, [r3, #8]
 800bbe2:	687a      	ldr	r2, [r7, #4]
 800bbe4:	6812      	ldr	r2, [r2, #0]
 800bbe6:	4610      	mov	r0, r2
 800bbe8:	4798      	blx	r3
}
 800bbea:	bf00      	nop
 800bbec:	3714      	adds	r7, #20
 800bbee:	46bd      	mov	sp, r7
 800bbf0:	bd90      	pop	{r4, r7, pc}
 800bbf2:	bf00      	nop
 800bbf4:	0800cff4 	.word	0x0800cff4

0800bbf8 <TimerInsertTimer>:
 *     next timer to expire.
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
 800bbf8:	b480      	push	{r7}
 800bbfa:	b085      	sub	sp, #20
 800bbfc:	af00      	add	r7, sp, #0
 800bbfe:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800bc00:	4b14      	ldr	r3, [pc, #80]	; (800bc54 <TimerInsertTimer+0x5c>)
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	60fb      	str	r3, [r7, #12]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 800bc06:	4b13      	ldr	r3, [pc, #76]	; (800bc54 <TimerInsertTimer+0x5c>)
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	695b      	ldr	r3, [r3, #20]
 800bc0c:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 800bc0e:	e012      	b.n	800bc36 <TimerInsertTimer+0x3e>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	681a      	ldr	r2, [r3, #0]
 800bc14:	68bb      	ldr	r3, [r7, #8]
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	429a      	cmp	r2, r3
 800bc1a:	d905      	bls.n	800bc28 <TimerInsertTimer+0x30>
    {
        cur = next;
 800bc1c:	68bb      	ldr	r3, [r7, #8]
 800bc1e:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 800bc20:	68bb      	ldr	r3, [r7, #8]
 800bc22:	695b      	ldr	r3, [r3, #20]
 800bc24:	60bb      	str	r3, [r7, #8]
 800bc26:	e006      	b.n	800bc36 <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = TimerObject;
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	687a      	ldr	r2, [r7, #4]
 800bc2c:	615a      	str	r2, [r3, #20]
        TimerObject->Next = next;
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	68ba      	ldr	r2, [r7, #8]
 800bc32:	615a      	str	r2, [r3, #20]
        return;
 800bc34:	e009      	b.n	800bc4a <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	695b      	ldr	r3, [r3, #20]
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d1e8      	bne.n	800bc10 <TimerInsertTimer+0x18>

    }
  }
  cur->Next = TimerObject;
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	687a      	ldr	r2, [r7, #4]
 800bc42:	615a      	str	r2, [r3, #20]
  TimerObject->Next = NULL;
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	2200      	movs	r2, #0
 800bc48:	615a      	str	r2, [r3, #20]
}
 800bc4a:	3714      	adds	r7, #20
 800bc4c:	46bd      	mov	sp, r7
 800bc4e:	bc80      	pop	{r7}
 800bc50:	4770      	bx	lr
 800bc52:	bf00      	nop
 800bc54:	20000b1c 	.word	0x20000b1c

0800bc58 <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 800bc58:	b580      	push	{r7, lr}
 800bc5a:	b084      	sub	sp, #16
 800bc5c:	af00      	add	r7, sp, #0
 800bc5e:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800bc60:	4b0b      	ldr	r3, [pc, #44]	; (800bc90 <TimerInsertNewHeadTimer+0x38>)
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d002      	beq.n	800bc72 <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsPending = 0;
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	2200      	movs	r2, #0
 800bc70:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	68fa      	ldr	r2, [r7, #12]
 800bc76:	615a      	str	r2, [r3, #20]
  TimerListHead = TimerObject;
 800bc78:	4a05      	ldr	r2, [pc, #20]	; (800bc90 <TimerInsertNewHeadTimer+0x38>)
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	6013      	str	r3, [r2, #0]
  TimerSetTimeout( TimerListHead );
 800bc7e:	4b04      	ldr	r3, [pc, #16]	; (800bc90 <TimerInsertNewHeadTimer+0x38>)
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	4618      	mov	r0, r3
 800bc84:	f7ff ff8e 	bl	800bba4 <TimerSetTimeout>
}
 800bc88:	bf00      	nop
 800bc8a:	3710      	adds	r7, #16
 800bc8c:	46bd      	mov	sp, r7
 800bc8e:	bd80      	pop	{r7, pc}
 800bc90:	20000b1c 	.word	0x20000b1c

0800bc94 <_vsniprintf_r>:
 800bc94:	b530      	push	{r4, r5, lr}
 800bc96:	4614      	mov	r4, r2
 800bc98:	2c00      	cmp	r4, #0
 800bc9a:	b09b      	sub	sp, #108	; 0x6c
 800bc9c:	4605      	mov	r5, r0
 800bc9e:	461a      	mov	r2, r3
 800bca0:	da05      	bge.n	800bcae <_vsniprintf_r+0x1a>
 800bca2:	238b      	movs	r3, #139	; 0x8b
 800bca4:	6003      	str	r3, [r0, #0]
 800bca6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bcaa:	b01b      	add	sp, #108	; 0x6c
 800bcac:	bd30      	pop	{r4, r5, pc}
 800bcae:	f44f 7302 	mov.w	r3, #520	; 0x208
 800bcb2:	f8ad 300c 	strh.w	r3, [sp, #12]
 800bcb6:	bf14      	ite	ne
 800bcb8:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800bcbc:	4623      	moveq	r3, r4
 800bcbe:	9302      	str	r3, [sp, #8]
 800bcc0:	9305      	str	r3, [sp, #20]
 800bcc2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bcc6:	9100      	str	r1, [sp, #0]
 800bcc8:	9104      	str	r1, [sp, #16]
 800bcca:	f8ad 300e 	strh.w	r3, [sp, #14]
 800bcce:	4669      	mov	r1, sp
 800bcd0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800bcd2:	f000 f8b5 	bl	800be40 <_svfiprintf_r>
 800bcd6:	1c43      	adds	r3, r0, #1
 800bcd8:	bfbc      	itt	lt
 800bcda:	238b      	movlt	r3, #139	; 0x8b
 800bcdc:	602b      	strlt	r3, [r5, #0]
 800bcde:	2c00      	cmp	r4, #0
 800bce0:	d0e3      	beq.n	800bcaa <_vsniprintf_r+0x16>
 800bce2:	9b00      	ldr	r3, [sp, #0]
 800bce4:	2200      	movs	r2, #0
 800bce6:	701a      	strb	r2, [r3, #0]
 800bce8:	e7df      	b.n	800bcaa <_vsniprintf_r+0x16>
	...

0800bcec <vsniprintf>:
 800bcec:	b507      	push	{r0, r1, r2, lr}
 800bcee:	9300      	str	r3, [sp, #0]
 800bcf0:	4613      	mov	r3, r2
 800bcf2:	460a      	mov	r2, r1
 800bcf4:	4601      	mov	r1, r0
 800bcf6:	4803      	ldr	r0, [pc, #12]	; (800bd04 <vsniprintf+0x18>)
 800bcf8:	6800      	ldr	r0, [r0, #0]
 800bcfa:	f7ff ffcb 	bl	800bc94 <_vsniprintf_r>
 800bcfe:	b003      	add	sp, #12
 800bd00:	f85d fb04 	ldr.w	pc, [sp], #4
 800bd04:	20000064 	.word	0x20000064

0800bd08 <memset>:
 800bd08:	4402      	add	r2, r0
 800bd0a:	4603      	mov	r3, r0
 800bd0c:	4293      	cmp	r3, r2
 800bd0e:	d100      	bne.n	800bd12 <memset+0xa>
 800bd10:	4770      	bx	lr
 800bd12:	f803 1b01 	strb.w	r1, [r3], #1
 800bd16:	e7f9      	b.n	800bd0c <memset+0x4>

0800bd18 <__errno>:
 800bd18:	4b01      	ldr	r3, [pc, #4]	; (800bd20 <__errno+0x8>)
 800bd1a:	6818      	ldr	r0, [r3, #0]
 800bd1c:	4770      	bx	lr
 800bd1e:	bf00      	nop
 800bd20:	20000064 	.word	0x20000064

0800bd24 <__libc_init_array>:
 800bd24:	b570      	push	{r4, r5, r6, lr}
 800bd26:	4d0d      	ldr	r5, [pc, #52]	; (800bd5c <__libc_init_array+0x38>)
 800bd28:	4c0d      	ldr	r4, [pc, #52]	; (800bd60 <__libc_init_array+0x3c>)
 800bd2a:	1b64      	subs	r4, r4, r5
 800bd2c:	10a4      	asrs	r4, r4, #2
 800bd2e:	2600      	movs	r6, #0
 800bd30:	42a6      	cmp	r6, r4
 800bd32:	d109      	bne.n	800bd48 <__libc_init_array+0x24>
 800bd34:	4d0b      	ldr	r5, [pc, #44]	; (800bd64 <__libc_init_array+0x40>)
 800bd36:	4c0c      	ldr	r4, [pc, #48]	; (800bd68 <__libc_init_array+0x44>)
 800bd38:	f000 fc68 	bl	800c60c <_init>
 800bd3c:	1b64      	subs	r4, r4, r5
 800bd3e:	10a4      	asrs	r4, r4, #2
 800bd40:	2600      	movs	r6, #0
 800bd42:	42a6      	cmp	r6, r4
 800bd44:	d105      	bne.n	800bd52 <__libc_init_array+0x2e>
 800bd46:	bd70      	pop	{r4, r5, r6, pc}
 800bd48:	f855 3b04 	ldr.w	r3, [r5], #4
 800bd4c:	4798      	blx	r3
 800bd4e:	3601      	adds	r6, #1
 800bd50:	e7ee      	b.n	800bd30 <__libc_init_array+0xc>
 800bd52:	f855 3b04 	ldr.w	r3, [r5], #4
 800bd56:	4798      	blx	r3
 800bd58:	3601      	adds	r6, #1
 800bd5a:	e7f2      	b.n	800bd42 <__libc_init_array+0x1e>
 800bd5c:	0800d1c4 	.word	0x0800d1c4
 800bd60:	0800d1c4 	.word	0x0800d1c4
 800bd64:	0800d1c4 	.word	0x0800d1c4
 800bd68:	0800d1c8 	.word	0x0800d1c8

0800bd6c <__retarget_lock_acquire_recursive>:
 800bd6c:	4770      	bx	lr

0800bd6e <__retarget_lock_release_recursive>:
 800bd6e:	4770      	bx	lr

0800bd70 <memcpy>:
 800bd70:	440a      	add	r2, r1
 800bd72:	4291      	cmp	r1, r2
 800bd74:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800bd78:	d100      	bne.n	800bd7c <memcpy+0xc>
 800bd7a:	4770      	bx	lr
 800bd7c:	b510      	push	{r4, lr}
 800bd7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bd82:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bd86:	4291      	cmp	r1, r2
 800bd88:	d1f9      	bne.n	800bd7e <memcpy+0xe>
 800bd8a:	bd10      	pop	{r4, pc}

0800bd8c <__ssputs_r>:
 800bd8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bd90:	688e      	ldr	r6, [r1, #8]
 800bd92:	461f      	mov	r7, r3
 800bd94:	42be      	cmp	r6, r7
 800bd96:	680b      	ldr	r3, [r1, #0]
 800bd98:	4682      	mov	sl, r0
 800bd9a:	460c      	mov	r4, r1
 800bd9c:	4690      	mov	r8, r2
 800bd9e:	d82c      	bhi.n	800bdfa <__ssputs_r+0x6e>
 800bda0:	898a      	ldrh	r2, [r1, #12]
 800bda2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bda6:	d026      	beq.n	800bdf6 <__ssputs_r+0x6a>
 800bda8:	6965      	ldr	r5, [r4, #20]
 800bdaa:	6909      	ldr	r1, [r1, #16]
 800bdac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bdb0:	eba3 0901 	sub.w	r9, r3, r1
 800bdb4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bdb8:	1c7b      	adds	r3, r7, #1
 800bdba:	444b      	add	r3, r9
 800bdbc:	106d      	asrs	r5, r5, #1
 800bdbe:	429d      	cmp	r5, r3
 800bdc0:	bf38      	it	cc
 800bdc2:	461d      	movcc	r5, r3
 800bdc4:	0553      	lsls	r3, r2, #21
 800bdc6:	d527      	bpl.n	800be18 <__ssputs_r+0x8c>
 800bdc8:	4629      	mov	r1, r5
 800bdca:	f000 f957 	bl	800c07c <_malloc_r>
 800bdce:	4606      	mov	r6, r0
 800bdd0:	b360      	cbz	r0, 800be2c <__ssputs_r+0xa0>
 800bdd2:	6921      	ldr	r1, [r4, #16]
 800bdd4:	464a      	mov	r2, r9
 800bdd6:	f7ff ffcb 	bl	800bd70 <memcpy>
 800bdda:	89a3      	ldrh	r3, [r4, #12]
 800bddc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bde0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bde4:	81a3      	strh	r3, [r4, #12]
 800bde6:	6126      	str	r6, [r4, #16]
 800bde8:	6165      	str	r5, [r4, #20]
 800bdea:	444e      	add	r6, r9
 800bdec:	eba5 0509 	sub.w	r5, r5, r9
 800bdf0:	6026      	str	r6, [r4, #0]
 800bdf2:	60a5      	str	r5, [r4, #8]
 800bdf4:	463e      	mov	r6, r7
 800bdf6:	42be      	cmp	r6, r7
 800bdf8:	d900      	bls.n	800bdfc <__ssputs_r+0x70>
 800bdfa:	463e      	mov	r6, r7
 800bdfc:	6820      	ldr	r0, [r4, #0]
 800bdfe:	4632      	mov	r2, r6
 800be00:	4641      	mov	r1, r8
 800be02:	f000 fb86 	bl	800c512 <memmove>
 800be06:	68a3      	ldr	r3, [r4, #8]
 800be08:	1b9b      	subs	r3, r3, r6
 800be0a:	60a3      	str	r3, [r4, #8]
 800be0c:	6823      	ldr	r3, [r4, #0]
 800be0e:	4433      	add	r3, r6
 800be10:	6023      	str	r3, [r4, #0]
 800be12:	2000      	movs	r0, #0
 800be14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be18:	462a      	mov	r2, r5
 800be1a:	f000 fb4b 	bl	800c4b4 <_realloc_r>
 800be1e:	4606      	mov	r6, r0
 800be20:	2800      	cmp	r0, #0
 800be22:	d1e0      	bne.n	800bde6 <__ssputs_r+0x5a>
 800be24:	6921      	ldr	r1, [r4, #16]
 800be26:	4650      	mov	r0, sl
 800be28:	f000 fb9e 	bl	800c568 <_free_r>
 800be2c:	230c      	movs	r3, #12
 800be2e:	f8ca 3000 	str.w	r3, [sl]
 800be32:	89a3      	ldrh	r3, [r4, #12]
 800be34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800be38:	81a3      	strh	r3, [r4, #12]
 800be3a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800be3e:	e7e9      	b.n	800be14 <__ssputs_r+0x88>

0800be40 <_svfiprintf_r>:
 800be40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be44:	4698      	mov	r8, r3
 800be46:	898b      	ldrh	r3, [r1, #12]
 800be48:	061b      	lsls	r3, r3, #24
 800be4a:	b09d      	sub	sp, #116	; 0x74
 800be4c:	4607      	mov	r7, r0
 800be4e:	460d      	mov	r5, r1
 800be50:	4614      	mov	r4, r2
 800be52:	d50e      	bpl.n	800be72 <_svfiprintf_r+0x32>
 800be54:	690b      	ldr	r3, [r1, #16]
 800be56:	b963      	cbnz	r3, 800be72 <_svfiprintf_r+0x32>
 800be58:	2140      	movs	r1, #64	; 0x40
 800be5a:	f000 f90f 	bl	800c07c <_malloc_r>
 800be5e:	6028      	str	r0, [r5, #0]
 800be60:	6128      	str	r0, [r5, #16]
 800be62:	b920      	cbnz	r0, 800be6e <_svfiprintf_r+0x2e>
 800be64:	230c      	movs	r3, #12
 800be66:	603b      	str	r3, [r7, #0]
 800be68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800be6c:	e0d0      	b.n	800c010 <_svfiprintf_r+0x1d0>
 800be6e:	2340      	movs	r3, #64	; 0x40
 800be70:	616b      	str	r3, [r5, #20]
 800be72:	2300      	movs	r3, #0
 800be74:	9309      	str	r3, [sp, #36]	; 0x24
 800be76:	2320      	movs	r3, #32
 800be78:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800be7c:	f8cd 800c 	str.w	r8, [sp, #12]
 800be80:	2330      	movs	r3, #48	; 0x30
 800be82:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800c028 <_svfiprintf_r+0x1e8>
 800be86:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800be8a:	f04f 0901 	mov.w	r9, #1
 800be8e:	4623      	mov	r3, r4
 800be90:	469a      	mov	sl, r3
 800be92:	f813 2b01 	ldrb.w	r2, [r3], #1
 800be96:	b10a      	cbz	r2, 800be9c <_svfiprintf_r+0x5c>
 800be98:	2a25      	cmp	r2, #37	; 0x25
 800be9a:	d1f9      	bne.n	800be90 <_svfiprintf_r+0x50>
 800be9c:	ebba 0b04 	subs.w	fp, sl, r4
 800bea0:	d00b      	beq.n	800beba <_svfiprintf_r+0x7a>
 800bea2:	465b      	mov	r3, fp
 800bea4:	4622      	mov	r2, r4
 800bea6:	4629      	mov	r1, r5
 800bea8:	4638      	mov	r0, r7
 800beaa:	f7ff ff6f 	bl	800bd8c <__ssputs_r>
 800beae:	3001      	adds	r0, #1
 800beb0:	f000 80a9 	beq.w	800c006 <_svfiprintf_r+0x1c6>
 800beb4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800beb6:	445a      	add	r2, fp
 800beb8:	9209      	str	r2, [sp, #36]	; 0x24
 800beba:	f89a 3000 	ldrb.w	r3, [sl]
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	f000 80a1 	beq.w	800c006 <_svfiprintf_r+0x1c6>
 800bec4:	2300      	movs	r3, #0
 800bec6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800beca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bece:	f10a 0a01 	add.w	sl, sl, #1
 800bed2:	9304      	str	r3, [sp, #16]
 800bed4:	9307      	str	r3, [sp, #28]
 800bed6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800beda:	931a      	str	r3, [sp, #104]	; 0x68
 800bedc:	4654      	mov	r4, sl
 800bede:	2205      	movs	r2, #5
 800bee0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bee4:	4850      	ldr	r0, [pc, #320]	; (800c028 <_svfiprintf_r+0x1e8>)
 800bee6:	f7f4 f94b 	bl	8000180 <memchr>
 800beea:	9a04      	ldr	r2, [sp, #16]
 800beec:	b9d8      	cbnz	r0, 800bf26 <_svfiprintf_r+0xe6>
 800beee:	06d0      	lsls	r0, r2, #27
 800bef0:	bf44      	itt	mi
 800bef2:	2320      	movmi	r3, #32
 800bef4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bef8:	0711      	lsls	r1, r2, #28
 800befa:	bf44      	itt	mi
 800befc:	232b      	movmi	r3, #43	; 0x2b
 800befe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bf02:	f89a 3000 	ldrb.w	r3, [sl]
 800bf06:	2b2a      	cmp	r3, #42	; 0x2a
 800bf08:	d015      	beq.n	800bf36 <_svfiprintf_r+0xf6>
 800bf0a:	9a07      	ldr	r2, [sp, #28]
 800bf0c:	4654      	mov	r4, sl
 800bf0e:	2000      	movs	r0, #0
 800bf10:	f04f 0c0a 	mov.w	ip, #10
 800bf14:	4621      	mov	r1, r4
 800bf16:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bf1a:	3b30      	subs	r3, #48	; 0x30
 800bf1c:	2b09      	cmp	r3, #9
 800bf1e:	d94d      	bls.n	800bfbc <_svfiprintf_r+0x17c>
 800bf20:	b1b0      	cbz	r0, 800bf50 <_svfiprintf_r+0x110>
 800bf22:	9207      	str	r2, [sp, #28]
 800bf24:	e014      	b.n	800bf50 <_svfiprintf_r+0x110>
 800bf26:	eba0 0308 	sub.w	r3, r0, r8
 800bf2a:	fa09 f303 	lsl.w	r3, r9, r3
 800bf2e:	4313      	orrs	r3, r2
 800bf30:	9304      	str	r3, [sp, #16]
 800bf32:	46a2      	mov	sl, r4
 800bf34:	e7d2      	b.n	800bedc <_svfiprintf_r+0x9c>
 800bf36:	9b03      	ldr	r3, [sp, #12]
 800bf38:	1d19      	adds	r1, r3, #4
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	9103      	str	r1, [sp, #12]
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	bfbb      	ittet	lt
 800bf42:	425b      	neglt	r3, r3
 800bf44:	f042 0202 	orrlt.w	r2, r2, #2
 800bf48:	9307      	strge	r3, [sp, #28]
 800bf4a:	9307      	strlt	r3, [sp, #28]
 800bf4c:	bfb8      	it	lt
 800bf4e:	9204      	strlt	r2, [sp, #16]
 800bf50:	7823      	ldrb	r3, [r4, #0]
 800bf52:	2b2e      	cmp	r3, #46	; 0x2e
 800bf54:	d10c      	bne.n	800bf70 <_svfiprintf_r+0x130>
 800bf56:	7863      	ldrb	r3, [r4, #1]
 800bf58:	2b2a      	cmp	r3, #42	; 0x2a
 800bf5a:	d134      	bne.n	800bfc6 <_svfiprintf_r+0x186>
 800bf5c:	9b03      	ldr	r3, [sp, #12]
 800bf5e:	1d1a      	adds	r2, r3, #4
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	9203      	str	r2, [sp, #12]
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	bfb8      	it	lt
 800bf68:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800bf6c:	3402      	adds	r4, #2
 800bf6e:	9305      	str	r3, [sp, #20]
 800bf70:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800c02c <_svfiprintf_r+0x1ec>
 800bf74:	7821      	ldrb	r1, [r4, #0]
 800bf76:	2203      	movs	r2, #3
 800bf78:	4650      	mov	r0, sl
 800bf7a:	f7f4 f901 	bl	8000180 <memchr>
 800bf7e:	b138      	cbz	r0, 800bf90 <_svfiprintf_r+0x150>
 800bf80:	9b04      	ldr	r3, [sp, #16]
 800bf82:	eba0 000a 	sub.w	r0, r0, sl
 800bf86:	2240      	movs	r2, #64	; 0x40
 800bf88:	4082      	lsls	r2, r0
 800bf8a:	4313      	orrs	r3, r2
 800bf8c:	3401      	adds	r4, #1
 800bf8e:	9304      	str	r3, [sp, #16]
 800bf90:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf94:	4826      	ldr	r0, [pc, #152]	; (800c030 <_svfiprintf_r+0x1f0>)
 800bf96:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bf9a:	2206      	movs	r2, #6
 800bf9c:	f7f4 f8f0 	bl	8000180 <memchr>
 800bfa0:	2800      	cmp	r0, #0
 800bfa2:	d038      	beq.n	800c016 <_svfiprintf_r+0x1d6>
 800bfa4:	4b23      	ldr	r3, [pc, #140]	; (800c034 <_svfiprintf_r+0x1f4>)
 800bfa6:	bb1b      	cbnz	r3, 800bff0 <_svfiprintf_r+0x1b0>
 800bfa8:	9b03      	ldr	r3, [sp, #12]
 800bfaa:	3307      	adds	r3, #7
 800bfac:	f023 0307 	bic.w	r3, r3, #7
 800bfb0:	3308      	adds	r3, #8
 800bfb2:	9303      	str	r3, [sp, #12]
 800bfb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bfb6:	4433      	add	r3, r6
 800bfb8:	9309      	str	r3, [sp, #36]	; 0x24
 800bfba:	e768      	b.n	800be8e <_svfiprintf_r+0x4e>
 800bfbc:	fb0c 3202 	mla	r2, ip, r2, r3
 800bfc0:	460c      	mov	r4, r1
 800bfc2:	2001      	movs	r0, #1
 800bfc4:	e7a6      	b.n	800bf14 <_svfiprintf_r+0xd4>
 800bfc6:	2300      	movs	r3, #0
 800bfc8:	3401      	adds	r4, #1
 800bfca:	9305      	str	r3, [sp, #20]
 800bfcc:	4619      	mov	r1, r3
 800bfce:	f04f 0c0a 	mov.w	ip, #10
 800bfd2:	4620      	mov	r0, r4
 800bfd4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bfd8:	3a30      	subs	r2, #48	; 0x30
 800bfda:	2a09      	cmp	r2, #9
 800bfdc:	d903      	bls.n	800bfe6 <_svfiprintf_r+0x1a6>
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d0c6      	beq.n	800bf70 <_svfiprintf_r+0x130>
 800bfe2:	9105      	str	r1, [sp, #20]
 800bfe4:	e7c4      	b.n	800bf70 <_svfiprintf_r+0x130>
 800bfe6:	fb0c 2101 	mla	r1, ip, r1, r2
 800bfea:	4604      	mov	r4, r0
 800bfec:	2301      	movs	r3, #1
 800bfee:	e7f0      	b.n	800bfd2 <_svfiprintf_r+0x192>
 800bff0:	ab03      	add	r3, sp, #12
 800bff2:	9300      	str	r3, [sp, #0]
 800bff4:	462a      	mov	r2, r5
 800bff6:	4b10      	ldr	r3, [pc, #64]	; (800c038 <_svfiprintf_r+0x1f8>)
 800bff8:	a904      	add	r1, sp, #16
 800bffa:	4638      	mov	r0, r7
 800bffc:	f3af 8000 	nop.w
 800c000:	1c42      	adds	r2, r0, #1
 800c002:	4606      	mov	r6, r0
 800c004:	d1d6      	bne.n	800bfb4 <_svfiprintf_r+0x174>
 800c006:	89ab      	ldrh	r3, [r5, #12]
 800c008:	065b      	lsls	r3, r3, #25
 800c00a:	f53f af2d 	bmi.w	800be68 <_svfiprintf_r+0x28>
 800c00e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c010:	b01d      	add	sp, #116	; 0x74
 800c012:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c016:	ab03      	add	r3, sp, #12
 800c018:	9300      	str	r3, [sp, #0]
 800c01a:	462a      	mov	r2, r5
 800c01c:	4b06      	ldr	r3, [pc, #24]	; (800c038 <_svfiprintf_r+0x1f8>)
 800c01e:	a904      	add	r1, sp, #16
 800c020:	4638      	mov	r0, r7
 800c022:	f000 f919 	bl	800c258 <_printf_i>
 800c026:	e7eb      	b.n	800c000 <_svfiprintf_r+0x1c0>
 800c028:	0800d188 	.word	0x0800d188
 800c02c:	0800d18e 	.word	0x0800d18e
 800c030:	0800d192 	.word	0x0800d192
 800c034:	00000000 	.word	0x00000000
 800c038:	0800bd8d 	.word	0x0800bd8d

0800c03c <sbrk_aligned>:
 800c03c:	b570      	push	{r4, r5, r6, lr}
 800c03e:	4e0e      	ldr	r6, [pc, #56]	; (800c078 <sbrk_aligned+0x3c>)
 800c040:	460c      	mov	r4, r1
 800c042:	6831      	ldr	r1, [r6, #0]
 800c044:	4605      	mov	r5, r0
 800c046:	b911      	cbnz	r1, 800c04e <sbrk_aligned+0x12>
 800c048:	f000 fa7e 	bl	800c548 <_sbrk_r>
 800c04c:	6030      	str	r0, [r6, #0]
 800c04e:	4621      	mov	r1, r4
 800c050:	4628      	mov	r0, r5
 800c052:	f000 fa79 	bl	800c548 <_sbrk_r>
 800c056:	1c43      	adds	r3, r0, #1
 800c058:	d00a      	beq.n	800c070 <sbrk_aligned+0x34>
 800c05a:	1cc4      	adds	r4, r0, #3
 800c05c:	f024 0403 	bic.w	r4, r4, #3
 800c060:	42a0      	cmp	r0, r4
 800c062:	d007      	beq.n	800c074 <sbrk_aligned+0x38>
 800c064:	1a21      	subs	r1, r4, r0
 800c066:	4628      	mov	r0, r5
 800c068:	f000 fa6e 	bl	800c548 <_sbrk_r>
 800c06c:	3001      	adds	r0, #1
 800c06e:	d101      	bne.n	800c074 <sbrk_aligned+0x38>
 800c070:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800c074:	4620      	mov	r0, r4
 800c076:	bd70      	pop	{r4, r5, r6, pc}
 800c078:	20000c60 	.word	0x20000c60

0800c07c <_malloc_r>:
 800c07c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c080:	1ccd      	adds	r5, r1, #3
 800c082:	f025 0503 	bic.w	r5, r5, #3
 800c086:	3508      	adds	r5, #8
 800c088:	2d0c      	cmp	r5, #12
 800c08a:	bf38      	it	cc
 800c08c:	250c      	movcc	r5, #12
 800c08e:	2d00      	cmp	r5, #0
 800c090:	4607      	mov	r7, r0
 800c092:	db01      	blt.n	800c098 <_malloc_r+0x1c>
 800c094:	42a9      	cmp	r1, r5
 800c096:	d905      	bls.n	800c0a4 <_malloc_r+0x28>
 800c098:	230c      	movs	r3, #12
 800c09a:	603b      	str	r3, [r7, #0]
 800c09c:	2600      	movs	r6, #0
 800c09e:	4630      	mov	r0, r6
 800c0a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c0a4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c178 <_malloc_r+0xfc>
 800c0a8:	f000 f9f8 	bl	800c49c <__malloc_lock>
 800c0ac:	f8d8 3000 	ldr.w	r3, [r8]
 800c0b0:	461c      	mov	r4, r3
 800c0b2:	bb5c      	cbnz	r4, 800c10c <_malloc_r+0x90>
 800c0b4:	4629      	mov	r1, r5
 800c0b6:	4638      	mov	r0, r7
 800c0b8:	f7ff ffc0 	bl	800c03c <sbrk_aligned>
 800c0bc:	1c43      	adds	r3, r0, #1
 800c0be:	4604      	mov	r4, r0
 800c0c0:	d155      	bne.n	800c16e <_malloc_r+0xf2>
 800c0c2:	f8d8 4000 	ldr.w	r4, [r8]
 800c0c6:	4626      	mov	r6, r4
 800c0c8:	2e00      	cmp	r6, #0
 800c0ca:	d145      	bne.n	800c158 <_malloc_r+0xdc>
 800c0cc:	2c00      	cmp	r4, #0
 800c0ce:	d048      	beq.n	800c162 <_malloc_r+0xe6>
 800c0d0:	6823      	ldr	r3, [r4, #0]
 800c0d2:	4631      	mov	r1, r6
 800c0d4:	4638      	mov	r0, r7
 800c0d6:	eb04 0903 	add.w	r9, r4, r3
 800c0da:	f000 fa35 	bl	800c548 <_sbrk_r>
 800c0de:	4581      	cmp	r9, r0
 800c0e0:	d13f      	bne.n	800c162 <_malloc_r+0xe6>
 800c0e2:	6821      	ldr	r1, [r4, #0]
 800c0e4:	1a6d      	subs	r5, r5, r1
 800c0e6:	4629      	mov	r1, r5
 800c0e8:	4638      	mov	r0, r7
 800c0ea:	f7ff ffa7 	bl	800c03c <sbrk_aligned>
 800c0ee:	3001      	adds	r0, #1
 800c0f0:	d037      	beq.n	800c162 <_malloc_r+0xe6>
 800c0f2:	6823      	ldr	r3, [r4, #0]
 800c0f4:	442b      	add	r3, r5
 800c0f6:	6023      	str	r3, [r4, #0]
 800c0f8:	f8d8 3000 	ldr.w	r3, [r8]
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d038      	beq.n	800c172 <_malloc_r+0xf6>
 800c100:	685a      	ldr	r2, [r3, #4]
 800c102:	42a2      	cmp	r2, r4
 800c104:	d12b      	bne.n	800c15e <_malloc_r+0xe2>
 800c106:	2200      	movs	r2, #0
 800c108:	605a      	str	r2, [r3, #4]
 800c10a:	e00f      	b.n	800c12c <_malloc_r+0xb0>
 800c10c:	6822      	ldr	r2, [r4, #0]
 800c10e:	1b52      	subs	r2, r2, r5
 800c110:	d41f      	bmi.n	800c152 <_malloc_r+0xd6>
 800c112:	2a0b      	cmp	r2, #11
 800c114:	d917      	bls.n	800c146 <_malloc_r+0xca>
 800c116:	1961      	adds	r1, r4, r5
 800c118:	42a3      	cmp	r3, r4
 800c11a:	6025      	str	r5, [r4, #0]
 800c11c:	bf18      	it	ne
 800c11e:	6059      	strne	r1, [r3, #4]
 800c120:	6863      	ldr	r3, [r4, #4]
 800c122:	bf08      	it	eq
 800c124:	f8c8 1000 	streq.w	r1, [r8]
 800c128:	5162      	str	r2, [r4, r5]
 800c12a:	604b      	str	r3, [r1, #4]
 800c12c:	4638      	mov	r0, r7
 800c12e:	f104 060b 	add.w	r6, r4, #11
 800c132:	f000 f9b9 	bl	800c4a8 <__malloc_unlock>
 800c136:	f026 0607 	bic.w	r6, r6, #7
 800c13a:	1d23      	adds	r3, r4, #4
 800c13c:	1af2      	subs	r2, r6, r3
 800c13e:	d0ae      	beq.n	800c09e <_malloc_r+0x22>
 800c140:	1b9b      	subs	r3, r3, r6
 800c142:	50a3      	str	r3, [r4, r2]
 800c144:	e7ab      	b.n	800c09e <_malloc_r+0x22>
 800c146:	42a3      	cmp	r3, r4
 800c148:	6862      	ldr	r2, [r4, #4]
 800c14a:	d1dd      	bne.n	800c108 <_malloc_r+0x8c>
 800c14c:	f8c8 2000 	str.w	r2, [r8]
 800c150:	e7ec      	b.n	800c12c <_malloc_r+0xb0>
 800c152:	4623      	mov	r3, r4
 800c154:	6864      	ldr	r4, [r4, #4]
 800c156:	e7ac      	b.n	800c0b2 <_malloc_r+0x36>
 800c158:	4634      	mov	r4, r6
 800c15a:	6876      	ldr	r6, [r6, #4]
 800c15c:	e7b4      	b.n	800c0c8 <_malloc_r+0x4c>
 800c15e:	4613      	mov	r3, r2
 800c160:	e7cc      	b.n	800c0fc <_malloc_r+0x80>
 800c162:	230c      	movs	r3, #12
 800c164:	603b      	str	r3, [r7, #0]
 800c166:	4638      	mov	r0, r7
 800c168:	f000 f99e 	bl	800c4a8 <__malloc_unlock>
 800c16c:	e797      	b.n	800c09e <_malloc_r+0x22>
 800c16e:	6025      	str	r5, [r4, #0]
 800c170:	e7dc      	b.n	800c12c <_malloc_r+0xb0>
 800c172:	605b      	str	r3, [r3, #4]
 800c174:	deff      	udf	#255	; 0xff
 800c176:	bf00      	nop
 800c178:	20000c5c 	.word	0x20000c5c

0800c17c <_printf_common>:
 800c17c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c180:	4616      	mov	r6, r2
 800c182:	4699      	mov	r9, r3
 800c184:	688a      	ldr	r2, [r1, #8]
 800c186:	690b      	ldr	r3, [r1, #16]
 800c188:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c18c:	4293      	cmp	r3, r2
 800c18e:	bfb8      	it	lt
 800c190:	4613      	movlt	r3, r2
 800c192:	6033      	str	r3, [r6, #0]
 800c194:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c198:	4607      	mov	r7, r0
 800c19a:	460c      	mov	r4, r1
 800c19c:	b10a      	cbz	r2, 800c1a2 <_printf_common+0x26>
 800c19e:	3301      	adds	r3, #1
 800c1a0:	6033      	str	r3, [r6, #0]
 800c1a2:	6823      	ldr	r3, [r4, #0]
 800c1a4:	0699      	lsls	r1, r3, #26
 800c1a6:	bf42      	ittt	mi
 800c1a8:	6833      	ldrmi	r3, [r6, #0]
 800c1aa:	3302      	addmi	r3, #2
 800c1ac:	6033      	strmi	r3, [r6, #0]
 800c1ae:	6825      	ldr	r5, [r4, #0]
 800c1b0:	f015 0506 	ands.w	r5, r5, #6
 800c1b4:	d106      	bne.n	800c1c4 <_printf_common+0x48>
 800c1b6:	f104 0a19 	add.w	sl, r4, #25
 800c1ba:	68e3      	ldr	r3, [r4, #12]
 800c1bc:	6832      	ldr	r2, [r6, #0]
 800c1be:	1a9b      	subs	r3, r3, r2
 800c1c0:	42ab      	cmp	r3, r5
 800c1c2:	dc26      	bgt.n	800c212 <_printf_common+0x96>
 800c1c4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c1c8:	1e13      	subs	r3, r2, #0
 800c1ca:	6822      	ldr	r2, [r4, #0]
 800c1cc:	bf18      	it	ne
 800c1ce:	2301      	movne	r3, #1
 800c1d0:	0692      	lsls	r2, r2, #26
 800c1d2:	d42b      	bmi.n	800c22c <_printf_common+0xb0>
 800c1d4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c1d8:	4649      	mov	r1, r9
 800c1da:	4638      	mov	r0, r7
 800c1dc:	47c0      	blx	r8
 800c1de:	3001      	adds	r0, #1
 800c1e0:	d01e      	beq.n	800c220 <_printf_common+0xa4>
 800c1e2:	6823      	ldr	r3, [r4, #0]
 800c1e4:	6922      	ldr	r2, [r4, #16]
 800c1e6:	f003 0306 	and.w	r3, r3, #6
 800c1ea:	2b04      	cmp	r3, #4
 800c1ec:	bf02      	ittt	eq
 800c1ee:	68e5      	ldreq	r5, [r4, #12]
 800c1f0:	6833      	ldreq	r3, [r6, #0]
 800c1f2:	1aed      	subeq	r5, r5, r3
 800c1f4:	68a3      	ldr	r3, [r4, #8]
 800c1f6:	bf0c      	ite	eq
 800c1f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c1fc:	2500      	movne	r5, #0
 800c1fe:	4293      	cmp	r3, r2
 800c200:	bfc4      	itt	gt
 800c202:	1a9b      	subgt	r3, r3, r2
 800c204:	18ed      	addgt	r5, r5, r3
 800c206:	2600      	movs	r6, #0
 800c208:	341a      	adds	r4, #26
 800c20a:	42b5      	cmp	r5, r6
 800c20c:	d11a      	bne.n	800c244 <_printf_common+0xc8>
 800c20e:	2000      	movs	r0, #0
 800c210:	e008      	b.n	800c224 <_printf_common+0xa8>
 800c212:	2301      	movs	r3, #1
 800c214:	4652      	mov	r2, sl
 800c216:	4649      	mov	r1, r9
 800c218:	4638      	mov	r0, r7
 800c21a:	47c0      	blx	r8
 800c21c:	3001      	adds	r0, #1
 800c21e:	d103      	bne.n	800c228 <_printf_common+0xac>
 800c220:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c224:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c228:	3501      	adds	r5, #1
 800c22a:	e7c6      	b.n	800c1ba <_printf_common+0x3e>
 800c22c:	18e1      	adds	r1, r4, r3
 800c22e:	1c5a      	adds	r2, r3, #1
 800c230:	2030      	movs	r0, #48	; 0x30
 800c232:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c236:	4422      	add	r2, r4
 800c238:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c23c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c240:	3302      	adds	r3, #2
 800c242:	e7c7      	b.n	800c1d4 <_printf_common+0x58>
 800c244:	2301      	movs	r3, #1
 800c246:	4622      	mov	r2, r4
 800c248:	4649      	mov	r1, r9
 800c24a:	4638      	mov	r0, r7
 800c24c:	47c0      	blx	r8
 800c24e:	3001      	adds	r0, #1
 800c250:	d0e6      	beq.n	800c220 <_printf_common+0xa4>
 800c252:	3601      	adds	r6, #1
 800c254:	e7d9      	b.n	800c20a <_printf_common+0x8e>
	...

0800c258 <_printf_i>:
 800c258:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c25c:	7e0f      	ldrb	r7, [r1, #24]
 800c25e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c260:	2f78      	cmp	r7, #120	; 0x78
 800c262:	4691      	mov	r9, r2
 800c264:	4680      	mov	r8, r0
 800c266:	460c      	mov	r4, r1
 800c268:	469a      	mov	sl, r3
 800c26a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c26e:	d807      	bhi.n	800c280 <_printf_i+0x28>
 800c270:	2f62      	cmp	r7, #98	; 0x62
 800c272:	d80a      	bhi.n	800c28a <_printf_i+0x32>
 800c274:	2f00      	cmp	r7, #0
 800c276:	f000 80d4 	beq.w	800c422 <_printf_i+0x1ca>
 800c27a:	2f58      	cmp	r7, #88	; 0x58
 800c27c:	f000 80c0 	beq.w	800c400 <_printf_i+0x1a8>
 800c280:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c284:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c288:	e03a      	b.n	800c300 <_printf_i+0xa8>
 800c28a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c28e:	2b15      	cmp	r3, #21
 800c290:	d8f6      	bhi.n	800c280 <_printf_i+0x28>
 800c292:	a101      	add	r1, pc, #4	; (adr r1, 800c298 <_printf_i+0x40>)
 800c294:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c298:	0800c2f1 	.word	0x0800c2f1
 800c29c:	0800c305 	.word	0x0800c305
 800c2a0:	0800c281 	.word	0x0800c281
 800c2a4:	0800c281 	.word	0x0800c281
 800c2a8:	0800c281 	.word	0x0800c281
 800c2ac:	0800c281 	.word	0x0800c281
 800c2b0:	0800c305 	.word	0x0800c305
 800c2b4:	0800c281 	.word	0x0800c281
 800c2b8:	0800c281 	.word	0x0800c281
 800c2bc:	0800c281 	.word	0x0800c281
 800c2c0:	0800c281 	.word	0x0800c281
 800c2c4:	0800c409 	.word	0x0800c409
 800c2c8:	0800c331 	.word	0x0800c331
 800c2cc:	0800c3c3 	.word	0x0800c3c3
 800c2d0:	0800c281 	.word	0x0800c281
 800c2d4:	0800c281 	.word	0x0800c281
 800c2d8:	0800c42b 	.word	0x0800c42b
 800c2dc:	0800c281 	.word	0x0800c281
 800c2e0:	0800c331 	.word	0x0800c331
 800c2e4:	0800c281 	.word	0x0800c281
 800c2e8:	0800c281 	.word	0x0800c281
 800c2ec:	0800c3cb 	.word	0x0800c3cb
 800c2f0:	682b      	ldr	r3, [r5, #0]
 800c2f2:	1d1a      	adds	r2, r3, #4
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	602a      	str	r2, [r5, #0]
 800c2f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c2fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c300:	2301      	movs	r3, #1
 800c302:	e09f      	b.n	800c444 <_printf_i+0x1ec>
 800c304:	6820      	ldr	r0, [r4, #0]
 800c306:	682b      	ldr	r3, [r5, #0]
 800c308:	0607      	lsls	r7, r0, #24
 800c30a:	f103 0104 	add.w	r1, r3, #4
 800c30e:	6029      	str	r1, [r5, #0]
 800c310:	d501      	bpl.n	800c316 <_printf_i+0xbe>
 800c312:	681e      	ldr	r6, [r3, #0]
 800c314:	e003      	b.n	800c31e <_printf_i+0xc6>
 800c316:	0646      	lsls	r6, r0, #25
 800c318:	d5fb      	bpl.n	800c312 <_printf_i+0xba>
 800c31a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800c31e:	2e00      	cmp	r6, #0
 800c320:	da03      	bge.n	800c32a <_printf_i+0xd2>
 800c322:	232d      	movs	r3, #45	; 0x2d
 800c324:	4276      	negs	r6, r6
 800c326:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c32a:	485a      	ldr	r0, [pc, #360]	; (800c494 <_printf_i+0x23c>)
 800c32c:	230a      	movs	r3, #10
 800c32e:	e012      	b.n	800c356 <_printf_i+0xfe>
 800c330:	682b      	ldr	r3, [r5, #0]
 800c332:	6820      	ldr	r0, [r4, #0]
 800c334:	1d19      	adds	r1, r3, #4
 800c336:	6029      	str	r1, [r5, #0]
 800c338:	0605      	lsls	r5, r0, #24
 800c33a:	d501      	bpl.n	800c340 <_printf_i+0xe8>
 800c33c:	681e      	ldr	r6, [r3, #0]
 800c33e:	e002      	b.n	800c346 <_printf_i+0xee>
 800c340:	0641      	lsls	r1, r0, #25
 800c342:	d5fb      	bpl.n	800c33c <_printf_i+0xe4>
 800c344:	881e      	ldrh	r6, [r3, #0]
 800c346:	4853      	ldr	r0, [pc, #332]	; (800c494 <_printf_i+0x23c>)
 800c348:	2f6f      	cmp	r7, #111	; 0x6f
 800c34a:	bf0c      	ite	eq
 800c34c:	2308      	moveq	r3, #8
 800c34e:	230a      	movne	r3, #10
 800c350:	2100      	movs	r1, #0
 800c352:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c356:	6865      	ldr	r5, [r4, #4]
 800c358:	60a5      	str	r5, [r4, #8]
 800c35a:	2d00      	cmp	r5, #0
 800c35c:	bfa2      	ittt	ge
 800c35e:	6821      	ldrge	r1, [r4, #0]
 800c360:	f021 0104 	bicge.w	r1, r1, #4
 800c364:	6021      	strge	r1, [r4, #0]
 800c366:	b90e      	cbnz	r6, 800c36c <_printf_i+0x114>
 800c368:	2d00      	cmp	r5, #0
 800c36a:	d04b      	beq.n	800c404 <_printf_i+0x1ac>
 800c36c:	4615      	mov	r5, r2
 800c36e:	fbb6 f1f3 	udiv	r1, r6, r3
 800c372:	fb03 6711 	mls	r7, r3, r1, r6
 800c376:	5dc7      	ldrb	r7, [r0, r7]
 800c378:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c37c:	4637      	mov	r7, r6
 800c37e:	42bb      	cmp	r3, r7
 800c380:	460e      	mov	r6, r1
 800c382:	d9f4      	bls.n	800c36e <_printf_i+0x116>
 800c384:	2b08      	cmp	r3, #8
 800c386:	d10b      	bne.n	800c3a0 <_printf_i+0x148>
 800c388:	6823      	ldr	r3, [r4, #0]
 800c38a:	07de      	lsls	r6, r3, #31
 800c38c:	d508      	bpl.n	800c3a0 <_printf_i+0x148>
 800c38e:	6923      	ldr	r3, [r4, #16]
 800c390:	6861      	ldr	r1, [r4, #4]
 800c392:	4299      	cmp	r1, r3
 800c394:	bfde      	ittt	le
 800c396:	2330      	movle	r3, #48	; 0x30
 800c398:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c39c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800c3a0:	1b52      	subs	r2, r2, r5
 800c3a2:	6122      	str	r2, [r4, #16]
 800c3a4:	f8cd a000 	str.w	sl, [sp]
 800c3a8:	464b      	mov	r3, r9
 800c3aa:	aa03      	add	r2, sp, #12
 800c3ac:	4621      	mov	r1, r4
 800c3ae:	4640      	mov	r0, r8
 800c3b0:	f7ff fee4 	bl	800c17c <_printf_common>
 800c3b4:	3001      	adds	r0, #1
 800c3b6:	d14a      	bne.n	800c44e <_printf_i+0x1f6>
 800c3b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c3bc:	b004      	add	sp, #16
 800c3be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c3c2:	6823      	ldr	r3, [r4, #0]
 800c3c4:	f043 0320 	orr.w	r3, r3, #32
 800c3c8:	6023      	str	r3, [r4, #0]
 800c3ca:	4833      	ldr	r0, [pc, #204]	; (800c498 <_printf_i+0x240>)
 800c3cc:	2778      	movs	r7, #120	; 0x78
 800c3ce:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c3d2:	6823      	ldr	r3, [r4, #0]
 800c3d4:	6829      	ldr	r1, [r5, #0]
 800c3d6:	061f      	lsls	r7, r3, #24
 800c3d8:	f851 6b04 	ldr.w	r6, [r1], #4
 800c3dc:	d402      	bmi.n	800c3e4 <_printf_i+0x18c>
 800c3de:	065f      	lsls	r7, r3, #25
 800c3e0:	bf48      	it	mi
 800c3e2:	b2b6      	uxthmi	r6, r6
 800c3e4:	07df      	lsls	r7, r3, #31
 800c3e6:	bf48      	it	mi
 800c3e8:	f043 0320 	orrmi.w	r3, r3, #32
 800c3ec:	6029      	str	r1, [r5, #0]
 800c3ee:	bf48      	it	mi
 800c3f0:	6023      	strmi	r3, [r4, #0]
 800c3f2:	b91e      	cbnz	r6, 800c3fc <_printf_i+0x1a4>
 800c3f4:	6823      	ldr	r3, [r4, #0]
 800c3f6:	f023 0320 	bic.w	r3, r3, #32
 800c3fa:	6023      	str	r3, [r4, #0]
 800c3fc:	2310      	movs	r3, #16
 800c3fe:	e7a7      	b.n	800c350 <_printf_i+0xf8>
 800c400:	4824      	ldr	r0, [pc, #144]	; (800c494 <_printf_i+0x23c>)
 800c402:	e7e4      	b.n	800c3ce <_printf_i+0x176>
 800c404:	4615      	mov	r5, r2
 800c406:	e7bd      	b.n	800c384 <_printf_i+0x12c>
 800c408:	682b      	ldr	r3, [r5, #0]
 800c40a:	6826      	ldr	r6, [r4, #0]
 800c40c:	6961      	ldr	r1, [r4, #20]
 800c40e:	1d18      	adds	r0, r3, #4
 800c410:	6028      	str	r0, [r5, #0]
 800c412:	0635      	lsls	r5, r6, #24
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	d501      	bpl.n	800c41c <_printf_i+0x1c4>
 800c418:	6019      	str	r1, [r3, #0]
 800c41a:	e002      	b.n	800c422 <_printf_i+0x1ca>
 800c41c:	0670      	lsls	r0, r6, #25
 800c41e:	d5fb      	bpl.n	800c418 <_printf_i+0x1c0>
 800c420:	8019      	strh	r1, [r3, #0]
 800c422:	2300      	movs	r3, #0
 800c424:	6123      	str	r3, [r4, #16]
 800c426:	4615      	mov	r5, r2
 800c428:	e7bc      	b.n	800c3a4 <_printf_i+0x14c>
 800c42a:	682b      	ldr	r3, [r5, #0]
 800c42c:	1d1a      	adds	r2, r3, #4
 800c42e:	602a      	str	r2, [r5, #0]
 800c430:	681d      	ldr	r5, [r3, #0]
 800c432:	6862      	ldr	r2, [r4, #4]
 800c434:	2100      	movs	r1, #0
 800c436:	4628      	mov	r0, r5
 800c438:	f7f3 fea2 	bl	8000180 <memchr>
 800c43c:	b108      	cbz	r0, 800c442 <_printf_i+0x1ea>
 800c43e:	1b40      	subs	r0, r0, r5
 800c440:	6060      	str	r0, [r4, #4]
 800c442:	6863      	ldr	r3, [r4, #4]
 800c444:	6123      	str	r3, [r4, #16]
 800c446:	2300      	movs	r3, #0
 800c448:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c44c:	e7aa      	b.n	800c3a4 <_printf_i+0x14c>
 800c44e:	6923      	ldr	r3, [r4, #16]
 800c450:	462a      	mov	r2, r5
 800c452:	4649      	mov	r1, r9
 800c454:	4640      	mov	r0, r8
 800c456:	47d0      	blx	sl
 800c458:	3001      	adds	r0, #1
 800c45a:	d0ad      	beq.n	800c3b8 <_printf_i+0x160>
 800c45c:	6823      	ldr	r3, [r4, #0]
 800c45e:	079b      	lsls	r3, r3, #30
 800c460:	d413      	bmi.n	800c48a <_printf_i+0x232>
 800c462:	68e0      	ldr	r0, [r4, #12]
 800c464:	9b03      	ldr	r3, [sp, #12]
 800c466:	4298      	cmp	r0, r3
 800c468:	bfb8      	it	lt
 800c46a:	4618      	movlt	r0, r3
 800c46c:	e7a6      	b.n	800c3bc <_printf_i+0x164>
 800c46e:	2301      	movs	r3, #1
 800c470:	4632      	mov	r2, r6
 800c472:	4649      	mov	r1, r9
 800c474:	4640      	mov	r0, r8
 800c476:	47d0      	blx	sl
 800c478:	3001      	adds	r0, #1
 800c47a:	d09d      	beq.n	800c3b8 <_printf_i+0x160>
 800c47c:	3501      	adds	r5, #1
 800c47e:	68e3      	ldr	r3, [r4, #12]
 800c480:	9903      	ldr	r1, [sp, #12]
 800c482:	1a5b      	subs	r3, r3, r1
 800c484:	42ab      	cmp	r3, r5
 800c486:	dcf2      	bgt.n	800c46e <_printf_i+0x216>
 800c488:	e7eb      	b.n	800c462 <_printf_i+0x20a>
 800c48a:	2500      	movs	r5, #0
 800c48c:	f104 0619 	add.w	r6, r4, #25
 800c490:	e7f5      	b.n	800c47e <_printf_i+0x226>
 800c492:	bf00      	nop
 800c494:	0800d199 	.word	0x0800d199
 800c498:	0800d1aa 	.word	0x0800d1aa

0800c49c <__malloc_lock>:
 800c49c:	4801      	ldr	r0, [pc, #4]	; (800c4a4 <__malloc_lock+0x8>)
 800c49e:	f7ff bc65 	b.w	800bd6c <__retarget_lock_acquire_recursive>
 800c4a2:	bf00      	nop
 800c4a4:	20000c58 	.word	0x20000c58

0800c4a8 <__malloc_unlock>:
 800c4a8:	4801      	ldr	r0, [pc, #4]	; (800c4b0 <__malloc_unlock+0x8>)
 800c4aa:	f7ff bc60 	b.w	800bd6e <__retarget_lock_release_recursive>
 800c4ae:	bf00      	nop
 800c4b0:	20000c58 	.word	0x20000c58

0800c4b4 <_realloc_r>:
 800c4b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c4b8:	4680      	mov	r8, r0
 800c4ba:	4614      	mov	r4, r2
 800c4bc:	460e      	mov	r6, r1
 800c4be:	b921      	cbnz	r1, 800c4ca <_realloc_r+0x16>
 800c4c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c4c4:	4611      	mov	r1, r2
 800c4c6:	f7ff bdd9 	b.w	800c07c <_malloc_r>
 800c4ca:	b92a      	cbnz	r2, 800c4d8 <_realloc_r+0x24>
 800c4cc:	f000 f84c 	bl	800c568 <_free_r>
 800c4d0:	4625      	mov	r5, r4
 800c4d2:	4628      	mov	r0, r5
 800c4d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c4d8:	f000 f890 	bl	800c5fc <_malloc_usable_size_r>
 800c4dc:	4284      	cmp	r4, r0
 800c4de:	4607      	mov	r7, r0
 800c4e0:	d802      	bhi.n	800c4e8 <_realloc_r+0x34>
 800c4e2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c4e6:	d812      	bhi.n	800c50e <_realloc_r+0x5a>
 800c4e8:	4621      	mov	r1, r4
 800c4ea:	4640      	mov	r0, r8
 800c4ec:	f7ff fdc6 	bl	800c07c <_malloc_r>
 800c4f0:	4605      	mov	r5, r0
 800c4f2:	2800      	cmp	r0, #0
 800c4f4:	d0ed      	beq.n	800c4d2 <_realloc_r+0x1e>
 800c4f6:	42bc      	cmp	r4, r7
 800c4f8:	4622      	mov	r2, r4
 800c4fa:	4631      	mov	r1, r6
 800c4fc:	bf28      	it	cs
 800c4fe:	463a      	movcs	r2, r7
 800c500:	f7ff fc36 	bl	800bd70 <memcpy>
 800c504:	4631      	mov	r1, r6
 800c506:	4640      	mov	r0, r8
 800c508:	f000 f82e 	bl	800c568 <_free_r>
 800c50c:	e7e1      	b.n	800c4d2 <_realloc_r+0x1e>
 800c50e:	4635      	mov	r5, r6
 800c510:	e7df      	b.n	800c4d2 <_realloc_r+0x1e>

0800c512 <memmove>:
 800c512:	4288      	cmp	r0, r1
 800c514:	b510      	push	{r4, lr}
 800c516:	eb01 0402 	add.w	r4, r1, r2
 800c51a:	d902      	bls.n	800c522 <memmove+0x10>
 800c51c:	4284      	cmp	r4, r0
 800c51e:	4623      	mov	r3, r4
 800c520:	d807      	bhi.n	800c532 <memmove+0x20>
 800c522:	1e43      	subs	r3, r0, #1
 800c524:	42a1      	cmp	r1, r4
 800c526:	d008      	beq.n	800c53a <memmove+0x28>
 800c528:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c52c:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c530:	e7f8      	b.n	800c524 <memmove+0x12>
 800c532:	4402      	add	r2, r0
 800c534:	4601      	mov	r1, r0
 800c536:	428a      	cmp	r2, r1
 800c538:	d100      	bne.n	800c53c <memmove+0x2a>
 800c53a:	bd10      	pop	{r4, pc}
 800c53c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c540:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c544:	e7f7      	b.n	800c536 <memmove+0x24>
	...

0800c548 <_sbrk_r>:
 800c548:	b538      	push	{r3, r4, r5, lr}
 800c54a:	4d06      	ldr	r5, [pc, #24]	; (800c564 <_sbrk_r+0x1c>)
 800c54c:	2300      	movs	r3, #0
 800c54e:	4604      	mov	r4, r0
 800c550:	4608      	mov	r0, r1
 800c552:	602b      	str	r3, [r5, #0]
 800c554:	f7f6 fb76 	bl	8002c44 <_sbrk>
 800c558:	1c43      	adds	r3, r0, #1
 800c55a:	d102      	bne.n	800c562 <_sbrk_r+0x1a>
 800c55c:	682b      	ldr	r3, [r5, #0]
 800c55e:	b103      	cbz	r3, 800c562 <_sbrk_r+0x1a>
 800c560:	6023      	str	r3, [r4, #0]
 800c562:	bd38      	pop	{r3, r4, r5, pc}
 800c564:	20000c64 	.word	0x20000c64

0800c568 <_free_r>:
 800c568:	b538      	push	{r3, r4, r5, lr}
 800c56a:	4605      	mov	r5, r0
 800c56c:	2900      	cmp	r1, #0
 800c56e:	d041      	beq.n	800c5f4 <_free_r+0x8c>
 800c570:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c574:	1f0c      	subs	r4, r1, #4
 800c576:	2b00      	cmp	r3, #0
 800c578:	bfb8      	it	lt
 800c57a:	18e4      	addlt	r4, r4, r3
 800c57c:	f7ff ff8e 	bl	800c49c <__malloc_lock>
 800c580:	4a1d      	ldr	r2, [pc, #116]	; (800c5f8 <_free_r+0x90>)
 800c582:	6813      	ldr	r3, [r2, #0]
 800c584:	b933      	cbnz	r3, 800c594 <_free_r+0x2c>
 800c586:	6063      	str	r3, [r4, #4]
 800c588:	6014      	str	r4, [r2, #0]
 800c58a:	4628      	mov	r0, r5
 800c58c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c590:	f7ff bf8a 	b.w	800c4a8 <__malloc_unlock>
 800c594:	42a3      	cmp	r3, r4
 800c596:	d908      	bls.n	800c5aa <_free_r+0x42>
 800c598:	6820      	ldr	r0, [r4, #0]
 800c59a:	1821      	adds	r1, r4, r0
 800c59c:	428b      	cmp	r3, r1
 800c59e:	bf01      	itttt	eq
 800c5a0:	6819      	ldreq	r1, [r3, #0]
 800c5a2:	685b      	ldreq	r3, [r3, #4]
 800c5a4:	1809      	addeq	r1, r1, r0
 800c5a6:	6021      	streq	r1, [r4, #0]
 800c5a8:	e7ed      	b.n	800c586 <_free_r+0x1e>
 800c5aa:	461a      	mov	r2, r3
 800c5ac:	685b      	ldr	r3, [r3, #4]
 800c5ae:	b10b      	cbz	r3, 800c5b4 <_free_r+0x4c>
 800c5b0:	42a3      	cmp	r3, r4
 800c5b2:	d9fa      	bls.n	800c5aa <_free_r+0x42>
 800c5b4:	6811      	ldr	r1, [r2, #0]
 800c5b6:	1850      	adds	r0, r2, r1
 800c5b8:	42a0      	cmp	r0, r4
 800c5ba:	d10b      	bne.n	800c5d4 <_free_r+0x6c>
 800c5bc:	6820      	ldr	r0, [r4, #0]
 800c5be:	4401      	add	r1, r0
 800c5c0:	1850      	adds	r0, r2, r1
 800c5c2:	4283      	cmp	r3, r0
 800c5c4:	6011      	str	r1, [r2, #0]
 800c5c6:	d1e0      	bne.n	800c58a <_free_r+0x22>
 800c5c8:	6818      	ldr	r0, [r3, #0]
 800c5ca:	685b      	ldr	r3, [r3, #4]
 800c5cc:	6053      	str	r3, [r2, #4]
 800c5ce:	4408      	add	r0, r1
 800c5d0:	6010      	str	r0, [r2, #0]
 800c5d2:	e7da      	b.n	800c58a <_free_r+0x22>
 800c5d4:	d902      	bls.n	800c5dc <_free_r+0x74>
 800c5d6:	230c      	movs	r3, #12
 800c5d8:	602b      	str	r3, [r5, #0]
 800c5da:	e7d6      	b.n	800c58a <_free_r+0x22>
 800c5dc:	6820      	ldr	r0, [r4, #0]
 800c5de:	1821      	adds	r1, r4, r0
 800c5e0:	428b      	cmp	r3, r1
 800c5e2:	bf04      	itt	eq
 800c5e4:	6819      	ldreq	r1, [r3, #0]
 800c5e6:	685b      	ldreq	r3, [r3, #4]
 800c5e8:	6063      	str	r3, [r4, #4]
 800c5ea:	bf04      	itt	eq
 800c5ec:	1809      	addeq	r1, r1, r0
 800c5ee:	6021      	streq	r1, [r4, #0]
 800c5f0:	6054      	str	r4, [r2, #4]
 800c5f2:	e7ca      	b.n	800c58a <_free_r+0x22>
 800c5f4:	bd38      	pop	{r3, r4, r5, pc}
 800c5f6:	bf00      	nop
 800c5f8:	20000c5c 	.word	0x20000c5c

0800c5fc <_malloc_usable_size_r>:
 800c5fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c600:	1f18      	subs	r0, r3, #4
 800c602:	2b00      	cmp	r3, #0
 800c604:	bfbc      	itt	lt
 800c606:	580b      	ldrlt	r3, [r1, r0]
 800c608:	18c0      	addlt	r0, r0, r3
 800c60a:	4770      	bx	lr

0800c60c <_init>:
 800c60c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c60e:	bf00      	nop
 800c610:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c612:	bc08      	pop	{r3}
 800c614:	469e      	mov	lr, r3
 800c616:	4770      	bx	lr

0800c618 <_fini>:
 800c618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c61a:	bf00      	nop
 800c61c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c61e:	bc08      	pop	{r3}
 800c620:	469e      	mov	lr, r3
 800c622:	4770      	bx	lr
